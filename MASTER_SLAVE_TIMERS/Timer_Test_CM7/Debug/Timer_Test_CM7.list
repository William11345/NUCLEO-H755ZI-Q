
Timer_Test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000061fc  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800649c  0800649c  0000749c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006504  08006504  00008070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006504  08006504  00007504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800650c  0800650c  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800650c  0800650c  0000750c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006510  08006510  00007510  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  24000000  08006514  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  24000070  08006584  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000320  08006584  00008320  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001543a  00000000  00000000  0000809e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002675  00000000  00000000  0001d4d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  0001fb50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d81  00000000  00000000  00020ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b9d6  00000000  00000000  00021a29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ca3  00000000  00000000  0005d3ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00189fd6  00000000  00000000  000730a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001fd078  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050f4  00000000  00000000  001fd0bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  002021b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006484 	.word	0x08006484

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	08006484 	.word	0x08006484

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b0:	4b49      	ldr	r3, [pc, #292]	@ (80007d8 <SystemInit+0x12c>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006b6:	4a48      	ldr	r2, [pc, #288]	@ (80007d8 <SystemInit+0x12c>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006c0:	4b45      	ldr	r3, [pc, #276]	@ (80007d8 <SystemInit+0x12c>)
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	4a44      	ldr	r2, [pc, #272]	@ (80007d8 <SystemInit+0x12c>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006cc:	4b43      	ldr	r3, [pc, #268]	@ (80007dc <SystemInit+0x130>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	d807      	bhi.n	80006e8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d8:	4b40      	ldr	r3, [pc, #256]	@ (80007dc <SystemInit+0x130>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f023 030f 	bic.w	r3, r3, #15
 80006e0:	4a3e      	ldr	r2, [pc, #248]	@ (80007dc <SystemInit+0x130>)
 80006e2:	f043 0307 	orr.w	r3, r3, #7
 80006e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006e8:	4b3d      	ldr	r3, [pc, #244]	@ (80007e0 <SystemInit+0x134>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a3c      	ldr	r2, [pc, #240]	@ (80007e0 <SystemInit+0x134>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f4:	4b3a      	ldr	r3, [pc, #232]	@ (80007e0 <SystemInit+0x134>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006fa:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <SystemInit+0x134>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4938      	ldr	r1, [pc, #224]	@ (80007e0 <SystemInit+0x134>)
 8000700:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <SystemInit+0x138>)
 8000702:	4013      	ands	r3, r2
 8000704:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000706:	4b35      	ldr	r3, [pc, #212]	@ (80007dc <SystemInit+0x130>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	2b00      	cmp	r3, #0
 8000710:	d007      	beq.n	8000722 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000712:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <SystemInit+0x130>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f023 030f 	bic.w	r3, r3, #15
 800071a:	4a30      	ldr	r2, [pc, #192]	@ (80007dc <SystemInit+0x130>)
 800071c:	f043 0307 	orr.w	r3, r3, #7
 8000720:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000722:	4b2f      	ldr	r3, [pc, #188]	@ (80007e0 <SystemInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000728:	4b2d      	ldr	r3, [pc, #180]	@ (80007e0 <SystemInit+0x134>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800072e:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <SystemInit+0x134>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000734:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <SystemInit+0x134>)
 8000736:	4a2c      	ldr	r2, [pc, #176]	@ (80007e8 <SystemInit+0x13c>)
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800073a:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <SystemInit+0x134>)
 800073c:	4a2b      	ldr	r2, [pc, #172]	@ (80007ec <SystemInit+0x140>)
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000740:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <SystemInit+0x134>)
 8000742:	4a2b      	ldr	r2, [pc, #172]	@ (80007f0 <SystemInit+0x144>)
 8000744:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <SystemInit+0x134>)
 8000748:	2200      	movs	r2, #0
 800074a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800074c:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <SystemInit+0x134>)
 800074e:	4a28      	ldr	r2, [pc, #160]	@ (80007f0 <SystemInit+0x144>)
 8000750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000752:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <SystemInit+0x134>)
 8000754:	2200      	movs	r2, #0
 8000756:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000758:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <SystemInit+0x134>)
 800075a:	4a25      	ldr	r2, [pc, #148]	@ (80007f0 <SystemInit+0x144>)
 800075c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800075e:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <SystemInit+0x134>)
 8000760:	2200      	movs	r2, #0
 8000762:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <SystemInit+0x134>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1d      	ldr	r2, [pc, #116]	@ (80007e0 <SystemInit+0x134>)
 800076a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <SystemInit+0x134>)
 8000772:	2200      	movs	r2, #0
 8000774:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000776:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <SystemInit+0x148>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800077a:	4a1e      	ldr	r2, [pc, #120]	@ (80007f4 <SystemInit+0x148>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000780:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000782:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <SystemInit+0x14c>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <SystemInit+0x150>)
 8000788:	4013      	ands	r3, r2
 800078a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800078e:	d202      	bcs.n	8000796 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <SystemInit+0x154>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <SystemInit+0x134>)
 8000798:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800079c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d113      	bne.n	80007cc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <SystemInit+0x134>)
 80007a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007aa:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <SystemInit+0x134>)
 80007ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <SystemInit+0x158>)
 80007b6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ba:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <SystemInit+0x134>)
 80007be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007c2:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <SystemInit+0x134>)
 80007c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00
 80007dc:	52002000 	.word	0x52002000
 80007e0:	58024400 	.word	0x58024400
 80007e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007e8:	02020200 	.word	0x02020200
 80007ec:	01ff0000 	.word	0x01ff0000
 80007f0:	01010280 	.word	0x01010280
 80007f4:	580000c0 	.word	0x580000c0
 80007f8:	5c001000 	.word	0x5c001000
 80007fc:	ffff0000 	.word	0xffff0000
 8000800:	51008108 	.word	0x51008108
 8000804:	52004000 	.word	0x52004000

08000808 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <ExitRun0Mode+0x2c>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <ExitRun0Mode+0x2c>)
 8000812:	f023 0302 	bic.w	r3, r3, #2
 8000816:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000818:	bf00      	nop
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <ExitRun0Mode+0x2c>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f9      	beq.n	800081a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	58024800 	.word	0x58024800

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800083e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000842:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000844:	bf00      	nop
 8000846:	4b3d      	ldr	r3, [pc, #244]	@ (800093c <main+0x104>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800084e:	2b00      	cmp	r3, #0
 8000850:	d004      	beq.n	800085c <main+0x24>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	1e5a      	subs	r2, r3, #1
 8000856:	607a      	str	r2, [r7, #4]
 8000858:	2b00      	cmp	r3, #0
 800085a:	dcf4      	bgt.n	8000846 <main+0xe>
  if ( timeout < 0 )
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	da01      	bge.n	8000866 <main+0x2e>
  {
  Error_Handler();
 8000862:	f000 fac9 	bl	8000df8 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000866:	f000 fd75 	bl	8001354 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086a:	f000 f873 	bl	8000954 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800086e:	4b33      	ldr	r3, [pc, #204]	@ (800093c <main+0x104>)
 8000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000874:	4a31      	ldr	r2, [pc, #196]	@ (800093c <main+0x104>)
 8000876:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800087a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800087e:	4b2f      	ldr	r3, [pc, #188]	@ (800093c <main+0x104>)
 8000880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800088c:	2000      	movs	r0, #0
 800088e:	f001 f8eb 	bl	8001a68 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000892:	2100      	movs	r1, #0
 8000894:	2000      	movs	r0, #0
 8000896:	f001 f901 	bl	8001a9c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800089a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800089e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008a0:	bf00      	nop
 80008a2:	4b26      	ldr	r3, [pc, #152]	@ (800093c <main+0x104>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d104      	bne.n	80008b8 <main+0x80>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	1e5a      	subs	r2, r3, #1
 80008b2:	607a      	str	r2, [r7, #4]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	dcf4      	bgt.n	80008a2 <main+0x6a>
if ( timeout < 0 )
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	da01      	bge.n	80008c2 <main+0x8a>
{
Error_Handler();
 80008be:	f000 fa9b 	bl	8000df8 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c2:	f000 fa0b 	bl	8000cdc <MX_GPIO_Init>
  MX_TIM1_Init();
 80008c6:	f000 f8c1 	bl	8000a4c <MX_TIM1_Init>
  MX_TIM2_Init();
 80008ca:	f000 f991 	bl	8000bf0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80008ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000940 <main+0x108>)
 80008d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d4:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000940 <main+0x108>)
 80008d8:	2200      	movs	r2, #0
 80008da:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80008dc:	4b18      	ldr	r3, [pc, #96]	@ (8000940 <main+0x108>)
 80008de:	2200      	movs	r2, #0
 80008e0:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80008e2:	4b17      	ldr	r3, [pc, #92]	@ (8000940 <main+0x108>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80008e8:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <main+0x108>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80008ee:	4914      	ldr	r1, [pc, #80]	@ (8000940 <main+0x108>)
 80008f0:	2000      	movs	r0, #0
 80008f2:	f000 fc59 	bl	80011a8 <BSP_COM_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <main+0xc8>
  {
    Error_Handler();
 80008fc:	f000 fa7c 	bl	8000df8 <Error_Handler>
  }

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000900:	2100      	movs	r1, #0
 8000902:	4810      	ldr	r0, [pc, #64]	@ (8000944 <main+0x10c>)
 8000904:	f002 fc94 	bl	8003230 <HAL_TIM_PWM_Start>
  HAL_Delay(3000);
 8000908:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800090c:	f000 fdb4 	bl	8001478 <HAL_Delay>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000910:	2100      	movs	r1, #0
 8000912:	480d      	ldr	r0, [pc, #52]	@ (8000948 <main+0x110>)
 8000914:	f002 fc8c 	bl	8003230 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000918:	2104      	movs	r1, #4
 800091a:	480b      	ldr	r0, [pc, #44]	@ (8000948 <main+0x110>)
 800091c:	f002 fc88 	bl	8003230 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000920:	2101      	movs	r1, #1
 8000922:	480a      	ldr	r0, [pc, #40]	@ (800094c <main+0x114>)
 8000924:	f001 f885 	bl	8001a32 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000928:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800092c:	f000 fda4 	bl	8001478 <HAL_Delay>
	  printf("Hello_Word");
 8000930:	4807      	ldr	r0, [pc, #28]	@ (8000950 <main+0x118>)
 8000932:	f004 ff3b 	bl	80057ac <iprintf>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000936:	bf00      	nop
 8000938:	e7f2      	b.n	8000920 <main+0xe8>
 800093a:	bf00      	nop
 800093c:	58024400 	.word	0x58024400
 8000940:	2400008c 	.word	0x2400008c
 8000944:	240000e8 	.word	0x240000e8
 8000948:	2400009c 	.word	0x2400009c
 800094c:	58020400 	.word	0x58020400
 8000950:	0800649c 	.word	0x0800649c

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b09c      	sub	sp, #112	@ 0x70
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800095e:	224c      	movs	r2, #76	@ 0x4c
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f004 ff77 	bl	8005856 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2220      	movs	r2, #32
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f004 ff71 	bl	8005856 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000974:	2004      	movs	r0, #4
 8000976:	f001 f8a5 	bl	8001ac4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b31      	ldr	r3, [pc, #196]	@ (8000a44 <SystemClock_Config+0xf0>)
 8000980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000982:	4a30      	ldr	r2, [pc, #192]	@ (8000a44 <SystemClock_Config+0xf0>)
 8000984:	f023 0301 	bic.w	r3, r3, #1
 8000988:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800098a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a44 <SystemClock_Config+0xf0>)
 800098c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	4b2c      	ldr	r3, [pc, #176]	@ (8000a48 <SystemClock_Config+0xf4>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a2b      	ldr	r2, [pc, #172]	@ (8000a48 <SystemClock_Config+0xf4>)
 800099a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b29      	ldr	r3, [pc, #164]	@ (8000a48 <SystemClock_Config+0xf4>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009ac:	bf00      	nop
 80009ae:	4b26      	ldr	r3, [pc, #152]	@ (8000a48 <SystemClock_Config+0xf4>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009ba:	d1f8      	bne.n	80009ae <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009bc:	2302      	movs	r3, #2
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009c0:	2301      	movs	r3, #1
 80009c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c4:	2340      	movs	r3, #64	@ 0x40
 80009c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c8:	2302      	movs	r3, #2
 80009ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009cc:	2300      	movs	r3, #0
 80009ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009d0:	2304      	movs	r3, #4
 80009d2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 80009d4:	2332      	movs	r3, #50	@ 0x32
 80009d6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009d8:	2302      	movs	r3, #2
 80009da:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80009dc:	2305      	movs	r3, #5
 80009de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009e4:	230c      	movs	r3, #12
 80009e6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 f8bf 	bl	8001b78 <HAL_RCC_OscConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000a00:	f000 f9fa 	bl	8000df8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a04:	233f      	movs	r3, #63	@ 0x3f
 8000a06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a10:	2308      	movs	r3, #8
 8000a12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a14:	2340      	movs	r3, #64	@ 0x40
 8000a16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a18:	2340      	movs	r3, #64	@ 0x40
 8000a1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a20:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a22:	2340      	movs	r3, #64	@ 0x40
 8000a24:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2102      	movs	r1, #2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 fcfe 	bl	800242c <HAL_RCC_ClockConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000a36:	f000 f9df 	bl	8000df8 <Error_Handler>
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	3770      	adds	r7, #112	@ 0x70
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	58000400 	.word	0x58000400
 8000a48:	58024800 	.word	0x58024800

08000a4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b09e      	sub	sp, #120	@ 0x78
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a52:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a70:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
 8000a8c:	615a      	str	r2, [r3, #20]
 8000a8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a90:	463b      	mov	r3, r7
 8000a92:	222c      	movs	r2, #44	@ 0x2c
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f004 fedd 	bl	8005856 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a9c:	4b52      	ldr	r3, [pc, #328]	@ (8000be8 <MX_TIM1_Init+0x19c>)
 8000a9e:	4a53      	ldr	r2, [pc, #332]	@ (8000bec <MX_TIM1_Init+0x1a0>)
 8000aa0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 9;
 8000aa2:	4b51      	ldr	r3, [pc, #324]	@ (8000be8 <MX_TIM1_Init+0x19c>)
 8000aa4:	2209      	movs	r2, #9
 8000aa6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa8:	4b4f      	ldr	r3, [pc, #316]	@ (8000be8 <MX_TIM1_Init+0x19c>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 500;
 8000aae:	4b4e      	ldr	r3, [pc, #312]	@ (8000be8 <MX_TIM1_Init+0x19c>)
 8000ab0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ab4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab6:	4b4c      	ldr	r3, [pc, #304]	@ (8000be8 <MX_TIM1_Init+0x19c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000abc:	4b4a      	ldr	r3, [pc, #296]	@ (8000be8 <MX_TIM1_Init+0x19c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac2:	4b49      	ldr	r3, [pc, #292]	@ (8000be8 <MX_TIM1_Init+0x19c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ac8:	4847      	ldr	r0, [pc, #284]	@ (8000be8 <MX_TIM1_Init+0x19c>)
 8000aca:	f002 faf9 	bl	80030c0 <HAL_TIM_Base_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000ad4:	f000 f990 	bl	8000df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000adc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ade:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4840      	ldr	r0, [pc, #256]	@ (8000be8 <MX_TIM1_Init+0x19c>)
 8000ae6:	f002 fdc5 	bl	8003674 <HAL_TIM_ConfigClockSource>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000af0:	f000 f982 	bl	8000df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000af4:	483c      	ldr	r0, [pc, #240]	@ (8000be8 <MX_TIM1_Init+0x19c>)
 8000af6:	f002 fb3a 	bl	800316e <HAL_TIM_PWM_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000b00:	f000 f97a 	bl	8000df8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000b04:	2306      	movs	r3, #6
 8000b06:	657b      	str	r3, [r7, #84]	@ 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000b08:	2310      	movs	r3, #16
 8000b0a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000b0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b10:	4619      	mov	r1, r3
 8000b12:	4835      	ldr	r0, [pc, #212]	@ (8000be8 <MX_TIM1_Init+0x19c>)
 8000b14:	f002 fea6 	bl	8003864 <HAL_TIM_SlaveConfigSynchro>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000b1e:	f000 f96b 	bl	8000df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b22:	2300      	movs	r3, #0
 8000b24:	64bb      	str	r3, [r7, #72]	@ 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b2e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b32:	4619      	mov	r1, r3
 8000b34:	482c      	ldr	r0, [pc, #176]	@ (8000be8 <MX_TIM1_Init+0x19c>)
 8000b36:	f003 fbfb 	bl	8004330 <HAL_TIMEx_MasterConfigSynchronization>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000b40:	f000 f95a 	bl	8000df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b44:	2360      	movs	r3, #96	@ 0x60
 8000b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 10;
 8000b48:	230a      	movs	r3, #10
 8000b4a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b50:	2300      	movs	r3, #0
 8000b52:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b64:	2200      	movs	r2, #0
 8000b66:	4619      	mov	r1, r3
 8000b68:	481f      	ldr	r0, [pc, #124]	@ (8000be8 <MX_TIM1_Init+0x19c>)
 8000b6a:	f002 fc6f 	bl	800344c <HAL_TIM_PWM_ConfigChannel>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000b74:	f000 f940 	bl	8000df8 <Error_Handler>
  }
  sConfigOC.Pulse = 200;
 8000b78:	23c8      	movs	r3, #200	@ 0xc8
 8000b7a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b80:	2204      	movs	r2, #4
 8000b82:	4619      	mov	r1, r3
 8000b84:	4818      	ldr	r0, [pc, #96]	@ (8000be8 <MX_TIM1_Init+0x19c>)
 8000b86:	f002 fc61 	bl	800344c <HAL_TIM_PWM_ConfigChannel>
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <MX_TIM1_Init+0x148>
  {
    Error_Handler();
 8000b90:	f000 f932 	bl	8000df8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ba8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000bac:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000bb6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000bba:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4807      	ldr	r0, [pc, #28]	@ (8000be8 <MX_TIM1_Init+0x19c>)
 8000bca:	f003 fc3f 	bl	800444c <HAL_TIMEx_ConfigBreakDeadTime>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM1_Init+0x18c>
  {
    Error_Handler();
 8000bd4:	f000 f910 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bd8:	4803      	ldr	r0, [pc, #12]	@ (8000be8 <MX_TIM1_Init+0x19c>)
 8000bda:	f000 f965 	bl	8000ea8 <HAL_TIM_MspPostInit>

}
 8000bde:	bf00      	nop
 8000be0:	3778      	adds	r7, #120	@ 0x78
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	2400009c 	.word	0x2400009c
 8000bec:	40010000 	.word	0x40010000

08000bf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b08e      	sub	sp, #56	@ 0x38
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c04:	f107 031c 	add.w	r3, r7, #28
 8000c08:	2200      	movs	r2, #0
 8000c0a:	601a      	str	r2, [r3, #0]
 8000c0c:	605a      	str	r2, [r3, #4]
 8000c0e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c10:	463b      	mov	r3, r7
 8000c12:	2200      	movs	r2, #0
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	605a      	str	r2, [r3, #4]
 8000c18:	609a      	str	r2, [r3, #8]
 8000c1a:	60da      	str	r2, [r3, #12]
 8000c1c:	611a      	str	r2, [r3, #16]
 8000c1e:	615a      	str	r2, [r3, #20]
 8000c20:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c22:	4b2d      	ldr	r3, [pc, #180]	@ (8000cd8 <MX_TIM2_Init+0xe8>)
 8000c24:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c28:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8000c2a:	4b2b      	ldr	r3, [pc, #172]	@ (8000cd8 <MX_TIM2_Init+0xe8>)
 8000c2c:	2204      	movs	r2, #4
 8000c2e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c30:	4b29      	ldr	r3, [pc, #164]	@ (8000cd8 <MX_TIM2_Init+0xe8>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 8000c36:	4b28      	ldr	r3, [pc, #160]	@ (8000cd8 <MX_TIM2_Init+0xe8>)
 8000c38:	2213      	movs	r2, #19
 8000c3a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c3c:	4b26      	ldr	r3, [pc, #152]	@ (8000cd8 <MX_TIM2_Init+0xe8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c42:	4b25      	ldr	r3, [pc, #148]	@ (8000cd8 <MX_TIM2_Init+0xe8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c48:	4823      	ldr	r0, [pc, #140]	@ (8000cd8 <MX_TIM2_Init+0xe8>)
 8000c4a:	f002 fa39 	bl	80030c0 <HAL_TIM_Base_Init>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c54:	f000 f8d0 	bl	8000df8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c5e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c62:	4619      	mov	r1, r3
 8000c64:	481c      	ldr	r0, [pc, #112]	@ (8000cd8 <MX_TIM2_Init+0xe8>)
 8000c66:	f002 fd05 	bl	8003674 <HAL_TIM_ConfigClockSource>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c70:	f000 f8c2 	bl	8000df8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c74:	4818      	ldr	r0, [pc, #96]	@ (8000cd8 <MX_TIM2_Init+0xe8>)
 8000c76:	f002 fa7a 	bl	800316e <HAL_TIM_PWM_Init>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c80:	f000 f8ba 	bl	8000df8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c84:	2320      	movs	r3, #32
 8000c86:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c8c:	f107 031c 	add.w	r3, r7, #28
 8000c90:	4619      	mov	r1, r3
 8000c92:	4811      	ldr	r0, [pc, #68]	@ (8000cd8 <MX_TIM2_Init+0xe8>)
 8000c94:	f003 fb4c 	bl	8004330 <HAL_TIMEx_MasterConfigSynchronization>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c9e:	f000 f8ab 	bl	8000df8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca2:	2360      	movs	r3, #96	@ 0x60
 8000ca4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8000ca6:	230a      	movs	r3, #10
 8000ca8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000caa:	2302      	movs	r3, #2
 8000cac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000cb2:	463b      	mov	r3, r7
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4807      	ldr	r0, [pc, #28]	@ (8000cd8 <MX_TIM2_Init+0xe8>)
 8000cba:	f002 fbc7 	bl	800344c <HAL_TIM_PWM_ConfigChannel>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000cc4:	f000 f898 	bl	8000df8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cc8:	4803      	ldr	r0, [pc, #12]	@ (8000cd8 <MX_TIM2_Init+0xe8>)
 8000cca:	f000 f8ed 	bl	8000ea8 <HAL_TIM_MspPostInit>

}
 8000cce:	bf00      	nop
 8000cd0:	3738      	adds	r7, #56	@ 0x38
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	240000e8 	.word	0x240000e8

08000cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08a      	sub	sp, #40	@ 0x28
 8000ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce2:	f107 0314 	add.w	r3, r7, #20
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf2:	4b3d      	ldr	r3, [pc, #244]	@ (8000de8 <MX_GPIO_Init+0x10c>)
 8000cf4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf8:	4a3b      	ldr	r2, [pc, #236]	@ (8000de8 <MX_GPIO_Init+0x10c>)
 8000cfa:	f043 0304 	orr.w	r3, r3, #4
 8000cfe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d02:	4b39      	ldr	r3, [pc, #228]	@ (8000de8 <MX_GPIO_Init+0x10c>)
 8000d04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d08:	f003 0304 	and.w	r3, r3, #4
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d10:	4b35      	ldr	r3, [pc, #212]	@ (8000de8 <MX_GPIO_Init+0x10c>)
 8000d12:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d16:	4a34      	ldr	r2, [pc, #208]	@ (8000de8 <MX_GPIO_Init+0x10c>)
 8000d18:	f043 0301 	orr.w	r3, r3, #1
 8000d1c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d20:	4b31      	ldr	r3, [pc, #196]	@ (8000de8 <MX_GPIO_Init+0x10c>)
 8000d22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d26:	f003 0301 	and.w	r3, r3, #1
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2e:	4b2e      	ldr	r3, [pc, #184]	@ (8000de8 <MX_GPIO_Init+0x10c>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d34:	4a2c      	ldr	r2, [pc, #176]	@ (8000de8 <MX_GPIO_Init+0x10c>)
 8000d36:	f043 0302 	orr.w	r3, r3, #2
 8000d3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000de8 <MX_GPIO_Init+0x10c>)
 8000d40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d44:	f003 0302 	and.w	r3, r3, #2
 8000d48:	60bb      	str	r3, [r7, #8]
 8000d4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d4c:	4b26      	ldr	r3, [pc, #152]	@ (8000de8 <MX_GPIO_Init+0x10c>)
 8000d4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d52:	4a25      	ldr	r2, [pc, #148]	@ (8000de8 <MX_GPIO_Init+0x10c>)
 8000d54:	f043 0310 	orr.w	r3, r3, #16
 8000d58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d5c:	4b22      	ldr	r3, [pc, #136]	@ (8000de8 <MX_GPIO_Init+0x10c>)
 8000d5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d70:	481e      	ldr	r0, [pc, #120]	@ (8000dec <MX_GPIO_Init+0x110>)
 8000d72:	f000 fe45 	bl	8001a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d76:	2200      	movs	r2, #0
 8000d78:	2101      	movs	r1, #1
 8000d7a:	481d      	ldr	r0, [pc, #116]	@ (8000df0 <MX_GPIO_Init+0x114>)
 8000d7c:	f000 fe40 	bl	8001a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d80:	2200      	movs	r2, #0
 8000d82:	2102      	movs	r1, #2
 8000d84:	481b      	ldr	r0, [pc, #108]	@ (8000df4 <MX_GPIO_Init+0x118>)
 8000d86:	f000 fe3b 	bl	8001a00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d8a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	2301      	movs	r3, #1
 8000d92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4619      	mov	r1, r3
 8000da2:	4812      	ldr	r0, [pc, #72]	@ (8000dec <MX_GPIO_Init+0x110>)
 8000da4:	f000 fc7c 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000da8:	2301      	movs	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000db8:	f107 0314 	add.w	r3, r7, #20
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	480c      	ldr	r0, [pc, #48]	@ (8000df0 <MX_GPIO_Init+0x114>)
 8000dc0:	f000 fc6e 	bl	80016a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc8:	2301      	movs	r3, #1
 8000dca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dd4:	f107 0314 	add.w	r3, r7, #20
 8000dd8:	4619      	mov	r1, r3
 8000dda:	4806      	ldr	r0, [pc, #24]	@ (8000df4 <MX_GPIO_Init+0x118>)
 8000ddc:	f000 fc60 	bl	80016a0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000de0:	bf00      	nop
 8000de2:	3728      	adds	r7, #40	@ 0x28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	58024400 	.word	0x58024400
 8000dec:	58020800 	.word	0x58020800
 8000df0:	58020400 	.word	0x58020400
 8000df4:	58021000 	.word	0x58021000

08000df8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dfc:	b672      	cpsid	i
}
 8000dfe:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e00:	bf00      	nop
 8000e02:	e7fd      	b.n	8000e00 <Error_Handler+0x8>

08000e04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e34 <HAL_MspInit+0x30>)
 8000e0c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e10:	4a08      	ldr	r2, [pc, #32]	@ (8000e34 <HAL_MspInit+0x30>)
 8000e12:	f043 0302 	orr.w	r3, r3, #2
 8000e16:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000e1a:	4b06      	ldr	r3, [pc, #24]	@ (8000e34 <HAL_MspInit+0x30>)
 8000e1c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000e20:	f003 0302 	and.w	r3, r3, #2
 8000e24:	607b      	str	r3, [r7, #4]
 8000e26:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	58024400 	.word	0x58024400

08000e38 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a16      	ldr	r2, [pc, #88]	@ (8000ea0 <HAL_TIM_Base_MspInit+0x68>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d10f      	bne.n	8000e6a <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e4a:	4b16      	ldr	r3, [pc, #88]	@ (8000ea4 <HAL_TIM_Base_MspInit+0x6c>)
 8000e4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e50:	4a14      	ldr	r2, [pc, #80]	@ (8000ea4 <HAL_TIM_Base_MspInit+0x6c>)
 8000e52:	f043 0301 	orr.w	r3, r3, #1
 8000e56:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000e5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ea4 <HAL_TIM_Base_MspInit+0x6c>)
 8000e5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e60:	f003 0301 	and.w	r3, r3, #1
 8000e64:	60fb      	str	r3, [r7, #12]
 8000e66:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e68:	e013      	b.n	8000e92 <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM2)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e72:	d10e      	bne.n	8000e92 <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e74:	4b0b      	ldr	r3, [pc, #44]	@ (8000ea4 <HAL_TIM_Base_MspInit+0x6c>)
 8000e76:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ea4 <HAL_TIM_Base_MspInit+0x6c>)
 8000e7c:	f043 0301 	orr.w	r3, r3, #1
 8000e80:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e84:	4b07      	ldr	r3, [pc, #28]	@ (8000ea4 <HAL_TIM_Base_MspInit+0x6c>)
 8000e86:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60bb      	str	r3, [r7, #8]
 8000e90:	68bb      	ldr	r3, [r7, #8]
}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40010000 	.word	0x40010000
 8000ea4:	58024400 	.word	0x58024400

08000ea8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b08a      	sub	sp, #40	@ 0x28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0314 	add.w	r3, r7, #20
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4a35      	ldr	r2, [pc, #212]	@ (8000f9c <HAL_TIM_MspPostInit+0xf4>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d140      	bne.n	8000f4c <HAL_TIM_MspPostInit+0xa4>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000eca:	4b35      	ldr	r3, [pc, #212]	@ (8000fa0 <HAL_TIM_MspPostInit+0xf8>)
 8000ecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ed0:	4a33      	ldr	r2, [pc, #204]	@ (8000fa0 <HAL_TIM_MspPostInit+0xf8>)
 8000ed2:	f043 0310 	orr.w	r3, r3, #16
 8000ed6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eda:	4b31      	ldr	r3, [pc, #196]	@ (8000fa0 <HAL_TIM_MspPostInit+0xf8>)
 8000edc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ee0:	f003 0310 	and.w	r3, r3, #16
 8000ee4:	613b      	str	r3, [r7, #16]
 8000ee6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee8:	4b2d      	ldr	r3, [pc, #180]	@ (8000fa0 <HAL_TIM_MspPostInit+0xf8>)
 8000eea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eee:	4a2c      	ldr	r2, [pc, #176]	@ (8000fa0 <HAL_TIM_MspPostInit+0xf8>)
 8000ef0:	f043 0301 	orr.w	r3, r3, #1
 8000ef4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ef8:	4b29      	ldr	r3, [pc, #164]	@ (8000fa0 <HAL_TIM_MspPostInit+0xf8>)
 8000efa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	60fb      	str	r3, [r7, #12]
 8000f04:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PE11     ------> TIM1_CH2
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000f06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f0c:	2302      	movs	r3, #2
 8000f0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f14:	2300      	movs	r3, #0
 8000f16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f18:	2301      	movs	r3, #1
 8000f1a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	4619      	mov	r1, r3
 8000f22:	4820      	ldr	r0, [pc, #128]	@ (8000fa4 <HAL_TIM_MspPostInit+0xfc>)
 8000f24:	f000 fbbc 	bl	80016a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000f28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2e:	2302      	movs	r3, #2
 8000f30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f32:	2300      	movs	r3, #0
 8000f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f36:	2300      	movs	r3, #0
 8000f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f3e:	f107 0314 	add.w	r3, r7, #20
 8000f42:	4619      	mov	r1, r3
 8000f44:	4818      	ldr	r0, [pc, #96]	@ (8000fa8 <HAL_TIM_MspPostInit+0x100>)
 8000f46:	f000 fbab 	bl	80016a0 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f4a:	e023      	b.n	8000f94 <HAL_TIM_MspPostInit+0xec>
  else if(htim->Instance==TIM2)
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f54:	d11e      	bne.n	8000f94 <HAL_TIM_MspPostInit+0xec>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	4b12      	ldr	r3, [pc, #72]	@ (8000fa0 <HAL_TIM_MspPostInit+0xf8>)
 8000f58:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f5c:	4a10      	ldr	r2, [pc, #64]	@ (8000fa0 <HAL_TIM_MspPostInit+0xf8>)
 8000f5e:	f043 0301 	orr.w	r3, r3, #1
 8000f62:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f66:	4b0e      	ldr	r3, [pc, #56]	@ (8000fa0 <HAL_TIM_MspPostInit+0xf8>)
 8000f68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	60bb      	str	r3, [r7, #8]
 8000f72:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f74:	2301      	movs	r3, #1
 8000f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f80:	2300      	movs	r3, #0
 8000f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f84:	2301      	movs	r3, #1
 8000f86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	4806      	ldr	r0, [pc, #24]	@ (8000fa8 <HAL_TIM_MspPostInit+0x100>)
 8000f90:	f000 fb86 	bl	80016a0 <HAL_GPIO_Init>
}
 8000f94:	bf00      	nop
 8000f96:	3728      	adds	r7, #40	@ 0x28
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	40010000 	.word	0x40010000
 8000fa0:	58024400 	.word	0x58024400
 8000fa4:	58021000 	.word	0x58021000
 8000fa8:	58020000 	.word	0x58020000

08000fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fb0:	bf00      	nop
 8000fb2:	e7fd      	b.n	8000fb0 <NMI_Handler+0x4>

08000fb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fb8:	bf00      	nop
 8000fba:	e7fd      	b.n	8000fb8 <HardFault_Handler+0x4>

08000fbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fc0:	bf00      	nop
 8000fc2:	e7fd      	b.n	8000fc0 <MemManage_Handler+0x4>

08000fc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000fc8:	bf00      	nop
 8000fca:	e7fd      	b.n	8000fc8 <BusFault_Handler+0x4>

08000fcc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fd0:	bf00      	nop
 8000fd2:	e7fd      	b.n	8000fd0 <UsageFault_Handler+0x4>

08000fd4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000fd8:	bf00      	nop
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr

08000fe2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr

08000ff0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ffe:	b580      	push	{r7, lr}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001002:	f000 fa19 	bl	8001438 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	bd80      	pop	{r7, pc}

0800100a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800100a:	b580      	push	{r7, lr}
 800100c:	b086      	sub	sp, #24
 800100e:	af00      	add	r7, sp, #0
 8001010:	60f8      	str	r0, [r7, #12]
 8001012:	60b9      	str	r1, [r7, #8]
 8001014:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001016:	2300      	movs	r3, #0
 8001018:	617b      	str	r3, [r7, #20]
 800101a:	e00a      	b.n	8001032 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800101c:	f3af 8000 	nop.w
 8001020:	4601      	mov	r1, r0
 8001022:	68bb      	ldr	r3, [r7, #8]
 8001024:	1c5a      	adds	r2, r3, #1
 8001026:	60ba      	str	r2, [r7, #8]
 8001028:	b2ca      	uxtb	r2, r1
 800102a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	3301      	adds	r3, #1
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	697a      	ldr	r2, [r7, #20]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	429a      	cmp	r2, r3
 8001038:	dbf0      	blt.n	800101c <_read+0x12>
  }

  return len;
 800103a:	687b      	ldr	r3, [r7, #4]
}
 800103c:	4618      	mov	r0, r3
 800103e:	3718      	adds	r7, #24
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
 8001054:	e009      	b.n	800106a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001056:	68bb      	ldr	r3, [r7, #8]
 8001058:	1c5a      	adds	r2, r3, #1
 800105a:	60ba      	str	r2, [r7, #8]
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	4618      	mov	r0, r3
 8001060:	f000 f904 	bl	800126c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	3301      	adds	r3, #1
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	697a      	ldr	r2, [r7, #20]
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	429a      	cmp	r2, r3
 8001070:	dbf1      	blt.n	8001056 <_write+0x12>
  }
  return len;
 8001072:	687b      	ldr	r3, [r7, #4]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3718      	adds	r7, #24
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <_close>:

int _close(int file)
{
 800107c:	b480      	push	{r7}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001084:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001088:	4618      	mov	r0, r3
 800108a:	370c      	adds	r7, #12
 800108c:	46bd      	mov	sp, r7
 800108e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001092:	4770      	bx	lr

08001094 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80010a4:	605a      	str	r2, [r3, #4]
  return 0;
 80010a6:	2300      	movs	r3, #0
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <_isatty>:

int _isatty(int file)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010bc:	2301      	movs	r3, #1
}
 80010be:	4618      	mov	r0, r3
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b085      	sub	sp, #20
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	60f8      	str	r0, [r7, #12]
 80010d2:	60b9      	str	r1, [r7, #8]
 80010d4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr

080010e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b086      	sub	sp, #24
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010ec:	4a14      	ldr	r2, [pc, #80]	@ (8001140 <_sbrk+0x5c>)
 80010ee:	4b15      	ldr	r3, [pc, #84]	@ (8001144 <_sbrk+0x60>)
 80010f0:	1ad3      	subs	r3, r2, r3
 80010f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f8:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <_sbrk+0x64>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d102      	bne.n	8001106 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001100:	4b11      	ldr	r3, [pc, #68]	@ (8001148 <_sbrk+0x64>)
 8001102:	4a12      	ldr	r2, [pc, #72]	@ (800114c <_sbrk+0x68>)
 8001104:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001106:	4b10      	ldr	r3, [pc, #64]	@ (8001148 <_sbrk+0x64>)
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	429a      	cmp	r2, r3
 8001112:	d207      	bcs.n	8001124 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001114:	f004 fbee 	bl	80058f4 <__errno>
 8001118:	4603      	mov	r3, r0
 800111a:	220c      	movs	r2, #12
 800111c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111e:	f04f 33ff 	mov.w	r3, #4294967295
 8001122:	e009      	b.n	8001138 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001124:	4b08      	ldr	r3, [pc, #32]	@ (8001148 <_sbrk+0x64>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800112a:	4b07      	ldr	r3, [pc, #28]	@ (8001148 <_sbrk+0x64>)
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	4a05      	ldr	r2, [pc, #20]	@ (8001148 <_sbrk+0x64>)
 8001134:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001136:	68fb      	ldr	r3, [r7, #12]
}
 8001138:	4618      	mov	r0, r3
 800113a:	3718      	adds	r7, #24
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	24080000 	.word	0x24080000
 8001144:	00000400 	.word	0x00000400
 8001148:	24000134 	.word	0x24000134
 800114c:	24000320 	.word	0x24000320

08001150 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001150:	f8df d038 	ldr.w	sp, [pc, #56]	@ 800118c <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001154:	f7ff fb58 	bl	8000808 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001158:	f7ff faa8 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800115c:	480c      	ldr	r0, [pc, #48]	@ (8001190 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800115e:	490d      	ldr	r1, [pc, #52]	@ (8001194 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001160:	4a0d      	ldr	r2, [pc, #52]	@ (8001198 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001162:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001164:	e002      	b.n	800116c <LoopCopyDataInit>

08001166 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001166:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001168:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800116a:	3304      	adds	r3, #4

0800116c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800116c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800116e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001170:	d3f9      	bcc.n	8001166 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001172:	4a0a      	ldr	r2, [pc, #40]	@ (800119c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001174:	4c0a      	ldr	r4, [pc, #40]	@ (80011a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001176:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001178:	e001      	b.n	800117e <LoopFillZerobss>

0800117a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800117a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800117c:	3204      	adds	r2, #4

0800117e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800117e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001180:	d3fb      	bcc.n	800117a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001182:	f004 fbbd 	bl	8005900 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001186:	f7ff fb57 	bl	8000838 <main>
  bx  lr
 800118a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800118c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001190:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001194:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001198:	08006514 	.word	0x08006514
  ldr r2, =_sbss
 800119c:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 80011a0:	24000320 	.word	0x24000320

080011a4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011a4:	e7fe      	b.n	80011a4 <ADC3_IRQHandler>
	...

080011a8 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	6039      	str	r1, [r7, #0]
 80011b2:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80011be:	f06f 0301 	mvn.w	r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	e018      	b.n	80011f8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 80011c6:	79fb      	ldrb	r3, [r7, #7]
 80011c8:	2294      	movs	r2, #148	@ 0x94
 80011ca:	fb02 f303 	mul.w	r3, r2, r3
 80011ce:	4a0d      	ldr	r2, [pc, #52]	@ (8001204 <BSP_COM_Init+0x5c>)
 80011d0:	4413      	add	r3, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f000 f866 	bl	80012a4 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 80011d8:	79fb      	ldrb	r3, [r7, #7]
 80011da:	2294      	movs	r2, #148	@ 0x94
 80011dc:	fb02 f303 	mul.w	r3, r2, r3
 80011e0:	4a08      	ldr	r2, [pc, #32]	@ (8001204 <BSP_COM_Init+0x5c>)
 80011e2:	4413      	add	r3, r2
 80011e4:	6839      	ldr	r1, [r7, #0]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f000 f80e 	bl	8001208 <MX_USART3_Init>
 80011ec:	4603      	mov	r3, r0
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d002      	beq.n	80011f8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80011f2:	f06f 0303 	mvn.w	r3, #3
 80011f6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80011f8:	68fb      	ldr	r3, [r7, #12]
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	24000138 	.word	0x24000138

08001208 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	b082      	sub	sp, #8
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001212:	4b15      	ldr	r3, [pc, #84]	@ (8001268 <MX_USART3_Init+0x60>)
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	681a      	ldr	r2, [r3, #0]
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	220c      	movs	r2, #12
 8001226:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	895b      	ldrh	r3, [r3, #10]
 800122c:	461a      	mov	r2, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	891b      	ldrh	r3, [r3, #8]
 800123e:	461a      	mov	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	899b      	ldrh	r3, [r3, #12]
 8001248:	461a      	mov	r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001254:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f003 f976 	bl	8004548 <HAL_UART_Init>
 800125c:	4603      	mov	r3, r0
}
 800125e:	4618      	mov	r0, r3
 8001260:	3708      	adds	r7, #8
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	24000008 	.word	0x24000008

0800126c <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001274:	4b09      	ldr	r3, [pc, #36]	@ (800129c <__io_putchar+0x30>)
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	461a      	mov	r2, r3
 800127a:	2394      	movs	r3, #148	@ 0x94
 800127c:	fb02 f303 	mul.w	r3, r2, r3
 8001280:	4a07      	ldr	r2, [pc, #28]	@ (80012a0 <__io_putchar+0x34>)
 8001282:	1898      	adds	r0, r3, r2
 8001284:	1d39      	adds	r1, r7, #4
 8001286:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800128a:	2201      	movs	r2, #1
 800128c:	f003 f9b6 	bl	80045fc <HAL_UART_Transmit>
  return ch;
 8001290:	687b      	ldr	r3, [r7, #4]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3708      	adds	r7, #8
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	240001cc 	.word	0x240001cc
 80012a0:	24000138 	.word	0x24000138

080012a4 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08a      	sub	sp, #40	@ 0x28
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80012ac:	4b27      	ldr	r3, [pc, #156]	@ (800134c <COM1_MspInit+0xa8>)
 80012ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b2:	4a26      	ldr	r2, [pc, #152]	@ (800134c <COM1_MspInit+0xa8>)
 80012b4:	f043 0308 	orr.w	r3, r3, #8
 80012b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012bc:	4b23      	ldr	r3, [pc, #140]	@ (800134c <COM1_MspInit+0xa8>)
 80012be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012c2:	f003 0308 	and.w	r3, r3, #8
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80012ca:	4b20      	ldr	r3, [pc, #128]	@ (800134c <COM1_MspInit+0xa8>)
 80012cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012d0:	4a1e      	ldr	r2, [pc, #120]	@ (800134c <COM1_MspInit+0xa8>)
 80012d2:	f043 0308 	orr.w	r3, r3, #8
 80012d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012da:	4b1c      	ldr	r3, [pc, #112]	@ (800134c <COM1_MspInit+0xa8>)
 80012dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012e0:	f003 0308 	and.w	r3, r3, #8
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80012e8:	4b18      	ldr	r3, [pc, #96]	@ (800134c <COM1_MspInit+0xa8>)
 80012ea:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012ee:	4a17      	ldr	r2, [pc, #92]	@ (800134c <COM1_MspInit+0xa8>)
 80012f0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80012f4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80012f8:	4b14      	ldr	r3, [pc, #80]	@ (800134c <COM1_MspInit+0xa8>)
 80012fa:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80012fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001302:	60bb      	str	r3, [r7, #8]
 8001304:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001306:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800130a:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8001310:	2302      	movs	r3, #2
 8001312:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001314:	2301      	movs	r3, #1
 8001316:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001318:	2307      	movs	r3, #7
 800131a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	480b      	ldr	r0, [pc, #44]	@ (8001350 <COM1_MspInit+0xac>)
 8001324:	f000 f9bc 	bl	80016a0 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001328:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800132c:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8001332:	2307      	movs	r3, #7
 8001334:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	4619      	mov	r1, r3
 800133c:	4804      	ldr	r0, [pc, #16]	@ (8001350 <COM1_MspInit+0xac>)
 800133e:	f000 f9af 	bl	80016a0 <HAL_GPIO_Init>
}
 8001342:	bf00      	nop
 8001344:	3728      	adds	r7, #40	@ 0x28
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	58024400 	.word	0x58024400
 8001350:	58020c00 	.word	0x58020c00

08001354 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b082      	sub	sp, #8
 8001358:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800135a:	2003      	movs	r0, #3
 800135c:	f000 f96e 	bl	800163c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001360:	f001 fa1a 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 8001364:	4602      	mov	r2, r0
 8001366:	4b15      	ldr	r3, [pc, #84]	@ (80013bc <HAL_Init+0x68>)
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	0a1b      	lsrs	r3, r3, #8
 800136c:	f003 030f 	and.w	r3, r3, #15
 8001370:	4913      	ldr	r1, [pc, #76]	@ (80013c0 <HAL_Init+0x6c>)
 8001372:	5ccb      	ldrb	r3, [r1, r3]
 8001374:	f003 031f 	and.w	r3, r3, #31
 8001378:	fa22 f303 	lsr.w	r3, r2, r3
 800137c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800137e:	4b0f      	ldr	r3, [pc, #60]	@ (80013bc <HAL_Init+0x68>)
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	f003 030f 	and.w	r3, r3, #15
 8001386:	4a0e      	ldr	r2, [pc, #56]	@ (80013c0 <HAL_Init+0x6c>)
 8001388:	5cd3      	ldrb	r3, [r2, r3]
 800138a:	f003 031f 	and.w	r3, r3, #31
 800138e:	687a      	ldr	r2, [r7, #4]
 8001390:	fa22 f303 	lsr.w	r3, r2, r3
 8001394:	4a0b      	ldr	r2, [pc, #44]	@ (80013c4 <HAL_Init+0x70>)
 8001396:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001398:	4a0b      	ldr	r2, [pc, #44]	@ (80013c8 <HAL_Init+0x74>)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800139e:	2000      	movs	r0, #0
 80013a0:	f000 f814 	bl	80013cc <HAL_InitTick>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80013aa:	2301      	movs	r3, #1
 80013ac:	e002      	b.n	80013b4 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80013ae:	f7ff fd29 	bl	8000e04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013b2:	2300      	movs	r3, #0
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	58024400 	.word	0x58024400
 80013c0:	080064a8 	.word	0x080064a8
 80013c4:	24000004 	.word	0x24000004
 80013c8:	24000000 	.word	0x24000000

080013cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b082      	sub	sp, #8
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80013d4:	4b15      	ldr	r3, [pc, #84]	@ (800142c <HAL_InitTick+0x60>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e021      	b.n	8001424 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80013e0:	4b13      	ldr	r3, [pc, #76]	@ (8001430 <HAL_InitTick+0x64>)
 80013e2:	681a      	ldr	r2, [r3, #0]
 80013e4:	4b11      	ldr	r3, [pc, #68]	@ (800142c <HAL_InitTick+0x60>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	4619      	mov	r1, r3
 80013ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80013f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013f6:	4618      	mov	r0, r3
 80013f8:	f000 f945 	bl	8001686 <HAL_SYSTICK_Config>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e00e      	b.n	8001424 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2b0f      	cmp	r3, #15
 800140a:	d80a      	bhi.n	8001422 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800140c:	2200      	movs	r2, #0
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	f04f 30ff 	mov.w	r0, #4294967295
 8001414:	f000 f91d 	bl	8001652 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001418:	4a06      	ldr	r2, [pc, #24]	@ (8001434 <HAL_InitTick+0x68>)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800141e:	2300      	movs	r3, #0
 8001420:	e000      	b.n	8001424 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
}
 8001424:	4618      	mov	r0, r3
 8001426:	3708      	adds	r7, #8
 8001428:	46bd      	mov	sp, r7
 800142a:	bd80      	pop	{r7, pc}
 800142c:	24000010 	.word	0x24000010
 8001430:	24000000 	.word	0x24000000
 8001434:	2400000c 	.word	0x2400000c

08001438 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800143c:	4b06      	ldr	r3, [pc, #24]	@ (8001458 <HAL_IncTick+0x20>)
 800143e:	781b      	ldrb	r3, [r3, #0]
 8001440:	461a      	mov	r2, r3
 8001442:	4b06      	ldr	r3, [pc, #24]	@ (800145c <HAL_IncTick+0x24>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	4413      	add	r3, r2
 8001448:	4a04      	ldr	r2, [pc, #16]	@ (800145c <HAL_IncTick+0x24>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
 8001456:	bf00      	nop
 8001458:	24000010 	.word	0x24000010
 800145c:	240001d0 	.word	0x240001d0

08001460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;
 8001464:	4b03      	ldr	r3, [pc, #12]	@ (8001474 <HAL_GetTick+0x14>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr
 8001472:	bf00      	nop
 8001474:	240001d0 	.word	0x240001d0

08001478 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001480:	f7ff ffee 	bl	8001460 <HAL_GetTick>
 8001484:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001490:	d005      	beq.n	800149e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001492:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <HAL_Delay+0x44>)
 8001494:	781b      	ldrb	r3, [r3, #0]
 8001496:	461a      	mov	r2, r3
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	4413      	add	r3, r2
 800149c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800149e:	bf00      	nop
 80014a0:	f7ff ffde 	bl	8001460 <HAL_GetTick>
 80014a4:	4602      	mov	r2, r0
 80014a6:	68bb      	ldr	r3, [r7, #8]
 80014a8:	1ad3      	subs	r3, r2, r3
 80014aa:	68fa      	ldr	r2, [r7, #12]
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d8f7      	bhi.n	80014a0 <HAL_Delay+0x28>
  {
  }
}
 80014b0:	bf00      	nop
 80014b2:	bf00      	nop
 80014b4:	3710      	adds	r7, #16
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	24000010 	.word	0x24000010

080014c0 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80014c0:	b480      	push	{r7}
 80014c2:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80014c4:	4b03      	ldr	r3, [pc, #12]	@ (80014d4 <HAL_GetREVID+0x14>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	0c1b      	lsrs	r3, r3, #16
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	5c001000 	.word	0x5c001000

080014d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	f003 0307 	and.w	r3, r3, #7
 80014e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e8:	4b0b      	ldr	r3, [pc, #44]	@ (8001518 <__NVIC_SetPriorityGrouping+0x40>)
 80014ea:	68db      	ldr	r3, [r3, #12]
 80014ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014ee:	68ba      	ldr	r2, [r7, #8]
 80014f0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80014f4:	4013      	ands	r3, r2
 80014f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <__NVIC_SetPriorityGrouping+0x44>)
 8001502:	4313      	orrs	r3, r2
 8001504:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001506:	4a04      	ldr	r2, [pc, #16]	@ (8001518 <__NVIC_SetPriorityGrouping+0x40>)
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	60d3      	str	r3, [r2, #12]
}
 800150c:	bf00      	nop
 800150e:	3714      	adds	r7, #20
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr
 8001518:	e000ed00 	.word	0xe000ed00
 800151c:	05fa0000 	.word	0x05fa0000

08001520 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001524:	4b04      	ldr	r3, [pc, #16]	@ (8001538 <__NVIC_GetPriorityGrouping+0x18>)
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	0a1b      	lsrs	r3, r3, #8
 800152a:	f003 0307 	and.w	r3, r3, #7
}
 800152e:	4618      	mov	r0, r3
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	4603      	mov	r3, r0
 8001544:	6039      	str	r1, [r7, #0]
 8001546:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001548:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800154c:	2b00      	cmp	r3, #0
 800154e:	db0a      	blt.n	8001566 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	b2da      	uxtb	r2, r3
 8001554:	490c      	ldr	r1, [pc, #48]	@ (8001588 <__NVIC_SetPriority+0x4c>)
 8001556:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155a:	0112      	lsls	r2, r2, #4
 800155c:	b2d2      	uxtb	r2, r2
 800155e:	440b      	add	r3, r1
 8001560:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001564:	e00a      	b.n	800157c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	b2da      	uxtb	r2, r3
 800156a:	4908      	ldr	r1, [pc, #32]	@ (800158c <__NVIC_SetPriority+0x50>)
 800156c:	88fb      	ldrh	r3, [r7, #6]
 800156e:	f003 030f 	and.w	r3, r3, #15
 8001572:	3b04      	subs	r3, #4
 8001574:	0112      	lsls	r2, r2, #4
 8001576:	b2d2      	uxtb	r2, r2
 8001578:	440b      	add	r3, r1
 800157a:	761a      	strb	r2, [r3, #24]
}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	e000e100 	.word	0xe000e100
 800158c:	e000ed00 	.word	0xe000ed00

08001590 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001590:	b480      	push	{r7}
 8001592:	b089      	sub	sp, #36	@ 0x24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	60b9      	str	r1, [r7, #8]
 800159a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	f003 0307 	and.w	r3, r3, #7
 80015a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015a4:	69fb      	ldr	r3, [r7, #28]
 80015a6:	f1c3 0307 	rsb	r3, r3, #7
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	bf28      	it	cs
 80015ae:	2304      	movcs	r3, #4
 80015b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	3304      	adds	r3, #4
 80015b6:	2b06      	cmp	r3, #6
 80015b8:	d902      	bls.n	80015c0 <NVIC_EncodePriority+0x30>
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	3b03      	subs	r3, #3
 80015be:	e000      	b.n	80015c2 <NVIC_EncodePriority+0x32>
 80015c0:	2300      	movs	r3, #0
 80015c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c4:	f04f 32ff 	mov.w	r2, #4294967295
 80015c8:	69bb      	ldr	r3, [r7, #24]
 80015ca:	fa02 f303 	lsl.w	r3, r2, r3
 80015ce:	43da      	mvns	r2, r3
 80015d0:	68bb      	ldr	r3, [r7, #8]
 80015d2:	401a      	ands	r2, r3
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015d8:	f04f 31ff 	mov.w	r1, #4294967295
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	43d9      	mvns	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015e8:	4313      	orrs	r3, r2
         );
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	3724      	adds	r7, #36	@ 0x24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f4:	4770      	bx	lr
	...

080015f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001608:	d301      	bcc.n	800160e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800160a:	2301      	movs	r3, #1
 800160c:	e00f      	b.n	800162e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800160e:	4a0a      	ldr	r2, [pc, #40]	@ (8001638 <SysTick_Config+0x40>)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	3b01      	subs	r3, #1
 8001614:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001616:	210f      	movs	r1, #15
 8001618:	f04f 30ff 	mov.w	r0, #4294967295
 800161c:	f7ff ff8e 	bl	800153c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001620:	4b05      	ldr	r3, [pc, #20]	@ (8001638 <SysTick_Config+0x40>)
 8001622:	2200      	movs	r2, #0
 8001624:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001626:	4b04      	ldr	r3, [pc, #16]	@ (8001638 <SysTick_Config+0x40>)
 8001628:	2207      	movs	r2, #7
 800162a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800162c:	2300      	movs	r3, #0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	e000e010 	.word	0xe000e010

0800163c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b082      	sub	sp, #8
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001644:	6878      	ldr	r0, [r7, #4]
 8001646:	f7ff ff47 	bl	80014d8 <__NVIC_SetPriorityGrouping>
}
 800164a:	bf00      	nop
 800164c:	3708      	adds	r7, #8
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}

08001652 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	b086      	sub	sp, #24
 8001656:	af00      	add	r7, sp, #0
 8001658:	4603      	mov	r3, r0
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
 800165e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001660:	f7ff ff5e 	bl	8001520 <__NVIC_GetPriorityGrouping>
 8001664:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001666:	687a      	ldr	r2, [r7, #4]
 8001668:	68b9      	ldr	r1, [r7, #8]
 800166a:	6978      	ldr	r0, [r7, #20]
 800166c:	f7ff ff90 	bl	8001590 <NVIC_EncodePriority>
 8001670:	4602      	mov	r2, r0
 8001672:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001676:	4611      	mov	r1, r2
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff ff5f 	bl	800153c <__NVIC_SetPriority>
}
 800167e:	bf00      	nop
 8001680:	3718      	adds	r7, #24
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	b082      	sub	sp, #8
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f7ff ffb2 	bl	80015f8 <SysTick_Config>
 8001694:	4603      	mov	r3, r0
}
 8001696:	4618      	mov	r0, r3
 8001698:	3708      	adds	r7, #8
 800169a:	46bd      	mov	sp, r7
 800169c:	bd80      	pop	{r7, pc}
	...

080016a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b089      	sub	sp, #36	@ 0x24
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80016ae:	4b89      	ldr	r3, [pc, #548]	@ (80018d4 <HAL_GPIO_Init+0x234>)
 80016b0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016b2:	e194      	b.n	80019de <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	681a      	ldr	r2, [r3, #0]
 80016b8:	2101      	movs	r1, #1
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	fa01 f303 	lsl.w	r3, r1, r3
 80016c0:	4013      	ands	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	f000 8186 	beq.w	80019d8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f003 0303 	and.w	r3, r3, #3
 80016d4:	2b01      	cmp	r3, #1
 80016d6:	d005      	beq.n	80016e4 <HAL_GPIO_Init+0x44>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d130      	bne.n	8001746 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	689b      	ldr	r3, [r3, #8]
 80016e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	2203      	movs	r2, #3
 80016f0:	fa02 f303 	lsl.w	r3, r2, r3
 80016f4:	43db      	mvns	r3, r3
 80016f6:	69ba      	ldr	r2, [r7, #24]
 80016f8:	4013      	ands	r3, r2
 80016fa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	68da      	ldr	r2, [r3, #12]
 8001700:	69fb      	ldr	r3, [r7, #28]
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	69ba      	ldr	r2, [r7, #24]
 800170a:	4313      	orrs	r3, r2
 800170c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800171a:	2201      	movs	r2, #1
 800171c:	69fb      	ldr	r3, [r7, #28]
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43db      	mvns	r3, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4013      	ands	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	091b      	lsrs	r3, r3, #4
 8001730:	f003 0201 	and.w	r2, r3, #1
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	fa02 f303 	lsl.w	r3, r2, r3
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	f003 0303 	and.w	r3, r3, #3
 800174e:	2b03      	cmp	r3, #3
 8001750:	d017      	beq.n	8001782 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	68db      	ldr	r3, [r3, #12]
 8001756:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	2203      	movs	r2, #3
 800175e:	fa02 f303 	lsl.w	r3, r2, r3
 8001762:	43db      	mvns	r3, r3
 8001764:	69ba      	ldr	r2, [r7, #24]
 8001766:	4013      	ands	r3, r2
 8001768:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	689a      	ldr	r2, [r3, #8]
 800176e:	69fb      	ldr	r3, [r7, #28]
 8001770:	005b      	lsls	r3, r3, #1
 8001772:	fa02 f303 	lsl.w	r3, r2, r3
 8001776:	69ba      	ldr	r2, [r7, #24]
 8001778:	4313      	orrs	r3, r2
 800177a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f003 0303 	and.w	r3, r3, #3
 800178a:	2b02      	cmp	r3, #2
 800178c:	d123      	bne.n	80017d6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	08da      	lsrs	r2, r3, #3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3208      	adds	r2, #8
 8001796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800179a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800179c:	69fb      	ldr	r3, [r7, #28]
 800179e:	f003 0307 	and.w	r3, r3, #7
 80017a2:	009b      	lsls	r3, r3, #2
 80017a4:	220f      	movs	r2, #15
 80017a6:	fa02 f303 	lsl.w	r3, r2, r3
 80017aa:	43db      	mvns	r3, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4013      	ands	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	691a      	ldr	r2, [r3, #16]
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	f003 0307 	and.w	r3, r3, #7
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	69ba      	ldr	r2, [r7, #24]
 80017c4:	4313      	orrs	r3, r2
 80017c6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017c8:	69fb      	ldr	r3, [r7, #28]
 80017ca:	08da      	lsrs	r2, r3, #3
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3208      	adds	r2, #8
 80017d0:	69b9      	ldr	r1, [r7, #24]
 80017d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	2203      	movs	r2, #3
 80017e2:	fa02 f303 	lsl.w	r3, r2, r3
 80017e6:	43db      	mvns	r3, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4013      	ands	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0203 	and.w	r2, r3, #3
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001812:	2b00      	cmp	r3, #0
 8001814:	f000 80e0 	beq.w	80019d8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001818:	4b2f      	ldr	r3, [pc, #188]	@ (80018d8 <HAL_GPIO_Init+0x238>)
 800181a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800181e:	4a2e      	ldr	r2, [pc, #184]	@ (80018d8 <HAL_GPIO_Init+0x238>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001828:	4b2b      	ldr	r3, [pc, #172]	@ (80018d8 <HAL_GPIO_Init+0x238>)
 800182a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001836:	4a29      	ldr	r2, [pc, #164]	@ (80018dc <HAL_GPIO_Init+0x23c>)
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	089b      	lsrs	r3, r3, #2
 800183c:	3302      	adds	r3, #2
 800183e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001842:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001844:	69fb      	ldr	r3, [r7, #28]
 8001846:	f003 0303 	and.w	r3, r3, #3
 800184a:	009b      	lsls	r3, r3, #2
 800184c:	220f      	movs	r2, #15
 800184e:	fa02 f303 	lsl.w	r3, r2, r3
 8001852:	43db      	mvns	r3, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4013      	ands	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a20      	ldr	r2, [pc, #128]	@ (80018e0 <HAL_GPIO_Init+0x240>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d052      	beq.n	8001908 <HAL_GPIO_Init+0x268>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a1f      	ldr	r2, [pc, #124]	@ (80018e4 <HAL_GPIO_Init+0x244>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d031      	beq.n	80018ce <HAL_GPIO_Init+0x22e>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	4a1e      	ldr	r2, [pc, #120]	@ (80018e8 <HAL_GPIO_Init+0x248>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d02b      	beq.n	80018ca <HAL_GPIO_Init+0x22a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4a1d      	ldr	r2, [pc, #116]	@ (80018ec <HAL_GPIO_Init+0x24c>)
 8001876:	4293      	cmp	r3, r2
 8001878:	d025      	beq.n	80018c6 <HAL_GPIO_Init+0x226>
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a1c      	ldr	r2, [pc, #112]	@ (80018f0 <HAL_GPIO_Init+0x250>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d01f      	beq.n	80018c2 <HAL_GPIO_Init+0x222>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4a1b      	ldr	r2, [pc, #108]	@ (80018f4 <HAL_GPIO_Init+0x254>)
 8001886:	4293      	cmp	r3, r2
 8001888:	d019      	beq.n	80018be <HAL_GPIO_Init+0x21e>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	4a1a      	ldr	r2, [pc, #104]	@ (80018f8 <HAL_GPIO_Init+0x258>)
 800188e:	4293      	cmp	r3, r2
 8001890:	d013      	beq.n	80018ba <HAL_GPIO_Init+0x21a>
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	4a19      	ldr	r2, [pc, #100]	@ (80018fc <HAL_GPIO_Init+0x25c>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d00d      	beq.n	80018b6 <HAL_GPIO_Init+0x216>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4a18      	ldr	r2, [pc, #96]	@ (8001900 <HAL_GPIO_Init+0x260>)
 800189e:	4293      	cmp	r3, r2
 80018a0:	d007      	beq.n	80018b2 <HAL_GPIO_Init+0x212>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	4a17      	ldr	r2, [pc, #92]	@ (8001904 <HAL_GPIO_Init+0x264>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d101      	bne.n	80018ae <HAL_GPIO_Init+0x20e>
 80018aa:	2309      	movs	r3, #9
 80018ac:	e02d      	b.n	800190a <HAL_GPIO_Init+0x26a>
 80018ae:	230a      	movs	r3, #10
 80018b0:	e02b      	b.n	800190a <HAL_GPIO_Init+0x26a>
 80018b2:	2308      	movs	r3, #8
 80018b4:	e029      	b.n	800190a <HAL_GPIO_Init+0x26a>
 80018b6:	2307      	movs	r3, #7
 80018b8:	e027      	b.n	800190a <HAL_GPIO_Init+0x26a>
 80018ba:	2306      	movs	r3, #6
 80018bc:	e025      	b.n	800190a <HAL_GPIO_Init+0x26a>
 80018be:	2305      	movs	r3, #5
 80018c0:	e023      	b.n	800190a <HAL_GPIO_Init+0x26a>
 80018c2:	2304      	movs	r3, #4
 80018c4:	e021      	b.n	800190a <HAL_GPIO_Init+0x26a>
 80018c6:	2303      	movs	r3, #3
 80018c8:	e01f      	b.n	800190a <HAL_GPIO_Init+0x26a>
 80018ca:	2302      	movs	r3, #2
 80018cc:	e01d      	b.n	800190a <HAL_GPIO_Init+0x26a>
 80018ce:	2301      	movs	r3, #1
 80018d0:	e01b      	b.n	800190a <HAL_GPIO_Init+0x26a>
 80018d2:	bf00      	nop
 80018d4:	58000080 	.word	0x58000080
 80018d8:	58024400 	.word	0x58024400
 80018dc:	58000400 	.word	0x58000400
 80018e0:	58020000 	.word	0x58020000
 80018e4:	58020400 	.word	0x58020400
 80018e8:	58020800 	.word	0x58020800
 80018ec:	58020c00 	.word	0x58020c00
 80018f0:	58021000 	.word	0x58021000
 80018f4:	58021400 	.word	0x58021400
 80018f8:	58021800 	.word	0x58021800
 80018fc:	58021c00 	.word	0x58021c00
 8001900:	58022000 	.word	0x58022000
 8001904:	58022400 	.word	0x58022400
 8001908:	2300      	movs	r3, #0
 800190a:	69fa      	ldr	r2, [r7, #28]
 800190c:	f002 0203 	and.w	r2, r2, #3
 8001910:	0092      	lsls	r2, r2, #2
 8001912:	4093      	lsls	r3, r2
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800191a:	4938      	ldr	r1, [pc, #224]	@ (80019fc <HAL_GPIO_Init+0x35c>)
 800191c:	69fb      	ldr	r3, [r7, #28]
 800191e:	089b      	lsrs	r3, r3, #2
 8001920:	3302      	adds	r3, #2
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001928:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	43db      	mvns	r3, r3
 8001934:	69ba      	ldr	r2, [r7, #24]
 8001936:	4013      	ands	r3, r2
 8001938:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d003      	beq.n	800194e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001946:	69ba      	ldr	r2, [r7, #24]
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	4313      	orrs	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800194e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001952:	69bb      	ldr	r3, [r7, #24]
 8001954:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001956:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	43db      	mvns	r3, r3
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	4013      	ands	r3, r2
 8001966:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d003      	beq.n	800197c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	4313      	orrs	r3, r2
 800197a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800197c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001980:	69bb      	ldr	r3, [r7, #24]
 8001982:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	43db      	mvns	r3, r3
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	4013      	ands	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199c:	2b00      	cmp	r3, #0
 800199e:	d003      	beq.n	80019a8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80019a0:	69ba      	ldr	r2, [r7, #24]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	4313      	orrs	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 80019ae:	697b      	ldr	r3, [r7, #20]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4013      	ands	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80019ca:	69ba      	ldr	r2, [r7, #24]
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	69ba      	ldr	r2, [r7, #24]
 80019d6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80019d8:	69fb      	ldr	r3, [r7, #28]
 80019da:	3301      	adds	r3, #1
 80019dc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	681a      	ldr	r2, [r3, #0]
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	fa22 f303 	lsr.w	r3, r2, r3
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f47f ae63 	bne.w	80016b4 <HAL_GPIO_Init+0x14>
  }
}
 80019ee:	bf00      	nop
 80019f0:	bf00      	nop
 80019f2:	3724      	adds	r7, #36	@ 0x24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	58000400 	.word	0x58000400

08001a00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	460b      	mov	r3, r1
 8001a0a:	807b      	strh	r3, [r7, #2]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001a10:	787b      	ldrb	r3, [r7, #1]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a16:	887a      	ldrh	r2, [r7, #2]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001a1c:	e003      	b.n	8001a26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001a1e:	887b      	ldrh	r3, [r7, #2]
 8001a20:	041a      	lsls	r2, r3, #16
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	619a      	str	r2, [r3, #24]
}
 8001a26:	bf00      	nop
 8001a28:	370c      	adds	r7, #12
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr

08001a32 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a32:	b480      	push	{r7}
 8001a34:	b085      	sub	sp, #20
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
 8001a3a:	460b      	mov	r3, r1
 8001a3c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	695b      	ldr	r3, [r3, #20]
 8001a42:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a44:	887a      	ldrh	r2, [r7, #2]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	4013      	ands	r3, r2
 8001a4a:	041a      	lsls	r2, r3, #16
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	43d9      	mvns	r1, r3
 8001a50:	887b      	ldrh	r3, [r7, #2]
 8001a52:	400b      	ands	r3, r1
 8001a54:	431a      	orrs	r2, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	619a      	str	r2, [r3, #24]
}
 8001a5a:	bf00      	nop
 8001a5c:	3714      	adds	r7, #20
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
	...

08001a68 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001a70:	4a08      	ldr	r2, [pc, #32]	@ (8001a94 <HAL_HSEM_FastTake+0x2c>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	3320      	adds	r3, #32
 8001a76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a7a:	4a07      	ldr	r2, [pc, #28]	@ (8001a98 <HAL_HSEM_FastTake+0x30>)
 8001a7c:	4293      	cmp	r3, r2
 8001a7e:	d101      	bne.n	8001a84 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001a80:	2300      	movs	r3, #0
 8001a82:	e000      	b.n	8001a86 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	58026400 	.word	0x58026400
 8001a98:	80000300 	.word	0x80000300

08001a9c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
 8001aa4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001aa6:	4906      	ldr	r1, [pc, #24]	@ (8001ac0 <HAL_HSEM_Release+0x24>)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001ab4:	bf00      	nop
 8001ab6:	370c      	adds	r7, #12
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	58026400 	.word	0x58026400

08001ac4 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001acc:	4b29      	ldr	r3, [pc, #164]	@ (8001b74 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ace:	68db      	ldr	r3, [r3, #12]
 8001ad0:	f003 0307 	and.w	r3, r3, #7
 8001ad4:	2b06      	cmp	r3, #6
 8001ad6:	d00a      	beq.n	8001aee <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001ad8:	4b26      	ldr	r3, [pc, #152]	@ (8001b74 <HAL_PWREx_ConfigSupply+0xb0>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d001      	beq.n	8001aea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e040      	b.n	8001b6c <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001aea:	2300      	movs	r3, #0
 8001aec:	e03e      	b.n	8001b6c <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001aee:	4b21      	ldr	r3, [pc, #132]	@ (8001b74 <HAL_PWREx_ConfigSupply+0xb0>)
 8001af0:	68db      	ldr	r3, [r3, #12]
 8001af2:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001af6:	491f      	ldr	r1, [pc, #124]	@ (8001b74 <HAL_PWREx_ConfigSupply+0xb0>)
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4313      	orrs	r3, r2
 8001afc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001afe:	f7ff fcaf 	bl	8001460 <HAL_GetTick>
 8001b02:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b04:	e009      	b.n	8001b1a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b06:	f7ff fcab 	bl	8001460 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b14:	d901      	bls.n	8001b1a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001b16:	2301      	movs	r3, #1
 8001b18:	e028      	b.n	8001b6c <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001b1a:	4b16      	ldr	r3, [pc, #88]	@ (8001b74 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b22:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b26:	d1ee      	bne.n	8001b06 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b1e      	cmp	r3, #30
 8001b2c:	d008      	beq.n	8001b40 <HAL_PWREx_ConfigSupply+0x7c>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b2e      	cmp	r3, #46	@ 0x2e
 8001b32:	d005      	beq.n	8001b40 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2b1d      	cmp	r3, #29
 8001b38:	d002      	beq.n	8001b40 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b2d      	cmp	r3, #45	@ 0x2d
 8001b3e:	d114      	bne.n	8001b6a <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001b40:	f7ff fc8e 	bl	8001460 <HAL_GetTick>
 8001b44:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001b46:	e009      	b.n	8001b5c <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001b48:	f7ff fc8a 	bl	8001460 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001b56:	d901      	bls.n	8001b5c <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	e007      	b.n	8001b6c <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001b5c:	4b05      	ldr	r3, [pc, #20]	@ (8001b74 <HAL_PWREx_ConfigSupply+0xb0>)
 8001b5e:	68db      	ldr	r3, [r3, #12]
 8001b60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b68:	d1ee      	bne.n	8001b48 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001b6a:	2300      	movs	r3, #0
}
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	3710      	adds	r7, #16
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	58024800 	.word	0x58024800

08001b78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08c      	sub	sp, #48	@ 0x30
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d102      	bne.n	8001b8c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	f000 bc48 	b.w	800241c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0301 	and.w	r3, r3, #1
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	f000 8088 	beq.w	8001caa <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b9a:	4b99      	ldr	r3, [pc, #612]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001ba2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ba4:	4b96      	ldr	r3, [pc, #600]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001ba6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba8:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001baa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bac:	2b10      	cmp	r3, #16
 8001bae:	d007      	beq.n	8001bc0 <HAL_RCC_OscConfig+0x48>
 8001bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001bb2:	2b18      	cmp	r3, #24
 8001bb4:	d111      	bne.n	8001bda <HAL_RCC_OscConfig+0x62>
 8001bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bb8:	f003 0303 	and.w	r3, r3, #3
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d10c      	bne.n	8001bda <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001bc0:	4b8f      	ldr	r3, [pc, #572]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d06d      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x130>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	685b      	ldr	r3, [r3, #4]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d169      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	f000 bc21 	b.w	800241c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001be2:	d106      	bne.n	8001bf2 <HAL_RCC_OscConfig+0x7a>
 8001be4:	4b86      	ldr	r3, [pc, #536]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a85      	ldr	r2, [pc, #532]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001bea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	e02e      	b.n	8001c50 <HAL_RCC_OscConfig+0xd8>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d10c      	bne.n	8001c14 <HAL_RCC_OscConfig+0x9c>
 8001bfa:	4b81      	ldr	r3, [pc, #516]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a80      	ldr	r2, [pc, #512]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	4b7e      	ldr	r3, [pc, #504]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a7d      	ldr	r2, [pc, #500]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c0c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c10:	6013      	str	r3, [r2, #0]
 8001c12:	e01d      	b.n	8001c50 <HAL_RCC_OscConfig+0xd8>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001c1c:	d10c      	bne.n	8001c38 <HAL_RCC_OscConfig+0xc0>
 8001c1e:	4b78      	ldr	r3, [pc, #480]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a77      	ldr	r2, [pc, #476]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c24:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c28:	6013      	str	r3, [r2, #0]
 8001c2a:	4b75      	ldr	r3, [pc, #468]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a74      	ldr	r2, [pc, #464]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c30:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c34:	6013      	str	r3, [r2, #0]
 8001c36:	e00b      	b.n	8001c50 <HAL_RCC_OscConfig+0xd8>
 8001c38:	4b71      	ldr	r3, [pc, #452]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a70      	ldr	r2, [pc, #448]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c3e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001c42:	6013      	str	r3, [r2, #0]
 8001c44:	4b6e      	ldr	r3, [pc, #440]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a6d      	ldr	r2, [pc, #436]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d013      	beq.n	8001c80 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c58:	f7ff fc02 	bl	8001460 <HAL_GetTick>
 8001c5c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c5e:	e008      	b.n	8001c72 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c60:	f7ff fbfe 	bl	8001460 <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	2b64      	cmp	r3, #100	@ 0x64
 8001c6c:	d901      	bls.n	8001c72 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c6e:	2303      	movs	r3, #3
 8001c70:	e3d4      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c72:	4b63      	ldr	r3, [pc, #396]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d0f0      	beq.n	8001c60 <HAL_RCC_OscConfig+0xe8>
 8001c7e:	e014      	b.n	8001caa <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c80:	f7ff fbee 	bl	8001460 <HAL_GetTick>
 8001c84:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c86:	e008      	b.n	8001c9a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c88:	f7ff fbea 	bl	8001460 <HAL_GetTick>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c90:	1ad3      	subs	r3, r2, r3
 8001c92:	2b64      	cmp	r3, #100	@ 0x64
 8001c94:	d901      	bls.n	8001c9a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c96:	2303      	movs	r3, #3
 8001c98:	e3c0      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c9a:	4b59      	ldr	r3, [pc, #356]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d1f0      	bne.n	8001c88 <HAL_RCC_OscConfig+0x110>
 8001ca6:	e000      	b.n	8001caa <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80ca 	beq.w	8001e4c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cb8:	4b51      	ldr	r3, [pc, #324]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cc0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001cc2:	4b4f      	ldr	r3, [pc, #316]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cc6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001cc8:	6a3b      	ldr	r3, [r7, #32]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d007      	beq.n	8001cde <HAL_RCC_OscConfig+0x166>
 8001cce:	6a3b      	ldr	r3, [r7, #32]
 8001cd0:	2b18      	cmp	r3, #24
 8001cd2:	d156      	bne.n	8001d82 <HAL_RCC_OscConfig+0x20a>
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d151      	bne.n	8001d82 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cde:	4b48      	ldr	r3, [pc, #288]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f003 0304 	and.w	r3, r3, #4
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d005      	beq.n	8001cf6 <HAL_RCC_OscConfig+0x17e>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68db      	ldr	r3, [r3, #12]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001cf2:	2301      	movs	r3, #1
 8001cf4:	e392      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001cf6:	4b42      	ldr	r3, [pc, #264]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f023 0219 	bic.w	r2, r3, #25
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	493f      	ldr	r1, [pc, #252]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001d04:	4313      	orrs	r3, r2
 8001d06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d08:	f7ff fbaa 	bl	8001460 <HAL_GetTick>
 8001d0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d10:	f7ff fba6 	bl	8001460 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e37c      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d22:	4b37      	ldr	r3, [pc, #220]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d0f0      	beq.n	8001d10 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d2e:	f7ff fbc7 	bl	80014c0 <HAL_GetREVID>
 8001d32:	4603      	mov	r3, r0
 8001d34:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d817      	bhi.n	8001d6c <HAL_RCC_OscConfig+0x1f4>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	691b      	ldr	r3, [r3, #16]
 8001d40:	2b40      	cmp	r3, #64	@ 0x40
 8001d42:	d108      	bne.n	8001d56 <HAL_RCC_OscConfig+0x1de>
 8001d44:	4b2e      	ldr	r3, [pc, #184]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001d46:	685b      	ldr	r3, [r3, #4]
 8001d48:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001d4c:	4a2c      	ldr	r2, [pc, #176]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001d4e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d52:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d54:	e07a      	b.n	8001e4c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d56:	4b2a      	ldr	r3, [pc, #168]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	031b      	lsls	r3, r3, #12
 8001d64:	4926      	ldr	r1, [pc, #152]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001d66:	4313      	orrs	r3, r2
 8001d68:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d6a:	e06f      	b.n	8001e4c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d6c:	4b24      	ldr	r3, [pc, #144]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	691b      	ldr	r3, [r3, #16]
 8001d78:	061b      	lsls	r3, r3, #24
 8001d7a:	4921      	ldr	r1, [pc, #132]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001d7c:	4313      	orrs	r3, r2
 8001d7e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d80:	e064      	b.n	8001e4c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d047      	beq.n	8001e1a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d8a:	4b1d      	ldr	r3, [pc, #116]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f023 0219 	bic.w	r2, r3, #25
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	68db      	ldr	r3, [r3, #12]
 8001d96:	491a      	ldr	r1, [pc, #104]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fb60 	bl	8001460 <HAL_GetTick>
 8001da0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001da4:	f7ff fb5c 	bl	8001460 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e332      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001db6:	4b12      	ldr	r3, [pc, #72]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0304 	and.w	r3, r3, #4
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dc2:	f7ff fb7d 	bl	80014c0 <HAL_GetREVID>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d819      	bhi.n	8001e04 <HAL_RCC_OscConfig+0x28c>
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	691b      	ldr	r3, [r3, #16]
 8001dd4:	2b40      	cmp	r3, #64	@ 0x40
 8001dd6:	d108      	bne.n	8001dea <HAL_RCC_OscConfig+0x272>
 8001dd8:	4b09      	ldr	r3, [pc, #36]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001de0:	4a07      	ldr	r2, [pc, #28]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001de2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001de6:	6053      	str	r3, [r2, #4]
 8001de8:	e030      	b.n	8001e4c <HAL_RCC_OscConfig+0x2d4>
 8001dea:	4b05      	ldr	r3, [pc, #20]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	031b      	lsls	r3, r3, #12
 8001df8:	4901      	ldr	r1, [pc, #4]	@ (8001e00 <HAL_RCC_OscConfig+0x288>)
 8001dfa:	4313      	orrs	r3, r2
 8001dfc:	604b      	str	r3, [r1, #4]
 8001dfe:	e025      	b.n	8001e4c <HAL_RCC_OscConfig+0x2d4>
 8001e00:	58024400 	.word	0x58024400
 8001e04:	4b9a      	ldr	r3, [pc, #616]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	691b      	ldr	r3, [r3, #16]
 8001e10:	061b      	lsls	r3, r3, #24
 8001e12:	4997      	ldr	r1, [pc, #604]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001e14:	4313      	orrs	r3, r2
 8001e16:	604b      	str	r3, [r1, #4]
 8001e18:	e018      	b.n	8001e4c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1a:	4b95      	ldr	r3, [pc, #596]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4a94      	ldr	r2, [pc, #592]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e26:	f7ff fb1b 	bl	8001460 <HAL_GetTick>
 8001e2a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e2c:	e008      	b.n	8001e40 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e2e:	f7ff fb17 	bl	8001460 <HAL_GetTick>
 8001e32:	4602      	mov	r2, r0
 8001e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e36:	1ad3      	subs	r3, r2, r3
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e2ed      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001e40:	4b8b      	ldr	r3, [pc, #556]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1f0      	bne.n	8001e2e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	f000 80a9 	beq.w	8001fac <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e5a:	4b85      	ldr	r3, [pc, #532]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e62:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001e64:	4b82      	ldr	r3, [pc, #520]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e68:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d007      	beq.n	8001e80 <HAL_RCC_OscConfig+0x308>
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	2b18      	cmp	r3, #24
 8001e74:	d13a      	bne.n	8001eec <HAL_RCC_OscConfig+0x374>
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	f003 0303 	and.w	r3, r3, #3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d135      	bne.n	8001eec <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e80:	4b7b      	ldr	r3, [pc, #492]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d005      	beq.n	8001e98 <HAL_RCC_OscConfig+0x320>
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	2b80      	cmp	r3, #128	@ 0x80
 8001e92:	d001      	beq.n	8001e98 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e2c1      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e98:	f7ff fb12 	bl	80014c0 <HAL_GetREVID>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d817      	bhi.n	8001ed6 <HAL_RCC_OscConfig+0x35e>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6a1b      	ldr	r3, [r3, #32]
 8001eaa:	2b20      	cmp	r3, #32
 8001eac:	d108      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x348>
 8001eae:	4b70      	ldr	r3, [pc, #448]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001eb0:	685b      	ldr	r3, [r3, #4]
 8001eb2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001eb6:	4a6e      	ldr	r2, [pc, #440]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001eb8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ebc:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ebe:	e075      	b.n	8001fac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ec0:	4b6b      	ldr	r3, [pc, #428]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6a1b      	ldr	r3, [r3, #32]
 8001ecc:	069b      	lsls	r3, r3, #26
 8001ece:	4968      	ldr	r1, [pc, #416]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ed4:	e06a      	b.n	8001fac <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ed6:	4b66      	ldr	r3, [pc, #408]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a1b      	ldr	r3, [r3, #32]
 8001ee2:	061b      	lsls	r3, r3, #24
 8001ee4:	4962      	ldr	r1, [pc, #392]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001eea:	e05f      	b.n	8001fac <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	69db      	ldr	r3, [r3, #28]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d042      	beq.n	8001f7a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001ef4:	4b5e      	ldr	r3, [pc, #376]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a5d      	ldr	r2, [pc, #372]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001efa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7ff faae 	bl	8001460 <HAL_GetTick>
 8001f04:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f08:	f7ff faaa 	bl	8001460 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e280      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f1a:	4b55      	ldr	r3, [pc, #340]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d0f0      	beq.n	8001f08 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001f26:	f7ff facb 	bl	80014c0 <HAL_GetREVID>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d817      	bhi.n	8001f64 <HAL_RCC_OscConfig+0x3ec>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1b      	ldr	r3, [r3, #32]
 8001f38:	2b20      	cmp	r3, #32
 8001f3a:	d108      	bne.n	8001f4e <HAL_RCC_OscConfig+0x3d6>
 8001f3c:	4b4c      	ldr	r3, [pc, #304]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001f44:	4a4a      	ldr	r2, [pc, #296]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001f46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001f4a:	6053      	str	r3, [r2, #4]
 8001f4c:	e02e      	b.n	8001fac <HAL_RCC_OscConfig+0x434>
 8001f4e:	4b48      	ldr	r3, [pc, #288]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001f50:	685b      	ldr	r3, [r3, #4]
 8001f52:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
 8001f5a:	069b      	lsls	r3, r3, #26
 8001f5c:	4944      	ldr	r1, [pc, #272]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	604b      	str	r3, [r1, #4]
 8001f62:	e023      	b.n	8001fac <HAL_RCC_OscConfig+0x434>
 8001f64:	4b42      	ldr	r3, [pc, #264]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001f66:	68db      	ldr	r3, [r3, #12]
 8001f68:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1b      	ldr	r3, [r3, #32]
 8001f70:	061b      	lsls	r3, r3, #24
 8001f72:	493f      	ldr	r1, [pc, #252]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	60cb      	str	r3, [r1, #12]
 8001f78:	e018      	b.n	8001fac <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4a3c      	ldr	r2, [pc, #240]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001f80:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f84:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f86:	f7ff fa6b 	bl	8001460 <HAL_GetTick>
 8001f8a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f8e:	f7ff fa67 	bl	8001460 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e23d      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001fa0:	4b33      	ldr	r3, [pc, #204]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d1f0      	bne.n	8001f8e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f003 0308 	and.w	r3, r3, #8
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d036      	beq.n	8002026 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	695b      	ldr	r3, [r3, #20]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d019      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc0:	4b2b      	ldr	r3, [pc, #172]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001fc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fc4:	4a2a      	ldr	r2, [pc, #168]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001fc6:	f043 0301 	orr.w	r3, r3, #1
 8001fca:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fcc:	f7ff fa48 	bl	8001460 <HAL_GetTick>
 8001fd0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fd2:	e008      	b.n	8001fe6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fd4:	f7ff fa44 	bl	8001460 <HAL_GetTick>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fdc:	1ad3      	subs	r3, r2, r3
 8001fde:	2b02      	cmp	r3, #2
 8001fe0:	d901      	bls.n	8001fe6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001fe2:	2303      	movs	r3, #3
 8001fe4:	e21a      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001fe6:	4b22      	ldr	r3, [pc, #136]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001fe8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fea:	f003 0302 	and.w	r3, r3, #2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d0f0      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x45c>
 8001ff2:	e018      	b.n	8002026 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ff4:	4b1e      	ldr	r3, [pc, #120]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001ff6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ff8:	4a1d      	ldr	r2, [pc, #116]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8001ffa:	f023 0301 	bic.w	r3, r3, #1
 8001ffe:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002000:	f7ff fa2e 	bl	8001460 <HAL_GetTick>
 8002004:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002008:	f7ff fa2a 	bl	8001460 <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e200      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800201a:	4b15      	ldr	r3, [pc, #84]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 800201c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800201e:	f003 0302 	and.w	r3, r3, #2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f003 0320 	and.w	r3, r3, #32
 800202e:	2b00      	cmp	r3, #0
 8002030:	d039      	beq.n	80020a6 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	2b00      	cmp	r3, #0
 8002038:	d01c      	beq.n	8002074 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800203a:	4b0d      	ldr	r3, [pc, #52]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	4a0c      	ldr	r2, [pc, #48]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8002040:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002044:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002046:	f7ff fa0b 	bl	8001460 <HAL_GetTick>
 800204a:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800204c:	e008      	b.n	8002060 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800204e:	f7ff fa07 	bl	8001460 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	2b02      	cmp	r3, #2
 800205a:	d901      	bls.n	8002060 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800205c:	2303      	movs	r3, #3
 800205e:	e1dd      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002060:	4b03      	ldr	r3, [pc, #12]	@ (8002070 <HAL_RCC_OscConfig+0x4f8>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002068:	2b00      	cmp	r3, #0
 800206a:	d0f0      	beq.n	800204e <HAL_RCC_OscConfig+0x4d6>
 800206c:	e01b      	b.n	80020a6 <HAL_RCC_OscConfig+0x52e>
 800206e:	bf00      	nop
 8002070:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002074:	4b9b      	ldr	r3, [pc, #620]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a9a      	ldr	r2, [pc, #616]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 800207a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800207e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002080:	f7ff f9ee 	bl	8001460 <HAL_GetTick>
 8002084:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002088:	f7ff f9ea 	bl	8001460 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e1c0      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800209a:	4b92      	ldr	r3, [pc, #584]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d1f0      	bne.n	8002088 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0304 	and.w	r3, r3, #4
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	f000 8081 	beq.w	80021b6 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020b4:	4b8c      	ldr	r3, [pc, #560]	@ (80022e8 <HAL_RCC_OscConfig+0x770>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a8b      	ldr	r2, [pc, #556]	@ (80022e8 <HAL_RCC_OscConfig+0x770>)
 80020ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020be:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020c0:	f7ff f9ce 	bl	8001460 <HAL_GetTick>
 80020c4:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020c6:	e008      	b.n	80020da <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c8:	f7ff f9ca 	bl	8001460 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b64      	cmp	r3, #100	@ 0x64
 80020d4:	d901      	bls.n	80020da <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e1a0      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80020da:	4b83      	ldr	r3, [pc, #524]	@ (80022e8 <HAL_RCC_OscConfig+0x770>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d106      	bne.n	80020fc <HAL_RCC_OscConfig+0x584>
 80020ee:	4b7d      	ldr	r3, [pc, #500]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80020f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020f2:	4a7c      	ldr	r2, [pc, #496]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80020fa:	e02d      	b.n	8002158 <HAL_RCC_OscConfig+0x5e0>
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	2b00      	cmp	r3, #0
 8002102:	d10c      	bne.n	800211e <HAL_RCC_OscConfig+0x5a6>
 8002104:	4b77      	ldr	r3, [pc, #476]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002106:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002108:	4a76      	ldr	r2, [pc, #472]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 800210a:	f023 0301 	bic.w	r3, r3, #1
 800210e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002110:	4b74      	ldr	r3, [pc, #464]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002112:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002114:	4a73      	ldr	r2, [pc, #460]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002116:	f023 0304 	bic.w	r3, r3, #4
 800211a:	6713      	str	r3, [r2, #112]	@ 0x70
 800211c:	e01c      	b.n	8002158 <HAL_RCC_OscConfig+0x5e0>
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	689b      	ldr	r3, [r3, #8]
 8002122:	2b05      	cmp	r3, #5
 8002124:	d10c      	bne.n	8002140 <HAL_RCC_OscConfig+0x5c8>
 8002126:	4b6f      	ldr	r3, [pc, #444]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002128:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800212a:	4a6e      	ldr	r2, [pc, #440]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 800212c:	f043 0304 	orr.w	r3, r3, #4
 8002130:	6713      	str	r3, [r2, #112]	@ 0x70
 8002132:	4b6c      	ldr	r3, [pc, #432]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002134:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002136:	4a6b      	ldr	r2, [pc, #428]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002138:	f043 0301 	orr.w	r3, r3, #1
 800213c:	6713      	str	r3, [r2, #112]	@ 0x70
 800213e:	e00b      	b.n	8002158 <HAL_RCC_OscConfig+0x5e0>
 8002140:	4b68      	ldr	r3, [pc, #416]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002142:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002144:	4a67      	ldr	r2, [pc, #412]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002146:	f023 0301 	bic.w	r3, r3, #1
 800214a:	6713      	str	r3, [r2, #112]	@ 0x70
 800214c:	4b65      	ldr	r3, [pc, #404]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 800214e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002150:	4a64      	ldr	r2, [pc, #400]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002152:	f023 0304 	bic.w	r3, r3, #4
 8002156:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d015      	beq.n	800218c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002160:	f7ff f97e 	bl	8001460 <HAL_GetTick>
 8002164:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002166:	e00a      	b.n	800217e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002168:	f7ff f97a 	bl	8001460 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002176:	4293      	cmp	r3, r2
 8002178:	d901      	bls.n	800217e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e14e      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800217e:	4b59      	ldr	r3, [pc, #356]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002180:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d0ee      	beq.n	8002168 <HAL_RCC_OscConfig+0x5f0>
 800218a:	e014      	b.n	80021b6 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800218c:	f7ff f968 	bl	8001460 <HAL_GetTick>
 8002190:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002192:	e00a      	b.n	80021aa <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002194:	f7ff f964 	bl	8001460 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d901      	bls.n	80021aa <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80021a6:	2303      	movs	r3, #3
 80021a8:	e138      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80021aa:	4b4e      	ldr	r3, [pc, #312]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ae:	f003 0302 	and.w	r3, r3, #2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d1ee      	bne.n	8002194 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	f000 812d 	beq.w	800241a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80021c0:	4b48      	ldr	r3, [pc, #288]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80021c2:	691b      	ldr	r3, [r3, #16]
 80021c4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80021c8:	2b18      	cmp	r3, #24
 80021ca:	f000 80bd 	beq.w	8002348 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	f040 809e 	bne.w	8002314 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021d8:	4b42      	ldr	r3, [pc, #264]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a41      	ldr	r2, [pc, #260]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80021de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80021e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021e4:	f7ff f93c 	bl	8001460 <HAL_GetTick>
 80021e8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021ec:	f7ff f938 	bl	8001460 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e10e      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80021fe:	4b39      	ldr	r3, [pc, #228]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d1f0      	bne.n	80021ec <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800220a:	4b36      	ldr	r3, [pc, #216]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 800220c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800220e:	4b37      	ldr	r3, [pc, #220]	@ (80022ec <HAL_RCC_OscConfig+0x774>)
 8002210:	4013      	ands	r3, r2
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002216:	687a      	ldr	r2, [r7, #4]
 8002218:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800221a:	0112      	lsls	r2, r2, #4
 800221c:	430a      	orrs	r2, r1
 800221e:	4931      	ldr	r1, [pc, #196]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002220:	4313      	orrs	r3, r2
 8002222:	628b      	str	r3, [r1, #40]	@ 0x28
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002228:	3b01      	subs	r3, #1
 800222a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002232:	3b01      	subs	r3, #1
 8002234:	025b      	lsls	r3, r3, #9
 8002236:	b29b      	uxth	r3, r3
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800223e:	3b01      	subs	r3, #1
 8002240:	041b      	lsls	r3, r3, #16
 8002242:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002246:	431a      	orrs	r2, r3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800224c:	3b01      	subs	r3, #1
 800224e:	061b      	lsls	r3, r3, #24
 8002250:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002254:	4923      	ldr	r1, [pc, #140]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002256:	4313      	orrs	r3, r2
 8002258:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800225a:	4b22      	ldr	r3, [pc, #136]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 800225c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225e:	4a21      	ldr	r2, [pc, #132]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002260:	f023 0301 	bic.w	r3, r3, #1
 8002264:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002266:	4b1f      	ldr	r3, [pc, #124]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002268:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800226a:	4b21      	ldr	r3, [pc, #132]	@ (80022f0 <HAL_RCC_OscConfig+0x778>)
 800226c:	4013      	ands	r3, r2
 800226e:	687a      	ldr	r2, [r7, #4]
 8002270:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002272:	00d2      	lsls	r2, r2, #3
 8002274:	491b      	ldr	r1, [pc, #108]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002276:	4313      	orrs	r3, r2
 8002278:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800227a:	4b1a      	ldr	r3, [pc, #104]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 800227c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800227e:	f023 020c 	bic.w	r2, r3, #12
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002286:	4917      	ldr	r1, [pc, #92]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 8002288:	4313      	orrs	r3, r2
 800228a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800228c:	4b15      	ldr	r3, [pc, #84]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 800228e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002290:	f023 0202 	bic.w	r2, r3, #2
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002298:	4912      	ldr	r1, [pc, #72]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 800229a:	4313      	orrs	r3, r2
 800229c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800229e:	4b11      	ldr	r3, [pc, #68]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80022a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a2:	4a10      	ldr	r2, [pc, #64]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80022a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80022a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80022aa:	4b0e      	ldr	r3, [pc, #56]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80022ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ae:	4a0d      	ldr	r2, [pc, #52]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80022b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80022b4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80022b6:	4b0b      	ldr	r3, [pc, #44]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80022b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022ba:	4a0a      	ldr	r2, [pc, #40]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80022bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022c0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80022c2:	4b08      	ldr	r3, [pc, #32]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80022c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022c6:	4a07      	ldr	r2, [pc, #28]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80022c8:	f043 0301 	orr.w	r3, r3, #1
 80022cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022ce:	4b05      	ldr	r3, [pc, #20]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a04      	ldr	r2, [pc, #16]	@ (80022e4 <HAL_RCC_OscConfig+0x76c>)
 80022d4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80022d8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022da:	f7ff f8c1 	bl	8001460 <HAL_GetTick>
 80022de:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80022e0:	e011      	b.n	8002306 <HAL_RCC_OscConfig+0x78e>
 80022e2:	bf00      	nop
 80022e4:	58024400 	.word	0x58024400
 80022e8:	58024800 	.word	0x58024800
 80022ec:	fffffc0c 	.word	0xfffffc0c
 80022f0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022f4:	f7ff f8b4 	bl	8001460 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e08a      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002306:	4b47      	ldr	r3, [pc, #284]	@ (8002424 <HAL_RCC_OscConfig+0x8ac>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230e:	2b00      	cmp	r3, #0
 8002310:	d0f0      	beq.n	80022f4 <HAL_RCC_OscConfig+0x77c>
 8002312:	e082      	b.n	800241a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002314:	4b43      	ldr	r3, [pc, #268]	@ (8002424 <HAL_RCC_OscConfig+0x8ac>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a42      	ldr	r2, [pc, #264]	@ (8002424 <HAL_RCC_OscConfig+0x8ac>)
 800231a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800231e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7ff f89e 	bl	8001460 <HAL_GetTick>
 8002324:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002328:	f7ff f89a 	bl	8001460 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e070      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800233a:	4b3a      	ldr	r3, [pc, #232]	@ (8002424 <HAL_RCC_OscConfig+0x8ac>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x7b0>
 8002346:	e068      	b.n	800241a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002348:	4b36      	ldr	r3, [pc, #216]	@ (8002424 <HAL_RCC_OscConfig+0x8ac>)
 800234a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800234c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800234e:	4b35      	ldr	r3, [pc, #212]	@ (8002424 <HAL_RCC_OscConfig+0x8ac>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002352:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002358:	2b01      	cmp	r3, #1
 800235a:	d031      	beq.n	80023c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	f003 0203 	and.w	r2, r3, #3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002366:	429a      	cmp	r2, r3
 8002368:	d12a      	bne.n	80023c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	091b      	lsrs	r3, r3, #4
 800236e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002376:	429a      	cmp	r2, r3
 8002378:	d122      	bne.n	80023c0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002384:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002386:	429a      	cmp	r2, r3
 8002388:	d11a      	bne.n	80023c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	0a5b      	lsrs	r3, r3, #9
 800238e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002396:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002398:	429a      	cmp	r2, r3
 800239a:	d111      	bne.n	80023c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	0c1b      	lsrs	r3, r3, #16
 80023a0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80023a8:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d108      	bne.n	80023c0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	0e1b      	lsrs	r3, r3, #24
 80023b2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ba:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80023bc:	429a      	cmp	r2, r3
 80023be:	d001      	beq.n	80023c4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e02b      	b.n	800241c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80023c4:	4b17      	ldr	r3, [pc, #92]	@ (8002424 <HAL_RCC_OscConfig+0x8ac>)
 80023c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80023c8:	08db      	lsrs	r3, r3, #3
 80023ca:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80023ce:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023d4:	693a      	ldr	r2, [r7, #16]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d01f      	beq.n	800241a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80023da:	4b12      	ldr	r3, [pc, #72]	@ (8002424 <HAL_RCC_OscConfig+0x8ac>)
 80023dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023de:	4a11      	ldr	r2, [pc, #68]	@ (8002424 <HAL_RCC_OscConfig+0x8ac>)
 80023e0:	f023 0301 	bic.w	r3, r3, #1
 80023e4:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023e6:	f7ff f83b 	bl	8001460 <HAL_GetTick>
 80023ea:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80023ec:	bf00      	nop
 80023ee:	f7ff f837 	bl	8001460 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023f6:	4293      	cmp	r3, r2
 80023f8:	d0f9      	beq.n	80023ee <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002424 <HAL_RCC_OscConfig+0x8ac>)
 80023fc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002428 <HAL_RCC_OscConfig+0x8b0>)
 8002400:	4013      	ands	r3, r2
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002406:	00d2      	lsls	r2, r2, #3
 8002408:	4906      	ldr	r1, [pc, #24]	@ (8002424 <HAL_RCC_OscConfig+0x8ac>)
 800240a:	4313      	orrs	r3, r2
 800240c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800240e:	4b05      	ldr	r3, [pc, #20]	@ (8002424 <HAL_RCC_OscConfig+0x8ac>)
 8002410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002412:	4a04      	ldr	r2, [pc, #16]	@ (8002424 <HAL_RCC_OscConfig+0x8ac>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	3730      	adds	r7, #48	@ 0x30
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	58024400 	.word	0x58024400
 8002428:	ffff0007 	.word	0xffff0007

0800242c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800242c:	b580      	push	{r7, lr}
 800242e:	b086      	sub	sp, #24
 8002430:	af00      	add	r7, sp, #0
 8002432:	6078      	str	r0, [r7, #4]
 8002434:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d101      	bne.n	8002440 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e19c      	b.n	800277a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002440:	4b8a      	ldr	r3, [pc, #552]	@ (800266c <HAL_RCC_ClockConfig+0x240>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 030f 	and.w	r3, r3, #15
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	429a      	cmp	r2, r3
 800244c:	d910      	bls.n	8002470 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244e:	4b87      	ldr	r3, [pc, #540]	@ (800266c <HAL_RCC_ClockConfig+0x240>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f023 020f 	bic.w	r2, r3, #15
 8002456:	4985      	ldr	r1, [pc, #532]	@ (800266c <HAL_RCC_ClockConfig+0x240>)
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	4313      	orrs	r3, r2
 800245c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245e:	4b83      	ldr	r3, [pc, #524]	@ (800266c <HAL_RCC_ClockConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 030f 	and.w	r3, r3, #15
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	429a      	cmp	r2, r3
 800246a:	d001      	beq.n	8002470 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800246c:	2301      	movs	r3, #1
 800246e:	e184      	b.n	800277a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d010      	beq.n	800249e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691a      	ldr	r2, [r3, #16]
 8002480:	4b7b      	ldr	r3, [pc, #492]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002488:	429a      	cmp	r2, r3
 800248a:	d908      	bls.n	800249e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800248c:	4b78      	ldr	r3, [pc, #480]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	4975      	ldr	r1, [pc, #468]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 800249a:	4313      	orrs	r3, r2
 800249c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0308 	and.w	r3, r3, #8
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d010      	beq.n	80024cc <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695a      	ldr	r2, [r3, #20]
 80024ae:	4b70      	ldr	r3, [pc, #448]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d908      	bls.n	80024cc <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024ba:	4b6d      	ldr	r3, [pc, #436]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	695b      	ldr	r3, [r3, #20]
 80024c6:	496a      	ldr	r1, [pc, #424]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0310 	and.w	r3, r3, #16
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d010      	beq.n	80024fa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	699a      	ldr	r2, [r3, #24]
 80024dc:	4b64      	ldr	r3, [pc, #400]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 80024de:	69db      	ldr	r3, [r3, #28]
 80024e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d908      	bls.n	80024fa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024e8:	4b61      	ldr	r3, [pc, #388]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 80024ea:	69db      	ldr	r3, [r3, #28]
 80024ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	495e      	ldr	r1, [pc, #376]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0320 	and.w	r3, r3, #32
 8002502:	2b00      	cmp	r3, #0
 8002504:	d010      	beq.n	8002528 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69da      	ldr	r2, [r3, #28]
 800250a:	4b59      	ldr	r3, [pc, #356]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 800250c:	6a1b      	ldr	r3, [r3, #32]
 800250e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002512:	429a      	cmp	r2, r3
 8002514:	d908      	bls.n	8002528 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002516:	4b56      	ldr	r3, [pc, #344]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69db      	ldr	r3, [r3, #28]
 8002522:	4953      	ldr	r1, [pc, #332]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002524:	4313      	orrs	r3, r2
 8002526:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d010      	beq.n	8002556 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	68da      	ldr	r2, [r3, #12]
 8002538:	4b4d      	ldr	r3, [pc, #308]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 800253a:	699b      	ldr	r3, [r3, #24]
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	429a      	cmp	r2, r3
 8002542:	d908      	bls.n	8002556 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002544:	4b4a      	ldr	r3, [pc, #296]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f023 020f 	bic.w	r2, r3, #15
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	4947      	ldr	r1, [pc, #284]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002552:	4313      	orrs	r3, r2
 8002554:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0301 	and.w	r3, r3, #1
 800255e:	2b00      	cmp	r3, #0
 8002560:	d055      	beq.n	800260e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002562:	4b43      	ldr	r3, [pc, #268]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	4940      	ldr	r1, [pc, #256]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002570:	4313      	orrs	r3, r2
 8002572:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b02      	cmp	r3, #2
 800257a:	d107      	bne.n	800258c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800257c:	4b3c      	ldr	r3, [pc, #240]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002584:	2b00      	cmp	r3, #0
 8002586:	d121      	bne.n	80025cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	e0f6      	b.n	800277a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b03      	cmp	r3, #3
 8002592:	d107      	bne.n	80025a4 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002594:	4b36      	ldr	r3, [pc, #216]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d115      	bne.n	80025cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0ea      	b.n	800277a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	685b      	ldr	r3, [r3, #4]
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d107      	bne.n	80025bc <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025ac:	4b30      	ldr	r3, [pc, #192]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d109      	bne.n	80025cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025b8:	2301      	movs	r3, #1
 80025ba:	e0de      	b.n	800277a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80025bc:	4b2c      	ldr	r3, [pc, #176]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d101      	bne.n	80025cc <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0d6      	b.n	800277a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025cc:	4b28      	ldr	r3, [pc, #160]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	f023 0207 	bic.w	r2, r3, #7
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	4925      	ldr	r1, [pc, #148]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025de:	f7fe ff3f 	bl	8001460 <HAL_GetTick>
 80025e2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025e4:	e00a      	b.n	80025fc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025e6:	f7fe ff3b 	bl	8001460 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d901      	bls.n	80025fc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80025f8:	2303      	movs	r3, #3
 80025fa:	e0be      	b.n	800277a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025fc:	4b1c      	ldr	r3, [pc, #112]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	00db      	lsls	r3, r3, #3
 800260a:	429a      	cmp	r2, r3
 800260c:	d1eb      	bne.n	80025e6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d010      	beq.n	800263c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	68da      	ldr	r2, [r3, #12]
 800261e:	4b14      	ldr	r3, [pc, #80]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002620:	699b      	ldr	r3, [r3, #24]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	429a      	cmp	r2, r3
 8002628:	d208      	bcs.n	800263c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800262a:	4b11      	ldr	r3, [pc, #68]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f023 020f 	bic.w	r2, r3, #15
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	490e      	ldr	r1, [pc, #56]	@ (8002670 <HAL_RCC_ClockConfig+0x244>)
 8002638:	4313      	orrs	r3, r2
 800263a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800263c:	4b0b      	ldr	r3, [pc, #44]	@ (800266c <HAL_RCC_ClockConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	683a      	ldr	r2, [r7, #0]
 8002646:	429a      	cmp	r2, r3
 8002648:	d214      	bcs.n	8002674 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264a:	4b08      	ldr	r3, [pc, #32]	@ (800266c <HAL_RCC_ClockConfig+0x240>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f023 020f 	bic.w	r2, r3, #15
 8002652:	4906      	ldr	r1, [pc, #24]	@ (800266c <HAL_RCC_ClockConfig+0x240>)
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	4313      	orrs	r3, r2
 8002658:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265a:	4b04      	ldr	r3, [pc, #16]	@ (800266c <HAL_RCC_ClockConfig+0x240>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f003 030f 	and.w	r3, r3, #15
 8002662:	683a      	ldr	r2, [r7, #0]
 8002664:	429a      	cmp	r2, r3
 8002666:	d005      	beq.n	8002674 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e086      	b.n	800277a <HAL_RCC_ClockConfig+0x34e>
 800266c:	52002000 	.word	0x52002000
 8002670:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0304 	and.w	r3, r3, #4
 800267c:	2b00      	cmp	r3, #0
 800267e:	d010      	beq.n	80026a2 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	691a      	ldr	r2, [r3, #16]
 8002684:	4b3f      	ldr	r3, [pc, #252]	@ (8002784 <HAL_RCC_ClockConfig+0x358>)
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800268c:	429a      	cmp	r2, r3
 800268e:	d208      	bcs.n	80026a2 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002690:	4b3c      	ldr	r3, [pc, #240]	@ (8002784 <HAL_RCC_ClockConfig+0x358>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	691b      	ldr	r3, [r3, #16]
 800269c:	4939      	ldr	r1, [pc, #228]	@ (8002784 <HAL_RCC_ClockConfig+0x358>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d010      	beq.n	80026d0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695a      	ldr	r2, [r3, #20]
 80026b2:	4b34      	ldr	r3, [pc, #208]	@ (8002784 <HAL_RCC_ClockConfig+0x358>)
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d208      	bcs.n	80026d0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80026be:	4b31      	ldr	r3, [pc, #196]	@ (8002784 <HAL_RCC_ClockConfig+0x358>)
 80026c0:	69db      	ldr	r3, [r3, #28]
 80026c2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	695b      	ldr	r3, [r3, #20]
 80026ca:	492e      	ldr	r1, [pc, #184]	@ (8002784 <HAL_RCC_ClockConfig+0x358>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 0310 	and.w	r3, r3, #16
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d010      	beq.n	80026fe <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	699a      	ldr	r2, [r3, #24]
 80026e0:	4b28      	ldr	r3, [pc, #160]	@ (8002784 <HAL_RCC_ClockConfig+0x358>)
 80026e2:	69db      	ldr	r3, [r3, #28]
 80026e4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d208      	bcs.n	80026fe <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80026ec:	4b25      	ldr	r3, [pc, #148]	@ (8002784 <HAL_RCC_ClockConfig+0x358>)
 80026ee:	69db      	ldr	r3, [r3, #28]
 80026f0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	699b      	ldr	r3, [r3, #24]
 80026f8:	4922      	ldr	r1, [pc, #136]	@ (8002784 <HAL_RCC_ClockConfig+0x358>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0320 	and.w	r3, r3, #32
 8002706:	2b00      	cmp	r3, #0
 8002708:	d010      	beq.n	800272c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69da      	ldr	r2, [r3, #28]
 800270e:	4b1d      	ldr	r3, [pc, #116]	@ (8002784 <HAL_RCC_ClockConfig+0x358>)
 8002710:	6a1b      	ldr	r3, [r3, #32]
 8002712:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002716:	429a      	cmp	r2, r3
 8002718:	d208      	bcs.n	800272c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800271a:	4b1a      	ldr	r3, [pc, #104]	@ (8002784 <HAL_RCC_ClockConfig+0x358>)
 800271c:	6a1b      	ldr	r3, [r3, #32]
 800271e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	69db      	ldr	r3, [r3, #28]
 8002726:	4917      	ldr	r1, [pc, #92]	@ (8002784 <HAL_RCC_ClockConfig+0x358>)
 8002728:	4313      	orrs	r3, r2
 800272a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800272c:	f000 f834 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 8002730:	4602      	mov	r2, r0
 8002732:	4b14      	ldr	r3, [pc, #80]	@ (8002784 <HAL_RCC_ClockConfig+0x358>)
 8002734:	699b      	ldr	r3, [r3, #24]
 8002736:	0a1b      	lsrs	r3, r3, #8
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	4912      	ldr	r1, [pc, #72]	@ (8002788 <HAL_RCC_ClockConfig+0x35c>)
 800273e:	5ccb      	ldrb	r3, [r1, r3]
 8002740:	f003 031f 	and.w	r3, r3, #31
 8002744:	fa22 f303 	lsr.w	r3, r2, r3
 8002748:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800274a:	4b0e      	ldr	r3, [pc, #56]	@ (8002784 <HAL_RCC_ClockConfig+0x358>)
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	f003 030f 	and.w	r3, r3, #15
 8002752:	4a0d      	ldr	r2, [pc, #52]	@ (8002788 <HAL_RCC_ClockConfig+0x35c>)
 8002754:	5cd3      	ldrb	r3, [r2, r3]
 8002756:	f003 031f 	and.w	r3, r3, #31
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	fa22 f303 	lsr.w	r3, r2, r3
 8002760:	4a0a      	ldr	r2, [pc, #40]	@ (800278c <HAL_RCC_ClockConfig+0x360>)
 8002762:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002764:	4a0a      	ldr	r2, [pc, #40]	@ (8002790 <HAL_RCC_ClockConfig+0x364>)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800276a:	4b0a      	ldr	r3, [pc, #40]	@ (8002794 <HAL_RCC_ClockConfig+0x368>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	4618      	mov	r0, r3
 8002770:	f7fe fe2c 	bl	80013cc <HAL_InitTick>
 8002774:	4603      	mov	r3, r0
 8002776:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002778:	7bfb      	ldrb	r3, [r7, #15]
}
 800277a:	4618      	mov	r0, r3
 800277c:	3718      	adds	r7, #24
 800277e:	46bd      	mov	sp, r7
 8002780:	bd80      	pop	{r7, pc}
 8002782:	bf00      	nop
 8002784:	58024400 	.word	0x58024400
 8002788:	080064a8 	.word	0x080064a8
 800278c:	24000004 	.word	0x24000004
 8002790:	24000000 	.word	0x24000000
 8002794:	2400000c 	.word	0x2400000c

08002798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002798:	b480      	push	{r7}
 800279a:	b089      	sub	sp, #36	@ 0x24
 800279c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800279e:	4bb3      	ldr	r3, [pc, #716]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80027a6:	2b18      	cmp	r3, #24
 80027a8:	f200 8155 	bhi.w	8002a56 <HAL_RCC_GetSysClockFreq+0x2be>
 80027ac:	a201      	add	r2, pc, #4	@ (adr r2, 80027b4 <HAL_RCC_GetSysClockFreq+0x1c>)
 80027ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027b2:	bf00      	nop
 80027b4:	08002819 	.word	0x08002819
 80027b8:	08002a57 	.word	0x08002a57
 80027bc:	08002a57 	.word	0x08002a57
 80027c0:	08002a57 	.word	0x08002a57
 80027c4:	08002a57 	.word	0x08002a57
 80027c8:	08002a57 	.word	0x08002a57
 80027cc:	08002a57 	.word	0x08002a57
 80027d0:	08002a57 	.word	0x08002a57
 80027d4:	0800283f 	.word	0x0800283f
 80027d8:	08002a57 	.word	0x08002a57
 80027dc:	08002a57 	.word	0x08002a57
 80027e0:	08002a57 	.word	0x08002a57
 80027e4:	08002a57 	.word	0x08002a57
 80027e8:	08002a57 	.word	0x08002a57
 80027ec:	08002a57 	.word	0x08002a57
 80027f0:	08002a57 	.word	0x08002a57
 80027f4:	08002845 	.word	0x08002845
 80027f8:	08002a57 	.word	0x08002a57
 80027fc:	08002a57 	.word	0x08002a57
 8002800:	08002a57 	.word	0x08002a57
 8002804:	08002a57 	.word	0x08002a57
 8002808:	08002a57 	.word	0x08002a57
 800280c:	08002a57 	.word	0x08002a57
 8002810:	08002a57 	.word	0x08002a57
 8002814:	0800284b 	.word	0x0800284b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002818:	4b94      	ldr	r3, [pc, #592]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0320 	and.w	r3, r3, #32
 8002820:	2b00      	cmp	r3, #0
 8002822:	d009      	beq.n	8002838 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002824:	4b91      	ldr	r3, [pc, #580]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	08db      	lsrs	r3, r3, #3
 800282a:	f003 0303 	and.w	r3, r3, #3
 800282e:	4a90      	ldr	r2, [pc, #576]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002830:	fa22 f303 	lsr.w	r3, r2, r3
 8002834:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002836:	e111      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002838:	4b8d      	ldr	r3, [pc, #564]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800283a:	61bb      	str	r3, [r7, #24]
      break;
 800283c:	e10e      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800283e:	4b8d      	ldr	r3, [pc, #564]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002840:	61bb      	str	r3, [r7, #24]
      break;
 8002842:	e10b      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002844:	4b8c      	ldr	r3, [pc, #560]	@ (8002a78 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002846:	61bb      	str	r3, [r7, #24]
      break;
 8002848:	e108      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800284a:	4b88      	ldr	r3, [pc, #544]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800284c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284e:	f003 0303 	and.w	r3, r3, #3
 8002852:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002854:	4b85      	ldr	r3, [pc, #532]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002858:	091b      	lsrs	r3, r3, #4
 800285a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800285e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002860:	4b82      	ldr	r3, [pc, #520]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800286a:	4b80      	ldr	r3, [pc, #512]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800286c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800286e:	08db      	lsrs	r3, r3, #3
 8002870:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	fb02 f303 	mul.w	r3, r2, r3
 800287a:	ee07 3a90 	vmov	s15, r3
 800287e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002882:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	f000 80e1 	beq.w	8002a50 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800288e:	697b      	ldr	r3, [r7, #20]
 8002890:	2b02      	cmp	r3, #2
 8002892:	f000 8083 	beq.w	800299c <HAL_RCC_GetSysClockFreq+0x204>
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	2b02      	cmp	r3, #2
 800289a:	f200 80a1 	bhi.w	80029e0 <HAL_RCC_GetSysClockFreq+0x248>
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x114>
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d056      	beq.n	8002958 <HAL_RCC_GetSysClockFreq+0x1c0>
 80028aa:	e099      	b.n	80029e0 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028ac:	4b6f      	ldr	r3, [pc, #444]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d02d      	beq.n	8002914 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80028b8:	4b6c      	ldr	r3, [pc, #432]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	08db      	lsrs	r3, r3, #3
 80028be:	f003 0303 	and.w	r3, r3, #3
 80028c2:	4a6b      	ldr	r2, [pc, #428]	@ (8002a70 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80028c4:	fa22 f303 	lsr.w	r3, r2, r3
 80028c8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	ee07 3a90 	vmov	s15, r3
 80028d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	ee07 3a90 	vmov	s15, r3
 80028da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028e2:	4b62      	ldr	r3, [pc, #392]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ea:	ee07 3a90 	vmov	s15, r3
 80028ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028f2:	ed97 6a02 	vldr	s12, [r7, #8]
 80028f6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 80028fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002902:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002906:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800290a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800290e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002912:	e087      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	ee07 3a90 	vmov	s15, r3
 800291a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800291e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002a80 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002922:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002926:	4b51      	ldr	r3, [pc, #324]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800292a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800292e:	ee07 3a90 	vmov	s15, r3
 8002932:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002936:	ed97 6a02 	vldr	s12, [r7, #8]
 800293a:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 800293e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002942:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002946:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800294a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800294e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002952:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002956:	e065      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	ee07 3a90 	vmov	s15, r3
 800295e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002962:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002a84 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002966:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800296a:	4b40      	ldr	r3, [pc, #256]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002972:	ee07 3a90 	vmov	s15, r3
 8002976:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800297a:	ed97 6a02 	vldr	s12, [r7, #8]
 800297e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002982:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002986:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800298a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800298e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002992:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002996:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800299a:	e043      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800299c:	693b      	ldr	r3, [r7, #16]
 800299e:	ee07 3a90 	vmov	s15, r3
 80029a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029a6:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002a88 <HAL_RCC_GetSysClockFreq+0x2f0>
 80029aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029ae:	4b2f      	ldr	r3, [pc, #188]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029b6:	ee07 3a90 	vmov	s15, r3
 80029ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029be:	ed97 6a02 	vldr	s12, [r7, #8]
 80029c2:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 80029c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029de:	e021      	b.n	8002a24 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	ee07 3a90 	vmov	s15, r3
 80029e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029ea:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002a84 <HAL_RCC_GetSysClockFreq+0x2ec>
 80029ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029f2:	4b1e      	ldr	r3, [pc, #120]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029fa:	ee07 3a90 	vmov	s15, r3
 80029fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a02:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a06:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002a7c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a1e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a22:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002a24:	4b11      	ldr	r3, [pc, #68]	@ (8002a6c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a28:	0a5b      	lsrs	r3, r3, #9
 8002a2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a2e:	3301      	adds	r3, #1
 8002a30:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	ee07 3a90 	vmov	s15, r3
 8002a38:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002a3c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002a40:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a44:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a48:	ee17 3a90 	vmov	r3, s15
 8002a4c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002a4e:	e005      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002a50:	2300      	movs	r3, #0
 8002a52:	61bb      	str	r3, [r7, #24]
      break;
 8002a54:	e002      	b.n	8002a5c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002a56:	4b07      	ldr	r3, [pc, #28]	@ (8002a74 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002a58:	61bb      	str	r3, [r7, #24]
      break;
 8002a5a:	bf00      	nop
  }

  return sysclockfreq;
 8002a5c:	69bb      	ldr	r3, [r7, #24]
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3724      	adds	r7, #36	@ 0x24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	58024400 	.word	0x58024400
 8002a70:	03d09000 	.word	0x03d09000
 8002a74:	003d0900 	.word	0x003d0900
 8002a78:	017d7840 	.word	0x017d7840
 8002a7c:	46000000 	.word	0x46000000
 8002a80:	4c742400 	.word	0x4c742400
 8002a84:	4a742400 	.word	0x4a742400
 8002a88:	4bbebc20 	.word	0x4bbebc20

08002a8c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002a92:	f7ff fe81 	bl	8002798 <HAL_RCC_GetSysClockFreq>
 8002a96:	4602      	mov	r2, r0
 8002a98:	4b10      	ldr	r3, [pc, #64]	@ (8002adc <HAL_RCC_GetHCLKFreq+0x50>)
 8002a9a:	699b      	ldr	r3, [r3, #24]
 8002a9c:	0a1b      	lsrs	r3, r3, #8
 8002a9e:	f003 030f 	and.w	r3, r3, #15
 8002aa2:	490f      	ldr	r1, [pc, #60]	@ (8002ae0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002aa4:	5ccb      	ldrb	r3, [r1, r3]
 8002aa6:	f003 031f 	and.w	r3, r3, #31
 8002aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8002aae:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ab0:	4b0a      	ldr	r3, [pc, #40]	@ (8002adc <HAL_RCC_GetHCLKFreq+0x50>)
 8002ab2:	699b      	ldr	r3, [r3, #24]
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	4a09      	ldr	r2, [pc, #36]	@ (8002ae0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002aba:	5cd3      	ldrb	r3, [r2, r3]
 8002abc:	f003 031f 	and.w	r3, r3, #31
 8002ac0:	687a      	ldr	r2, [r7, #4]
 8002ac2:	fa22 f303 	lsr.w	r3, r2, r3
 8002ac6:	4a07      	ldr	r2, [pc, #28]	@ (8002ae4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ac8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002aca:	4a07      	ldr	r2, [pc, #28]	@ (8002ae8 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002ad0:	4b04      	ldr	r3, [pc, #16]	@ (8002ae4 <HAL_RCC_GetHCLKFreq+0x58>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	3708      	adds	r7, #8
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bd80      	pop	{r7, pc}
 8002adc:	58024400 	.word	0x58024400
 8002ae0:	080064a8 	.word	0x080064a8
 8002ae4:	24000004 	.word	0x24000004
 8002ae8:	24000000 	.word	0x24000000

08002aec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002af0:	f7ff ffcc 	bl	8002a8c <HAL_RCC_GetHCLKFreq>
 8002af4:	4602      	mov	r2, r0
 8002af6:	4b06      	ldr	r3, [pc, #24]	@ (8002b10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	091b      	lsrs	r3, r3, #4
 8002afc:	f003 0307 	and.w	r3, r3, #7
 8002b00:	4904      	ldr	r1, [pc, #16]	@ (8002b14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b02:	5ccb      	ldrb	r3, [r1, r3]
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	58024400 	.word	0x58024400
 8002b14:	080064a8 	.word	0x080064a8

08002b18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002b1c:	f7ff ffb6 	bl	8002a8c <HAL_RCC_GetHCLKFreq>
 8002b20:	4602      	mov	r2, r0
 8002b22:	4b06      	ldr	r3, [pc, #24]	@ (8002b3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b24:	69db      	ldr	r3, [r3, #28]
 8002b26:	0a1b      	lsrs	r3, r3, #8
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	4904      	ldr	r1, [pc, #16]	@ (8002b40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b2e:	5ccb      	ldrb	r3, [r1, r3]
 8002b30:	f003 031f 	and.w	r3, r3, #31
 8002b34:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	58024400 	.word	0x58024400
 8002b40:	080064a8 	.word	0x080064a8

08002b44 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002b48:	f7ff ffa0 	bl	8002a8c <HAL_RCC_GetHCLKFreq>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	4b06      	ldr	r3, [pc, #24]	@ (8002b68 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	091b      	lsrs	r3, r3, #4
 8002b54:	f003 0307 	and.w	r3, r3, #7
 8002b58:	4904      	ldr	r1, [pc, #16]	@ (8002b6c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002b5a:	5ccb      	ldrb	r3, [r1, r3]
 8002b5c:	f003 031f 	and.w	r3, r3, #31
 8002b60:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	58024400 	.word	0x58024400
 8002b6c:	080064a8 	.word	0x080064a8

08002b70 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8002b70:	b480      	push	{r7}
 8002b72:	b089      	sub	sp, #36	@ 0x24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b78:	4ba1      	ldr	r3, [pc, #644]	@ (8002e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7c:	f003 0303 	and.w	r3, r3, #3
 8002b80:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8002b82:	4b9f      	ldr	r3, [pc, #636]	@ (8002e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b86:	0b1b      	lsrs	r3, r3, #12
 8002b88:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b8c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002b8e:	4b9c      	ldr	r3, [pc, #624]	@ (8002e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b92:	091b      	lsrs	r3, r3, #4
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8002b9a:	4b99      	ldr	r3, [pc, #612]	@ (8002e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b9e:	08db      	lsrs	r3, r3, #3
 8002ba0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ba4:	693a      	ldr	r2, [r7, #16]
 8002ba6:	fb02 f303 	mul.w	r3, r2, r3
 8002baa:	ee07 3a90 	vmov	s15, r3
 8002bae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bb2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 8111 	beq.w	8002de0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	f000 8083 	beq.w	8002ccc <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8002bc6:	69bb      	ldr	r3, [r7, #24]
 8002bc8:	2b02      	cmp	r3, #2
 8002bca:	f200 80a1 	bhi.w	8002d10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d003      	beq.n	8002bdc <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d056      	beq.n	8002c88 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8002bda:	e099      	b.n	8002d10 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bdc:	4b88      	ldr	r3, [pc, #544]	@ (8002e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0320 	and.w	r3, r3, #32
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d02d      	beq.n	8002c44 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002be8:	4b85      	ldr	r3, [pc, #532]	@ (8002e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	08db      	lsrs	r3, r3, #3
 8002bee:	f003 0303 	and.w	r3, r3, #3
 8002bf2:	4a84      	ldr	r2, [pc, #528]	@ (8002e04 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8002bf4:	fa22 f303 	lsr.w	r3, r2, r3
 8002bf8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002bfa:	68bb      	ldr	r3, [r7, #8]
 8002bfc:	ee07 3a90 	vmov	s15, r3
 8002c00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	ee07 3a90 	vmov	s15, r3
 8002c0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c12:	4b7b      	ldr	r3, [pc, #492]	@ (8002e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002c14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c1a:	ee07 3a90 	vmov	s15, r3
 8002c1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c22:	ed97 6a03 	vldr	s12, [r7, #12]
 8002c26:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002e08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002c2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c3e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002c42:	e087      	b.n	8002d54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	ee07 3a90 	vmov	s15, r3
 8002c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c4e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002e0c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8002c52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c56:	4b6a      	ldr	r3, [pc, #424]	@ (8002e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002c58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c5e:	ee07 3a90 	vmov	s15, r3
 8002c62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c66:	ed97 6a03 	vldr	s12, [r7, #12]
 8002c6a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002e08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002c6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c86:	e065      	b.n	8002d54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	ee07 3a90 	vmov	s15, r3
 8002c8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c92:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002e10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002c96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c9a:	4b59      	ldr	r3, [pc, #356]	@ (8002e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ca2:	ee07 3a90 	vmov	s15, r3
 8002ca6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002caa:	ed97 6a03 	vldr	s12, [r7, #12]
 8002cae:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002e08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002cb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cbe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cc6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002cca:	e043      	b.n	8002d54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	ee07 3a90 	vmov	s15, r3
 8002cd2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cd6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002e14 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8002cda:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cde:	4b48      	ldr	r3, [pc, #288]	@ (8002e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ce0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ce2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ce6:	ee07 3a90 	vmov	s15, r3
 8002cea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cee:	ed97 6a03 	vldr	s12, [r7, #12]
 8002cf2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002e08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002cf6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cfa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cfe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d0e:	e021      	b.n	8002d54 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	ee07 3a90 	vmov	s15, r3
 8002d16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d1a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002e10 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002d1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d22:	4b37      	ldr	r3, [pc, #220]	@ (8002e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d2a:	ee07 3a90 	vmov	s15, r3
 8002d2e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d32:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d36:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002e08 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002d3a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d3e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d42:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d46:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d4a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d4e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d52:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002d54:	4b2a      	ldr	r3, [pc, #168]	@ (8002e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002d56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d58:	0a5b      	lsrs	r3, r3, #9
 8002d5a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d5e:	ee07 3a90 	vmov	s15, r3
 8002d62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d66:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d6a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002d6e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d72:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d76:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d7a:	ee17 2a90 	vmov	r2, s15
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8002d82:	4b1f      	ldr	r3, [pc, #124]	@ (8002e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002d84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d86:	0c1b      	lsrs	r3, r3, #16
 8002d88:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d8c:	ee07 3a90 	vmov	s15, r3
 8002d90:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d94:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d98:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002d9c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002da0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002da4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002da8:	ee17 2a90 	vmov	r2, s15
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8002db0:	4b13      	ldr	r3, [pc, #76]	@ (8002e00 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db4:	0e1b      	lsrs	r3, r3, #24
 8002db6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dba:	ee07 3a90 	vmov	s15, r3
 8002dbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dc2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002dc6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002dca:	edd7 6a07 	vldr	s13, [r7, #28]
 8002dce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dd2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dd6:	ee17 2a90 	vmov	r2, s15
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002dde:	e008      	b.n	8002df2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2200      	movs	r2, #0
 8002dea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
}
 8002df2:	bf00      	nop
 8002df4:	3724      	adds	r7, #36	@ 0x24
 8002df6:	46bd      	mov	sp, r7
 8002df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfc:	4770      	bx	lr
 8002dfe:	bf00      	nop
 8002e00:	58024400 	.word	0x58024400
 8002e04:	03d09000 	.word	0x03d09000
 8002e08:	46000000 	.word	0x46000000
 8002e0c:	4c742400 	.word	0x4c742400
 8002e10:	4a742400 	.word	0x4a742400
 8002e14:	4bbebc20 	.word	0x4bbebc20

08002e18 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b089      	sub	sp, #36	@ 0x24
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002e20:	4ba1      	ldr	r3, [pc, #644]	@ (80030a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e24:	f003 0303 	and.w	r3, r3, #3
 8002e28:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8002e2a:	4b9f      	ldr	r3, [pc, #636]	@ (80030a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2e:	0d1b      	lsrs	r3, r3, #20
 8002e30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e34:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002e36:	4b9c      	ldr	r3, [pc, #624]	@ (80030a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e3a:	0a1b      	lsrs	r3, r3, #8
 8002e3c:	f003 0301 	and.w	r3, r3, #1
 8002e40:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002e42:	4b99      	ldr	r3, [pc, #612]	@ (80030a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e46:	08db      	lsrs	r3, r3, #3
 8002e48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002e4c:	693a      	ldr	r2, [r7, #16]
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	ee07 3a90 	vmov	s15, r3
 8002e56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e5a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	f000 8111 	beq.w	8003088 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	f000 8083 	beq.w	8002f74 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8002e6e:	69bb      	ldr	r3, [r7, #24]
 8002e70:	2b02      	cmp	r3, #2
 8002e72:	f200 80a1 	bhi.w	8002fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d003      	beq.n	8002e84 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	2b01      	cmp	r3, #1
 8002e80:	d056      	beq.n	8002f30 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8002e82:	e099      	b.n	8002fb8 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e84:	4b88      	ldr	r3, [pc, #544]	@ (80030a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f003 0320 	and.w	r3, r3, #32
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d02d      	beq.n	8002eec <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e90:	4b85      	ldr	r3, [pc, #532]	@ (80030a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	08db      	lsrs	r3, r3, #3
 8002e96:	f003 0303 	and.w	r3, r3, #3
 8002e9a:	4a84      	ldr	r2, [pc, #528]	@ (80030ac <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8002e9c:	fa22 f303 	lsr.w	r3, r2, r3
 8002ea0:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	ee07 3a90 	vmov	s15, r3
 8002ea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	ee07 3a90 	vmov	s15, r3
 8002eb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eba:	4b7b      	ldr	r3, [pc, #492]	@ (80030a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec2:	ee07 3a90 	vmov	s15, r3
 8002ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eca:	ed97 6a03 	vldr	s12, [r7, #12]
 8002ece:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80030b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ee6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002eea:	e087      	b.n	8002ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002eec:	697b      	ldr	r3, [r7, #20]
 8002eee:	ee07 3a90 	vmov	s15, r3
 8002ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ef6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80030b4 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8002efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002efe:	4b6a      	ldr	r3, [pc, #424]	@ (80030a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f06:	ee07 3a90 	vmov	s15, r3
 8002f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002f12:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80030b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f2e:	e065      	b.n	8002ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	ee07 3a90 	vmov	s15, r3
 8002f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f3a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80030b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f42:	4b59      	ldr	r3, [pc, #356]	@ (80030a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f4a:	ee07 3a90 	vmov	s15, r3
 8002f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f52:	ed97 6a03 	vldr	s12, [r7, #12]
 8002f56:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80030b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f72:	e043      	b.n	8002ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	ee07 3a90 	vmov	s15, r3
 8002f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f7e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80030bc <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8002f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f86:	4b48      	ldr	r3, [pc, #288]	@ (80030a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f8e:	ee07 3a90 	vmov	s15, r3
 8002f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f96:	ed97 6a03 	vldr	s12, [r7, #12]
 8002f9a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80030b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002fb6:	e021      	b.n	8002ffc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	ee07 3a90 	vmov	s15, r3
 8002fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80030b8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fca:	4b37      	ldr	r3, [pc, #220]	@ (80030a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd2:	ee07 3a90 	vmov	s15, r3
 8002fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fda:	ed97 6a03 	vldr	s12, [r7, #12]
 8002fde:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80030b0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ff6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ffa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8002ffc:	4b2a      	ldr	r3, [pc, #168]	@ (80030a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003000:	0a5b      	lsrs	r3, r3, #9
 8003002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003006:	ee07 3a90 	vmov	s15, r3
 800300a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800300e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003012:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003016:	edd7 6a07 	vldr	s13, [r7, #28]
 800301a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800301e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003022:	ee17 2a90 	vmov	r2, s15
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800302a:	4b1f      	ldr	r3, [pc, #124]	@ (80030a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800302c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302e:	0c1b      	lsrs	r3, r3, #16
 8003030:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003034:	ee07 3a90 	vmov	s15, r3
 8003038:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800303c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003040:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003044:	edd7 6a07 	vldr	s13, [r7, #28]
 8003048:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800304c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003050:	ee17 2a90 	vmov	r2, s15
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003058:	4b13      	ldr	r3, [pc, #76]	@ (80030a8 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800305a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305c:	0e1b      	lsrs	r3, r3, #24
 800305e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003062:	ee07 3a90 	vmov	s15, r3
 8003066:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800306a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800306e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003072:	edd7 6a07 	vldr	s13, [r7, #28]
 8003076:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800307a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800307e:	ee17 2a90 	vmov	r2, s15
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003086:	e008      	b.n	800309a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2200      	movs	r2, #0
 800308c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	609a      	str	r2, [r3, #8]
}
 800309a:	bf00      	nop
 800309c:	3724      	adds	r7, #36	@ 0x24
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	58024400 	.word	0x58024400
 80030ac:	03d09000 	.word	0x03d09000
 80030b0:	46000000 	.word	0x46000000
 80030b4:	4c742400 	.word	0x4c742400
 80030b8:	4a742400 	.word	0x4a742400
 80030bc:	4bbebc20 	.word	0x4bbebc20

080030c0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b082      	sub	sp, #8
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d101      	bne.n	80030d2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e049      	b.n	8003166 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030d8:	b2db      	uxtb	r3, r3
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d106      	bne.n	80030ec <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2200      	movs	r2, #0
 80030e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f7fd fea6 	bl	8000e38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	3304      	adds	r3, #4
 80030fc:	4619      	mov	r1, r3
 80030fe:	4610      	mov	r0, r2
 8003100:	f000 fbf2 	bl	80038e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2201      	movs	r2, #1
 8003138:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2201      	movs	r2, #1
 8003140:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2201      	movs	r2, #1
 8003148:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2201      	movs	r2, #1
 8003150:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2201      	movs	r2, #1
 8003158:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2201      	movs	r2, #1
 8003160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003164:	2300      	movs	r3, #0
}
 8003166:	4618      	mov	r0, r3
 8003168:	3708      	adds	r7, #8
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}

0800316e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800316e:	b580      	push	{r7, lr}
 8003170:	b082      	sub	sp, #8
 8003172:	af00      	add	r7, sp, #0
 8003174:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d101      	bne.n	8003180 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	e049      	b.n	8003214 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003186:	b2db      	uxtb	r3, r3
 8003188:	2b00      	cmp	r3, #0
 800318a:	d106      	bne.n	800319a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	2200      	movs	r2, #0
 8003190:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003194:	6878      	ldr	r0, [r7, #4]
 8003196:	f000 f841 	bl	800321c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2202      	movs	r2, #2
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681a      	ldr	r2, [r3, #0]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	3304      	adds	r3, #4
 80031aa:	4619      	mov	r1, r3
 80031ac:	4610      	mov	r0, r2
 80031ae:	f000 fb9b 	bl	80038e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2201      	movs	r2, #1
 80031e6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2201      	movs	r2, #1
 80031ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2201      	movs	r2, #1
 80031f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2201      	movs	r2, #1
 80031fe:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2201      	movs	r2, #1
 8003206:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2201      	movs	r2, #1
 800320e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	3708      	adds	r7, #8
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800321c:	b480      	push	{r7}
 800321e:	b083      	sub	sp, #12
 8003220:	af00      	add	r7, sp, #0
 8003222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003224:	bf00      	nop
 8003226:	370c      	adds	r7, #12
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
 8003238:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b00      	cmp	r3, #0
 800323e:	d109      	bne.n	8003254 <HAL_TIM_PWM_Start+0x24>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b01      	cmp	r3, #1
 800324a:	bf14      	ite	ne
 800324c:	2301      	movne	r3, #1
 800324e:	2300      	moveq	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	e03c      	b.n	80032ce <HAL_TIM_PWM_Start+0x9e>
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	2b04      	cmp	r3, #4
 8003258:	d109      	bne.n	800326e <HAL_TIM_PWM_Start+0x3e>
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003260:	b2db      	uxtb	r3, r3
 8003262:	2b01      	cmp	r3, #1
 8003264:	bf14      	ite	ne
 8003266:	2301      	movne	r3, #1
 8003268:	2300      	moveq	r3, #0
 800326a:	b2db      	uxtb	r3, r3
 800326c:	e02f      	b.n	80032ce <HAL_TIM_PWM_Start+0x9e>
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b08      	cmp	r3, #8
 8003272:	d109      	bne.n	8003288 <HAL_TIM_PWM_Start+0x58>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800327a:	b2db      	uxtb	r3, r3
 800327c:	2b01      	cmp	r3, #1
 800327e:	bf14      	ite	ne
 8003280:	2301      	movne	r3, #1
 8003282:	2300      	moveq	r3, #0
 8003284:	b2db      	uxtb	r3, r3
 8003286:	e022      	b.n	80032ce <HAL_TIM_PWM_Start+0x9e>
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	2b0c      	cmp	r3, #12
 800328c:	d109      	bne.n	80032a2 <HAL_TIM_PWM_Start+0x72>
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b01      	cmp	r3, #1
 8003298:	bf14      	ite	ne
 800329a:	2301      	movne	r3, #1
 800329c:	2300      	moveq	r3, #0
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	e015      	b.n	80032ce <HAL_TIM_PWM_Start+0x9e>
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	2b10      	cmp	r3, #16
 80032a6:	d109      	bne.n	80032bc <HAL_TIM_PWM_Start+0x8c>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80032ae:	b2db      	uxtb	r3, r3
 80032b0:	2b01      	cmp	r3, #1
 80032b2:	bf14      	ite	ne
 80032b4:	2301      	movne	r3, #1
 80032b6:	2300      	moveq	r3, #0
 80032b8:	b2db      	uxtb	r3, r3
 80032ba:	e008      	b.n	80032ce <HAL_TIM_PWM_Start+0x9e>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b01      	cmp	r3, #1
 80032c6:	bf14      	ite	ne
 80032c8:	2301      	movne	r3, #1
 80032ca:	2300      	moveq	r3, #0
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80032d2:	2301      	movs	r3, #1
 80032d4:	e0a1      	b.n	800341a <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d104      	bne.n	80032e6 <HAL_TIM_PWM_Start+0xb6>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2202      	movs	r2, #2
 80032e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032e4:	e023      	b.n	800332e <HAL_TIM_PWM_Start+0xfe>
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	2b04      	cmp	r3, #4
 80032ea:	d104      	bne.n	80032f6 <HAL_TIM_PWM_Start+0xc6>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2202      	movs	r2, #2
 80032f0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032f4:	e01b      	b.n	800332e <HAL_TIM_PWM_Start+0xfe>
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b08      	cmp	r3, #8
 80032fa:	d104      	bne.n	8003306 <HAL_TIM_PWM_Start+0xd6>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2202      	movs	r2, #2
 8003300:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003304:	e013      	b.n	800332e <HAL_TIM_PWM_Start+0xfe>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b0c      	cmp	r3, #12
 800330a:	d104      	bne.n	8003316 <HAL_TIM_PWM_Start+0xe6>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003314:	e00b      	b.n	800332e <HAL_TIM_PWM_Start+0xfe>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b10      	cmp	r3, #16
 800331a:	d104      	bne.n	8003326 <HAL_TIM_PWM_Start+0xf6>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003324:	e003      	b.n	800332e <HAL_TIM_PWM_Start+0xfe>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2202      	movs	r2, #2
 800332a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	2201      	movs	r2, #1
 8003334:	6839      	ldr	r1, [r7, #0]
 8003336:	4618      	mov	r0, r3
 8003338:	f000 ffd4 	bl	80042e4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a38      	ldr	r2, [pc, #224]	@ (8003424 <HAL_TIM_PWM_Start+0x1f4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d013      	beq.n	800336e <HAL_TIM_PWM_Start+0x13e>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a37      	ldr	r2, [pc, #220]	@ (8003428 <HAL_TIM_PWM_Start+0x1f8>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00e      	beq.n	800336e <HAL_TIM_PWM_Start+0x13e>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4a35      	ldr	r2, [pc, #212]	@ (800342c <HAL_TIM_PWM_Start+0x1fc>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d009      	beq.n	800336e <HAL_TIM_PWM_Start+0x13e>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a34      	ldr	r2, [pc, #208]	@ (8003430 <HAL_TIM_PWM_Start+0x200>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d004      	beq.n	800336e <HAL_TIM_PWM_Start+0x13e>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a32      	ldr	r2, [pc, #200]	@ (8003434 <HAL_TIM_PWM_Start+0x204>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d101      	bne.n	8003372 <HAL_TIM_PWM_Start+0x142>
 800336e:	2301      	movs	r3, #1
 8003370:	e000      	b.n	8003374 <HAL_TIM_PWM_Start+0x144>
 8003372:	2300      	movs	r3, #0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d007      	beq.n	8003388 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003386:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a25      	ldr	r2, [pc, #148]	@ (8003424 <HAL_TIM_PWM_Start+0x1f4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d022      	beq.n	80033d8 <HAL_TIM_PWM_Start+0x1a8>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800339a:	d01d      	beq.n	80033d8 <HAL_TIM_PWM_Start+0x1a8>
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	4a25      	ldr	r2, [pc, #148]	@ (8003438 <HAL_TIM_PWM_Start+0x208>)
 80033a2:	4293      	cmp	r3, r2
 80033a4:	d018      	beq.n	80033d8 <HAL_TIM_PWM_Start+0x1a8>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	4a24      	ldr	r2, [pc, #144]	@ (800343c <HAL_TIM_PWM_Start+0x20c>)
 80033ac:	4293      	cmp	r3, r2
 80033ae:	d013      	beq.n	80033d8 <HAL_TIM_PWM_Start+0x1a8>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	4a22      	ldr	r2, [pc, #136]	@ (8003440 <HAL_TIM_PWM_Start+0x210>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d00e      	beq.n	80033d8 <HAL_TIM_PWM_Start+0x1a8>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a1a      	ldr	r2, [pc, #104]	@ (8003428 <HAL_TIM_PWM_Start+0x1f8>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d009      	beq.n	80033d8 <HAL_TIM_PWM_Start+0x1a8>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a1e      	ldr	r2, [pc, #120]	@ (8003444 <HAL_TIM_PWM_Start+0x214>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d004      	beq.n	80033d8 <HAL_TIM_PWM_Start+0x1a8>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a16      	ldr	r2, [pc, #88]	@ (800342c <HAL_TIM_PWM_Start+0x1fc>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d115      	bne.n	8003404 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	689a      	ldr	r2, [r3, #8]
 80033de:	4b1a      	ldr	r3, [pc, #104]	@ (8003448 <HAL_TIM_PWM_Start+0x218>)
 80033e0:	4013      	ands	r3, r2
 80033e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2b06      	cmp	r3, #6
 80033e8:	d015      	beq.n	8003416 <HAL_TIM_PWM_Start+0x1e6>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033f0:	d011      	beq.n	8003416 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f042 0201 	orr.w	r2, r2, #1
 8003400:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003402:	e008      	b.n	8003416 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f042 0201 	orr.w	r2, r2, #1
 8003412:	601a      	str	r2, [r3, #0]
 8003414:	e000      	b.n	8003418 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003416:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3710      	adds	r7, #16
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	40010000 	.word	0x40010000
 8003428:	40010400 	.word	0x40010400
 800342c:	40014000 	.word	0x40014000
 8003430:	40014400 	.word	0x40014400
 8003434:	40014800 	.word	0x40014800
 8003438:	40000400 	.word	0x40000400
 800343c:	40000800 	.word	0x40000800
 8003440:	40000c00 	.word	0x40000c00
 8003444:	40001800 	.word	0x40001800
 8003448:	00010007 	.word	0x00010007

0800344c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	60f8      	str	r0, [r7, #12]
 8003454:	60b9      	str	r1, [r7, #8]
 8003456:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003458:	2300      	movs	r3, #0
 800345a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003462:	2b01      	cmp	r3, #1
 8003464:	d101      	bne.n	800346a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003466:	2302      	movs	r3, #2
 8003468:	e0ff      	b.n	800366a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2201      	movs	r2, #1
 800346e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2b14      	cmp	r3, #20
 8003476:	f200 80f0 	bhi.w	800365a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800347a:	a201      	add	r2, pc, #4	@ (adr r2, 8003480 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800347c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003480:	080034d5 	.word	0x080034d5
 8003484:	0800365b 	.word	0x0800365b
 8003488:	0800365b 	.word	0x0800365b
 800348c:	0800365b 	.word	0x0800365b
 8003490:	08003515 	.word	0x08003515
 8003494:	0800365b 	.word	0x0800365b
 8003498:	0800365b 	.word	0x0800365b
 800349c:	0800365b 	.word	0x0800365b
 80034a0:	08003557 	.word	0x08003557
 80034a4:	0800365b 	.word	0x0800365b
 80034a8:	0800365b 	.word	0x0800365b
 80034ac:	0800365b 	.word	0x0800365b
 80034b0:	08003597 	.word	0x08003597
 80034b4:	0800365b 	.word	0x0800365b
 80034b8:	0800365b 	.word	0x0800365b
 80034bc:	0800365b 	.word	0x0800365b
 80034c0:	080035d9 	.word	0x080035d9
 80034c4:	0800365b 	.word	0x0800365b
 80034c8:	0800365b 	.word	0x0800365b
 80034cc:	0800365b 	.word	0x0800365b
 80034d0:	08003619 	.word	0x08003619
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	68b9      	ldr	r1, [r7, #8]
 80034da:	4618      	mov	r0, r3
 80034dc:	f000 faa4 	bl	8003a28 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	699a      	ldr	r2, [r3, #24]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f042 0208 	orr.w	r2, r2, #8
 80034ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	699a      	ldr	r2, [r3, #24]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f022 0204 	bic.w	r2, r2, #4
 80034fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6999      	ldr	r1, [r3, #24]
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	691a      	ldr	r2, [r3, #16]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	430a      	orrs	r2, r1
 8003510:	619a      	str	r2, [r3, #24]
      break;
 8003512:	e0a5      	b.n	8003660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68b9      	ldr	r1, [r7, #8]
 800351a:	4618      	mov	r0, r3
 800351c:	f000 fb14 	bl	8003b48 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	699a      	ldr	r2, [r3, #24]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800352e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	699a      	ldr	r2, [r3, #24]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800353e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	6999      	ldr	r1, [r3, #24]
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	691b      	ldr	r3, [r3, #16]
 800354a:	021a      	lsls	r2, r3, #8
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	430a      	orrs	r2, r1
 8003552:	619a      	str	r2, [r3, #24]
      break;
 8003554:	e084      	b.n	8003660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68b9      	ldr	r1, [r7, #8]
 800355c:	4618      	mov	r0, r3
 800355e:	f000 fb7d 	bl	8003c5c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	69da      	ldr	r2, [r3, #28]
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f042 0208 	orr.w	r2, r2, #8
 8003570:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	69da      	ldr	r2, [r3, #28]
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f022 0204 	bic.w	r2, r2, #4
 8003580:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	69d9      	ldr	r1, [r3, #28]
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	691a      	ldr	r2, [r3, #16]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	430a      	orrs	r2, r1
 8003592:	61da      	str	r2, [r3, #28]
      break;
 8003594:	e064      	b.n	8003660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68b9      	ldr	r1, [r7, #8]
 800359c:	4618      	mov	r0, r3
 800359e:	f000 fbe5 	bl	8003d6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	69da      	ldr	r2, [r3, #28]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	69da      	ldr	r2, [r3, #28]
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	69d9      	ldr	r1, [r3, #28]
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	021a      	lsls	r2, r3, #8
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	430a      	orrs	r2, r1
 80035d4:	61da      	str	r2, [r3, #28]
      break;
 80035d6:	e043      	b.n	8003660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	68b9      	ldr	r1, [r7, #8]
 80035de:	4618      	mov	r0, r3
 80035e0:	f000 fc2e 	bl	8003e40 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0208 	orr.w	r2, r2, #8
 80035f2:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f022 0204 	bic.w	r2, r2, #4
 8003602:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	691a      	ldr	r2, [r3, #16]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003616:	e023      	b.n	8003660 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	68b9      	ldr	r1, [r7, #8]
 800361e:	4618      	mov	r0, r3
 8003620:	f000 fc72 	bl	8003f08 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003632:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003642:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800364a:	68bb      	ldr	r3, [r7, #8]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	021a      	lsls	r2, r3, #8
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	430a      	orrs	r2, r1
 8003656:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003658:	e002      	b.n	8003660 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800365a:	2301      	movs	r3, #1
 800365c:	75fb      	strb	r3, [r7, #23]
      break;
 800365e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003668:	7dfb      	ldrb	r3, [r7, #23]
}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}
 8003672:	bf00      	nop

08003674 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003674:	b580      	push	{r7, lr}
 8003676:	b084      	sub	sp, #16
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
 800367c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003688:	2b01      	cmp	r3, #1
 800368a:	d101      	bne.n	8003690 <HAL_TIM_ConfigClockSource+0x1c>
 800368c:	2302      	movs	r3, #2
 800368e:	e0dc      	b.n	800384a <HAL_TIM_ConfigClockSource+0x1d6>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2202      	movs	r2, #2
 800369c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036a8:	68ba      	ldr	r2, [r7, #8]
 80036aa:	4b6a      	ldr	r3, [pc, #424]	@ (8003854 <HAL_TIM_ConfigClockSource+0x1e0>)
 80036ac:	4013      	ands	r3, r2
 80036ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80036b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a64      	ldr	r2, [pc, #400]	@ (8003858 <HAL_TIM_ConfigClockSource+0x1e4>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	f000 80a9 	beq.w	800381e <HAL_TIM_ConfigClockSource+0x1aa>
 80036cc:	4a62      	ldr	r2, [pc, #392]	@ (8003858 <HAL_TIM_ConfigClockSource+0x1e4>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	f200 80ae 	bhi.w	8003830 <HAL_TIM_ConfigClockSource+0x1bc>
 80036d4:	4a61      	ldr	r2, [pc, #388]	@ (800385c <HAL_TIM_ConfigClockSource+0x1e8>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	f000 80a1 	beq.w	800381e <HAL_TIM_ConfigClockSource+0x1aa>
 80036dc:	4a5f      	ldr	r2, [pc, #380]	@ (800385c <HAL_TIM_ConfigClockSource+0x1e8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	f200 80a6 	bhi.w	8003830 <HAL_TIM_ConfigClockSource+0x1bc>
 80036e4:	4a5e      	ldr	r2, [pc, #376]	@ (8003860 <HAL_TIM_ConfigClockSource+0x1ec>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	f000 8099 	beq.w	800381e <HAL_TIM_ConfigClockSource+0x1aa>
 80036ec:	4a5c      	ldr	r2, [pc, #368]	@ (8003860 <HAL_TIM_ConfigClockSource+0x1ec>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	f200 809e 	bhi.w	8003830 <HAL_TIM_ConfigClockSource+0x1bc>
 80036f4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80036f8:	f000 8091 	beq.w	800381e <HAL_TIM_ConfigClockSource+0x1aa>
 80036fc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003700:	f200 8096 	bhi.w	8003830 <HAL_TIM_ConfigClockSource+0x1bc>
 8003704:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003708:	f000 8089 	beq.w	800381e <HAL_TIM_ConfigClockSource+0x1aa>
 800370c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003710:	f200 808e 	bhi.w	8003830 <HAL_TIM_ConfigClockSource+0x1bc>
 8003714:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003718:	d03e      	beq.n	8003798 <HAL_TIM_ConfigClockSource+0x124>
 800371a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800371e:	f200 8087 	bhi.w	8003830 <HAL_TIM_ConfigClockSource+0x1bc>
 8003722:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003726:	f000 8086 	beq.w	8003836 <HAL_TIM_ConfigClockSource+0x1c2>
 800372a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800372e:	d87f      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x1bc>
 8003730:	2b70      	cmp	r3, #112	@ 0x70
 8003732:	d01a      	beq.n	800376a <HAL_TIM_ConfigClockSource+0xf6>
 8003734:	2b70      	cmp	r3, #112	@ 0x70
 8003736:	d87b      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x1bc>
 8003738:	2b60      	cmp	r3, #96	@ 0x60
 800373a:	d050      	beq.n	80037de <HAL_TIM_ConfigClockSource+0x16a>
 800373c:	2b60      	cmp	r3, #96	@ 0x60
 800373e:	d877      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x1bc>
 8003740:	2b50      	cmp	r3, #80	@ 0x50
 8003742:	d03c      	beq.n	80037be <HAL_TIM_ConfigClockSource+0x14a>
 8003744:	2b50      	cmp	r3, #80	@ 0x50
 8003746:	d873      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x1bc>
 8003748:	2b40      	cmp	r3, #64	@ 0x40
 800374a:	d058      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x18a>
 800374c:	2b40      	cmp	r3, #64	@ 0x40
 800374e:	d86f      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x1bc>
 8003750:	2b30      	cmp	r3, #48	@ 0x30
 8003752:	d064      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x1aa>
 8003754:	2b30      	cmp	r3, #48	@ 0x30
 8003756:	d86b      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x1bc>
 8003758:	2b20      	cmp	r3, #32
 800375a:	d060      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x1aa>
 800375c:	2b20      	cmp	r3, #32
 800375e:	d867      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x1bc>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d05c      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x1aa>
 8003764:	2b10      	cmp	r3, #16
 8003766:	d05a      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x1aa>
 8003768:	e062      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800377a:	f000 fd93 	bl	80042a4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800378c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	609a      	str	r2, [r3, #8]
      break;
 8003796:	e04f      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80037a8:	f000 fd7c 	bl	80042a4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80037ba:	609a      	str	r2, [r3, #8]
      break;
 80037bc:	e03c      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037ca:	461a      	mov	r2, r3
 80037cc:	f000 fcec 	bl	80041a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2150      	movs	r1, #80	@ 0x50
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 fd46 	bl	8004268 <TIM_ITRx_SetConfig>
      break;
 80037dc:	e02c      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037ea:	461a      	mov	r2, r3
 80037ec:	f000 fd0b 	bl	8004206 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2160      	movs	r1, #96	@ 0x60
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fd36 	bl	8004268 <TIM_ITRx_SetConfig>
      break;
 80037fc:	e01c      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800380a:	461a      	mov	r2, r3
 800380c:	f000 fccc 	bl	80041a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2140      	movs	r1, #64	@ 0x40
 8003816:	4618      	mov	r0, r3
 8003818:	f000 fd26 	bl	8004268 <TIM_ITRx_SetConfig>
      break;
 800381c:	e00c      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4619      	mov	r1, r3
 8003828:	4610      	mov	r0, r2
 800382a:	f000 fd1d 	bl	8004268 <TIM_ITRx_SetConfig>
      break;
 800382e:	e003      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	73fb      	strb	r3, [r7, #15]
      break;
 8003834:	e000      	b.n	8003838 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8003836:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2201      	movs	r2, #1
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2200      	movs	r2, #0
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003848:	7bfb      	ldrb	r3, [r7, #15]
}
 800384a:	4618      	mov	r0, r3
 800384c:	3710      	adds	r7, #16
 800384e:	46bd      	mov	sp, r7
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	ffceff88 	.word	0xffceff88
 8003858:	00100040 	.word	0x00100040
 800385c:	00100030 	.word	0x00100030
 8003860:	00100020 	.word	0x00100020

08003864 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b082      	sub	sp, #8
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_TIM_SlaveConfigSynchro+0x18>
 8003878:	2302      	movs	r3, #2
 800387a:	e031      	b.n	80038e0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	2201      	movs	r2, #1
 8003880:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800388c:	6839      	ldr	r1, [r7, #0]
 800388e:	6878      	ldr	r0, [r7, #4]
 8003890:	f000 fba0 	bl	8003fd4 <TIM_SlaveTimer_SetConfig>
 8003894:	4603      	mov	r3, r0
 8003896:	2b00      	cmp	r3, #0
 8003898:	d009      	beq.n	80038ae <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2201      	movs	r2, #1
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e018      	b.n	80038e0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	68da      	ldr	r2, [r3, #12]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038bc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	68da      	ldr	r2, [r3, #12]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80038cc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3708      	adds	r7, #8
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bd80      	pop	{r7, pc}

080038e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b085      	sub	sp, #20
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	4a43      	ldr	r2, [pc, #268]	@ (8003a08 <TIM_Base_SetConfig+0x120>)
 80038fc:	4293      	cmp	r3, r2
 80038fe:	d013      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003906:	d00f      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a40      	ldr	r2, [pc, #256]	@ (8003a0c <TIM_Base_SetConfig+0x124>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d00b      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a3f      	ldr	r2, [pc, #252]	@ (8003a10 <TIM_Base_SetConfig+0x128>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d007      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	4a3e      	ldr	r2, [pc, #248]	@ (8003a14 <TIM_Base_SetConfig+0x12c>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d003      	beq.n	8003928 <TIM_Base_SetConfig+0x40>
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	4a3d      	ldr	r2, [pc, #244]	@ (8003a18 <TIM_Base_SetConfig+0x130>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d108      	bne.n	800393a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800392e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a32      	ldr	r2, [pc, #200]	@ (8003a08 <TIM_Base_SetConfig+0x120>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d01f      	beq.n	8003982 <TIM_Base_SetConfig+0x9a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003948:	d01b      	beq.n	8003982 <TIM_Base_SetConfig+0x9a>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a2f      	ldr	r2, [pc, #188]	@ (8003a0c <TIM_Base_SetConfig+0x124>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d017      	beq.n	8003982 <TIM_Base_SetConfig+0x9a>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a2e      	ldr	r2, [pc, #184]	@ (8003a10 <TIM_Base_SetConfig+0x128>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d013      	beq.n	8003982 <TIM_Base_SetConfig+0x9a>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a2d      	ldr	r2, [pc, #180]	@ (8003a14 <TIM_Base_SetConfig+0x12c>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d00f      	beq.n	8003982 <TIM_Base_SetConfig+0x9a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a2c      	ldr	r2, [pc, #176]	@ (8003a18 <TIM_Base_SetConfig+0x130>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d00b      	beq.n	8003982 <TIM_Base_SetConfig+0x9a>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a2b      	ldr	r2, [pc, #172]	@ (8003a1c <TIM_Base_SetConfig+0x134>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d007      	beq.n	8003982 <TIM_Base_SetConfig+0x9a>
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	4a2a      	ldr	r2, [pc, #168]	@ (8003a20 <TIM_Base_SetConfig+0x138>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d003      	beq.n	8003982 <TIM_Base_SetConfig+0x9a>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	4a29      	ldr	r2, [pc, #164]	@ (8003a24 <TIM_Base_SetConfig+0x13c>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d108      	bne.n	8003994 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003988:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	4313      	orrs	r3, r2
 8003992:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	4313      	orrs	r3, r2
 80039a0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	689a      	ldr	r2, [r3, #8]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a14      	ldr	r2, [pc, #80]	@ (8003a08 <TIM_Base_SetConfig+0x120>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d00f      	beq.n	80039da <TIM_Base_SetConfig+0xf2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a16      	ldr	r2, [pc, #88]	@ (8003a18 <TIM_Base_SetConfig+0x130>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00b      	beq.n	80039da <TIM_Base_SetConfig+0xf2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a15      	ldr	r2, [pc, #84]	@ (8003a1c <TIM_Base_SetConfig+0x134>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d007      	beq.n	80039da <TIM_Base_SetConfig+0xf2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a14      	ldr	r2, [pc, #80]	@ (8003a20 <TIM_Base_SetConfig+0x138>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d003      	beq.n	80039da <TIM_Base_SetConfig+0xf2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a13      	ldr	r2, [pc, #76]	@ (8003a24 <TIM_Base_SetConfig+0x13c>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d103      	bne.n	80039e2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f043 0204 	orr.w	r2, r3, #4
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	601a      	str	r2, [r3, #0]
}
 80039fa:	bf00      	nop
 80039fc:	3714      	adds	r7, #20
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr
 8003a06:	bf00      	nop
 8003a08:	40010000 	.word	0x40010000
 8003a0c:	40000400 	.word	0x40000400
 8003a10:	40000800 	.word	0x40000800
 8003a14:	40000c00 	.word	0x40000c00
 8003a18:	40010400 	.word	0x40010400
 8003a1c:	40014000 	.word	0x40014000
 8003a20:	40014400 	.word	0x40014400
 8003a24:	40014800 	.word	0x40014800

08003a28 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b087      	sub	sp, #28
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
 8003a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a1b      	ldr	r3, [r3, #32]
 8003a36:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a1b      	ldr	r3, [r3, #32]
 8003a3c:	f023 0201 	bic.w	r2, r3, #1
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	699b      	ldr	r3, [r3, #24]
 8003a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	4b37      	ldr	r3, [pc, #220]	@ (8003b30 <TIM_OC1_SetConfig+0x108>)
 8003a54:	4013      	ands	r3, r2
 8003a56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f023 0303 	bic.w	r3, r3, #3
 8003a5e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	68fa      	ldr	r2, [r7, #12]
 8003a66:	4313      	orrs	r3, r2
 8003a68:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	f023 0302 	bic.w	r3, r3, #2
 8003a70:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	697a      	ldr	r2, [r7, #20]
 8003a78:	4313      	orrs	r3, r2
 8003a7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	4a2d      	ldr	r2, [pc, #180]	@ (8003b34 <TIM_OC1_SetConfig+0x10c>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00f      	beq.n	8003aa4 <TIM_OC1_SetConfig+0x7c>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	4a2c      	ldr	r2, [pc, #176]	@ (8003b38 <TIM_OC1_SetConfig+0x110>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d00b      	beq.n	8003aa4 <TIM_OC1_SetConfig+0x7c>
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	4a2b      	ldr	r2, [pc, #172]	@ (8003b3c <TIM_OC1_SetConfig+0x114>)
 8003a90:	4293      	cmp	r3, r2
 8003a92:	d007      	beq.n	8003aa4 <TIM_OC1_SetConfig+0x7c>
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	4a2a      	ldr	r2, [pc, #168]	@ (8003b40 <TIM_OC1_SetConfig+0x118>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d003      	beq.n	8003aa4 <TIM_OC1_SetConfig+0x7c>
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	4a29      	ldr	r2, [pc, #164]	@ (8003b44 <TIM_OC1_SetConfig+0x11c>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d10c      	bne.n	8003abe <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	f023 0308 	bic.w	r3, r3, #8
 8003aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ab6:	697b      	ldr	r3, [r7, #20]
 8003ab8:	f023 0304 	bic.w	r3, r3, #4
 8003abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a1c      	ldr	r2, [pc, #112]	@ (8003b34 <TIM_OC1_SetConfig+0x10c>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00f      	beq.n	8003ae6 <TIM_OC1_SetConfig+0xbe>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8003b38 <TIM_OC1_SetConfig+0x110>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d00b      	beq.n	8003ae6 <TIM_OC1_SetConfig+0xbe>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a1a      	ldr	r2, [pc, #104]	@ (8003b3c <TIM_OC1_SetConfig+0x114>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d007      	beq.n	8003ae6 <TIM_OC1_SetConfig+0xbe>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a19      	ldr	r2, [pc, #100]	@ (8003b40 <TIM_OC1_SetConfig+0x118>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d003      	beq.n	8003ae6 <TIM_OC1_SetConfig+0xbe>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a18      	ldr	r2, [pc, #96]	@ (8003b44 <TIM_OC1_SetConfig+0x11c>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d111      	bne.n	8003b0a <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	699b      	ldr	r3, [r3, #24]
 8003b04:	693a      	ldr	r2, [r7, #16]
 8003b06:	4313      	orrs	r3, r2
 8003b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	685a      	ldr	r2, [r3, #4]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	697a      	ldr	r2, [r7, #20]
 8003b22:	621a      	str	r2, [r3, #32]
}
 8003b24:	bf00      	nop
 8003b26:	371c      	adds	r7, #28
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr
 8003b30:	fffeff8f 	.word	0xfffeff8f
 8003b34:	40010000 	.word	0x40010000
 8003b38:	40010400 	.word	0x40010400
 8003b3c:	40014000 	.word	0x40014000
 8003b40:	40014400 	.word	0x40014400
 8003b44:	40014800 	.word	0x40014800

08003b48 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b087      	sub	sp, #28
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6a1b      	ldr	r3, [r3, #32]
 8003b56:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a1b      	ldr	r3, [r3, #32]
 8003b5c:	f023 0210 	bic.w	r2, r3, #16
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	699b      	ldr	r3, [r3, #24]
 8003b6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4b34      	ldr	r3, [pc, #208]	@ (8003c44 <TIM_OC2_SetConfig+0xfc>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b80:	683b      	ldr	r3, [r7, #0]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	021b      	lsls	r3, r3, #8
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f023 0320 	bic.w	r3, r3, #32
 8003b92:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	689b      	ldr	r3, [r3, #8]
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	4a29      	ldr	r2, [pc, #164]	@ (8003c48 <TIM_OC2_SetConfig+0x100>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d003      	beq.n	8003bb0 <TIM_OC2_SetConfig+0x68>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	4a28      	ldr	r2, [pc, #160]	@ (8003c4c <TIM_OC2_SetConfig+0x104>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d10d      	bne.n	8003bcc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003bb6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	011b      	lsls	r3, r3, #4
 8003bbe:	697a      	ldr	r2, [r7, #20]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bca:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	4a1e      	ldr	r2, [pc, #120]	@ (8003c48 <TIM_OC2_SetConfig+0x100>)
 8003bd0:	4293      	cmp	r3, r2
 8003bd2:	d00f      	beq.n	8003bf4 <TIM_OC2_SetConfig+0xac>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	4a1d      	ldr	r2, [pc, #116]	@ (8003c4c <TIM_OC2_SetConfig+0x104>)
 8003bd8:	4293      	cmp	r3, r2
 8003bda:	d00b      	beq.n	8003bf4 <TIM_OC2_SetConfig+0xac>
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	4a1c      	ldr	r2, [pc, #112]	@ (8003c50 <TIM_OC2_SetConfig+0x108>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d007      	beq.n	8003bf4 <TIM_OC2_SetConfig+0xac>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a1b      	ldr	r2, [pc, #108]	@ (8003c54 <TIM_OC2_SetConfig+0x10c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_OC2_SetConfig+0xac>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a1a      	ldr	r2, [pc, #104]	@ (8003c58 <TIM_OC2_SetConfig+0x110>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d113      	bne.n	8003c1c <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bfa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bfc:	693b      	ldr	r3, [r7, #16]
 8003bfe:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	4313      	orrs	r3, r2
 8003c0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	699b      	ldr	r3, [r3, #24]
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	693a      	ldr	r2, [r7, #16]
 8003c18:	4313      	orrs	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	693a      	ldr	r2, [r7, #16]
 8003c20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	685a      	ldr	r2, [r3, #4]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	621a      	str	r2, [r3, #32]
}
 8003c36:	bf00      	nop
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr
 8003c42:	bf00      	nop
 8003c44:	feff8fff 	.word	0xfeff8fff
 8003c48:	40010000 	.word	0x40010000
 8003c4c:	40010400 	.word	0x40010400
 8003c50:	40014000 	.word	0x40014000
 8003c54:	40014400 	.word	0x40014400
 8003c58:	40014800 	.word	0x40014800

08003c5c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	4b33      	ldr	r3, [pc, #204]	@ (8003d54 <TIM_OC3_SetConfig+0xf8>)
 8003c88:	4013      	ands	r3, r2
 8003c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f023 0303 	bic.w	r3, r3, #3
 8003c92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003ca4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	021b      	lsls	r3, r3, #8
 8003cac:	697a      	ldr	r2, [r7, #20]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	4a28      	ldr	r2, [pc, #160]	@ (8003d58 <TIM_OC3_SetConfig+0xfc>)
 8003cb6:	4293      	cmp	r3, r2
 8003cb8:	d003      	beq.n	8003cc2 <TIM_OC3_SetConfig+0x66>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a27      	ldr	r2, [pc, #156]	@ (8003d5c <TIM_OC3_SetConfig+0x100>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d10d      	bne.n	8003cde <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003cc8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	68db      	ldr	r3, [r3, #12]
 8003cce:	021b      	lsls	r3, r3, #8
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	4313      	orrs	r3, r2
 8003cd4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003cdc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8003d58 <TIM_OC3_SetConfig+0xfc>)
 8003ce2:	4293      	cmp	r3, r2
 8003ce4:	d00f      	beq.n	8003d06 <TIM_OC3_SetConfig+0xaa>
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a1c      	ldr	r2, [pc, #112]	@ (8003d5c <TIM_OC3_SetConfig+0x100>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d00b      	beq.n	8003d06 <TIM_OC3_SetConfig+0xaa>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a1b      	ldr	r2, [pc, #108]	@ (8003d60 <TIM_OC3_SetConfig+0x104>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d007      	beq.n	8003d06 <TIM_OC3_SetConfig+0xaa>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a1a      	ldr	r2, [pc, #104]	@ (8003d64 <TIM_OC3_SetConfig+0x108>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d003      	beq.n	8003d06 <TIM_OC3_SetConfig+0xaa>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4a19      	ldr	r2, [pc, #100]	@ (8003d68 <TIM_OC3_SetConfig+0x10c>)
 8003d02:	4293      	cmp	r3, r2
 8003d04:	d113      	bne.n	8003d2e <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003d0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	695b      	ldr	r3, [r3, #20]
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	693a      	ldr	r2, [r7, #16]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	693a      	ldr	r2, [r7, #16]
 8003d32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68fa      	ldr	r2, [r7, #12]
 8003d38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	685a      	ldr	r2, [r3, #4]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	621a      	str	r2, [r3, #32]
}
 8003d48:	bf00      	nop
 8003d4a:	371c      	adds	r7, #28
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	fffeff8f 	.word	0xfffeff8f
 8003d58:	40010000 	.word	0x40010000
 8003d5c:	40010400 	.word	0x40010400
 8003d60:	40014000 	.word	0x40014000
 8003d64:	40014400 	.word	0x40014400
 8003d68:	40014800 	.word	0x40014800

08003d6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b087      	sub	sp, #28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a1b      	ldr	r3, [r3, #32]
 8003d7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a1b      	ldr	r3, [r3, #32]
 8003d80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	69db      	ldr	r3, [r3, #28]
 8003d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d94:	68fa      	ldr	r2, [r7, #12]
 8003d96:	4b24      	ldr	r3, [pc, #144]	@ (8003e28 <TIM_OC4_SetConfig+0xbc>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	021b      	lsls	r3, r3, #8
 8003daa:	68fa      	ldr	r2, [r7, #12]
 8003dac:	4313      	orrs	r3, r2
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003db6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	031b      	lsls	r3, r3, #12
 8003dbe:	693a      	ldr	r2, [r7, #16]
 8003dc0:	4313      	orrs	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	4a19      	ldr	r2, [pc, #100]	@ (8003e2c <TIM_OC4_SetConfig+0xc0>)
 8003dc8:	4293      	cmp	r3, r2
 8003dca:	d00f      	beq.n	8003dec <TIM_OC4_SetConfig+0x80>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	4a18      	ldr	r2, [pc, #96]	@ (8003e30 <TIM_OC4_SetConfig+0xc4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d00b      	beq.n	8003dec <TIM_OC4_SetConfig+0x80>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	4a17      	ldr	r2, [pc, #92]	@ (8003e34 <TIM_OC4_SetConfig+0xc8>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d007      	beq.n	8003dec <TIM_OC4_SetConfig+0x80>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	4a16      	ldr	r2, [pc, #88]	@ (8003e38 <TIM_OC4_SetConfig+0xcc>)
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d003      	beq.n	8003dec <TIM_OC4_SetConfig+0x80>
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a15      	ldr	r2, [pc, #84]	@ (8003e3c <TIM_OC4_SetConfig+0xd0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d109      	bne.n	8003e00 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003df2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	019b      	lsls	r3, r3, #6
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	693a      	ldr	r2, [r7, #16]
 8003e18:	621a      	str	r2, [r3, #32]
}
 8003e1a:	bf00      	nop
 8003e1c:	371c      	adds	r7, #28
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	feff8fff 	.word	0xfeff8fff
 8003e2c:	40010000 	.word	0x40010000
 8003e30:	40010400 	.word	0x40010400
 8003e34:	40014000 	.word	0x40014000
 8003e38:	40014400 	.word	0x40014400
 8003e3c:	40014800 	.word	0x40014800

08003e40 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b087      	sub	sp, #28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
 8003e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a1b      	ldr	r3, [r3, #32]
 8003e54:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e68:	68fa      	ldr	r2, [r7, #12]
 8003e6a:	4b21      	ldr	r3, [pc, #132]	@ (8003ef0 <TIM_OC5_SetConfig+0xb0>)
 8003e6c:	4013      	ands	r3, r2
 8003e6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68fa      	ldr	r2, [r7, #12]
 8003e76:	4313      	orrs	r3, r2
 8003e78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003e80:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	041b      	lsls	r3, r3, #16
 8003e88:	693a      	ldr	r2, [r7, #16]
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	4a18      	ldr	r2, [pc, #96]	@ (8003ef4 <TIM_OC5_SetConfig+0xb4>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d00f      	beq.n	8003eb6 <TIM_OC5_SetConfig+0x76>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	4a17      	ldr	r2, [pc, #92]	@ (8003ef8 <TIM_OC5_SetConfig+0xb8>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d00b      	beq.n	8003eb6 <TIM_OC5_SetConfig+0x76>
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	4a16      	ldr	r2, [pc, #88]	@ (8003efc <TIM_OC5_SetConfig+0xbc>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d007      	beq.n	8003eb6 <TIM_OC5_SetConfig+0x76>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a15      	ldr	r2, [pc, #84]	@ (8003f00 <TIM_OC5_SetConfig+0xc0>)
 8003eaa:	4293      	cmp	r3, r2
 8003eac:	d003      	beq.n	8003eb6 <TIM_OC5_SetConfig+0x76>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	4a14      	ldr	r2, [pc, #80]	@ (8003f04 <TIM_OC5_SetConfig+0xc4>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d109      	bne.n	8003eca <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ebc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	4313      	orrs	r3, r2
 8003ec8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	697a      	ldr	r2, [r7, #20]
 8003ece:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68fa      	ldr	r2, [r7, #12]
 8003ed4:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	685a      	ldr	r2, [r3, #4]
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	693a      	ldr	r2, [r7, #16]
 8003ee2:	621a      	str	r2, [r3, #32]
}
 8003ee4:	bf00      	nop
 8003ee6:	371c      	adds	r7, #28
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eee:	4770      	bx	lr
 8003ef0:	fffeff8f 	.word	0xfffeff8f
 8003ef4:	40010000 	.word	0x40010000
 8003ef8:	40010400 	.word	0x40010400
 8003efc:	40014000 	.word	0x40014000
 8003f00:	40014400 	.word	0x40014400
 8003f04:	40014800 	.word	0x40014800

08003f08 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	b087      	sub	sp, #28
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
 8003f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a1b      	ldr	r3, [r3, #32]
 8003f16:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a1b      	ldr	r3, [r3, #32]
 8003f1c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003f30:	68fa      	ldr	r2, [r7, #12]
 8003f32:	4b22      	ldr	r3, [pc, #136]	@ (8003fbc <TIM_OC6_SetConfig+0xb4>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	021b      	lsls	r3, r3, #8
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003f4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689b      	ldr	r3, [r3, #8]
 8003f50:	051b      	lsls	r3, r3, #20
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	4313      	orrs	r3, r2
 8003f56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	4a19      	ldr	r2, [pc, #100]	@ (8003fc0 <TIM_OC6_SetConfig+0xb8>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d00f      	beq.n	8003f80 <TIM_OC6_SetConfig+0x78>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	4a18      	ldr	r2, [pc, #96]	@ (8003fc4 <TIM_OC6_SetConfig+0xbc>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d00b      	beq.n	8003f80 <TIM_OC6_SetConfig+0x78>
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	4a17      	ldr	r2, [pc, #92]	@ (8003fc8 <TIM_OC6_SetConfig+0xc0>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d007      	beq.n	8003f80 <TIM_OC6_SetConfig+0x78>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a16      	ldr	r2, [pc, #88]	@ (8003fcc <TIM_OC6_SetConfig+0xc4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d003      	beq.n	8003f80 <TIM_OC6_SetConfig+0x78>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a15      	ldr	r2, [pc, #84]	@ (8003fd0 <TIM_OC6_SetConfig+0xc8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d109      	bne.n	8003f94 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f80:	697b      	ldr	r3, [r7, #20]
 8003f82:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	029b      	lsls	r3, r3, #10
 8003f8e:	697a      	ldr	r2, [r7, #20]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	697a      	ldr	r2, [r7, #20]
 8003f98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	68fa      	ldr	r2, [r7, #12]
 8003f9e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	685a      	ldr	r2, [r3, #4]
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	621a      	str	r2, [r3, #32]
}
 8003fae:	bf00      	nop
 8003fb0:	371c      	adds	r7, #28
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb8:	4770      	bx	lr
 8003fba:	bf00      	nop
 8003fbc:	feff8fff 	.word	0xfeff8fff
 8003fc0:	40010000 	.word	0x40010000
 8003fc4:	40010400 	.word	0x40010400
 8003fc8:	40014000 	.word	0x40014000
 8003fcc:	40014400 	.word	0x40014400
 8003fd0:	40014800 	.word	0x40014800

08003fd4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b086      	sub	sp, #24
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
 8003fdc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	4b65      	ldr	r3, [pc, #404]	@ (8004184 <TIM_SlaveTimer_SetConfig+0x1b0>)
 8003fee:	4013      	ands	r3, r2
 8003ff0:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	693a      	ldr	r2, [r7, #16]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003ffc:	693a      	ldr	r2, [r7, #16]
 8003ffe:	4b62      	ldr	r3, [pc, #392]	@ (8004188 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8004000:	4013      	ands	r3, r2
 8004002:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	4313      	orrs	r3, r2
 800400c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	693a      	ldr	r2, [r7, #16]
 8004014:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	685b      	ldr	r3, [r3, #4]
 800401a:	4a5c      	ldr	r2, [pc, #368]	@ (800418c <TIM_SlaveTimer_SetConfig+0x1b8>)
 800401c:	4293      	cmp	r3, r2
 800401e:	f000 80ab 	beq.w	8004178 <TIM_SlaveTimer_SetConfig+0x1a4>
 8004022:	4a5a      	ldr	r2, [pc, #360]	@ (800418c <TIM_SlaveTimer_SetConfig+0x1b8>)
 8004024:	4293      	cmp	r3, r2
 8004026:	f200 80a4 	bhi.w	8004172 <TIM_SlaveTimer_SetConfig+0x19e>
 800402a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800402e:	f000 80a3 	beq.w	8004178 <TIM_SlaveTimer_SetConfig+0x1a4>
 8004032:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004036:	f200 809c 	bhi.w	8004172 <TIM_SlaveTimer_SetConfig+0x19e>
 800403a:	4a55      	ldr	r2, [pc, #340]	@ (8004190 <TIM_SlaveTimer_SetConfig+0x1bc>)
 800403c:	4293      	cmp	r3, r2
 800403e:	f000 809b 	beq.w	8004178 <TIM_SlaveTimer_SetConfig+0x1a4>
 8004042:	4a53      	ldr	r2, [pc, #332]	@ (8004190 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8004044:	4293      	cmp	r3, r2
 8004046:	f200 8094 	bhi.w	8004172 <TIM_SlaveTimer_SetConfig+0x19e>
 800404a:	4a52      	ldr	r2, [pc, #328]	@ (8004194 <TIM_SlaveTimer_SetConfig+0x1c0>)
 800404c:	4293      	cmp	r3, r2
 800404e:	f000 8093 	beq.w	8004178 <TIM_SlaveTimer_SetConfig+0x1a4>
 8004052:	4a50      	ldr	r2, [pc, #320]	@ (8004194 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8004054:	4293      	cmp	r3, r2
 8004056:	f200 808c 	bhi.w	8004172 <TIM_SlaveTimer_SetConfig+0x19e>
 800405a:	4a4f      	ldr	r2, [pc, #316]	@ (8004198 <TIM_SlaveTimer_SetConfig+0x1c4>)
 800405c:	4293      	cmp	r3, r2
 800405e:	f000 808b 	beq.w	8004178 <TIM_SlaveTimer_SetConfig+0x1a4>
 8004062:	4a4d      	ldr	r2, [pc, #308]	@ (8004198 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8004064:	4293      	cmp	r3, r2
 8004066:	f200 8084 	bhi.w	8004172 <TIM_SlaveTimer_SetConfig+0x19e>
 800406a:	4a4c      	ldr	r2, [pc, #304]	@ (800419c <TIM_SlaveTimer_SetConfig+0x1c8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	f000 8083 	beq.w	8004178 <TIM_SlaveTimer_SetConfig+0x1a4>
 8004072:	4a4a      	ldr	r2, [pc, #296]	@ (800419c <TIM_SlaveTimer_SetConfig+0x1c8>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d87c      	bhi.n	8004172 <TIM_SlaveTimer_SetConfig+0x19e>
 8004078:	4a49      	ldr	r2, [pc, #292]	@ (80041a0 <TIM_SlaveTimer_SetConfig+0x1cc>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d07c      	beq.n	8004178 <TIM_SlaveTimer_SetConfig+0x1a4>
 800407e:	4a48      	ldr	r2, [pc, #288]	@ (80041a0 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d876      	bhi.n	8004172 <TIM_SlaveTimer_SetConfig+0x19e>
 8004084:	4a47      	ldr	r2, [pc, #284]	@ (80041a4 <TIM_SlaveTimer_SetConfig+0x1d0>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d076      	beq.n	8004178 <TIM_SlaveTimer_SetConfig+0x1a4>
 800408a:	4a46      	ldr	r2, [pc, #280]	@ (80041a4 <TIM_SlaveTimer_SetConfig+0x1d0>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d870      	bhi.n	8004172 <TIM_SlaveTimer_SetConfig+0x19e>
 8004090:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004094:	d070      	beq.n	8004178 <TIM_SlaveTimer_SetConfig+0x1a4>
 8004096:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800409a:	d86a      	bhi.n	8004172 <TIM_SlaveTimer_SetConfig+0x19e>
 800409c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040a0:	d06a      	beq.n	8004178 <TIM_SlaveTimer_SetConfig+0x1a4>
 80040a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80040a6:	d864      	bhi.n	8004172 <TIM_SlaveTimer_SetConfig+0x19e>
 80040a8:	2b70      	cmp	r3, #112	@ 0x70
 80040aa:	d01a      	beq.n	80040e2 <TIM_SlaveTimer_SetConfig+0x10e>
 80040ac:	2b70      	cmp	r3, #112	@ 0x70
 80040ae:	d860      	bhi.n	8004172 <TIM_SlaveTimer_SetConfig+0x19e>
 80040b0:	2b60      	cmp	r3, #96	@ 0x60
 80040b2:	d054      	beq.n	800415e <TIM_SlaveTimer_SetConfig+0x18a>
 80040b4:	2b60      	cmp	r3, #96	@ 0x60
 80040b6:	d85c      	bhi.n	8004172 <TIM_SlaveTimer_SetConfig+0x19e>
 80040b8:	2b50      	cmp	r3, #80	@ 0x50
 80040ba:	d046      	beq.n	800414a <TIM_SlaveTimer_SetConfig+0x176>
 80040bc:	2b50      	cmp	r3, #80	@ 0x50
 80040be:	d858      	bhi.n	8004172 <TIM_SlaveTimer_SetConfig+0x19e>
 80040c0:	2b40      	cmp	r3, #64	@ 0x40
 80040c2:	d019      	beq.n	80040f8 <TIM_SlaveTimer_SetConfig+0x124>
 80040c4:	2b40      	cmp	r3, #64	@ 0x40
 80040c6:	d854      	bhi.n	8004172 <TIM_SlaveTimer_SetConfig+0x19e>
 80040c8:	2b30      	cmp	r3, #48	@ 0x30
 80040ca:	d055      	beq.n	8004178 <TIM_SlaveTimer_SetConfig+0x1a4>
 80040cc:	2b30      	cmp	r3, #48	@ 0x30
 80040ce:	d850      	bhi.n	8004172 <TIM_SlaveTimer_SetConfig+0x19e>
 80040d0:	2b20      	cmp	r3, #32
 80040d2:	d051      	beq.n	8004178 <TIM_SlaveTimer_SetConfig+0x1a4>
 80040d4:	2b20      	cmp	r3, #32
 80040d6:	d84c      	bhi.n	8004172 <TIM_SlaveTimer_SetConfig+0x19e>
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d04d      	beq.n	8004178 <TIM_SlaveTimer_SetConfig+0x1a4>
 80040dc:	2b10      	cmp	r3, #16
 80040de:	d04b      	beq.n	8004178 <TIM_SlaveTimer_SetConfig+0x1a4>
 80040e0:	e047      	b.n	8004172 <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 80040f2:	f000 f8d7 	bl	80042a4 <TIM_ETR_SetConfig>
      break;
 80040f6:	e040      	b.n	800417a <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2b05      	cmp	r3, #5
 80040fe:	d101      	bne.n	8004104 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8004100:	2301      	movs	r3, #1
 8004102:	e03b      	b.n	800417c <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	6a1b      	ldr	r3, [r3, #32]
 800410a:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	6a1a      	ldr	r2, [r3, #32]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f022 0201 	bic.w	r2, r2, #1
 800411a:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	699b      	ldr	r3, [r3, #24]
 8004122:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800412a:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	691b      	ldr	r3, [r3, #16]
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	68ba      	ldr	r2, [r7, #8]
 8004134:	4313      	orrs	r3, r2
 8004136:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	68ba      	ldr	r2, [r7, #8]
 800413e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	68fa      	ldr	r2, [r7, #12]
 8004146:	621a      	str	r2, [r3, #32]
      break;
 8004148:	e017      	b.n	800417a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004156:	461a      	mov	r2, r3
 8004158:	f000 f826 	bl	80041a8 <TIM_TI1_ConfigInputStage>
      break;
 800415c:	e00d      	b.n	800417a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800416a:	461a      	mov	r2, r3
 800416c:	f000 f84b 	bl	8004206 <TIM_TI2_ConfigInputStage>
      break;
 8004170:	e003      	b.n	800417a <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	75fb      	strb	r3, [r7, #23]
      break;
 8004176:	e000      	b.n	800417a <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8004178:	bf00      	nop
  }

  return status;
 800417a:	7dfb      	ldrb	r3, [r7, #23]
}
 800417c:	4618      	mov	r0, r3
 800417e:	3718      	adds	r7, #24
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	ffcfff8f 	.word	0xffcfff8f
 8004188:	fffefff8 	.word	0xfffefff8
 800418c:	00200010 	.word	0x00200010
 8004190:	00100070 	.word	0x00100070
 8004194:	00100060 	.word	0x00100060
 8004198:	00100050 	.word	0x00100050
 800419c:	00100040 	.word	0x00100040
 80041a0:	00100030 	.word	0x00100030
 80041a4:	00100020 	.word	0x00100020

080041a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041a8:	b480      	push	{r7}
 80041aa:	b087      	sub	sp, #28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	f023 0201 	bic.w	r2, r3, #1
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041cc:	693b      	ldr	r3, [r7, #16]
 80041ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80041d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041de:	697b      	ldr	r3, [r7, #20]
 80041e0:	f023 030a 	bic.w	r3, r3, #10
 80041e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80041e6:	697a      	ldr	r2, [r7, #20]
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	697a      	ldr	r2, [r7, #20]
 80041f8:	621a      	str	r2, [r3, #32]
}
 80041fa:	bf00      	nop
 80041fc:	371c      	adds	r7, #28
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr

08004206 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004206:	b480      	push	{r7}
 8004208:	b087      	sub	sp, #28
 800420a:	af00      	add	r7, sp, #0
 800420c:	60f8      	str	r0, [r7, #12]
 800420e:	60b9      	str	r1, [r7, #8]
 8004210:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	f023 0210 	bic.w	r2, r3, #16
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004230:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	031b      	lsls	r3, r3, #12
 8004236:	693a      	ldr	r2, [r7, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004242:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	011b      	lsls	r3, r3, #4
 8004248:	697a      	ldr	r2, [r7, #20]
 800424a:	4313      	orrs	r3, r2
 800424c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	621a      	str	r2, [r3, #32]
}
 800425a:	bf00      	nop
 800425c:	371c      	adds	r7, #28
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
	...

08004268 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4b09      	ldr	r3, [pc, #36]	@ (80042a0 <TIM_ITRx_SetConfig+0x38>)
 800427c:	4013      	ands	r3, r2
 800427e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004280:	683a      	ldr	r2, [r7, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4313      	orrs	r3, r2
 8004286:	f043 0307 	orr.w	r3, r3, #7
 800428a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	68fa      	ldr	r2, [r7, #12]
 8004290:	609a      	str	r2, [r3, #8]
}
 8004292:	bf00      	nop
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr
 800429e:	bf00      	nop
 80042a0:	ffcfff8f 	.word	0xffcfff8f

080042a4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b087      	sub	sp, #28
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042be:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	021a      	lsls	r2, r3, #8
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	431a      	orrs	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	697a      	ldr	r2, [r7, #20]
 80042ce:	4313      	orrs	r3, r2
 80042d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	609a      	str	r2, [r3, #8]
}
 80042d8:	bf00      	nop
 80042da:	371c      	adds	r7, #28
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	f003 031f 	and.w	r3, r3, #31
 80042f6:	2201      	movs	r2, #1
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	6a1a      	ldr	r2, [r3, #32]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	43db      	mvns	r3, r3
 8004306:	401a      	ands	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	6a1a      	ldr	r2, [r3, #32]
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	f003 031f 	and.w	r3, r3, #31
 8004316:	6879      	ldr	r1, [r7, #4]
 8004318:	fa01 f303 	lsl.w	r3, r1, r3
 800431c:	431a      	orrs	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	621a      	str	r2, [r3, #32]
}
 8004322:	bf00      	nop
 8004324:	371c      	adds	r7, #28
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr
	...

08004330 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004340:	2b01      	cmp	r3, #1
 8004342:	d101      	bne.n	8004348 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004344:	2302      	movs	r3, #2
 8004346:	e06d      	b.n	8004424 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	2201      	movs	r2, #1
 800434c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2202      	movs	r2, #2
 8004354:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a30      	ldr	r2, [pc, #192]	@ (8004430 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d004      	beq.n	800437c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a2f      	ldr	r2, [pc, #188]	@ (8004434 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d108      	bne.n	800438e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8004382:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	68fa      	ldr	r2, [r7, #12]
 800438a:	4313      	orrs	r3, r2
 800438c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004394:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	4313      	orrs	r3, r2
 800439e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	68fa      	ldr	r2, [r7, #12]
 80043a6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a20      	ldr	r2, [pc, #128]	@ (8004430 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d022      	beq.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ba:	d01d      	beq.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004438 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d018      	beq.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a1c      	ldr	r2, [pc, #112]	@ (800443c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d013      	beq.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a1a      	ldr	r2, [pc, #104]	@ (8004440 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d00e      	beq.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4a15      	ldr	r2, [pc, #84]	@ (8004434 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043e0:	4293      	cmp	r3, r2
 80043e2:	d009      	beq.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a16      	ldr	r2, [pc, #88]	@ (8004444 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d004      	beq.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	4a15      	ldr	r2, [pc, #84]	@ (8004448 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d10c      	bne.n	8004412 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043f8:	68bb      	ldr	r3, [r7, #8]
 80043fa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80043fe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	68ba      	ldr	r2, [r7, #8]
 8004406:	4313      	orrs	r3, r2
 8004408:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	2201      	movs	r2, #1
 8004416:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004422:	2300      	movs	r3, #0
}
 8004424:	4618      	mov	r0, r3
 8004426:	3714      	adds	r7, #20
 8004428:	46bd      	mov	sp, r7
 800442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442e:	4770      	bx	lr
 8004430:	40010000 	.word	0x40010000
 8004434:	40010400 	.word	0x40010400
 8004438:	40000400 	.word	0x40000400
 800443c:	40000800 	.word	0x40000800
 8004440:	40000c00 	.word	0x40000c00
 8004444:	40001800 	.word	0x40001800
 8004448:	40014000 	.word	0x40014000

0800444c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800444c:	b480      	push	{r7}
 800444e:	b085      	sub	sp, #20
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004460:	2b01      	cmp	r3, #1
 8004462:	d101      	bne.n	8004468 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004464:	2302      	movs	r3, #2
 8004466:	e065      	b.n	8004534 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	689b      	ldr	r3, [r3, #8]
 8004488:	4313      	orrs	r3, r2
 800448a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	4313      	orrs	r3, r2
 8004498:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80044a0:	683b      	ldr	r3, [r7, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4313      	orrs	r3, r2
 80044a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	4313      	orrs	r3, r2
 80044b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	4313      	orrs	r3, r2
 80044c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	041b      	lsls	r3, r3, #16
 80044de:	4313      	orrs	r3, r2
 80044e0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	4a16      	ldr	r2, [pc, #88]	@ (8004540 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 80044e8:	4293      	cmp	r3, r2
 80044ea:	d004      	beq.n	80044f6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a14      	ldr	r2, [pc, #80]	@ (8004544 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d115      	bne.n	8004522 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004500:	051b      	lsls	r3, r3, #20
 8004502:	4313      	orrs	r3, r2
 8004504:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	4313      	orrs	r3, r2
 8004512:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	6a1b      	ldr	r3, [r3, #32]
 800451e:	4313      	orrs	r3, r2
 8004520:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	68fa      	ldr	r2, [r7, #12]
 8004528:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3714      	adds	r7, #20
 8004538:	46bd      	mov	sp, r7
 800453a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453e:	4770      	bx	lr
 8004540:	40010000 	.word	0x40010000
 8004544:	40010400 	.word	0x40010400

08004548 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b082      	sub	sp, #8
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d101      	bne.n	800455a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004556:	2301      	movs	r3, #1
 8004558:	e042      	b.n	80045e0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004560:	2b00      	cmp	r3, #0
 8004562:	d106      	bne.n	8004572 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	2200      	movs	r2, #0
 8004568:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f000 f83b 	bl	80045e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2224      	movs	r2, #36	@ 0x24
 8004576:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0201 	bic.w	r2, r2, #1
 8004588:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800458e:	2b00      	cmp	r3, #0
 8004590:	d002      	beq.n	8004598 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fe28 	bl	80051e8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004598:	6878      	ldr	r0, [r7, #4]
 800459a:	f000 f8bd 	bl	8004718 <UART_SetConfig>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b01      	cmp	r3, #1
 80045a2:	d101      	bne.n	80045a8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e01b      	b.n	80045e0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045b6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	689a      	ldr	r2, [r3, #8]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045c6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f042 0201 	orr.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 fea7 	bl	800532c <UART_CheckIdleState>
 80045de:	4603      	mov	r3, r0
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	3708      	adds	r7, #8
 80045e4:	46bd      	mov	sp, r7
 80045e6:	bd80      	pop	{r7, pc}

080045e8 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b083      	sub	sp, #12
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 80045f0:	bf00      	nop
 80045f2:	370c      	adds	r7, #12
 80045f4:	46bd      	mov	sp, r7
 80045f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fa:	4770      	bx	lr

080045fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08a      	sub	sp, #40	@ 0x28
 8004600:	af02      	add	r7, sp, #8
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	603b      	str	r3, [r7, #0]
 8004608:	4613      	mov	r3, r2
 800460a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004612:	2b20      	cmp	r3, #32
 8004614:	d17b      	bne.n	800470e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004616:	68bb      	ldr	r3, [r7, #8]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d002      	beq.n	8004622 <HAL_UART_Transmit+0x26>
 800461c:	88fb      	ldrh	r3, [r7, #6]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d101      	bne.n	8004626 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004622:	2301      	movs	r3, #1
 8004624:	e074      	b.n	8004710 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	2200      	movs	r2, #0
 800462a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2221      	movs	r2, #33	@ 0x21
 8004632:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004636:	f7fc ff13 	bl	8001460 <HAL_GetTick>
 800463a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	88fa      	ldrh	r2, [r7, #6]
 8004640:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	88fa      	ldrh	r2, [r7, #6]
 8004648:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004654:	d108      	bne.n	8004668 <HAL_UART_Transmit+0x6c>
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	691b      	ldr	r3, [r3, #16]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d104      	bne.n	8004668 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800465e:	2300      	movs	r3, #0
 8004660:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	61bb      	str	r3, [r7, #24]
 8004666:	e003      	b.n	8004670 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800466c:	2300      	movs	r3, #0
 800466e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004670:	e030      	b.n	80046d4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	9300      	str	r3, [sp, #0]
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	2200      	movs	r2, #0
 800467a:	2180      	movs	r1, #128	@ 0x80
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 feff 	bl	8005480 <UART_WaitOnFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d005      	beq.n	8004694 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2220      	movs	r2, #32
 800468c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004690:	2303      	movs	r3, #3
 8004692:	e03d      	b.n	8004710 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004694:	69fb      	ldr	r3, [r7, #28]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10b      	bne.n	80046b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800469a:	69bb      	ldr	r3, [r7, #24]
 800469c:	881b      	ldrh	r3, [r3, #0]
 800469e:	461a      	mov	r2, r3
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046a8:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	3302      	adds	r3, #2
 80046ae:	61bb      	str	r3, [r7, #24]
 80046b0:	e007      	b.n	80046c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	781a      	ldrb	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	3301      	adds	r3, #1
 80046c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80046c8:	b29b      	uxth	r3, r3
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80046da:	b29b      	uxth	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1c8      	bne.n	8004672 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	9300      	str	r3, [sp, #0]
 80046e4:	697b      	ldr	r3, [r7, #20]
 80046e6:	2200      	movs	r2, #0
 80046e8:	2140      	movs	r1, #64	@ 0x40
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 fec8 	bl	8005480 <UART_WaitOnFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d005      	beq.n	8004702 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	2220      	movs	r2, #32
 80046fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e006      	b.n	8004710 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	2220      	movs	r2, #32
 8004706:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800470a:	2300      	movs	r3, #0
 800470c:	e000      	b.n	8004710 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800470e:	2302      	movs	r3, #2
  }
}
 8004710:	4618      	mov	r0, r3
 8004712:	3720      	adds	r7, #32
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800471c:	b092      	sub	sp, #72	@ 0x48
 800471e:	af00      	add	r7, sp, #0
 8004720:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004722:	2300      	movs	r3, #0
 8004724:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004728:	697b      	ldr	r3, [r7, #20]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	691b      	ldr	r3, [r3, #16]
 8004730:	431a      	orrs	r2, r3
 8004732:	697b      	ldr	r3, [r7, #20]
 8004734:	695b      	ldr	r3, [r3, #20]
 8004736:	431a      	orrs	r2, r3
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	69db      	ldr	r3, [r3, #28]
 800473c:	4313      	orrs	r3, r2
 800473e:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	4bbe      	ldr	r3, [pc, #760]	@ (8004a40 <UART_SetConfig+0x328>)
 8004748:	4013      	ands	r3, r2
 800474a:	697a      	ldr	r2, [r7, #20]
 800474c:	6812      	ldr	r2, [r2, #0]
 800474e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004750:	430b      	orrs	r3, r1
 8004752:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	68da      	ldr	r2, [r3, #12]
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	430a      	orrs	r2, r1
 8004768:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4ab3      	ldr	r2, [pc, #716]	@ (8004a44 <UART_SetConfig+0x32c>)
 8004776:	4293      	cmp	r3, r2
 8004778:	d004      	beq.n	8004784 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	6a1b      	ldr	r3, [r3, #32]
 800477e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004780:	4313      	orrs	r3, r2
 8004782:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689a      	ldr	r2, [r3, #8]
 800478a:	4baf      	ldr	r3, [pc, #700]	@ (8004a48 <UART_SetConfig+0x330>)
 800478c:	4013      	ands	r3, r2
 800478e:	697a      	ldr	r2, [r7, #20]
 8004790:	6812      	ldr	r2, [r2, #0]
 8004792:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004794:	430b      	orrs	r3, r1
 8004796:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800479e:	f023 010f 	bic.w	r1, r3, #15
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80047a6:	697b      	ldr	r3, [r7, #20]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	430a      	orrs	r2, r1
 80047ac:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80047ae:	697b      	ldr	r3, [r7, #20]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4aa6      	ldr	r2, [pc, #664]	@ (8004a4c <UART_SetConfig+0x334>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d177      	bne.n	80048a8 <UART_SetConfig+0x190>
 80047b8:	4ba5      	ldr	r3, [pc, #660]	@ (8004a50 <UART_SetConfig+0x338>)
 80047ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047bc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047c0:	2b28      	cmp	r3, #40	@ 0x28
 80047c2:	d86d      	bhi.n	80048a0 <UART_SetConfig+0x188>
 80047c4:	a201      	add	r2, pc, #4	@ (adr r2, 80047cc <UART_SetConfig+0xb4>)
 80047c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ca:	bf00      	nop
 80047cc:	08004871 	.word	0x08004871
 80047d0:	080048a1 	.word	0x080048a1
 80047d4:	080048a1 	.word	0x080048a1
 80047d8:	080048a1 	.word	0x080048a1
 80047dc:	080048a1 	.word	0x080048a1
 80047e0:	080048a1 	.word	0x080048a1
 80047e4:	080048a1 	.word	0x080048a1
 80047e8:	080048a1 	.word	0x080048a1
 80047ec:	08004879 	.word	0x08004879
 80047f0:	080048a1 	.word	0x080048a1
 80047f4:	080048a1 	.word	0x080048a1
 80047f8:	080048a1 	.word	0x080048a1
 80047fc:	080048a1 	.word	0x080048a1
 8004800:	080048a1 	.word	0x080048a1
 8004804:	080048a1 	.word	0x080048a1
 8004808:	080048a1 	.word	0x080048a1
 800480c:	08004881 	.word	0x08004881
 8004810:	080048a1 	.word	0x080048a1
 8004814:	080048a1 	.word	0x080048a1
 8004818:	080048a1 	.word	0x080048a1
 800481c:	080048a1 	.word	0x080048a1
 8004820:	080048a1 	.word	0x080048a1
 8004824:	080048a1 	.word	0x080048a1
 8004828:	080048a1 	.word	0x080048a1
 800482c:	08004889 	.word	0x08004889
 8004830:	080048a1 	.word	0x080048a1
 8004834:	080048a1 	.word	0x080048a1
 8004838:	080048a1 	.word	0x080048a1
 800483c:	080048a1 	.word	0x080048a1
 8004840:	080048a1 	.word	0x080048a1
 8004844:	080048a1 	.word	0x080048a1
 8004848:	080048a1 	.word	0x080048a1
 800484c:	08004891 	.word	0x08004891
 8004850:	080048a1 	.word	0x080048a1
 8004854:	080048a1 	.word	0x080048a1
 8004858:	080048a1 	.word	0x080048a1
 800485c:	080048a1 	.word	0x080048a1
 8004860:	080048a1 	.word	0x080048a1
 8004864:	080048a1 	.word	0x080048a1
 8004868:	080048a1 	.word	0x080048a1
 800486c:	08004899 	.word	0x08004899
 8004870:	2301      	movs	r3, #1
 8004872:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004876:	e222      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004878:	2304      	movs	r3, #4
 800487a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800487e:	e21e      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004880:	2308      	movs	r3, #8
 8004882:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004886:	e21a      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004888:	2310      	movs	r3, #16
 800488a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800488e:	e216      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004890:	2320      	movs	r3, #32
 8004892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004896:	e212      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004898:	2340      	movs	r3, #64	@ 0x40
 800489a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800489e:	e20e      	b.n	8004cbe <UART_SetConfig+0x5a6>
 80048a0:	2380      	movs	r3, #128	@ 0x80
 80048a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048a6:	e20a      	b.n	8004cbe <UART_SetConfig+0x5a6>
 80048a8:	697b      	ldr	r3, [r7, #20]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a69      	ldr	r2, [pc, #420]	@ (8004a54 <UART_SetConfig+0x33c>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d130      	bne.n	8004914 <UART_SetConfig+0x1fc>
 80048b2:	4b67      	ldr	r3, [pc, #412]	@ (8004a50 <UART_SetConfig+0x338>)
 80048b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b6:	f003 0307 	and.w	r3, r3, #7
 80048ba:	2b05      	cmp	r3, #5
 80048bc:	d826      	bhi.n	800490c <UART_SetConfig+0x1f4>
 80048be:	a201      	add	r2, pc, #4	@ (adr r2, 80048c4 <UART_SetConfig+0x1ac>)
 80048c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c4:	080048dd 	.word	0x080048dd
 80048c8:	080048e5 	.word	0x080048e5
 80048cc:	080048ed 	.word	0x080048ed
 80048d0:	080048f5 	.word	0x080048f5
 80048d4:	080048fd 	.word	0x080048fd
 80048d8:	08004905 	.word	0x08004905
 80048dc:	2300      	movs	r3, #0
 80048de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048e2:	e1ec      	b.n	8004cbe <UART_SetConfig+0x5a6>
 80048e4:	2304      	movs	r3, #4
 80048e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ea:	e1e8      	b.n	8004cbe <UART_SetConfig+0x5a6>
 80048ec:	2308      	movs	r3, #8
 80048ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048f2:	e1e4      	b.n	8004cbe <UART_SetConfig+0x5a6>
 80048f4:	2310      	movs	r3, #16
 80048f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048fa:	e1e0      	b.n	8004cbe <UART_SetConfig+0x5a6>
 80048fc:	2320      	movs	r3, #32
 80048fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004902:	e1dc      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004904:	2340      	movs	r3, #64	@ 0x40
 8004906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800490a:	e1d8      	b.n	8004cbe <UART_SetConfig+0x5a6>
 800490c:	2380      	movs	r3, #128	@ 0x80
 800490e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004912:	e1d4      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	4a4f      	ldr	r2, [pc, #316]	@ (8004a58 <UART_SetConfig+0x340>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d130      	bne.n	8004980 <UART_SetConfig+0x268>
 800491e:	4b4c      	ldr	r3, [pc, #304]	@ (8004a50 <UART_SetConfig+0x338>)
 8004920:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004922:	f003 0307 	and.w	r3, r3, #7
 8004926:	2b05      	cmp	r3, #5
 8004928:	d826      	bhi.n	8004978 <UART_SetConfig+0x260>
 800492a:	a201      	add	r2, pc, #4	@ (adr r2, 8004930 <UART_SetConfig+0x218>)
 800492c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004930:	08004949 	.word	0x08004949
 8004934:	08004951 	.word	0x08004951
 8004938:	08004959 	.word	0x08004959
 800493c:	08004961 	.word	0x08004961
 8004940:	08004969 	.word	0x08004969
 8004944:	08004971 	.word	0x08004971
 8004948:	2300      	movs	r3, #0
 800494a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800494e:	e1b6      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004950:	2304      	movs	r3, #4
 8004952:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004956:	e1b2      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004958:	2308      	movs	r3, #8
 800495a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800495e:	e1ae      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004960:	2310      	movs	r3, #16
 8004962:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004966:	e1aa      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004968:	2320      	movs	r3, #32
 800496a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800496e:	e1a6      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004970:	2340      	movs	r3, #64	@ 0x40
 8004972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004976:	e1a2      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004978:	2380      	movs	r3, #128	@ 0x80
 800497a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800497e:	e19e      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a35      	ldr	r2, [pc, #212]	@ (8004a5c <UART_SetConfig+0x344>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d130      	bne.n	80049ec <UART_SetConfig+0x2d4>
 800498a:	4b31      	ldr	r3, [pc, #196]	@ (8004a50 <UART_SetConfig+0x338>)
 800498c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800498e:	f003 0307 	and.w	r3, r3, #7
 8004992:	2b05      	cmp	r3, #5
 8004994:	d826      	bhi.n	80049e4 <UART_SetConfig+0x2cc>
 8004996:	a201      	add	r2, pc, #4	@ (adr r2, 800499c <UART_SetConfig+0x284>)
 8004998:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499c:	080049b5 	.word	0x080049b5
 80049a0:	080049bd 	.word	0x080049bd
 80049a4:	080049c5 	.word	0x080049c5
 80049a8:	080049cd 	.word	0x080049cd
 80049ac:	080049d5 	.word	0x080049d5
 80049b0:	080049dd 	.word	0x080049dd
 80049b4:	2300      	movs	r3, #0
 80049b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ba:	e180      	b.n	8004cbe <UART_SetConfig+0x5a6>
 80049bc:	2304      	movs	r3, #4
 80049be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049c2:	e17c      	b.n	8004cbe <UART_SetConfig+0x5a6>
 80049c4:	2308      	movs	r3, #8
 80049c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ca:	e178      	b.n	8004cbe <UART_SetConfig+0x5a6>
 80049cc:	2310      	movs	r3, #16
 80049ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049d2:	e174      	b.n	8004cbe <UART_SetConfig+0x5a6>
 80049d4:	2320      	movs	r3, #32
 80049d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049da:	e170      	b.n	8004cbe <UART_SetConfig+0x5a6>
 80049dc:	2340      	movs	r3, #64	@ 0x40
 80049de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049e2:	e16c      	b.n	8004cbe <UART_SetConfig+0x5a6>
 80049e4:	2380      	movs	r3, #128	@ 0x80
 80049e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ea:	e168      	b.n	8004cbe <UART_SetConfig+0x5a6>
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a1b      	ldr	r2, [pc, #108]	@ (8004a60 <UART_SetConfig+0x348>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d142      	bne.n	8004a7c <UART_SetConfig+0x364>
 80049f6:	4b16      	ldr	r3, [pc, #88]	@ (8004a50 <UART_SetConfig+0x338>)
 80049f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049fa:	f003 0307 	and.w	r3, r3, #7
 80049fe:	2b05      	cmp	r3, #5
 8004a00:	d838      	bhi.n	8004a74 <UART_SetConfig+0x35c>
 8004a02:	a201      	add	r2, pc, #4	@ (adr r2, 8004a08 <UART_SetConfig+0x2f0>)
 8004a04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a08:	08004a21 	.word	0x08004a21
 8004a0c:	08004a29 	.word	0x08004a29
 8004a10:	08004a31 	.word	0x08004a31
 8004a14:	08004a39 	.word	0x08004a39
 8004a18:	08004a65 	.word	0x08004a65
 8004a1c:	08004a6d 	.word	0x08004a6d
 8004a20:	2300      	movs	r3, #0
 8004a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a26:	e14a      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004a28:	2304      	movs	r3, #4
 8004a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a2e:	e146      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004a30:	2308      	movs	r3, #8
 8004a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a36:	e142      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004a38:	2310      	movs	r3, #16
 8004a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a3e:	e13e      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004a40:	cfff69f3 	.word	0xcfff69f3
 8004a44:	58000c00 	.word	0x58000c00
 8004a48:	11fff4ff 	.word	0x11fff4ff
 8004a4c:	40011000 	.word	0x40011000
 8004a50:	58024400 	.word	0x58024400
 8004a54:	40004400 	.word	0x40004400
 8004a58:	40004800 	.word	0x40004800
 8004a5c:	40004c00 	.word	0x40004c00
 8004a60:	40005000 	.word	0x40005000
 8004a64:	2320      	movs	r3, #32
 8004a66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a6a:	e128      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004a6c:	2340      	movs	r3, #64	@ 0x40
 8004a6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a72:	e124      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004a74:	2380      	movs	r3, #128	@ 0x80
 8004a76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a7a:	e120      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004a7c:	697b      	ldr	r3, [r7, #20]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4acb      	ldr	r2, [pc, #812]	@ (8004db0 <UART_SetConfig+0x698>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d176      	bne.n	8004b74 <UART_SetConfig+0x45c>
 8004a86:	4bcb      	ldr	r3, [pc, #812]	@ (8004db4 <UART_SetConfig+0x69c>)
 8004a88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a8e:	2b28      	cmp	r3, #40	@ 0x28
 8004a90:	d86c      	bhi.n	8004b6c <UART_SetConfig+0x454>
 8004a92:	a201      	add	r2, pc, #4	@ (adr r2, 8004a98 <UART_SetConfig+0x380>)
 8004a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a98:	08004b3d 	.word	0x08004b3d
 8004a9c:	08004b6d 	.word	0x08004b6d
 8004aa0:	08004b6d 	.word	0x08004b6d
 8004aa4:	08004b6d 	.word	0x08004b6d
 8004aa8:	08004b6d 	.word	0x08004b6d
 8004aac:	08004b6d 	.word	0x08004b6d
 8004ab0:	08004b6d 	.word	0x08004b6d
 8004ab4:	08004b6d 	.word	0x08004b6d
 8004ab8:	08004b45 	.word	0x08004b45
 8004abc:	08004b6d 	.word	0x08004b6d
 8004ac0:	08004b6d 	.word	0x08004b6d
 8004ac4:	08004b6d 	.word	0x08004b6d
 8004ac8:	08004b6d 	.word	0x08004b6d
 8004acc:	08004b6d 	.word	0x08004b6d
 8004ad0:	08004b6d 	.word	0x08004b6d
 8004ad4:	08004b6d 	.word	0x08004b6d
 8004ad8:	08004b4d 	.word	0x08004b4d
 8004adc:	08004b6d 	.word	0x08004b6d
 8004ae0:	08004b6d 	.word	0x08004b6d
 8004ae4:	08004b6d 	.word	0x08004b6d
 8004ae8:	08004b6d 	.word	0x08004b6d
 8004aec:	08004b6d 	.word	0x08004b6d
 8004af0:	08004b6d 	.word	0x08004b6d
 8004af4:	08004b6d 	.word	0x08004b6d
 8004af8:	08004b55 	.word	0x08004b55
 8004afc:	08004b6d 	.word	0x08004b6d
 8004b00:	08004b6d 	.word	0x08004b6d
 8004b04:	08004b6d 	.word	0x08004b6d
 8004b08:	08004b6d 	.word	0x08004b6d
 8004b0c:	08004b6d 	.word	0x08004b6d
 8004b10:	08004b6d 	.word	0x08004b6d
 8004b14:	08004b6d 	.word	0x08004b6d
 8004b18:	08004b5d 	.word	0x08004b5d
 8004b1c:	08004b6d 	.word	0x08004b6d
 8004b20:	08004b6d 	.word	0x08004b6d
 8004b24:	08004b6d 	.word	0x08004b6d
 8004b28:	08004b6d 	.word	0x08004b6d
 8004b2c:	08004b6d 	.word	0x08004b6d
 8004b30:	08004b6d 	.word	0x08004b6d
 8004b34:	08004b6d 	.word	0x08004b6d
 8004b38:	08004b65 	.word	0x08004b65
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b42:	e0bc      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004b44:	2304      	movs	r3, #4
 8004b46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b4a:	e0b8      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004b4c:	2308      	movs	r3, #8
 8004b4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b52:	e0b4      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004b54:	2310      	movs	r3, #16
 8004b56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b5a:	e0b0      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004b5c:	2320      	movs	r3, #32
 8004b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b62:	e0ac      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004b64:	2340      	movs	r3, #64	@ 0x40
 8004b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b6a:	e0a8      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004b6c:	2380      	movs	r3, #128	@ 0x80
 8004b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b72:	e0a4      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a8f      	ldr	r2, [pc, #572]	@ (8004db8 <UART_SetConfig+0x6a0>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d130      	bne.n	8004be0 <UART_SetConfig+0x4c8>
 8004b7e:	4b8d      	ldr	r3, [pc, #564]	@ (8004db4 <UART_SetConfig+0x69c>)
 8004b80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b82:	f003 0307 	and.w	r3, r3, #7
 8004b86:	2b05      	cmp	r3, #5
 8004b88:	d826      	bhi.n	8004bd8 <UART_SetConfig+0x4c0>
 8004b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004b90 <UART_SetConfig+0x478>)
 8004b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b90:	08004ba9 	.word	0x08004ba9
 8004b94:	08004bb1 	.word	0x08004bb1
 8004b98:	08004bb9 	.word	0x08004bb9
 8004b9c:	08004bc1 	.word	0x08004bc1
 8004ba0:	08004bc9 	.word	0x08004bc9
 8004ba4:	08004bd1 	.word	0x08004bd1
 8004ba8:	2300      	movs	r3, #0
 8004baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bae:	e086      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004bb0:	2304      	movs	r3, #4
 8004bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bb6:	e082      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004bb8:	2308      	movs	r3, #8
 8004bba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bbe:	e07e      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004bc0:	2310      	movs	r3, #16
 8004bc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bc6:	e07a      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004bc8:	2320      	movs	r3, #32
 8004bca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bce:	e076      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004bd0:	2340      	movs	r3, #64	@ 0x40
 8004bd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bd6:	e072      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004bd8:	2380      	movs	r3, #128	@ 0x80
 8004bda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bde:	e06e      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4a75      	ldr	r2, [pc, #468]	@ (8004dbc <UART_SetConfig+0x6a4>)
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d130      	bne.n	8004c4c <UART_SetConfig+0x534>
 8004bea:	4b72      	ldr	r3, [pc, #456]	@ (8004db4 <UART_SetConfig+0x69c>)
 8004bec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	2b05      	cmp	r3, #5
 8004bf4:	d826      	bhi.n	8004c44 <UART_SetConfig+0x52c>
 8004bf6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bfc <UART_SetConfig+0x4e4>)
 8004bf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfc:	08004c15 	.word	0x08004c15
 8004c00:	08004c1d 	.word	0x08004c1d
 8004c04:	08004c25 	.word	0x08004c25
 8004c08:	08004c2d 	.word	0x08004c2d
 8004c0c:	08004c35 	.word	0x08004c35
 8004c10:	08004c3d 	.word	0x08004c3d
 8004c14:	2300      	movs	r3, #0
 8004c16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c1a:	e050      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004c1c:	2304      	movs	r3, #4
 8004c1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c22:	e04c      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004c24:	2308      	movs	r3, #8
 8004c26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c2a:	e048      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004c2c:	2310      	movs	r3, #16
 8004c2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c32:	e044      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004c34:	2320      	movs	r3, #32
 8004c36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c3a:	e040      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004c3c:	2340      	movs	r3, #64	@ 0x40
 8004c3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c42:	e03c      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004c44:	2380      	movs	r3, #128	@ 0x80
 8004c46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c4a:	e038      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a5b      	ldr	r2, [pc, #364]	@ (8004dc0 <UART_SetConfig+0x6a8>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d130      	bne.n	8004cb8 <UART_SetConfig+0x5a0>
 8004c56:	4b57      	ldr	r3, [pc, #348]	@ (8004db4 <UART_SetConfig+0x69c>)
 8004c58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c5a:	f003 0307 	and.w	r3, r3, #7
 8004c5e:	2b05      	cmp	r3, #5
 8004c60:	d826      	bhi.n	8004cb0 <UART_SetConfig+0x598>
 8004c62:	a201      	add	r2, pc, #4	@ (adr r2, 8004c68 <UART_SetConfig+0x550>)
 8004c64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c68:	08004c81 	.word	0x08004c81
 8004c6c:	08004c89 	.word	0x08004c89
 8004c70:	08004c91 	.word	0x08004c91
 8004c74:	08004c99 	.word	0x08004c99
 8004c78:	08004ca1 	.word	0x08004ca1
 8004c7c:	08004ca9 	.word	0x08004ca9
 8004c80:	2302      	movs	r3, #2
 8004c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c86:	e01a      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004c88:	2304      	movs	r3, #4
 8004c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c8e:	e016      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004c90:	2308      	movs	r3, #8
 8004c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c96:	e012      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004c98:	2310      	movs	r3, #16
 8004c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c9e:	e00e      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004ca0:	2320      	movs	r3, #32
 8004ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ca6:	e00a      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004ca8:	2340      	movs	r3, #64	@ 0x40
 8004caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cae:	e006      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004cb0:	2380      	movs	r3, #128	@ 0x80
 8004cb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cb6:	e002      	b.n	8004cbe <UART_SetConfig+0x5a6>
 8004cb8:	2380      	movs	r3, #128	@ 0x80
 8004cba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004cbe:	697b      	ldr	r3, [r7, #20]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4a3f      	ldr	r2, [pc, #252]	@ (8004dc0 <UART_SetConfig+0x6a8>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	f040 80f8 	bne.w	8004eba <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004cca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004cce:	2b20      	cmp	r3, #32
 8004cd0:	dc46      	bgt.n	8004d60 <UART_SetConfig+0x648>
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	f2c0 8082 	blt.w	8004ddc <UART_SetConfig+0x6c4>
 8004cd8:	3b02      	subs	r3, #2
 8004cda:	2b1e      	cmp	r3, #30
 8004cdc:	d87e      	bhi.n	8004ddc <UART_SetConfig+0x6c4>
 8004cde:	a201      	add	r2, pc, #4	@ (adr r2, 8004ce4 <UART_SetConfig+0x5cc>)
 8004ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ce4:	08004d67 	.word	0x08004d67
 8004ce8:	08004ddd 	.word	0x08004ddd
 8004cec:	08004d6f 	.word	0x08004d6f
 8004cf0:	08004ddd 	.word	0x08004ddd
 8004cf4:	08004ddd 	.word	0x08004ddd
 8004cf8:	08004ddd 	.word	0x08004ddd
 8004cfc:	08004d7f 	.word	0x08004d7f
 8004d00:	08004ddd 	.word	0x08004ddd
 8004d04:	08004ddd 	.word	0x08004ddd
 8004d08:	08004ddd 	.word	0x08004ddd
 8004d0c:	08004ddd 	.word	0x08004ddd
 8004d10:	08004ddd 	.word	0x08004ddd
 8004d14:	08004ddd 	.word	0x08004ddd
 8004d18:	08004ddd 	.word	0x08004ddd
 8004d1c:	08004d8f 	.word	0x08004d8f
 8004d20:	08004ddd 	.word	0x08004ddd
 8004d24:	08004ddd 	.word	0x08004ddd
 8004d28:	08004ddd 	.word	0x08004ddd
 8004d2c:	08004ddd 	.word	0x08004ddd
 8004d30:	08004ddd 	.word	0x08004ddd
 8004d34:	08004ddd 	.word	0x08004ddd
 8004d38:	08004ddd 	.word	0x08004ddd
 8004d3c:	08004ddd 	.word	0x08004ddd
 8004d40:	08004ddd 	.word	0x08004ddd
 8004d44:	08004ddd 	.word	0x08004ddd
 8004d48:	08004ddd 	.word	0x08004ddd
 8004d4c:	08004ddd 	.word	0x08004ddd
 8004d50:	08004ddd 	.word	0x08004ddd
 8004d54:	08004ddd 	.word	0x08004ddd
 8004d58:	08004ddd 	.word	0x08004ddd
 8004d5c:	08004dcf 	.word	0x08004dcf
 8004d60:	2b40      	cmp	r3, #64	@ 0x40
 8004d62:	d037      	beq.n	8004dd4 <UART_SetConfig+0x6bc>
 8004d64:	e03a      	b.n	8004ddc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004d66:	f7fd feed 	bl	8002b44 <HAL_RCCEx_GetD3PCLK1Freq>
 8004d6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004d6c:	e03c      	b.n	8004de8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d72:	4618      	mov	r0, r3
 8004d74:	f7fd fefc 	bl	8002b70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d7c:	e034      	b.n	8004de8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d7e:	f107 0318 	add.w	r3, r7, #24
 8004d82:	4618      	mov	r0, r3
 8004d84:	f7fe f848 	bl	8002e18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d88:	69fb      	ldr	r3, [r7, #28]
 8004d8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d8c:	e02c      	b.n	8004de8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d8e:	4b09      	ldr	r3, [pc, #36]	@ (8004db4 <UART_SetConfig+0x69c>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 0320 	and.w	r3, r3, #32
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d016      	beq.n	8004dc8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d9a:	4b06      	ldr	r3, [pc, #24]	@ (8004db4 <UART_SetConfig+0x69c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	08db      	lsrs	r3, r3, #3
 8004da0:	f003 0303 	and.w	r3, r3, #3
 8004da4:	4a07      	ldr	r2, [pc, #28]	@ (8004dc4 <UART_SetConfig+0x6ac>)
 8004da6:	fa22 f303 	lsr.w	r3, r2, r3
 8004daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004dac:	e01c      	b.n	8004de8 <UART_SetConfig+0x6d0>
 8004dae:	bf00      	nop
 8004db0:	40011400 	.word	0x40011400
 8004db4:	58024400 	.word	0x58024400
 8004db8:	40007800 	.word	0x40007800
 8004dbc:	40007c00 	.word	0x40007c00
 8004dc0:	58000c00 	.word	0x58000c00
 8004dc4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004dc8:	4b9d      	ldr	r3, [pc, #628]	@ (8005040 <UART_SetConfig+0x928>)
 8004dca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dcc:	e00c      	b.n	8004de8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004dce:	4b9d      	ldr	r3, [pc, #628]	@ (8005044 <UART_SetConfig+0x92c>)
 8004dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dd2:	e009      	b.n	8004de8 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dd4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004dda:	e005      	b.n	8004de8 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004de0:	2301      	movs	r3, #1
 8004de2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004de6:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004de8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 81de 	beq.w	80051ac <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004df0:	697b      	ldr	r3, [r7, #20]
 8004df2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df4:	4a94      	ldr	r2, [pc, #592]	@ (8005048 <UART_SetConfig+0x930>)
 8004df6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dfa:	461a      	mov	r2, r3
 8004dfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dfe:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e02:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e04:	697b      	ldr	r3, [r7, #20]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	005b      	lsls	r3, r3, #1
 8004e0c:	4413      	add	r3, r2
 8004e0e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e10:	429a      	cmp	r2, r3
 8004e12:	d305      	bcc.n	8004e20 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	685b      	ldr	r3, [r3, #4]
 8004e18:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004e1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e1c:	429a      	cmp	r2, r3
 8004e1e:	d903      	bls.n	8004e28 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004e26:	e1c1      	b.n	80051ac <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	60bb      	str	r3, [r7, #8]
 8004e2e:	60fa      	str	r2, [r7, #12]
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e34:	4a84      	ldr	r2, [pc, #528]	@ (8005048 <UART_SetConfig+0x930>)
 8004e36:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e3a:	b29b      	uxth	r3, r3
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	603b      	str	r3, [r7, #0]
 8004e40:	607a      	str	r2, [r7, #4]
 8004e42:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e46:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004e4a:	f7fb fa99 	bl	8000380 <__aeabi_uldivmod>
 8004e4e:	4602      	mov	r2, r0
 8004e50:	460b      	mov	r3, r1
 8004e52:	4610      	mov	r0, r2
 8004e54:	4619      	mov	r1, r3
 8004e56:	f04f 0200 	mov.w	r2, #0
 8004e5a:	f04f 0300 	mov.w	r3, #0
 8004e5e:	020b      	lsls	r3, r1, #8
 8004e60:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004e64:	0202      	lsls	r2, r0, #8
 8004e66:	6979      	ldr	r1, [r7, #20]
 8004e68:	6849      	ldr	r1, [r1, #4]
 8004e6a:	0849      	lsrs	r1, r1, #1
 8004e6c:	2000      	movs	r0, #0
 8004e6e:	460c      	mov	r4, r1
 8004e70:	4605      	mov	r5, r0
 8004e72:	eb12 0804 	adds.w	r8, r2, r4
 8004e76:	eb43 0905 	adc.w	r9, r3, r5
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	469a      	mov	sl, r3
 8004e82:	4693      	mov	fp, r2
 8004e84:	4652      	mov	r2, sl
 8004e86:	465b      	mov	r3, fp
 8004e88:	4640      	mov	r0, r8
 8004e8a:	4649      	mov	r1, r9
 8004e8c:	f7fb fa78 	bl	8000380 <__aeabi_uldivmod>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4613      	mov	r3, r2
 8004e96:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e9e:	d308      	bcc.n	8004eb2 <UART_SetConfig+0x79a>
 8004ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ea2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004ea6:	d204      	bcs.n	8004eb2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004eae:	60da      	str	r2, [r3, #12]
 8004eb0:	e17c      	b.n	80051ac <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004eb8:	e178      	b.n	80051ac <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	69db      	ldr	r3, [r3, #28]
 8004ebe:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ec2:	f040 80c5 	bne.w	8005050 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004ec6:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	dc48      	bgt.n	8004f60 <UART_SetConfig+0x848>
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	db7b      	blt.n	8004fca <UART_SetConfig+0x8b2>
 8004ed2:	2b20      	cmp	r3, #32
 8004ed4:	d879      	bhi.n	8004fca <UART_SetConfig+0x8b2>
 8004ed6:	a201      	add	r2, pc, #4	@ (adr r2, 8004edc <UART_SetConfig+0x7c4>)
 8004ed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004edc:	08004f67 	.word	0x08004f67
 8004ee0:	08004f6f 	.word	0x08004f6f
 8004ee4:	08004fcb 	.word	0x08004fcb
 8004ee8:	08004fcb 	.word	0x08004fcb
 8004eec:	08004f77 	.word	0x08004f77
 8004ef0:	08004fcb 	.word	0x08004fcb
 8004ef4:	08004fcb 	.word	0x08004fcb
 8004ef8:	08004fcb 	.word	0x08004fcb
 8004efc:	08004f87 	.word	0x08004f87
 8004f00:	08004fcb 	.word	0x08004fcb
 8004f04:	08004fcb 	.word	0x08004fcb
 8004f08:	08004fcb 	.word	0x08004fcb
 8004f0c:	08004fcb 	.word	0x08004fcb
 8004f10:	08004fcb 	.word	0x08004fcb
 8004f14:	08004fcb 	.word	0x08004fcb
 8004f18:	08004fcb 	.word	0x08004fcb
 8004f1c:	08004f97 	.word	0x08004f97
 8004f20:	08004fcb 	.word	0x08004fcb
 8004f24:	08004fcb 	.word	0x08004fcb
 8004f28:	08004fcb 	.word	0x08004fcb
 8004f2c:	08004fcb 	.word	0x08004fcb
 8004f30:	08004fcb 	.word	0x08004fcb
 8004f34:	08004fcb 	.word	0x08004fcb
 8004f38:	08004fcb 	.word	0x08004fcb
 8004f3c:	08004fcb 	.word	0x08004fcb
 8004f40:	08004fcb 	.word	0x08004fcb
 8004f44:	08004fcb 	.word	0x08004fcb
 8004f48:	08004fcb 	.word	0x08004fcb
 8004f4c:	08004fcb 	.word	0x08004fcb
 8004f50:	08004fcb 	.word	0x08004fcb
 8004f54:	08004fcb 	.word	0x08004fcb
 8004f58:	08004fcb 	.word	0x08004fcb
 8004f5c:	08004fbd 	.word	0x08004fbd
 8004f60:	2b40      	cmp	r3, #64	@ 0x40
 8004f62:	d02e      	beq.n	8004fc2 <UART_SetConfig+0x8aa>
 8004f64:	e031      	b.n	8004fca <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f66:	f7fd fdc1 	bl	8002aec <HAL_RCC_GetPCLK1Freq>
 8004f6a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f6c:	e033      	b.n	8004fd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f6e:	f7fd fdd3 	bl	8002b18 <HAL_RCC_GetPCLK2Freq>
 8004f72:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f74:	e02f      	b.n	8004fd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f76:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f7a:	4618      	mov	r0, r3
 8004f7c:	f7fd fdf8 	bl	8002b70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f84:	e027      	b.n	8004fd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f86:	f107 0318 	add.w	r3, r7, #24
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7fd ff44 	bl	8002e18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f94:	e01f      	b.n	8004fd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f96:	4b2d      	ldr	r3, [pc, #180]	@ (800504c <UART_SetConfig+0x934>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d009      	beq.n	8004fb6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004fa2:	4b2a      	ldr	r3, [pc, #168]	@ (800504c <UART_SetConfig+0x934>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	08db      	lsrs	r3, r3, #3
 8004fa8:	f003 0303 	and.w	r3, r3, #3
 8004fac:	4a24      	ldr	r2, [pc, #144]	@ (8005040 <UART_SetConfig+0x928>)
 8004fae:	fa22 f303 	lsr.w	r3, r2, r3
 8004fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004fb4:	e00f      	b.n	8004fd6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004fb6:	4b22      	ldr	r3, [pc, #136]	@ (8005040 <UART_SetConfig+0x928>)
 8004fb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fba:	e00c      	b.n	8004fd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004fbc:	4b21      	ldr	r3, [pc, #132]	@ (8005044 <UART_SetConfig+0x92c>)
 8004fbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fc0:	e009      	b.n	8004fd6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004fc8:	e005      	b.n	8004fd6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004fce:	2301      	movs	r3, #1
 8004fd0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004fd4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004fd6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	f000 80e7 	beq.w	80051ac <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004fde:	697b      	ldr	r3, [r7, #20]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fe2:	4a19      	ldr	r2, [pc, #100]	@ (8005048 <UART_SetConfig+0x930>)
 8004fe4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fe8:	461a      	mov	r2, r3
 8004fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fec:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ff0:	005a      	lsls	r2, r3, #1
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	085b      	lsrs	r3, r3, #1
 8004ff8:	441a      	add	r2, r3
 8004ffa:	697b      	ldr	r3, [r7, #20]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005002:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005004:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005006:	2b0f      	cmp	r3, #15
 8005008:	d916      	bls.n	8005038 <UART_SetConfig+0x920>
 800500a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800500c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005010:	d212      	bcs.n	8005038 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005012:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005014:	b29b      	uxth	r3, r3
 8005016:	f023 030f 	bic.w	r3, r3, #15
 800501a:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800501c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800501e:	085b      	lsrs	r3, r3, #1
 8005020:	b29b      	uxth	r3, r3
 8005022:	f003 0307 	and.w	r3, r3, #7
 8005026:	b29a      	uxth	r2, r3
 8005028:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800502a:	4313      	orrs	r3, r2
 800502c:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800502e:	697b      	ldr	r3, [r7, #20]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005034:	60da      	str	r2, [r3, #12]
 8005036:	e0b9      	b.n	80051ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800503e:	e0b5      	b.n	80051ac <UART_SetConfig+0xa94>
 8005040:	03d09000 	.word	0x03d09000
 8005044:	003d0900 	.word	0x003d0900
 8005048:	080064b8 	.word	0x080064b8
 800504c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005050:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005054:	2b20      	cmp	r3, #32
 8005056:	dc49      	bgt.n	80050ec <UART_SetConfig+0x9d4>
 8005058:	2b00      	cmp	r3, #0
 800505a:	db7c      	blt.n	8005156 <UART_SetConfig+0xa3e>
 800505c:	2b20      	cmp	r3, #32
 800505e:	d87a      	bhi.n	8005156 <UART_SetConfig+0xa3e>
 8005060:	a201      	add	r2, pc, #4	@ (adr r2, 8005068 <UART_SetConfig+0x950>)
 8005062:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005066:	bf00      	nop
 8005068:	080050f3 	.word	0x080050f3
 800506c:	080050fb 	.word	0x080050fb
 8005070:	08005157 	.word	0x08005157
 8005074:	08005157 	.word	0x08005157
 8005078:	08005103 	.word	0x08005103
 800507c:	08005157 	.word	0x08005157
 8005080:	08005157 	.word	0x08005157
 8005084:	08005157 	.word	0x08005157
 8005088:	08005113 	.word	0x08005113
 800508c:	08005157 	.word	0x08005157
 8005090:	08005157 	.word	0x08005157
 8005094:	08005157 	.word	0x08005157
 8005098:	08005157 	.word	0x08005157
 800509c:	08005157 	.word	0x08005157
 80050a0:	08005157 	.word	0x08005157
 80050a4:	08005157 	.word	0x08005157
 80050a8:	08005123 	.word	0x08005123
 80050ac:	08005157 	.word	0x08005157
 80050b0:	08005157 	.word	0x08005157
 80050b4:	08005157 	.word	0x08005157
 80050b8:	08005157 	.word	0x08005157
 80050bc:	08005157 	.word	0x08005157
 80050c0:	08005157 	.word	0x08005157
 80050c4:	08005157 	.word	0x08005157
 80050c8:	08005157 	.word	0x08005157
 80050cc:	08005157 	.word	0x08005157
 80050d0:	08005157 	.word	0x08005157
 80050d4:	08005157 	.word	0x08005157
 80050d8:	08005157 	.word	0x08005157
 80050dc:	08005157 	.word	0x08005157
 80050e0:	08005157 	.word	0x08005157
 80050e4:	08005157 	.word	0x08005157
 80050e8:	08005149 	.word	0x08005149
 80050ec:	2b40      	cmp	r3, #64	@ 0x40
 80050ee:	d02e      	beq.n	800514e <UART_SetConfig+0xa36>
 80050f0:	e031      	b.n	8005156 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050f2:	f7fd fcfb 	bl	8002aec <HAL_RCC_GetPCLK1Freq>
 80050f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80050f8:	e033      	b.n	8005162 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050fa:	f7fd fd0d 	bl	8002b18 <HAL_RCC_GetPCLK2Freq>
 80050fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005100:	e02f      	b.n	8005162 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005102:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005106:	4618      	mov	r0, r3
 8005108:	f7fd fd32 	bl	8002b70 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800510c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005110:	e027      	b.n	8005162 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005112:	f107 0318 	add.w	r3, r7, #24
 8005116:	4618      	mov	r0, r3
 8005118:	f7fd fe7e 	bl	8002e18 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005120:	e01f      	b.n	8005162 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005122:	4b2d      	ldr	r3, [pc, #180]	@ (80051d8 <UART_SetConfig+0xac0>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f003 0320 	and.w	r3, r3, #32
 800512a:	2b00      	cmp	r3, #0
 800512c:	d009      	beq.n	8005142 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800512e:	4b2a      	ldr	r3, [pc, #168]	@ (80051d8 <UART_SetConfig+0xac0>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	08db      	lsrs	r3, r3, #3
 8005134:	f003 0303 	and.w	r3, r3, #3
 8005138:	4a28      	ldr	r2, [pc, #160]	@ (80051dc <UART_SetConfig+0xac4>)
 800513a:	fa22 f303 	lsr.w	r3, r2, r3
 800513e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005140:	e00f      	b.n	8005162 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8005142:	4b26      	ldr	r3, [pc, #152]	@ (80051dc <UART_SetConfig+0xac4>)
 8005144:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005146:	e00c      	b.n	8005162 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005148:	4b25      	ldr	r3, [pc, #148]	@ (80051e0 <UART_SetConfig+0xac8>)
 800514a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800514c:	e009      	b.n	8005162 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800514e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005152:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005154:	e005      	b.n	8005162 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005156:	2300      	movs	r3, #0
 8005158:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800515a:	2301      	movs	r3, #1
 800515c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005160:	bf00      	nop
    }

    if (pclk != 0U)
 8005162:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005164:	2b00      	cmp	r3, #0
 8005166:	d021      	beq.n	80051ac <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516c:	4a1d      	ldr	r2, [pc, #116]	@ (80051e4 <UART_SetConfig+0xacc>)
 800516e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005172:	461a      	mov	r2, r3
 8005174:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005176:	fbb3 f2f2 	udiv	r2, r3, r2
 800517a:	697b      	ldr	r3, [r7, #20]
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	085b      	lsrs	r3, r3, #1
 8005180:	441a      	add	r2, r3
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	fbb2 f3f3 	udiv	r3, r2, r3
 800518a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800518c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800518e:	2b0f      	cmp	r3, #15
 8005190:	d909      	bls.n	80051a6 <UART_SetConfig+0xa8e>
 8005192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005194:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005198:	d205      	bcs.n	80051a6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800519a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800519c:	b29a      	uxth	r2, r3
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	60da      	str	r2, [r3, #12]
 80051a4:	e002      	b.n	80051ac <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	2201      	movs	r2, #1
 80051b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	2200      	movs	r2, #0
 80051c0:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80051c2:	697b      	ldr	r3, [r7, #20]
 80051c4:	2200      	movs	r2, #0
 80051c6:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80051c8:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3748      	adds	r7, #72	@ 0x48
 80051d0:	46bd      	mov	sp, r7
 80051d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051d6:	bf00      	nop
 80051d8:	58024400 	.word	0x58024400
 80051dc:	03d09000 	.word	0x03d09000
 80051e0:	003d0900 	.word	0x003d0900
 80051e4:	080064b8 	.word	0x080064b8

080051e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f4:	f003 0308 	and.w	r3, r3, #8
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00a      	beq.n	8005212 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	430a      	orrs	r2, r1
 8005210:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00a      	beq.n	8005234 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	430a      	orrs	r2, r1
 8005232:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005238:	f003 0302 	and.w	r3, r3, #2
 800523c:	2b00      	cmp	r3, #0
 800523e:	d00a      	beq.n	8005256 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	430a      	orrs	r2, r1
 8005254:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800525a:	f003 0304 	and.w	r3, r3, #4
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00a      	beq.n	8005278 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	430a      	orrs	r2, r1
 8005276:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527c:	f003 0310 	and.w	r3, r3, #16
 8005280:	2b00      	cmp	r3, #0
 8005282:	d00a      	beq.n	800529a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	430a      	orrs	r2, r1
 8005298:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529e:	f003 0320 	and.w	r3, r3, #32
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d00a      	beq.n	80052bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	430a      	orrs	r2, r1
 80052ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d01a      	beq.n	80052fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	430a      	orrs	r2, r1
 80052dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80052e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80052e6:	d10a      	bne.n	80052fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	430a      	orrs	r2, r1
 80052fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005306:	2b00      	cmp	r3, #0
 8005308:	d00a      	beq.n	8005320 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	430a      	orrs	r2, r1
 800531e:	605a      	str	r2, [r3, #4]
  }
}
 8005320:	bf00      	nop
 8005322:	370c      	adds	r7, #12
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b098      	sub	sp, #96	@ 0x60
 8005330:	af02      	add	r7, sp, #8
 8005332:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2200      	movs	r2, #0
 8005338:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800533c:	f7fc f890 	bl	8001460 <HAL_GetTick>
 8005340:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f003 0308 	and.w	r3, r3, #8
 800534c:	2b08      	cmp	r3, #8
 800534e:	d12f      	bne.n	80053b0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005350:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005354:	9300      	str	r3, [sp, #0]
 8005356:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005358:	2200      	movs	r2, #0
 800535a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f000 f88e 	bl	8005480 <UART_WaitOnFlagUntilTimeout>
 8005364:	4603      	mov	r3, r0
 8005366:	2b00      	cmp	r3, #0
 8005368:	d022      	beq.n	80053b0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005370:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005372:	e853 3f00 	ldrex	r3, [r3]
 8005376:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005378:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800537a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800537e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	461a      	mov	r2, r3
 8005386:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005388:	647b      	str	r3, [r7, #68]	@ 0x44
 800538a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800538c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800538e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005390:	e841 2300 	strex	r3, r2, [r1]
 8005394:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005396:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005398:	2b00      	cmp	r3, #0
 800539a:	d1e6      	bne.n	800536a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	2220      	movs	r2, #32
 80053a0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053ac:	2303      	movs	r3, #3
 80053ae:	e063      	b.n	8005478 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f003 0304 	and.w	r3, r3, #4
 80053ba:	2b04      	cmp	r3, #4
 80053bc:	d149      	bne.n	8005452 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80053be:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80053c2:	9300      	str	r3, [sp, #0]
 80053c4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80053c6:	2200      	movs	r2, #0
 80053c8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 f857 	bl	8005480 <UART_WaitOnFlagUntilTimeout>
 80053d2:	4603      	mov	r3, r0
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d03c      	beq.n	8005452 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	623b      	str	r3, [r7, #32]
   return(result);
 80053e6:	6a3b      	ldr	r3, [r7, #32]
 80053e8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	461a      	mov	r2, r3
 80053f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80053f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80053fc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e6      	bne.n	80053d8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	3308      	adds	r3, #8
 8005410:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	e853 3f00 	ldrex	r3, [r3]
 8005418:	60fb      	str	r3, [r7, #12]
   return(result);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	f023 0301 	bic.w	r3, r3, #1
 8005420:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	3308      	adds	r3, #8
 8005428:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800542a:	61fa      	str	r2, [r7, #28]
 800542c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542e:	69b9      	ldr	r1, [r7, #24]
 8005430:	69fa      	ldr	r2, [r7, #28]
 8005432:	e841 2300 	strex	r3, r2, [r1]
 8005436:	617b      	str	r3, [r7, #20]
   return(result);
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d1e5      	bne.n	800540a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2220      	movs	r2, #32
 8005442:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	2200      	movs	r2, #0
 800544a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e012      	b.n	8005478 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2220      	movs	r2, #32
 8005456:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2220      	movs	r2, #32
 800545e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2200      	movs	r2, #0
 8005466:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2200      	movs	r2, #0
 8005472:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005476:	2300      	movs	r3, #0
}
 8005478:	4618      	mov	r0, r3
 800547a:	3758      	adds	r7, #88	@ 0x58
 800547c:	46bd      	mov	sp, r7
 800547e:	bd80      	pop	{r7, pc}

08005480 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	603b      	str	r3, [r7, #0]
 800548c:	4613      	mov	r3, r2
 800548e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005490:	e04f      	b.n	8005532 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005498:	d04b      	beq.n	8005532 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800549a:	f7fb ffe1 	bl	8001460 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d302      	bcc.n	80054b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80054aa:	69bb      	ldr	r3, [r7, #24]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d101      	bne.n	80054b4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80054b0:	2303      	movs	r3, #3
 80054b2:	e04e      	b.n	8005552 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f003 0304 	and.w	r3, r3, #4
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d037      	beq.n	8005532 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054c2:	68bb      	ldr	r3, [r7, #8]
 80054c4:	2b80      	cmp	r3, #128	@ 0x80
 80054c6:	d034      	beq.n	8005532 <UART_WaitOnFlagUntilTimeout+0xb2>
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	2b40      	cmp	r3, #64	@ 0x40
 80054cc:	d031      	beq.n	8005532 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	69db      	ldr	r3, [r3, #28]
 80054d4:	f003 0308 	and.w	r3, r3, #8
 80054d8:	2b08      	cmp	r3, #8
 80054da:	d110      	bne.n	80054fe <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2208      	movs	r2, #8
 80054e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054e4:	68f8      	ldr	r0, [r7, #12]
 80054e6:	f000 f839 	bl	800555c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2208      	movs	r2, #8
 80054ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e029      	b.n	8005552 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	69db      	ldr	r3, [r3, #28]
 8005504:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005508:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800550c:	d111      	bne.n	8005532 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005516:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005518:	68f8      	ldr	r0, [r7, #12]
 800551a:	f000 f81f 	bl	800555c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	2220      	movs	r2, #32
 8005522:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2200      	movs	r2, #0
 800552a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800552e:	2303      	movs	r3, #3
 8005530:	e00f      	b.n	8005552 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	68bb      	ldr	r3, [r7, #8]
 800553a:	4013      	ands	r3, r2
 800553c:	68ba      	ldr	r2, [r7, #8]
 800553e:	429a      	cmp	r2, r3
 8005540:	bf0c      	ite	eq
 8005542:	2301      	moveq	r3, #1
 8005544:	2300      	movne	r3, #0
 8005546:	b2db      	uxtb	r3, r3
 8005548:	461a      	mov	r2, r3
 800554a:	79fb      	ldrb	r3, [r7, #7]
 800554c:	429a      	cmp	r2, r3
 800554e:	d0a0      	beq.n	8005492 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005550:	2300      	movs	r3, #0
}
 8005552:	4618      	mov	r0, r3
 8005554:	3710      	adds	r7, #16
 8005556:	46bd      	mov	sp, r7
 8005558:	bd80      	pop	{r7, pc}
	...

0800555c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800555c:	b480      	push	{r7}
 800555e:	b095      	sub	sp, #84	@ 0x54
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800556a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800556c:	e853 3f00 	ldrex	r3, [r3]
 8005570:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005574:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005578:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	461a      	mov	r2, r3
 8005580:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005582:	643b      	str	r3, [r7, #64]	@ 0x40
 8005584:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005586:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005588:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800558a:	e841 2300 	strex	r3, r2, [r1]
 800558e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005592:	2b00      	cmp	r3, #0
 8005594:	d1e6      	bne.n	8005564 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	3308      	adds	r3, #8
 800559c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	6a3b      	ldr	r3, [r7, #32]
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	61fb      	str	r3, [r7, #28]
   return(result);
 80055a6:	69fa      	ldr	r2, [r7, #28]
 80055a8:	4b1e      	ldr	r3, [pc, #120]	@ (8005624 <UART_EndRxTransfer+0xc8>)
 80055aa:	4013      	ands	r3, r2
 80055ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	3308      	adds	r3, #8
 80055b4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80055b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055b8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80055bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80055be:	e841 2300 	strex	r3, r2, [r1]
 80055c2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80055c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1e5      	bne.n	8005596 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d118      	bne.n	8005604 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	e853 3f00 	ldrex	r3, [r3]
 80055de:	60bb      	str	r3, [r7, #8]
   return(result);
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	f023 0310 	bic.w	r3, r3, #16
 80055e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	461a      	mov	r2, r3
 80055ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80055f0:	61bb      	str	r3, [r7, #24]
 80055f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055f4:	6979      	ldr	r1, [r7, #20]
 80055f6:	69ba      	ldr	r2, [r7, #24]
 80055f8:	e841 2300 	strex	r3, r2, [r1]
 80055fc:	613b      	str	r3, [r7, #16]
   return(result);
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d1e6      	bne.n	80055d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2220      	movs	r2, #32
 8005608:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	2200      	movs	r2, #0
 8005616:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005618:	bf00      	nop
 800561a:	3754      	adds	r7, #84	@ 0x54
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr
 8005624:	effffffe 	.word	0xeffffffe

08005628 <std>:
 8005628:	2300      	movs	r3, #0
 800562a:	b510      	push	{r4, lr}
 800562c:	4604      	mov	r4, r0
 800562e:	e9c0 3300 	strd	r3, r3, [r0]
 8005632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005636:	6083      	str	r3, [r0, #8]
 8005638:	8181      	strh	r1, [r0, #12]
 800563a:	6643      	str	r3, [r0, #100]	@ 0x64
 800563c:	81c2      	strh	r2, [r0, #14]
 800563e:	6183      	str	r3, [r0, #24]
 8005640:	4619      	mov	r1, r3
 8005642:	2208      	movs	r2, #8
 8005644:	305c      	adds	r0, #92	@ 0x5c
 8005646:	f000 f906 	bl	8005856 <memset>
 800564a:	4b0d      	ldr	r3, [pc, #52]	@ (8005680 <std+0x58>)
 800564c:	6263      	str	r3, [r4, #36]	@ 0x24
 800564e:	4b0d      	ldr	r3, [pc, #52]	@ (8005684 <std+0x5c>)
 8005650:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005652:	4b0d      	ldr	r3, [pc, #52]	@ (8005688 <std+0x60>)
 8005654:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005656:	4b0d      	ldr	r3, [pc, #52]	@ (800568c <std+0x64>)
 8005658:	6323      	str	r3, [r4, #48]	@ 0x30
 800565a:	4b0d      	ldr	r3, [pc, #52]	@ (8005690 <std+0x68>)
 800565c:	6224      	str	r4, [r4, #32]
 800565e:	429c      	cmp	r4, r3
 8005660:	d006      	beq.n	8005670 <std+0x48>
 8005662:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005666:	4294      	cmp	r4, r2
 8005668:	d002      	beq.n	8005670 <std+0x48>
 800566a:	33d0      	adds	r3, #208	@ 0xd0
 800566c:	429c      	cmp	r4, r3
 800566e:	d105      	bne.n	800567c <std+0x54>
 8005670:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005678:	f000 b966 	b.w	8005948 <__retarget_lock_init_recursive>
 800567c:	bd10      	pop	{r4, pc}
 800567e:	bf00      	nop
 8005680:	080057d1 	.word	0x080057d1
 8005684:	080057f3 	.word	0x080057f3
 8005688:	0800582b 	.word	0x0800582b
 800568c:	0800584f 	.word	0x0800584f
 8005690:	240001d4 	.word	0x240001d4

08005694 <stdio_exit_handler>:
 8005694:	4a02      	ldr	r2, [pc, #8]	@ (80056a0 <stdio_exit_handler+0xc>)
 8005696:	4903      	ldr	r1, [pc, #12]	@ (80056a4 <stdio_exit_handler+0x10>)
 8005698:	4803      	ldr	r0, [pc, #12]	@ (80056a8 <stdio_exit_handler+0x14>)
 800569a:	f000 b869 	b.w	8005770 <_fwalk_sglue>
 800569e:	bf00      	nop
 80056a0:	24000014 	.word	0x24000014
 80056a4:	080061e5 	.word	0x080061e5
 80056a8:	24000024 	.word	0x24000024

080056ac <cleanup_stdio>:
 80056ac:	6841      	ldr	r1, [r0, #4]
 80056ae:	4b0c      	ldr	r3, [pc, #48]	@ (80056e0 <cleanup_stdio+0x34>)
 80056b0:	4299      	cmp	r1, r3
 80056b2:	b510      	push	{r4, lr}
 80056b4:	4604      	mov	r4, r0
 80056b6:	d001      	beq.n	80056bc <cleanup_stdio+0x10>
 80056b8:	f000 fd94 	bl	80061e4 <_fflush_r>
 80056bc:	68a1      	ldr	r1, [r4, #8]
 80056be:	4b09      	ldr	r3, [pc, #36]	@ (80056e4 <cleanup_stdio+0x38>)
 80056c0:	4299      	cmp	r1, r3
 80056c2:	d002      	beq.n	80056ca <cleanup_stdio+0x1e>
 80056c4:	4620      	mov	r0, r4
 80056c6:	f000 fd8d 	bl	80061e4 <_fflush_r>
 80056ca:	68e1      	ldr	r1, [r4, #12]
 80056cc:	4b06      	ldr	r3, [pc, #24]	@ (80056e8 <cleanup_stdio+0x3c>)
 80056ce:	4299      	cmp	r1, r3
 80056d0:	d004      	beq.n	80056dc <cleanup_stdio+0x30>
 80056d2:	4620      	mov	r0, r4
 80056d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056d8:	f000 bd84 	b.w	80061e4 <_fflush_r>
 80056dc:	bd10      	pop	{r4, pc}
 80056de:	bf00      	nop
 80056e0:	240001d4 	.word	0x240001d4
 80056e4:	2400023c 	.word	0x2400023c
 80056e8:	240002a4 	.word	0x240002a4

080056ec <global_stdio_init.part.0>:
 80056ec:	b510      	push	{r4, lr}
 80056ee:	4b0b      	ldr	r3, [pc, #44]	@ (800571c <global_stdio_init.part.0+0x30>)
 80056f0:	4c0b      	ldr	r4, [pc, #44]	@ (8005720 <global_stdio_init.part.0+0x34>)
 80056f2:	4a0c      	ldr	r2, [pc, #48]	@ (8005724 <global_stdio_init.part.0+0x38>)
 80056f4:	601a      	str	r2, [r3, #0]
 80056f6:	4620      	mov	r0, r4
 80056f8:	2200      	movs	r2, #0
 80056fa:	2104      	movs	r1, #4
 80056fc:	f7ff ff94 	bl	8005628 <std>
 8005700:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005704:	2201      	movs	r2, #1
 8005706:	2109      	movs	r1, #9
 8005708:	f7ff ff8e 	bl	8005628 <std>
 800570c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005710:	2202      	movs	r2, #2
 8005712:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005716:	2112      	movs	r1, #18
 8005718:	f7ff bf86 	b.w	8005628 <std>
 800571c:	2400030c 	.word	0x2400030c
 8005720:	240001d4 	.word	0x240001d4
 8005724:	08005695 	.word	0x08005695

08005728 <__sfp_lock_acquire>:
 8005728:	4801      	ldr	r0, [pc, #4]	@ (8005730 <__sfp_lock_acquire+0x8>)
 800572a:	f000 b90e 	b.w	800594a <__retarget_lock_acquire_recursive>
 800572e:	bf00      	nop
 8005730:	24000315 	.word	0x24000315

08005734 <__sfp_lock_release>:
 8005734:	4801      	ldr	r0, [pc, #4]	@ (800573c <__sfp_lock_release+0x8>)
 8005736:	f000 b909 	b.w	800594c <__retarget_lock_release_recursive>
 800573a:	bf00      	nop
 800573c:	24000315 	.word	0x24000315

08005740 <__sinit>:
 8005740:	b510      	push	{r4, lr}
 8005742:	4604      	mov	r4, r0
 8005744:	f7ff fff0 	bl	8005728 <__sfp_lock_acquire>
 8005748:	6a23      	ldr	r3, [r4, #32]
 800574a:	b11b      	cbz	r3, 8005754 <__sinit+0x14>
 800574c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005750:	f7ff bff0 	b.w	8005734 <__sfp_lock_release>
 8005754:	4b04      	ldr	r3, [pc, #16]	@ (8005768 <__sinit+0x28>)
 8005756:	6223      	str	r3, [r4, #32]
 8005758:	4b04      	ldr	r3, [pc, #16]	@ (800576c <__sinit+0x2c>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d1f5      	bne.n	800574c <__sinit+0xc>
 8005760:	f7ff ffc4 	bl	80056ec <global_stdio_init.part.0>
 8005764:	e7f2      	b.n	800574c <__sinit+0xc>
 8005766:	bf00      	nop
 8005768:	080056ad 	.word	0x080056ad
 800576c:	2400030c 	.word	0x2400030c

08005770 <_fwalk_sglue>:
 8005770:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005774:	4607      	mov	r7, r0
 8005776:	4688      	mov	r8, r1
 8005778:	4614      	mov	r4, r2
 800577a:	2600      	movs	r6, #0
 800577c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005780:	f1b9 0901 	subs.w	r9, r9, #1
 8005784:	d505      	bpl.n	8005792 <_fwalk_sglue+0x22>
 8005786:	6824      	ldr	r4, [r4, #0]
 8005788:	2c00      	cmp	r4, #0
 800578a:	d1f7      	bne.n	800577c <_fwalk_sglue+0xc>
 800578c:	4630      	mov	r0, r6
 800578e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005792:	89ab      	ldrh	r3, [r5, #12]
 8005794:	2b01      	cmp	r3, #1
 8005796:	d907      	bls.n	80057a8 <_fwalk_sglue+0x38>
 8005798:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800579c:	3301      	adds	r3, #1
 800579e:	d003      	beq.n	80057a8 <_fwalk_sglue+0x38>
 80057a0:	4629      	mov	r1, r5
 80057a2:	4638      	mov	r0, r7
 80057a4:	47c0      	blx	r8
 80057a6:	4306      	orrs	r6, r0
 80057a8:	3568      	adds	r5, #104	@ 0x68
 80057aa:	e7e9      	b.n	8005780 <_fwalk_sglue+0x10>

080057ac <iprintf>:
 80057ac:	b40f      	push	{r0, r1, r2, r3}
 80057ae:	b507      	push	{r0, r1, r2, lr}
 80057b0:	4906      	ldr	r1, [pc, #24]	@ (80057cc <iprintf+0x20>)
 80057b2:	ab04      	add	r3, sp, #16
 80057b4:	6808      	ldr	r0, [r1, #0]
 80057b6:	f853 2b04 	ldr.w	r2, [r3], #4
 80057ba:	6881      	ldr	r1, [r0, #8]
 80057bc:	9301      	str	r3, [sp, #4]
 80057be:	f000 f9e9 	bl	8005b94 <_vfiprintf_r>
 80057c2:	b003      	add	sp, #12
 80057c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80057c8:	b004      	add	sp, #16
 80057ca:	4770      	bx	lr
 80057cc:	24000020 	.word	0x24000020

080057d0 <__sread>:
 80057d0:	b510      	push	{r4, lr}
 80057d2:	460c      	mov	r4, r1
 80057d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057d8:	f000 f868 	bl	80058ac <_read_r>
 80057dc:	2800      	cmp	r0, #0
 80057de:	bfab      	itete	ge
 80057e0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80057e2:	89a3      	ldrhlt	r3, [r4, #12]
 80057e4:	181b      	addge	r3, r3, r0
 80057e6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80057ea:	bfac      	ite	ge
 80057ec:	6563      	strge	r3, [r4, #84]	@ 0x54
 80057ee:	81a3      	strhlt	r3, [r4, #12]
 80057f0:	bd10      	pop	{r4, pc}

080057f2 <__swrite>:
 80057f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057f6:	461f      	mov	r7, r3
 80057f8:	898b      	ldrh	r3, [r1, #12]
 80057fa:	05db      	lsls	r3, r3, #23
 80057fc:	4605      	mov	r5, r0
 80057fe:	460c      	mov	r4, r1
 8005800:	4616      	mov	r6, r2
 8005802:	d505      	bpl.n	8005810 <__swrite+0x1e>
 8005804:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005808:	2302      	movs	r3, #2
 800580a:	2200      	movs	r2, #0
 800580c:	f000 f83c 	bl	8005888 <_lseek_r>
 8005810:	89a3      	ldrh	r3, [r4, #12]
 8005812:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005816:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800581a:	81a3      	strh	r3, [r4, #12]
 800581c:	4632      	mov	r2, r6
 800581e:	463b      	mov	r3, r7
 8005820:	4628      	mov	r0, r5
 8005822:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005826:	f000 b853 	b.w	80058d0 <_write_r>

0800582a <__sseek>:
 800582a:	b510      	push	{r4, lr}
 800582c:	460c      	mov	r4, r1
 800582e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005832:	f000 f829 	bl	8005888 <_lseek_r>
 8005836:	1c43      	adds	r3, r0, #1
 8005838:	89a3      	ldrh	r3, [r4, #12]
 800583a:	bf15      	itete	ne
 800583c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800583e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005842:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005846:	81a3      	strheq	r3, [r4, #12]
 8005848:	bf18      	it	ne
 800584a:	81a3      	strhne	r3, [r4, #12]
 800584c:	bd10      	pop	{r4, pc}

0800584e <__sclose>:
 800584e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005852:	f000 b809 	b.w	8005868 <_close_r>

08005856 <memset>:
 8005856:	4402      	add	r2, r0
 8005858:	4603      	mov	r3, r0
 800585a:	4293      	cmp	r3, r2
 800585c:	d100      	bne.n	8005860 <memset+0xa>
 800585e:	4770      	bx	lr
 8005860:	f803 1b01 	strb.w	r1, [r3], #1
 8005864:	e7f9      	b.n	800585a <memset+0x4>
	...

08005868 <_close_r>:
 8005868:	b538      	push	{r3, r4, r5, lr}
 800586a:	4d06      	ldr	r5, [pc, #24]	@ (8005884 <_close_r+0x1c>)
 800586c:	2300      	movs	r3, #0
 800586e:	4604      	mov	r4, r0
 8005870:	4608      	mov	r0, r1
 8005872:	602b      	str	r3, [r5, #0]
 8005874:	f7fb fc02 	bl	800107c <_close>
 8005878:	1c43      	adds	r3, r0, #1
 800587a:	d102      	bne.n	8005882 <_close_r+0x1a>
 800587c:	682b      	ldr	r3, [r5, #0]
 800587e:	b103      	cbz	r3, 8005882 <_close_r+0x1a>
 8005880:	6023      	str	r3, [r4, #0]
 8005882:	bd38      	pop	{r3, r4, r5, pc}
 8005884:	24000310 	.word	0x24000310

08005888 <_lseek_r>:
 8005888:	b538      	push	{r3, r4, r5, lr}
 800588a:	4d07      	ldr	r5, [pc, #28]	@ (80058a8 <_lseek_r+0x20>)
 800588c:	4604      	mov	r4, r0
 800588e:	4608      	mov	r0, r1
 8005890:	4611      	mov	r1, r2
 8005892:	2200      	movs	r2, #0
 8005894:	602a      	str	r2, [r5, #0]
 8005896:	461a      	mov	r2, r3
 8005898:	f7fb fc17 	bl	80010ca <_lseek>
 800589c:	1c43      	adds	r3, r0, #1
 800589e:	d102      	bne.n	80058a6 <_lseek_r+0x1e>
 80058a0:	682b      	ldr	r3, [r5, #0]
 80058a2:	b103      	cbz	r3, 80058a6 <_lseek_r+0x1e>
 80058a4:	6023      	str	r3, [r4, #0]
 80058a6:	bd38      	pop	{r3, r4, r5, pc}
 80058a8:	24000310 	.word	0x24000310

080058ac <_read_r>:
 80058ac:	b538      	push	{r3, r4, r5, lr}
 80058ae:	4d07      	ldr	r5, [pc, #28]	@ (80058cc <_read_r+0x20>)
 80058b0:	4604      	mov	r4, r0
 80058b2:	4608      	mov	r0, r1
 80058b4:	4611      	mov	r1, r2
 80058b6:	2200      	movs	r2, #0
 80058b8:	602a      	str	r2, [r5, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	f7fb fba5 	bl	800100a <_read>
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	d102      	bne.n	80058ca <_read_r+0x1e>
 80058c4:	682b      	ldr	r3, [r5, #0]
 80058c6:	b103      	cbz	r3, 80058ca <_read_r+0x1e>
 80058c8:	6023      	str	r3, [r4, #0]
 80058ca:	bd38      	pop	{r3, r4, r5, pc}
 80058cc:	24000310 	.word	0x24000310

080058d0 <_write_r>:
 80058d0:	b538      	push	{r3, r4, r5, lr}
 80058d2:	4d07      	ldr	r5, [pc, #28]	@ (80058f0 <_write_r+0x20>)
 80058d4:	4604      	mov	r4, r0
 80058d6:	4608      	mov	r0, r1
 80058d8:	4611      	mov	r1, r2
 80058da:	2200      	movs	r2, #0
 80058dc:	602a      	str	r2, [r5, #0]
 80058de:	461a      	mov	r2, r3
 80058e0:	f7fb fbb0 	bl	8001044 <_write>
 80058e4:	1c43      	adds	r3, r0, #1
 80058e6:	d102      	bne.n	80058ee <_write_r+0x1e>
 80058e8:	682b      	ldr	r3, [r5, #0]
 80058ea:	b103      	cbz	r3, 80058ee <_write_r+0x1e>
 80058ec:	6023      	str	r3, [r4, #0]
 80058ee:	bd38      	pop	{r3, r4, r5, pc}
 80058f0:	24000310 	.word	0x24000310

080058f4 <__errno>:
 80058f4:	4b01      	ldr	r3, [pc, #4]	@ (80058fc <__errno+0x8>)
 80058f6:	6818      	ldr	r0, [r3, #0]
 80058f8:	4770      	bx	lr
 80058fa:	bf00      	nop
 80058fc:	24000020 	.word	0x24000020

08005900 <__libc_init_array>:
 8005900:	b570      	push	{r4, r5, r6, lr}
 8005902:	4d0d      	ldr	r5, [pc, #52]	@ (8005938 <__libc_init_array+0x38>)
 8005904:	4c0d      	ldr	r4, [pc, #52]	@ (800593c <__libc_init_array+0x3c>)
 8005906:	1b64      	subs	r4, r4, r5
 8005908:	10a4      	asrs	r4, r4, #2
 800590a:	2600      	movs	r6, #0
 800590c:	42a6      	cmp	r6, r4
 800590e:	d109      	bne.n	8005924 <__libc_init_array+0x24>
 8005910:	4d0b      	ldr	r5, [pc, #44]	@ (8005940 <__libc_init_array+0x40>)
 8005912:	4c0c      	ldr	r4, [pc, #48]	@ (8005944 <__libc_init_array+0x44>)
 8005914:	f000 fdb6 	bl	8006484 <_init>
 8005918:	1b64      	subs	r4, r4, r5
 800591a:	10a4      	asrs	r4, r4, #2
 800591c:	2600      	movs	r6, #0
 800591e:	42a6      	cmp	r6, r4
 8005920:	d105      	bne.n	800592e <__libc_init_array+0x2e>
 8005922:	bd70      	pop	{r4, r5, r6, pc}
 8005924:	f855 3b04 	ldr.w	r3, [r5], #4
 8005928:	4798      	blx	r3
 800592a:	3601      	adds	r6, #1
 800592c:	e7ee      	b.n	800590c <__libc_init_array+0xc>
 800592e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005932:	4798      	blx	r3
 8005934:	3601      	adds	r6, #1
 8005936:	e7f2      	b.n	800591e <__libc_init_array+0x1e>
 8005938:	0800650c 	.word	0x0800650c
 800593c:	0800650c 	.word	0x0800650c
 8005940:	0800650c 	.word	0x0800650c
 8005944:	08006510 	.word	0x08006510

08005948 <__retarget_lock_init_recursive>:
 8005948:	4770      	bx	lr

0800594a <__retarget_lock_acquire_recursive>:
 800594a:	4770      	bx	lr

0800594c <__retarget_lock_release_recursive>:
 800594c:	4770      	bx	lr
	...

08005950 <_free_r>:
 8005950:	b538      	push	{r3, r4, r5, lr}
 8005952:	4605      	mov	r5, r0
 8005954:	2900      	cmp	r1, #0
 8005956:	d041      	beq.n	80059dc <_free_r+0x8c>
 8005958:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800595c:	1f0c      	subs	r4, r1, #4
 800595e:	2b00      	cmp	r3, #0
 8005960:	bfb8      	it	lt
 8005962:	18e4      	addlt	r4, r4, r3
 8005964:	f000 f8e0 	bl	8005b28 <__malloc_lock>
 8005968:	4a1d      	ldr	r2, [pc, #116]	@ (80059e0 <_free_r+0x90>)
 800596a:	6813      	ldr	r3, [r2, #0]
 800596c:	b933      	cbnz	r3, 800597c <_free_r+0x2c>
 800596e:	6063      	str	r3, [r4, #4]
 8005970:	6014      	str	r4, [r2, #0]
 8005972:	4628      	mov	r0, r5
 8005974:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005978:	f000 b8dc 	b.w	8005b34 <__malloc_unlock>
 800597c:	42a3      	cmp	r3, r4
 800597e:	d908      	bls.n	8005992 <_free_r+0x42>
 8005980:	6820      	ldr	r0, [r4, #0]
 8005982:	1821      	adds	r1, r4, r0
 8005984:	428b      	cmp	r3, r1
 8005986:	bf01      	itttt	eq
 8005988:	6819      	ldreq	r1, [r3, #0]
 800598a:	685b      	ldreq	r3, [r3, #4]
 800598c:	1809      	addeq	r1, r1, r0
 800598e:	6021      	streq	r1, [r4, #0]
 8005990:	e7ed      	b.n	800596e <_free_r+0x1e>
 8005992:	461a      	mov	r2, r3
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	b10b      	cbz	r3, 800599c <_free_r+0x4c>
 8005998:	42a3      	cmp	r3, r4
 800599a:	d9fa      	bls.n	8005992 <_free_r+0x42>
 800599c:	6811      	ldr	r1, [r2, #0]
 800599e:	1850      	adds	r0, r2, r1
 80059a0:	42a0      	cmp	r0, r4
 80059a2:	d10b      	bne.n	80059bc <_free_r+0x6c>
 80059a4:	6820      	ldr	r0, [r4, #0]
 80059a6:	4401      	add	r1, r0
 80059a8:	1850      	adds	r0, r2, r1
 80059aa:	4283      	cmp	r3, r0
 80059ac:	6011      	str	r1, [r2, #0]
 80059ae:	d1e0      	bne.n	8005972 <_free_r+0x22>
 80059b0:	6818      	ldr	r0, [r3, #0]
 80059b2:	685b      	ldr	r3, [r3, #4]
 80059b4:	6053      	str	r3, [r2, #4]
 80059b6:	4408      	add	r0, r1
 80059b8:	6010      	str	r0, [r2, #0]
 80059ba:	e7da      	b.n	8005972 <_free_r+0x22>
 80059bc:	d902      	bls.n	80059c4 <_free_r+0x74>
 80059be:	230c      	movs	r3, #12
 80059c0:	602b      	str	r3, [r5, #0]
 80059c2:	e7d6      	b.n	8005972 <_free_r+0x22>
 80059c4:	6820      	ldr	r0, [r4, #0]
 80059c6:	1821      	adds	r1, r4, r0
 80059c8:	428b      	cmp	r3, r1
 80059ca:	bf04      	itt	eq
 80059cc:	6819      	ldreq	r1, [r3, #0]
 80059ce:	685b      	ldreq	r3, [r3, #4]
 80059d0:	6063      	str	r3, [r4, #4]
 80059d2:	bf04      	itt	eq
 80059d4:	1809      	addeq	r1, r1, r0
 80059d6:	6021      	streq	r1, [r4, #0]
 80059d8:	6054      	str	r4, [r2, #4]
 80059da:	e7ca      	b.n	8005972 <_free_r+0x22>
 80059dc:	bd38      	pop	{r3, r4, r5, pc}
 80059de:	bf00      	nop
 80059e0:	2400031c 	.word	0x2400031c

080059e4 <sbrk_aligned>:
 80059e4:	b570      	push	{r4, r5, r6, lr}
 80059e6:	4e0f      	ldr	r6, [pc, #60]	@ (8005a24 <sbrk_aligned+0x40>)
 80059e8:	460c      	mov	r4, r1
 80059ea:	6831      	ldr	r1, [r6, #0]
 80059ec:	4605      	mov	r5, r0
 80059ee:	b911      	cbnz	r1, 80059f6 <sbrk_aligned+0x12>
 80059f0:	f000 fcb4 	bl	800635c <_sbrk_r>
 80059f4:	6030      	str	r0, [r6, #0]
 80059f6:	4621      	mov	r1, r4
 80059f8:	4628      	mov	r0, r5
 80059fa:	f000 fcaf 	bl	800635c <_sbrk_r>
 80059fe:	1c43      	adds	r3, r0, #1
 8005a00:	d103      	bne.n	8005a0a <sbrk_aligned+0x26>
 8005a02:	f04f 34ff 	mov.w	r4, #4294967295
 8005a06:	4620      	mov	r0, r4
 8005a08:	bd70      	pop	{r4, r5, r6, pc}
 8005a0a:	1cc4      	adds	r4, r0, #3
 8005a0c:	f024 0403 	bic.w	r4, r4, #3
 8005a10:	42a0      	cmp	r0, r4
 8005a12:	d0f8      	beq.n	8005a06 <sbrk_aligned+0x22>
 8005a14:	1a21      	subs	r1, r4, r0
 8005a16:	4628      	mov	r0, r5
 8005a18:	f000 fca0 	bl	800635c <_sbrk_r>
 8005a1c:	3001      	adds	r0, #1
 8005a1e:	d1f2      	bne.n	8005a06 <sbrk_aligned+0x22>
 8005a20:	e7ef      	b.n	8005a02 <sbrk_aligned+0x1e>
 8005a22:	bf00      	nop
 8005a24:	24000318 	.word	0x24000318

08005a28 <_malloc_r>:
 8005a28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a2c:	1ccd      	adds	r5, r1, #3
 8005a2e:	f025 0503 	bic.w	r5, r5, #3
 8005a32:	3508      	adds	r5, #8
 8005a34:	2d0c      	cmp	r5, #12
 8005a36:	bf38      	it	cc
 8005a38:	250c      	movcc	r5, #12
 8005a3a:	2d00      	cmp	r5, #0
 8005a3c:	4606      	mov	r6, r0
 8005a3e:	db01      	blt.n	8005a44 <_malloc_r+0x1c>
 8005a40:	42a9      	cmp	r1, r5
 8005a42:	d904      	bls.n	8005a4e <_malloc_r+0x26>
 8005a44:	230c      	movs	r3, #12
 8005a46:	6033      	str	r3, [r6, #0]
 8005a48:	2000      	movs	r0, #0
 8005a4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005a4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005b24 <_malloc_r+0xfc>
 8005a52:	f000 f869 	bl	8005b28 <__malloc_lock>
 8005a56:	f8d8 3000 	ldr.w	r3, [r8]
 8005a5a:	461c      	mov	r4, r3
 8005a5c:	bb44      	cbnz	r4, 8005ab0 <_malloc_r+0x88>
 8005a5e:	4629      	mov	r1, r5
 8005a60:	4630      	mov	r0, r6
 8005a62:	f7ff ffbf 	bl	80059e4 <sbrk_aligned>
 8005a66:	1c43      	adds	r3, r0, #1
 8005a68:	4604      	mov	r4, r0
 8005a6a:	d158      	bne.n	8005b1e <_malloc_r+0xf6>
 8005a6c:	f8d8 4000 	ldr.w	r4, [r8]
 8005a70:	4627      	mov	r7, r4
 8005a72:	2f00      	cmp	r7, #0
 8005a74:	d143      	bne.n	8005afe <_malloc_r+0xd6>
 8005a76:	2c00      	cmp	r4, #0
 8005a78:	d04b      	beq.n	8005b12 <_malloc_r+0xea>
 8005a7a:	6823      	ldr	r3, [r4, #0]
 8005a7c:	4639      	mov	r1, r7
 8005a7e:	4630      	mov	r0, r6
 8005a80:	eb04 0903 	add.w	r9, r4, r3
 8005a84:	f000 fc6a 	bl	800635c <_sbrk_r>
 8005a88:	4581      	cmp	r9, r0
 8005a8a:	d142      	bne.n	8005b12 <_malloc_r+0xea>
 8005a8c:	6821      	ldr	r1, [r4, #0]
 8005a8e:	1a6d      	subs	r5, r5, r1
 8005a90:	4629      	mov	r1, r5
 8005a92:	4630      	mov	r0, r6
 8005a94:	f7ff ffa6 	bl	80059e4 <sbrk_aligned>
 8005a98:	3001      	adds	r0, #1
 8005a9a:	d03a      	beq.n	8005b12 <_malloc_r+0xea>
 8005a9c:	6823      	ldr	r3, [r4, #0]
 8005a9e:	442b      	add	r3, r5
 8005aa0:	6023      	str	r3, [r4, #0]
 8005aa2:	f8d8 3000 	ldr.w	r3, [r8]
 8005aa6:	685a      	ldr	r2, [r3, #4]
 8005aa8:	bb62      	cbnz	r2, 8005b04 <_malloc_r+0xdc>
 8005aaa:	f8c8 7000 	str.w	r7, [r8]
 8005aae:	e00f      	b.n	8005ad0 <_malloc_r+0xa8>
 8005ab0:	6822      	ldr	r2, [r4, #0]
 8005ab2:	1b52      	subs	r2, r2, r5
 8005ab4:	d420      	bmi.n	8005af8 <_malloc_r+0xd0>
 8005ab6:	2a0b      	cmp	r2, #11
 8005ab8:	d917      	bls.n	8005aea <_malloc_r+0xc2>
 8005aba:	1961      	adds	r1, r4, r5
 8005abc:	42a3      	cmp	r3, r4
 8005abe:	6025      	str	r5, [r4, #0]
 8005ac0:	bf18      	it	ne
 8005ac2:	6059      	strne	r1, [r3, #4]
 8005ac4:	6863      	ldr	r3, [r4, #4]
 8005ac6:	bf08      	it	eq
 8005ac8:	f8c8 1000 	streq.w	r1, [r8]
 8005acc:	5162      	str	r2, [r4, r5]
 8005ace:	604b      	str	r3, [r1, #4]
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	f000 f82f 	bl	8005b34 <__malloc_unlock>
 8005ad6:	f104 000b 	add.w	r0, r4, #11
 8005ada:	1d23      	adds	r3, r4, #4
 8005adc:	f020 0007 	bic.w	r0, r0, #7
 8005ae0:	1ac2      	subs	r2, r0, r3
 8005ae2:	bf1c      	itt	ne
 8005ae4:	1a1b      	subne	r3, r3, r0
 8005ae6:	50a3      	strne	r3, [r4, r2]
 8005ae8:	e7af      	b.n	8005a4a <_malloc_r+0x22>
 8005aea:	6862      	ldr	r2, [r4, #4]
 8005aec:	42a3      	cmp	r3, r4
 8005aee:	bf0c      	ite	eq
 8005af0:	f8c8 2000 	streq.w	r2, [r8]
 8005af4:	605a      	strne	r2, [r3, #4]
 8005af6:	e7eb      	b.n	8005ad0 <_malloc_r+0xa8>
 8005af8:	4623      	mov	r3, r4
 8005afa:	6864      	ldr	r4, [r4, #4]
 8005afc:	e7ae      	b.n	8005a5c <_malloc_r+0x34>
 8005afe:	463c      	mov	r4, r7
 8005b00:	687f      	ldr	r7, [r7, #4]
 8005b02:	e7b6      	b.n	8005a72 <_malloc_r+0x4a>
 8005b04:	461a      	mov	r2, r3
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	42a3      	cmp	r3, r4
 8005b0a:	d1fb      	bne.n	8005b04 <_malloc_r+0xdc>
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	6053      	str	r3, [r2, #4]
 8005b10:	e7de      	b.n	8005ad0 <_malloc_r+0xa8>
 8005b12:	230c      	movs	r3, #12
 8005b14:	6033      	str	r3, [r6, #0]
 8005b16:	4630      	mov	r0, r6
 8005b18:	f000 f80c 	bl	8005b34 <__malloc_unlock>
 8005b1c:	e794      	b.n	8005a48 <_malloc_r+0x20>
 8005b1e:	6005      	str	r5, [r0, #0]
 8005b20:	e7d6      	b.n	8005ad0 <_malloc_r+0xa8>
 8005b22:	bf00      	nop
 8005b24:	2400031c 	.word	0x2400031c

08005b28 <__malloc_lock>:
 8005b28:	4801      	ldr	r0, [pc, #4]	@ (8005b30 <__malloc_lock+0x8>)
 8005b2a:	f7ff bf0e 	b.w	800594a <__retarget_lock_acquire_recursive>
 8005b2e:	bf00      	nop
 8005b30:	24000314 	.word	0x24000314

08005b34 <__malloc_unlock>:
 8005b34:	4801      	ldr	r0, [pc, #4]	@ (8005b3c <__malloc_unlock+0x8>)
 8005b36:	f7ff bf09 	b.w	800594c <__retarget_lock_release_recursive>
 8005b3a:	bf00      	nop
 8005b3c:	24000314 	.word	0x24000314

08005b40 <__sfputc_r>:
 8005b40:	6893      	ldr	r3, [r2, #8]
 8005b42:	3b01      	subs	r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	b410      	push	{r4}
 8005b48:	6093      	str	r3, [r2, #8]
 8005b4a:	da08      	bge.n	8005b5e <__sfputc_r+0x1e>
 8005b4c:	6994      	ldr	r4, [r2, #24]
 8005b4e:	42a3      	cmp	r3, r4
 8005b50:	db01      	blt.n	8005b56 <__sfputc_r+0x16>
 8005b52:	290a      	cmp	r1, #10
 8005b54:	d103      	bne.n	8005b5e <__sfputc_r+0x1e>
 8005b56:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b5a:	f000 bb6b 	b.w	8006234 <__swbuf_r>
 8005b5e:	6813      	ldr	r3, [r2, #0]
 8005b60:	1c58      	adds	r0, r3, #1
 8005b62:	6010      	str	r0, [r2, #0]
 8005b64:	7019      	strb	r1, [r3, #0]
 8005b66:	4608      	mov	r0, r1
 8005b68:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <__sfputs_r>:
 8005b6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b70:	4606      	mov	r6, r0
 8005b72:	460f      	mov	r7, r1
 8005b74:	4614      	mov	r4, r2
 8005b76:	18d5      	adds	r5, r2, r3
 8005b78:	42ac      	cmp	r4, r5
 8005b7a:	d101      	bne.n	8005b80 <__sfputs_r+0x12>
 8005b7c:	2000      	movs	r0, #0
 8005b7e:	e007      	b.n	8005b90 <__sfputs_r+0x22>
 8005b80:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b84:	463a      	mov	r2, r7
 8005b86:	4630      	mov	r0, r6
 8005b88:	f7ff ffda 	bl	8005b40 <__sfputc_r>
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d1f3      	bne.n	8005b78 <__sfputs_r+0xa>
 8005b90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b94 <_vfiprintf_r>:
 8005b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b98:	460d      	mov	r5, r1
 8005b9a:	b09d      	sub	sp, #116	@ 0x74
 8005b9c:	4614      	mov	r4, r2
 8005b9e:	4698      	mov	r8, r3
 8005ba0:	4606      	mov	r6, r0
 8005ba2:	b118      	cbz	r0, 8005bac <_vfiprintf_r+0x18>
 8005ba4:	6a03      	ldr	r3, [r0, #32]
 8005ba6:	b90b      	cbnz	r3, 8005bac <_vfiprintf_r+0x18>
 8005ba8:	f7ff fdca 	bl	8005740 <__sinit>
 8005bac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005bae:	07d9      	lsls	r1, r3, #31
 8005bb0:	d405      	bmi.n	8005bbe <_vfiprintf_r+0x2a>
 8005bb2:	89ab      	ldrh	r3, [r5, #12]
 8005bb4:	059a      	lsls	r2, r3, #22
 8005bb6:	d402      	bmi.n	8005bbe <_vfiprintf_r+0x2a>
 8005bb8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bba:	f7ff fec6 	bl	800594a <__retarget_lock_acquire_recursive>
 8005bbe:	89ab      	ldrh	r3, [r5, #12]
 8005bc0:	071b      	lsls	r3, r3, #28
 8005bc2:	d501      	bpl.n	8005bc8 <_vfiprintf_r+0x34>
 8005bc4:	692b      	ldr	r3, [r5, #16]
 8005bc6:	b99b      	cbnz	r3, 8005bf0 <_vfiprintf_r+0x5c>
 8005bc8:	4629      	mov	r1, r5
 8005bca:	4630      	mov	r0, r6
 8005bcc:	f000 fb70 	bl	80062b0 <__swsetup_r>
 8005bd0:	b170      	cbz	r0, 8005bf0 <_vfiprintf_r+0x5c>
 8005bd2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005bd4:	07dc      	lsls	r4, r3, #31
 8005bd6:	d504      	bpl.n	8005be2 <_vfiprintf_r+0x4e>
 8005bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bdc:	b01d      	add	sp, #116	@ 0x74
 8005bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005be2:	89ab      	ldrh	r3, [r5, #12]
 8005be4:	0598      	lsls	r0, r3, #22
 8005be6:	d4f7      	bmi.n	8005bd8 <_vfiprintf_r+0x44>
 8005be8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005bea:	f7ff feaf 	bl	800594c <__retarget_lock_release_recursive>
 8005bee:	e7f3      	b.n	8005bd8 <_vfiprintf_r+0x44>
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005bf4:	2320      	movs	r3, #32
 8005bf6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005bfa:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bfe:	2330      	movs	r3, #48	@ 0x30
 8005c00:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005db0 <_vfiprintf_r+0x21c>
 8005c04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c08:	f04f 0901 	mov.w	r9, #1
 8005c0c:	4623      	mov	r3, r4
 8005c0e:	469a      	mov	sl, r3
 8005c10:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c14:	b10a      	cbz	r2, 8005c1a <_vfiprintf_r+0x86>
 8005c16:	2a25      	cmp	r2, #37	@ 0x25
 8005c18:	d1f9      	bne.n	8005c0e <_vfiprintf_r+0x7a>
 8005c1a:	ebba 0b04 	subs.w	fp, sl, r4
 8005c1e:	d00b      	beq.n	8005c38 <_vfiprintf_r+0xa4>
 8005c20:	465b      	mov	r3, fp
 8005c22:	4622      	mov	r2, r4
 8005c24:	4629      	mov	r1, r5
 8005c26:	4630      	mov	r0, r6
 8005c28:	f7ff ffa1 	bl	8005b6e <__sfputs_r>
 8005c2c:	3001      	adds	r0, #1
 8005c2e:	f000 80a7 	beq.w	8005d80 <_vfiprintf_r+0x1ec>
 8005c32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005c34:	445a      	add	r2, fp
 8005c36:	9209      	str	r2, [sp, #36]	@ 0x24
 8005c38:	f89a 3000 	ldrb.w	r3, [sl]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	f000 809f 	beq.w	8005d80 <_vfiprintf_r+0x1ec>
 8005c42:	2300      	movs	r3, #0
 8005c44:	f04f 32ff 	mov.w	r2, #4294967295
 8005c48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c4c:	f10a 0a01 	add.w	sl, sl, #1
 8005c50:	9304      	str	r3, [sp, #16]
 8005c52:	9307      	str	r3, [sp, #28]
 8005c54:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005c58:	931a      	str	r3, [sp, #104]	@ 0x68
 8005c5a:	4654      	mov	r4, sl
 8005c5c:	2205      	movs	r2, #5
 8005c5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c62:	4853      	ldr	r0, [pc, #332]	@ (8005db0 <_vfiprintf_r+0x21c>)
 8005c64:	f7fa fb3c 	bl	80002e0 <memchr>
 8005c68:	9a04      	ldr	r2, [sp, #16]
 8005c6a:	b9d8      	cbnz	r0, 8005ca4 <_vfiprintf_r+0x110>
 8005c6c:	06d1      	lsls	r1, r2, #27
 8005c6e:	bf44      	itt	mi
 8005c70:	2320      	movmi	r3, #32
 8005c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c76:	0713      	lsls	r3, r2, #28
 8005c78:	bf44      	itt	mi
 8005c7a:	232b      	movmi	r3, #43	@ 0x2b
 8005c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c80:	f89a 3000 	ldrb.w	r3, [sl]
 8005c84:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c86:	d015      	beq.n	8005cb4 <_vfiprintf_r+0x120>
 8005c88:	9a07      	ldr	r2, [sp, #28]
 8005c8a:	4654      	mov	r4, sl
 8005c8c:	2000      	movs	r0, #0
 8005c8e:	f04f 0c0a 	mov.w	ip, #10
 8005c92:	4621      	mov	r1, r4
 8005c94:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c98:	3b30      	subs	r3, #48	@ 0x30
 8005c9a:	2b09      	cmp	r3, #9
 8005c9c:	d94b      	bls.n	8005d36 <_vfiprintf_r+0x1a2>
 8005c9e:	b1b0      	cbz	r0, 8005cce <_vfiprintf_r+0x13a>
 8005ca0:	9207      	str	r2, [sp, #28]
 8005ca2:	e014      	b.n	8005cce <_vfiprintf_r+0x13a>
 8005ca4:	eba0 0308 	sub.w	r3, r0, r8
 8005ca8:	fa09 f303 	lsl.w	r3, r9, r3
 8005cac:	4313      	orrs	r3, r2
 8005cae:	9304      	str	r3, [sp, #16]
 8005cb0:	46a2      	mov	sl, r4
 8005cb2:	e7d2      	b.n	8005c5a <_vfiprintf_r+0xc6>
 8005cb4:	9b03      	ldr	r3, [sp, #12]
 8005cb6:	1d19      	adds	r1, r3, #4
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	9103      	str	r1, [sp, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	bfbb      	ittet	lt
 8005cc0:	425b      	neglt	r3, r3
 8005cc2:	f042 0202 	orrlt.w	r2, r2, #2
 8005cc6:	9307      	strge	r3, [sp, #28]
 8005cc8:	9307      	strlt	r3, [sp, #28]
 8005cca:	bfb8      	it	lt
 8005ccc:	9204      	strlt	r2, [sp, #16]
 8005cce:	7823      	ldrb	r3, [r4, #0]
 8005cd0:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cd2:	d10a      	bne.n	8005cea <_vfiprintf_r+0x156>
 8005cd4:	7863      	ldrb	r3, [r4, #1]
 8005cd6:	2b2a      	cmp	r3, #42	@ 0x2a
 8005cd8:	d132      	bne.n	8005d40 <_vfiprintf_r+0x1ac>
 8005cda:	9b03      	ldr	r3, [sp, #12]
 8005cdc:	1d1a      	adds	r2, r3, #4
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	9203      	str	r2, [sp, #12]
 8005ce2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005ce6:	3402      	adds	r4, #2
 8005ce8:	9305      	str	r3, [sp, #20]
 8005cea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005dc0 <_vfiprintf_r+0x22c>
 8005cee:	7821      	ldrb	r1, [r4, #0]
 8005cf0:	2203      	movs	r2, #3
 8005cf2:	4650      	mov	r0, sl
 8005cf4:	f7fa faf4 	bl	80002e0 <memchr>
 8005cf8:	b138      	cbz	r0, 8005d0a <_vfiprintf_r+0x176>
 8005cfa:	9b04      	ldr	r3, [sp, #16]
 8005cfc:	eba0 000a 	sub.w	r0, r0, sl
 8005d00:	2240      	movs	r2, #64	@ 0x40
 8005d02:	4082      	lsls	r2, r0
 8005d04:	4313      	orrs	r3, r2
 8005d06:	3401      	adds	r4, #1
 8005d08:	9304      	str	r3, [sp, #16]
 8005d0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d0e:	4829      	ldr	r0, [pc, #164]	@ (8005db4 <_vfiprintf_r+0x220>)
 8005d10:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005d14:	2206      	movs	r2, #6
 8005d16:	f7fa fae3 	bl	80002e0 <memchr>
 8005d1a:	2800      	cmp	r0, #0
 8005d1c:	d03f      	beq.n	8005d9e <_vfiprintf_r+0x20a>
 8005d1e:	4b26      	ldr	r3, [pc, #152]	@ (8005db8 <_vfiprintf_r+0x224>)
 8005d20:	bb1b      	cbnz	r3, 8005d6a <_vfiprintf_r+0x1d6>
 8005d22:	9b03      	ldr	r3, [sp, #12]
 8005d24:	3307      	adds	r3, #7
 8005d26:	f023 0307 	bic.w	r3, r3, #7
 8005d2a:	3308      	adds	r3, #8
 8005d2c:	9303      	str	r3, [sp, #12]
 8005d2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d30:	443b      	add	r3, r7
 8005d32:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d34:	e76a      	b.n	8005c0c <_vfiprintf_r+0x78>
 8005d36:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d3a:	460c      	mov	r4, r1
 8005d3c:	2001      	movs	r0, #1
 8005d3e:	e7a8      	b.n	8005c92 <_vfiprintf_r+0xfe>
 8005d40:	2300      	movs	r3, #0
 8005d42:	3401      	adds	r4, #1
 8005d44:	9305      	str	r3, [sp, #20]
 8005d46:	4619      	mov	r1, r3
 8005d48:	f04f 0c0a 	mov.w	ip, #10
 8005d4c:	4620      	mov	r0, r4
 8005d4e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d52:	3a30      	subs	r2, #48	@ 0x30
 8005d54:	2a09      	cmp	r2, #9
 8005d56:	d903      	bls.n	8005d60 <_vfiprintf_r+0x1cc>
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d0c6      	beq.n	8005cea <_vfiprintf_r+0x156>
 8005d5c:	9105      	str	r1, [sp, #20]
 8005d5e:	e7c4      	b.n	8005cea <_vfiprintf_r+0x156>
 8005d60:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d64:	4604      	mov	r4, r0
 8005d66:	2301      	movs	r3, #1
 8005d68:	e7f0      	b.n	8005d4c <_vfiprintf_r+0x1b8>
 8005d6a:	ab03      	add	r3, sp, #12
 8005d6c:	9300      	str	r3, [sp, #0]
 8005d6e:	462a      	mov	r2, r5
 8005d70:	4b12      	ldr	r3, [pc, #72]	@ (8005dbc <_vfiprintf_r+0x228>)
 8005d72:	a904      	add	r1, sp, #16
 8005d74:	4630      	mov	r0, r6
 8005d76:	f3af 8000 	nop.w
 8005d7a:	4607      	mov	r7, r0
 8005d7c:	1c78      	adds	r0, r7, #1
 8005d7e:	d1d6      	bne.n	8005d2e <_vfiprintf_r+0x19a>
 8005d80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d82:	07d9      	lsls	r1, r3, #31
 8005d84:	d405      	bmi.n	8005d92 <_vfiprintf_r+0x1fe>
 8005d86:	89ab      	ldrh	r3, [r5, #12]
 8005d88:	059a      	lsls	r2, r3, #22
 8005d8a:	d402      	bmi.n	8005d92 <_vfiprintf_r+0x1fe>
 8005d8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d8e:	f7ff fddd 	bl	800594c <__retarget_lock_release_recursive>
 8005d92:	89ab      	ldrh	r3, [r5, #12]
 8005d94:	065b      	lsls	r3, r3, #25
 8005d96:	f53f af1f 	bmi.w	8005bd8 <_vfiprintf_r+0x44>
 8005d9a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d9c:	e71e      	b.n	8005bdc <_vfiprintf_r+0x48>
 8005d9e:	ab03      	add	r3, sp, #12
 8005da0:	9300      	str	r3, [sp, #0]
 8005da2:	462a      	mov	r2, r5
 8005da4:	4b05      	ldr	r3, [pc, #20]	@ (8005dbc <_vfiprintf_r+0x228>)
 8005da6:	a904      	add	r1, sp, #16
 8005da8:	4630      	mov	r0, r6
 8005daa:	f000 f879 	bl	8005ea0 <_printf_i>
 8005dae:	e7e4      	b.n	8005d7a <_vfiprintf_r+0x1e6>
 8005db0:	080064d0 	.word	0x080064d0
 8005db4:	080064da 	.word	0x080064da
 8005db8:	00000000 	.word	0x00000000
 8005dbc:	08005b6f 	.word	0x08005b6f
 8005dc0:	080064d6 	.word	0x080064d6

08005dc4 <_printf_common>:
 8005dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc8:	4616      	mov	r6, r2
 8005dca:	4698      	mov	r8, r3
 8005dcc:	688a      	ldr	r2, [r1, #8]
 8005dce:	690b      	ldr	r3, [r1, #16]
 8005dd0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	bfb8      	it	lt
 8005dd8:	4613      	movlt	r3, r2
 8005dda:	6033      	str	r3, [r6, #0]
 8005ddc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005de0:	4607      	mov	r7, r0
 8005de2:	460c      	mov	r4, r1
 8005de4:	b10a      	cbz	r2, 8005dea <_printf_common+0x26>
 8005de6:	3301      	adds	r3, #1
 8005de8:	6033      	str	r3, [r6, #0]
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	0699      	lsls	r1, r3, #26
 8005dee:	bf42      	ittt	mi
 8005df0:	6833      	ldrmi	r3, [r6, #0]
 8005df2:	3302      	addmi	r3, #2
 8005df4:	6033      	strmi	r3, [r6, #0]
 8005df6:	6825      	ldr	r5, [r4, #0]
 8005df8:	f015 0506 	ands.w	r5, r5, #6
 8005dfc:	d106      	bne.n	8005e0c <_printf_common+0x48>
 8005dfe:	f104 0a19 	add.w	sl, r4, #25
 8005e02:	68e3      	ldr	r3, [r4, #12]
 8005e04:	6832      	ldr	r2, [r6, #0]
 8005e06:	1a9b      	subs	r3, r3, r2
 8005e08:	42ab      	cmp	r3, r5
 8005e0a:	dc26      	bgt.n	8005e5a <_printf_common+0x96>
 8005e0c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005e10:	6822      	ldr	r2, [r4, #0]
 8005e12:	3b00      	subs	r3, #0
 8005e14:	bf18      	it	ne
 8005e16:	2301      	movne	r3, #1
 8005e18:	0692      	lsls	r2, r2, #26
 8005e1a:	d42b      	bmi.n	8005e74 <_printf_common+0xb0>
 8005e1c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005e20:	4641      	mov	r1, r8
 8005e22:	4638      	mov	r0, r7
 8005e24:	47c8      	blx	r9
 8005e26:	3001      	adds	r0, #1
 8005e28:	d01e      	beq.n	8005e68 <_printf_common+0xa4>
 8005e2a:	6823      	ldr	r3, [r4, #0]
 8005e2c:	6922      	ldr	r2, [r4, #16]
 8005e2e:	f003 0306 	and.w	r3, r3, #6
 8005e32:	2b04      	cmp	r3, #4
 8005e34:	bf02      	ittt	eq
 8005e36:	68e5      	ldreq	r5, [r4, #12]
 8005e38:	6833      	ldreq	r3, [r6, #0]
 8005e3a:	1aed      	subeq	r5, r5, r3
 8005e3c:	68a3      	ldr	r3, [r4, #8]
 8005e3e:	bf0c      	ite	eq
 8005e40:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e44:	2500      	movne	r5, #0
 8005e46:	4293      	cmp	r3, r2
 8005e48:	bfc4      	itt	gt
 8005e4a:	1a9b      	subgt	r3, r3, r2
 8005e4c:	18ed      	addgt	r5, r5, r3
 8005e4e:	2600      	movs	r6, #0
 8005e50:	341a      	adds	r4, #26
 8005e52:	42b5      	cmp	r5, r6
 8005e54:	d11a      	bne.n	8005e8c <_printf_common+0xc8>
 8005e56:	2000      	movs	r0, #0
 8005e58:	e008      	b.n	8005e6c <_printf_common+0xa8>
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	4652      	mov	r2, sl
 8005e5e:	4641      	mov	r1, r8
 8005e60:	4638      	mov	r0, r7
 8005e62:	47c8      	blx	r9
 8005e64:	3001      	adds	r0, #1
 8005e66:	d103      	bne.n	8005e70 <_printf_common+0xac>
 8005e68:	f04f 30ff 	mov.w	r0, #4294967295
 8005e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e70:	3501      	adds	r5, #1
 8005e72:	e7c6      	b.n	8005e02 <_printf_common+0x3e>
 8005e74:	18e1      	adds	r1, r4, r3
 8005e76:	1c5a      	adds	r2, r3, #1
 8005e78:	2030      	movs	r0, #48	@ 0x30
 8005e7a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e7e:	4422      	add	r2, r4
 8005e80:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e84:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e88:	3302      	adds	r3, #2
 8005e8a:	e7c7      	b.n	8005e1c <_printf_common+0x58>
 8005e8c:	2301      	movs	r3, #1
 8005e8e:	4622      	mov	r2, r4
 8005e90:	4641      	mov	r1, r8
 8005e92:	4638      	mov	r0, r7
 8005e94:	47c8      	blx	r9
 8005e96:	3001      	adds	r0, #1
 8005e98:	d0e6      	beq.n	8005e68 <_printf_common+0xa4>
 8005e9a:	3601      	adds	r6, #1
 8005e9c:	e7d9      	b.n	8005e52 <_printf_common+0x8e>
	...

08005ea0 <_printf_i>:
 8005ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea4:	7e0f      	ldrb	r7, [r1, #24]
 8005ea6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005ea8:	2f78      	cmp	r7, #120	@ 0x78
 8005eaa:	4691      	mov	r9, r2
 8005eac:	4680      	mov	r8, r0
 8005eae:	460c      	mov	r4, r1
 8005eb0:	469a      	mov	sl, r3
 8005eb2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005eb6:	d807      	bhi.n	8005ec8 <_printf_i+0x28>
 8005eb8:	2f62      	cmp	r7, #98	@ 0x62
 8005eba:	d80a      	bhi.n	8005ed2 <_printf_i+0x32>
 8005ebc:	2f00      	cmp	r7, #0
 8005ebe:	f000 80d1 	beq.w	8006064 <_printf_i+0x1c4>
 8005ec2:	2f58      	cmp	r7, #88	@ 0x58
 8005ec4:	f000 80b8 	beq.w	8006038 <_printf_i+0x198>
 8005ec8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ecc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005ed0:	e03a      	b.n	8005f48 <_printf_i+0xa8>
 8005ed2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ed6:	2b15      	cmp	r3, #21
 8005ed8:	d8f6      	bhi.n	8005ec8 <_printf_i+0x28>
 8005eda:	a101      	add	r1, pc, #4	@ (adr r1, 8005ee0 <_printf_i+0x40>)
 8005edc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ee0:	08005f39 	.word	0x08005f39
 8005ee4:	08005f4d 	.word	0x08005f4d
 8005ee8:	08005ec9 	.word	0x08005ec9
 8005eec:	08005ec9 	.word	0x08005ec9
 8005ef0:	08005ec9 	.word	0x08005ec9
 8005ef4:	08005ec9 	.word	0x08005ec9
 8005ef8:	08005f4d 	.word	0x08005f4d
 8005efc:	08005ec9 	.word	0x08005ec9
 8005f00:	08005ec9 	.word	0x08005ec9
 8005f04:	08005ec9 	.word	0x08005ec9
 8005f08:	08005ec9 	.word	0x08005ec9
 8005f0c:	0800604b 	.word	0x0800604b
 8005f10:	08005f77 	.word	0x08005f77
 8005f14:	08006005 	.word	0x08006005
 8005f18:	08005ec9 	.word	0x08005ec9
 8005f1c:	08005ec9 	.word	0x08005ec9
 8005f20:	0800606d 	.word	0x0800606d
 8005f24:	08005ec9 	.word	0x08005ec9
 8005f28:	08005f77 	.word	0x08005f77
 8005f2c:	08005ec9 	.word	0x08005ec9
 8005f30:	08005ec9 	.word	0x08005ec9
 8005f34:	0800600d 	.word	0x0800600d
 8005f38:	6833      	ldr	r3, [r6, #0]
 8005f3a:	1d1a      	adds	r2, r3, #4
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	6032      	str	r2, [r6, #0]
 8005f40:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005f44:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e09c      	b.n	8006086 <_printf_i+0x1e6>
 8005f4c:	6833      	ldr	r3, [r6, #0]
 8005f4e:	6820      	ldr	r0, [r4, #0]
 8005f50:	1d19      	adds	r1, r3, #4
 8005f52:	6031      	str	r1, [r6, #0]
 8005f54:	0606      	lsls	r6, r0, #24
 8005f56:	d501      	bpl.n	8005f5c <_printf_i+0xbc>
 8005f58:	681d      	ldr	r5, [r3, #0]
 8005f5a:	e003      	b.n	8005f64 <_printf_i+0xc4>
 8005f5c:	0645      	lsls	r5, r0, #25
 8005f5e:	d5fb      	bpl.n	8005f58 <_printf_i+0xb8>
 8005f60:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005f64:	2d00      	cmp	r5, #0
 8005f66:	da03      	bge.n	8005f70 <_printf_i+0xd0>
 8005f68:	232d      	movs	r3, #45	@ 0x2d
 8005f6a:	426d      	negs	r5, r5
 8005f6c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f70:	4858      	ldr	r0, [pc, #352]	@ (80060d4 <_printf_i+0x234>)
 8005f72:	230a      	movs	r3, #10
 8005f74:	e011      	b.n	8005f9a <_printf_i+0xfa>
 8005f76:	6821      	ldr	r1, [r4, #0]
 8005f78:	6833      	ldr	r3, [r6, #0]
 8005f7a:	0608      	lsls	r0, r1, #24
 8005f7c:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f80:	d402      	bmi.n	8005f88 <_printf_i+0xe8>
 8005f82:	0649      	lsls	r1, r1, #25
 8005f84:	bf48      	it	mi
 8005f86:	b2ad      	uxthmi	r5, r5
 8005f88:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f8a:	4852      	ldr	r0, [pc, #328]	@ (80060d4 <_printf_i+0x234>)
 8005f8c:	6033      	str	r3, [r6, #0]
 8005f8e:	bf14      	ite	ne
 8005f90:	230a      	movne	r3, #10
 8005f92:	2308      	moveq	r3, #8
 8005f94:	2100      	movs	r1, #0
 8005f96:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f9a:	6866      	ldr	r6, [r4, #4]
 8005f9c:	60a6      	str	r6, [r4, #8]
 8005f9e:	2e00      	cmp	r6, #0
 8005fa0:	db05      	blt.n	8005fae <_printf_i+0x10e>
 8005fa2:	6821      	ldr	r1, [r4, #0]
 8005fa4:	432e      	orrs	r6, r5
 8005fa6:	f021 0104 	bic.w	r1, r1, #4
 8005faa:	6021      	str	r1, [r4, #0]
 8005fac:	d04b      	beq.n	8006046 <_printf_i+0x1a6>
 8005fae:	4616      	mov	r6, r2
 8005fb0:	fbb5 f1f3 	udiv	r1, r5, r3
 8005fb4:	fb03 5711 	mls	r7, r3, r1, r5
 8005fb8:	5dc7      	ldrb	r7, [r0, r7]
 8005fba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005fbe:	462f      	mov	r7, r5
 8005fc0:	42bb      	cmp	r3, r7
 8005fc2:	460d      	mov	r5, r1
 8005fc4:	d9f4      	bls.n	8005fb0 <_printf_i+0x110>
 8005fc6:	2b08      	cmp	r3, #8
 8005fc8:	d10b      	bne.n	8005fe2 <_printf_i+0x142>
 8005fca:	6823      	ldr	r3, [r4, #0]
 8005fcc:	07df      	lsls	r7, r3, #31
 8005fce:	d508      	bpl.n	8005fe2 <_printf_i+0x142>
 8005fd0:	6923      	ldr	r3, [r4, #16]
 8005fd2:	6861      	ldr	r1, [r4, #4]
 8005fd4:	4299      	cmp	r1, r3
 8005fd6:	bfde      	ittt	le
 8005fd8:	2330      	movle	r3, #48	@ 0x30
 8005fda:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005fde:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005fe2:	1b92      	subs	r2, r2, r6
 8005fe4:	6122      	str	r2, [r4, #16]
 8005fe6:	f8cd a000 	str.w	sl, [sp]
 8005fea:	464b      	mov	r3, r9
 8005fec:	aa03      	add	r2, sp, #12
 8005fee:	4621      	mov	r1, r4
 8005ff0:	4640      	mov	r0, r8
 8005ff2:	f7ff fee7 	bl	8005dc4 <_printf_common>
 8005ff6:	3001      	adds	r0, #1
 8005ff8:	d14a      	bne.n	8006090 <_printf_i+0x1f0>
 8005ffa:	f04f 30ff 	mov.w	r0, #4294967295
 8005ffe:	b004      	add	sp, #16
 8006000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006004:	6823      	ldr	r3, [r4, #0]
 8006006:	f043 0320 	orr.w	r3, r3, #32
 800600a:	6023      	str	r3, [r4, #0]
 800600c:	4832      	ldr	r0, [pc, #200]	@ (80060d8 <_printf_i+0x238>)
 800600e:	2778      	movs	r7, #120	@ 0x78
 8006010:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006014:	6823      	ldr	r3, [r4, #0]
 8006016:	6831      	ldr	r1, [r6, #0]
 8006018:	061f      	lsls	r7, r3, #24
 800601a:	f851 5b04 	ldr.w	r5, [r1], #4
 800601e:	d402      	bmi.n	8006026 <_printf_i+0x186>
 8006020:	065f      	lsls	r7, r3, #25
 8006022:	bf48      	it	mi
 8006024:	b2ad      	uxthmi	r5, r5
 8006026:	6031      	str	r1, [r6, #0]
 8006028:	07d9      	lsls	r1, r3, #31
 800602a:	bf44      	itt	mi
 800602c:	f043 0320 	orrmi.w	r3, r3, #32
 8006030:	6023      	strmi	r3, [r4, #0]
 8006032:	b11d      	cbz	r5, 800603c <_printf_i+0x19c>
 8006034:	2310      	movs	r3, #16
 8006036:	e7ad      	b.n	8005f94 <_printf_i+0xf4>
 8006038:	4826      	ldr	r0, [pc, #152]	@ (80060d4 <_printf_i+0x234>)
 800603a:	e7e9      	b.n	8006010 <_printf_i+0x170>
 800603c:	6823      	ldr	r3, [r4, #0]
 800603e:	f023 0320 	bic.w	r3, r3, #32
 8006042:	6023      	str	r3, [r4, #0]
 8006044:	e7f6      	b.n	8006034 <_printf_i+0x194>
 8006046:	4616      	mov	r6, r2
 8006048:	e7bd      	b.n	8005fc6 <_printf_i+0x126>
 800604a:	6833      	ldr	r3, [r6, #0]
 800604c:	6825      	ldr	r5, [r4, #0]
 800604e:	6961      	ldr	r1, [r4, #20]
 8006050:	1d18      	adds	r0, r3, #4
 8006052:	6030      	str	r0, [r6, #0]
 8006054:	062e      	lsls	r6, r5, #24
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	d501      	bpl.n	800605e <_printf_i+0x1be>
 800605a:	6019      	str	r1, [r3, #0]
 800605c:	e002      	b.n	8006064 <_printf_i+0x1c4>
 800605e:	0668      	lsls	r0, r5, #25
 8006060:	d5fb      	bpl.n	800605a <_printf_i+0x1ba>
 8006062:	8019      	strh	r1, [r3, #0]
 8006064:	2300      	movs	r3, #0
 8006066:	6123      	str	r3, [r4, #16]
 8006068:	4616      	mov	r6, r2
 800606a:	e7bc      	b.n	8005fe6 <_printf_i+0x146>
 800606c:	6833      	ldr	r3, [r6, #0]
 800606e:	1d1a      	adds	r2, r3, #4
 8006070:	6032      	str	r2, [r6, #0]
 8006072:	681e      	ldr	r6, [r3, #0]
 8006074:	6862      	ldr	r2, [r4, #4]
 8006076:	2100      	movs	r1, #0
 8006078:	4630      	mov	r0, r6
 800607a:	f7fa f931 	bl	80002e0 <memchr>
 800607e:	b108      	cbz	r0, 8006084 <_printf_i+0x1e4>
 8006080:	1b80      	subs	r0, r0, r6
 8006082:	6060      	str	r0, [r4, #4]
 8006084:	6863      	ldr	r3, [r4, #4]
 8006086:	6123      	str	r3, [r4, #16]
 8006088:	2300      	movs	r3, #0
 800608a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800608e:	e7aa      	b.n	8005fe6 <_printf_i+0x146>
 8006090:	6923      	ldr	r3, [r4, #16]
 8006092:	4632      	mov	r2, r6
 8006094:	4649      	mov	r1, r9
 8006096:	4640      	mov	r0, r8
 8006098:	47d0      	blx	sl
 800609a:	3001      	adds	r0, #1
 800609c:	d0ad      	beq.n	8005ffa <_printf_i+0x15a>
 800609e:	6823      	ldr	r3, [r4, #0]
 80060a0:	079b      	lsls	r3, r3, #30
 80060a2:	d413      	bmi.n	80060cc <_printf_i+0x22c>
 80060a4:	68e0      	ldr	r0, [r4, #12]
 80060a6:	9b03      	ldr	r3, [sp, #12]
 80060a8:	4298      	cmp	r0, r3
 80060aa:	bfb8      	it	lt
 80060ac:	4618      	movlt	r0, r3
 80060ae:	e7a6      	b.n	8005ffe <_printf_i+0x15e>
 80060b0:	2301      	movs	r3, #1
 80060b2:	4632      	mov	r2, r6
 80060b4:	4649      	mov	r1, r9
 80060b6:	4640      	mov	r0, r8
 80060b8:	47d0      	blx	sl
 80060ba:	3001      	adds	r0, #1
 80060bc:	d09d      	beq.n	8005ffa <_printf_i+0x15a>
 80060be:	3501      	adds	r5, #1
 80060c0:	68e3      	ldr	r3, [r4, #12]
 80060c2:	9903      	ldr	r1, [sp, #12]
 80060c4:	1a5b      	subs	r3, r3, r1
 80060c6:	42ab      	cmp	r3, r5
 80060c8:	dcf2      	bgt.n	80060b0 <_printf_i+0x210>
 80060ca:	e7eb      	b.n	80060a4 <_printf_i+0x204>
 80060cc:	2500      	movs	r5, #0
 80060ce:	f104 0619 	add.w	r6, r4, #25
 80060d2:	e7f5      	b.n	80060c0 <_printf_i+0x220>
 80060d4:	080064e1 	.word	0x080064e1
 80060d8:	080064f2 	.word	0x080064f2

080060dc <__sflush_r>:
 80060dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80060e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060e4:	0716      	lsls	r6, r2, #28
 80060e6:	4605      	mov	r5, r0
 80060e8:	460c      	mov	r4, r1
 80060ea:	d454      	bmi.n	8006196 <__sflush_r+0xba>
 80060ec:	684b      	ldr	r3, [r1, #4]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	dc02      	bgt.n	80060f8 <__sflush_r+0x1c>
 80060f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	dd48      	ble.n	800618a <__sflush_r+0xae>
 80060f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80060fa:	2e00      	cmp	r6, #0
 80060fc:	d045      	beq.n	800618a <__sflush_r+0xae>
 80060fe:	2300      	movs	r3, #0
 8006100:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006104:	682f      	ldr	r7, [r5, #0]
 8006106:	6a21      	ldr	r1, [r4, #32]
 8006108:	602b      	str	r3, [r5, #0]
 800610a:	d030      	beq.n	800616e <__sflush_r+0x92>
 800610c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800610e:	89a3      	ldrh	r3, [r4, #12]
 8006110:	0759      	lsls	r1, r3, #29
 8006112:	d505      	bpl.n	8006120 <__sflush_r+0x44>
 8006114:	6863      	ldr	r3, [r4, #4]
 8006116:	1ad2      	subs	r2, r2, r3
 8006118:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800611a:	b10b      	cbz	r3, 8006120 <__sflush_r+0x44>
 800611c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800611e:	1ad2      	subs	r2, r2, r3
 8006120:	2300      	movs	r3, #0
 8006122:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006124:	6a21      	ldr	r1, [r4, #32]
 8006126:	4628      	mov	r0, r5
 8006128:	47b0      	blx	r6
 800612a:	1c43      	adds	r3, r0, #1
 800612c:	89a3      	ldrh	r3, [r4, #12]
 800612e:	d106      	bne.n	800613e <__sflush_r+0x62>
 8006130:	6829      	ldr	r1, [r5, #0]
 8006132:	291d      	cmp	r1, #29
 8006134:	d82b      	bhi.n	800618e <__sflush_r+0xb2>
 8006136:	4a2a      	ldr	r2, [pc, #168]	@ (80061e0 <__sflush_r+0x104>)
 8006138:	40ca      	lsrs	r2, r1
 800613a:	07d6      	lsls	r6, r2, #31
 800613c:	d527      	bpl.n	800618e <__sflush_r+0xb2>
 800613e:	2200      	movs	r2, #0
 8006140:	6062      	str	r2, [r4, #4]
 8006142:	04d9      	lsls	r1, r3, #19
 8006144:	6922      	ldr	r2, [r4, #16]
 8006146:	6022      	str	r2, [r4, #0]
 8006148:	d504      	bpl.n	8006154 <__sflush_r+0x78>
 800614a:	1c42      	adds	r2, r0, #1
 800614c:	d101      	bne.n	8006152 <__sflush_r+0x76>
 800614e:	682b      	ldr	r3, [r5, #0]
 8006150:	b903      	cbnz	r3, 8006154 <__sflush_r+0x78>
 8006152:	6560      	str	r0, [r4, #84]	@ 0x54
 8006154:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006156:	602f      	str	r7, [r5, #0]
 8006158:	b1b9      	cbz	r1, 800618a <__sflush_r+0xae>
 800615a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800615e:	4299      	cmp	r1, r3
 8006160:	d002      	beq.n	8006168 <__sflush_r+0x8c>
 8006162:	4628      	mov	r0, r5
 8006164:	f7ff fbf4 	bl	8005950 <_free_r>
 8006168:	2300      	movs	r3, #0
 800616a:	6363      	str	r3, [r4, #52]	@ 0x34
 800616c:	e00d      	b.n	800618a <__sflush_r+0xae>
 800616e:	2301      	movs	r3, #1
 8006170:	4628      	mov	r0, r5
 8006172:	47b0      	blx	r6
 8006174:	4602      	mov	r2, r0
 8006176:	1c50      	adds	r0, r2, #1
 8006178:	d1c9      	bne.n	800610e <__sflush_r+0x32>
 800617a:	682b      	ldr	r3, [r5, #0]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0c6      	beq.n	800610e <__sflush_r+0x32>
 8006180:	2b1d      	cmp	r3, #29
 8006182:	d001      	beq.n	8006188 <__sflush_r+0xac>
 8006184:	2b16      	cmp	r3, #22
 8006186:	d11e      	bne.n	80061c6 <__sflush_r+0xea>
 8006188:	602f      	str	r7, [r5, #0]
 800618a:	2000      	movs	r0, #0
 800618c:	e022      	b.n	80061d4 <__sflush_r+0xf8>
 800618e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006192:	b21b      	sxth	r3, r3
 8006194:	e01b      	b.n	80061ce <__sflush_r+0xf2>
 8006196:	690f      	ldr	r7, [r1, #16]
 8006198:	2f00      	cmp	r7, #0
 800619a:	d0f6      	beq.n	800618a <__sflush_r+0xae>
 800619c:	0793      	lsls	r3, r2, #30
 800619e:	680e      	ldr	r6, [r1, #0]
 80061a0:	bf08      	it	eq
 80061a2:	694b      	ldreq	r3, [r1, #20]
 80061a4:	600f      	str	r7, [r1, #0]
 80061a6:	bf18      	it	ne
 80061a8:	2300      	movne	r3, #0
 80061aa:	eba6 0807 	sub.w	r8, r6, r7
 80061ae:	608b      	str	r3, [r1, #8]
 80061b0:	f1b8 0f00 	cmp.w	r8, #0
 80061b4:	dde9      	ble.n	800618a <__sflush_r+0xae>
 80061b6:	6a21      	ldr	r1, [r4, #32]
 80061b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80061ba:	4643      	mov	r3, r8
 80061bc:	463a      	mov	r2, r7
 80061be:	4628      	mov	r0, r5
 80061c0:	47b0      	blx	r6
 80061c2:	2800      	cmp	r0, #0
 80061c4:	dc08      	bgt.n	80061d8 <__sflush_r+0xfc>
 80061c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80061ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80061ce:	81a3      	strh	r3, [r4, #12]
 80061d0:	f04f 30ff 	mov.w	r0, #4294967295
 80061d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061d8:	4407      	add	r7, r0
 80061da:	eba8 0800 	sub.w	r8, r8, r0
 80061de:	e7e7      	b.n	80061b0 <__sflush_r+0xd4>
 80061e0:	20400001 	.word	0x20400001

080061e4 <_fflush_r>:
 80061e4:	b538      	push	{r3, r4, r5, lr}
 80061e6:	690b      	ldr	r3, [r1, #16]
 80061e8:	4605      	mov	r5, r0
 80061ea:	460c      	mov	r4, r1
 80061ec:	b913      	cbnz	r3, 80061f4 <_fflush_r+0x10>
 80061ee:	2500      	movs	r5, #0
 80061f0:	4628      	mov	r0, r5
 80061f2:	bd38      	pop	{r3, r4, r5, pc}
 80061f4:	b118      	cbz	r0, 80061fe <_fflush_r+0x1a>
 80061f6:	6a03      	ldr	r3, [r0, #32]
 80061f8:	b90b      	cbnz	r3, 80061fe <_fflush_r+0x1a>
 80061fa:	f7ff faa1 	bl	8005740 <__sinit>
 80061fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d0f3      	beq.n	80061ee <_fflush_r+0xa>
 8006206:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006208:	07d0      	lsls	r0, r2, #31
 800620a:	d404      	bmi.n	8006216 <_fflush_r+0x32>
 800620c:	0599      	lsls	r1, r3, #22
 800620e:	d402      	bmi.n	8006216 <_fflush_r+0x32>
 8006210:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006212:	f7ff fb9a 	bl	800594a <__retarget_lock_acquire_recursive>
 8006216:	4628      	mov	r0, r5
 8006218:	4621      	mov	r1, r4
 800621a:	f7ff ff5f 	bl	80060dc <__sflush_r>
 800621e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006220:	07da      	lsls	r2, r3, #31
 8006222:	4605      	mov	r5, r0
 8006224:	d4e4      	bmi.n	80061f0 <_fflush_r+0xc>
 8006226:	89a3      	ldrh	r3, [r4, #12]
 8006228:	059b      	lsls	r3, r3, #22
 800622a:	d4e1      	bmi.n	80061f0 <_fflush_r+0xc>
 800622c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800622e:	f7ff fb8d 	bl	800594c <__retarget_lock_release_recursive>
 8006232:	e7dd      	b.n	80061f0 <_fflush_r+0xc>

08006234 <__swbuf_r>:
 8006234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006236:	460e      	mov	r6, r1
 8006238:	4614      	mov	r4, r2
 800623a:	4605      	mov	r5, r0
 800623c:	b118      	cbz	r0, 8006246 <__swbuf_r+0x12>
 800623e:	6a03      	ldr	r3, [r0, #32]
 8006240:	b90b      	cbnz	r3, 8006246 <__swbuf_r+0x12>
 8006242:	f7ff fa7d 	bl	8005740 <__sinit>
 8006246:	69a3      	ldr	r3, [r4, #24]
 8006248:	60a3      	str	r3, [r4, #8]
 800624a:	89a3      	ldrh	r3, [r4, #12]
 800624c:	071a      	lsls	r2, r3, #28
 800624e:	d501      	bpl.n	8006254 <__swbuf_r+0x20>
 8006250:	6923      	ldr	r3, [r4, #16]
 8006252:	b943      	cbnz	r3, 8006266 <__swbuf_r+0x32>
 8006254:	4621      	mov	r1, r4
 8006256:	4628      	mov	r0, r5
 8006258:	f000 f82a 	bl	80062b0 <__swsetup_r>
 800625c:	b118      	cbz	r0, 8006266 <__swbuf_r+0x32>
 800625e:	f04f 37ff 	mov.w	r7, #4294967295
 8006262:	4638      	mov	r0, r7
 8006264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	6922      	ldr	r2, [r4, #16]
 800626a:	1a98      	subs	r0, r3, r2
 800626c:	6963      	ldr	r3, [r4, #20]
 800626e:	b2f6      	uxtb	r6, r6
 8006270:	4283      	cmp	r3, r0
 8006272:	4637      	mov	r7, r6
 8006274:	dc05      	bgt.n	8006282 <__swbuf_r+0x4e>
 8006276:	4621      	mov	r1, r4
 8006278:	4628      	mov	r0, r5
 800627a:	f7ff ffb3 	bl	80061e4 <_fflush_r>
 800627e:	2800      	cmp	r0, #0
 8006280:	d1ed      	bne.n	800625e <__swbuf_r+0x2a>
 8006282:	68a3      	ldr	r3, [r4, #8]
 8006284:	3b01      	subs	r3, #1
 8006286:	60a3      	str	r3, [r4, #8]
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	6022      	str	r2, [r4, #0]
 800628e:	701e      	strb	r6, [r3, #0]
 8006290:	6962      	ldr	r2, [r4, #20]
 8006292:	1c43      	adds	r3, r0, #1
 8006294:	429a      	cmp	r2, r3
 8006296:	d004      	beq.n	80062a2 <__swbuf_r+0x6e>
 8006298:	89a3      	ldrh	r3, [r4, #12]
 800629a:	07db      	lsls	r3, r3, #31
 800629c:	d5e1      	bpl.n	8006262 <__swbuf_r+0x2e>
 800629e:	2e0a      	cmp	r6, #10
 80062a0:	d1df      	bne.n	8006262 <__swbuf_r+0x2e>
 80062a2:	4621      	mov	r1, r4
 80062a4:	4628      	mov	r0, r5
 80062a6:	f7ff ff9d 	bl	80061e4 <_fflush_r>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	d0d9      	beq.n	8006262 <__swbuf_r+0x2e>
 80062ae:	e7d6      	b.n	800625e <__swbuf_r+0x2a>

080062b0 <__swsetup_r>:
 80062b0:	b538      	push	{r3, r4, r5, lr}
 80062b2:	4b29      	ldr	r3, [pc, #164]	@ (8006358 <__swsetup_r+0xa8>)
 80062b4:	4605      	mov	r5, r0
 80062b6:	6818      	ldr	r0, [r3, #0]
 80062b8:	460c      	mov	r4, r1
 80062ba:	b118      	cbz	r0, 80062c4 <__swsetup_r+0x14>
 80062bc:	6a03      	ldr	r3, [r0, #32]
 80062be:	b90b      	cbnz	r3, 80062c4 <__swsetup_r+0x14>
 80062c0:	f7ff fa3e 	bl	8005740 <__sinit>
 80062c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062c8:	0719      	lsls	r1, r3, #28
 80062ca:	d422      	bmi.n	8006312 <__swsetup_r+0x62>
 80062cc:	06da      	lsls	r2, r3, #27
 80062ce:	d407      	bmi.n	80062e0 <__swsetup_r+0x30>
 80062d0:	2209      	movs	r2, #9
 80062d2:	602a      	str	r2, [r5, #0]
 80062d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062d8:	81a3      	strh	r3, [r4, #12]
 80062da:	f04f 30ff 	mov.w	r0, #4294967295
 80062de:	e033      	b.n	8006348 <__swsetup_r+0x98>
 80062e0:	0758      	lsls	r0, r3, #29
 80062e2:	d512      	bpl.n	800630a <__swsetup_r+0x5a>
 80062e4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80062e6:	b141      	cbz	r1, 80062fa <__swsetup_r+0x4a>
 80062e8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80062ec:	4299      	cmp	r1, r3
 80062ee:	d002      	beq.n	80062f6 <__swsetup_r+0x46>
 80062f0:	4628      	mov	r0, r5
 80062f2:	f7ff fb2d 	bl	8005950 <_free_r>
 80062f6:	2300      	movs	r3, #0
 80062f8:	6363      	str	r3, [r4, #52]	@ 0x34
 80062fa:	89a3      	ldrh	r3, [r4, #12]
 80062fc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006300:	81a3      	strh	r3, [r4, #12]
 8006302:	2300      	movs	r3, #0
 8006304:	6063      	str	r3, [r4, #4]
 8006306:	6923      	ldr	r3, [r4, #16]
 8006308:	6023      	str	r3, [r4, #0]
 800630a:	89a3      	ldrh	r3, [r4, #12]
 800630c:	f043 0308 	orr.w	r3, r3, #8
 8006310:	81a3      	strh	r3, [r4, #12]
 8006312:	6923      	ldr	r3, [r4, #16]
 8006314:	b94b      	cbnz	r3, 800632a <__swsetup_r+0x7a>
 8006316:	89a3      	ldrh	r3, [r4, #12]
 8006318:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800631c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006320:	d003      	beq.n	800632a <__swsetup_r+0x7a>
 8006322:	4621      	mov	r1, r4
 8006324:	4628      	mov	r0, r5
 8006326:	f000 f84f 	bl	80063c8 <__smakebuf_r>
 800632a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800632e:	f013 0201 	ands.w	r2, r3, #1
 8006332:	d00a      	beq.n	800634a <__swsetup_r+0x9a>
 8006334:	2200      	movs	r2, #0
 8006336:	60a2      	str	r2, [r4, #8]
 8006338:	6962      	ldr	r2, [r4, #20]
 800633a:	4252      	negs	r2, r2
 800633c:	61a2      	str	r2, [r4, #24]
 800633e:	6922      	ldr	r2, [r4, #16]
 8006340:	b942      	cbnz	r2, 8006354 <__swsetup_r+0xa4>
 8006342:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006346:	d1c5      	bne.n	80062d4 <__swsetup_r+0x24>
 8006348:	bd38      	pop	{r3, r4, r5, pc}
 800634a:	0799      	lsls	r1, r3, #30
 800634c:	bf58      	it	pl
 800634e:	6962      	ldrpl	r2, [r4, #20]
 8006350:	60a2      	str	r2, [r4, #8]
 8006352:	e7f4      	b.n	800633e <__swsetup_r+0x8e>
 8006354:	2000      	movs	r0, #0
 8006356:	e7f7      	b.n	8006348 <__swsetup_r+0x98>
 8006358:	24000020 	.word	0x24000020

0800635c <_sbrk_r>:
 800635c:	b538      	push	{r3, r4, r5, lr}
 800635e:	4d06      	ldr	r5, [pc, #24]	@ (8006378 <_sbrk_r+0x1c>)
 8006360:	2300      	movs	r3, #0
 8006362:	4604      	mov	r4, r0
 8006364:	4608      	mov	r0, r1
 8006366:	602b      	str	r3, [r5, #0]
 8006368:	f7fa febc 	bl	80010e4 <_sbrk>
 800636c:	1c43      	adds	r3, r0, #1
 800636e:	d102      	bne.n	8006376 <_sbrk_r+0x1a>
 8006370:	682b      	ldr	r3, [r5, #0]
 8006372:	b103      	cbz	r3, 8006376 <_sbrk_r+0x1a>
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	bd38      	pop	{r3, r4, r5, pc}
 8006378:	24000310 	.word	0x24000310

0800637c <__swhatbuf_r>:
 800637c:	b570      	push	{r4, r5, r6, lr}
 800637e:	460c      	mov	r4, r1
 8006380:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006384:	2900      	cmp	r1, #0
 8006386:	b096      	sub	sp, #88	@ 0x58
 8006388:	4615      	mov	r5, r2
 800638a:	461e      	mov	r6, r3
 800638c:	da0d      	bge.n	80063aa <__swhatbuf_r+0x2e>
 800638e:	89a3      	ldrh	r3, [r4, #12]
 8006390:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006394:	f04f 0100 	mov.w	r1, #0
 8006398:	bf14      	ite	ne
 800639a:	2340      	movne	r3, #64	@ 0x40
 800639c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80063a0:	2000      	movs	r0, #0
 80063a2:	6031      	str	r1, [r6, #0]
 80063a4:	602b      	str	r3, [r5, #0]
 80063a6:	b016      	add	sp, #88	@ 0x58
 80063a8:	bd70      	pop	{r4, r5, r6, pc}
 80063aa:	466a      	mov	r2, sp
 80063ac:	f000 f848 	bl	8006440 <_fstat_r>
 80063b0:	2800      	cmp	r0, #0
 80063b2:	dbec      	blt.n	800638e <__swhatbuf_r+0x12>
 80063b4:	9901      	ldr	r1, [sp, #4]
 80063b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80063ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80063be:	4259      	negs	r1, r3
 80063c0:	4159      	adcs	r1, r3
 80063c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80063c6:	e7eb      	b.n	80063a0 <__swhatbuf_r+0x24>

080063c8 <__smakebuf_r>:
 80063c8:	898b      	ldrh	r3, [r1, #12]
 80063ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80063cc:	079d      	lsls	r5, r3, #30
 80063ce:	4606      	mov	r6, r0
 80063d0:	460c      	mov	r4, r1
 80063d2:	d507      	bpl.n	80063e4 <__smakebuf_r+0x1c>
 80063d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80063d8:	6023      	str	r3, [r4, #0]
 80063da:	6123      	str	r3, [r4, #16]
 80063dc:	2301      	movs	r3, #1
 80063de:	6163      	str	r3, [r4, #20]
 80063e0:	b003      	add	sp, #12
 80063e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063e4:	ab01      	add	r3, sp, #4
 80063e6:	466a      	mov	r2, sp
 80063e8:	f7ff ffc8 	bl	800637c <__swhatbuf_r>
 80063ec:	9f00      	ldr	r7, [sp, #0]
 80063ee:	4605      	mov	r5, r0
 80063f0:	4639      	mov	r1, r7
 80063f2:	4630      	mov	r0, r6
 80063f4:	f7ff fb18 	bl	8005a28 <_malloc_r>
 80063f8:	b948      	cbnz	r0, 800640e <__smakebuf_r+0x46>
 80063fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80063fe:	059a      	lsls	r2, r3, #22
 8006400:	d4ee      	bmi.n	80063e0 <__smakebuf_r+0x18>
 8006402:	f023 0303 	bic.w	r3, r3, #3
 8006406:	f043 0302 	orr.w	r3, r3, #2
 800640a:	81a3      	strh	r3, [r4, #12]
 800640c:	e7e2      	b.n	80063d4 <__smakebuf_r+0xc>
 800640e:	89a3      	ldrh	r3, [r4, #12]
 8006410:	6020      	str	r0, [r4, #0]
 8006412:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006416:	81a3      	strh	r3, [r4, #12]
 8006418:	9b01      	ldr	r3, [sp, #4]
 800641a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800641e:	b15b      	cbz	r3, 8006438 <__smakebuf_r+0x70>
 8006420:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006424:	4630      	mov	r0, r6
 8006426:	f000 f81d 	bl	8006464 <_isatty_r>
 800642a:	b128      	cbz	r0, 8006438 <__smakebuf_r+0x70>
 800642c:	89a3      	ldrh	r3, [r4, #12]
 800642e:	f023 0303 	bic.w	r3, r3, #3
 8006432:	f043 0301 	orr.w	r3, r3, #1
 8006436:	81a3      	strh	r3, [r4, #12]
 8006438:	89a3      	ldrh	r3, [r4, #12]
 800643a:	431d      	orrs	r5, r3
 800643c:	81a5      	strh	r5, [r4, #12]
 800643e:	e7cf      	b.n	80063e0 <__smakebuf_r+0x18>

08006440 <_fstat_r>:
 8006440:	b538      	push	{r3, r4, r5, lr}
 8006442:	4d07      	ldr	r5, [pc, #28]	@ (8006460 <_fstat_r+0x20>)
 8006444:	2300      	movs	r3, #0
 8006446:	4604      	mov	r4, r0
 8006448:	4608      	mov	r0, r1
 800644a:	4611      	mov	r1, r2
 800644c:	602b      	str	r3, [r5, #0]
 800644e:	f7fa fe21 	bl	8001094 <_fstat>
 8006452:	1c43      	adds	r3, r0, #1
 8006454:	d102      	bne.n	800645c <_fstat_r+0x1c>
 8006456:	682b      	ldr	r3, [r5, #0]
 8006458:	b103      	cbz	r3, 800645c <_fstat_r+0x1c>
 800645a:	6023      	str	r3, [r4, #0]
 800645c:	bd38      	pop	{r3, r4, r5, pc}
 800645e:	bf00      	nop
 8006460:	24000310 	.word	0x24000310

08006464 <_isatty_r>:
 8006464:	b538      	push	{r3, r4, r5, lr}
 8006466:	4d06      	ldr	r5, [pc, #24]	@ (8006480 <_isatty_r+0x1c>)
 8006468:	2300      	movs	r3, #0
 800646a:	4604      	mov	r4, r0
 800646c:	4608      	mov	r0, r1
 800646e:	602b      	str	r3, [r5, #0]
 8006470:	f7fa fe20 	bl	80010b4 <_isatty>
 8006474:	1c43      	adds	r3, r0, #1
 8006476:	d102      	bne.n	800647e <_isatty_r+0x1a>
 8006478:	682b      	ldr	r3, [r5, #0]
 800647a:	b103      	cbz	r3, 800647e <_isatty_r+0x1a>
 800647c:	6023      	str	r3, [r4, #0]
 800647e:	bd38      	pop	{r3, r4, r5, pc}
 8006480:	24000310 	.word	0x24000310

08006484 <_init>:
 8006484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006486:	bf00      	nop
 8006488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800648a:	bc08      	pop	{r3}
 800648c:	469e      	mov	lr, r3
 800648e:	4770      	bx	lr

08006490 <_fini>:
 8006490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006492:	bf00      	nop
 8006494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006496:	bc08      	pop	{r3}
 8006498:	469e      	mov	lr, r3
 800649a:	4770      	bx	lr
