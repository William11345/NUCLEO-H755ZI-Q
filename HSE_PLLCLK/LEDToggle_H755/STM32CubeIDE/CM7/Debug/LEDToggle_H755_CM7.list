
LEDToggle_H755_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bcc  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08003e64  08003e64  00004e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003e98  08003e98  0000502c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003e98  08003e98  00004e98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003ea0  08003ea0  0000502c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ea0  08003ea0  00004ea0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003ea4  08003ea4  00004ea4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  24000000  08003ea8  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000cc  2400002c  08003ed4  0000502c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  240000f8  08003ed4  000050f8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000502c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000feef  00000000  00000000  0000505a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fe6  00000000  00000000  00014f49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  00016f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b9  00000000  00000000  00017a98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003989c  00000000  00000000  00018351  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb11  00000000  00000000  00051bed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017bd00  00000000  00000000  000616fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001dd3fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e60  00000000  00000000  001dd444  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  001e02a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400002c 	.word	0x2400002c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08003e4c 	.word	0x08003e4c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000030 	.word	0x24000030
 80002d4:	08003e4c 	.word	0x08003e4c

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800060a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800060e:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000610:	bf00      	nop
 8000612:	4b38      	ldr	r3, [pc, #224]	@ (80006f4 <main+0xf0>)
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800061a:	2b00      	cmp	r3, #0
 800061c:	d004      	beq.n	8000628 <main+0x24>
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	1e5a      	subs	r2, r3, #1
 8000622:	607a      	str	r2, [r7, #4]
 8000624:	2b00      	cmp	r3, #0
 8000626:	dcf4      	bgt.n	8000612 <main+0xe>
  if ( timeout < 0 )
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	2b00      	cmp	r3, #0
 800062c:	da01      	bge.n	8000632 <main+0x2e>
  {
  Error_Handler();
 800062e:	f000 f98b 	bl	8000948 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000632:	f000 fc99 	bl	8000f68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000636:	f000 f863 	bl	8000700 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800063a:	4b2e      	ldr	r3, [pc, #184]	@ (80006f4 <main+0xf0>)
 800063c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000640:	4a2c      	ldr	r2, [pc, #176]	@ (80006f4 <main+0xf0>)
 8000642:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000646:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800064a:	4b2a      	ldr	r3, [pc, #168]	@ (80006f4 <main+0xf0>)
 800064c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000650:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000654:	603b      	str	r3, [r7, #0]
 8000656:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000658:	2000      	movs	r0, #0
 800065a:	f001 f8bd 	bl	80017d8 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800065e:	2100      	movs	r1, #0
 8000660:	2000      	movs	r0, #0
 8000662:	f001 f8d3 	bl	800180c <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000666:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800066a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800066c:	bf00      	nop
 800066e:	4b21      	ldr	r3, [pc, #132]	@ (80006f4 <main+0xf0>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000676:	2b00      	cmp	r3, #0
 8000678:	d104      	bne.n	8000684 <main+0x80>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	1e5a      	subs	r2, r3, #1
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	2b00      	cmp	r3, #0
 8000682:	dcf4      	bgt.n	800066e <main+0x6a>
if ( timeout < 0 )
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	2b00      	cmp	r3, #0
 8000688:	da01      	bge.n	800068e <main+0x8a>
{
Error_Handler();
 800068a:	f000 f95d 	bl	8000948 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068e:	f000 f8b3 	bl	80007f8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000692:	2000      	movs	r0, #0
 8000694:	f000 f9da 	bl	8000a4c <BSP_LED_Init>
  BSP_LED_Init(LED_YELLOW);
 8000698:	2001      	movs	r0, #1
 800069a:	f000 f9d7 	bl	8000a4c <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 800069e:	2002      	movs	r0, #2
 80006a0:	f000 f9d4 	bl	8000a4c <BSP_LED_Init>

  /* Initialize USER push-button, will be used to trigger an interrupt each time it's pressed.*/
  BSP_PB_Init(BUTTON_USER, BUTTON_MODE_EXTI);
 80006a4:	2101      	movs	r1, #1
 80006a6:	2000      	movs	r0, #0
 80006a8:	f000 fa46 	bl	8000b38 <BSP_PB_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80006ac:	4b12      	ldr	r3, [pc, #72]	@ (80006f8 <main+0xf4>)
 80006ae:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80006b2:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80006b4:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <main+0xf4>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80006ba:	4b0f      	ldr	r3, [pc, #60]	@ (80006f8 <main+0xf4>)
 80006bc:	2200      	movs	r2, #0
 80006be:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80006c0:	4b0d      	ldr	r3, [pc, #52]	@ (80006f8 <main+0xf4>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <main+0xf4>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80006cc:	490a      	ldr	r1, [pc, #40]	@ (80006f8 <main+0xf4>)
 80006ce:	2000      	movs	r0, #0
 80006d0:	f000 fac2 	bl	8000c58 <BSP_COM_Init>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <main+0xda>
  {
    Error_Handler();
 80006da:	f000 f935 	bl	8000948 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80006de:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80006e2:	4806      	ldr	r0, [pc, #24]	@ (80006fc <main+0xf8>)
 80006e4:	f001 f85d 	bl	80017a2 <HAL_GPIO_TogglePin>
	 HAL_Delay(100);
 80006e8:	2064      	movs	r0, #100	@ 0x64
 80006ea:	f000 fccf 	bl	800108c <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_14);
 80006ee:	bf00      	nop
 80006f0:	e7f5      	b.n	80006de <main+0xda>
 80006f2:	bf00      	nop
 80006f4:	58024400 	.word	0x58024400
 80006f8:	24000048 	.word	0x24000048
 80006fc:	58020400 	.word	0x58020400

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b09c      	sub	sp, #112	@ 0x70
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800070a:	224c      	movs	r2, #76	@ 0x4c
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f003 fb70 	bl	8003df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	1d3b      	adds	r3, r7, #4
 8000716:	2220      	movs	r2, #32
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f003 fb6a 	bl	8003df4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000720:	2004      	movs	r0, #4
 8000722:	f001 f887 	bl	8001834 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000726:	2300      	movs	r3, #0
 8000728:	603b      	str	r3, [r7, #0]
 800072a:	4b31      	ldr	r3, [pc, #196]	@ (80007f0 <SystemClock_Config+0xf0>)
 800072c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800072e:	4a30      	ldr	r2, [pc, #192]	@ (80007f0 <SystemClock_Config+0xf0>)
 8000730:	f023 0301 	bic.w	r3, r3, #1
 8000734:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000736:	4b2e      	ldr	r3, [pc, #184]	@ (80007f0 <SystemClock_Config+0xf0>)
 8000738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800073a:	f003 0301 	and.w	r3, r3, #1
 800073e:	603b      	str	r3, [r7, #0]
 8000740:	4b2c      	ldr	r3, [pc, #176]	@ (80007f4 <SystemClock_Config+0xf4>)
 8000742:	699b      	ldr	r3, [r3, #24]
 8000744:	4a2b      	ldr	r2, [pc, #172]	@ (80007f4 <SystemClock_Config+0xf4>)
 8000746:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800074a:	6193      	str	r3, [r2, #24]
 800074c:	4b29      	ldr	r3, [pc, #164]	@ (80007f4 <SystemClock_Config+0xf4>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000754:	603b      	str	r3, [r7, #0]
 8000756:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000758:	bf00      	nop
 800075a:	4b26      	ldr	r3, [pc, #152]	@ (80007f4 <SystemClock_Config+0xf4>)
 800075c:	699b      	ldr	r3, [r3, #24]
 800075e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000762:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000766:	d1f8      	bne.n	800075a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000768:	2302      	movs	r3, #2
 800076a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800076c:	2301      	movs	r3, #1
 800076e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000770:	2340      	movs	r3, #64	@ 0x40
 8000772:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000774:	2302      	movs	r3, #2
 8000776:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000778:	2300      	movs	r3, #0
 800077a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800077c:	2304      	movs	r3, #4
 800077e:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8000780:	2332      	movs	r3, #50	@ 0x32
 8000782:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000784:	2302      	movs	r3, #2
 8000786:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000788:	2305      	movs	r3, #5
 800078a:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800078c:	2302      	movs	r3, #2
 800078e:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000790:	230c      	movs	r3, #12
 8000792:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000794:	2300      	movs	r3, #0
 8000796:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000798:	2300      	movs	r3, #0
 800079a:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800079c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a0:	4618      	mov	r0, r3
 80007a2:	f001 f8a1 	bl	80018e8 <HAL_RCC_OscConfig>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80007ac:	f000 f8cc 	bl	8000948 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b0:	233f      	movs	r3, #63	@ 0x3f
 80007b2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007b4:	2303      	movs	r3, #3
 80007b6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80007b8:	2300      	movs	r3, #0
 80007ba:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80007bc:	2308      	movs	r3, #8
 80007be:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80007c0:	2340      	movs	r3, #64	@ 0x40
 80007c2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80007c4:	2340      	movs	r3, #64	@ 0x40
 80007c6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80007c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007cc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80007ce:	2340      	movs	r3, #64	@ 0x40
 80007d0:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d2:	1d3b      	adds	r3, r7, #4
 80007d4:	2102      	movs	r1, #2
 80007d6:	4618      	mov	r0, r3
 80007d8:	f001 fce0 	bl	800219c <HAL_RCC_ClockConfig>
 80007dc:	4603      	mov	r3, r0
 80007de:	2b00      	cmp	r3, #0
 80007e0:	d001      	beq.n	80007e6 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80007e2:	f000 f8b1 	bl	8000948 <Error_Handler>
  }
}
 80007e6:	bf00      	nop
 80007e8:	3770      	adds	r7, #112	@ 0x70
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	58000400 	.word	0x58000400
 80007f4:	58024800 	.word	0x58024800

080007f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b08a      	sub	sp, #40	@ 0x28
 80007fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	2200      	movs	r2, #0
 8000804:	601a      	str	r2, [r3, #0]
 8000806:	605a      	str	r2, [r3, #4]
 8000808:	609a      	str	r2, [r3, #8]
 800080a:	60da      	str	r2, [r3, #12]
 800080c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800080e:	4b49      	ldr	r3, [pc, #292]	@ (8000934 <MX_GPIO_Init+0x13c>)
 8000810:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000814:	4a47      	ldr	r2, [pc, #284]	@ (8000934 <MX_GPIO_Init+0x13c>)
 8000816:	f043 0304 	orr.w	r3, r3, #4
 800081a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800081e:	4b45      	ldr	r3, [pc, #276]	@ (8000934 <MX_GPIO_Init+0x13c>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000824:	f003 0304 	and.w	r3, r3, #4
 8000828:	613b      	str	r3, [r7, #16]
 800082a:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800082c:	4b41      	ldr	r3, [pc, #260]	@ (8000934 <MX_GPIO_Init+0x13c>)
 800082e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000832:	4a40      	ldr	r2, [pc, #256]	@ (8000934 <MX_GPIO_Init+0x13c>)
 8000834:	f043 0301 	orr.w	r3, r3, #1
 8000838:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800083c:	4b3d      	ldr	r3, [pc, #244]	@ (8000934 <MX_GPIO_Init+0x13c>)
 800083e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000842:	f003 0301 	and.w	r3, r3, #1
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084a:	4b3a      	ldr	r3, [pc, #232]	@ (8000934 <MX_GPIO_Init+0x13c>)
 800084c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000850:	4a38      	ldr	r2, [pc, #224]	@ (8000934 <MX_GPIO_Init+0x13c>)
 8000852:	f043 0302 	orr.w	r3, r3, #2
 8000856:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800085a:	4b36      	ldr	r3, [pc, #216]	@ (8000934 <MX_GPIO_Init+0x13c>)
 800085c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000860:	f003 0302 	and.w	r3, r3, #2
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000868:	4b32      	ldr	r3, [pc, #200]	@ (8000934 <MX_GPIO_Init+0x13c>)
 800086a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800086e:	4a31      	ldr	r2, [pc, #196]	@ (8000934 <MX_GPIO_Init+0x13c>)
 8000870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000874:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000878:	4b2e      	ldr	r3, [pc, #184]	@ (8000934 <MX_GPIO_Init+0x13c>)
 800087a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800087e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pins : PC1 PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000886:	2332      	movs	r3, #50	@ 0x32
 8000888:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000892:	2300      	movs	r3, #0
 8000894:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000896:	230b      	movs	r3, #11
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800089a:	f107 0314 	add.w	r3, r7, #20
 800089e:	4619      	mov	r1, r3
 80008a0:	4825      	ldr	r0, [pc, #148]	@ (8000938 <MX_GPIO_Init+0x140>)
 80008a2:	f000 fdb5 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80008a6:	2386      	movs	r3, #134	@ 0x86
 80008a8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b2:	2300      	movs	r3, #0
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b6:	230b      	movs	r3, #11
 80008b8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ba:	f107 0314 	add.w	r3, r7, #20
 80008be:	4619      	mov	r1, r3
 80008c0:	481e      	ldr	r0, [pc, #120]	@ (800093c <MX_GPIO_Init+0x144>)
 80008c2:	f000 fda5 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008cc:	2302      	movs	r3, #2
 80008ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d0:	2300      	movs	r3, #0
 80008d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008d8:	230b      	movs	r3, #11
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4619      	mov	r1, r3
 80008e2:	4817      	ldr	r0, [pc, #92]	@ (8000940 <MX_GPIO_Init+0x148>)
 80008e4:	f000 fd94 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80008e8:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 80008ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ee:	2302      	movs	r3, #2
 80008f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f2:	2300      	movs	r3, #0
 80008f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f6:	2300      	movs	r3, #0
 80008f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80008fa:	230a      	movs	r3, #10
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fe:	f107 0314 	add.w	r3, r7, #20
 8000902:	4619      	mov	r1, r3
 8000904:	480d      	ldr	r0, [pc, #52]	@ (800093c <MX_GPIO_Init+0x144>)
 8000906:	f000 fd83 	bl	8001410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG11 PG13 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800090a:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 800090e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800091c:	230b      	movs	r3, #11
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000920:	f107 0314 	add.w	r3, r7, #20
 8000924:	4619      	mov	r1, r3
 8000926:	4807      	ldr	r0, [pc, #28]	@ (8000944 <MX_GPIO_Init+0x14c>)
 8000928:	f000 fd72 	bl	8001410 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800092c:	bf00      	nop
 800092e:	3728      	adds	r7, #40	@ 0x28
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	58024400 	.word	0x58024400
 8000938:	58020800 	.word	0x58020800
 800093c:	58020000 	.word	0x58020000
 8000940:	58020400 	.word	0x58020400
 8000944:	58021800 	.word	0x58021800

08000948 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800094c:	b672      	cpsid	i
}
 800094e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000950:	bf00      	nop
 8000952:	e7fd      	b.n	8000950 <Error_Handler+0x8>

08000954 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	b083      	sub	sp, #12
 8000958:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	4b0a      	ldr	r3, [pc, #40]	@ (8000984 <HAL_MspInit+0x30>)
 800095c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000960:	4a08      	ldr	r2, [pc, #32]	@ (8000984 <HAL_MspInit+0x30>)
 8000962:	f043 0302 	orr.w	r3, r3, #2
 8000966:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <HAL_MspInit+0x30>)
 800096c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000970:	f003 0302 	and.w	r3, r3, #2
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000978:	bf00      	nop
 800097a:	370c      	adds	r7, #12
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr
 8000984:	58024400 	.word	0x58024400

08000988 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <NMI_Handler+0x4>

08000990 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <HardFault_Handler+0x4>

08000998 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <MemManage_Handler+0x4>

080009a0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009a4:	bf00      	nop
 80009a6:	e7fd      	b.n	80009a4 <BusFault_Handler+0x4>

080009a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <UsageFault_Handler+0x4>

080009b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009da:	b580      	push	{r7, lr}
 80009dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009de:	f000 fb35 	bl	800104c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	bd80      	pop	{r7, pc}

080009e6 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009e6:	b580      	push	{r7, lr}
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  BSP_PB_IRQHandler(BUTTON_USER);
 80009ea:	2000      	movs	r0, #0
 80009ec:	f000 f916 	bl	8000c1c <BSP_PB_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80009f0:	bf00      	nop
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80009f4:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000a30 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80009f8:	f000 fa9e 	bl	8000f38 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009fc:	f000 f9ee 	bl	8000ddc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a00:	480c      	ldr	r0, [pc, #48]	@ (8000a34 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a02:	490d      	ldr	r1, [pc, #52]	@ (8000a38 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a04:	4a0d      	ldr	r2, [pc, #52]	@ (8000a3c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a08:	e002      	b.n	8000a10 <LoopCopyDataInit>

08000a0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a0e:	3304      	adds	r3, #4

08000a10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a14:	d3f9      	bcc.n	8000a0a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a16:	4a0a      	ldr	r2, [pc, #40]	@ (8000a40 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a18:	4c0a      	ldr	r4, [pc, #40]	@ (8000a44 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a1c:	e001      	b.n	8000a22 <LoopFillZerobss>

08000a1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a20:	3204      	adds	r2, #4

08000a22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a24:	d3fb      	bcc.n	8000a1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a26:	f003 f9ed 	bl	8003e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2a:	f7ff fdeb 	bl	8000604 <main>
  bx  lr
 8000a2e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000a30:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000a34:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000a38:	2400002c 	.word	0x2400002c
  ldr r2, =_sidata
 8000a3c:	08003ea8 	.word	0x08003ea8
  ldr r2, =_sbss
 8000a40:	2400002c 	.word	0x2400002c
  ldr r4, =_ebss
 8000a44:	240000f8 	.word	0x240000f8

08000a48 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a48:	e7fe      	b.n	8000a48 <ADC3_IRQHandler>
	...

08000a4c <BSP_LED_Init>:
  *     @arg  LED2
  *     @arg  LED3
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08c      	sub	sp, #48	@ 0x30
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitTypeDef  gpio_init_structure;

  if((Led != LED1) && (Led != LED2) && (Led != LED3))
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d009      	beq.n	8000a74 <BSP_LED_Init+0x28>
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d006      	beq.n	8000a74 <BSP_LED_Init+0x28>
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	2b02      	cmp	r3, #2
 8000a6a:	d003      	beq.n	8000a74 <BSP_LED_Init+0x28>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000a6c:	f06f 0301 	mvn.w	r3, #1
 8000a70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000a72:	e055      	b.n	8000b20 <BSP_LED_Init+0xd4>
  }
  else
  {
    /* Enable the GPIO LED Clock */
    if(Led == LED1)
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d10f      	bne.n	8000a9a <BSP_LED_Init+0x4e>
    {
      LED1_GPIO_CLK_ENABLE();
 8000a7a:	4b2c      	ldr	r3, [pc, #176]	@ (8000b2c <BSP_LED_Init+0xe0>)
 8000a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a80:	4a2a      	ldr	r2, [pc, #168]	@ (8000b2c <BSP_LED_Init+0xe0>)
 8000a82:	f043 0302 	orr.w	r3, r3, #2
 8000a86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a8a:	4b28      	ldr	r3, [pc, #160]	@ (8000b2c <BSP_LED_Init+0xe0>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a90:	f003 0302 	and.w	r3, r3, #2
 8000a94:	617b      	str	r3, [r7, #20]
 8000a96:	697b      	ldr	r3, [r7, #20]
 8000a98:	e021      	b.n	8000ade <BSP_LED_Init+0x92>
    }
    else if(Led == LED2)
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d10f      	bne.n	8000ac0 <BSP_LED_Init+0x74>
    {
      LED2_GPIO_CLK_ENABLE();
 8000aa0:	4b22      	ldr	r3, [pc, #136]	@ (8000b2c <BSP_LED_Init+0xe0>)
 8000aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000aa6:	4a21      	ldr	r2, [pc, #132]	@ (8000b2c <BSP_LED_Init+0xe0>)
 8000aa8:	f043 0310 	orr.w	r3, r3, #16
 8000aac:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ab0:	4b1e      	ldr	r3, [pc, #120]	@ (8000b2c <BSP_LED_Init+0xe0>)
 8000ab2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ab6:	f003 0310 	and.w	r3, r3, #16
 8000aba:	613b      	str	r3, [r7, #16]
 8000abc:	693b      	ldr	r3, [r7, #16]
 8000abe:	e00e      	b.n	8000ade <BSP_LED_Init+0x92>
    }
    else
    {
      LED3_GPIO_CLK_ENABLE();
 8000ac0:	4b1a      	ldr	r3, [pc, #104]	@ (8000b2c <BSP_LED_Init+0xe0>)
 8000ac2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ac6:	4a19      	ldr	r2, [pc, #100]	@ (8000b2c <BSP_LED_Init+0xe0>)
 8000ac8:	f043 0302 	orr.w	r3, r3, #2
 8000acc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ad0:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <BSP_LED_Init+0xe0>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ad6:	f003 0302 	and.w	r3, r3, #2
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]
    }
    /* Configure the GPIO_LED pin */
    gpio_init_structure.Pin   = LED_PIN[Led];
 8000ade:	79fb      	ldrb	r3, [r7, #7]
 8000ae0:	4a13      	ldr	r2, [pc, #76]	@ (8000b30 <BSP_LED_Init+0xe4>)
 8000ae2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ae6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Pull  = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	627b      	str	r3, [r7, #36]	@ 0x24

    HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	4a0f      	ldr	r2, [pc, #60]	@ (8000b34 <BSP_LED_Init+0xe8>)
 8000af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afc:	f107 0218 	add.w	r2, r7, #24
 8000b00:	4611      	mov	r1, r2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f000 fc84 	bl	8001410 <HAL_GPIO_Init>
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b34 <BSP_LED_Init+0xe8>)
 8000b0c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	4a07      	ldr	r2, [pc, #28]	@ (8000b30 <BSP_LED_Init+0xe4>)
 8000b14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b18:	2200      	movs	r2, #0
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	f000 fe28 	bl	8001770 <HAL_GPIO_WritePin>
  }

  return ret;
 8000b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3730      	adds	r7, #48	@ 0x30
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	58024400 	.word	0x58024400
 8000b30:	08003e64 	.word	0x08003e64
 8000b34:	24000004 	.word	0x24000004

08000b38 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_GPIO: Button will be used as simple IO
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  */
int32_t BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b088      	sub	sp, #32
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	460a      	mov	r2, r1
 8000b42:	71fb      	strb	r3, [r7, #7]
 8000b44:	4613      	mov	r3, r2
 8000b46:	71bb      	strb	r3, [r7, #6]
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] = {BUTTON_USER_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] = {BSP_BUTTON_USER_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] = {BUTTON_USER_EXTI_LINE};

  /* Enable the BUTTON clock */
  BUTTON_USER_GPIO_CLK_ENABLE();
 8000b48:	4b2e      	ldr	r3, [pc, #184]	@ (8000c04 <BSP_PB_Init+0xcc>)
 8000b4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b4e:	4a2d      	ldr	r2, [pc, #180]	@ (8000c04 <BSP_PB_Init+0xcc>)
 8000b50:	f043 0304 	orr.w	r3, r3, #4
 8000b54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b58:	4b2a      	ldr	r3, [pc, #168]	@ (8000c04 <BSP_PB_Init+0xcc>)
 8000b5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b5e:	f003 0304 	and.w	r3, r3, #4
 8000b62:	60bb      	str	r3, [r7, #8]
 8000b64:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8000b66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b6a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_PULLDOWN;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b70:	2302      	movs	r3, #2
 8000b72:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8000b74:	79bb      	ldrb	r3, [r7, #6]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d10c      	bne.n	8000b94 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 8000b7e:	79fb      	ldrb	r3, [r7, #7]
 8000b80:	4a21      	ldr	r2, [pc, #132]	@ (8000c08 <BSP_PB_Init+0xd0>)
 8000b82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b86:	f107 020c 	add.w	r2, r7, #12
 8000b8a:	4611      	mov	r1, r2
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f000 fc3f 	bl	8001410 <HAL_GPIO_Init>
 8000b92:	e031      	b.n	8000bf8 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 8000b94:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000b98:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 8000b9a:	79fb      	ldrb	r3, [r7, #7]
 8000b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8000c08 <BSP_PB_Init+0xd0>)
 8000b9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ba2:	f107 020c 	add.w	r2, r7, #12
 8000ba6:	4611      	mov	r1, r2
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f000 fc31 	bl	8001410 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 8000bae:	79fb      	ldrb	r3, [r7, #7]
 8000bb0:	00db      	lsls	r3, r3, #3
 8000bb2:	4a16      	ldr	r2, [pc, #88]	@ (8000c0c <BSP_PB_Init+0xd4>)
 8000bb4:	441a      	add	r2, r3
 8000bb6:	79fb      	ldrb	r3, [r7, #7]
 8000bb8:	4915      	ldr	r1, [pc, #84]	@ (8000c10 <BSP_PB_Init+0xd8>)
 8000bba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	4610      	mov	r0, r2
 8000bc2:	f000 fbd4 	bl	800136e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 8000bc6:	79fb      	ldrb	r3, [r7, #7]
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	4a10      	ldr	r2, [pc, #64]	@ (8000c0c <BSP_PB_Init+0xd4>)
 8000bcc:	1898      	adds	r0, r3, r2
 8000bce:	79fb      	ldrb	r3, [r7, #7]
 8000bd0:	4a10      	ldr	r2, [pc, #64]	@ (8000c14 <BSP_PB_Init+0xdc>)
 8000bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bd6:	461a      	mov	r2, r3
 8000bd8:	2100      	movs	r1, #0
 8000bda:	f000 fba9 	bl	8001330 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 8000bde:	2028      	movs	r0, #40	@ 0x28
 8000be0:	79fb      	ldrb	r3, [r7, #7]
 8000be2:	4a0d      	ldr	r2, [pc, #52]	@ (8000c18 <BSP_PB_Init+0xe0>)
 8000be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000be8:	2200      	movs	r2, #0
 8000bea:	4619      	mov	r1, r3
 8000bec:	f000 fb59 	bl	80012a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8000bf0:	2328      	movs	r3, #40	@ 0x28
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	f000 fb6f 	bl	80012d6 <HAL_NVIC_EnableIRQ>
  }

  return BSP_ERROR_NONE;
 8000bf8:	2300      	movs	r3, #0
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3720      	adds	r7, #32
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	58024400 	.word	0x58024400
 8000c08:	24000010 	.word	0x24000010
 8000c0c:	24000058 	.word	0x24000058
 8000c10:	08003e6c 	.word	0x08003e6c
 8000c14:	24000014 	.word	0x24000014
 8000c18:	24000018 	.word	0x24000018

08000c1c <BSP_PB_IRQHandler>:
  * @brief  BSP Button IRQ handler
  * @param  Button Can only be BUTTON_USER
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	4603      	mov	r3, r0
 8000c24:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8000c26:	79fb      	ldrb	r3, [r7, #7]
 8000c28:	00db      	lsls	r3, r3, #3
 8000c2a:	4a04      	ldr	r2, [pc, #16]	@ (8000c3c <BSP_PB_IRQHandler+0x20>)
 8000c2c:	4413      	add	r3, r2
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f000 fbb2 	bl	8001398 <HAL_EXTI_IRQHandler>
}
 8000c34:	bf00      	nop
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	24000058 	.word	0x24000058

08000c40 <BSP_PB_Callback>:
  * @brief  BSP Push Button callback
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
__weak void BSP_PB_Callback(Button_TypeDef Button)
{
 8000c40:	b480      	push	{r7}
 8000c42:	b083      	sub	sp, #12
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	4603      	mov	r3, r0
 8000c48:	71fb      	strb	r3, [r7, #7]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Button);

  /* This function should be implemented by the user application.
     It is called into this driver when an event on Button is triggered. */
}
 8000c4a:	bf00      	nop
 8000c4c:	370c      	adds	r7, #12
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c54:	4770      	bx	lr
	...

08000c58 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	6039      	str	r1, [r7, #0]
 8000c62:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d003      	beq.n	8000c76 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000c6e:	f06f 0301 	mvn.w	r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	e018      	b.n	8000ca8 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	2294      	movs	r2, #148	@ 0x94
 8000c7a:	fb02 f303 	mul.w	r3, r2, r3
 8000c7e:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <BSP_COM_Init+0x5c>)
 8000c80:	4413      	add	r3, r2
 8000c82:	4618      	mov	r0, r3
 8000c84:	f000 f852 	bl	8000d2c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000c88:	79fb      	ldrb	r3, [r7, #7]
 8000c8a:	2294      	movs	r2, #148	@ 0x94
 8000c8c:	fb02 f303 	mul.w	r3, r2, r3
 8000c90:	4a08      	ldr	r2, [pc, #32]	@ (8000cb4 <BSP_COM_Init+0x5c>)
 8000c92:	4413      	add	r3, r2
 8000c94:	6839      	ldr	r1, [r7, #0]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f000 f80e 	bl	8000cb8 <MX_USART3_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d002      	beq.n	8000ca8 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000ca2:	f06f 0303 	mvn.w	r3, #3
 8000ca6:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000ca8:	68fb      	ldr	r3, [r7, #12]
}
 8000caa:	4618      	mov	r0, r3
 8000cac:	3710      	adds	r7, #16
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	24000060 	.word	0x24000060

08000cb8 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
 8000cc0:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000cc2:	4b15      	ldr	r3, [pc, #84]	@ (8000d18 <MX_USART3_Init+0x60>)
 8000cc4:	681a      	ldr	r2, [r3, #0]
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8000cca:	683b      	ldr	r3, [r7, #0]
 8000ccc:	681a      	ldr	r2, [r3, #0]
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	220c      	movs	r2, #12
 8000cd6:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	895b      	ldrh	r3, [r3, #10]
 8000cdc:	461a      	mov	r2, r3
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685a      	ldr	r2, [r3, #4]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	891b      	ldrh	r3, [r3, #8]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	899b      	ldrh	r3, [r3, #12]
 8000cf8:	461a      	mov	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000d04:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8000d06:	6878      	ldr	r0, [r7, #4]
 8000d08:	f002 f892 	bl	8002e30 <HAL_UART_Init>
 8000d0c:	4603      	mov	r3, r0
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}
 8000d16:	bf00      	nop
 8000d18:	24000000 	.word	0x24000000

08000d1c <BUTTON_USER_EXTI_Callback>:
/**
  * @brief  Key EXTI line detection callbacks.
  * @retval BSP status
  */
static void BUTTON_USER_EXTI_Callback(void)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_USER);
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff ff8d 	bl	8000c40 <BSP_PB_Callback>
}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
	...

08000d2c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	@ 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8000d34:	4b27      	ldr	r3, [pc, #156]	@ (8000dd4 <COM1_MspInit+0xa8>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3a:	4a26      	ldr	r2, [pc, #152]	@ (8000dd4 <COM1_MspInit+0xa8>)
 8000d3c:	f043 0308 	orr.w	r3, r3, #8
 8000d40:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d44:	4b23      	ldr	r3, [pc, #140]	@ (8000dd4 <COM1_MspInit+0xa8>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d4a:	f003 0308 	and.w	r3, r3, #8
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8000d52:	4b20      	ldr	r3, [pc, #128]	@ (8000dd4 <COM1_MspInit+0xa8>)
 8000d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d58:	4a1e      	ldr	r2, [pc, #120]	@ (8000dd4 <COM1_MspInit+0xa8>)
 8000d5a:	f043 0308 	orr.w	r3, r3, #8
 8000d5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d62:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd4 <COM1_MspInit+0xa8>)
 8000d64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d68:	f003 0308 	and.w	r3, r3, #8
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8000d70:	4b18      	ldr	r3, [pc, #96]	@ (8000dd4 <COM1_MspInit+0xa8>)
 8000d72:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d76:	4a17      	ldr	r2, [pc, #92]	@ (8000dd4 <COM1_MspInit+0xa8>)
 8000d78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000d7c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000d80:	4b14      	ldr	r3, [pc, #80]	@ (8000dd4 <COM1_MspInit+0xa8>)
 8000d82:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000d86:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000d8a:	60bb      	str	r3, [r7, #8]
 8000d8c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8000d8e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d92:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8000da0:	2307      	movs	r3, #7
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	480b      	ldr	r0, [pc, #44]	@ (8000dd8 <COM1_MspInit+0xac>)
 8000dac:	f000 fb30 	bl	8001410 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8000db0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000db4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8000db6:	2302      	movs	r3, #2
 8000db8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 8000dba:	2307      	movs	r3, #7
 8000dbc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4804      	ldr	r0, [pc, #16]	@ (8000dd8 <COM1_MspInit+0xac>)
 8000dc6:	f000 fb23 	bl	8001410 <HAL_GPIO_Init>
}
 8000dca:	bf00      	nop
 8000dcc:	3728      	adds	r7, #40	@ 0x28
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	58024400 	.word	0x58024400
 8000dd8:	58020c00 	.word	0x58020c00

08000ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000de0:	4b49      	ldr	r3, [pc, #292]	@ (8000f08 <SystemInit+0x12c>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000de6:	4a48      	ldr	r2, [pc, #288]	@ (8000f08 <SystemInit+0x12c>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000df0:	4b45      	ldr	r3, [pc, #276]	@ (8000f08 <SystemInit+0x12c>)
 8000df2:	691b      	ldr	r3, [r3, #16]
 8000df4:	4a44      	ldr	r2, [pc, #272]	@ (8000f08 <SystemInit+0x12c>)
 8000df6:	f043 0310 	orr.w	r3, r3, #16
 8000dfa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000dfc:	4b43      	ldr	r3, [pc, #268]	@ (8000f0c <SystemInit+0x130>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	f003 030f 	and.w	r3, r3, #15
 8000e04:	2b06      	cmp	r3, #6
 8000e06:	d807      	bhi.n	8000e18 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e08:	4b40      	ldr	r3, [pc, #256]	@ (8000f0c <SystemInit+0x130>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	f023 030f 	bic.w	r3, r3, #15
 8000e10:	4a3e      	ldr	r2, [pc, #248]	@ (8000f0c <SystemInit+0x130>)
 8000e12:	f043 0307 	orr.w	r3, r3, #7
 8000e16:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e18:	4b3d      	ldr	r3, [pc, #244]	@ (8000f10 <SystemInit+0x134>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a3c      	ldr	r2, [pc, #240]	@ (8000f10 <SystemInit+0x134>)
 8000e1e:	f043 0301 	orr.w	r3, r3, #1
 8000e22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e24:	4b3a      	ldr	r3, [pc, #232]	@ (8000f10 <SystemInit+0x134>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e2a:	4b39      	ldr	r3, [pc, #228]	@ (8000f10 <SystemInit+0x134>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	4938      	ldr	r1, [pc, #224]	@ (8000f10 <SystemInit+0x134>)
 8000e30:	4b38      	ldr	r3, [pc, #224]	@ (8000f14 <SystemInit+0x138>)
 8000e32:	4013      	ands	r3, r2
 8000e34:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e36:	4b35      	ldr	r3, [pc, #212]	@ (8000f0c <SystemInit+0x130>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f003 0308 	and.w	r3, r3, #8
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d007      	beq.n	8000e52 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e42:	4b32      	ldr	r3, [pc, #200]	@ (8000f0c <SystemInit+0x130>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	f023 030f 	bic.w	r3, r3, #15
 8000e4a:	4a30      	ldr	r2, [pc, #192]	@ (8000f0c <SystemInit+0x130>)
 8000e4c:	f043 0307 	orr.w	r3, r3, #7
 8000e50:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e52:	4b2f      	ldr	r3, [pc, #188]	@ (8000f10 <SystemInit+0x134>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e58:	4b2d      	ldr	r3, [pc, #180]	@ (8000f10 <SystemInit+0x134>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000e5e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f10 <SystemInit+0x134>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000e64:	4b2a      	ldr	r3, [pc, #168]	@ (8000f10 <SystemInit+0x134>)
 8000e66:	4a2c      	ldr	r2, [pc, #176]	@ (8000f18 <SystemInit+0x13c>)
 8000e68:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000e6a:	4b29      	ldr	r3, [pc, #164]	@ (8000f10 <SystemInit+0x134>)
 8000e6c:	4a2b      	ldr	r2, [pc, #172]	@ (8000f1c <SystemInit+0x140>)
 8000e6e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000e70:	4b27      	ldr	r3, [pc, #156]	@ (8000f10 <SystemInit+0x134>)
 8000e72:	4a2b      	ldr	r2, [pc, #172]	@ (8000f20 <SystemInit+0x144>)
 8000e74:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000e76:	4b26      	ldr	r3, [pc, #152]	@ (8000f10 <SystemInit+0x134>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000e7c:	4b24      	ldr	r3, [pc, #144]	@ (8000f10 <SystemInit+0x134>)
 8000e7e:	4a28      	ldr	r2, [pc, #160]	@ (8000f20 <SystemInit+0x144>)
 8000e80:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000e82:	4b23      	ldr	r3, [pc, #140]	@ (8000f10 <SystemInit+0x134>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000e88:	4b21      	ldr	r3, [pc, #132]	@ (8000f10 <SystemInit+0x134>)
 8000e8a:	4a25      	ldr	r2, [pc, #148]	@ (8000f20 <SystemInit+0x144>)
 8000e8c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000e8e:	4b20      	ldr	r3, [pc, #128]	@ (8000f10 <SystemInit+0x134>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000e94:	4b1e      	ldr	r3, [pc, #120]	@ (8000f10 <SystemInit+0x134>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a1d      	ldr	r2, [pc, #116]	@ (8000f10 <SystemInit+0x134>)
 8000e9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000e9e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f10 <SystemInit+0x134>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000ea6:	4b1f      	ldr	r3, [pc, #124]	@ (8000f24 <SystemInit+0x148>)
 8000ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eaa:	4a1e      	ldr	r2, [pc, #120]	@ (8000f24 <SystemInit+0x148>)
 8000eac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000eb0:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000eb2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f28 <SystemInit+0x14c>)
 8000eb4:	681a      	ldr	r2, [r3, #0]
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000f2c <SystemInit+0x150>)
 8000eb8:	4013      	ands	r3, r2
 8000eba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000ebe:	d202      	bcs.n	8000ec6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	@ (8000f30 <SystemInit+0x154>)
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000ec6:	4b12      	ldr	r3, [pc, #72]	@ (8000f10 <SystemInit+0x134>)
 8000ec8:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ecc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d113      	bne.n	8000efc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000ed4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f10 <SystemInit+0x134>)
 8000ed6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000eda:	4a0d      	ldr	r2, [pc, #52]	@ (8000f10 <SystemInit+0x134>)
 8000edc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ee0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000ee4:	4b13      	ldr	r3, [pc, #76]	@ (8000f34 <SystemInit+0x158>)
 8000ee6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000eea:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000eec:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <SystemInit+0x134>)
 8000eee:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000ef2:	4a07      	ldr	r2, [pc, #28]	@ (8000f10 <SystemInit+0x134>)
 8000ef4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000ef8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00
 8000f0c:	52002000 	.word	0x52002000
 8000f10:	58024400 	.word	0x58024400
 8000f14:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f18:	02020200 	.word	0x02020200
 8000f1c:	01ff0000 	.word	0x01ff0000
 8000f20:	01010280 	.word	0x01010280
 8000f24:	580000c0 	.word	0x580000c0
 8000f28:	5c001000 	.word	0x5c001000
 8000f2c:	ffff0000 	.word	0xffff0000
 8000f30:	51008108 	.word	0x51008108
 8000f34:	52004000 	.word	0x52004000

08000f38 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000f3c:	4b09      	ldr	r3, [pc, #36]	@ (8000f64 <ExitRun0Mode+0x2c>)
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	4a08      	ldr	r2, [pc, #32]	@ (8000f64 <ExitRun0Mode+0x2c>)
 8000f42:	f023 0302 	bic.w	r3, r3, #2
 8000f46:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000f48:	bf00      	nop
 8000f4a:	4b06      	ldr	r3, [pc, #24]	@ (8000f64 <ExitRun0Mode+0x2c>)
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d0f9      	beq.n	8000f4a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000f56:	bf00      	nop
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	58024800 	.word	0x58024800

08000f68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f6e:	2003      	movs	r0, #3
 8000f70:	f000 f98c 	bl	800128c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f74:	f001 fac8 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 8000f78:	4602      	mov	r2, r0
 8000f7a:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <HAL_Init+0x68>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	0a1b      	lsrs	r3, r3, #8
 8000f80:	f003 030f 	and.w	r3, r3, #15
 8000f84:	4913      	ldr	r1, [pc, #76]	@ (8000fd4 <HAL_Init+0x6c>)
 8000f86:	5ccb      	ldrb	r3, [r1, r3]
 8000f88:	f003 031f 	and.w	r3, r3, #31
 8000f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f90:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f92:	4b0f      	ldr	r3, [pc, #60]	@ (8000fd0 <HAL_Init+0x68>)
 8000f94:	699b      	ldr	r3, [r3, #24]
 8000f96:	f003 030f 	and.w	r3, r3, #15
 8000f9a:	4a0e      	ldr	r2, [pc, #56]	@ (8000fd4 <HAL_Init+0x6c>)
 8000f9c:	5cd3      	ldrb	r3, [r2, r3]
 8000f9e:	f003 031f 	and.w	r3, r3, #31
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fa8:	4a0b      	ldr	r2, [pc, #44]	@ (8000fd8 <HAL_Init+0x70>)
 8000faa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fac:	4a0b      	ldr	r2, [pc, #44]	@ (8000fdc <HAL_Init+0x74>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f000 f814 	bl	8000fe0 <HAL_InitTick>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e002      	b.n	8000fc8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fc2:	f7ff fcc7 	bl	8000954 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3708      	adds	r7, #8
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	58024400 	.word	0x58024400
 8000fd4:	08003e70 	.word	0x08003e70
 8000fd8:	24000020 	.word	0x24000020
 8000fdc:	2400001c 	.word	0x2400001c

08000fe0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b082      	sub	sp, #8
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fe8:	4b15      	ldr	r3, [pc, #84]	@ (8001040 <HAL_InitTick+0x60>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d101      	bne.n	8000ff4 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e021      	b.n	8001038 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ff4:	4b13      	ldr	r3, [pc, #76]	@ (8001044 <HAL_InitTick+0x64>)
 8000ff6:	681a      	ldr	r2, [r3, #0]
 8000ff8:	4b11      	ldr	r3, [pc, #68]	@ (8001040 <HAL_InitTick+0x60>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	4619      	mov	r1, r3
 8000ffe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001002:	fbb3 f3f1 	udiv	r3, r3, r1
 8001006:	fbb2 f3f3 	udiv	r3, r2, r3
 800100a:	4618      	mov	r0, r3
 800100c:	f000 f971 	bl	80012f2 <HAL_SYSTICK_Config>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001016:	2301      	movs	r3, #1
 8001018:	e00e      	b.n	8001038 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	2b0f      	cmp	r3, #15
 800101e:	d80a      	bhi.n	8001036 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001020:	2200      	movs	r2, #0
 8001022:	6879      	ldr	r1, [r7, #4]
 8001024:	f04f 30ff 	mov.w	r0, #4294967295
 8001028:	f000 f93b 	bl	80012a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800102c:	4a06      	ldr	r2, [pc, #24]	@ (8001048 <HAL_InitTick+0x68>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001032:	2300      	movs	r3, #0
 8001034:	e000      	b.n	8001038 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
}
 8001038:	4618      	mov	r0, r3
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	24000028 	.word	0x24000028
 8001044:	2400001c 	.word	0x2400001c
 8001048:	24000024 	.word	0x24000024

0800104c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001050:	4b06      	ldr	r3, [pc, #24]	@ (800106c <HAL_IncTick+0x20>)
 8001052:	781b      	ldrb	r3, [r3, #0]
 8001054:	461a      	mov	r2, r3
 8001056:	4b06      	ldr	r3, [pc, #24]	@ (8001070 <HAL_IncTick+0x24>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4413      	add	r3, r2
 800105c:	4a04      	ldr	r2, [pc, #16]	@ (8001070 <HAL_IncTick+0x24>)
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	24000028 	.word	0x24000028
 8001070:	240000f4 	.word	0x240000f4

08001074 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  return uwTick;
 8001078:	4b03      	ldr	r3, [pc, #12]	@ (8001088 <HAL_GetTick+0x14>)
 800107a:	681b      	ldr	r3, [r3, #0]
}
 800107c:	4618      	mov	r0, r3
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	240000f4 	.word	0x240000f4

0800108c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001094:	f7ff ffee 	bl	8001074 <HAL_GetTick>
 8001098:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010a4:	d005      	beq.n	80010b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010a6:	4b0a      	ldr	r3, [pc, #40]	@ (80010d0 <HAL_Delay+0x44>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	461a      	mov	r2, r3
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	4413      	add	r3, r2
 80010b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80010b2:	bf00      	nop
 80010b4:	f7ff ffde 	bl	8001074 <HAL_GetTick>
 80010b8:	4602      	mov	r2, r0
 80010ba:	68bb      	ldr	r3, [r7, #8]
 80010bc:	1ad3      	subs	r3, r2, r3
 80010be:	68fa      	ldr	r2, [r7, #12]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d8f7      	bhi.n	80010b4 <HAL_Delay+0x28>
  {
  }
}
 80010c4:	bf00      	nop
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	24000028 	.word	0x24000028

080010d4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010d8:	4b03      	ldr	r3, [pc, #12]	@ (80010e8 <HAL_GetREVID+0x14>)
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	0c1b      	lsrs	r3, r3, #16
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	5c001000 	.word	0x5c001000

080010ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 0307 	and.w	r3, r3, #7
 80010fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010fc:	4b0b      	ldr	r3, [pc, #44]	@ (800112c <__NVIC_SetPriorityGrouping+0x40>)
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001102:	68ba      	ldr	r2, [r7, #8]
 8001104:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001108:	4013      	ands	r3, r2
 800110a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001114:	4b06      	ldr	r3, [pc, #24]	@ (8001130 <__NVIC_SetPriorityGrouping+0x44>)
 8001116:	4313      	orrs	r3, r2
 8001118:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800111a:	4a04      	ldr	r2, [pc, #16]	@ (800112c <__NVIC_SetPriorityGrouping+0x40>)
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	60d3      	str	r3, [r2, #12]
}
 8001120:	bf00      	nop
 8001122:	3714      	adds	r7, #20
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00
 8001130:	05fa0000 	.word	0x05fa0000

08001134 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001138:	4b04      	ldr	r3, [pc, #16]	@ (800114c <__NVIC_GetPriorityGrouping+0x18>)
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	0a1b      	lsrs	r3, r3, #8
 800113e:	f003 0307 	and.w	r3, r3, #7
}
 8001142:	4618      	mov	r0, r3
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	e000ed00 	.word	0xe000ed00

08001150 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	4603      	mov	r3, r0
 8001158:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800115a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800115e:	2b00      	cmp	r3, #0
 8001160:	db0b      	blt.n	800117a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	f003 021f 	and.w	r2, r3, #31
 8001168:	4907      	ldr	r1, [pc, #28]	@ (8001188 <__NVIC_EnableIRQ+0x38>)
 800116a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800116e:	095b      	lsrs	r3, r3, #5
 8001170:	2001      	movs	r0, #1
 8001172:	fa00 f202 	lsl.w	r2, r0, r2
 8001176:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800117a:	bf00      	nop
 800117c:	370c      	adds	r7, #12
 800117e:	46bd      	mov	sp, r7
 8001180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001184:	4770      	bx	lr
 8001186:	bf00      	nop
 8001188:	e000e100 	.word	0xe000e100

0800118c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	4603      	mov	r3, r0
 8001194:	6039      	str	r1, [r7, #0]
 8001196:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001198:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800119c:	2b00      	cmp	r3, #0
 800119e:	db0a      	blt.n	80011b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	b2da      	uxtb	r2, r3
 80011a4:	490c      	ldr	r1, [pc, #48]	@ (80011d8 <__NVIC_SetPriority+0x4c>)
 80011a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80011aa:	0112      	lsls	r2, r2, #4
 80011ac:	b2d2      	uxtb	r2, r2
 80011ae:	440b      	add	r3, r1
 80011b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011b4:	e00a      	b.n	80011cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	b2da      	uxtb	r2, r3
 80011ba:	4908      	ldr	r1, [pc, #32]	@ (80011dc <__NVIC_SetPriority+0x50>)
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	f003 030f 	and.w	r3, r3, #15
 80011c2:	3b04      	subs	r3, #4
 80011c4:	0112      	lsls	r2, r2, #4
 80011c6:	b2d2      	uxtb	r2, r2
 80011c8:	440b      	add	r3, r1
 80011ca:	761a      	strb	r2, [r3, #24]
}
 80011cc:	bf00      	nop
 80011ce:	370c      	adds	r7, #12
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	e000e100 	.word	0xe000e100
 80011dc:	e000ed00 	.word	0xe000ed00

080011e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b089      	sub	sp, #36	@ 0x24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	60f8      	str	r0, [r7, #12]
 80011e8:	60b9      	str	r1, [r7, #8]
 80011ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	f003 0307 	and.w	r3, r3, #7
 80011f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011f4:	69fb      	ldr	r3, [r7, #28]
 80011f6:	f1c3 0307 	rsb	r3, r3, #7
 80011fa:	2b04      	cmp	r3, #4
 80011fc:	bf28      	it	cs
 80011fe:	2304      	movcs	r3, #4
 8001200:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	3304      	adds	r3, #4
 8001206:	2b06      	cmp	r3, #6
 8001208:	d902      	bls.n	8001210 <NVIC_EncodePriority+0x30>
 800120a:	69fb      	ldr	r3, [r7, #28]
 800120c:	3b03      	subs	r3, #3
 800120e:	e000      	b.n	8001212 <NVIC_EncodePriority+0x32>
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001214:	f04f 32ff 	mov.w	r2, #4294967295
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	fa02 f303 	lsl.w	r3, r2, r3
 800121e:	43da      	mvns	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	401a      	ands	r2, r3
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001228:	f04f 31ff 	mov.w	r1, #4294967295
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	fa01 f303 	lsl.w	r3, r1, r3
 8001232:	43d9      	mvns	r1, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001238:	4313      	orrs	r3, r2
         );
}
 800123a:	4618      	mov	r0, r3
 800123c:	3724      	adds	r7, #36	@ 0x24
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
	...

08001248 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	3b01      	subs	r3, #1
 8001254:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001258:	d301      	bcc.n	800125e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800125a:	2301      	movs	r3, #1
 800125c:	e00f      	b.n	800127e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800125e:	4a0a      	ldr	r2, [pc, #40]	@ (8001288 <SysTick_Config+0x40>)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	3b01      	subs	r3, #1
 8001264:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001266:	210f      	movs	r1, #15
 8001268:	f04f 30ff 	mov.w	r0, #4294967295
 800126c:	f7ff ff8e 	bl	800118c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001270:	4b05      	ldr	r3, [pc, #20]	@ (8001288 <SysTick_Config+0x40>)
 8001272:	2200      	movs	r2, #0
 8001274:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001276:	4b04      	ldr	r3, [pc, #16]	@ (8001288 <SysTick_Config+0x40>)
 8001278:	2207      	movs	r2, #7
 800127a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3708      	adds	r7, #8
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	e000e010 	.word	0xe000e010

0800128c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001294:	6878      	ldr	r0, [r7, #4]
 8001296:	f7ff ff29 	bl	80010ec <__NVIC_SetPriorityGrouping>
}
 800129a:	bf00      	nop
 800129c:	3708      	adds	r7, #8
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}

080012a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a2:	b580      	push	{r7, lr}
 80012a4:	b086      	sub	sp, #24
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	4603      	mov	r3, r0
 80012aa:	60b9      	str	r1, [r7, #8]
 80012ac:	607a      	str	r2, [r7, #4]
 80012ae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80012b0:	f7ff ff40 	bl	8001134 <__NVIC_GetPriorityGrouping>
 80012b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012b6:	687a      	ldr	r2, [r7, #4]
 80012b8:	68b9      	ldr	r1, [r7, #8]
 80012ba:	6978      	ldr	r0, [r7, #20]
 80012bc:	f7ff ff90 	bl	80011e0 <NVIC_EncodePriority>
 80012c0:	4602      	mov	r2, r0
 80012c2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80012c6:	4611      	mov	r1, r2
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff ff5f 	bl	800118c <__NVIC_SetPriority>
}
 80012ce:	bf00      	nop
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b082      	sub	sp, #8
 80012da:	af00      	add	r7, sp, #0
 80012dc:	4603      	mov	r3, r0
 80012de:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff ff33 	bl	8001150 <__NVIC_EnableIRQ>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b082      	sub	sp, #8
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012fa:	6878      	ldr	r0, [r7, #4]
 80012fc:	f7ff ffa4 	bl	8001248 <SysTick_Config>
 8001300:	4603      	mov	r3, r0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3708      	adds	r7, #8
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
	...

0800130c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8001310:	4b06      	ldr	r3, [pc, #24]	@ (800132c <HAL_GetCurrentCPUID+0x20>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001318:	2b70      	cmp	r3, #112	@ 0x70
 800131a:	d101      	bne.n	8001320 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 800131c:	2303      	movs	r3, #3
 800131e:	e000      	b.n	8001322 <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8001320:	2301      	movs	r3, #1
  }
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	460b      	mov	r3, r1
 800133a:	607a      	str	r2, [r7, #4]
 800133c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800133e:	2300      	movs	r3, #0
 8001340:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 8001342:	68fb      	ldr	r3, [r7, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d101      	bne.n	800134c <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e00a      	b.n	8001362 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 800134c:	7afb      	ldrb	r3, [r7, #11]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d103      	bne.n	800135a <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	605a      	str	r2, [r3, #4]
      break;
 8001358:	e002      	b.n	8001360 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	75fb      	strb	r3, [r7, #23]
      break;
 800135e:	bf00      	nop
  }

  return status;
 8001360:	7dfb      	ldrb	r3, [r7, #23]
}
 8001362:	4618      	mov	r0, r3
 8001364:	371c      	adds	r7, #28
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr

0800136e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800136e:	b480      	push	{r7}
 8001370:	b083      	sub	sp, #12
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d101      	bne.n	8001382 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800137e:	2301      	movs	r3, #1
 8001380:	e003      	b.n	800138a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8001388:	2300      	movs	r3, #0
  }
}
 800138a:	4618      	mov	r0, r3
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b086      	sub	sp, #24
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	0c1b      	lsrs	r3, r3, #16
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 031f 	and.w	r3, r3, #31
 80013b4:	2201      	movs	r2, #1
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80013bc:	f7ff ffa6 	bl	800130c <HAL_GetCurrentCPUID>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b03      	cmp	r3, #3
 80013c4:	d105      	bne.n	80013d2 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	011a      	lsls	r2, r3, #4
 80013ca:	4b0f      	ldr	r3, [pc, #60]	@ (8001408 <HAL_EXTI_IRQHandler+0x70>)
 80013cc:	4413      	add	r3, r2
 80013ce:	617b      	str	r3, [r7, #20]
 80013d0:	e004      	b.n	80013dc <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	011a      	lsls	r2, r3, #4
 80013d6:	4b0d      	ldr	r3, [pc, #52]	@ (800140c <HAL_EXTI_IRQHandler+0x74>)
 80013d8:	4413      	add	r3, r2
 80013da:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	68fa      	ldr	r2, [r7, #12]
 80013e2:	4013      	ands	r3, r2
 80013e4:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80013e6:	68bb      	ldr	r3, [r7, #8]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d009      	beq.n	8001400 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	68fa      	ldr	r2, [r7, #12]
 80013f0:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	4798      	blx	r3
    }
  }
}
 8001400:	bf00      	nop
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	58000088 	.word	0x58000088
 800140c:	580000c8 	.word	0x580000c8

08001410 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001410:	b480      	push	{r7}
 8001412:	b089      	sub	sp, #36	@ 0x24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
 8001418:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800141a:	2300      	movs	r3, #0
 800141c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800141e:	4b89      	ldr	r3, [pc, #548]	@ (8001644 <HAL_GPIO_Init+0x234>)
 8001420:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001422:	e194      	b.n	800174e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	2101      	movs	r1, #1
 800142a:	69fb      	ldr	r3, [r7, #28]
 800142c:	fa01 f303 	lsl.w	r3, r1, r3
 8001430:	4013      	ands	r3, r2
 8001432:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	2b00      	cmp	r3, #0
 8001438:	f000 8186 	beq.w	8001748 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b01      	cmp	r3, #1
 8001446:	d005      	beq.n	8001454 <HAL_GPIO_Init+0x44>
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f003 0303 	and.w	r3, r3, #3
 8001450:	2b02      	cmp	r3, #2
 8001452:	d130      	bne.n	80014b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800145a:	69fb      	ldr	r3, [r7, #28]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43db      	mvns	r3, r3
 8001466:	69ba      	ldr	r2, [r7, #24]
 8001468:	4013      	ands	r3, r2
 800146a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800148a:	2201      	movs	r2, #1
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	fa02 f303 	lsl.w	r3, r2, r3
 8001492:	43db      	mvns	r3, r3
 8001494:	69ba      	ldr	r2, [r7, #24]
 8001496:	4013      	ands	r3, r2
 8001498:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	091b      	lsrs	r3, r3, #4
 80014a0:	f003 0201 	and.w	r2, r3, #1
 80014a4:	69fb      	ldr	r3, [r7, #28]
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	69ba      	ldr	r2, [r7, #24]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69ba      	ldr	r2, [r7, #24]
 80014b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 0303 	and.w	r3, r3, #3
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d017      	beq.n	80014f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	2203      	movs	r2, #3
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f003 0303 	and.w	r3, r3, #3
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d123      	bne.n	8001546 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	08da      	lsrs	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3208      	adds	r2, #8
 8001506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800150a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	220f      	movs	r2, #15
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	4013      	ands	r3, r2
 8001520:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	691a      	ldr	r2, [r3, #16]
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	f003 0307 	and.w	r3, r3, #7
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	fa02 f303 	lsl.w	r3, r2, r3
 8001532:	69ba      	ldr	r2, [r7, #24]
 8001534:	4313      	orrs	r3, r2
 8001536:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	08da      	lsrs	r2, r3, #3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3208      	adds	r2, #8
 8001540:	69b9      	ldr	r1, [r7, #24]
 8001542:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	2203      	movs	r2, #3
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43db      	mvns	r3, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4013      	ands	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	f003 0203 	and.w	r2, r3, #3
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	fa02 f303 	lsl.w	r3, r2, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	69ba      	ldr	r2, [r7, #24]
 8001578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 80e0 	beq.w	8001748 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001588:	4b2f      	ldr	r3, [pc, #188]	@ (8001648 <HAL_GPIO_Init+0x238>)
 800158a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800158e:	4a2e      	ldr	r2, [pc, #184]	@ (8001648 <HAL_GPIO_Init+0x238>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001598:	4b2b      	ldr	r3, [pc, #172]	@ (8001648 <HAL_GPIO_Init+0x238>)
 800159a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800159e:	f003 0302 	and.w	r3, r3, #2
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015a6:	4a29      	ldr	r2, [pc, #164]	@ (800164c <HAL_GPIO_Init+0x23c>)
 80015a8:	69fb      	ldr	r3, [r7, #28]
 80015aa:	089b      	lsrs	r3, r3, #2
 80015ac:	3302      	adds	r3, #2
 80015ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	f003 0303 	and.w	r3, r3, #3
 80015ba:	009b      	lsls	r3, r3, #2
 80015bc:	220f      	movs	r2, #15
 80015be:	fa02 f303 	lsl.w	r3, r2, r3
 80015c2:	43db      	mvns	r3, r3
 80015c4:	69ba      	ldr	r2, [r7, #24]
 80015c6:	4013      	ands	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	4a20      	ldr	r2, [pc, #128]	@ (8001650 <HAL_GPIO_Init+0x240>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d052      	beq.n	8001678 <HAL_GPIO_Init+0x268>
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	4a1f      	ldr	r2, [pc, #124]	@ (8001654 <HAL_GPIO_Init+0x244>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d031      	beq.n	800163e <HAL_GPIO_Init+0x22e>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001658 <HAL_GPIO_Init+0x248>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d02b      	beq.n	800163a <HAL_GPIO_Init+0x22a>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	4a1d      	ldr	r2, [pc, #116]	@ (800165c <HAL_GPIO_Init+0x24c>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d025      	beq.n	8001636 <HAL_GPIO_Init+0x226>
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	4a1c      	ldr	r2, [pc, #112]	@ (8001660 <HAL_GPIO_Init+0x250>)
 80015ee:	4293      	cmp	r3, r2
 80015f0:	d01f      	beq.n	8001632 <HAL_GPIO_Init+0x222>
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001664 <HAL_GPIO_Init+0x254>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d019      	beq.n	800162e <HAL_GPIO_Init+0x21e>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	4a1a      	ldr	r2, [pc, #104]	@ (8001668 <HAL_GPIO_Init+0x258>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d013      	beq.n	800162a <HAL_GPIO_Init+0x21a>
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	4a19      	ldr	r2, [pc, #100]	@ (800166c <HAL_GPIO_Init+0x25c>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d00d      	beq.n	8001626 <HAL_GPIO_Init+0x216>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a18      	ldr	r2, [pc, #96]	@ (8001670 <HAL_GPIO_Init+0x260>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d007      	beq.n	8001622 <HAL_GPIO_Init+0x212>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a17      	ldr	r2, [pc, #92]	@ (8001674 <HAL_GPIO_Init+0x264>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d101      	bne.n	800161e <HAL_GPIO_Init+0x20e>
 800161a:	2309      	movs	r3, #9
 800161c:	e02d      	b.n	800167a <HAL_GPIO_Init+0x26a>
 800161e:	230a      	movs	r3, #10
 8001620:	e02b      	b.n	800167a <HAL_GPIO_Init+0x26a>
 8001622:	2308      	movs	r3, #8
 8001624:	e029      	b.n	800167a <HAL_GPIO_Init+0x26a>
 8001626:	2307      	movs	r3, #7
 8001628:	e027      	b.n	800167a <HAL_GPIO_Init+0x26a>
 800162a:	2306      	movs	r3, #6
 800162c:	e025      	b.n	800167a <HAL_GPIO_Init+0x26a>
 800162e:	2305      	movs	r3, #5
 8001630:	e023      	b.n	800167a <HAL_GPIO_Init+0x26a>
 8001632:	2304      	movs	r3, #4
 8001634:	e021      	b.n	800167a <HAL_GPIO_Init+0x26a>
 8001636:	2303      	movs	r3, #3
 8001638:	e01f      	b.n	800167a <HAL_GPIO_Init+0x26a>
 800163a:	2302      	movs	r3, #2
 800163c:	e01d      	b.n	800167a <HAL_GPIO_Init+0x26a>
 800163e:	2301      	movs	r3, #1
 8001640:	e01b      	b.n	800167a <HAL_GPIO_Init+0x26a>
 8001642:	bf00      	nop
 8001644:	58000080 	.word	0x58000080
 8001648:	58024400 	.word	0x58024400
 800164c:	58000400 	.word	0x58000400
 8001650:	58020000 	.word	0x58020000
 8001654:	58020400 	.word	0x58020400
 8001658:	58020800 	.word	0x58020800
 800165c:	58020c00 	.word	0x58020c00
 8001660:	58021000 	.word	0x58021000
 8001664:	58021400 	.word	0x58021400
 8001668:	58021800 	.word	0x58021800
 800166c:	58021c00 	.word	0x58021c00
 8001670:	58022000 	.word	0x58022000
 8001674:	58022400 	.word	0x58022400
 8001678:	2300      	movs	r3, #0
 800167a:	69fa      	ldr	r2, [r7, #28]
 800167c:	f002 0203 	and.w	r2, r2, #3
 8001680:	0092      	lsls	r2, r2, #2
 8001682:	4093      	lsls	r3, r2
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	4313      	orrs	r3, r2
 8001688:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800168a:	4938      	ldr	r1, [pc, #224]	@ (800176c <HAL_GPIO_Init+0x35c>)
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	089b      	lsrs	r3, r3, #2
 8001690:	3302      	adds	r3, #2
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001698:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	69ba      	ldr	r2, [r7, #24]
 80016a6:	4013      	ands	r3, r2
 80016a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80016b6:	69ba      	ldr	r2, [r7, #24]
 80016b8:	693b      	ldr	r3, [r7, #16]
 80016ba:	4313      	orrs	r3, r2
 80016bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80016be:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80016c6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4013      	ands	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80016e4:	69ba      	ldr	r2, [r7, #24]
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80016ec:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	43db      	mvns	r3, r3
 8001728:	69ba      	ldr	r2, [r7, #24]
 800172a:	4013      	ands	r3, r2
 800172c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800173a:	69ba      	ldr	r2, [r7, #24]
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001748:	69fb      	ldr	r3, [r7, #28]
 800174a:	3301      	adds	r3, #1
 800174c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	681a      	ldr	r2, [r3, #0]
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	fa22 f303 	lsr.w	r3, r2, r3
 8001758:	2b00      	cmp	r3, #0
 800175a:	f47f ae63 	bne.w	8001424 <HAL_GPIO_Init+0x14>
  }
}
 800175e:	bf00      	nop
 8001760:	bf00      	nop
 8001762:	3724      	adds	r7, #36	@ 0x24
 8001764:	46bd      	mov	sp, r7
 8001766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176a:	4770      	bx	lr
 800176c:	58000400 	.word	0x58000400

08001770 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	807b      	strh	r3, [r7, #2]
 800177c:	4613      	mov	r3, r2
 800177e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001780:	787b      	ldrb	r3, [r7, #1]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d003      	beq.n	800178e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001786:	887a      	ldrh	r2, [r7, #2]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800178c:	e003      	b.n	8001796 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800178e:	887b      	ldrh	r3, [r7, #2]
 8001790:	041a      	lsls	r2, r3, #16
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	619a      	str	r2, [r3, #24]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr

080017a2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b085      	sub	sp, #20
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
 80017aa:	460b      	mov	r3, r1
 80017ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	695b      	ldr	r3, [r3, #20]
 80017b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017b4:	887a      	ldrh	r2, [r7, #2]
 80017b6:	68fb      	ldr	r3, [r7, #12]
 80017b8:	4013      	ands	r3, r2
 80017ba:	041a      	lsls	r2, r3, #16
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	43d9      	mvns	r1, r3
 80017c0:	887b      	ldrh	r3, [r7, #2]
 80017c2:	400b      	ands	r3, r1
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	619a      	str	r2, [r3, #24]
}
 80017ca:	bf00      	nop
 80017cc:	3714      	adds	r7, #20
 80017ce:	46bd      	mov	sp, r7
 80017d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d4:	4770      	bx	lr
	...

080017d8 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80017e0:	4a08      	ldr	r2, [pc, #32]	@ (8001804 <HAL_HSEM_FastTake+0x2c>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	3320      	adds	r3, #32
 80017e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ea:	4a07      	ldr	r2, [pc, #28]	@ (8001808 <HAL_HSEM_FastTake+0x30>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d101      	bne.n	80017f4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80017f0:	2300      	movs	r3, #0
 80017f2:	e000      	b.n	80017f6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
 8001802:	bf00      	nop
 8001804:	58026400 	.word	0x58026400
 8001808:	80000300 	.word	0x80000300

0800180c <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800180c:	b480      	push	{r7}
 800180e:	b083      	sub	sp, #12
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
 8001814:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001816:	4906      	ldr	r1, [pc, #24]	@ (8001830 <HAL_HSEM_Release+0x24>)
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001824:	bf00      	nop
 8001826:	370c      	adds	r7, #12
 8001828:	46bd      	mov	sp, r7
 800182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182e:	4770      	bx	lr
 8001830:	58026400 	.word	0x58026400

08001834 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800183c:	4b29      	ldr	r3, [pc, #164]	@ (80018e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800183e:	68db      	ldr	r3, [r3, #12]
 8001840:	f003 0307 	and.w	r3, r3, #7
 8001844:	2b06      	cmp	r3, #6
 8001846:	d00a      	beq.n	800185e <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001848:	4b26      	ldr	r3, [pc, #152]	@ (80018e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	429a      	cmp	r2, r3
 8001854:	d001      	beq.n	800185a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e040      	b.n	80018dc <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800185a:	2300      	movs	r3, #0
 800185c:	e03e      	b.n	80018dc <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800185e:	4b21      	ldr	r3, [pc, #132]	@ (80018e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001866:	491f      	ldr	r1, [pc, #124]	@ (80018e4 <HAL_PWREx_ConfigSupply+0xb0>)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	4313      	orrs	r3, r2
 800186c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800186e:	f7ff fc01 	bl	8001074 <HAL_GetTick>
 8001872:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001874:	e009      	b.n	800188a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001876:	f7ff fbfd 	bl	8001074 <HAL_GetTick>
 800187a:	4602      	mov	r2, r0
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001884:	d901      	bls.n	800188a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e028      	b.n	80018dc <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800188a:	4b16      	ldr	r3, [pc, #88]	@ (80018e4 <HAL_PWREx_ConfigSupply+0xb0>)
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001892:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001896:	d1ee      	bne.n	8001876 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2b1e      	cmp	r3, #30
 800189c:	d008      	beq.n	80018b0 <HAL_PWREx_ConfigSupply+0x7c>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80018a2:	d005      	beq.n	80018b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2b1d      	cmp	r3, #29
 80018a8:	d002      	beq.n	80018b0 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2b2d      	cmp	r3, #45	@ 0x2d
 80018ae:	d114      	bne.n	80018da <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80018b0:	f7ff fbe0 	bl	8001074 <HAL_GetTick>
 80018b4:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80018b6:	e009      	b.n	80018cc <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018b8:	f7ff fbdc 	bl	8001074 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80018c6:	d901      	bls.n	80018cc <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e007      	b.n	80018dc <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80018cc:	4b05      	ldr	r3, [pc, #20]	@ (80018e4 <HAL_PWREx_ConfigSupply+0xb0>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018d8:	d1ee      	bne.n	80018b8 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80018da:	2300      	movs	r3, #0
}
 80018dc:	4618      	mov	r0, r3
 80018de:	3710      	adds	r7, #16
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	58024800 	.word	0x58024800

080018e8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b08c      	sub	sp, #48	@ 0x30
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d102      	bne.n	80018fc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	f000 bc48 	b.w	800218c <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0301 	and.w	r3, r3, #1
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 8088 	beq.w	8001a1a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800190a:	4b99      	ldr	r3, [pc, #612]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001912:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001914:	4b96      	ldr	r3, [pc, #600]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001916:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001918:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800191a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800191c:	2b10      	cmp	r3, #16
 800191e:	d007      	beq.n	8001930 <HAL_RCC_OscConfig+0x48>
 8001920:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001922:	2b18      	cmp	r3, #24
 8001924:	d111      	bne.n	800194a <HAL_RCC_OscConfig+0x62>
 8001926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001928:	f003 0303 	and.w	r3, r3, #3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d10c      	bne.n	800194a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001930:	4b8f      	ldr	r3, [pc, #572]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d06d      	beq.n	8001a18 <HAL_RCC_OscConfig+0x130>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d169      	bne.n	8001a18 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	f000 bc21 	b.w	800218c <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001952:	d106      	bne.n	8001962 <HAL_RCC_OscConfig+0x7a>
 8001954:	4b86      	ldr	r3, [pc, #536]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a85      	ldr	r2, [pc, #532]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 800195a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	e02e      	b.n	80019c0 <HAL_RCC_OscConfig+0xd8>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d10c      	bne.n	8001984 <HAL_RCC_OscConfig+0x9c>
 800196a:	4b81      	ldr	r3, [pc, #516]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a80      	ldr	r2, [pc, #512]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001970:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001974:	6013      	str	r3, [r2, #0]
 8001976:	4b7e      	ldr	r3, [pc, #504]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	4a7d      	ldr	r2, [pc, #500]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 800197c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001980:	6013      	str	r3, [r2, #0]
 8001982:	e01d      	b.n	80019c0 <HAL_RCC_OscConfig+0xd8>
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0xc0>
 800198e:	4b78      	ldr	r3, [pc, #480]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a77      	ldr	r2, [pc, #476]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001994:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	4b75      	ldr	r3, [pc, #468]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a74      	ldr	r2, [pc, #464]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 80019a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019a4:	6013      	str	r3, [r2, #0]
 80019a6:	e00b      	b.n	80019c0 <HAL_RCC_OscConfig+0xd8>
 80019a8:	4b71      	ldr	r3, [pc, #452]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a70      	ldr	r2, [pc, #448]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 80019ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019b2:	6013      	str	r3, [r2, #0]
 80019b4:	4b6e      	ldr	r3, [pc, #440]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a6d      	ldr	r2, [pc, #436]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 80019ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d013      	beq.n	80019f0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019c8:	f7ff fb54 	bl	8001074 <HAL_GetTick>
 80019cc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019d0:	f7ff fb50 	bl	8001074 <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b64      	cmp	r3, #100	@ 0x64
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e3d4      	b.n	800218c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019e2:	4b63      	ldr	r3, [pc, #396]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0xe8>
 80019ee:	e014      	b.n	8001a1a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff fb40 	bl	8001074 <HAL_GetTick>
 80019f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff fb3c 	bl	8001074 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	@ 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e3c0      	b.n	800218c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a0a:	4b59      	ldr	r3, [pc, #356]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d1f0      	bne.n	80019f8 <HAL_RCC_OscConfig+0x110>
 8001a16:	e000      	b.n	8001a1a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	f000 80ca 	beq.w	8001bbc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a28:	4b51      	ldr	r3, [pc, #324]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001a2a:	691b      	ldr	r3, [r3, #16]
 8001a2c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001a30:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a32:	4b4f      	ldr	r3, [pc, #316]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a36:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001a38:	6a3b      	ldr	r3, [r7, #32]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <HAL_RCC_OscConfig+0x166>
 8001a3e:	6a3b      	ldr	r3, [r7, #32]
 8001a40:	2b18      	cmp	r3, #24
 8001a42:	d156      	bne.n	8001af2 <HAL_RCC_OscConfig+0x20a>
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	f003 0303 	and.w	r3, r3, #3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d151      	bne.n	8001af2 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a4e:	4b48      	ldr	r3, [pc, #288]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0304 	and.w	r3, r3, #4
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d005      	beq.n	8001a66 <HAL_RCC_OscConfig+0x17e>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001a62:	2301      	movs	r3, #1
 8001a64:	e392      	b.n	800218c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001a66:	4b42      	ldr	r3, [pc, #264]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f023 0219 	bic.w	r2, r3, #25
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	68db      	ldr	r3, [r3, #12]
 8001a72:	493f      	ldr	r1, [pc, #252]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001a74:	4313      	orrs	r3, r2
 8001a76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7ff fafc 	bl	8001074 <HAL_GetTick>
 8001a7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a80:	f7ff faf8 	bl	8001074 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e37c      	b.n	800218c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a92:	4b37      	ldr	r3, [pc, #220]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f003 0304 	and.w	r3, r3, #4
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9e:	f7ff fb19 	bl	80010d4 <HAL_GetREVID>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001aa8:	4293      	cmp	r3, r2
 8001aaa:	d817      	bhi.n	8001adc <HAL_RCC_OscConfig+0x1f4>
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	691b      	ldr	r3, [r3, #16]
 8001ab0:	2b40      	cmp	r3, #64	@ 0x40
 8001ab2:	d108      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x1de>
 8001ab4:	4b2e      	ldr	r3, [pc, #184]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001abc:	4a2c      	ldr	r2, [pc, #176]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001abe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ac2:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ac4:	e07a      	b.n	8001bbc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac6:	4b2a      	ldr	r3, [pc, #168]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001ac8:	685b      	ldr	r3, [r3, #4]
 8001aca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	691b      	ldr	r3, [r3, #16]
 8001ad2:	031b      	lsls	r3, r3, #12
 8001ad4:	4926      	ldr	r1, [pc, #152]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ada:	e06f      	b.n	8001bbc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001adc:	4b24      	ldr	r3, [pc, #144]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	691b      	ldr	r3, [r3, #16]
 8001ae8:	061b      	lsls	r3, r3, #24
 8001aea:	4921      	ldr	r1, [pc, #132]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001aec:	4313      	orrs	r3, r2
 8001aee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001af0:	e064      	b.n	8001bbc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d047      	beq.n	8001b8a <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001afa:	4b1d      	ldr	r3, [pc, #116]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 0219 	bic.w	r2, r3, #25
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	68db      	ldr	r3, [r3, #12]
 8001b06:	491a      	ldr	r1, [pc, #104]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fab2 	bl	8001074 <HAL_GetTick>
 8001b10:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b14:	f7ff faae 	bl	8001074 <HAL_GetTick>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e332      	b.n	800218c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b26:	4b12      	ldr	r3, [pc, #72]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0304 	and.w	r3, r3, #4
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0f0      	beq.n	8001b14 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b32:	f7ff facf 	bl	80010d4 <HAL_GetREVID>
 8001b36:	4603      	mov	r3, r0
 8001b38:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d819      	bhi.n	8001b74 <HAL_RCC_OscConfig+0x28c>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	2b40      	cmp	r3, #64	@ 0x40
 8001b46:	d108      	bne.n	8001b5a <HAL_RCC_OscConfig+0x272>
 8001b48:	4b09      	ldr	r3, [pc, #36]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001b50:	4a07      	ldr	r2, [pc, #28]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001b52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b56:	6053      	str	r3, [r2, #4]
 8001b58:	e030      	b.n	8001bbc <HAL_RCC_OscConfig+0x2d4>
 8001b5a:	4b05      	ldr	r3, [pc, #20]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	691b      	ldr	r3, [r3, #16]
 8001b66:	031b      	lsls	r3, r3, #12
 8001b68:	4901      	ldr	r1, [pc, #4]	@ (8001b70 <HAL_RCC_OscConfig+0x288>)
 8001b6a:	4313      	orrs	r3, r2
 8001b6c:	604b      	str	r3, [r1, #4]
 8001b6e:	e025      	b.n	8001bbc <HAL_RCC_OscConfig+0x2d4>
 8001b70:	58024400 	.word	0x58024400
 8001b74:	4b9a      	ldr	r3, [pc, #616]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001b76:	685b      	ldr	r3, [r3, #4]
 8001b78:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	061b      	lsls	r3, r3, #24
 8001b82:	4997      	ldr	r1, [pc, #604]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	604b      	str	r3, [r1, #4]
 8001b88:	e018      	b.n	8001bbc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b8a:	4b95      	ldr	r3, [pc, #596]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4a94      	ldr	r2, [pc, #592]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001b90:	f023 0301 	bic.w	r3, r3, #1
 8001b94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b96:	f7ff fa6d 	bl	8001074 <HAL_GetTick>
 8001b9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b9e:	f7ff fa69 	bl	8001074 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e2ed      	b.n	800218c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001bb0:	4b8b      	ldr	r3, [pc, #556]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0304 	and.w	r3, r3, #4
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d1f0      	bne.n	8001b9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0310 	and.w	r3, r3, #16
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	f000 80a9 	beq.w	8001d1c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001bca:	4b85      	ldr	r3, [pc, #532]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001bcc:	691b      	ldr	r3, [r3, #16]
 8001bce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001bd2:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001bd4:	4b82      	ldr	r3, [pc, #520]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001bd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bd8:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d007      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x308>
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	2b18      	cmp	r3, #24
 8001be4:	d13a      	bne.n	8001c5c <HAL_RCC_OscConfig+0x374>
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f003 0303 	and.w	r3, r3, #3
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d135      	bne.n	8001c5c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001bf0:	4b7b      	ldr	r3, [pc, #492]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d005      	beq.n	8001c08 <HAL_RCC_OscConfig+0x320>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	69db      	ldr	r3, [r3, #28]
 8001c00:	2b80      	cmp	r3, #128	@ 0x80
 8001c02:	d001      	beq.n	8001c08 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e2c1      	b.n	800218c <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c08:	f7ff fa64 	bl	80010d4 <HAL_GetREVID>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d817      	bhi.n	8001c46 <HAL_RCC_OscConfig+0x35e>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6a1b      	ldr	r3, [r3, #32]
 8001c1a:	2b20      	cmp	r3, #32
 8001c1c:	d108      	bne.n	8001c30 <HAL_RCC_OscConfig+0x348>
 8001c1e:	4b70      	ldr	r3, [pc, #448]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001c26:	4a6e      	ldr	r2, [pc, #440]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001c28:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001c2c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c2e:	e075      	b.n	8001d1c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c30:	4b6b      	ldr	r3, [pc, #428]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6a1b      	ldr	r3, [r3, #32]
 8001c3c:	069b      	lsls	r3, r3, #26
 8001c3e:	4968      	ldr	r1, [pc, #416]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c44:	e06a      	b.n	8001d1c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c46:	4b66      	ldr	r3, [pc, #408]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	061b      	lsls	r3, r3, #24
 8001c54:	4962      	ldr	r1, [pc, #392]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c5a:	e05f      	b.n	8001d1c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69db      	ldr	r3, [r3, #28]
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d042      	beq.n	8001cea <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001c64:	4b5e      	ldr	r3, [pc, #376]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a5d      	ldr	r2, [pc, #372]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001c6a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c70:	f7ff fa00 	bl	8001074 <HAL_GetTick>
 8001c74:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c76:	e008      	b.n	8001c8a <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001c78:	f7ff f9fc 	bl	8001074 <HAL_GetTick>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c80:	1ad3      	subs	r3, r2, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d901      	bls.n	8001c8a <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001c86:	2303      	movs	r3, #3
 8001c88:	e280      	b.n	800218c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001c8a:	4b55      	ldr	r3, [pc, #340]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d0f0      	beq.n	8001c78 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c96:	f7ff fa1d 	bl	80010d4 <HAL_GetREVID>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d817      	bhi.n	8001cd4 <HAL_RCC_OscConfig+0x3ec>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6a1b      	ldr	r3, [r3, #32]
 8001ca8:	2b20      	cmp	r3, #32
 8001caa:	d108      	bne.n	8001cbe <HAL_RCC_OscConfig+0x3d6>
 8001cac:	4b4c      	ldr	r3, [pc, #304]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001cb4:	4a4a      	ldr	r2, [pc, #296]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001cb6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001cba:	6053      	str	r3, [r2, #4]
 8001cbc:	e02e      	b.n	8001d1c <HAL_RCC_OscConfig+0x434>
 8001cbe:	4b48      	ldr	r3, [pc, #288]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001cc0:	685b      	ldr	r3, [r3, #4]
 8001cc2:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6a1b      	ldr	r3, [r3, #32]
 8001cca:	069b      	lsls	r3, r3, #26
 8001ccc:	4944      	ldr	r1, [pc, #272]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	604b      	str	r3, [r1, #4]
 8001cd2:	e023      	b.n	8001d1c <HAL_RCC_OscConfig+0x434>
 8001cd4:	4b42      	ldr	r3, [pc, #264]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	061b      	lsls	r3, r3, #24
 8001ce2:	493f      	ldr	r1, [pc, #252]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	60cb      	str	r3, [r1, #12]
 8001ce8:	e018      	b.n	8001d1c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001cea:	4b3d      	ldr	r3, [pc, #244]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a3c      	ldr	r2, [pc, #240]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001cf0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001cf4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf6:	f7ff f9bd 	bl	8001074 <HAL_GetTick>
 8001cfa:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001cfc:	e008      	b.n	8001d10 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001cfe:	f7ff f9b9 	bl	8001074 <HAL_GetTick>
 8001d02:	4602      	mov	r2, r0
 8001d04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d06:	1ad3      	subs	r3, r2, r3
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d901      	bls.n	8001d10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	e23d      	b.n	800218c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d10:	4b33      	ldr	r3, [pc, #204]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1f0      	bne.n	8001cfe <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0308 	and.w	r3, r3, #8
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d036      	beq.n	8001d96 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	695b      	ldr	r3, [r3, #20]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d019      	beq.n	8001d64 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001d30:	4b2b      	ldr	r3, [pc, #172]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001d32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d34:	4a2a      	ldr	r2, [pc, #168]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001d36:	f043 0301 	orr.w	r3, r3, #1
 8001d3a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3c:	f7ff f99a 	bl	8001074 <HAL_GetTick>
 8001d40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d44:	f7ff f996 	bl	8001074 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e21a      	b.n	800218c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001d56:	4b22      	ldr	r3, [pc, #136]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001d58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d5a:	f003 0302 	and.w	r3, r3, #2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x45c>
 8001d62:	e018      	b.n	8001d96 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d64:	4b1e      	ldr	r3, [pc, #120]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001d66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d68:	4a1d      	ldr	r2, [pc, #116]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001d6a:	f023 0301 	bic.w	r3, r3, #1
 8001d6e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d70:	f7ff f980 	bl	8001074 <HAL_GetTick>
 8001d74:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d78:	f7ff f97c 	bl	8001074 <HAL_GetTick>
 8001d7c:	4602      	mov	r2, r0
 8001d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b02      	cmp	r3, #2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e200      	b.n	800218c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d8a:	4b15      	ldr	r3, [pc, #84]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001d8c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1f0      	bne.n	8001d78 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0320 	and.w	r3, r3, #32
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d039      	beq.n	8001e16 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d01c      	beq.n	8001de4 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001daa:	4b0d      	ldr	r3, [pc, #52]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a0c      	ldr	r2, [pc, #48]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001db0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001db4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001db6:	f7ff f95d 	bl	8001074 <HAL_GetTick>
 8001dba:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001dbc:	e008      	b.n	8001dd0 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001dbe:	f7ff f959 	bl	8001074 <HAL_GetTick>
 8001dc2:	4602      	mov	r2, r0
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc6:	1ad3      	subs	r3, r2, r3
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d901      	bls.n	8001dd0 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001dcc:	2303      	movs	r3, #3
 8001dce:	e1dd      	b.n	800218c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001dd0:	4b03      	ldr	r3, [pc, #12]	@ (8001de0 <HAL_RCC_OscConfig+0x4f8>)
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d0f0      	beq.n	8001dbe <HAL_RCC_OscConfig+0x4d6>
 8001ddc:	e01b      	b.n	8001e16 <HAL_RCC_OscConfig+0x52e>
 8001dde:	bf00      	nop
 8001de0:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001de4:	4b9b      	ldr	r3, [pc, #620]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a9a      	ldr	r2, [pc, #616]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001dea:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001dee:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001df0:	f7ff f940 	bl	8001074 <HAL_GetTick>
 8001df4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001df8:	f7ff f93c 	bl	8001074 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b02      	cmp	r3, #2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e1c0      	b.n	800218c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e0a:	4b92      	ldr	r3, [pc, #584]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0304 	and.w	r3, r3, #4
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 8081 	beq.w	8001f26 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001e24:	4b8c      	ldr	r3, [pc, #560]	@ (8002058 <HAL_RCC_OscConfig+0x770>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a8b      	ldr	r2, [pc, #556]	@ (8002058 <HAL_RCC_OscConfig+0x770>)
 8001e2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e2e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001e30:	f7ff f920 	bl	8001074 <HAL_GetTick>
 8001e34:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001e38:	f7ff f91c 	bl	8001074 <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b64      	cmp	r3, #100	@ 0x64
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e1a0      	b.n	800218c <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001e4a:	4b83      	ldr	r3, [pc, #524]	@ (8002058 <HAL_RCC_OscConfig+0x770>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d0f0      	beq.n	8001e38 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d106      	bne.n	8001e6c <HAL_RCC_OscConfig+0x584>
 8001e5e:	4b7d      	ldr	r3, [pc, #500]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e62:	4a7c      	ldr	r2, [pc, #496]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e6a:	e02d      	b.n	8001ec8 <HAL_RCC_OscConfig+0x5e0>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d10c      	bne.n	8001e8e <HAL_RCC_OscConfig+0x5a6>
 8001e74:	4b77      	ldr	r3, [pc, #476]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001e76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e78:	4a76      	ldr	r2, [pc, #472]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001e7a:	f023 0301 	bic.w	r3, r3, #1
 8001e7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e80:	4b74      	ldr	r3, [pc, #464]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001e82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e84:	4a73      	ldr	r2, [pc, #460]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001e86:	f023 0304 	bic.w	r3, r3, #4
 8001e8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001e8c:	e01c      	b.n	8001ec8 <HAL_RCC_OscConfig+0x5e0>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	2b05      	cmp	r3, #5
 8001e94:	d10c      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x5c8>
 8001e96:	4b6f      	ldr	r3, [pc, #444]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001e9a:	4a6e      	ldr	r2, [pc, #440]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001e9c:	f043 0304 	orr.w	r3, r3, #4
 8001ea0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ea2:	4b6c      	ldr	r3, [pc, #432]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ea6:	4a6b      	ldr	r2, [pc, #428]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	6713      	str	r3, [r2, #112]	@ 0x70
 8001eae:	e00b      	b.n	8001ec8 <HAL_RCC_OscConfig+0x5e0>
 8001eb0:	4b68      	ldr	r3, [pc, #416]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001eb2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001eb4:	4a67      	ldr	r2, [pc, #412]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001eb6:	f023 0301 	bic.w	r3, r3, #1
 8001eba:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ebc:	4b65      	ldr	r3, [pc, #404]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001ebe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ec0:	4a64      	ldr	r2, [pc, #400]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001ec2:	f023 0304 	bic.w	r3, r3, #4
 8001ec6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	689b      	ldr	r3, [r3, #8]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d015      	beq.n	8001efc <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ed0:	f7ff f8d0 	bl	8001074 <HAL_GetTick>
 8001ed4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ed6:	e00a      	b.n	8001eee <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ed8:	f7ff f8cc 	bl	8001074 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ee6:	4293      	cmp	r3, r2
 8001ee8:	d901      	bls.n	8001eee <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001eea:	2303      	movs	r3, #3
 8001eec:	e14e      	b.n	800218c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001eee:	4b59      	ldr	r3, [pc, #356]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d0ee      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x5f0>
 8001efa:	e014      	b.n	8001f26 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001efc:	f7ff f8ba 	bl	8001074 <HAL_GetTick>
 8001f00:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f02:	e00a      	b.n	8001f1a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f04:	f7ff f8b6 	bl	8001074 <HAL_GetTick>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e138      	b.n	800218c <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f1a:	4b4e      	ldr	r3, [pc, #312]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1ee      	bne.n	8001f04 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	f000 812d 	beq.w	800218a <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001f30:	4b48      	ldr	r3, [pc, #288]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001f32:	691b      	ldr	r3, [r3, #16]
 8001f34:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f38:	2b18      	cmp	r3, #24
 8001f3a:	f000 80bd 	beq.w	80020b8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	f040 809e 	bne.w	8002084 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f48:	4b42      	ldr	r3, [pc, #264]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a41      	ldr	r2, [pc, #260]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001f4e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001f52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f54:	f7ff f88e 	bl	8001074 <HAL_GetTick>
 8001f58:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f5c:	f7ff f88a 	bl	8001074 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e10e      	b.n	800218c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f6e:	4b39      	ldr	r3, [pc, #228]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d1f0      	bne.n	8001f5c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f7a:	4b36      	ldr	r3, [pc, #216]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001f7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f7e:	4b37      	ldr	r3, [pc, #220]	@ (800205c <HAL_RCC_OscConfig+0x774>)
 8001f80:	4013      	ands	r3, r2
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001f8a:	0112      	lsls	r2, r2, #4
 8001f8c:	430a      	orrs	r2, r1
 8001f8e:	4931      	ldr	r1, [pc, #196]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	628b      	str	r3, [r1, #40]	@ 0x28
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f98:	3b01      	subs	r3, #1
 8001f9a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fa2:	3b01      	subs	r3, #1
 8001fa4:	025b      	lsls	r3, r3, #9
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001fae:	3b01      	subs	r3, #1
 8001fb0:	041b      	lsls	r3, r3, #16
 8001fb2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001fb6:	431a      	orrs	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	061b      	lsls	r3, r3, #24
 8001fc0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001fc4:	4923      	ldr	r1, [pc, #140]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001fca:	4b22      	ldr	r3, [pc, #136]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001fcc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fce:	4a21      	ldr	r2, [pc, #132]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001fd6:	4b1f      	ldr	r3, [pc, #124]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001fd8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001fda:	4b21      	ldr	r3, [pc, #132]	@ (8002060 <HAL_RCC_OscConfig+0x778>)
 8001fdc:	4013      	ands	r3, r2
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001fe2:	00d2      	lsls	r2, r2, #3
 8001fe4:	491b      	ldr	r1, [pc, #108]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001fea:	4b1a      	ldr	r3, [pc, #104]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001fec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fee:	f023 020c 	bic.w	r2, r3, #12
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	4917      	ldr	r1, [pc, #92]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ffc:	4b15      	ldr	r3, [pc, #84]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8001ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002000:	f023 0202 	bic.w	r2, r3, #2
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002008:	4912      	ldr	r1, [pc, #72]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 800200a:	4313      	orrs	r3, r2
 800200c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800200e:	4b11      	ldr	r3, [pc, #68]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8002010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002012:	4a10      	ldr	r2, [pc, #64]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8002014:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002018:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800201a:	4b0e      	ldr	r3, [pc, #56]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 800201c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800201e:	4a0d      	ldr	r2, [pc, #52]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8002020:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002024:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002026:	4b0b      	ldr	r3, [pc, #44]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8002028:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800202a:	4a0a      	ldr	r2, [pc, #40]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 800202c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002030:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002032:	4b08      	ldr	r3, [pc, #32]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8002034:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002036:	4a07      	ldr	r2, [pc, #28]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800203e:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a04      	ldr	r2, [pc, #16]	@ (8002054 <HAL_RCC_OscConfig+0x76c>)
 8002044:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002048:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800204a:	f7ff f813 	bl	8001074 <HAL_GetTick>
 800204e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002050:	e011      	b.n	8002076 <HAL_RCC_OscConfig+0x78e>
 8002052:	bf00      	nop
 8002054:	58024400 	.word	0x58024400
 8002058:	58024800 	.word	0x58024800
 800205c:	fffffc0c 	.word	0xfffffc0c
 8002060:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002064:	f7ff f806 	bl	8001074 <HAL_GetTick>
 8002068:	4602      	mov	r2, r0
 800206a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b02      	cmp	r3, #2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e08a      	b.n	800218c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002076:	4b47      	ldr	r3, [pc, #284]	@ (8002194 <HAL_RCC_OscConfig+0x8ac>)
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800207e:	2b00      	cmp	r3, #0
 8002080:	d0f0      	beq.n	8002064 <HAL_RCC_OscConfig+0x77c>
 8002082:	e082      	b.n	800218a <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002084:	4b43      	ldr	r3, [pc, #268]	@ (8002194 <HAL_RCC_OscConfig+0x8ac>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a42      	ldr	r2, [pc, #264]	@ (8002194 <HAL_RCC_OscConfig+0x8ac>)
 800208a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800208e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002090:	f7fe fff0 	bl	8001074 <HAL_GetTick>
 8002094:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002096:	e008      	b.n	80020aa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002098:	f7fe ffec 	bl	8001074 <HAL_GetTick>
 800209c:	4602      	mov	r2, r0
 800209e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a0:	1ad3      	subs	r3, r2, r3
 80020a2:	2b02      	cmp	r3, #2
 80020a4:	d901      	bls.n	80020aa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80020a6:	2303      	movs	r3, #3
 80020a8:	e070      	b.n	800218c <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80020aa:	4b3a      	ldr	r3, [pc, #232]	@ (8002194 <HAL_RCC_OscConfig+0x8ac>)
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d1f0      	bne.n	8002098 <HAL_RCC_OscConfig+0x7b0>
 80020b6:	e068      	b.n	800218a <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80020b8:	4b36      	ldr	r3, [pc, #216]	@ (8002194 <HAL_RCC_OscConfig+0x8ac>)
 80020ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020bc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80020be:	4b35      	ldr	r3, [pc, #212]	@ (8002194 <HAL_RCC_OscConfig+0x8ac>)
 80020c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c2:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020c8:	2b01      	cmp	r3, #1
 80020ca:	d031      	beq.n	8002130 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020cc:	693b      	ldr	r3, [r7, #16]
 80020ce:	f003 0203 	and.w	r2, r3, #3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80020d6:	429a      	cmp	r2, r3
 80020d8:	d12a      	bne.n	8002130 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	091b      	lsrs	r3, r3, #4
 80020de:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d122      	bne.n	8002130 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f4:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d11a      	bne.n	8002130 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	0a5b      	lsrs	r3, r3, #9
 80020fe:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002106:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002108:	429a      	cmp	r2, r3
 800210a:	d111      	bne.n	8002130 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	0c1b      	lsrs	r3, r3, #16
 8002110:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002118:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800211a:	429a      	cmp	r2, r3
 800211c:	d108      	bne.n	8002130 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	0e1b      	lsrs	r3, r3, #24
 8002122:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800212a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800212c:	429a      	cmp	r2, r3
 800212e:	d001      	beq.n	8002134 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e02b      	b.n	800218c <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002134:	4b17      	ldr	r3, [pc, #92]	@ (8002194 <HAL_RCC_OscConfig+0x8ac>)
 8002136:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002138:	08db      	lsrs	r3, r3, #3
 800213a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800213e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002144:	693a      	ldr	r2, [r7, #16]
 8002146:	429a      	cmp	r2, r3
 8002148:	d01f      	beq.n	800218a <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800214a:	4b12      	ldr	r3, [pc, #72]	@ (8002194 <HAL_RCC_OscConfig+0x8ac>)
 800214c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800214e:	4a11      	ldr	r2, [pc, #68]	@ (8002194 <HAL_RCC_OscConfig+0x8ac>)
 8002150:	f023 0301 	bic.w	r3, r3, #1
 8002154:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002156:	f7fe ff8d 	bl	8001074 <HAL_GetTick>
 800215a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800215c:	bf00      	nop
 800215e:	f7fe ff89 	bl	8001074 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002166:	4293      	cmp	r3, r2
 8002168:	d0f9      	beq.n	800215e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800216a:	4b0a      	ldr	r3, [pc, #40]	@ (8002194 <HAL_RCC_OscConfig+0x8ac>)
 800216c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800216e:	4b0a      	ldr	r3, [pc, #40]	@ (8002198 <HAL_RCC_OscConfig+0x8b0>)
 8002170:	4013      	ands	r3, r2
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002176:	00d2      	lsls	r2, r2, #3
 8002178:	4906      	ldr	r1, [pc, #24]	@ (8002194 <HAL_RCC_OscConfig+0x8ac>)
 800217a:	4313      	orrs	r3, r2
 800217c:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800217e:	4b05      	ldr	r3, [pc, #20]	@ (8002194 <HAL_RCC_OscConfig+0x8ac>)
 8002180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002182:	4a04      	ldr	r2, [pc, #16]	@ (8002194 <HAL_RCC_OscConfig+0x8ac>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3730      	adds	r7, #48	@ 0x30
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	58024400 	.word	0x58024400
 8002198:	ffff0007 	.word	0xffff0007

0800219c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b086      	sub	sp, #24
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d101      	bne.n	80021b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e19c      	b.n	80024ea <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021b0:	4b8a      	ldr	r3, [pc, #552]	@ (80023dc <HAL_RCC_ClockConfig+0x240>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 030f 	and.w	r3, r3, #15
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d910      	bls.n	80021e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021be:	4b87      	ldr	r3, [pc, #540]	@ (80023dc <HAL_RCC_ClockConfig+0x240>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 020f 	bic.w	r2, r3, #15
 80021c6:	4985      	ldr	r1, [pc, #532]	@ (80023dc <HAL_RCC_ClockConfig+0x240>)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021ce:	4b83      	ldr	r3, [pc, #524]	@ (80023dc <HAL_RCC_ClockConfig+0x240>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 030f 	and.w	r3, r3, #15
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d001      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e184      	b.n	80024ea <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f003 0304 	and.w	r3, r3, #4
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d010      	beq.n	800220e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	691a      	ldr	r2, [r3, #16]
 80021f0:	4b7b      	ldr	r3, [pc, #492]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 80021f2:	699b      	ldr	r3, [r3, #24]
 80021f4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d908      	bls.n	800220e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80021fc:	4b78      	ldr	r3, [pc, #480]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 80021fe:	699b      	ldr	r3, [r3, #24]
 8002200:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	691b      	ldr	r3, [r3, #16]
 8002208:	4975      	ldr	r1, [pc, #468]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 800220a:	4313      	orrs	r3, r2
 800220c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f003 0308 	and.w	r3, r3, #8
 8002216:	2b00      	cmp	r3, #0
 8002218:	d010      	beq.n	800223c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	695a      	ldr	r2, [r3, #20]
 800221e:	4b70      	ldr	r3, [pc, #448]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 8002220:	69db      	ldr	r3, [r3, #28]
 8002222:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002226:	429a      	cmp	r2, r3
 8002228:	d908      	bls.n	800223c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800222a:	4b6d      	ldr	r3, [pc, #436]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	496a      	ldr	r1, [pc, #424]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 8002238:	4313      	orrs	r3, r2
 800223a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0310 	and.w	r3, r3, #16
 8002244:	2b00      	cmp	r3, #0
 8002246:	d010      	beq.n	800226a <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	699a      	ldr	r2, [r3, #24]
 800224c:	4b64      	ldr	r3, [pc, #400]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 800224e:	69db      	ldr	r3, [r3, #28]
 8002250:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002254:	429a      	cmp	r2, r3
 8002256:	d908      	bls.n	800226a <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002258:	4b61      	ldr	r3, [pc, #388]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 800225a:	69db      	ldr	r3, [r3, #28]
 800225c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	699b      	ldr	r3, [r3, #24]
 8002264:	495e      	ldr	r1, [pc, #376]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 8002266:	4313      	orrs	r3, r2
 8002268:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f003 0320 	and.w	r3, r3, #32
 8002272:	2b00      	cmp	r3, #0
 8002274:	d010      	beq.n	8002298 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	69da      	ldr	r2, [r3, #28]
 800227a:	4b59      	ldr	r3, [pc, #356]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 800227c:	6a1b      	ldr	r3, [r3, #32]
 800227e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002282:	429a      	cmp	r2, r3
 8002284:	d908      	bls.n	8002298 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002286:	4b56      	ldr	r3, [pc, #344]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 8002288:	6a1b      	ldr	r3, [r3, #32]
 800228a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	4953      	ldr	r1, [pc, #332]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 8002294:	4313      	orrs	r3, r2
 8002296:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d010      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	68da      	ldr	r2, [r3, #12]
 80022a8:	4b4d      	ldr	r3, [pc, #308]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	f003 030f 	and.w	r3, r3, #15
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d908      	bls.n	80022c6 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b4:	4b4a      	ldr	r3, [pc, #296]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 80022b6:	699b      	ldr	r3, [r3, #24]
 80022b8:	f023 020f 	bic.w	r2, r3, #15
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	4947      	ldr	r1, [pc, #284]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 80022c2:	4313      	orrs	r3, r2
 80022c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d055      	beq.n	800237e <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80022d2:	4b43      	ldr	r3, [pc, #268]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 80022d4:	699b      	ldr	r3, [r3, #24]
 80022d6:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	4940      	ldr	r1, [pc, #256]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d107      	bne.n	80022fc <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80022ec:	4b3c      	ldr	r3, [pc, #240]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d121      	bne.n	800233c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e0f6      	b.n	80024ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	2b03      	cmp	r3, #3
 8002302:	d107      	bne.n	8002314 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002304:	4b36      	ldr	r3, [pc, #216]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d115      	bne.n	800233c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002310:	2301      	movs	r3, #1
 8002312:	e0ea      	b.n	80024ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	2b01      	cmp	r3, #1
 800231a:	d107      	bne.n	800232c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800231c:	4b30      	ldr	r3, [pc, #192]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d109      	bne.n	800233c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e0de      	b.n	80024ea <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800232c:	4b2c      	ldr	r3, [pc, #176]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e0d6      	b.n	80024ea <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800233c:	4b28      	ldr	r3, [pc, #160]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 800233e:	691b      	ldr	r3, [r3, #16]
 8002340:	f023 0207 	bic.w	r2, r3, #7
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	4925      	ldr	r1, [pc, #148]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 800234a:	4313      	orrs	r3, r2
 800234c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800234e:	f7fe fe91 	bl	8001074 <HAL_GetTick>
 8002352:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002354:	e00a      	b.n	800236c <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002356:	f7fe fe8d 	bl	8001074 <HAL_GetTick>
 800235a:	4602      	mov	r2, r0
 800235c:	697b      	ldr	r3, [r7, #20]
 800235e:	1ad3      	subs	r3, r2, r3
 8002360:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002364:	4293      	cmp	r3, r2
 8002366:	d901      	bls.n	800236c <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002368:	2303      	movs	r3, #3
 800236a:	e0be      	b.n	80024ea <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236c:	4b1c      	ldr	r3, [pc, #112]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 800236e:	691b      	ldr	r3, [r3, #16]
 8002370:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	00db      	lsls	r3, r3, #3
 800237a:	429a      	cmp	r2, r3
 800237c:	d1eb      	bne.n	8002356 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d010      	beq.n	80023ac <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68da      	ldr	r2, [r3, #12]
 800238e:	4b14      	ldr	r3, [pc, #80]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 8002390:	699b      	ldr	r3, [r3, #24]
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	429a      	cmp	r2, r3
 8002398:	d208      	bcs.n	80023ac <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800239a:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	f023 020f 	bic.w	r2, r3, #15
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	490e      	ldr	r1, [pc, #56]	@ (80023e0 <HAL_RCC_ClockConfig+0x244>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023ac:	4b0b      	ldr	r3, [pc, #44]	@ (80023dc <HAL_RCC_ClockConfig+0x240>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	683a      	ldr	r2, [r7, #0]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d214      	bcs.n	80023e4 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ba:	4b08      	ldr	r3, [pc, #32]	@ (80023dc <HAL_RCC_ClockConfig+0x240>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f023 020f 	bic.w	r2, r3, #15
 80023c2:	4906      	ldr	r1, [pc, #24]	@ (80023dc <HAL_RCC_ClockConfig+0x240>)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	4313      	orrs	r3, r2
 80023c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023ca:	4b04      	ldr	r3, [pc, #16]	@ (80023dc <HAL_RCC_ClockConfig+0x240>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d005      	beq.n	80023e4 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80023d8:	2301      	movs	r3, #1
 80023da:	e086      	b.n	80024ea <HAL_RCC_ClockConfig+0x34e>
 80023dc:	52002000 	.word	0x52002000
 80023e0:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0304 	and.w	r3, r3, #4
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d010      	beq.n	8002412 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	4b3f      	ldr	r3, [pc, #252]	@ (80024f4 <HAL_RCC_ClockConfig+0x358>)
 80023f6:	699b      	ldr	r3, [r3, #24]
 80023f8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d208      	bcs.n	8002412 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002400:	4b3c      	ldr	r3, [pc, #240]	@ (80024f4 <HAL_RCC_ClockConfig+0x358>)
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	4939      	ldr	r1, [pc, #228]	@ (80024f4 <HAL_RCC_ClockConfig+0x358>)
 800240e:	4313      	orrs	r3, r2
 8002410:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f003 0308 	and.w	r3, r3, #8
 800241a:	2b00      	cmp	r3, #0
 800241c:	d010      	beq.n	8002440 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695a      	ldr	r2, [r3, #20]
 8002422:	4b34      	ldr	r3, [pc, #208]	@ (80024f4 <HAL_RCC_ClockConfig+0x358>)
 8002424:	69db      	ldr	r3, [r3, #28]
 8002426:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800242a:	429a      	cmp	r2, r3
 800242c:	d208      	bcs.n	8002440 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800242e:	4b31      	ldr	r3, [pc, #196]	@ (80024f4 <HAL_RCC_ClockConfig+0x358>)
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	492e      	ldr	r1, [pc, #184]	@ (80024f4 <HAL_RCC_ClockConfig+0x358>)
 800243c:	4313      	orrs	r3, r2
 800243e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0310 	and.w	r3, r3, #16
 8002448:	2b00      	cmp	r3, #0
 800244a:	d010      	beq.n	800246e <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	699a      	ldr	r2, [r3, #24]
 8002450:	4b28      	ldr	r3, [pc, #160]	@ (80024f4 <HAL_RCC_ClockConfig+0x358>)
 8002452:	69db      	ldr	r3, [r3, #28]
 8002454:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002458:	429a      	cmp	r2, r3
 800245a:	d208      	bcs.n	800246e <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800245c:	4b25      	ldr	r3, [pc, #148]	@ (80024f4 <HAL_RCC_ClockConfig+0x358>)
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	4922      	ldr	r1, [pc, #136]	@ (80024f4 <HAL_RCC_ClockConfig+0x358>)
 800246a:	4313      	orrs	r3, r2
 800246c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	2b00      	cmp	r3, #0
 8002478:	d010      	beq.n	800249c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	69da      	ldr	r2, [r3, #28]
 800247e:	4b1d      	ldr	r3, [pc, #116]	@ (80024f4 <HAL_RCC_ClockConfig+0x358>)
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002486:	429a      	cmp	r2, r3
 8002488:	d208      	bcs.n	800249c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800248a:	4b1a      	ldr	r3, [pc, #104]	@ (80024f4 <HAL_RCC_ClockConfig+0x358>)
 800248c:	6a1b      	ldr	r3, [r3, #32]
 800248e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	69db      	ldr	r3, [r3, #28]
 8002496:	4917      	ldr	r1, [pc, #92]	@ (80024f4 <HAL_RCC_ClockConfig+0x358>)
 8002498:	4313      	orrs	r3, r2
 800249a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800249c:	f000 f834 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 80024a0:	4602      	mov	r2, r0
 80024a2:	4b14      	ldr	r3, [pc, #80]	@ (80024f4 <HAL_RCC_ClockConfig+0x358>)
 80024a4:	699b      	ldr	r3, [r3, #24]
 80024a6:	0a1b      	lsrs	r3, r3, #8
 80024a8:	f003 030f 	and.w	r3, r3, #15
 80024ac:	4912      	ldr	r1, [pc, #72]	@ (80024f8 <HAL_RCC_ClockConfig+0x35c>)
 80024ae:	5ccb      	ldrb	r3, [r1, r3]
 80024b0:	f003 031f 	and.w	r3, r3, #31
 80024b4:	fa22 f303 	lsr.w	r3, r2, r3
 80024b8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80024ba:	4b0e      	ldr	r3, [pc, #56]	@ (80024f4 <HAL_RCC_ClockConfig+0x358>)
 80024bc:	699b      	ldr	r3, [r3, #24]
 80024be:	f003 030f 	and.w	r3, r3, #15
 80024c2:	4a0d      	ldr	r2, [pc, #52]	@ (80024f8 <HAL_RCC_ClockConfig+0x35c>)
 80024c4:	5cd3      	ldrb	r3, [r2, r3]
 80024c6:	f003 031f 	and.w	r3, r3, #31
 80024ca:	693a      	ldr	r2, [r7, #16]
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
 80024d0:	4a0a      	ldr	r2, [pc, #40]	@ (80024fc <HAL_RCC_ClockConfig+0x360>)
 80024d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80024d4:	4a0a      	ldr	r2, [pc, #40]	@ (8002500 <HAL_RCC_ClockConfig+0x364>)
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80024da:	4b0a      	ldr	r3, [pc, #40]	@ (8002504 <HAL_RCC_ClockConfig+0x368>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7fe fd7e 	bl	8000fe0 <HAL_InitTick>
 80024e4:	4603      	mov	r3, r0
 80024e6:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80024e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	58024400 	.word	0x58024400
 80024f8:	08003e70 	.word	0x08003e70
 80024fc:	24000020 	.word	0x24000020
 8002500:	2400001c 	.word	0x2400001c
 8002504:	24000024 	.word	0x24000024

08002508 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002508:	b480      	push	{r7}
 800250a:	b089      	sub	sp, #36	@ 0x24
 800250c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800250e:	4bb3      	ldr	r3, [pc, #716]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002510:	691b      	ldr	r3, [r3, #16]
 8002512:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002516:	2b18      	cmp	r3, #24
 8002518:	f200 8155 	bhi.w	80027c6 <HAL_RCC_GetSysClockFreq+0x2be>
 800251c:	a201      	add	r2, pc, #4	@ (adr r2, 8002524 <HAL_RCC_GetSysClockFreq+0x1c>)
 800251e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002522:	bf00      	nop
 8002524:	08002589 	.word	0x08002589
 8002528:	080027c7 	.word	0x080027c7
 800252c:	080027c7 	.word	0x080027c7
 8002530:	080027c7 	.word	0x080027c7
 8002534:	080027c7 	.word	0x080027c7
 8002538:	080027c7 	.word	0x080027c7
 800253c:	080027c7 	.word	0x080027c7
 8002540:	080027c7 	.word	0x080027c7
 8002544:	080025af 	.word	0x080025af
 8002548:	080027c7 	.word	0x080027c7
 800254c:	080027c7 	.word	0x080027c7
 8002550:	080027c7 	.word	0x080027c7
 8002554:	080027c7 	.word	0x080027c7
 8002558:	080027c7 	.word	0x080027c7
 800255c:	080027c7 	.word	0x080027c7
 8002560:	080027c7 	.word	0x080027c7
 8002564:	080025b5 	.word	0x080025b5
 8002568:	080027c7 	.word	0x080027c7
 800256c:	080027c7 	.word	0x080027c7
 8002570:	080027c7 	.word	0x080027c7
 8002574:	080027c7 	.word	0x080027c7
 8002578:	080027c7 	.word	0x080027c7
 800257c:	080027c7 	.word	0x080027c7
 8002580:	080027c7 	.word	0x080027c7
 8002584:	080025bb 	.word	0x080025bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002588:	4b94      	ldr	r3, [pc, #592]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0320 	and.w	r3, r3, #32
 8002590:	2b00      	cmp	r3, #0
 8002592:	d009      	beq.n	80025a8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002594:	4b91      	ldr	r3, [pc, #580]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	08db      	lsrs	r3, r3, #3
 800259a:	f003 0303 	and.w	r3, r3, #3
 800259e:	4a90      	ldr	r2, [pc, #576]	@ (80027e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025a0:	fa22 f303 	lsr.w	r3, r2, r3
 80025a4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80025a6:	e111      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80025a8:	4b8d      	ldr	r3, [pc, #564]	@ (80027e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80025aa:	61bb      	str	r3, [r7, #24]
      break;
 80025ac:	e10e      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80025ae:	4b8d      	ldr	r3, [pc, #564]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80025b0:	61bb      	str	r3, [r7, #24]
      break;
 80025b2:	e10b      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80025b4:	4b8c      	ldr	r3, [pc, #560]	@ (80027e8 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80025b6:	61bb      	str	r3, [r7, #24]
      break;
 80025b8:	e108      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80025ba:	4b88      	ldr	r3, [pc, #544]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025be:	f003 0303 	and.w	r3, r3, #3
 80025c2:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80025c4:	4b85      	ldr	r3, [pc, #532]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025c8:	091b      	lsrs	r3, r3, #4
 80025ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80025ce:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80025d0:	4b82      	ldr	r3, [pc, #520]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025d4:	f003 0301 	and.w	r3, r3, #1
 80025d8:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80025da:	4b80      	ldr	r3, [pc, #512]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025de:	08db      	lsrs	r3, r3, #3
 80025e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	fb02 f303 	mul.w	r3, r2, r3
 80025ea:	ee07 3a90 	vmov	s15, r3
 80025ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025f2:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	f000 80e1 	beq.w	80027c0 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80025fe:	697b      	ldr	r3, [r7, #20]
 8002600:	2b02      	cmp	r3, #2
 8002602:	f000 8083 	beq.w	800270c <HAL_RCC_GetSysClockFreq+0x204>
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	2b02      	cmp	r3, #2
 800260a:	f200 80a1 	bhi.w	8002750 <HAL_RCC_GetSysClockFreq+0x248>
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d003      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x114>
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	2b01      	cmp	r3, #1
 8002618:	d056      	beq.n	80026c8 <HAL_RCC_GetSysClockFreq+0x1c0>
 800261a:	e099      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800261c:	4b6f      	ldr	r3, [pc, #444]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0320 	and.w	r3, r3, #32
 8002624:	2b00      	cmp	r3, #0
 8002626:	d02d      	beq.n	8002684 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002628:	4b6c      	ldr	r3, [pc, #432]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	08db      	lsrs	r3, r3, #3
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	4a6b      	ldr	r2, [pc, #428]	@ (80027e0 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002634:	fa22 f303 	lsr.w	r3, r2, r3
 8002638:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	ee07 3a90 	vmov	s15, r3
 8002640:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	ee07 3a90 	vmov	s15, r3
 800264a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800264e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002652:	4b62      	ldr	r3, [pc, #392]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002656:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800265a:	ee07 3a90 	vmov	s15, r3
 800265e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002662:	ed97 6a02 	vldr	s12, [r7, #8]
 8002666:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80027ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800266a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800266e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002672:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002676:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800267a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800267e:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002682:	e087      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002684:	693b      	ldr	r3, [r7, #16]
 8002686:	ee07 3a90 	vmov	s15, r3
 800268a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800268e:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80027f0 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002692:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002696:	4b51      	ldr	r3, [pc, #324]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800269a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800269e:	ee07 3a90 	vmov	s15, r3
 80026a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80026aa:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80027ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80026ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80026c6:	e065      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	ee07 3a90 	vmov	s15, r3
 80026ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026d2:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80027f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 80026d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026da:	4b40      	ldr	r3, [pc, #256]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026e2:	ee07 3a90 	vmov	s15, r3
 80026e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80026ee:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80027ec <HAL_RCC_GetSysClockFreq+0x2e4>
 80026f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002702:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002706:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800270a:	e043      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	ee07 3a90 	vmov	s15, r3
 8002712:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002716:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80027f8 <HAL_RCC_GetSysClockFreq+0x2f0>
 800271a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800271e:	4b2f      	ldr	r3, [pc, #188]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002726:	ee07 3a90 	vmov	s15, r3
 800272a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800272e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002732:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80027ec <HAL_RCC_GetSysClockFreq+0x2e4>
 8002736:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800273a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800273e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002742:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800274a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800274e:	e021      	b.n	8002794 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	ee07 3a90 	vmov	s15, r3
 8002756:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800275a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80027f4 <HAL_RCC_GetSysClockFreq+0x2ec>
 800275e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002762:	4b1e      	ldr	r3, [pc, #120]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800276a:	ee07 3a90 	vmov	s15, r3
 800276e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002772:	ed97 6a02 	vldr	s12, [r7, #8]
 8002776:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80027ec <HAL_RCC_GetSysClockFreq+0x2e4>
 800277a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800277e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002782:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002786:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800278a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800278e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002792:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002794:	4b11      	ldr	r3, [pc, #68]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002796:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002798:	0a5b      	lsrs	r3, r3, #9
 800279a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800279e:	3301      	adds	r3, #1
 80027a0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	ee07 3a90 	vmov	s15, r3
 80027a8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80027ac:	edd7 6a07 	vldr	s13, [r7, #28]
 80027b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027b8:	ee17 3a90 	vmov	r3, s15
 80027bc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80027be:	e005      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80027c0:	2300      	movs	r3, #0
 80027c2:	61bb      	str	r3, [r7, #24]
      break;
 80027c4:	e002      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80027c6:	4b07      	ldr	r3, [pc, #28]	@ (80027e4 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80027c8:	61bb      	str	r3, [r7, #24]
      break;
 80027ca:	bf00      	nop
  }

  return sysclockfreq;
 80027cc:	69bb      	ldr	r3, [r7, #24]
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3724      	adds	r7, #36	@ 0x24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d8:	4770      	bx	lr
 80027da:	bf00      	nop
 80027dc:	58024400 	.word	0x58024400
 80027e0:	03d09000 	.word	0x03d09000
 80027e4:	003d0900 	.word	0x003d0900
 80027e8:	007a1200 	.word	0x007a1200
 80027ec:	46000000 	.word	0x46000000
 80027f0:	4c742400 	.word	0x4c742400
 80027f4:	4a742400 	.word	0x4a742400
 80027f8:	4af42400 	.word	0x4af42400

080027fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002802:	f7ff fe81 	bl	8002508 <HAL_RCC_GetSysClockFreq>
 8002806:	4602      	mov	r2, r0
 8002808:	4b10      	ldr	r3, [pc, #64]	@ (800284c <HAL_RCC_GetHCLKFreq+0x50>)
 800280a:	699b      	ldr	r3, [r3, #24]
 800280c:	0a1b      	lsrs	r3, r3, #8
 800280e:	f003 030f 	and.w	r3, r3, #15
 8002812:	490f      	ldr	r1, [pc, #60]	@ (8002850 <HAL_RCC_GetHCLKFreq+0x54>)
 8002814:	5ccb      	ldrb	r3, [r1, r3]
 8002816:	f003 031f 	and.w	r3, r3, #31
 800281a:	fa22 f303 	lsr.w	r3, r2, r3
 800281e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002820:	4b0a      	ldr	r3, [pc, #40]	@ (800284c <HAL_RCC_GetHCLKFreq+0x50>)
 8002822:	699b      	ldr	r3, [r3, #24]
 8002824:	f003 030f 	and.w	r3, r3, #15
 8002828:	4a09      	ldr	r2, [pc, #36]	@ (8002850 <HAL_RCC_GetHCLKFreq+0x54>)
 800282a:	5cd3      	ldrb	r3, [r2, r3]
 800282c:	f003 031f 	and.w	r3, r3, #31
 8002830:	687a      	ldr	r2, [r7, #4]
 8002832:	fa22 f303 	lsr.w	r3, r2, r3
 8002836:	4a07      	ldr	r2, [pc, #28]	@ (8002854 <HAL_RCC_GetHCLKFreq+0x58>)
 8002838:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800283a:	4a07      	ldr	r2, [pc, #28]	@ (8002858 <HAL_RCC_GetHCLKFreq+0x5c>)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002840:	4b04      	ldr	r3, [pc, #16]	@ (8002854 <HAL_RCC_GetHCLKFreq+0x58>)
 8002842:	681b      	ldr	r3, [r3, #0]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3708      	adds	r7, #8
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	58024400 	.word	0x58024400
 8002850:	08003e70 	.word	0x08003e70
 8002854:	24000020 	.word	0x24000020
 8002858:	2400001c 	.word	0x2400001c

0800285c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002860:	f7ff ffcc 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002864:	4602      	mov	r2, r0
 8002866:	4b06      	ldr	r3, [pc, #24]	@ (8002880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	091b      	lsrs	r3, r3, #4
 800286c:	f003 0307 	and.w	r3, r3, #7
 8002870:	4904      	ldr	r1, [pc, #16]	@ (8002884 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002872:	5ccb      	ldrb	r3, [r1, r3]
 8002874:	f003 031f 	and.w	r3, r3, #31
 8002878:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800287c:	4618      	mov	r0, r3
 800287e:	bd80      	pop	{r7, pc}
 8002880:	58024400 	.word	0x58024400
 8002884:	08003e70 	.word	0x08003e70

08002888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800288c:	f7ff ffb6 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8002894:	69db      	ldr	r3, [r3, #28]
 8002896:	0a1b      	lsrs	r3, r3, #8
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	4904      	ldr	r1, [pc, #16]	@ (80028b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	bd80      	pop	{r7, pc}
 80028ac:	58024400 	.word	0x58024400
 80028b0:	08003e70 	.word	0x08003e70

080028b4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80028b8:	f7ff ffa0 	bl	80027fc <HAL_RCC_GetHCLKFreq>
 80028bc:	4602      	mov	r2, r0
 80028be:	4b06      	ldr	r3, [pc, #24]	@ (80028d8 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80028c0:	6a1b      	ldr	r3, [r3, #32]
 80028c2:	091b      	lsrs	r3, r3, #4
 80028c4:	f003 0307 	and.w	r3, r3, #7
 80028c8:	4904      	ldr	r1, [pc, #16]	@ (80028dc <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 80028ca:	5ccb      	ldrb	r3, [r1, r3]
 80028cc:	f003 031f 	and.w	r3, r3, #31
 80028d0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	58024400 	.word	0x58024400
 80028dc:	08003e70 	.word	0x08003e70

080028e0 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b089      	sub	sp, #36	@ 0x24
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80028e8:	4ba1      	ldr	r3, [pc, #644]	@ (8002b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80028ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ec:	f003 0303 	and.w	r3, r3, #3
 80028f0:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 80028f2:	4b9f      	ldr	r3, [pc, #636]	@ (8002b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80028f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028f6:	0b1b      	lsrs	r3, r3, #12
 80028f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80028fc:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 80028fe:	4b9c      	ldr	r3, [pc, #624]	@ (8002b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002900:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002902:	091b      	lsrs	r3, r3, #4
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800290a:	4b99      	ldr	r3, [pc, #612]	@ (8002b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800290c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800290e:	08db      	lsrs	r3, r3, #3
 8002910:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	fb02 f303 	mul.w	r3, r2, r3
 800291a:	ee07 3a90 	vmov	s15, r3
 800291e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002922:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	2b00      	cmp	r3, #0
 800292a:	f000 8111 	beq.w	8002b50 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800292e:	69bb      	ldr	r3, [r7, #24]
 8002930:	2b02      	cmp	r3, #2
 8002932:	f000 8083 	beq.w	8002a3c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8002936:	69bb      	ldr	r3, [r7, #24]
 8002938:	2b02      	cmp	r3, #2
 800293a:	f200 80a1 	bhi.w	8002a80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d003      	beq.n	800294c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	2b01      	cmp	r3, #1
 8002948:	d056      	beq.n	80029f8 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800294a:	e099      	b.n	8002a80 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800294c:	4b88      	ldr	r3, [pc, #544]	@ (8002b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0320 	and.w	r3, r3, #32
 8002954:	2b00      	cmp	r3, #0
 8002956:	d02d      	beq.n	80029b4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002958:	4b85      	ldr	r3, [pc, #532]	@ (8002b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	08db      	lsrs	r3, r3, #3
 800295e:	f003 0303 	and.w	r3, r3, #3
 8002962:	4a84      	ldr	r2, [pc, #528]	@ (8002b74 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8002964:	fa22 f303 	lsr.w	r3, r2, r3
 8002968:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800296a:	68bb      	ldr	r3, [r7, #8]
 800296c:	ee07 3a90 	vmov	s15, r3
 8002970:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	ee07 3a90 	vmov	s15, r3
 800297a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800297e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002982:	4b7b      	ldr	r3, [pc, #492]	@ (8002b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002984:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002986:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800298a:	ee07 3a90 	vmov	s15, r3
 800298e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002992:	ed97 6a03 	vldr	s12, [r7, #12]
 8002996:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002b78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800299a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800299e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029ae:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80029b2:	e087      	b.n	8002ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	ee07 3a90 	vmov	s15, r3
 80029ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029be:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002b7c <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80029c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029c6:	4b6a      	ldr	r3, [pc, #424]	@ (8002b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029ce:	ee07 3a90 	vmov	s15, r3
 80029d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029d6:	ed97 6a03 	vldr	s12, [r7, #12]
 80029da:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002b78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80029de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029f2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80029f6:	e065      	b.n	8002ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80029f8:	697b      	ldr	r3, [r7, #20]
 80029fa:	ee07 3a90 	vmov	s15, r3
 80029fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a02:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002b80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002a06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a0a:	4b59      	ldr	r3, [pc, #356]	@ (8002b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a12:	ee07 3a90 	vmov	s15, r3
 8002a16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a1a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a1e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002b78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002a22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a2a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a32:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a36:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a3a:	e043      	b.n	8002ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	ee07 3a90 	vmov	s15, r3
 8002a42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a46:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002b84 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8002a4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a4e:	4b48      	ldr	r3, [pc, #288]	@ (8002b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a56:	ee07 3a90 	vmov	s15, r3
 8002a5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a62:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002b78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002a66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a7a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a7e:	e021      	b.n	8002ac4 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002a80:	697b      	ldr	r3, [r7, #20]
 8002a82:	ee07 3a90 	vmov	s15, r3
 8002a86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a8a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002b80 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a92:	4b37      	ldr	r3, [pc, #220]	@ (8002b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a9a:	ee07 3a90 	vmov	s15, r3
 8002a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002aa2:	ed97 6a03 	vldr	s12, [r7, #12]
 8002aa6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002b78 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002abe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ac2:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002ac4:	4b2a      	ldr	r3, [pc, #168]	@ (8002b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac8:	0a5b      	lsrs	r3, r3, #9
 8002aca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ace:	ee07 3a90 	vmov	s15, r3
 8002ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ad6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ada:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002ade:	edd7 6a07 	vldr	s13, [r7, #28]
 8002ae2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ae6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002aea:	ee17 2a90 	vmov	r2, s15
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8002af2:	4b1f      	ldr	r3, [pc, #124]	@ (8002b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002af4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002af6:	0c1b      	lsrs	r3, r3, #16
 8002af8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002afc:	ee07 3a90 	vmov	s15, r3
 8002b00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b04:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b08:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b0c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b18:	ee17 2a90 	vmov	r2, s15
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8002b20:	4b13      	ldr	r3, [pc, #76]	@ (8002b70 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b24:	0e1b      	lsrs	r3, r3, #24
 8002b26:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b2a:	ee07 3a90 	vmov	s15, r3
 8002b2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b32:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b46:	ee17 2a90 	vmov	r2, s15
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002b4e:	e008      	b.n	8002b62 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2200      	movs	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	609a      	str	r2, [r3, #8]
}
 8002b62:	bf00      	nop
 8002b64:	3724      	adds	r7, #36	@ 0x24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	58024400 	.word	0x58024400
 8002b74:	03d09000 	.word	0x03d09000
 8002b78:	46000000 	.word	0x46000000
 8002b7c:	4c742400 	.word	0x4c742400
 8002b80:	4a742400 	.word	0x4a742400
 8002b84:	4af42400 	.word	0x4af42400

08002b88 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b089      	sub	sp, #36	@ 0x24
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b90:	4ba1      	ldr	r3, [pc, #644]	@ (8002e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002b92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b94:	f003 0303 	and.w	r3, r3, #3
 8002b98:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8002b9a:	4b9f      	ldr	r3, [pc, #636]	@ (8002e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b9e:	0d1b      	lsrs	r3, r3, #20
 8002ba0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002ba4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002ba6:	4b9c      	ldr	r3, [pc, #624]	@ (8002e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ba8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002baa:	0a1b      	lsrs	r3, r3, #8
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002bb2:	4b99      	ldr	r3, [pc, #612]	@ (8002e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb6:	08db      	lsrs	r3, r3, #3
 8002bb8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002bbc:	693a      	ldr	r2, [r7, #16]
 8002bbe:	fb02 f303 	mul.w	r3, r2, r3
 8002bc2:	ee07 3a90 	vmov	s15, r3
 8002bc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bca:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	f000 8111 	beq.w	8002df8 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	2b02      	cmp	r3, #2
 8002bda:	f000 8083 	beq.w	8002ce4 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8002bde:	69bb      	ldr	r3, [r7, #24]
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	f200 80a1 	bhi.w	8002d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2b01      	cmp	r3, #1
 8002bf0:	d056      	beq.n	8002ca0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8002bf2:	e099      	b.n	8002d28 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bf4:	4b88      	ldr	r3, [pc, #544]	@ (8002e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 0320 	and.w	r3, r3, #32
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d02d      	beq.n	8002c5c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c00:	4b85      	ldr	r3, [pc, #532]	@ (8002e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	08db      	lsrs	r3, r3, #3
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	4a84      	ldr	r2, [pc, #528]	@ (8002e1c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8002c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c10:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	ee07 3a90 	vmov	s15, r3
 8002c18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	ee07 3a90 	vmov	s15, r3
 8002c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c2a:	4b7b      	ldr	r3, [pc, #492]	@ (8002e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c32:	ee07 3a90 	vmov	s15, r3
 8002c36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002c3e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002e20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002c42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c4a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c56:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002c5a:	e087      	b.n	8002d6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	ee07 3a90 	vmov	s15, r3
 8002c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c66:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002e24 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8002c6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c6e:	4b6a      	ldr	r3, [pc, #424]	@ (8002e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c76:	ee07 3a90 	vmov	s15, r3
 8002c7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c7e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002c82:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002e20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002c86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c8e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c96:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c9a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c9e:	e065      	b.n	8002d6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	ee07 3a90 	vmov	s15, r3
 8002ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002caa:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002e28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002cae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cb2:	4b59      	ldr	r3, [pc, #356]	@ (8002e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002cb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cba:	ee07 3a90 	vmov	s15, r3
 8002cbe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cc2:	ed97 6a03 	vldr	s12, [r7, #12]
 8002cc6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002e20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002cca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cd2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cd6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cda:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cde:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ce2:	e043      	b.n	8002d6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	ee07 3a90 	vmov	s15, r3
 8002cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cee:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002e2c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8002cf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cf6:	4b48      	ldr	r3, [pc, #288]	@ (8002e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cfe:	ee07 3a90 	vmov	s15, r3
 8002d02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d06:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d0a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002e20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002d0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d16:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d22:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d26:	e021      	b.n	8002d6c <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	ee07 3a90 	vmov	s15, r3
 8002d2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d32:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002e28 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002d36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d3a:	4b37      	ldr	r3, [pc, #220]	@ (8002e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d42:	ee07 3a90 	vmov	s15, r3
 8002d46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d4e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002e20 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002d52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d66:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d6a:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8002d6c:	4b2a      	ldr	r3, [pc, #168]	@ (8002e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d70:	0a5b      	lsrs	r3, r3, #9
 8002d72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d76:	ee07 3a90 	vmov	s15, r3
 8002d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d7e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d82:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002d86:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d8a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d92:	ee17 2a90 	vmov	r2, s15
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8002d9a:	4b1f      	ldr	r3, [pc, #124]	@ (8002e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9e:	0c1b      	lsrs	r3, r3, #16
 8002da0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002da4:	ee07 3a90 	vmov	s15, r3
 8002da8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dac:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002db0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002db4:	edd7 6a07 	vldr	s13, [r7, #28]
 8002db8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dc0:	ee17 2a90 	vmov	r2, s15
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8002dc8:	4b13      	ldr	r3, [pc, #76]	@ (8002e18 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dcc:	0e1b      	lsrs	r3, r3, #24
 8002dce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002dd2:	ee07 3a90 	vmov	s15, r3
 8002dd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dda:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002dde:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002de2:	edd7 6a07 	vldr	s13, [r7, #28]
 8002de6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002dee:	ee17 2a90 	vmov	r2, s15
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8002df6:	e008      	b.n	8002e0a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2200      	movs	r2, #0
 8002e08:	609a      	str	r2, [r3, #8]
}
 8002e0a:	bf00      	nop
 8002e0c:	3724      	adds	r7, #36	@ 0x24
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr
 8002e16:	bf00      	nop
 8002e18:	58024400 	.word	0x58024400
 8002e1c:	03d09000 	.word	0x03d09000
 8002e20:	46000000 	.word	0x46000000
 8002e24:	4c742400 	.word	0x4c742400
 8002e28:	4a742400 	.word	0x4a742400
 8002e2c:	4af42400 	.word	0x4af42400

08002e30 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b082      	sub	sp, #8
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d101      	bne.n	8002e42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e042      	b.n	8002ec8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d106      	bne.n	8002e5a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f83b 	bl	8002ed0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2224      	movs	r2, #36	@ 0x24
 8002e5e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	681a      	ldr	r2, [r3, #0]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f022 0201 	bic.w	r2, r2, #1
 8002e70:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	f000 fd9a 	bl	80039b4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f82f 	bl	8002ee4 <UART_SetConfig>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d101      	bne.n	8002e90 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	e01b      	b.n	8002ec8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	685a      	ldr	r2, [r3, #4]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689a      	ldr	r2, [r3, #8]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002eae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 0201 	orr.w	r2, r2, #1
 8002ebe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f000 fe19 	bl	8003af8 <UART_CheckIdleState>
 8002ec6:	4603      	mov	r3, r0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3708      	adds	r7, #8
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}

08002ed0 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ee4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ee8:	b092      	sub	sp, #72	@ 0x48
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ef4:	697b      	ldr	r3, [r7, #20]
 8002ef6:	689a      	ldr	r2, [r3, #8]
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	691b      	ldr	r3, [r3, #16]
 8002efc:	431a      	orrs	r2, r3
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	431a      	orrs	r2, r3
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681a      	ldr	r2, [r3, #0]
 8002f12:	4bbe      	ldr	r3, [pc, #760]	@ (800320c <UART_SetConfig+0x328>)
 8002f14:	4013      	ands	r3, r2
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	6812      	ldr	r2, [r2, #0]
 8002f1a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002f1c:	430b      	orrs	r3, r1
 8002f1e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002f2a:	697b      	ldr	r3, [r7, #20]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f36:	697b      	ldr	r3, [r7, #20]
 8002f38:	699b      	ldr	r3, [r3, #24]
 8002f3a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4ab3      	ldr	r2, [pc, #716]	@ (8003210 <UART_SetConfig+0x32c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d004      	beq.n	8002f50 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	689a      	ldr	r2, [r3, #8]
 8002f56:	4baf      	ldr	r3, [pc, #700]	@ (8003214 <UART_SetConfig+0x330>)
 8002f58:	4013      	ands	r3, r2
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	6812      	ldr	r2, [r2, #0]
 8002f5e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002f60:	430b      	orrs	r3, r1
 8002f62:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6a:	f023 010f 	bic.w	r1, r3, #15
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	430a      	orrs	r2, r1
 8002f78:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002f7a:	697b      	ldr	r3, [r7, #20]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4aa6      	ldr	r2, [pc, #664]	@ (8003218 <UART_SetConfig+0x334>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d177      	bne.n	8003074 <UART_SetConfig+0x190>
 8002f84:	4ba5      	ldr	r3, [pc, #660]	@ (800321c <UART_SetConfig+0x338>)
 8002f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002f8c:	2b28      	cmp	r3, #40	@ 0x28
 8002f8e:	d86d      	bhi.n	800306c <UART_SetConfig+0x188>
 8002f90:	a201      	add	r2, pc, #4	@ (adr r2, 8002f98 <UART_SetConfig+0xb4>)
 8002f92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f96:	bf00      	nop
 8002f98:	0800303d 	.word	0x0800303d
 8002f9c:	0800306d 	.word	0x0800306d
 8002fa0:	0800306d 	.word	0x0800306d
 8002fa4:	0800306d 	.word	0x0800306d
 8002fa8:	0800306d 	.word	0x0800306d
 8002fac:	0800306d 	.word	0x0800306d
 8002fb0:	0800306d 	.word	0x0800306d
 8002fb4:	0800306d 	.word	0x0800306d
 8002fb8:	08003045 	.word	0x08003045
 8002fbc:	0800306d 	.word	0x0800306d
 8002fc0:	0800306d 	.word	0x0800306d
 8002fc4:	0800306d 	.word	0x0800306d
 8002fc8:	0800306d 	.word	0x0800306d
 8002fcc:	0800306d 	.word	0x0800306d
 8002fd0:	0800306d 	.word	0x0800306d
 8002fd4:	0800306d 	.word	0x0800306d
 8002fd8:	0800304d 	.word	0x0800304d
 8002fdc:	0800306d 	.word	0x0800306d
 8002fe0:	0800306d 	.word	0x0800306d
 8002fe4:	0800306d 	.word	0x0800306d
 8002fe8:	0800306d 	.word	0x0800306d
 8002fec:	0800306d 	.word	0x0800306d
 8002ff0:	0800306d 	.word	0x0800306d
 8002ff4:	0800306d 	.word	0x0800306d
 8002ff8:	08003055 	.word	0x08003055
 8002ffc:	0800306d 	.word	0x0800306d
 8003000:	0800306d 	.word	0x0800306d
 8003004:	0800306d 	.word	0x0800306d
 8003008:	0800306d 	.word	0x0800306d
 800300c:	0800306d 	.word	0x0800306d
 8003010:	0800306d 	.word	0x0800306d
 8003014:	0800306d 	.word	0x0800306d
 8003018:	0800305d 	.word	0x0800305d
 800301c:	0800306d 	.word	0x0800306d
 8003020:	0800306d 	.word	0x0800306d
 8003024:	0800306d 	.word	0x0800306d
 8003028:	0800306d 	.word	0x0800306d
 800302c:	0800306d 	.word	0x0800306d
 8003030:	0800306d 	.word	0x0800306d
 8003034:	0800306d 	.word	0x0800306d
 8003038:	08003065 	.word	0x08003065
 800303c:	2301      	movs	r3, #1
 800303e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003042:	e222      	b.n	800348a <UART_SetConfig+0x5a6>
 8003044:	2304      	movs	r3, #4
 8003046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800304a:	e21e      	b.n	800348a <UART_SetConfig+0x5a6>
 800304c:	2308      	movs	r3, #8
 800304e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003052:	e21a      	b.n	800348a <UART_SetConfig+0x5a6>
 8003054:	2310      	movs	r3, #16
 8003056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800305a:	e216      	b.n	800348a <UART_SetConfig+0x5a6>
 800305c:	2320      	movs	r3, #32
 800305e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003062:	e212      	b.n	800348a <UART_SetConfig+0x5a6>
 8003064:	2340      	movs	r3, #64	@ 0x40
 8003066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800306a:	e20e      	b.n	800348a <UART_SetConfig+0x5a6>
 800306c:	2380      	movs	r3, #128	@ 0x80
 800306e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003072:	e20a      	b.n	800348a <UART_SetConfig+0x5a6>
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a69      	ldr	r2, [pc, #420]	@ (8003220 <UART_SetConfig+0x33c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d130      	bne.n	80030e0 <UART_SetConfig+0x1fc>
 800307e:	4b67      	ldr	r3, [pc, #412]	@ (800321c <UART_SetConfig+0x338>)
 8003080:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003082:	f003 0307 	and.w	r3, r3, #7
 8003086:	2b05      	cmp	r3, #5
 8003088:	d826      	bhi.n	80030d8 <UART_SetConfig+0x1f4>
 800308a:	a201      	add	r2, pc, #4	@ (adr r2, 8003090 <UART_SetConfig+0x1ac>)
 800308c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003090:	080030a9 	.word	0x080030a9
 8003094:	080030b1 	.word	0x080030b1
 8003098:	080030b9 	.word	0x080030b9
 800309c:	080030c1 	.word	0x080030c1
 80030a0:	080030c9 	.word	0x080030c9
 80030a4:	080030d1 	.word	0x080030d1
 80030a8:	2300      	movs	r3, #0
 80030aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030ae:	e1ec      	b.n	800348a <UART_SetConfig+0x5a6>
 80030b0:	2304      	movs	r3, #4
 80030b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030b6:	e1e8      	b.n	800348a <UART_SetConfig+0x5a6>
 80030b8:	2308      	movs	r3, #8
 80030ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030be:	e1e4      	b.n	800348a <UART_SetConfig+0x5a6>
 80030c0:	2310      	movs	r3, #16
 80030c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030c6:	e1e0      	b.n	800348a <UART_SetConfig+0x5a6>
 80030c8:	2320      	movs	r3, #32
 80030ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030ce:	e1dc      	b.n	800348a <UART_SetConfig+0x5a6>
 80030d0:	2340      	movs	r3, #64	@ 0x40
 80030d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030d6:	e1d8      	b.n	800348a <UART_SetConfig+0x5a6>
 80030d8:	2380      	movs	r3, #128	@ 0x80
 80030da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80030de:	e1d4      	b.n	800348a <UART_SetConfig+0x5a6>
 80030e0:	697b      	ldr	r3, [r7, #20]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a4f      	ldr	r2, [pc, #316]	@ (8003224 <UART_SetConfig+0x340>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d130      	bne.n	800314c <UART_SetConfig+0x268>
 80030ea:	4b4c      	ldr	r3, [pc, #304]	@ (800321c <UART_SetConfig+0x338>)
 80030ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80030ee:	f003 0307 	and.w	r3, r3, #7
 80030f2:	2b05      	cmp	r3, #5
 80030f4:	d826      	bhi.n	8003144 <UART_SetConfig+0x260>
 80030f6:	a201      	add	r2, pc, #4	@ (adr r2, 80030fc <UART_SetConfig+0x218>)
 80030f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030fc:	08003115 	.word	0x08003115
 8003100:	0800311d 	.word	0x0800311d
 8003104:	08003125 	.word	0x08003125
 8003108:	0800312d 	.word	0x0800312d
 800310c:	08003135 	.word	0x08003135
 8003110:	0800313d 	.word	0x0800313d
 8003114:	2300      	movs	r3, #0
 8003116:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800311a:	e1b6      	b.n	800348a <UART_SetConfig+0x5a6>
 800311c:	2304      	movs	r3, #4
 800311e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003122:	e1b2      	b.n	800348a <UART_SetConfig+0x5a6>
 8003124:	2308      	movs	r3, #8
 8003126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800312a:	e1ae      	b.n	800348a <UART_SetConfig+0x5a6>
 800312c:	2310      	movs	r3, #16
 800312e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003132:	e1aa      	b.n	800348a <UART_SetConfig+0x5a6>
 8003134:	2320      	movs	r3, #32
 8003136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800313a:	e1a6      	b.n	800348a <UART_SetConfig+0x5a6>
 800313c:	2340      	movs	r3, #64	@ 0x40
 800313e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003142:	e1a2      	b.n	800348a <UART_SetConfig+0x5a6>
 8003144:	2380      	movs	r3, #128	@ 0x80
 8003146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800314a:	e19e      	b.n	800348a <UART_SetConfig+0x5a6>
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a35      	ldr	r2, [pc, #212]	@ (8003228 <UART_SetConfig+0x344>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d130      	bne.n	80031b8 <UART_SetConfig+0x2d4>
 8003156:	4b31      	ldr	r3, [pc, #196]	@ (800321c <UART_SetConfig+0x338>)
 8003158:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800315a:	f003 0307 	and.w	r3, r3, #7
 800315e:	2b05      	cmp	r3, #5
 8003160:	d826      	bhi.n	80031b0 <UART_SetConfig+0x2cc>
 8003162:	a201      	add	r2, pc, #4	@ (adr r2, 8003168 <UART_SetConfig+0x284>)
 8003164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003168:	08003181 	.word	0x08003181
 800316c:	08003189 	.word	0x08003189
 8003170:	08003191 	.word	0x08003191
 8003174:	08003199 	.word	0x08003199
 8003178:	080031a1 	.word	0x080031a1
 800317c:	080031a9 	.word	0x080031a9
 8003180:	2300      	movs	r3, #0
 8003182:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003186:	e180      	b.n	800348a <UART_SetConfig+0x5a6>
 8003188:	2304      	movs	r3, #4
 800318a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800318e:	e17c      	b.n	800348a <UART_SetConfig+0x5a6>
 8003190:	2308      	movs	r3, #8
 8003192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003196:	e178      	b.n	800348a <UART_SetConfig+0x5a6>
 8003198:	2310      	movs	r3, #16
 800319a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800319e:	e174      	b.n	800348a <UART_SetConfig+0x5a6>
 80031a0:	2320      	movs	r3, #32
 80031a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031a6:	e170      	b.n	800348a <UART_SetConfig+0x5a6>
 80031a8:	2340      	movs	r3, #64	@ 0x40
 80031aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031ae:	e16c      	b.n	800348a <UART_SetConfig+0x5a6>
 80031b0:	2380      	movs	r3, #128	@ 0x80
 80031b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031b6:	e168      	b.n	800348a <UART_SetConfig+0x5a6>
 80031b8:	697b      	ldr	r3, [r7, #20]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a1b      	ldr	r2, [pc, #108]	@ (800322c <UART_SetConfig+0x348>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d142      	bne.n	8003248 <UART_SetConfig+0x364>
 80031c2:	4b16      	ldr	r3, [pc, #88]	@ (800321c <UART_SetConfig+0x338>)
 80031c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	2b05      	cmp	r3, #5
 80031cc:	d838      	bhi.n	8003240 <UART_SetConfig+0x35c>
 80031ce:	a201      	add	r2, pc, #4	@ (adr r2, 80031d4 <UART_SetConfig+0x2f0>)
 80031d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031d4:	080031ed 	.word	0x080031ed
 80031d8:	080031f5 	.word	0x080031f5
 80031dc:	080031fd 	.word	0x080031fd
 80031e0:	08003205 	.word	0x08003205
 80031e4:	08003231 	.word	0x08003231
 80031e8:	08003239 	.word	0x08003239
 80031ec:	2300      	movs	r3, #0
 80031ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031f2:	e14a      	b.n	800348a <UART_SetConfig+0x5a6>
 80031f4:	2304      	movs	r3, #4
 80031f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80031fa:	e146      	b.n	800348a <UART_SetConfig+0x5a6>
 80031fc:	2308      	movs	r3, #8
 80031fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003202:	e142      	b.n	800348a <UART_SetConfig+0x5a6>
 8003204:	2310      	movs	r3, #16
 8003206:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800320a:	e13e      	b.n	800348a <UART_SetConfig+0x5a6>
 800320c:	cfff69f3 	.word	0xcfff69f3
 8003210:	58000c00 	.word	0x58000c00
 8003214:	11fff4ff 	.word	0x11fff4ff
 8003218:	40011000 	.word	0x40011000
 800321c:	58024400 	.word	0x58024400
 8003220:	40004400 	.word	0x40004400
 8003224:	40004800 	.word	0x40004800
 8003228:	40004c00 	.word	0x40004c00
 800322c:	40005000 	.word	0x40005000
 8003230:	2320      	movs	r3, #32
 8003232:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003236:	e128      	b.n	800348a <UART_SetConfig+0x5a6>
 8003238:	2340      	movs	r3, #64	@ 0x40
 800323a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800323e:	e124      	b.n	800348a <UART_SetConfig+0x5a6>
 8003240:	2380      	movs	r3, #128	@ 0x80
 8003242:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003246:	e120      	b.n	800348a <UART_SetConfig+0x5a6>
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4acb      	ldr	r2, [pc, #812]	@ (800357c <UART_SetConfig+0x698>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d176      	bne.n	8003340 <UART_SetConfig+0x45c>
 8003252:	4bcb      	ldr	r3, [pc, #812]	@ (8003580 <UART_SetConfig+0x69c>)
 8003254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003256:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800325a:	2b28      	cmp	r3, #40	@ 0x28
 800325c:	d86c      	bhi.n	8003338 <UART_SetConfig+0x454>
 800325e:	a201      	add	r2, pc, #4	@ (adr r2, 8003264 <UART_SetConfig+0x380>)
 8003260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003264:	08003309 	.word	0x08003309
 8003268:	08003339 	.word	0x08003339
 800326c:	08003339 	.word	0x08003339
 8003270:	08003339 	.word	0x08003339
 8003274:	08003339 	.word	0x08003339
 8003278:	08003339 	.word	0x08003339
 800327c:	08003339 	.word	0x08003339
 8003280:	08003339 	.word	0x08003339
 8003284:	08003311 	.word	0x08003311
 8003288:	08003339 	.word	0x08003339
 800328c:	08003339 	.word	0x08003339
 8003290:	08003339 	.word	0x08003339
 8003294:	08003339 	.word	0x08003339
 8003298:	08003339 	.word	0x08003339
 800329c:	08003339 	.word	0x08003339
 80032a0:	08003339 	.word	0x08003339
 80032a4:	08003319 	.word	0x08003319
 80032a8:	08003339 	.word	0x08003339
 80032ac:	08003339 	.word	0x08003339
 80032b0:	08003339 	.word	0x08003339
 80032b4:	08003339 	.word	0x08003339
 80032b8:	08003339 	.word	0x08003339
 80032bc:	08003339 	.word	0x08003339
 80032c0:	08003339 	.word	0x08003339
 80032c4:	08003321 	.word	0x08003321
 80032c8:	08003339 	.word	0x08003339
 80032cc:	08003339 	.word	0x08003339
 80032d0:	08003339 	.word	0x08003339
 80032d4:	08003339 	.word	0x08003339
 80032d8:	08003339 	.word	0x08003339
 80032dc:	08003339 	.word	0x08003339
 80032e0:	08003339 	.word	0x08003339
 80032e4:	08003329 	.word	0x08003329
 80032e8:	08003339 	.word	0x08003339
 80032ec:	08003339 	.word	0x08003339
 80032f0:	08003339 	.word	0x08003339
 80032f4:	08003339 	.word	0x08003339
 80032f8:	08003339 	.word	0x08003339
 80032fc:	08003339 	.word	0x08003339
 8003300:	08003339 	.word	0x08003339
 8003304:	08003331 	.word	0x08003331
 8003308:	2301      	movs	r3, #1
 800330a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800330e:	e0bc      	b.n	800348a <UART_SetConfig+0x5a6>
 8003310:	2304      	movs	r3, #4
 8003312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003316:	e0b8      	b.n	800348a <UART_SetConfig+0x5a6>
 8003318:	2308      	movs	r3, #8
 800331a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800331e:	e0b4      	b.n	800348a <UART_SetConfig+0x5a6>
 8003320:	2310      	movs	r3, #16
 8003322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003326:	e0b0      	b.n	800348a <UART_SetConfig+0x5a6>
 8003328:	2320      	movs	r3, #32
 800332a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800332e:	e0ac      	b.n	800348a <UART_SetConfig+0x5a6>
 8003330:	2340      	movs	r3, #64	@ 0x40
 8003332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003336:	e0a8      	b.n	800348a <UART_SetConfig+0x5a6>
 8003338:	2380      	movs	r3, #128	@ 0x80
 800333a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800333e:	e0a4      	b.n	800348a <UART_SetConfig+0x5a6>
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a8f      	ldr	r2, [pc, #572]	@ (8003584 <UART_SetConfig+0x6a0>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d130      	bne.n	80033ac <UART_SetConfig+0x4c8>
 800334a:	4b8d      	ldr	r3, [pc, #564]	@ (8003580 <UART_SetConfig+0x69c>)
 800334c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334e:	f003 0307 	and.w	r3, r3, #7
 8003352:	2b05      	cmp	r3, #5
 8003354:	d826      	bhi.n	80033a4 <UART_SetConfig+0x4c0>
 8003356:	a201      	add	r2, pc, #4	@ (adr r2, 800335c <UART_SetConfig+0x478>)
 8003358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335c:	08003375 	.word	0x08003375
 8003360:	0800337d 	.word	0x0800337d
 8003364:	08003385 	.word	0x08003385
 8003368:	0800338d 	.word	0x0800338d
 800336c:	08003395 	.word	0x08003395
 8003370:	0800339d 	.word	0x0800339d
 8003374:	2300      	movs	r3, #0
 8003376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800337a:	e086      	b.n	800348a <UART_SetConfig+0x5a6>
 800337c:	2304      	movs	r3, #4
 800337e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003382:	e082      	b.n	800348a <UART_SetConfig+0x5a6>
 8003384:	2308      	movs	r3, #8
 8003386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800338a:	e07e      	b.n	800348a <UART_SetConfig+0x5a6>
 800338c:	2310      	movs	r3, #16
 800338e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003392:	e07a      	b.n	800348a <UART_SetConfig+0x5a6>
 8003394:	2320      	movs	r3, #32
 8003396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800339a:	e076      	b.n	800348a <UART_SetConfig+0x5a6>
 800339c:	2340      	movs	r3, #64	@ 0x40
 800339e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033a2:	e072      	b.n	800348a <UART_SetConfig+0x5a6>
 80033a4:	2380      	movs	r3, #128	@ 0x80
 80033a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033aa:	e06e      	b.n	800348a <UART_SetConfig+0x5a6>
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a75      	ldr	r2, [pc, #468]	@ (8003588 <UART_SetConfig+0x6a4>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d130      	bne.n	8003418 <UART_SetConfig+0x534>
 80033b6:	4b72      	ldr	r3, [pc, #456]	@ (8003580 <UART_SetConfig+0x69c>)
 80033b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ba:	f003 0307 	and.w	r3, r3, #7
 80033be:	2b05      	cmp	r3, #5
 80033c0:	d826      	bhi.n	8003410 <UART_SetConfig+0x52c>
 80033c2:	a201      	add	r2, pc, #4	@ (adr r2, 80033c8 <UART_SetConfig+0x4e4>)
 80033c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033c8:	080033e1 	.word	0x080033e1
 80033cc:	080033e9 	.word	0x080033e9
 80033d0:	080033f1 	.word	0x080033f1
 80033d4:	080033f9 	.word	0x080033f9
 80033d8:	08003401 	.word	0x08003401
 80033dc:	08003409 	.word	0x08003409
 80033e0:	2300      	movs	r3, #0
 80033e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033e6:	e050      	b.n	800348a <UART_SetConfig+0x5a6>
 80033e8:	2304      	movs	r3, #4
 80033ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033ee:	e04c      	b.n	800348a <UART_SetConfig+0x5a6>
 80033f0:	2308      	movs	r3, #8
 80033f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033f6:	e048      	b.n	800348a <UART_SetConfig+0x5a6>
 80033f8:	2310      	movs	r3, #16
 80033fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80033fe:	e044      	b.n	800348a <UART_SetConfig+0x5a6>
 8003400:	2320      	movs	r3, #32
 8003402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003406:	e040      	b.n	800348a <UART_SetConfig+0x5a6>
 8003408:	2340      	movs	r3, #64	@ 0x40
 800340a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800340e:	e03c      	b.n	800348a <UART_SetConfig+0x5a6>
 8003410:	2380      	movs	r3, #128	@ 0x80
 8003412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003416:	e038      	b.n	800348a <UART_SetConfig+0x5a6>
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a5b      	ldr	r2, [pc, #364]	@ (800358c <UART_SetConfig+0x6a8>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d130      	bne.n	8003484 <UART_SetConfig+0x5a0>
 8003422:	4b57      	ldr	r3, [pc, #348]	@ (8003580 <UART_SetConfig+0x69c>)
 8003424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	2b05      	cmp	r3, #5
 800342c:	d826      	bhi.n	800347c <UART_SetConfig+0x598>
 800342e:	a201      	add	r2, pc, #4	@ (adr r2, 8003434 <UART_SetConfig+0x550>)
 8003430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003434:	0800344d 	.word	0x0800344d
 8003438:	08003455 	.word	0x08003455
 800343c:	0800345d 	.word	0x0800345d
 8003440:	08003465 	.word	0x08003465
 8003444:	0800346d 	.word	0x0800346d
 8003448:	08003475 	.word	0x08003475
 800344c:	2302      	movs	r3, #2
 800344e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003452:	e01a      	b.n	800348a <UART_SetConfig+0x5a6>
 8003454:	2304      	movs	r3, #4
 8003456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800345a:	e016      	b.n	800348a <UART_SetConfig+0x5a6>
 800345c:	2308      	movs	r3, #8
 800345e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003462:	e012      	b.n	800348a <UART_SetConfig+0x5a6>
 8003464:	2310      	movs	r3, #16
 8003466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800346a:	e00e      	b.n	800348a <UART_SetConfig+0x5a6>
 800346c:	2320      	movs	r3, #32
 800346e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003472:	e00a      	b.n	800348a <UART_SetConfig+0x5a6>
 8003474:	2340      	movs	r3, #64	@ 0x40
 8003476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800347a:	e006      	b.n	800348a <UART_SetConfig+0x5a6>
 800347c:	2380      	movs	r3, #128	@ 0x80
 800347e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8003482:	e002      	b.n	800348a <UART_SetConfig+0x5a6>
 8003484:	2380      	movs	r3, #128	@ 0x80
 8003486:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a3f      	ldr	r2, [pc, #252]	@ (800358c <UART_SetConfig+0x6a8>)
 8003490:	4293      	cmp	r3, r2
 8003492:	f040 80f8 	bne.w	8003686 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003496:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800349a:	2b20      	cmp	r3, #32
 800349c:	dc46      	bgt.n	800352c <UART_SetConfig+0x648>
 800349e:	2b02      	cmp	r3, #2
 80034a0:	f2c0 8082 	blt.w	80035a8 <UART_SetConfig+0x6c4>
 80034a4:	3b02      	subs	r3, #2
 80034a6:	2b1e      	cmp	r3, #30
 80034a8:	d87e      	bhi.n	80035a8 <UART_SetConfig+0x6c4>
 80034aa:	a201      	add	r2, pc, #4	@ (adr r2, 80034b0 <UART_SetConfig+0x5cc>)
 80034ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b0:	08003533 	.word	0x08003533
 80034b4:	080035a9 	.word	0x080035a9
 80034b8:	0800353b 	.word	0x0800353b
 80034bc:	080035a9 	.word	0x080035a9
 80034c0:	080035a9 	.word	0x080035a9
 80034c4:	080035a9 	.word	0x080035a9
 80034c8:	0800354b 	.word	0x0800354b
 80034cc:	080035a9 	.word	0x080035a9
 80034d0:	080035a9 	.word	0x080035a9
 80034d4:	080035a9 	.word	0x080035a9
 80034d8:	080035a9 	.word	0x080035a9
 80034dc:	080035a9 	.word	0x080035a9
 80034e0:	080035a9 	.word	0x080035a9
 80034e4:	080035a9 	.word	0x080035a9
 80034e8:	0800355b 	.word	0x0800355b
 80034ec:	080035a9 	.word	0x080035a9
 80034f0:	080035a9 	.word	0x080035a9
 80034f4:	080035a9 	.word	0x080035a9
 80034f8:	080035a9 	.word	0x080035a9
 80034fc:	080035a9 	.word	0x080035a9
 8003500:	080035a9 	.word	0x080035a9
 8003504:	080035a9 	.word	0x080035a9
 8003508:	080035a9 	.word	0x080035a9
 800350c:	080035a9 	.word	0x080035a9
 8003510:	080035a9 	.word	0x080035a9
 8003514:	080035a9 	.word	0x080035a9
 8003518:	080035a9 	.word	0x080035a9
 800351c:	080035a9 	.word	0x080035a9
 8003520:	080035a9 	.word	0x080035a9
 8003524:	080035a9 	.word	0x080035a9
 8003528:	0800359b 	.word	0x0800359b
 800352c:	2b40      	cmp	r3, #64	@ 0x40
 800352e:	d037      	beq.n	80035a0 <UART_SetConfig+0x6bc>
 8003530:	e03a      	b.n	80035a8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8003532:	f7ff f9bf 	bl	80028b4 <HAL_RCCEx_GetD3PCLK1Freq>
 8003536:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003538:	e03c      	b.n	80035b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800353a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff f9ce 	bl	80028e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8003544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003548:	e034      	b.n	80035b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800354a:	f107 0318 	add.w	r3, r7, #24
 800354e:	4618      	mov	r0, r3
 8003550:	f7ff fb1a 	bl	8002b88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003558:	e02c      	b.n	80035b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800355a:	4b09      	ldr	r3, [pc, #36]	@ (8003580 <UART_SetConfig+0x69c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	f003 0320 	and.w	r3, r3, #32
 8003562:	2b00      	cmp	r3, #0
 8003564:	d016      	beq.n	8003594 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8003566:	4b06      	ldr	r3, [pc, #24]	@ (8003580 <UART_SetConfig+0x69c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	08db      	lsrs	r3, r3, #3
 800356c:	f003 0303 	and.w	r3, r3, #3
 8003570:	4a07      	ldr	r2, [pc, #28]	@ (8003590 <UART_SetConfig+0x6ac>)
 8003572:	fa22 f303 	lsr.w	r3, r2, r3
 8003576:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003578:	e01c      	b.n	80035b4 <UART_SetConfig+0x6d0>
 800357a:	bf00      	nop
 800357c:	40011400 	.word	0x40011400
 8003580:	58024400 	.word	0x58024400
 8003584:	40007800 	.word	0x40007800
 8003588:	40007c00 	.word	0x40007c00
 800358c:	58000c00 	.word	0x58000c00
 8003590:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8003594:	4b9d      	ldr	r3, [pc, #628]	@ (800380c <UART_SetConfig+0x928>)
 8003596:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003598:	e00c      	b.n	80035b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800359a:	4b9d      	ldr	r3, [pc, #628]	@ (8003810 <UART_SetConfig+0x92c>)
 800359c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800359e:	e009      	b.n	80035b4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80035a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80035a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80035a6:	e005      	b.n	80035b4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80035a8:	2300      	movs	r3, #0
 80035aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80035b2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80035b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	f000 81de 	beq.w	8003978 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80035bc:	697b      	ldr	r3, [r7, #20]
 80035be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c0:	4a94      	ldr	r2, [pc, #592]	@ (8003814 <UART_SetConfig+0x930>)
 80035c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80035c6:	461a      	mov	r2, r3
 80035c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80035ce:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	4613      	mov	r3, r2
 80035d6:	005b      	lsls	r3, r3, #1
 80035d8:	4413      	add	r3, r2
 80035da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035dc:	429a      	cmp	r2, r3
 80035de:	d305      	bcc.n	80035ec <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80035e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d903      	bls.n	80035f4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80035ec:	2301      	movs	r3, #1
 80035ee:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80035f2:	e1c1      	b.n	8003978 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80035f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035f6:	2200      	movs	r2, #0
 80035f8:	60bb      	str	r3, [r7, #8]
 80035fa:	60fa      	str	r2, [r7, #12]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003600:	4a84      	ldr	r2, [pc, #528]	@ (8003814 <UART_SetConfig+0x930>)
 8003602:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003606:	b29b      	uxth	r3, r3
 8003608:	2200      	movs	r2, #0
 800360a:	603b      	str	r3, [r7, #0]
 800360c:	607a      	str	r2, [r7, #4]
 800360e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003612:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003616:	f7fc fe5f 	bl	80002d8 <__aeabi_uldivmod>
 800361a:	4602      	mov	r2, r0
 800361c:	460b      	mov	r3, r1
 800361e:	4610      	mov	r0, r2
 8003620:	4619      	mov	r1, r3
 8003622:	f04f 0200 	mov.w	r2, #0
 8003626:	f04f 0300 	mov.w	r3, #0
 800362a:	020b      	lsls	r3, r1, #8
 800362c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003630:	0202      	lsls	r2, r0, #8
 8003632:	6979      	ldr	r1, [r7, #20]
 8003634:	6849      	ldr	r1, [r1, #4]
 8003636:	0849      	lsrs	r1, r1, #1
 8003638:	2000      	movs	r0, #0
 800363a:	460c      	mov	r4, r1
 800363c:	4605      	mov	r5, r0
 800363e:	eb12 0804 	adds.w	r8, r2, r4
 8003642:	eb43 0905 	adc.w	r9, r3, r5
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	469a      	mov	sl, r3
 800364e:	4693      	mov	fp, r2
 8003650:	4652      	mov	r2, sl
 8003652:	465b      	mov	r3, fp
 8003654:	4640      	mov	r0, r8
 8003656:	4649      	mov	r1, r9
 8003658:	f7fc fe3e 	bl	80002d8 <__aeabi_uldivmod>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	4613      	mov	r3, r2
 8003662:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003666:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800366a:	d308      	bcc.n	800367e <UART_SetConfig+0x79a>
 800366c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800366e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003672:	d204      	bcs.n	800367e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8003674:	697b      	ldr	r3, [r7, #20]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800367a:	60da      	str	r2, [r3, #12]
 800367c:	e17c      	b.n	8003978 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8003684:	e178      	b.n	8003978 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	69db      	ldr	r3, [r3, #28]
 800368a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800368e:	f040 80c5 	bne.w	800381c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8003692:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003696:	2b20      	cmp	r3, #32
 8003698:	dc48      	bgt.n	800372c <UART_SetConfig+0x848>
 800369a:	2b00      	cmp	r3, #0
 800369c:	db7b      	blt.n	8003796 <UART_SetConfig+0x8b2>
 800369e:	2b20      	cmp	r3, #32
 80036a0:	d879      	bhi.n	8003796 <UART_SetConfig+0x8b2>
 80036a2:	a201      	add	r2, pc, #4	@ (adr r2, 80036a8 <UART_SetConfig+0x7c4>)
 80036a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a8:	08003733 	.word	0x08003733
 80036ac:	0800373b 	.word	0x0800373b
 80036b0:	08003797 	.word	0x08003797
 80036b4:	08003797 	.word	0x08003797
 80036b8:	08003743 	.word	0x08003743
 80036bc:	08003797 	.word	0x08003797
 80036c0:	08003797 	.word	0x08003797
 80036c4:	08003797 	.word	0x08003797
 80036c8:	08003753 	.word	0x08003753
 80036cc:	08003797 	.word	0x08003797
 80036d0:	08003797 	.word	0x08003797
 80036d4:	08003797 	.word	0x08003797
 80036d8:	08003797 	.word	0x08003797
 80036dc:	08003797 	.word	0x08003797
 80036e0:	08003797 	.word	0x08003797
 80036e4:	08003797 	.word	0x08003797
 80036e8:	08003763 	.word	0x08003763
 80036ec:	08003797 	.word	0x08003797
 80036f0:	08003797 	.word	0x08003797
 80036f4:	08003797 	.word	0x08003797
 80036f8:	08003797 	.word	0x08003797
 80036fc:	08003797 	.word	0x08003797
 8003700:	08003797 	.word	0x08003797
 8003704:	08003797 	.word	0x08003797
 8003708:	08003797 	.word	0x08003797
 800370c:	08003797 	.word	0x08003797
 8003710:	08003797 	.word	0x08003797
 8003714:	08003797 	.word	0x08003797
 8003718:	08003797 	.word	0x08003797
 800371c:	08003797 	.word	0x08003797
 8003720:	08003797 	.word	0x08003797
 8003724:	08003797 	.word	0x08003797
 8003728:	08003789 	.word	0x08003789
 800372c:	2b40      	cmp	r3, #64	@ 0x40
 800372e:	d02e      	beq.n	800378e <UART_SetConfig+0x8aa>
 8003730:	e031      	b.n	8003796 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003732:	f7ff f893 	bl	800285c <HAL_RCC_GetPCLK1Freq>
 8003736:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003738:	e033      	b.n	80037a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800373a:	f7ff f8a5 	bl	8002888 <HAL_RCC_GetPCLK2Freq>
 800373e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8003740:	e02f      	b.n	80037a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8003742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003746:	4618      	mov	r0, r3
 8003748:	f7ff f8ca 	bl	80028e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800374c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800374e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003750:	e027      	b.n	80037a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8003752:	f107 0318 	add.w	r3, r7, #24
 8003756:	4618      	mov	r0, r3
 8003758:	f7ff fa16 	bl	8002b88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800375c:	69fb      	ldr	r3, [r7, #28]
 800375e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003760:	e01f      	b.n	80037a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003762:	4b2d      	ldr	r3, [pc, #180]	@ (8003818 <UART_SetConfig+0x934>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0320 	and.w	r3, r3, #32
 800376a:	2b00      	cmp	r3, #0
 800376c:	d009      	beq.n	8003782 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800376e:	4b2a      	ldr	r3, [pc, #168]	@ (8003818 <UART_SetConfig+0x934>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	08db      	lsrs	r3, r3, #3
 8003774:	f003 0303 	and.w	r3, r3, #3
 8003778:	4a24      	ldr	r2, [pc, #144]	@ (800380c <UART_SetConfig+0x928>)
 800377a:	fa22 f303 	lsr.w	r3, r2, r3
 800377e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8003780:	e00f      	b.n	80037a2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8003782:	4b22      	ldr	r3, [pc, #136]	@ (800380c <UART_SetConfig+0x928>)
 8003784:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003786:	e00c      	b.n	80037a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003788:	4b21      	ldr	r3, [pc, #132]	@ (8003810 <UART_SetConfig+0x92c>)
 800378a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800378c:	e009      	b.n	80037a2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800378e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003792:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003794:	e005      	b.n	80037a2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8003796:	2300      	movs	r3, #0
 8003798:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80037a0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80037a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	f000 80e7 	beq.w	8003978 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ae:	4a19      	ldr	r2, [pc, #100]	@ (8003814 <UART_SetConfig+0x930>)
 80037b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80037b4:	461a      	mov	r2, r3
 80037b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80037bc:	005a      	lsls	r2, r3, #1
 80037be:	697b      	ldr	r3, [r7, #20]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	085b      	lsrs	r3, r3, #1
 80037c4:	441a      	add	r2, r3
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80037ce:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80037d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d2:	2b0f      	cmp	r3, #15
 80037d4:	d916      	bls.n	8003804 <UART_SetConfig+0x920>
 80037d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037dc:	d212      	bcs.n	8003804 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80037de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	f023 030f 	bic.w	r3, r3, #15
 80037e6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80037e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ea:	085b      	lsrs	r3, r3, #1
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	f003 0307 	and.w	r3, r3, #7
 80037f2:	b29a      	uxth	r2, r3
 80037f4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80037f6:	4313      	orrs	r3, r2
 80037f8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 80037fa:	697b      	ldr	r3, [r7, #20]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8003800:	60da      	str	r2, [r3, #12]
 8003802:	e0b9      	b.n	8003978 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8003804:	2301      	movs	r3, #1
 8003806:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800380a:	e0b5      	b.n	8003978 <UART_SetConfig+0xa94>
 800380c:	03d09000 	.word	0x03d09000
 8003810:	003d0900 	.word	0x003d0900
 8003814:	08003e80 	.word	0x08003e80
 8003818:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800381c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8003820:	2b20      	cmp	r3, #32
 8003822:	dc49      	bgt.n	80038b8 <UART_SetConfig+0x9d4>
 8003824:	2b00      	cmp	r3, #0
 8003826:	db7c      	blt.n	8003922 <UART_SetConfig+0xa3e>
 8003828:	2b20      	cmp	r3, #32
 800382a:	d87a      	bhi.n	8003922 <UART_SetConfig+0xa3e>
 800382c:	a201      	add	r2, pc, #4	@ (adr r2, 8003834 <UART_SetConfig+0x950>)
 800382e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003832:	bf00      	nop
 8003834:	080038bf 	.word	0x080038bf
 8003838:	080038c7 	.word	0x080038c7
 800383c:	08003923 	.word	0x08003923
 8003840:	08003923 	.word	0x08003923
 8003844:	080038cf 	.word	0x080038cf
 8003848:	08003923 	.word	0x08003923
 800384c:	08003923 	.word	0x08003923
 8003850:	08003923 	.word	0x08003923
 8003854:	080038df 	.word	0x080038df
 8003858:	08003923 	.word	0x08003923
 800385c:	08003923 	.word	0x08003923
 8003860:	08003923 	.word	0x08003923
 8003864:	08003923 	.word	0x08003923
 8003868:	08003923 	.word	0x08003923
 800386c:	08003923 	.word	0x08003923
 8003870:	08003923 	.word	0x08003923
 8003874:	080038ef 	.word	0x080038ef
 8003878:	08003923 	.word	0x08003923
 800387c:	08003923 	.word	0x08003923
 8003880:	08003923 	.word	0x08003923
 8003884:	08003923 	.word	0x08003923
 8003888:	08003923 	.word	0x08003923
 800388c:	08003923 	.word	0x08003923
 8003890:	08003923 	.word	0x08003923
 8003894:	08003923 	.word	0x08003923
 8003898:	08003923 	.word	0x08003923
 800389c:	08003923 	.word	0x08003923
 80038a0:	08003923 	.word	0x08003923
 80038a4:	08003923 	.word	0x08003923
 80038a8:	08003923 	.word	0x08003923
 80038ac:	08003923 	.word	0x08003923
 80038b0:	08003923 	.word	0x08003923
 80038b4:	08003915 	.word	0x08003915
 80038b8:	2b40      	cmp	r3, #64	@ 0x40
 80038ba:	d02e      	beq.n	800391a <UART_SetConfig+0xa36>
 80038bc:	e031      	b.n	8003922 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038be:	f7fe ffcd 	bl	800285c <HAL_RCC_GetPCLK1Freq>
 80038c2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80038c4:	e033      	b.n	800392e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038c6:	f7fe ffdf 	bl	8002888 <HAL_RCC_GetPCLK2Freq>
 80038ca:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80038cc:	e02f      	b.n	800392e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80038ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7ff f804 	bl	80028e0 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80038d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038da:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80038dc:	e027      	b.n	800392e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80038de:	f107 0318 	add.w	r3, r7, #24
 80038e2:	4618      	mov	r0, r3
 80038e4:	f7ff f950 	bl	8002b88 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80038e8:	69fb      	ldr	r3, [r7, #28]
 80038ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80038ec:	e01f      	b.n	800392e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80038ee:	4b2d      	ldr	r3, [pc, #180]	@ (80039a4 <UART_SetConfig+0xac0>)
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0320 	and.w	r3, r3, #32
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d009      	beq.n	800390e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80038fa:	4b2a      	ldr	r3, [pc, #168]	@ (80039a4 <UART_SetConfig+0xac0>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	08db      	lsrs	r3, r3, #3
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	4a28      	ldr	r2, [pc, #160]	@ (80039a8 <UART_SetConfig+0xac4>)
 8003906:	fa22 f303 	lsr.w	r3, r2, r3
 800390a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800390c:	e00f      	b.n	800392e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800390e:	4b26      	ldr	r3, [pc, #152]	@ (80039a8 <UART_SetConfig+0xac4>)
 8003910:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003912:	e00c      	b.n	800392e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8003914:	4b25      	ldr	r3, [pc, #148]	@ (80039ac <UART_SetConfig+0xac8>)
 8003916:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003918:	e009      	b.n	800392e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800391a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800391e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8003920:	e005      	b.n	800392e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8003922:	2300      	movs	r3, #0
 8003924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800392c:	bf00      	nop
    }

    if (pclk != 0U)
 800392e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d021      	beq.n	8003978 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003938:	4a1d      	ldr	r2, [pc, #116]	@ (80039b0 <UART_SetConfig+0xacc>)
 800393a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800393e:	461a      	mov	r2, r3
 8003940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003942:	fbb3 f2f2 	udiv	r2, r3, r2
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	685b      	ldr	r3, [r3, #4]
 800394a:	085b      	lsrs	r3, r3, #1
 800394c:	441a      	add	r2, r3
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	fbb2 f3f3 	udiv	r3, r2, r3
 8003956:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003958:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800395a:	2b0f      	cmp	r3, #15
 800395c:	d909      	bls.n	8003972 <UART_SetConfig+0xa8e>
 800395e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003960:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003964:	d205      	bcs.n	8003972 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003966:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003968:	b29a      	uxth	r2, r3
 800396a:	697b      	ldr	r3, [r7, #20]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	60da      	str	r2, [r3, #12]
 8003970:	e002      	b.n	8003978 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	2201      	movs	r2, #1
 800397c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	2201      	movs	r2, #1
 8003984:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2200      	movs	r2, #0
 800398c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2200      	movs	r2, #0
 8003992:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003994:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8003998:	4618      	mov	r0, r3
 800399a:	3748      	adds	r7, #72	@ 0x48
 800399c:	46bd      	mov	sp, r7
 800399e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039a2:	bf00      	nop
 80039a4:	58024400 	.word	0x58024400
 80039a8:	03d09000 	.word	0x03d09000
 80039ac:	003d0900 	.word	0x003d0900
 80039b0:	08003e80 	.word	0x08003e80

080039b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b083      	sub	sp, #12
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039c0:	f003 0308 	and.w	r3, r3, #8
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d00a      	beq.n	80039de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039e2:	f003 0301 	and.w	r3, r3, #1
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d00a      	beq.n	8003a00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	685b      	ldr	r3, [r3, #4]
 80039f0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	430a      	orrs	r2, r1
 80039fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a04:	f003 0302 	and.w	r3, r3, #2
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d00a      	beq.n	8003a22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d00a      	beq.n	8003a44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	430a      	orrs	r2, r1
 8003a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a48:	f003 0310 	and.w	r3, r3, #16
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d00a      	beq.n	8003a66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689b      	ldr	r3, [r3, #8]
 8003a56:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	430a      	orrs	r2, r1
 8003a64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a6a:	f003 0320 	and.w	r3, r3, #32
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d01a      	beq.n	8003aca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003aae:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003ab2:	d10a      	bne.n	8003aca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	430a      	orrs	r2, r1
 8003aea:	605a      	str	r2, [r3, #4]
  }
}
 8003aec:	bf00      	nop
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b098      	sub	sp, #96	@ 0x60
 8003afc:	af02      	add	r7, sp, #8
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b08:	f7fd fab4 	bl	8001074 <HAL_GetTick>
 8003b0c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b08      	cmp	r3, #8
 8003b1a:	d12f      	bne.n	8003b7c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b1c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b20:	9300      	str	r3, [sp, #0]
 8003b22:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b24:	2200      	movs	r2, #0
 8003b26:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f88e 	bl	8003c4c <UART_WaitOnFlagUntilTimeout>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d022      	beq.n	8003b7c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b3e:	e853 3f00 	ldrex	r3, [r3]
 8003b42:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b46:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	461a      	mov	r2, r3
 8003b52:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b54:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b56:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003b5a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003b5c:	e841 2300 	strex	r3, r2, [r1]
 8003b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003b62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e6      	bne.n	8003b36 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2220      	movs	r2, #32
 8003b6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2200      	movs	r2, #0
 8003b74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b78:	2303      	movs	r3, #3
 8003b7a:	e063      	b.n	8003c44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 0304 	and.w	r3, r3, #4
 8003b86:	2b04      	cmp	r3, #4
 8003b88:	d149      	bne.n	8003c1e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b8a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003b8e:	9300      	str	r3, [sp, #0]
 8003b90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003b92:	2200      	movs	r2, #0
 8003b94:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 f857 	bl	8003c4c <UART_WaitOnFlagUntilTimeout>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d03c      	beq.n	8003c1e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003bac:	e853 3f00 	ldrex	r3, [r3]
 8003bb0:	623b      	str	r3, [r7, #32]
   return(result);
 8003bb2:	6a3b      	ldr	r3, [r7, #32]
 8003bb4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003bb8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003bc2:	633b      	str	r3, [r7, #48]	@ 0x30
 8003bc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bc6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003bc8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bca:	e841 2300 	strex	r3, r2, [r1]
 8003bce:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1e6      	bne.n	8003ba4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	3308      	adds	r3, #8
 8003bdc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	e853 3f00 	ldrex	r3, [r3]
 8003be4:	60fb      	str	r3, [r7, #12]
   return(result);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	f023 0301 	bic.w	r3, r3, #1
 8003bec:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	3308      	adds	r3, #8
 8003bf4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003bf6:	61fa      	str	r2, [r7, #28]
 8003bf8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfa:	69b9      	ldr	r1, [r7, #24]
 8003bfc:	69fa      	ldr	r2, [r7, #28]
 8003bfe:	e841 2300 	strex	r3, r2, [r1]
 8003c02:	617b      	str	r3, [r7, #20]
   return(result);
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1e5      	bne.n	8003bd6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	2220      	movs	r2, #32
 8003c0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c1a:	2303      	movs	r3, #3
 8003c1c:	e012      	b.n	8003c44 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2220      	movs	r2, #32
 8003c22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2220      	movs	r2, #32
 8003c2a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2200      	movs	r2, #0
 8003c38:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003c42:	2300      	movs	r3, #0
}
 8003c44:	4618      	mov	r0, r3
 8003c46:	3758      	adds	r7, #88	@ 0x58
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	bd80      	pop	{r7, pc}

08003c4c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b084      	sub	sp, #16
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	60f8      	str	r0, [r7, #12]
 8003c54:	60b9      	str	r1, [r7, #8]
 8003c56:	603b      	str	r3, [r7, #0]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c5c:	e04f      	b.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c64:	d04b      	beq.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c66:	f7fd fa05 	bl	8001074 <HAL_GetTick>
 8003c6a:	4602      	mov	r2, r0
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	1ad3      	subs	r3, r2, r3
 8003c70:	69ba      	ldr	r2, [r7, #24]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d302      	bcc.n	8003c7c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e04e      	b.n	8003d1e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f003 0304 	and.w	r3, r3, #4
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d037      	beq.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	2b80      	cmp	r3, #128	@ 0x80
 8003c92:	d034      	beq.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xb2>
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b40      	cmp	r3, #64	@ 0x40
 8003c98:	d031      	beq.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69db      	ldr	r3, [r3, #28]
 8003ca0:	f003 0308 	and.w	r3, r3, #8
 8003ca4:	2b08      	cmp	r3, #8
 8003ca6:	d110      	bne.n	8003cca <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2208      	movs	r2, #8
 8003cae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f000 f839 	bl	8003d28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2208      	movs	r2, #8
 8003cba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2200      	movs	r2, #0
 8003cc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e029      	b.n	8003d1e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69db      	ldr	r3, [r3, #28]
 8003cd0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003cd4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003cd8:	d111      	bne.n	8003cfe <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003ce2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 f81f 	bl	8003d28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2220      	movs	r2, #32
 8003cee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003cfa:	2303      	movs	r3, #3
 8003cfc:	e00f      	b.n	8003d1e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	69da      	ldr	r2, [r3, #28]
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4013      	ands	r3, r2
 8003d08:	68ba      	ldr	r2, [r7, #8]
 8003d0a:	429a      	cmp	r2, r3
 8003d0c:	bf0c      	ite	eq
 8003d0e:	2301      	moveq	r3, #1
 8003d10:	2300      	movne	r3, #0
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	461a      	mov	r2, r3
 8003d16:	79fb      	ldrb	r3, [r7, #7]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d0a0      	beq.n	8003c5e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3710      	adds	r7, #16
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
	...

08003d28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b095      	sub	sp, #84	@ 0x54
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d38:	e853 3f00 	ldrex	r3, [r3]
 8003d3c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d44:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003d4e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003d50:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d52:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d54:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d56:	e841 2300 	strex	r3, r2, [r1]
 8003d5a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1e6      	bne.n	8003d30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	3308      	adds	r3, #8
 8003d68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6a:	6a3b      	ldr	r3, [r7, #32]
 8003d6c:	e853 3f00 	ldrex	r3, [r3]
 8003d70:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d72:	69fa      	ldr	r2, [r7, #28]
 8003d74:	4b1e      	ldr	r3, [pc, #120]	@ (8003df0 <UART_EndRxTransfer+0xc8>)
 8003d76:	4013      	ands	r3, r2
 8003d78:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	3308      	adds	r3, #8
 8003d80:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d82:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d84:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d86:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d88:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d8a:	e841 2300 	strex	r3, r2, [r1]
 8003d8e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d1e5      	bne.n	8003d62 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d118      	bne.n	8003dd0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	e853 3f00 	ldrex	r3, [r3]
 8003daa:	60bb      	str	r3, [r7, #8]
   return(result);
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f023 0310 	bic.w	r3, r3, #16
 8003db2:	647b      	str	r3, [r7, #68]	@ 0x44
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	461a      	mov	r2, r3
 8003dba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003dbc:	61bb      	str	r3, [r7, #24]
 8003dbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc0:	6979      	ldr	r1, [r7, #20]
 8003dc2:	69ba      	ldr	r2, [r7, #24]
 8003dc4:	e841 2300 	strex	r3, r2, [r1]
 8003dc8:	613b      	str	r3, [r7, #16]
   return(result);
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e6      	bne.n	8003d9e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2220      	movs	r2, #32
 8003dd4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003de4:	bf00      	nop
 8003de6:	3754      	adds	r7, #84	@ 0x54
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	effffffe 	.word	0xeffffffe

08003df4 <memset>:
 8003df4:	4402      	add	r2, r0
 8003df6:	4603      	mov	r3, r0
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d100      	bne.n	8003dfe <memset+0xa>
 8003dfc:	4770      	bx	lr
 8003dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8003e02:	e7f9      	b.n	8003df8 <memset+0x4>

08003e04 <__libc_init_array>:
 8003e04:	b570      	push	{r4, r5, r6, lr}
 8003e06:	4d0d      	ldr	r5, [pc, #52]	@ (8003e3c <__libc_init_array+0x38>)
 8003e08:	4c0d      	ldr	r4, [pc, #52]	@ (8003e40 <__libc_init_array+0x3c>)
 8003e0a:	1b64      	subs	r4, r4, r5
 8003e0c:	10a4      	asrs	r4, r4, #2
 8003e0e:	2600      	movs	r6, #0
 8003e10:	42a6      	cmp	r6, r4
 8003e12:	d109      	bne.n	8003e28 <__libc_init_array+0x24>
 8003e14:	4d0b      	ldr	r5, [pc, #44]	@ (8003e44 <__libc_init_array+0x40>)
 8003e16:	4c0c      	ldr	r4, [pc, #48]	@ (8003e48 <__libc_init_array+0x44>)
 8003e18:	f000 f818 	bl	8003e4c <_init>
 8003e1c:	1b64      	subs	r4, r4, r5
 8003e1e:	10a4      	asrs	r4, r4, #2
 8003e20:	2600      	movs	r6, #0
 8003e22:	42a6      	cmp	r6, r4
 8003e24:	d105      	bne.n	8003e32 <__libc_init_array+0x2e>
 8003e26:	bd70      	pop	{r4, r5, r6, pc}
 8003e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e2c:	4798      	blx	r3
 8003e2e:	3601      	adds	r6, #1
 8003e30:	e7ee      	b.n	8003e10 <__libc_init_array+0xc>
 8003e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e36:	4798      	blx	r3
 8003e38:	3601      	adds	r6, #1
 8003e3a:	e7f2      	b.n	8003e22 <__libc_init_array+0x1e>
 8003e3c:	08003ea0 	.word	0x08003ea0
 8003e40:	08003ea0 	.word	0x08003ea0
 8003e44:	08003ea0 	.word	0x08003ea0
 8003e48:	08003ea4 	.word	0x08003ea4

08003e4c <_init>:
 8003e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4e:	bf00      	nop
 8003e50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e52:	bc08      	pop	{r3}
 8003e54:	469e      	mov	lr, r3
 8003e56:	4770      	bx	lr

08003e58 <_fini>:
 8003e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e5a:	bf00      	nop
 8003e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5e:	bc08      	pop	{r3}
 8003e60:	469e      	mov	lr, r3
 8003e62:	4770      	bx	lr
