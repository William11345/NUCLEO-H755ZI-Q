
essai1_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050c4  08000298  08000298  00001298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800535c  0800535c  0000635c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005394  08005394  00007010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005394  08005394  00006394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800539c  0800539c  00007010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800539c  0800539c  0000639c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080053a0  080053a0  000063a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  24000000  080053a4  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  24000010  080053b4  00007010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240000c4  080053b4  000070c4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00007010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fb90  00000000  00000000  0000703e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e7f  00000000  00000000  00016bce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  00018a50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000878  00000000  00000000  00019558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003911b  00000000  00000000  00019dd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec0b  00000000  00000000  00052eeb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0017aad0  00000000  00000000  00061af6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001dc5c6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d24  00000000  00000000  001dc60c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001df330  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	@ (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	@ (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	@ (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08005344 	.word	0x08005344

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	@ (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	@ (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	@ (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08005344 	.word	0x08005344

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b988 	b.w	8000600 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9d08      	ldr	r5, [sp, #32]
 800030e:	468e      	mov	lr, r1
 8000310:	4604      	mov	r4, r0
 8000312:	4688      	mov	r8, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4617      	mov	r7, r2
 800031c:	d962      	bls.n	80003e4 <__udivmoddi4+0xdc>
 800031e:	fab2 f682 	clz	r6, r2
 8000322:	b14e      	cbz	r6, 8000338 <__udivmoddi4+0x30>
 8000324:	f1c6 0320 	rsb	r3, r6, #32
 8000328:	fa01 f806 	lsl.w	r8, r1, r6
 800032c:	fa20 f303 	lsr.w	r3, r0, r3
 8000330:	40b7      	lsls	r7, r6
 8000332:	ea43 0808 	orr.w	r8, r3, r8
 8000336:	40b4      	lsls	r4, r6
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	fa1f fc87 	uxth.w	ip, r7
 8000340:	fbb8 f1fe 	udiv	r1, r8, lr
 8000344:	0c23      	lsrs	r3, r4, #16
 8000346:	fb0e 8811 	mls	r8, lr, r1, r8
 800034a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800034e:	fb01 f20c 	mul.w	r2, r1, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d909      	bls.n	800036a <__udivmoddi4+0x62>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f101 30ff 	add.w	r0, r1, #4294967295
 800035c:	f080 80ea 	bcs.w	8000534 <__udivmoddi4+0x22c>
 8000360:	429a      	cmp	r2, r3
 8000362:	f240 80e7 	bls.w	8000534 <__udivmoddi4+0x22c>
 8000366:	3902      	subs	r1, #2
 8000368:	443b      	add	r3, r7
 800036a:	1a9a      	subs	r2, r3, r2
 800036c:	b2a3      	uxth	r3, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800037a:	fb00 fc0c 	mul.w	ip, r0, ip
 800037e:	459c      	cmp	ip, r3
 8000380:	d909      	bls.n	8000396 <__udivmoddi4+0x8e>
 8000382:	18fb      	adds	r3, r7, r3
 8000384:	f100 32ff 	add.w	r2, r0, #4294967295
 8000388:	f080 80d6 	bcs.w	8000538 <__udivmoddi4+0x230>
 800038c:	459c      	cmp	ip, r3
 800038e:	f240 80d3 	bls.w	8000538 <__udivmoddi4+0x230>
 8000392:	443b      	add	r3, r7
 8000394:	3802      	subs	r0, #2
 8000396:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039a:	eba3 030c 	sub.w	r3, r3, ip
 800039e:	2100      	movs	r1, #0
 80003a0:	b11d      	cbz	r5, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40f3      	lsrs	r3, r6
 80003a4:	2200      	movs	r2, #0
 80003a6:	e9c5 3200 	strd	r3, r2, [r5]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d905      	bls.n	80003be <__udivmoddi4+0xb6>
 80003b2:	b10d      	cbz	r5, 80003b8 <__udivmoddi4+0xb0>
 80003b4:	e9c5 0100 	strd	r0, r1, [r5]
 80003b8:	2100      	movs	r1, #0
 80003ba:	4608      	mov	r0, r1
 80003bc:	e7f5      	b.n	80003aa <__udivmoddi4+0xa2>
 80003be:	fab3 f183 	clz	r1, r3
 80003c2:	2900      	cmp	r1, #0
 80003c4:	d146      	bne.n	8000454 <__udivmoddi4+0x14c>
 80003c6:	4573      	cmp	r3, lr
 80003c8:	d302      	bcc.n	80003d0 <__udivmoddi4+0xc8>
 80003ca:	4282      	cmp	r2, r0
 80003cc:	f200 8105 	bhi.w	80005da <__udivmoddi4+0x2d2>
 80003d0:	1a84      	subs	r4, r0, r2
 80003d2:	eb6e 0203 	sbc.w	r2, lr, r3
 80003d6:	2001      	movs	r0, #1
 80003d8:	4690      	mov	r8, r2
 80003da:	2d00      	cmp	r5, #0
 80003dc:	d0e5      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003de:	e9c5 4800 	strd	r4, r8, [r5]
 80003e2:	e7e2      	b.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	2a00      	cmp	r2, #0
 80003e6:	f000 8090 	beq.w	800050a <__udivmoddi4+0x202>
 80003ea:	fab2 f682 	clz	r6, r2
 80003ee:	2e00      	cmp	r6, #0
 80003f0:	f040 80a4 	bne.w	800053c <__udivmoddi4+0x234>
 80003f4:	1a8a      	subs	r2, r1, r2
 80003f6:	0c03      	lsrs	r3, r0, #16
 80003f8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003fc:	b280      	uxth	r0, r0
 80003fe:	b2bc      	uxth	r4, r7
 8000400:	2101      	movs	r1, #1
 8000402:	fbb2 fcfe 	udiv	ip, r2, lr
 8000406:	fb0e 221c 	mls	r2, lr, ip, r2
 800040a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800040e:	fb04 f20c 	mul.w	r2, r4, ip
 8000412:	429a      	cmp	r2, r3
 8000414:	d907      	bls.n	8000426 <__udivmoddi4+0x11e>
 8000416:	18fb      	adds	r3, r7, r3
 8000418:	f10c 38ff 	add.w	r8, ip, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x11c>
 800041e:	429a      	cmp	r2, r3
 8000420:	f200 80e0 	bhi.w	80005e4 <__udivmoddi4+0x2dc>
 8000424:	46c4      	mov	ip, r8
 8000426:	1a9b      	subs	r3, r3, r2
 8000428:	fbb3 f2fe 	udiv	r2, r3, lr
 800042c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000430:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000434:	fb02 f404 	mul.w	r4, r2, r4
 8000438:	429c      	cmp	r4, r3
 800043a:	d907      	bls.n	800044c <__udivmoddi4+0x144>
 800043c:	18fb      	adds	r3, r7, r3
 800043e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x142>
 8000444:	429c      	cmp	r4, r3
 8000446:	f200 80ca 	bhi.w	80005de <__udivmoddi4+0x2d6>
 800044a:	4602      	mov	r2, r0
 800044c:	1b1b      	subs	r3, r3, r4
 800044e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000452:	e7a5      	b.n	80003a0 <__udivmoddi4+0x98>
 8000454:	f1c1 0620 	rsb	r6, r1, #32
 8000458:	408b      	lsls	r3, r1
 800045a:	fa22 f706 	lsr.w	r7, r2, r6
 800045e:	431f      	orrs	r7, r3
 8000460:	fa0e f401 	lsl.w	r4, lr, r1
 8000464:	fa20 f306 	lsr.w	r3, r0, r6
 8000468:	fa2e fe06 	lsr.w	lr, lr, r6
 800046c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000470:	4323      	orrs	r3, r4
 8000472:	fa00 f801 	lsl.w	r8, r0, r1
 8000476:	fa1f fc87 	uxth.w	ip, r7
 800047a:	fbbe f0f9 	udiv	r0, lr, r9
 800047e:	0c1c      	lsrs	r4, r3, #16
 8000480:	fb09 ee10 	mls	lr, r9, r0, lr
 8000484:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000488:	fb00 fe0c 	mul.w	lr, r0, ip
 800048c:	45a6      	cmp	lr, r4
 800048e:	fa02 f201 	lsl.w	r2, r2, r1
 8000492:	d909      	bls.n	80004a8 <__udivmoddi4+0x1a0>
 8000494:	193c      	adds	r4, r7, r4
 8000496:	f100 3aff 	add.w	sl, r0, #4294967295
 800049a:	f080 809c 	bcs.w	80005d6 <__udivmoddi4+0x2ce>
 800049e:	45a6      	cmp	lr, r4
 80004a0:	f240 8099 	bls.w	80005d6 <__udivmoddi4+0x2ce>
 80004a4:	3802      	subs	r0, #2
 80004a6:	443c      	add	r4, r7
 80004a8:	eba4 040e 	sub.w	r4, r4, lr
 80004ac:	fa1f fe83 	uxth.w	lr, r3
 80004b0:	fbb4 f3f9 	udiv	r3, r4, r9
 80004b4:	fb09 4413 	mls	r4, r9, r3, r4
 80004b8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004bc:	fb03 fc0c 	mul.w	ip, r3, ip
 80004c0:	45a4      	cmp	ip, r4
 80004c2:	d908      	bls.n	80004d6 <__udivmoddi4+0x1ce>
 80004c4:	193c      	adds	r4, r7, r4
 80004c6:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ca:	f080 8082 	bcs.w	80005d2 <__udivmoddi4+0x2ca>
 80004ce:	45a4      	cmp	ip, r4
 80004d0:	d97f      	bls.n	80005d2 <__udivmoddi4+0x2ca>
 80004d2:	3b02      	subs	r3, #2
 80004d4:	443c      	add	r4, r7
 80004d6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004da:	eba4 040c 	sub.w	r4, r4, ip
 80004de:	fba0 ec02 	umull	lr, ip, r0, r2
 80004e2:	4564      	cmp	r4, ip
 80004e4:	4673      	mov	r3, lr
 80004e6:	46e1      	mov	r9, ip
 80004e8:	d362      	bcc.n	80005b0 <__udivmoddi4+0x2a8>
 80004ea:	d05f      	beq.n	80005ac <__udivmoddi4+0x2a4>
 80004ec:	b15d      	cbz	r5, 8000506 <__udivmoddi4+0x1fe>
 80004ee:	ebb8 0203 	subs.w	r2, r8, r3
 80004f2:	eb64 0409 	sbc.w	r4, r4, r9
 80004f6:	fa04 f606 	lsl.w	r6, r4, r6
 80004fa:	fa22 f301 	lsr.w	r3, r2, r1
 80004fe:	431e      	orrs	r6, r3
 8000500:	40cc      	lsrs	r4, r1
 8000502:	e9c5 6400 	strd	r6, r4, [r5]
 8000506:	2100      	movs	r1, #0
 8000508:	e74f      	b.n	80003aa <__udivmoddi4+0xa2>
 800050a:	fbb1 fcf2 	udiv	ip, r1, r2
 800050e:	0c01      	lsrs	r1, r0, #16
 8000510:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000514:	b280      	uxth	r0, r0
 8000516:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800051a:	463b      	mov	r3, r7
 800051c:	4638      	mov	r0, r7
 800051e:	463c      	mov	r4, r7
 8000520:	46b8      	mov	r8, r7
 8000522:	46be      	mov	lr, r7
 8000524:	2620      	movs	r6, #32
 8000526:	fbb1 f1f7 	udiv	r1, r1, r7
 800052a:	eba2 0208 	sub.w	r2, r2, r8
 800052e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000532:	e766      	b.n	8000402 <__udivmoddi4+0xfa>
 8000534:	4601      	mov	r1, r0
 8000536:	e718      	b.n	800036a <__udivmoddi4+0x62>
 8000538:	4610      	mov	r0, r2
 800053a:	e72c      	b.n	8000396 <__udivmoddi4+0x8e>
 800053c:	f1c6 0220 	rsb	r2, r6, #32
 8000540:	fa2e f302 	lsr.w	r3, lr, r2
 8000544:	40b7      	lsls	r7, r6
 8000546:	40b1      	lsls	r1, r6
 8000548:	fa20 f202 	lsr.w	r2, r0, r2
 800054c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000550:	430a      	orrs	r2, r1
 8000552:	fbb3 f8fe 	udiv	r8, r3, lr
 8000556:	b2bc      	uxth	r4, r7
 8000558:	fb0e 3318 	mls	r3, lr, r8, r3
 800055c:	0c11      	lsrs	r1, r2, #16
 800055e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000562:	fb08 f904 	mul.w	r9, r8, r4
 8000566:	40b0      	lsls	r0, r6
 8000568:	4589      	cmp	r9, r1
 800056a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800056e:	b280      	uxth	r0, r0
 8000570:	d93e      	bls.n	80005f0 <__udivmoddi4+0x2e8>
 8000572:	1879      	adds	r1, r7, r1
 8000574:	f108 3cff 	add.w	ip, r8, #4294967295
 8000578:	d201      	bcs.n	800057e <__udivmoddi4+0x276>
 800057a:	4589      	cmp	r9, r1
 800057c:	d81f      	bhi.n	80005be <__udivmoddi4+0x2b6>
 800057e:	eba1 0109 	sub.w	r1, r1, r9
 8000582:	fbb1 f9fe 	udiv	r9, r1, lr
 8000586:	fb09 f804 	mul.w	r8, r9, r4
 800058a:	fb0e 1119 	mls	r1, lr, r9, r1
 800058e:	b292      	uxth	r2, r2
 8000590:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000594:	4542      	cmp	r2, r8
 8000596:	d229      	bcs.n	80005ec <__udivmoddi4+0x2e4>
 8000598:	18ba      	adds	r2, r7, r2
 800059a:	f109 31ff 	add.w	r1, r9, #4294967295
 800059e:	d2c4      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a0:	4542      	cmp	r2, r8
 80005a2:	d2c2      	bcs.n	800052a <__udivmoddi4+0x222>
 80005a4:	f1a9 0102 	sub.w	r1, r9, #2
 80005a8:	443a      	add	r2, r7
 80005aa:	e7be      	b.n	800052a <__udivmoddi4+0x222>
 80005ac:	45f0      	cmp	r8, lr
 80005ae:	d29d      	bcs.n	80004ec <__udivmoddi4+0x1e4>
 80005b0:	ebbe 0302 	subs.w	r3, lr, r2
 80005b4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005b8:	3801      	subs	r0, #1
 80005ba:	46e1      	mov	r9, ip
 80005bc:	e796      	b.n	80004ec <__udivmoddi4+0x1e4>
 80005be:	eba7 0909 	sub.w	r9, r7, r9
 80005c2:	4449      	add	r1, r9
 80005c4:	f1a8 0c02 	sub.w	ip, r8, #2
 80005c8:	fbb1 f9fe 	udiv	r9, r1, lr
 80005cc:	fb09 f804 	mul.w	r8, r9, r4
 80005d0:	e7db      	b.n	800058a <__udivmoddi4+0x282>
 80005d2:	4673      	mov	r3, lr
 80005d4:	e77f      	b.n	80004d6 <__udivmoddi4+0x1ce>
 80005d6:	4650      	mov	r0, sl
 80005d8:	e766      	b.n	80004a8 <__udivmoddi4+0x1a0>
 80005da:	4608      	mov	r0, r1
 80005dc:	e6fd      	b.n	80003da <__udivmoddi4+0xd2>
 80005de:	443b      	add	r3, r7
 80005e0:	3a02      	subs	r2, #2
 80005e2:	e733      	b.n	800044c <__udivmoddi4+0x144>
 80005e4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e8:	443b      	add	r3, r7
 80005ea:	e71c      	b.n	8000426 <__udivmoddi4+0x11e>
 80005ec:	4649      	mov	r1, r9
 80005ee:	e79c      	b.n	800052a <__udivmoddi4+0x222>
 80005f0:	eba1 0109 	sub.w	r1, r1, r9
 80005f4:	46c4      	mov	ip, r8
 80005f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005fa:	fb09 f804 	mul.w	r8, r9, r4
 80005fe:	e7c4      	b.n	800058a <__udivmoddi4+0x282>

08000600 <__aeabi_idiv0>:
 8000600:	4770      	bx	lr
 8000602:	bf00      	nop

08000604 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000604:	b480      	push	{r7}
 8000606:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000608:	4b49      	ldr	r3, [pc, #292]	@ (8000730 <SystemInit+0x12c>)
 800060a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800060e:	4a48      	ldr	r2, [pc, #288]	@ (8000730 <SystemInit+0x12c>)
 8000610:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000614:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000618:	4b45      	ldr	r3, [pc, #276]	@ (8000730 <SystemInit+0x12c>)
 800061a:	691b      	ldr	r3, [r3, #16]
 800061c:	4a44      	ldr	r2, [pc, #272]	@ (8000730 <SystemInit+0x12c>)
 800061e:	f043 0310 	orr.w	r3, r3, #16
 8000622:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000624:	4b43      	ldr	r3, [pc, #268]	@ (8000734 <SystemInit+0x130>)
 8000626:	681b      	ldr	r3, [r3, #0]
 8000628:	f003 030f 	and.w	r3, r3, #15
 800062c:	2b06      	cmp	r3, #6
 800062e:	d807      	bhi.n	8000640 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000630:	4b40      	ldr	r3, [pc, #256]	@ (8000734 <SystemInit+0x130>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f023 030f 	bic.w	r3, r3, #15
 8000638:	4a3e      	ldr	r2, [pc, #248]	@ (8000734 <SystemInit+0x130>)
 800063a:	f043 0307 	orr.w	r3, r3, #7
 800063e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000640:	4b3d      	ldr	r3, [pc, #244]	@ (8000738 <SystemInit+0x134>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a3c      	ldr	r2, [pc, #240]	@ (8000738 <SystemInit+0x134>)
 8000646:	f043 0301 	orr.w	r3, r3, #1
 800064a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800064c:	4b3a      	ldr	r3, [pc, #232]	@ (8000738 <SystemInit+0x134>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000652:	4b39      	ldr	r3, [pc, #228]	@ (8000738 <SystemInit+0x134>)
 8000654:	681a      	ldr	r2, [r3, #0]
 8000656:	4938      	ldr	r1, [pc, #224]	@ (8000738 <SystemInit+0x134>)
 8000658:	4b38      	ldr	r3, [pc, #224]	@ (800073c <SystemInit+0x138>)
 800065a:	4013      	ands	r3, r2
 800065c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800065e:	4b35      	ldr	r3, [pc, #212]	@ (8000734 <SystemInit+0x130>)
 8000660:	681b      	ldr	r3, [r3, #0]
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	2b00      	cmp	r3, #0
 8000668:	d007      	beq.n	800067a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800066a:	4b32      	ldr	r3, [pc, #200]	@ (8000734 <SystemInit+0x130>)
 800066c:	681b      	ldr	r3, [r3, #0]
 800066e:	f023 030f 	bic.w	r3, r3, #15
 8000672:	4a30      	ldr	r2, [pc, #192]	@ (8000734 <SystemInit+0x130>)
 8000674:	f043 0307 	orr.w	r3, r3, #7
 8000678:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800067a:	4b2f      	ldr	r3, [pc, #188]	@ (8000738 <SystemInit+0x134>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000680:	4b2d      	ldr	r3, [pc, #180]	@ (8000738 <SystemInit+0x134>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000686:	4b2c      	ldr	r3, [pc, #176]	@ (8000738 <SystemInit+0x134>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800068c:	4b2a      	ldr	r3, [pc, #168]	@ (8000738 <SystemInit+0x134>)
 800068e:	4a2c      	ldr	r2, [pc, #176]	@ (8000740 <SystemInit+0x13c>)
 8000690:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000692:	4b29      	ldr	r3, [pc, #164]	@ (8000738 <SystemInit+0x134>)
 8000694:	4a2b      	ldr	r2, [pc, #172]	@ (8000744 <SystemInit+0x140>)
 8000696:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000698:	4b27      	ldr	r3, [pc, #156]	@ (8000738 <SystemInit+0x134>)
 800069a:	4a2b      	ldr	r2, [pc, #172]	@ (8000748 <SystemInit+0x144>)
 800069c:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800069e:	4b26      	ldr	r3, [pc, #152]	@ (8000738 <SystemInit+0x134>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80006a4:	4b24      	ldr	r3, [pc, #144]	@ (8000738 <SystemInit+0x134>)
 80006a6:	4a28      	ldr	r2, [pc, #160]	@ (8000748 <SystemInit+0x144>)
 80006a8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80006aa:	4b23      	ldr	r3, [pc, #140]	@ (8000738 <SystemInit+0x134>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80006b0:	4b21      	ldr	r3, [pc, #132]	@ (8000738 <SystemInit+0x134>)
 80006b2:	4a25      	ldr	r2, [pc, #148]	@ (8000748 <SystemInit+0x144>)
 80006b4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80006b6:	4b20      	ldr	r3, [pc, #128]	@ (8000738 <SystemInit+0x134>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80006bc:	4b1e      	ldr	r3, [pc, #120]	@ (8000738 <SystemInit+0x134>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a1d      	ldr	r2, [pc, #116]	@ (8000738 <SystemInit+0x134>)
 80006c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80006c6:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80006c8:	4b1b      	ldr	r3, [pc, #108]	@ (8000738 <SystemInit+0x134>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80006ce:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <SystemInit+0x148>)
 80006d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006d2:	4a1e      	ldr	r2, [pc, #120]	@ (800074c <SystemInit+0x148>)
 80006d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80006d8:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006da:	4b1d      	ldr	r3, [pc, #116]	@ (8000750 <SystemInit+0x14c>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b1d      	ldr	r3, [pc, #116]	@ (8000754 <SystemInit+0x150>)
 80006e0:	4013      	ands	r3, r2
 80006e2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80006e6:	d202      	bcs.n	80006ee <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000758 <SystemInit+0x154>)
 80006ea:	2201      	movs	r2, #1
 80006ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 80006ee:	4b12      	ldr	r3, [pc, #72]	@ (8000738 <SystemInit+0x134>)
 80006f0:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80006f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d113      	bne.n	8000724 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80006fc:	4b0e      	ldr	r3, [pc, #56]	@ (8000738 <SystemInit+0x134>)
 80006fe:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000702:	4a0d      	ldr	r2, [pc, #52]	@ (8000738 <SystemInit+0x134>)
 8000704:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000708:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <SystemInit+0x158>)
 800070e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000712:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000714:	4b08      	ldr	r3, [pc, #32]	@ (8000738 <SystemInit+0x134>)
 8000716:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800071a:	4a07      	ldr	r2, [pc, #28]	@ (8000738 <SystemInit+0x134>)
 800071c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000720:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000ed00 	.word	0xe000ed00
 8000734:	52002000 	.word	0x52002000
 8000738:	58024400 	.word	0x58024400
 800073c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000740:	02020200 	.word	0x02020200
 8000744:	01ff0000 	.word	0x01ff0000
 8000748:	01010280 	.word	0x01010280
 800074c:	580000c0 	.word	0x580000c0
 8000750:	5c001000 	.word	0x5c001000
 8000754:	ffff0000 	.word	0xffff0000
 8000758:	51008108 	.word	0x51008108
 800075c:	52004000 	.word	0x52004000

08000760 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000764:	4b09      	ldr	r3, [pc, #36]	@ (800078c <ExitRun0Mode+0x2c>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	4a08      	ldr	r2, [pc, #32]	@ (800078c <ExitRun0Mode+0x2c>)
 800076a:	f023 0302 	bic.w	r3, r3, #2
 800076e:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000770:	bf00      	nop
 8000772:	4b06      	ldr	r3, [pc, #24]	@ (800078c <ExitRun0Mode+0x2c>)
 8000774:	685b      	ldr	r3, [r3, #4]
 8000776:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800077a:	2b00      	cmp	r3, #0
 800077c:	d0f9      	beq.n	8000772 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	46bd      	mov	sp, r7
 8000784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000788:	4770      	bx	lr
 800078a:	bf00      	nop
 800078c:	58024800 	.word	0x58024800

08000790 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000796:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800079a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800079c:	bf00      	nop
 800079e:	4b26      	ldr	r3, [pc, #152]	@ (8000838 <main+0xa8>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d004      	beq.n	80007b4 <main+0x24>
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	1e5a      	subs	r2, r3, #1
 80007ae:	607a      	str	r2, [r7, #4]
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	dcf4      	bgt.n	800079e <main+0xe>
  if ( timeout < 0 )
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	da01      	bge.n	80007be <main+0x2e>
  {
  Error_Handler();
 80007ba:	f000 f9b1 	bl	8000b20 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007be:	f000 fa95 	bl	8000cec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c2:	f000 f83d 	bl	8000840 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80007c6:	4b1c      	ldr	r3, [pc, #112]	@ (8000838 <main+0xa8>)
 80007c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007cc:	4a1a      	ldr	r2, [pc, #104]	@ (8000838 <main+0xa8>)
 80007ce:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80007d6:	4b18      	ldr	r3, [pc, #96]	@ (8000838 <main+0xa8>)
 80007d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80007dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80007e0:	603b      	str	r3, [r7, #0]
 80007e2:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80007e4:	2000      	movs	r0, #0
 80007e6:	f000 fe0b 	bl	8001400 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80007ea:	2100      	movs	r1, #0
 80007ec:	2000      	movs	r0, #0
 80007ee:	f000 fe21 	bl	8001434 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80007f2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007f6:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80007f8:	bf00      	nop
 80007fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000838 <main+0xa8>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000802:	2b00      	cmp	r3, #0
 8000804:	d104      	bne.n	8000810 <main+0x80>
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	1e5a      	subs	r2, r3, #1
 800080a:	607a      	str	r2, [r7, #4]
 800080c:	2b00      	cmp	r3, #0
 800080e:	dcf4      	bgt.n	80007fa <main+0x6a>
if ( timeout < 0 )
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2b00      	cmp	r3, #0
 8000814:	da01      	bge.n	800081a <main+0x8a>
{
Error_Handler();
 8000816:	f000 f983 	bl	8000b20 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800081a:	f000 f8d9 	bl	80009d0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800081e:	f000 f88b 	bl	8000938 <MX_USART3_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000822:	2101      	movs	r1, #1
 8000824:	4805      	ldr	r0, [pc, #20]	@ (800083c <main+0xac>)
 8000826:	f000 fdd0 	bl	80013ca <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 800082a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800082e:	f000 faef 	bl	8000e10 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000832:	bf00      	nop
 8000834:	e7f5      	b.n	8000822 <main+0x92>
 8000836:	bf00      	nop
 8000838:	58024400 	.word	0x58024400
 800083c:	58020400 	.word	0x58020400

08000840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b09c      	sub	sp, #112	@ 0x70
 8000844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800084a:	224c      	movs	r2, #76	@ 0x4c
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f004 fd4c 	bl	80052ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000854:	1d3b      	adds	r3, r7, #4
 8000856:	2220      	movs	r2, #32
 8000858:	2100      	movs	r1, #0
 800085a:	4618      	mov	r0, r3
 800085c:	f004 fd46 	bl	80052ec <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000860:	2004      	movs	r0, #4
 8000862:	f000 fdfb 	bl	800145c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000866:	2300      	movs	r3, #0
 8000868:	603b      	str	r3, [r7, #0]
 800086a:	4b31      	ldr	r3, [pc, #196]	@ (8000930 <SystemClock_Config+0xf0>)
 800086c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800086e:	4a30      	ldr	r2, [pc, #192]	@ (8000930 <SystemClock_Config+0xf0>)
 8000870:	f023 0301 	bic.w	r3, r3, #1
 8000874:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000876:	4b2e      	ldr	r3, [pc, #184]	@ (8000930 <SystemClock_Config+0xf0>)
 8000878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800087a:	f003 0301 	and.w	r3, r3, #1
 800087e:	603b      	str	r3, [r7, #0]
 8000880:	4b2c      	ldr	r3, [pc, #176]	@ (8000934 <SystemClock_Config+0xf4>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	4a2b      	ldr	r2, [pc, #172]	@ (8000934 <SystemClock_Config+0xf4>)
 8000886:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800088a:	6193      	str	r3, [r2, #24]
 800088c:	4b29      	ldr	r3, [pc, #164]	@ (8000934 <SystemClock_Config+0xf4>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000894:	603b      	str	r3, [r7, #0]
 8000896:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000898:	bf00      	nop
 800089a:	4b26      	ldr	r3, [pc, #152]	@ (8000934 <SystemClock_Config+0xf4>)
 800089c:	699b      	ldr	r3, [r3, #24]
 800089e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80008a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80008a6:	d1f8      	bne.n	800089a <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008a8:	2302      	movs	r3, #2
 80008aa:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80008ac:	2301      	movs	r3, #1
 80008ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008b0:	2340      	movs	r3, #64	@ 0x40
 80008b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008b4:	2302      	movs	r3, #2
 80008b6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008b8:	2300      	movs	r3, #0
 80008ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008bc:	2304      	movs	r3, #4
 80008be:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 80008c0:	2332      	movs	r3, #50	@ 0x32
 80008c2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80008c4:	2302      	movs	r3, #2
 80008c6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80008c8:	2305      	movs	r3, #5
 80008ca:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008cc:	2302      	movs	r3, #2
 80008ce:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80008d0:	230c      	movs	r3, #12
 80008d2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80008d4:	2300      	movs	r3, #0
 80008d6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80008d8:	2300      	movs	r3, #0
 80008da:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 fe15 	bl	8001510 <HAL_RCC_OscConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80008ec:	f000 f918 	bl	8000b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f0:	233f      	movs	r3, #63	@ 0x3f
 80008f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f4:	2303      	movs	r3, #3
 80008f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80008fc:	2308      	movs	r3, #8
 80008fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000900:	2340      	movs	r3, #64	@ 0x40
 8000902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000904:	2340      	movs	r3, #64	@ 0x40
 8000906:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000908:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800090c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800090e:	2340      	movs	r3, #64	@ 0x40
 8000910:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000912:	1d3b      	adds	r3, r7, #4
 8000914:	2102      	movs	r1, #2
 8000916:	4618      	mov	r0, r3
 8000918:	f001 fa54 	bl	8001dc4 <HAL_RCC_ClockConfig>
 800091c:	4603      	mov	r3, r0
 800091e:	2b00      	cmp	r3, #0
 8000920:	d001      	beq.n	8000926 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000922:	f000 f8fd 	bl	8000b20 <Error_Handler>
  }
}
 8000926:	bf00      	nop
 8000928:	3770      	adds	r7, #112	@ 0x70
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	58000400 	.word	0x58000400
 8000934:	58024800 	.word	0x58024800

08000938 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800093c:	4b22      	ldr	r3, [pc, #136]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 800093e:	4a23      	ldr	r2, [pc, #140]	@ (80009cc <MX_USART3_UART_Init+0x94>)
 8000940:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000942:	4b21      	ldr	r3, [pc, #132]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 8000944:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000948:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b1f      	ldr	r3, [pc, #124]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b1d      	ldr	r3, [pc, #116]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000956:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b1a      	ldr	r3, [pc, #104]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b19      	ldr	r3, [pc, #100]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b17      	ldr	r3, [pc, #92]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096e:	4b16      	ldr	r3, [pc, #88]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000974:	4b14      	ldr	r3, [pc, #80]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097a:	4b13      	ldr	r3, [pc, #76]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000980:	4811      	ldr	r0, [pc, #68]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 8000982:	f003 fbd7 	bl	8004134 <HAL_UART_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800098c:	f000 f8c8 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000990:	2100      	movs	r1, #0
 8000992:	480d      	ldr	r0, [pc, #52]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 8000994:	f004 fbdf 	bl	8005156 <HAL_UARTEx_SetTxFifoThreshold>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800099e:	f000 f8bf 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a2:	2100      	movs	r1, #0
 80009a4:	4808      	ldr	r0, [pc, #32]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 80009a6:	f004 fc14 	bl	80051d2 <HAL_UARTEx_SetRxFifoThreshold>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009b0:	f000 f8b6 	bl	8000b20 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	@ (80009c8 <MX_USART3_UART_Init+0x90>)
 80009b6:	f004 fb95 	bl	80050e4 <HAL_UARTEx_DisableFifoMode>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009c0:	f000 f8ae 	bl	8000b20 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	2400002c 	.word	0x2400002c
 80009cc:	40004800 	.word	0x40004800

080009d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08a      	sub	sp, #40	@ 0x28
 80009d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	f107 0314 	add.w	r3, r7, #20
 80009da:	2200      	movs	r2, #0
 80009dc:	601a      	str	r2, [r3, #0]
 80009de:	605a      	str	r2, [r3, #4]
 80009e0:	609a      	str	r2, [r3, #8]
 80009e2:	60da      	str	r2, [r3, #12]
 80009e4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	4b49      	ldr	r3, [pc, #292]	@ (8000b0c <MX_GPIO_Init+0x13c>)
 80009e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009ec:	4a47      	ldr	r2, [pc, #284]	@ (8000b0c <MX_GPIO_Init+0x13c>)
 80009ee:	f043 0304 	orr.w	r3, r3, #4
 80009f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80009f6:	4b45      	ldr	r3, [pc, #276]	@ (8000b0c <MX_GPIO_Init+0x13c>)
 80009f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	613b      	str	r3, [r7, #16]
 8000a02:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	4b41      	ldr	r3, [pc, #260]	@ (8000b0c <MX_GPIO_Init+0x13c>)
 8000a06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a0a:	4a40      	ldr	r2, [pc, #256]	@ (8000b0c <MX_GPIO_Init+0x13c>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a14:	4b3d      	ldr	r3, [pc, #244]	@ (8000b0c <MX_GPIO_Init+0x13c>)
 8000a16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a1a:	f003 0302 	and.w	r3, r3, #2
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a22:	4b3a      	ldr	r3, [pc, #232]	@ (8000b0c <MX_GPIO_Init+0x13c>)
 8000a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a28:	4a38      	ldr	r2, [pc, #224]	@ (8000b0c <MX_GPIO_Init+0x13c>)
 8000a2a:	f043 0308 	orr.w	r3, r3, #8
 8000a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a32:	4b36      	ldr	r3, [pc, #216]	@ (8000b0c <MX_GPIO_Init+0x13c>)
 8000a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a38:	f003 0308 	and.w	r3, r3, #8
 8000a3c:	60bb      	str	r3, [r7, #8]
 8000a3e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a40:	4b32      	ldr	r3, [pc, #200]	@ (8000b0c <MX_GPIO_Init+0x13c>)
 8000a42:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a46:	4a31      	ldr	r2, [pc, #196]	@ (8000b0c <MX_GPIO_Init+0x13c>)
 8000a48:	f043 0301 	orr.w	r3, r3, #1
 8000a4c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a50:	4b2e      	ldr	r3, [pc, #184]	@ (8000b0c <MX_GPIO_Init+0x13c>)
 8000a52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a56:	f003 0301 	and.w	r3, r3, #1
 8000a5a:	607b      	str	r3, [r7, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a5e:	4b2b      	ldr	r3, [pc, #172]	@ (8000b0c <MX_GPIO_Init+0x13c>)
 8000a60:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a64:	4a29      	ldr	r2, [pc, #164]	@ (8000b0c <MX_GPIO_Init+0x13c>)
 8000a66:	f043 0310 	orr.w	r3, r3, #16
 8000a6a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000a6e:	4b27      	ldr	r3, [pc, #156]	@ (8000b0c <MX_GPIO_Init+0x13c>)
 8000a70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000a74:	f003 0310 	and.w	r3, r3, #16
 8000a78:	603b      	str	r3, [r7, #0]
 8000a7a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	2101      	movs	r1, #1
 8000a80:	4823      	ldr	r0, [pc, #140]	@ (8000b10 <MX_GPIO_Init+0x140>)
 8000a82:	f000 fc89 	bl	8001398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2102      	movs	r1, #2
 8000a8a:	4822      	ldr	r0, [pc, #136]	@ (8000b14 <MX_GPIO_Init+0x144>)
 8000a8c:	f000 fc84 	bl	8001398 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a90:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a96:	2300      	movs	r3, #0
 8000a98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a9e:	f107 0314 	add.w	r3, r7, #20
 8000aa2:	4619      	mov	r1, r3
 8000aa4:	481c      	ldr	r0, [pc, #112]	@ (8000b18 <MX_GPIO_Init+0x148>)
 8000aa6:	f000 fac7 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aba:	f107 0314 	add.w	r3, r7, #20
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4813      	ldr	r0, [pc, #76]	@ (8000b10 <MX_GPIO_Init+0x140>)
 8000ac2:	f000 fab9 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000ac6:	f44f 53c8 	mov.w	r3, #6400	@ 0x1900
 8000aca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000acc:	2302      	movs	r3, #2
 8000ace:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000ad8:	230a      	movs	r3, #10
 8000ada:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000adc:	f107 0314 	add.w	r3, r7, #20
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	480e      	ldr	r0, [pc, #56]	@ (8000b1c <MX_GPIO_Init+0x14c>)
 8000ae4:	f000 faa8 	bl	8001038 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ae8:	2302      	movs	r3, #2
 8000aea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aec:	2301      	movs	r3, #1
 8000aee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af4:	2300      	movs	r3, #0
 8000af6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000af8:	f107 0314 	add.w	r3, r7, #20
 8000afc:	4619      	mov	r1, r3
 8000afe:	4805      	ldr	r0, [pc, #20]	@ (8000b14 <MX_GPIO_Init+0x144>)
 8000b00:	f000 fa9a 	bl	8001038 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b04:	bf00      	nop
 8000b06:	3728      	adds	r7, #40	@ 0x28
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	58024400 	.word	0x58024400
 8000b10:	58020400 	.word	0x58020400
 8000b14:	58021000 	.word	0x58021000
 8000b18:	58020800 	.word	0x58020800
 8000b1c:	58020000 	.word	0x58020000

08000b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b20:	b480      	push	{r7}
 8000b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b28:	bf00      	nop
 8000b2a:	e7fd      	b.n	8000b28 <Error_Handler+0x8>

08000b2c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b32:	4b0a      	ldr	r3, [pc, #40]	@ (8000b5c <HAL_MspInit+0x30>)
 8000b34:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b38:	4a08      	ldr	r2, [pc, #32]	@ (8000b5c <HAL_MspInit+0x30>)
 8000b3a:	f043 0302 	orr.w	r3, r3, #2
 8000b3e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000b42:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <HAL_MspInit+0x30>)
 8000b44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000b48:	f003 0302 	and.w	r3, r3, #2
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	58024400 	.word	0x58024400

08000b60 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b0ba      	sub	sp, #232	@ 0xe8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	22c0      	movs	r2, #192	@ 0xc0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4618      	mov	r0, r3
 8000b82:	f004 fbb3 	bl	80052ec <memset>
  if(huart->Instance==USART3)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	4a27      	ldr	r2, [pc, #156]	@ (8000c28 <HAL_UART_MspInit+0xc8>)
 8000b8c:	4293      	cmp	r3, r2
 8000b8e:	d146      	bne.n	8000c1e <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b90:	f04f 0202 	mov.w	r2, #2
 8000b94:	f04f 0300 	mov.w	r3, #0
 8000b98:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ba2:	f107 0310 	add.w	r3, r7, #16
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f001 fc98 	bl	80024dc <HAL_RCCEx_PeriphCLKConfig>
 8000bac:	4603      	mov	r3, r0
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d001      	beq.n	8000bb6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000bb2:	f7ff ffb5 	bl	8000b20 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c2c <HAL_UART_MspInit+0xcc>)
 8000bb8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8000c2c <HAL_UART_MspInit+0xcc>)
 8000bbe:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000bc2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000bc6:	4b19      	ldr	r3, [pc, #100]	@ (8000c2c <HAL_UART_MspInit+0xcc>)
 8000bc8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000bcc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd4:	4b15      	ldr	r3, [pc, #84]	@ (8000c2c <HAL_UART_MspInit+0xcc>)
 8000bd6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bda:	4a14      	ldr	r2, [pc, #80]	@ (8000c2c <HAL_UART_MspInit+0xcc>)
 8000bdc:	f043 0308 	orr.w	r3, r3, #8
 8000be0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be4:	4b11      	ldr	r3, [pc, #68]	@ (8000c2c <HAL_UART_MspInit+0xcc>)
 8000be6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bea:	f003 0308 	and.w	r3, r3, #8
 8000bee:	60bb      	str	r3, [r7, #8]
 8000bf0:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000bf2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000bf6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c0c:	2307      	movs	r3, #7
 8000c0e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c12:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8000c16:	4619      	mov	r1, r3
 8000c18:	4805      	ldr	r0, [pc, #20]	@ (8000c30 <HAL_UART_MspInit+0xd0>)
 8000c1a:	f000 fa0d 	bl	8001038 <HAL_GPIO_Init>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8000c1e:	bf00      	nop
 8000c20:	37e8      	adds	r7, #232	@ 0xe8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40004800 	.word	0x40004800
 8000c2c:	58024400 	.word	0x58024400
 8000c30:	58020c00 	.word	0x58020c00

08000c34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <NMI_Handler+0x4>

08000c3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <HardFault_Handler+0x4>

08000c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <MemManage_Handler+0x4>

08000c4c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c50:	bf00      	nop
 8000c52:	e7fd      	b.n	8000c50 <BusFault_Handler+0x4>

08000c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <UsageFault_Handler+0x4>

08000c5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr

08000c6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c6a:	b480      	push	{r7}
 8000c6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6e:	bf00      	nop
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr

08000c78 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c86:	b580      	push	{r7, lr}
 8000c88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c8a:	f000 f8a1 	bl	8000dd0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000c94:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000cd0 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000c98:	f7ff fd62 	bl	8000760 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c9c:	f7ff fcb2 	bl	8000604 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca0:	480c      	ldr	r0, [pc, #48]	@ (8000cd4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ca2:	490d      	ldr	r1, [pc, #52]	@ (8000cd8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ca4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cdc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca8:	e002      	b.n	8000cb0 <LoopCopyDataInit>

08000caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cae:	3304      	adds	r3, #4

08000cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb4:	d3f9      	bcc.n	8000caa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb6:	4a0a      	ldr	r2, [pc, #40]	@ (8000ce0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cb8:	4c0a      	ldr	r4, [pc, #40]	@ (8000ce4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cbc:	e001      	b.n	8000cc2 <LoopFillZerobss>

08000cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc0:	3204      	adds	r2, #4

08000cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc4:	d3fb      	bcc.n	8000cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cc6:	f004 fb19 	bl	80052fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cca:	f7ff fd61 	bl	8000790 <main>
  bx  lr
 8000cce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000cd0:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000cd4:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000cd8:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000cdc:	080053a4 	.word	0x080053a4
  ldr r2, =_sbss
 8000ce0:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000ce4:	240000c4 	.word	0x240000c4

08000ce8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ce8:	e7fe      	b.n	8000ce8 <ADC3_IRQHandler>
	...

08000cec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b082      	sub	sp, #8
 8000cf0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf2:	2003      	movs	r0, #3
 8000cf4:	f000 f96e 	bl	8000fd4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000cf8:	f001 fa1a 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	4b15      	ldr	r3, [pc, #84]	@ (8000d54 <HAL_Init+0x68>)
 8000d00:	699b      	ldr	r3, [r3, #24]
 8000d02:	0a1b      	lsrs	r3, r3, #8
 8000d04:	f003 030f 	and.w	r3, r3, #15
 8000d08:	4913      	ldr	r1, [pc, #76]	@ (8000d58 <HAL_Init+0x6c>)
 8000d0a:	5ccb      	ldrb	r3, [r1, r3]
 8000d0c:	f003 031f 	and.w	r3, r3, #31
 8000d10:	fa22 f303 	lsr.w	r3, r2, r3
 8000d14:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000d16:	4b0f      	ldr	r3, [pc, #60]	@ (8000d54 <HAL_Init+0x68>)
 8000d18:	699b      	ldr	r3, [r3, #24]
 8000d1a:	f003 030f 	and.w	r3, r3, #15
 8000d1e:	4a0e      	ldr	r2, [pc, #56]	@ (8000d58 <HAL_Init+0x6c>)
 8000d20:	5cd3      	ldrb	r3, [r2, r3]
 8000d22:	f003 031f 	and.w	r3, r3, #31
 8000d26:	687a      	ldr	r2, [r7, #4]
 8000d28:	fa22 f303 	lsr.w	r3, r2, r3
 8000d2c:	4a0b      	ldr	r2, [pc, #44]	@ (8000d5c <HAL_Init+0x70>)
 8000d2e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000d30:	4a0b      	ldr	r2, [pc, #44]	@ (8000d60 <HAL_Init+0x74>)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d36:	2000      	movs	r0, #0
 8000d38:	f000 f814 	bl	8000d64 <HAL_InitTick>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	e002      	b.n	8000d4c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000d46:	f7ff fef1 	bl	8000b2c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d4a:	2300      	movs	r3, #0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}
 8000d54:	58024400 	.word	0x58024400
 8000d58:	0800535c 	.word	0x0800535c
 8000d5c:	24000004 	.word	0x24000004
 8000d60:	24000000 	.word	0x24000000

08000d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000d6c:	4b15      	ldr	r3, [pc, #84]	@ (8000dc4 <HAL_InitTick+0x60>)
 8000d6e:	781b      	ldrb	r3, [r3, #0]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d101      	bne.n	8000d78 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	e021      	b.n	8000dbc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000d78:	4b13      	ldr	r3, [pc, #76]	@ (8000dc8 <HAL_InitTick+0x64>)
 8000d7a:	681a      	ldr	r2, [r3, #0]
 8000d7c:	4b11      	ldr	r3, [pc, #68]	@ (8000dc4 <HAL_InitTick+0x60>)
 8000d7e:	781b      	ldrb	r3, [r3, #0]
 8000d80:	4619      	mov	r1, r3
 8000d82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000d86:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f945 	bl	800101e <HAL_SYSTICK_Config>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	e00e      	b.n	8000dbc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b0f      	cmp	r3, #15
 8000da2:	d80a      	bhi.n	8000dba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000da4:	2200      	movs	r2, #0
 8000da6:	6879      	ldr	r1, [r7, #4]
 8000da8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dac:	f000 f91d 	bl	8000fea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000db0:	4a06      	ldr	r2, [pc, #24]	@ (8000dcc <HAL_InitTick+0x68>)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db6:	2300      	movs	r3, #0
 8000db8:	e000      	b.n	8000dbc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000dba:	2301      	movs	r3, #1
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	2400000c 	.word	0x2400000c
 8000dc8:	24000000 	.word	0x24000000
 8000dcc:	24000008 	.word	0x24000008

08000dd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000dd4:	4b06      	ldr	r3, [pc, #24]	@ (8000df0 <HAL_IncTick+0x20>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	461a      	mov	r2, r3
 8000dda:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <HAL_IncTick+0x24>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4413      	add	r3, r2
 8000de0:	4a04      	ldr	r2, [pc, #16]	@ (8000df4 <HAL_IncTick+0x24>)
 8000de2:	6013      	str	r3, [r2, #0]
}
 8000de4:	bf00      	nop
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	2400000c 	.word	0x2400000c
 8000df4:	240000c0 	.word	0x240000c0

08000df8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000dfc:	4b03      	ldr	r3, [pc, #12]	@ (8000e0c <HAL_GetTick+0x14>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr
 8000e0a:	bf00      	nop
 8000e0c:	240000c0 	.word	0x240000c0

08000e10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e18:	f7ff ffee 	bl	8000df8 <HAL_GetTick>
 8000e1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e28:	d005      	beq.n	8000e36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000e54 <HAL_Delay+0x44>)
 8000e2c:	781b      	ldrb	r3, [r3, #0]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	4413      	add	r3, r2
 8000e34:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e36:	bf00      	nop
 8000e38:	f7ff ffde 	bl	8000df8 <HAL_GetTick>
 8000e3c:	4602      	mov	r2, r0
 8000e3e:	68bb      	ldr	r3, [r7, #8]
 8000e40:	1ad3      	subs	r3, r2, r3
 8000e42:	68fa      	ldr	r2, [r7, #12]
 8000e44:	429a      	cmp	r2, r3
 8000e46:	d8f7      	bhi.n	8000e38 <HAL_Delay+0x28>
  {
  }
}
 8000e48:	bf00      	nop
 8000e4a:	bf00      	nop
 8000e4c:	3710      	adds	r7, #16
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2400000c 	.word	0x2400000c

08000e58 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000e5c:	4b03      	ldr	r3, [pc, #12]	@ (8000e6c <HAL_GetREVID+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	0c1b      	lsrs	r3, r3, #16
}
 8000e62:	4618      	mov	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	5c001000 	.word	0x5c001000

08000e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e80:	4b0b      	ldr	r3, [pc, #44]	@ (8000eb0 <__NVIC_SetPriorityGrouping+0x40>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000e98:	4b06      	ldr	r3, [pc, #24]	@ (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e9e:	4a04      	ldr	r2, [pc, #16]	@ (8000eb0 <__NVIC_SetPriorityGrouping+0x40>)
 8000ea0:	68bb      	ldr	r3, [r7, #8]
 8000ea2:	60d3      	str	r3, [r2, #12]
}
 8000ea4:	bf00      	nop
 8000ea6:	3714      	adds	r7, #20
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eae:	4770      	bx	lr
 8000eb0:	e000ed00 	.word	0xe000ed00
 8000eb4:	05fa0000 	.word	0x05fa0000

08000eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebc:	4b04      	ldr	r3, [pc, #16]	@ (8000ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f003 0307 	and.w	r3, r3, #7
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	6039      	str	r1, [r7, #0]
 8000ede:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000ee0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	db0a      	blt.n	8000efe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	490c      	ldr	r1, [pc, #48]	@ (8000f20 <__NVIC_SetPriority+0x4c>)
 8000eee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000ef2:	0112      	lsls	r2, r2, #4
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	440b      	add	r3, r1
 8000ef8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000efc:	e00a      	b.n	8000f14 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	b2da      	uxtb	r2, r3
 8000f02:	4908      	ldr	r1, [pc, #32]	@ (8000f24 <__NVIC_SetPriority+0x50>)
 8000f04:	88fb      	ldrh	r3, [r7, #6]
 8000f06:	f003 030f 	and.w	r3, r3, #15
 8000f0a:	3b04      	subs	r3, #4
 8000f0c:	0112      	lsls	r2, r2, #4
 8000f0e:	b2d2      	uxtb	r2, r2
 8000f10:	440b      	add	r3, r1
 8000f12:	761a      	strb	r2, [r3, #24]
}
 8000f14:	bf00      	nop
 8000f16:	370c      	adds	r7, #12
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1e:	4770      	bx	lr
 8000f20:	e000e100 	.word	0xe000e100
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b089      	sub	sp, #36	@ 0x24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	f003 0307 	and.w	r3, r3, #7
 8000f3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f1c3 0307 	rsb	r3, r3, #7
 8000f42:	2b04      	cmp	r3, #4
 8000f44:	bf28      	it	cs
 8000f46:	2304      	movcs	r3, #4
 8000f48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f4a:	69fb      	ldr	r3, [r7, #28]
 8000f4c:	3304      	adds	r3, #4
 8000f4e:	2b06      	cmp	r3, #6
 8000f50:	d902      	bls.n	8000f58 <NVIC_EncodePriority+0x30>
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	3b03      	subs	r3, #3
 8000f56:	e000      	b.n	8000f5a <NVIC_EncodePriority+0x32>
 8000f58:	2300      	movs	r3, #0
 8000f5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43da      	mvns	r2, r3
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	401a      	ands	r2, r3
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f70:	f04f 31ff 	mov.w	r1, #4294967295
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	fa01 f303 	lsl.w	r3, r1, r3
 8000f7a:	43d9      	mvns	r1, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f80:	4313      	orrs	r3, r2
         );
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3724      	adds	r7, #36	@ 0x24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8c:	4770      	bx	lr
	...

08000f90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3b01      	subs	r3, #1
 8000f9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fa0:	d301      	bcc.n	8000fa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e00f      	b.n	8000fc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	3b01      	subs	r3, #1
 8000fac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fae:	210f      	movs	r1, #15
 8000fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fb4:	f7ff ff8e 	bl	8000ed4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fb8:	4b05      	ldr	r3, [pc, #20]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fba:	2200      	movs	r2, #0
 8000fbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fbe:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <SysTick_Config+0x40>)
 8000fc0:	2207      	movs	r2, #7
 8000fc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fc4:	2300      	movs	r3, #0
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	3708      	adds	r7, #8
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bd80      	pop	{r7, pc}
 8000fce:	bf00      	nop
 8000fd0:	e000e010 	.word	0xe000e010

08000fd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fdc:	6878      	ldr	r0, [r7, #4]
 8000fde:	f7ff ff47 	bl	8000e70 <__NVIC_SetPriorityGrouping>
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fea:	b580      	push	{r7, lr}
 8000fec:	b086      	sub	sp, #24
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	60b9      	str	r1, [r7, #8]
 8000ff4:	607a      	str	r2, [r7, #4]
 8000ff6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff8:	f7ff ff5e 	bl	8000eb8 <__NVIC_GetPriorityGrouping>
 8000ffc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ffe:	687a      	ldr	r2, [r7, #4]
 8001000:	68b9      	ldr	r1, [r7, #8]
 8001002:	6978      	ldr	r0, [r7, #20]
 8001004:	f7ff ff90 	bl	8000f28 <NVIC_EncodePriority>
 8001008:	4602      	mov	r2, r0
 800100a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800100e:	4611      	mov	r1, r2
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff5f 	bl	8000ed4 <__NVIC_SetPriority>
}
 8001016:	bf00      	nop
 8001018:	3718      	adds	r7, #24
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f7ff ffb2 	bl	8000f90 <SysTick_Config>
 800102c:	4603      	mov	r3, r0
}
 800102e:	4618      	mov	r0, r3
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
	...

08001038 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001038:	b480      	push	{r7}
 800103a:	b089      	sub	sp, #36	@ 0x24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001046:	4b89      	ldr	r3, [pc, #548]	@ (800126c <HAL_GPIO_Init+0x234>)
 8001048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800104a:	e194      	b.n	8001376 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	681a      	ldr	r2, [r3, #0]
 8001050:	2101      	movs	r1, #1
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	fa01 f303 	lsl.w	r3, r1, r3
 8001058:	4013      	ands	r3, r2
 800105a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	2b00      	cmp	r3, #0
 8001060:	f000 8186 	beq.w	8001370 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f003 0303 	and.w	r3, r3, #3
 800106c:	2b01      	cmp	r3, #1
 800106e:	d005      	beq.n	800107c <HAL_GPIO_Init+0x44>
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f003 0303 	and.w	r3, r3, #3
 8001078:	2b02      	cmp	r3, #2
 800107a:	d130      	bne.n	80010de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001082:	69fb      	ldr	r3, [r7, #28]
 8001084:	005b      	lsls	r3, r3, #1
 8001086:	2203      	movs	r2, #3
 8001088:	fa02 f303 	lsl.w	r3, r2, r3
 800108c:	43db      	mvns	r3, r3
 800108e:	69ba      	ldr	r2, [r7, #24]
 8001090:	4013      	ands	r3, r2
 8001092:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	68da      	ldr	r2, [r3, #12]
 8001098:	69fb      	ldr	r3, [r7, #28]
 800109a:	005b      	lsls	r3, r3, #1
 800109c:	fa02 f303 	lsl.w	r3, r2, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4313      	orrs	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	69ba      	ldr	r2, [r7, #24]
 80010aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80010b2:	2201      	movs	r2, #1
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	091b      	lsrs	r3, r3, #4
 80010c8:	f003 0201 	and.w	r2, r3, #1
 80010cc:	69fb      	ldr	r3, [r7, #28]
 80010ce:	fa02 f303 	lsl.w	r3, r2, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69ba      	ldr	r2, [r7, #24]
 80010dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	f003 0303 	and.w	r3, r3, #3
 80010e6:	2b03      	cmp	r3, #3
 80010e8:	d017      	beq.n	800111a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	2203      	movs	r2, #3
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	69ba      	ldr	r2, [r7, #24]
 80010fe:	4013      	ands	r3, r2
 8001100:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	689a      	ldr	r2, [r3, #8]
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	005b      	lsls	r3, r3, #1
 800110a:	fa02 f303 	lsl.w	r3, r2, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4313      	orrs	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	69ba      	ldr	r2, [r7, #24]
 8001118:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	f003 0303 	and.w	r3, r3, #3
 8001122:	2b02      	cmp	r3, #2
 8001124:	d123      	bne.n	800116e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	08da      	lsrs	r2, r3, #3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	3208      	adds	r2, #8
 800112e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001132:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001134:	69fb      	ldr	r3, [r7, #28]
 8001136:	f003 0307 	and.w	r3, r3, #7
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	220f      	movs	r2, #15
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43db      	mvns	r3, r3
 8001144:	69ba      	ldr	r2, [r7, #24]
 8001146:	4013      	ands	r3, r2
 8001148:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	691a      	ldr	r2, [r3, #16]
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	f003 0307 	and.w	r3, r3, #7
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	fa02 f303 	lsl.w	r3, r2, r3
 800115a:	69ba      	ldr	r2, [r7, #24]
 800115c:	4313      	orrs	r3, r2
 800115e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	08da      	lsrs	r2, r3, #3
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	3208      	adds	r2, #8
 8001168:	69b9      	ldr	r1, [r7, #24]
 800116a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001174:	69fb      	ldr	r3, [r7, #28]
 8001176:	005b      	lsls	r3, r3, #1
 8001178:	2203      	movs	r2, #3
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43db      	mvns	r3, r3
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	4013      	ands	r3, r2
 8001184:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	f003 0203 	and.w	r2, r3, #3
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	fa02 f303 	lsl.w	r3, r2, r3
 8001196:	69ba      	ldr	r2, [r7, #24]
 8001198:	4313      	orrs	r3, r2
 800119a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	69ba      	ldr	r2, [r7, #24]
 80011a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	f000 80e0 	beq.w	8001370 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001270 <HAL_GPIO_Init+0x238>)
 80011b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011b6:	4a2e      	ldr	r2, [pc, #184]	@ (8001270 <HAL_GPIO_Init+0x238>)
 80011b8:	f043 0302 	orr.w	r3, r3, #2
 80011bc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80011c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001270 <HAL_GPIO_Init+0x238>)
 80011c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80011c6:	f003 0302 	and.w	r3, r3, #2
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011ce:	4a29      	ldr	r2, [pc, #164]	@ (8001274 <HAL_GPIO_Init+0x23c>)
 80011d0:	69fb      	ldr	r3, [r7, #28]
 80011d2:	089b      	lsrs	r3, r3, #2
 80011d4:	3302      	adds	r3, #2
 80011d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80011dc:	69fb      	ldr	r3, [r7, #28]
 80011de:	f003 0303 	and.w	r3, r3, #3
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	220f      	movs	r2, #15
 80011e6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ea:	43db      	mvns	r3, r3
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	4013      	ands	r3, r2
 80011f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a20      	ldr	r2, [pc, #128]	@ (8001278 <HAL_GPIO_Init+0x240>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d052      	beq.n	80012a0 <HAL_GPIO_Init+0x268>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a1f      	ldr	r2, [pc, #124]	@ (800127c <HAL_GPIO_Init+0x244>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d031      	beq.n	8001266 <HAL_GPIO_Init+0x22e>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a1e      	ldr	r2, [pc, #120]	@ (8001280 <HAL_GPIO_Init+0x248>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d02b      	beq.n	8001262 <HAL_GPIO_Init+0x22a>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a1d      	ldr	r2, [pc, #116]	@ (8001284 <HAL_GPIO_Init+0x24c>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d025      	beq.n	800125e <HAL_GPIO_Init+0x226>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a1c      	ldr	r2, [pc, #112]	@ (8001288 <HAL_GPIO_Init+0x250>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d01f      	beq.n	800125a <HAL_GPIO_Init+0x222>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a1b      	ldr	r2, [pc, #108]	@ (800128c <HAL_GPIO_Init+0x254>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d019      	beq.n	8001256 <HAL_GPIO_Init+0x21e>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a1a      	ldr	r2, [pc, #104]	@ (8001290 <HAL_GPIO_Init+0x258>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d013      	beq.n	8001252 <HAL_GPIO_Init+0x21a>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a19      	ldr	r2, [pc, #100]	@ (8001294 <HAL_GPIO_Init+0x25c>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d00d      	beq.n	800124e <HAL_GPIO_Init+0x216>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a18      	ldr	r2, [pc, #96]	@ (8001298 <HAL_GPIO_Init+0x260>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d007      	beq.n	800124a <HAL_GPIO_Init+0x212>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	4a17      	ldr	r2, [pc, #92]	@ (800129c <HAL_GPIO_Init+0x264>)
 800123e:	4293      	cmp	r3, r2
 8001240:	d101      	bne.n	8001246 <HAL_GPIO_Init+0x20e>
 8001242:	2309      	movs	r3, #9
 8001244:	e02d      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 8001246:	230a      	movs	r3, #10
 8001248:	e02b      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 800124a:	2308      	movs	r3, #8
 800124c:	e029      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 800124e:	2307      	movs	r3, #7
 8001250:	e027      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 8001252:	2306      	movs	r3, #6
 8001254:	e025      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 8001256:	2305      	movs	r3, #5
 8001258:	e023      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 800125a:	2304      	movs	r3, #4
 800125c:	e021      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 800125e:	2303      	movs	r3, #3
 8001260:	e01f      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 8001262:	2302      	movs	r3, #2
 8001264:	e01d      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 8001266:	2301      	movs	r3, #1
 8001268:	e01b      	b.n	80012a2 <HAL_GPIO_Init+0x26a>
 800126a:	bf00      	nop
 800126c:	58000080 	.word	0x58000080
 8001270:	58024400 	.word	0x58024400
 8001274:	58000400 	.word	0x58000400
 8001278:	58020000 	.word	0x58020000
 800127c:	58020400 	.word	0x58020400
 8001280:	58020800 	.word	0x58020800
 8001284:	58020c00 	.word	0x58020c00
 8001288:	58021000 	.word	0x58021000
 800128c:	58021400 	.word	0x58021400
 8001290:	58021800 	.word	0x58021800
 8001294:	58021c00 	.word	0x58021c00
 8001298:	58022000 	.word	0x58022000
 800129c:	58022400 	.word	0x58022400
 80012a0:	2300      	movs	r3, #0
 80012a2:	69fa      	ldr	r2, [r7, #28]
 80012a4:	f002 0203 	and.w	r2, r2, #3
 80012a8:	0092      	lsls	r2, r2, #2
 80012aa:	4093      	lsls	r3, r2
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80012b2:	4938      	ldr	r1, [pc, #224]	@ (8001394 <HAL_GPIO_Init+0x35c>)
 80012b4:	69fb      	ldr	r3, [r7, #28]
 80012b6:	089b      	lsrs	r3, r3, #2
 80012b8:	3302      	adds	r3, #2
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012c8:	693b      	ldr	r3, [r7, #16]
 80012ca:	43db      	mvns	r3, r3
 80012cc:	69ba      	ldr	r2, [r7, #24]
 80012ce:	4013      	ands	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	693b      	ldr	r3, [r7, #16]
 80012e2:	4313      	orrs	r3, r2
 80012e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80012e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80012ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80012f2:	685b      	ldr	r3, [r3, #4]
 80012f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	43db      	mvns	r3, r3
 80012fa:	69ba      	ldr	r2, [r7, #24]
 80012fc:	4013      	ands	r3, r2
 80012fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	685b      	ldr	r3, [r3, #4]
 8001304:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d003      	beq.n	8001314 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800130c:	69ba      	ldr	r2, [r7, #24]
 800130e:	693b      	ldr	r3, [r7, #16]
 8001310:	4313      	orrs	r3, r2
 8001312:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001314:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001318:	69bb      	ldr	r3, [r7, #24]
 800131a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001322:	693b      	ldr	r3, [r7, #16]
 8001324:	43db      	mvns	r3, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4013      	ands	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001334:	2b00      	cmp	r3, #0
 8001336:	d003      	beq.n	8001340 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	693b      	ldr	r3, [r7, #16]
 800133c:	4313      	orrs	r3, r2
 800133e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	69ba      	ldr	r2, [r7, #24]
 8001344:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	43db      	mvns	r3, r3
 8001350:	69ba      	ldr	r2, [r7, #24]
 8001352:	4013      	ands	r3, r2
 8001354:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800135e:	2b00      	cmp	r3, #0
 8001360:	d003      	beq.n	800136a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001370:	69fb      	ldr	r3, [r7, #28]
 8001372:	3301      	adds	r3, #1
 8001374:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	fa22 f303 	lsr.w	r3, r2, r3
 8001380:	2b00      	cmp	r3, #0
 8001382:	f47f ae63 	bne.w	800104c <HAL_GPIO_Init+0x14>
  }
}
 8001386:	bf00      	nop
 8001388:	bf00      	nop
 800138a:	3724      	adds	r7, #36	@ 0x24
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr
 8001394:	58000400 	.word	0x58000400

08001398 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001398:	b480      	push	{r7}
 800139a:	b083      	sub	sp, #12
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	460b      	mov	r3, r1
 80013a2:	807b      	strh	r3, [r7, #2]
 80013a4:	4613      	mov	r3, r2
 80013a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013a8:	787b      	ldrb	r3, [r7, #1]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d003      	beq.n	80013b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013ae:	887a      	ldrh	r2, [r7, #2]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80013b4:	e003      	b.n	80013be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013b6:	887b      	ldrh	r3, [r7, #2]
 80013b8:	041a      	lsls	r2, r3, #16
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	619a      	str	r2, [r3, #24]
}
 80013be:	bf00      	nop
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b085      	sub	sp, #20
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	460b      	mov	r3, r1
 80013d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80013dc:	887a      	ldrh	r2, [r7, #2]
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	4013      	ands	r3, r2
 80013e2:	041a      	lsls	r2, r3, #16
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	43d9      	mvns	r1, r3
 80013e8:	887b      	ldrh	r3, [r7, #2]
 80013ea:	400b      	ands	r3, r1
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	619a      	str	r2, [r3, #24]
}
 80013f2:	bf00      	nop
 80013f4:	3714      	adds	r7, #20
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
	...

08001400 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001400:	b480      	push	{r7}
 8001402:	b083      	sub	sp, #12
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001408:	4a08      	ldr	r2, [pc, #32]	@ (800142c <HAL_HSEM_FastTake+0x2c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	3320      	adds	r3, #32
 800140e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001412:	4a07      	ldr	r2, [pc, #28]	@ (8001430 <HAL_HSEM_FastTake+0x30>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d101      	bne.n	800141c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001418:	2300      	movs	r3, #0
 800141a:	e000      	b.n	800141e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800141c:	2301      	movs	r3, #1
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr
 800142a:	bf00      	nop
 800142c:	58026400 	.word	0x58026400
 8001430:	80000300 	.word	0x80000300

08001434 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
 800143c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800143e:	4906      	ldr	r1, [pc, #24]	@ (8001458 <HAL_HSEM_Release+0x24>)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	58026400 	.word	0x58026400

0800145c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b084      	sub	sp, #16
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001464:	4b29      	ldr	r3, [pc, #164]	@ (800150c <HAL_PWREx_ConfigSupply+0xb0>)
 8001466:	68db      	ldr	r3, [r3, #12]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	2b06      	cmp	r3, #6
 800146e:	d00a      	beq.n	8001486 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001470:	4b26      	ldr	r3, [pc, #152]	@ (800150c <HAL_PWREx_ConfigSupply+0xb0>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	429a      	cmp	r2, r3
 800147c:	d001      	beq.n	8001482 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e040      	b.n	8001504 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	e03e      	b.n	8001504 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001486:	4b21      	ldr	r3, [pc, #132]	@ (800150c <HAL_PWREx_ConfigSupply+0xb0>)
 8001488:	68db      	ldr	r3, [r3, #12]
 800148a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 800148e:	491f      	ldr	r1, [pc, #124]	@ (800150c <HAL_PWREx_ConfigSupply+0xb0>)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	4313      	orrs	r3, r2
 8001494:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001496:	f7ff fcaf 	bl	8000df8 <HAL_GetTick>
 800149a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800149c:	e009      	b.n	80014b2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800149e:	f7ff fcab 	bl	8000df8 <HAL_GetTick>
 80014a2:	4602      	mov	r2, r0
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	1ad3      	subs	r3, r2, r3
 80014a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014ac:	d901      	bls.n	80014b2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e028      	b.n	8001504 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80014b2:	4b16      	ldr	r3, [pc, #88]	@ (800150c <HAL_PWREx_ConfigSupply+0xb0>)
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80014ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80014be:	d1ee      	bne.n	800149e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2b1e      	cmp	r3, #30
 80014c4:	d008      	beq.n	80014d8 <HAL_PWREx_ConfigSupply+0x7c>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2b2e      	cmp	r3, #46	@ 0x2e
 80014ca:	d005      	beq.n	80014d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2b1d      	cmp	r3, #29
 80014d0:	d002      	beq.n	80014d8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	2b2d      	cmp	r3, #45	@ 0x2d
 80014d6:	d114      	bne.n	8001502 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80014d8:	f7ff fc8e 	bl	8000df8 <HAL_GetTick>
 80014dc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80014de:	e009      	b.n	80014f4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80014e0:	f7ff fc8a 	bl	8000df8 <HAL_GetTick>
 80014e4:	4602      	mov	r2, r0
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1ad3      	subs	r3, r2, r3
 80014ea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80014ee:	d901      	bls.n	80014f4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e007      	b.n	8001504 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80014f4:	4b05      	ldr	r3, [pc, #20]	@ (800150c <HAL_PWREx_ConfigSupply+0xb0>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001500:	d1ee      	bne.n	80014e0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3710      	adds	r7, #16
 8001508:	46bd      	mov	sp, r7
 800150a:	bd80      	pop	{r7, pc}
 800150c:	58024800 	.word	0x58024800

08001510 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b08c      	sub	sp, #48	@ 0x30
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d102      	bne.n	8001524 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	f000 bc48 	b.w	8001db4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b00      	cmp	r3, #0
 800152e:	f000 8088 	beq.w	8001642 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001532:	4b99      	ldr	r3, [pc, #612]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 8001534:	691b      	ldr	r3, [r3, #16]
 8001536:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800153a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800153c:	4b96      	ldr	r3, [pc, #600]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 800153e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001540:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001544:	2b10      	cmp	r3, #16
 8001546:	d007      	beq.n	8001558 <HAL_RCC_OscConfig+0x48>
 8001548:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800154a:	2b18      	cmp	r3, #24
 800154c:	d111      	bne.n	8001572 <HAL_RCC_OscConfig+0x62>
 800154e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001550:	f003 0303 	and.w	r3, r3, #3
 8001554:	2b02      	cmp	r3, #2
 8001556:	d10c      	bne.n	8001572 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001558:	4b8f      	ldr	r3, [pc, #572]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d06d      	beq.n	8001640 <HAL_RCC_OscConfig+0x130>
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d169      	bne.n	8001640 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	f000 bc21 	b.w	8001db4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800157a:	d106      	bne.n	800158a <HAL_RCC_OscConfig+0x7a>
 800157c:	4b86      	ldr	r3, [pc, #536]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a85      	ldr	r2, [pc, #532]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 8001582:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	e02e      	b.n	80015e8 <HAL_RCC_OscConfig+0xd8>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10c      	bne.n	80015ac <HAL_RCC_OscConfig+0x9c>
 8001592:	4b81      	ldr	r3, [pc, #516]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a80      	ldr	r2, [pc, #512]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 8001598:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800159c:	6013      	str	r3, [r2, #0]
 800159e:	4b7e      	ldr	r3, [pc, #504]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a7d      	ldr	r2, [pc, #500]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 80015a4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	e01d      	b.n	80015e8 <HAL_RCC_OscConfig+0xd8>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80015b4:	d10c      	bne.n	80015d0 <HAL_RCC_OscConfig+0xc0>
 80015b6:	4b78      	ldr	r3, [pc, #480]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	4a77      	ldr	r2, [pc, #476]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 80015bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015c0:	6013      	str	r3, [r2, #0]
 80015c2:	4b75      	ldr	r3, [pc, #468]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a74      	ldr	r2, [pc, #464]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 80015c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015cc:	6013      	str	r3, [r2, #0]
 80015ce:	e00b      	b.n	80015e8 <HAL_RCC_OscConfig+0xd8>
 80015d0:	4b71      	ldr	r3, [pc, #452]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a70      	ldr	r2, [pc, #448]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 80015d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015da:	6013      	str	r3, [r2, #0]
 80015dc:	4b6e      	ldr	r3, [pc, #440]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	4a6d      	ldr	r2, [pc, #436]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 80015e2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d013      	beq.n	8001618 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f0:	f7ff fc02 	bl	8000df8 <HAL_GetTick>
 80015f4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015f6:	e008      	b.n	800160a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f8:	f7ff fbfe 	bl	8000df8 <HAL_GetTick>
 80015fc:	4602      	mov	r2, r0
 80015fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b64      	cmp	r3, #100	@ 0x64
 8001604:	d901      	bls.n	800160a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001606:	2303      	movs	r3, #3
 8001608:	e3d4      	b.n	8001db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800160a:	4b63      	ldr	r3, [pc, #396]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d0f0      	beq.n	80015f8 <HAL_RCC_OscConfig+0xe8>
 8001616:	e014      	b.n	8001642 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001618:	f7ff fbee 	bl	8000df8 <HAL_GetTick>
 800161c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001620:	f7ff fbea 	bl	8000df8 <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b64      	cmp	r3, #100	@ 0x64
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e3c0      	b.n	8001db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001632:	4b59      	ldr	r3, [pc, #356]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1f0      	bne.n	8001620 <HAL_RCC_OscConfig+0x110>
 800163e:	e000      	b.n	8001642 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001640:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	2b00      	cmp	r3, #0
 800164c:	f000 80ca 	beq.w	80017e4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001650:	4b51      	ldr	r3, [pc, #324]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 8001652:	691b      	ldr	r3, [r3, #16]
 8001654:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001658:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800165a:	4b4f      	ldr	r3, [pc, #316]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 800165c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800165e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001660:	6a3b      	ldr	r3, [r7, #32]
 8001662:	2b00      	cmp	r3, #0
 8001664:	d007      	beq.n	8001676 <HAL_RCC_OscConfig+0x166>
 8001666:	6a3b      	ldr	r3, [r7, #32]
 8001668:	2b18      	cmp	r3, #24
 800166a:	d156      	bne.n	800171a <HAL_RCC_OscConfig+0x20a>
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f003 0303 	and.w	r3, r3, #3
 8001672:	2b00      	cmp	r3, #0
 8001674:	d151      	bne.n	800171a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001676:	4b48      	ldr	r3, [pc, #288]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0304 	and.w	r3, r3, #4
 800167e:	2b00      	cmp	r3, #0
 8001680:	d005      	beq.n	800168e <HAL_RCC_OscConfig+0x17e>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	68db      	ldr	r3, [r3, #12]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e392      	b.n	8001db4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800168e:	4b42      	ldr	r3, [pc, #264]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 0219 	bic.w	r2, r3, #25
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	68db      	ldr	r3, [r3, #12]
 800169a:	493f      	ldr	r1, [pc, #252]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 800169c:	4313      	orrs	r3, r2
 800169e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016a0:	f7ff fbaa 	bl	8000df8 <HAL_GetTick>
 80016a4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016a6:	e008      	b.n	80016ba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a8:	f7ff fba6 	bl	8000df8 <HAL_GetTick>
 80016ac:	4602      	mov	r2, r0
 80016ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b0:	1ad3      	subs	r3, r2, r3
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d901      	bls.n	80016ba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80016b6:	2303      	movs	r3, #3
 80016b8:	e37c      	b.n	8001db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80016ba:	4b37      	ldr	r3, [pc, #220]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d0f0      	beq.n	80016a8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c6:	f7ff fbc7 	bl	8000e58 <HAL_GetREVID>
 80016ca:	4603      	mov	r3, r0
 80016cc:	f241 0203 	movw	r2, #4099	@ 0x1003
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d817      	bhi.n	8001704 <HAL_RCC_OscConfig+0x1f4>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	691b      	ldr	r3, [r3, #16]
 80016d8:	2b40      	cmp	r3, #64	@ 0x40
 80016da:	d108      	bne.n	80016ee <HAL_RCC_OscConfig+0x1de>
 80016dc:	4b2e      	ldr	r3, [pc, #184]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80016e4:	4a2c      	ldr	r2, [pc, #176]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 80016e6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016ea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016ec:	e07a      	b.n	80017e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ee:	4b2a      	ldr	r3, [pc, #168]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	691b      	ldr	r3, [r3, #16]
 80016fa:	031b      	lsls	r3, r3, #12
 80016fc:	4926      	ldr	r1, [pc, #152]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 80016fe:	4313      	orrs	r3, r2
 8001700:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001702:	e06f      	b.n	80017e4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001704:	4b24      	ldr	r3, [pc, #144]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	691b      	ldr	r3, [r3, #16]
 8001710:	061b      	lsls	r3, r3, #24
 8001712:	4921      	ldr	r1, [pc, #132]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 8001714:	4313      	orrs	r3, r2
 8001716:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001718:	e064      	b.n	80017e4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	68db      	ldr	r3, [r3, #12]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d047      	beq.n	80017b2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001722:	4b1d      	ldr	r3, [pc, #116]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f023 0219 	bic.w	r2, r3, #25
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	68db      	ldr	r3, [r3, #12]
 800172e:	491a      	ldr	r1, [pc, #104]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 8001730:	4313      	orrs	r3, r2
 8001732:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001734:	f7ff fb60 	bl	8000df8 <HAL_GetTick>
 8001738:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800173c:	f7ff fb5c 	bl	8000df8 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e332      	b.n	8001db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800174e:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 0304 	and.w	r3, r3, #4
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f0      	beq.n	800173c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800175a:	f7ff fb7d 	bl	8000e58 <HAL_GetREVID>
 800175e:	4603      	mov	r3, r0
 8001760:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001764:	4293      	cmp	r3, r2
 8001766:	d819      	bhi.n	800179c <HAL_RCC_OscConfig+0x28c>
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691b      	ldr	r3, [r3, #16]
 800176c:	2b40      	cmp	r3, #64	@ 0x40
 800176e:	d108      	bne.n	8001782 <HAL_RCC_OscConfig+0x272>
 8001770:	4b09      	ldr	r3, [pc, #36]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001778:	4a07      	ldr	r2, [pc, #28]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 800177a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800177e:	6053      	str	r3, [r2, #4]
 8001780:	e030      	b.n	80017e4 <HAL_RCC_OscConfig+0x2d4>
 8001782:	4b05      	ldr	r3, [pc, #20]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	031b      	lsls	r3, r3, #12
 8001790:	4901      	ldr	r1, [pc, #4]	@ (8001798 <HAL_RCC_OscConfig+0x288>)
 8001792:	4313      	orrs	r3, r2
 8001794:	604b      	str	r3, [r1, #4]
 8001796:	e025      	b.n	80017e4 <HAL_RCC_OscConfig+0x2d4>
 8001798:	58024400 	.word	0x58024400
 800179c:	4b9a      	ldr	r3, [pc, #616]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	061b      	lsls	r3, r3, #24
 80017aa:	4997      	ldr	r1, [pc, #604]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	604b      	str	r3, [r1, #4]
 80017b0:	e018      	b.n	80017e4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017b2:	4b95      	ldr	r3, [pc, #596]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	4a94      	ldr	r2, [pc, #592]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 80017b8:	f023 0301 	bic.w	r3, r3, #1
 80017bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017be:	f7ff fb1b 	bl	8000df8 <HAL_GetTick>
 80017c2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017c4:	e008      	b.n	80017d8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017c6:	f7ff fb17 	bl	8000df8 <HAL_GetTick>
 80017ca:	4602      	mov	r2, r0
 80017cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ce:	1ad3      	subs	r3, r2, r3
 80017d0:	2b02      	cmp	r3, #2
 80017d2:	d901      	bls.n	80017d8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80017d4:	2303      	movs	r3, #3
 80017d6:	e2ed      	b.n	8001db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80017d8:	4b8b      	ldr	r3, [pc, #556]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0304 	and.w	r3, r3, #4
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d1f0      	bne.n	80017c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 0310 	and.w	r3, r3, #16
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	f000 80a9 	beq.w	8001944 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80017f2:	4b85      	ldr	r3, [pc, #532]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80017fa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80017fc:	4b82      	ldr	r3, [pc, #520]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 80017fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001800:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	2b08      	cmp	r3, #8
 8001806:	d007      	beq.n	8001818 <HAL_RCC_OscConfig+0x308>
 8001808:	69bb      	ldr	r3, [r7, #24]
 800180a:	2b18      	cmp	r3, #24
 800180c:	d13a      	bne.n	8001884 <HAL_RCC_OscConfig+0x374>
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	f003 0303 	and.w	r3, r3, #3
 8001814:	2b01      	cmp	r3, #1
 8001816:	d135      	bne.n	8001884 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001818:	4b7b      	ldr	r3, [pc, #492]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001820:	2b00      	cmp	r3, #0
 8001822:	d005      	beq.n	8001830 <HAL_RCC_OscConfig+0x320>
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69db      	ldr	r3, [r3, #28]
 8001828:	2b80      	cmp	r3, #128	@ 0x80
 800182a:	d001      	beq.n	8001830 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
 800182e:	e2c1      	b.n	8001db4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001830:	f7ff fb12 	bl	8000e58 <HAL_GetREVID>
 8001834:	4603      	mov	r3, r0
 8001836:	f241 0203 	movw	r2, #4099	@ 0x1003
 800183a:	4293      	cmp	r3, r2
 800183c:	d817      	bhi.n	800186e <HAL_RCC_OscConfig+0x35e>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6a1b      	ldr	r3, [r3, #32]
 8001842:	2b20      	cmp	r3, #32
 8001844:	d108      	bne.n	8001858 <HAL_RCC_OscConfig+0x348>
 8001846:	4b70      	ldr	r3, [pc, #448]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800184e:	4a6e      	ldr	r2, [pc, #440]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 8001850:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001854:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001856:	e075      	b.n	8001944 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001858:	4b6b      	ldr	r3, [pc, #428]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a1b      	ldr	r3, [r3, #32]
 8001864:	069b      	lsls	r3, r3, #26
 8001866:	4968      	ldr	r1, [pc, #416]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800186c:	e06a      	b.n	8001944 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800186e:	4b66      	ldr	r3, [pc, #408]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6a1b      	ldr	r3, [r3, #32]
 800187a:	061b      	lsls	r3, r3, #24
 800187c:	4962      	ldr	r1, [pc, #392]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 800187e:	4313      	orrs	r3, r2
 8001880:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001882:	e05f      	b.n	8001944 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d042      	beq.n	8001912 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800188c:	4b5e      	ldr	r3, [pc, #376]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a5d      	ldr	r2, [pc, #372]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 8001892:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001896:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001898:	f7ff faae 	bl	8000df8 <HAL_GetTick>
 800189c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800189e:	e008      	b.n	80018b2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80018a0:	f7ff faaa 	bl	8000df8 <HAL_GetTick>
 80018a4:	4602      	mov	r2, r0
 80018a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018a8:	1ad3      	subs	r3, r2, r3
 80018aa:	2b02      	cmp	r3, #2
 80018ac:	d901      	bls.n	80018b2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80018ae:	2303      	movs	r3, #3
 80018b0:	e280      	b.n	8001db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80018b2:	4b55      	ldr	r3, [pc, #340]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d0f0      	beq.n	80018a0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80018be:	f7ff facb 	bl	8000e58 <HAL_GetREVID>
 80018c2:	4603      	mov	r3, r0
 80018c4:	f241 0203 	movw	r2, #4099	@ 0x1003
 80018c8:	4293      	cmp	r3, r2
 80018ca:	d817      	bhi.n	80018fc <HAL_RCC_OscConfig+0x3ec>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	2b20      	cmp	r3, #32
 80018d2:	d108      	bne.n	80018e6 <HAL_RCC_OscConfig+0x3d6>
 80018d4:	4b4c      	ldr	r3, [pc, #304]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80018dc:	4a4a      	ldr	r2, [pc, #296]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 80018de:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80018e2:	6053      	str	r3, [r2, #4]
 80018e4:	e02e      	b.n	8001944 <HAL_RCC_OscConfig+0x434>
 80018e6:	4b48      	ldr	r3, [pc, #288]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	069b      	lsls	r3, r3, #26
 80018f4:	4944      	ldr	r1, [pc, #272]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 80018f6:	4313      	orrs	r3, r2
 80018f8:	604b      	str	r3, [r1, #4]
 80018fa:	e023      	b.n	8001944 <HAL_RCC_OscConfig+0x434>
 80018fc:	4b42      	ldr	r3, [pc, #264]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	6a1b      	ldr	r3, [r3, #32]
 8001908:	061b      	lsls	r3, r3, #24
 800190a:	493f      	ldr	r1, [pc, #252]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 800190c:	4313      	orrs	r3, r2
 800190e:	60cb      	str	r3, [r1, #12]
 8001910:	e018      	b.n	8001944 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001912:	4b3d      	ldr	r3, [pc, #244]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a3c      	ldr	r2, [pc, #240]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 8001918:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800191c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800191e:	f7ff fa6b 	bl	8000df8 <HAL_GetTick>
 8001922:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001924:	e008      	b.n	8001938 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001926:	f7ff fa67 	bl	8000df8 <HAL_GetTick>
 800192a:	4602      	mov	r2, r0
 800192c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	2b02      	cmp	r3, #2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e23d      	b.n	8001db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001938:	4b33      	ldr	r3, [pc, #204]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001940:	2b00      	cmp	r3, #0
 8001942:	d1f0      	bne.n	8001926 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0308 	and.w	r3, r3, #8
 800194c:	2b00      	cmp	r3, #0
 800194e:	d036      	beq.n	80019be <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	695b      	ldr	r3, [r3, #20]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d019      	beq.n	800198c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001958:	4b2b      	ldr	r3, [pc, #172]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 800195a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800195c:	4a2a      	ldr	r2, [pc, #168]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 800195e:	f043 0301 	orr.w	r3, r3, #1
 8001962:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001964:	f7ff fa48 	bl	8000df8 <HAL_GetTick>
 8001968:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800196c:	f7ff fa44 	bl	8000df8 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e21a      	b.n	8001db4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800197e:	4b22      	ldr	r3, [pc, #136]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 8001980:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d0f0      	beq.n	800196c <HAL_RCC_OscConfig+0x45c>
 800198a:	e018      	b.n	80019be <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800198c:	4b1e      	ldr	r3, [pc, #120]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 800198e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001990:	4a1d      	ldr	r2, [pc, #116]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 8001992:	f023 0301 	bic.w	r3, r3, #1
 8001996:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001998:	f7ff fa2e 	bl	8000df8 <HAL_GetTick>
 800199c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019a0:	f7ff fa2a 	bl	8000df8 <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e200      	b.n	8001db4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80019b2:	4b15      	ldr	r3, [pc, #84]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 80019b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019b6:	f003 0302 	and.w	r3, r3, #2
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 0320 	and.w	r3, r3, #32
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d039      	beq.n	8001a3e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d01c      	beq.n	8001a0c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80019d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 80019d8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80019dc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80019de:	f7ff fa0b 	bl	8000df8 <HAL_GetTick>
 80019e2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019e4:	e008      	b.n	80019f8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80019e6:	f7ff fa07 	bl	8000df8 <HAL_GetTick>
 80019ea:	4602      	mov	r2, r0
 80019ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019ee:	1ad3      	subs	r3, r2, r3
 80019f0:	2b02      	cmp	r3, #2
 80019f2:	d901      	bls.n	80019f8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80019f4:	2303      	movs	r3, #3
 80019f6:	e1dd      	b.n	8001db4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80019f8:	4b03      	ldr	r3, [pc, #12]	@ (8001a08 <HAL_RCC_OscConfig+0x4f8>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d0f0      	beq.n	80019e6 <HAL_RCC_OscConfig+0x4d6>
 8001a04:	e01b      	b.n	8001a3e <HAL_RCC_OscConfig+0x52e>
 8001a06:	bf00      	nop
 8001a08:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001a0c:	4b9b      	ldr	r3, [pc, #620]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	4a9a      	ldr	r2, [pc, #616]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001a12:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a16:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001a18:	f7ff f9ee 	bl	8000df8 <HAL_GetTick>
 8001a1c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001a20:	f7ff f9ea 	bl	8000df8 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e1c0      	b.n	8001db4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001a32:	4b92      	ldr	r3, [pc, #584]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f000 8081 	beq.w	8001b4e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001a4c:	4b8c      	ldr	r3, [pc, #560]	@ (8001c80 <HAL_RCC_OscConfig+0x770>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a8b      	ldr	r2, [pc, #556]	@ (8001c80 <HAL_RCC_OscConfig+0x770>)
 8001a52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a56:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001a58:	f7ff f9ce 	bl	8000df8 <HAL_GetTick>
 8001a5c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a5e:	e008      	b.n	8001a72 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a60:	f7ff f9ca 	bl	8000df8 <HAL_GetTick>
 8001a64:	4602      	mov	r2, r0
 8001a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a68:	1ad3      	subs	r3, r2, r3
 8001a6a:	2b64      	cmp	r3, #100	@ 0x64
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e1a0      	b.n	8001db4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001a72:	4b83      	ldr	r3, [pc, #524]	@ (8001c80 <HAL_RCC_OscConfig+0x770>)
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d0f0      	beq.n	8001a60 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d106      	bne.n	8001a94 <HAL_RCC_OscConfig+0x584>
 8001a86:	4b7d      	ldr	r3, [pc, #500]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001a88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a8a:	4a7c      	ldr	r2, [pc, #496]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001a8c:	f043 0301 	orr.w	r3, r3, #1
 8001a90:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a92:	e02d      	b.n	8001af0 <HAL_RCC_OscConfig+0x5e0>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	689b      	ldr	r3, [r3, #8]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10c      	bne.n	8001ab6 <HAL_RCC_OscConfig+0x5a6>
 8001a9c:	4b77      	ldr	r3, [pc, #476]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001a9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa0:	4a76      	ldr	r2, [pc, #472]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001aa2:	f023 0301 	bic.w	r3, r3, #1
 8001aa6:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aa8:	4b74      	ldr	r3, [pc, #464]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001aaa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aac:	4a73      	ldr	r2, [pc, #460]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001aae:	f023 0304 	bic.w	r3, r3, #4
 8001ab2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ab4:	e01c      	b.n	8001af0 <HAL_RCC_OscConfig+0x5e0>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	689b      	ldr	r3, [r3, #8]
 8001aba:	2b05      	cmp	r3, #5
 8001abc:	d10c      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x5c8>
 8001abe:	4b6f      	ldr	r3, [pc, #444]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001ac0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac2:	4a6e      	ldr	r2, [pc, #440]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001ac4:	f043 0304 	orr.w	r3, r3, #4
 8001ac8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aca:	4b6c      	ldr	r3, [pc, #432]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ace:	4a6b      	ldr	r2, [pc, #428]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001ad0:	f043 0301 	orr.w	r3, r3, #1
 8001ad4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ad6:	e00b      	b.n	8001af0 <HAL_RCC_OscConfig+0x5e0>
 8001ad8:	4b68      	ldr	r3, [pc, #416]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001ada:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001adc:	4a67      	ldr	r2, [pc, #412]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001ade:	f023 0301 	bic.w	r3, r3, #1
 8001ae2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ae4:	4b65      	ldr	r3, [pc, #404]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae8:	4a64      	ldr	r2, [pc, #400]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001aea:	f023 0304 	bic.w	r3, r3, #4
 8001aee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	689b      	ldr	r3, [r3, #8]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d015      	beq.n	8001b24 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af8:	f7ff f97e 	bl	8000df8 <HAL_GetTick>
 8001afc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001afe:	e00a      	b.n	8001b16 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b00:	f7ff f97a 	bl	8000df8 <HAL_GetTick>
 8001b04:	4602      	mov	r2, r0
 8001b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b08:	1ad3      	subs	r3, r2, r3
 8001b0a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d901      	bls.n	8001b16 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001b12:	2303      	movs	r3, #3
 8001b14:	e14e      	b.n	8001db4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001b16:	4b59      	ldr	r3, [pc, #356]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001b18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b1a:	f003 0302 	and.w	r3, r3, #2
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d0ee      	beq.n	8001b00 <HAL_RCC_OscConfig+0x5f0>
 8001b22:	e014      	b.n	8001b4e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b24:	f7ff f968 	bl	8000df8 <HAL_GetTick>
 8001b28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b2a:	e00a      	b.n	8001b42 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b2c:	f7ff f964 	bl	8000df8 <HAL_GetTick>
 8001b30:	4602      	mov	r2, r0
 8001b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b34:	1ad3      	subs	r3, r2, r3
 8001b36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e138      	b.n	8001db4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001b42:	4b4e      	ldr	r3, [pc, #312]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001b44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1ee      	bne.n	8001b2c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 812d 	beq.w	8001db2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001b58:	4b48      	ldr	r3, [pc, #288]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001b5a:	691b      	ldr	r3, [r3, #16]
 8001b5c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b60:	2b18      	cmp	r3, #24
 8001b62:	f000 80bd 	beq.w	8001ce0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	f040 809e 	bne.w	8001cac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b70:	4b42      	ldr	r3, [pc, #264]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a41      	ldr	r2, [pc, #260]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001b76:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001b7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7c:	f7ff f93c 	bl	8000df8 <HAL_GetTick>
 8001b80:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b82:	e008      	b.n	8001b96 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b84:	f7ff f938 	bl	8000df8 <HAL_GetTick>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b8c:	1ad3      	subs	r3, r2, r3
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d901      	bls.n	8001b96 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001b92:	2303      	movs	r3, #3
 8001b94:	e10e      	b.n	8001db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b96:	4b39      	ldr	r3, [pc, #228]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1f0      	bne.n	8001b84 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ba2:	4b36      	ldr	r3, [pc, #216]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001ba4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ba6:	4b37      	ldr	r3, [pc, #220]	@ (8001c84 <HAL_RCC_OscConfig+0x774>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	687a      	ldr	r2, [r7, #4]
 8001bac:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	4931      	ldr	r1, [pc, #196]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	628b      	str	r3, [r1, #40]	@ 0x28
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bca:	3b01      	subs	r3, #1
 8001bcc:	025b      	lsls	r3, r3, #9
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	431a      	orrs	r2, r3
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bd6:	3b01      	subs	r3, #1
 8001bd8:	041b      	lsls	r3, r3, #16
 8001bda:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001bde:	431a      	orrs	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001be4:	3b01      	subs	r3, #1
 8001be6:	061b      	lsls	r3, r3, #24
 8001be8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001bec:	4923      	ldr	r1, [pc, #140]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001bf2:	4b22      	ldr	r3, [pc, #136]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf6:	4a21      	ldr	r2, [pc, #132]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001bf8:	f023 0301 	bic.w	r3, r3, #1
 8001bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001bfe:	4b1f      	ldr	r3, [pc, #124]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001c00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001c02:	4b21      	ldr	r3, [pc, #132]	@ (8001c88 <HAL_RCC_OscConfig+0x778>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001c0a:	00d2      	lsls	r2, r2, #3
 8001c0c:	491b      	ldr	r1, [pc, #108]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001c12:	4b1a      	ldr	r3, [pc, #104]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001c14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c16:	f023 020c 	bic.w	r2, r3, #12
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c1e:	4917      	ldr	r1, [pc, #92]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001c20:	4313      	orrs	r3, r2
 8001c22:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001c24:	4b15      	ldr	r3, [pc, #84]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c28:	f023 0202 	bic.w	r2, r3, #2
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c30:	4912      	ldr	r1, [pc, #72]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001c32:	4313      	orrs	r3, r2
 8001c34:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001c36:	4b11      	ldr	r3, [pc, #68]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3a:	4a10      	ldr	r2, [pc, #64]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001c40:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001c42:	4b0e      	ldr	r3, [pc, #56]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c46:	4a0d      	ldr	r2, [pc, #52]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001c48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c4c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c52:	4a0a      	ldr	r2, [pc, #40]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c58:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001c5a:	4b08      	ldr	r3, [pc, #32]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c5e:	4a07      	ldr	r2, [pc, #28]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001c60:	f043 0301 	orr.w	r3, r3, #1
 8001c64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c66:	4b05      	ldr	r3, [pc, #20]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a04      	ldr	r2, [pc, #16]	@ (8001c7c <HAL_RCC_OscConfig+0x76c>)
 8001c6c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c72:	f7ff f8c1 	bl	8000df8 <HAL_GetTick>
 8001c76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c78:	e011      	b.n	8001c9e <HAL_RCC_OscConfig+0x78e>
 8001c7a:	bf00      	nop
 8001c7c:	58024400 	.word	0x58024400
 8001c80:	58024800 	.word	0x58024800
 8001c84:	fffffc0c 	.word	0xfffffc0c
 8001c88:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c8c:	f7ff f8b4 	bl	8000df8 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	2b02      	cmp	r3, #2
 8001c98:	d901      	bls.n	8001c9e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001c9a:	2303      	movs	r3, #3
 8001c9c:	e08a      	b.n	8001db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001c9e:	4b47      	ldr	r3, [pc, #284]	@ (8001dbc <HAL_RCC_OscConfig+0x8ac>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0f0      	beq.n	8001c8c <HAL_RCC_OscConfig+0x77c>
 8001caa:	e082      	b.n	8001db2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cac:	4b43      	ldr	r3, [pc, #268]	@ (8001dbc <HAL_RCC_OscConfig+0x8ac>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a42      	ldr	r2, [pc, #264]	@ (8001dbc <HAL_RCC_OscConfig+0x8ac>)
 8001cb2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001cb6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cb8:	f7ff f89e 	bl	8000df8 <HAL_GetTick>
 8001cbc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cbe:	e008      	b.n	8001cd2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cc0:	f7ff f89a 	bl	8000df8 <HAL_GetTick>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc8:	1ad3      	subs	r3, r2, r3
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d901      	bls.n	8001cd2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	e070      	b.n	8001db4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001cd2:	4b3a      	ldr	r3, [pc, #232]	@ (8001dbc <HAL_RCC_OscConfig+0x8ac>)
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1f0      	bne.n	8001cc0 <HAL_RCC_OscConfig+0x7b0>
 8001cde:	e068      	b.n	8001db2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001ce0:	4b36      	ldr	r3, [pc, #216]	@ (8001dbc <HAL_RCC_OscConfig+0x8ac>)
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001ce6:	4b35      	ldr	r3, [pc, #212]	@ (8001dbc <HAL_RCC_OscConfig+0x8ac>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d031      	beq.n	8001d58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	f003 0203 	and.w	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d12a      	bne.n	8001d58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	091b      	lsrs	r3, r3, #4
 8001d06:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d122      	bne.n	8001d58 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d1c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d11a      	bne.n	8001d58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	0a5b      	lsrs	r3, r3, #9
 8001d26:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d2e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d111      	bne.n	8001d58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	0c1b      	lsrs	r3, r3, #16
 8001d38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d40:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d108      	bne.n	8001d58 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	0e1b      	lsrs	r3, r3, #24
 8001d4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d52:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001d54:	429a      	cmp	r2, r3
 8001d56:	d001      	beq.n	8001d5c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e02b      	b.n	8001db4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001d5c:	4b17      	ldr	r3, [pc, #92]	@ (8001dbc <HAL_RCC_OscConfig+0x8ac>)
 8001d5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001d60:	08db      	lsrs	r3, r3, #3
 8001d62:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001d66:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001d6c:	693a      	ldr	r2, [r7, #16]
 8001d6e:	429a      	cmp	r2, r3
 8001d70:	d01f      	beq.n	8001db2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001d72:	4b12      	ldr	r3, [pc, #72]	@ (8001dbc <HAL_RCC_OscConfig+0x8ac>)
 8001d74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d76:	4a11      	ldr	r2, [pc, #68]	@ (8001dbc <HAL_RCC_OscConfig+0x8ac>)
 8001d78:	f023 0301 	bic.w	r3, r3, #1
 8001d7c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d7e:	f7ff f83b 	bl	8000df8 <HAL_GetTick>
 8001d82:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001d84:	bf00      	nop
 8001d86:	f7ff f837 	bl	8000df8 <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d0f9      	beq.n	8001d86 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001d92:	4b0a      	ldr	r3, [pc, #40]	@ (8001dbc <HAL_RCC_OscConfig+0x8ac>)
 8001d94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d96:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc0 <HAL_RCC_OscConfig+0x8b0>)
 8001d98:	4013      	ands	r3, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d9e:	00d2      	lsls	r2, r2, #3
 8001da0:	4906      	ldr	r1, [pc, #24]	@ (8001dbc <HAL_RCC_OscConfig+0x8ac>)
 8001da2:	4313      	orrs	r3, r2
 8001da4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001da6:	4b05      	ldr	r3, [pc, #20]	@ (8001dbc <HAL_RCC_OscConfig+0x8ac>)
 8001da8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001daa:	4a04      	ldr	r2, [pc, #16]	@ (8001dbc <HAL_RCC_OscConfig+0x8ac>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3730      	adds	r7, #48	@ 0x30
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	58024400 	.word	0x58024400
 8001dc0:	ffff0007 	.word	0xffff0007

08001dc4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
 8001dcc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d101      	bne.n	8001dd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	e19c      	b.n	8002112 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd8:	4b8a      	ldr	r3, [pc, #552]	@ (8002004 <HAL_RCC_ClockConfig+0x240>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	683a      	ldr	r2, [r7, #0]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d910      	bls.n	8001e08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de6:	4b87      	ldr	r3, [pc, #540]	@ (8002004 <HAL_RCC_ClockConfig+0x240>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f023 020f 	bic.w	r2, r3, #15
 8001dee:	4985      	ldr	r1, [pc, #532]	@ (8002004 <HAL_RCC_ClockConfig+0x240>)
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df6:	4b83      	ldr	r3, [pc, #524]	@ (8002004 <HAL_RCC_ClockConfig+0x240>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	683a      	ldr	r2, [r7, #0]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d001      	beq.n	8001e08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e184      	b.n	8002112 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f003 0304 	and.w	r3, r3, #4
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d010      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	691a      	ldr	r2, [r3, #16]
 8001e18:	4b7b      	ldr	r3, [pc, #492]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d908      	bls.n	8001e36 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001e24:	4b78      	ldr	r3, [pc, #480]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	691b      	ldr	r3, [r3, #16]
 8001e30:	4975      	ldr	r1, [pc, #468]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001e32:	4313      	orrs	r3, r2
 8001e34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0308 	and.w	r3, r3, #8
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d010      	beq.n	8001e64 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695a      	ldr	r2, [r3, #20]
 8001e46:	4b70      	ldr	r3, [pc, #448]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001e48:	69db      	ldr	r3, [r3, #28]
 8001e4a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d908      	bls.n	8001e64 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001e52:	4b6d      	ldr	r3, [pc, #436]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	496a      	ldr	r1, [pc, #424]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f003 0310 	and.w	r3, r3, #16
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d010      	beq.n	8001e92 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	699a      	ldr	r2, [r3, #24]
 8001e74:	4b64      	ldr	r3, [pc, #400]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d908      	bls.n	8001e92 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001e80:	4b61      	ldr	r3, [pc, #388]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	699b      	ldr	r3, [r3, #24]
 8001e8c:	495e      	ldr	r1, [pc, #376]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0320 	and.w	r3, r3, #32
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d010      	beq.n	8001ec0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	69da      	ldr	r2, [r3, #28]
 8001ea2:	4b59      	ldr	r3, [pc, #356]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d908      	bls.n	8001ec0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001eae:	4b56      	ldr	r3, [pc, #344]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001eb0:	6a1b      	ldr	r3, [r3, #32]
 8001eb2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	69db      	ldr	r3, [r3, #28]
 8001eba:	4953      	ldr	r1, [pc, #332]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f003 0302 	and.w	r3, r3, #2
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d010      	beq.n	8001eee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	68da      	ldr	r2, [r3, #12]
 8001ed0:	4b4d      	ldr	r3, [pc, #308]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	f003 030f 	and.w	r3, r3, #15
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d908      	bls.n	8001eee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001edc:	4b4a      	ldr	r3, [pc, #296]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	f023 020f 	bic.w	r2, r3, #15
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	4947      	ldr	r1, [pc, #284]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0301 	and.w	r3, r3, #1
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d055      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001efa:	4b43      	ldr	r3, [pc, #268]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001efc:	699b      	ldr	r3, [r3, #24]
 8001efe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	4940      	ldr	r1, [pc, #256]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d107      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001f14:	4b3c      	ldr	r3, [pc, #240]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d121      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0f6      	b.n	8002112 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d107      	bne.n	8001f3c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001f2c:	4b36      	ldr	r3, [pc, #216]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d115      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e0ea      	b.n	8002112 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d107      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001f44:	4b30      	ldr	r3, [pc, #192]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d109      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	e0de      	b.n	8002112 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001f54:	4b2c      	ldr	r3, [pc, #176]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0304 	and.w	r3, r3, #4
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d101      	bne.n	8001f64 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001f60:	2301      	movs	r3, #1
 8001f62:	e0d6      	b.n	8002112 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f64:	4b28      	ldr	r3, [pc, #160]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	f023 0207 	bic.w	r2, r3, #7
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	4925      	ldr	r1, [pc, #148]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f76:	f7fe ff3f 	bl	8000df8 <HAL_GetTick>
 8001f7a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f7e:	f7fe ff3b 	bl	8000df8 <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	1ad3      	subs	r3, r2, r3
 8001f88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d901      	bls.n	8001f94 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001f90:	2303      	movs	r3, #3
 8001f92:	e0be      	b.n	8002112 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f94:	4b1c      	ldr	r3, [pc, #112]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001f96:	691b      	ldr	r3, [r3, #16]
 8001f98:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d1eb      	bne.n	8001f7e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d010      	beq.n	8001fd4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	4b14      	ldr	r3, [pc, #80]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001fb8:	699b      	ldr	r3, [r3, #24]
 8001fba:	f003 030f 	and.w	r3, r3, #15
 8001fbe:	429a      	cmp	r2, r3
 8001fc0:	d208      	bcs.n	8001fd4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fc2:	4b11      	ldr	r3, [pc, #68]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001fc4:	699b      	ldr	r3, [r3, #24]
 8001fc6:	f023 020f 	bic.w	r2, r3, #15
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	490e      	ldr	r1, [pc, #56]	@ (8002008 <HAL_RCC_ClockConfig+0x244>)
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fd4:	4b0b      	ldr	r3, [pc, #44]	@ (8002004 <HAL_RCC_ClockConfig+0x240>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 030f 	and.w	r3, r3, #15
 8001fdc:	683a      	ldr	r2, [r7, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d214      	bcs.n	800200c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fe2:	4b08      	ldr	r3, [pc, #32]	@ (8002004 <HAL_RCC_ClockConfig+0x240>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f023 020f 	bic.w	r2, r3, #15
 8001fea:	4906      	ldr	r1, [pc, #24]	@ (8002004 <HAL_RCC_ClockConfig+0x240>)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ff2:	4b04      	ldr	r3, [pc, #16]	@ (8002004 <HAL_RCC_ClockConfig+0x240>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	f003 030f 	and.w	r3, r3, #15
 8001ffa:	683a      	ldr	r2, [r7, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d005      	beq.n	800200c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e086      	b.n	8002112 <HAL_RCC_ClockConfig+0x34e>
 8002004:	52002000 	.word	0x52002000
 8002008:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	d010      	beq.n	800203a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	4b3f      	ldr	r3, [pc, #252]	@ (800211c <HAL_RCC_ClockConfig+0x358>)
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002024:	429a      	cmp	r2, r3
 8002026:	d208      	bcs.n	800203a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002028:	4b3c      	ldr	r3, [pc, #240]	@ (800211c <HAL_RCC_ClockConfig+0x358>)
 800202a:	699b      	ldr	r3, [r3, #24]
 800202c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	4939      	ldr	r1, [pc, #228]	@ (800211c <HAL_RCC_ClockConfig+0x358>)
 8002036:	4313      	orrs	r3, r2
 8002038:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0308 	and.w	r3, r3, #8
 8002042:	2b00      	cmp	r3, #0
 8002044:	d010      	beq.n	8002068 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695a      	ldr	r2, [r3, #20]
 800204a:	4b34      	ldr	r3, [pc, #208]	@ (800211c <HAL_RCC_ClockConfig+0x358>)
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002052:	429a      	cmp	r2, r3
 8002054:	d208      	bcs.n	8002068 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002056:	4b31      	ldr	r3, [pc, #196]	@ (800211c <HAL_RCC_ClockConfig+0x358>)
 8002058:	69db      	ldr	r3, [r3, #28]
 800205a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	695b      	ldr	r3, [r3, #20]
 8002062:	492e      	ldr	r1, [pc, #184]	@ (800211c <HAL_RCC_ClockConfig+0x358>)
 8002064:	4313      	orrs	r3, r2
 8002066:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0310 	and.w	r3, r3, #16
 8002070:	2b00      	cmp	r3, #0
 8002072:	d010      	beq.n	8002096 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699a      	ldr	r2, [r3, #24]
 8002078:	4b28      	ldr	r3, [pc, #160]	@ (800211c <HAL_RCC_ClockConfig+0x358>)
 800207a:	69db      	ldr	r3, [r3, #28]
 800207c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002080:	429a      	cmp	r2, r3
 8002082:	d208      	bcs.n	8002096 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002084:	4b25      	ldr	r3, [pc, #148]	@ (800211c <HAL_RCC_ClockConfig+0x358>)
 8002086:	69db      	ldr	r3, [r3, #28]
 8002088:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	4922      	ldr	r1, [pc, #136]	@ (800211c <HAL_RCC_ClockConfig+0x358>)
 8002092:	4313      	orrs	r3, r2
 8002094:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f003 0320 	and.w	r3, r3, #32
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d010      	beq.n	80020c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	69da      	ldr	r2, [r3, #28]
 80020a6:	4b1d      	ldr	r3, [pc, #116]	@ (800211c <HAL_RCC_ClockConfig+0x358>)
 80020a8:	6a1b      	ldr	r3, [r3, #32]
 80020aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80020ae:	429a      	cmp	r2, r3
 80020b0:	d208      	bcs.n	80020c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80020b2:	4b1a      	ldr	r3, [pc, #104]	@ (800211c <HAL_RCC_ClockConfig+0x358>)
 80020b4:	6a1b      	ldr	r3, [r3, #32]
 80020b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69db      	ldr	r3, [r3, #28]
 80020be:	4917      	ldr	r1, [pc, #92]	@ (800211c <HAL_RCC_ClockConfig+0x358>)
 80020c0:	4313      	orrs	r3, r2
 80020c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80020c4:	f000 f834 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 80020c8:	4602      	mov	r2, r0
 80020ca:	4b14      	ldr	r3, [pc, #80]	@ (800211c <HAL_RCC_ClockConfig+0x358>)
 80020cc:	699b      	ldr	r3, [r3, #24]
 80020ce:	0a1b      	lsrs	r3, r3, #8
 80020d0:	f003 030f 	and.w	r3, r3, #15
 80020d4:	4912      	ldr	r1, [pc, #72]	@ (8002120 <HAL_RCC_ClockConfig+0x35c>)
 80020d6:	5ccb      	ldrb	r3, [r1, r3]
 80020d8:	f003 031f 	and.w	r3, r3, #31
 80020dc:	fa22 f303 	lsr.w	r3, r2, r3
 80020e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80020e2:	4b0e      	ldr	r3, [pc, #56]	@ (800211c <HAL_RCC_ClockConfig+0x358>)
 80020e4:	699b      	ldr	r3, [r3, #24]
 80020e6:	f003 030f 	and.w	r3, r3, #15
 80020ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002120 <HAL_RCC_ClockConfig+0x35c>)
 80020ec:	5cd3      	ldrb	r3, [r2, r3]
 80020ee:	f003 031f 	and.w	r3, r3, #31
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	fa22 f303 	lsr.w	r3, r2, r3
 80020f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002124 <HAL_RCC_ClockConfig+0x360>)
 80020fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80020fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002128 <HAL_RCC_ClockConfig+0x364>)
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002102:	4b0a      	ldr	r3, [pc, #40]	@ (800212c <HAL_RCC_ClockConfig+0x368>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe fe2c 	bl	8000d64 <HAL_InitTick>
 800210c:	4603      	mov	r3, r0
 800210e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002110:	7bfb      	ldrb	r3, [r7, #15]
}
 8002112:	4618      	mov	r0, r3
 8002114:	3718      	adds	r7, #24
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}
 800211a:	bf00      	nop
 800211c:	58024400 	.word	0x58024400
 8002120:	0800535c 	.word	0x0800535c
 8002124:	24000004 	.word	0x24000004
 8002128:	24000000 	.word	0x24000000
 800212c:	24000008 	.word	0x24000008

08002130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002130:	b480      	push	{r7}
 8002132:	b089      	sub	sp, #36	@ 0x24
 8002134:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002136:	4bb3      	ldr	r3, [pc, #716]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800213e:	2b18      	cmp	r3, #24
 8002140:	f200 8155 	bhi.w	80023ee <HAL_RCC_GetSysClockFreq+0x2be>
 8002144:	a201      	add	r2, pc, #4	@ (adr r2, 800214c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800214a:	bf00      	nop
 800214c:	080021b1 	.word	0x080021b1
 8002150:	080023ef 	.word	0x080023ef
 8002154:	080023ef 	.word	0x080023ef
 8002158:	080023ef 	.word	0x080023ef
 800215c:	080023ef 	.word	0x080023ef
 8002160:	080023ef 	.word	0x080023ef
 8002164:	080023ef 	.word	0x080023ef
 8002168:	080023ef 	.word	0x080023ef
 800216c:	080021d7 	.word	0x080021d7
 8002170:	080023ef 	.word	0x080023ef
 8002174:	080023ef 	.word	0x080023ef
 8002178:	080023ef 	.word	0x080023ef
 800217c:	080023ef 	.word	0x080023ef
 8002180:	080023ef 	.word	0x080023ef
 8002184:	080023ef 	.word	0x080023ef
 8002188:	080023ef 	.word	0x080023ef
 800218c:	080021dd 	.word	0x080021dd
 8002190:	080023ef 	.word	0x080023ef
 8002194:	080023ef 	.word	0x080023ef
 8002198:	080023ef 	.word	0x080023ef
 800219c:	080023ef 	.word	0x080023ef
 80021a0:	080023ef 	.word	0x080023ef
 80021a4:	080023ef 	.word	0x080023ef
 80021a8:	080023ef 	.word	0x080023ef
 80021ac:	080021e3 	.word	0x080021e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80021b0:	4b94      	ldr	r3, [pc, #592]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f003 0320 	and.w	r3, r3, #32
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d009      	beq.n	80021d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80021bc:	4b91      	ldr	r3, [pc, #580]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	08db      	lsrs	r3, r3, #3
 80021c2:	f003 0303 	and.w	r3, r3, #3
 80021c6:	4a90      	ldr	r2, [pc, #576]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021c8:	fa22 f303 	lsr.w	r3, r2, r3
 80021cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80021ce:	e111      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80021d0:	4b8d      	ldr	r3, [pc, #564]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80021d2:	61bb      	str	r3, [r7, #24]
      break;
 80021d4:	e10e      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80021d6:	4b8d      	ldr	r3, [pc, #564]	@ (800240c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80021d8:	61bb      	str	r3, [r7, #24]
      break;
 80021da:	e10b      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80021dc:	4b8c      	ldr	r3, [pc, #560]	@ (8002410 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80021de:	61bb      	str	r3, [r7, #24]
      break;
 80021e0:	e108      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80021e2:	4b88      	ldr	r3, [pc, #544]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021e6:	f003 0303 	and.w	r3, r3, #3
 80021ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80021ec:	4b85      	ldr	r3, [pc, #532]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80021f0:	091b      	lsrs	r3, r3, #4
 80021f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80021f8:	4b82      	ldr	r3, [pc, #520]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002202:	4b80      	ldr	r3, [pc, #512]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002204:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002206:	08db      	lsrs	r3, r3, #3
 8002208:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	fb02 f303 	mul.w	r3, r2, r3
 8002212:	ee07 3a90 	vmov	s15, r3
 8002216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800221a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	2b00      	cmp	r3, #0
 8002222:	f000 80e1 	beq.w	80023e8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002226:	697b      	ldr	r3, [r7, #20]
 8002228:	2b02      	cmp	r3, #2
 800222a:	f000 8083 	beq.w	8002334 <HAL_RCC_GetSysClockFreq+0x204>
 800222e:	697b      	ldr	r3, [r7, #20]
 8002230:	2b02      	cmp	r3, #2
 8002232:	f200 80a1 	bhi.w	8002378 <HAL_RCC_GetSysClockFreq+0x248>
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <HAL_RCC_GetSysClockFreq+0x114>
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	2b01      	cmp	r3, #1
 8002240:	d056      	beq.n	80022f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002242:	e099      	b.n	8002378 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002244:	4b6f      	ldr	r3, [pc, #444]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0320 	and.w	r3, r3, #32
 800224c:	2b00      	cmp	r3, #0
 800224e:	d02d      	beq.n	80022ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002250:	4b6c      	ldr	r3, [pc, #432]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	08db      	lsrs	r3, r3, #3
 8002256:	f003 0303 	and.w	r3, r3, #3
 800225a:	4a6b      	ldr	r2, [pc, #428]	@ (8002408 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800225c:	fa22 f303 	lsr.w	r3, r2, r3
 8002260:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	ee07 3a90 	vmov	s15, r3
 8002268:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	ee07 3a90 	vmov	s15, r3
 8002272:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002276:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800227a:	4b62      	ldr	r3, [pc, #392]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800227c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800227e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002282:	ee07 3a90 	vmov	s15, r3
 8002286:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800228a:	ed97 6a02 	vldr	s12, [r7, #8]
 800228e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002414 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002292:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002296:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800229a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800229e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80022aa:	e087      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	ee07 3a90 	vmov	s15, r3
 80022b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002418 <HAL_RCC_GetSysClockFreq+0x2e8>
 80022ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80022be:	4b51      	ldr	r3, [pc, #324]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022c6:	ee07 3a90 	vmov	s15, r3
 80022ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80022ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80022d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002414 <HAL_RCC_GetSysClockFreq+0x2e4>
 80022d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80022da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80022de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80022e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80022e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80022ee:	e065      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	ee07 3a90 	vmov	s15, r3
 80022f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800241c <HAL_RCC_GetSysClockFreq+0x2ec>
 80022fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002302:	4b40      	ldr	r3, [pc, #256]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002304:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002306:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800230a:	ee07 3a90 	vmov	s15, r3
 800230e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002312:	ed97 6a02 	vldr	s12, [r7, #8]
 8002316:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002414 <HAL_RCC_GetSysClockFreq+0x2e4>
 800231a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800231e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002322:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002326:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800232a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800232e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002332:	e043      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800233e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002420 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002342:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002346:	4b2f      	ldr	r3, [pc, #188]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800234a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800234e:	ee07 3a90 	vmov	s15, r3
 8002352:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002356:	ed97 6a02 	vldr	s12, [r7, #8]
 800235a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002414 <HAL_RCC_GetSysClockFreq+0x2e4>
 800235e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002362:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002366:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800236a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800236e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002372:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002376:	e021      	b.n	80023bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002378:	693b      	ldr	r3, [r7, #16]
 800237a:	ee07 3a90 	vmov	s15, r3
 800237e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002382:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800241c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002386:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800238a:	4b1e      	ldr	r3, [pc, #120]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002392:	ee07 3a90 	vmov	s15, r3
 8002396:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800239a:	ed97 6a02 	vldr	s12, [r7, #8]
 800239e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002414 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80023bc:	4b11      	ldr	r3, [pc, #68]	@ (8002404 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c0:	0a5b      	lsrs	r3, r3, #9
 80023c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80023c6:	3301      	adds	r3, #1
 80023c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	ee07 3a90 	vmov	s15, r3
 80023d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80023d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023e0:	ee17 3a90 	vmov	r3, s15
 80023e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80023e6:	e005      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80023e8:	2300      	movs	r3, #0
 80023ea:	61bb      	str	r3, [r7, #24]
      break;
 80023ec:	e002      	b.n	80023f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80023ee:	4b07      	ldr	r3, [pc, #28]	@ (800240c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80023f0:	61bb      	str	r3, [r7, #24]
      break;
 80023f2:	bf00      	nop
  }

  return sysclockfreq;
 80023f4:	69bb      	ldr	r3, [r7, #24]
}
 80023f6:	4618      	mov	r0, r3
 80023f8:	3724      	adds	r7, #36	@ 0x24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	58024400 	.word	0x58024400
 8002408:	03d09000 	.word	0x03d09000
 800240c:	003d0900 	.word	0x003d0900
 8002410:	017d7840 	.word	0x017d7840
 8002414:	46000000 	.word	0x46000000
 8002418:	4c742400 	.word	0x4c742400
 800241c:	4a742400 	.word	0x4a742400
 8002420:	4bbebc20 	.word	0x4bbebc20

08002424 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b082      	sub	sp, #8
 8002428:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800242a:	f7ff fe81 	bl	8002130 <HAL_RCC_GetSysClockFreq>
 800242e:	4602      	mov	r2, r0
 8002430:	4b10      	ldr	r3, [pc, #64]	@ (8002474 <HAL_RCC_GetHCLKFreq+0x50>)
 8002432:	699b      	ldr	r3, [r3, #24]
 8002434:	0a1b      	lsrs	r3, r3, #8
 8002436:	f003 030f 	and.w	r3, r3, #15
 800243a:	490f      	ldr	r1, [pc, #60]	@ (8002478 <HAL_RCC_GetHCLKFreq+0x54>)
 800243c:	5ccb      	ldrb	r3, [r1, r3]
 800243e:	f003 031f 	and.w	r3, r3, #31
 8002442:	fa22 f303 	lsr.w	r3, r2, r3
 8002446:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002448:	4b0a      	ldr	r3, [pc, #40]	@ (8002474 <HAL_RCC_GetHCLKFreq+0x50>)
 800244a:	699b      	ldr	r3, [r3, #24]
 800244c:	f003 030f 	and.w	r3, r3, #15
 8002450:	4a09      	ldr	r2, [pc, #36]	@ (8002478 <HAL_RCC_GetHCLKFreq+0x54>)
 8002452:	5cd3      	ldrb	r3, [r2, r3]
 8002454:	f003 031f 	and.w	r3, r3, #31
 8002458:	687a      	ldr	r2, [r7, #4]
 800245a:	fa22 f303 	lsr.w	r3, r2, r3
 800245e:	4a07      	ldr	r2, [pc, #28]	@ (800247c <HAL_RCC_GetHCLKFreq+0x58>)
 8002460:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002462:	4a07      	ldr	r2, [pc, #28]	@ (8002480 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002468:	4b04      	ldr	r3, [pc, #16]	@ (800247c <HAL_RCC_GetHCLKFreq+0x58>)
 800246a:	681b      	ldr	r3, [r3, #0]
}
 800246c:	4618      	mov	r0, r3
 800246e:	3708      	adds	r7, #8
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	58024400 	.word	0x58024400
 8002478:	0800535c 	.word	0x0800535c
 800247c:	24000004 	.word	0x24000004
 8002480:	24000000 	.word	0x24000000

08002484 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002488:	f7ff ffcc 	bl	8002424 <HAL_RCC_GetHCLKFreq>
 800248c:	4602      	mov	r2, r0
 800248e:	4b06      	ldr	r3, [pc, #24]	@ (80024a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002490:	69db      	ldr	r3, [r3, #28]
 8002492:	091b      	lsrs	r3, r3, #4
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	4904      	ldr	r1, [pc, #16]	@ (80024ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800249a:	5ccb      	ldrb	r3, [r1, r3]
 800249c:	f003 031f 	and.w	r3, r3, #31
 80024a0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	58024400 	.word	0x58024400
 80024ac:	0800535c 	.word	0x0800535c

080024b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80024b4:	f7ff ffb6 	bl	8002424 <HAL_RCC_GetHCLKFreq>
 80024b8:	4602      	mov	r2, r0
 80024ba:	4b06      	ldr	r3, [pc, #24]	@ (80024d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80024bc:	69db      	ldr	r3, [r3, #28]
 80024be:	0a1b      	lsrs	r3, r3, #8
 80024c0:	f003 0307 	and.w	r3, r3, #7
 80024c4:	4904      	ldr	r1, [pc, #16]	@ (80024d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80024c6:	5ccb      	ldrb	r3, [r1, r3]
 80024c8:	f003 031f 	and.w	r3, r3, #31
 80024cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	58024400 	.word	0x58024400
 80024d8:	0800535c 	.word	0x0800535c

080024dc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80024e0:	b0ca      	sub	sp, #296	@ 0x128
 80024e2:	af00      	add	r7, sp, #0
 80024e4:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80024e8:	2300      	movs	r3, #0
 80024ea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024ee:	2300      	movs	r3, #0
 80024f0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80024f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80024f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024fc:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8002500:	2500      	movs	r5, #0
 8002502:	ea54 0305 	orrs.w	r3, r4, r5
 8002506:	d049      	beq.n	800259c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002508:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800250c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800250e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002512:	d02f      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002514:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002518:	d828      	bhi.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800251a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800251e:	d01a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002520:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002524:	d822      	bhi.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002526:	2b00      	cmp	r3, #0
 8002528:	d003      	beq.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800252a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800252e:	d007      	beq.n	8002540 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002530:	e01c      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002532:	4bb8      	ldr	r3, [pc, #736]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002534:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002536:	4ab7      	ldr	r2, [pc, #732]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002538:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800253c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800253e:	e01a      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002540:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002544:	3308      	adds	r3, #8
 8002546:	2102      	movs	r1, #2
 8002548:	4618      	mov	r0, r3
 800254a:	f001 fc8f 	bl	8003e6c <RCCEx_PLL2_Config>
 800254e:	4603      	mov	r3, r0
 8002550:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002554:	e00f      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002556:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800255a:	3328      	adds	r3, #40	@ 0x28
 800255c:	2102      	movs	r1, #2
 800255e:	4618      	mov	r0, r3
 8002560:	f001 fd36 	bl	8003fd0 <RCCEx_PLL3_Config>
 8002564:	4603      	mov	r3, r0
 8002566:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800256a:	e004      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002572:	e000      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002574:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002576:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800257a:	2b00      	cmp	r3, #0
 800257c:	d10a      	bne.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800257e:	4ba5      	ldr	r3, [pc, #660]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002580:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002582:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800258a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800258c:	4aa1      	ldr	r2, [pc, #644]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800258e:	430b      	orrs	r3, r1
 8002590:	6513      	str	r3, [r2, #80]	@ 0x50
 8002592:	e003      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002594:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002598:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800259c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80025a8:	f04f 0900 	mov.w	r9, #0
 80025ac:	ea58 0309 	orrs.w	r3, r8, r9
 80025b0:	d047      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80025b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025b8:	2b04      	cmp	r3, #4
 80025ba:	d82a      	bhi.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80025bc:	a201      	add	r2, pc, #4	@ (adr r2, 80025c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80025be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025c2:	bf00      	nop
 80025c4:	080025d9 	.word	0x080025d9
 80025c8:	080025e7 	.word	0x080025e7
 80025cc:	080025fd 	.word	0x080025fd
 80025d0:	0800261b 	.word	0x0800261b
 80025d4:	0800261b 	.word	0x0800261b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80025d8:	4b8e      	ldr	r3, [pc, #568]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025dc:	4a8d      	ldr	r2, [pc, #564]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80025de:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025e2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025e4:	e01a      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80025e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80025ea:	3308      	adds	r3, #8
 80025ec:	2100      	movs	r1, #0
 80025ee:	4618      	mov	r0, r3
 80025f0:	f001 fc3c 	bl	8003e6c <RCCEx_PLL2_Config>
 80025f4:	4603      	mov	r3, r0
 80025f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80025fa:	e00f      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80025fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002600:	3328      	adds	r3, #40	@ 0x28
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f001 fce3 	bl	8003fd0 <RCCEx_PLL3_Config>
 800260a:	4603      	mov	r3, r0
 800260c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002610:	e004      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002618:	e000      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800261a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800261c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002620:	2b00      	cmp	r3, #0
 8002622:	d10a      	bne.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002624:	4b7b      	ldr	r3, [pc, #492]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002626:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002628:	f023 0107 	bic.w	r1, r3, #7
 800262c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002630:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002632:	4a78      	ldr	r2, [pc, #480]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002634:	430b      	orrs	r3, r1
 8002636:	6513      	str	r3, [r2, #80]	@ 0x50
 8002638:	e003      	b.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800263a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800263e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8002642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800264e:	f04f 0b00 	mov.w	fp, #0
 8002652:	ea5a 030b 	orrs.w	r3, sl, fp
 8002656:	d04c      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002658:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800265c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002662:	d030      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002664:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002668:	d829      	bhi.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800266a:	2bc0      	cmp	r3, #192	@ 0xc0
 800266c:	d02d      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800266e:	2bc0      	cmp	r3, #192	@ 0xc0
 8002670:	d825      	bhi.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002672:	2b80      	cmp	r3, #128	@ 0x80
 8002674:	d018      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002676:	2b80      	cmp	r3, #128	@ 0x80
 8002678:	d821      	bhi.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800267a:	2b00      	cmp	r3, #0
 800267c:	d002      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800267e:	2b40      	cmp	r3, #64	@ 0x40
 8002680:	d007      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8002682:	e01c      	b.n	80026be <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002684:	4b63      	ldr	r3, [pc, #396]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002688:	4a62      	ldr	r2, [pc, #392]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800268a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800268e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002690:	e01c      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002692:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002696:	3308      	adds	r3, #8
 8002698:	2100      	movs	r1, #0
 800269a:	4618      	mov	r0, r3
 800269c:	f001 fbe6 	bl	8003e6c <RCCEx_PLL2_Config>
 80026a0:	4603      	mov	r3, r0
 80026a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80026a6:	e011      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026ac:	3328      	adds	r3, #40	@ 0x28
 80026ae:	2100      	movs	r1, #0
 80026b0:	4618      	mov	r0, r3
 80026b2:	f001 fc8d 	bl	8003fd0 <RCCEx_PLL3_Config>
 80026b6:	4603      	mov	r3, r0
 80026b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80026bc:	e006      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80026c4:	e002      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80026c6:	bf00      	nop
 80026c8:	e000      	b.n	80026cc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80026ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80026cc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10a      	bne.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80026d4:	4b4f      	ldr	r3, [pc, #316]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80026d8:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80026dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026e2:	4a4c      	ldr	r2, [pc, #304]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026e4:	430b      	orrs	r3, r1
 80026e6:	6513      	str	r3, [r2, #80]	@ 0x50
 80026e8:	e003      	b.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026ea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80026ee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80026f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80026f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026fa:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80026fe:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8002702:	2300      	movs	r3, #0
 8002704:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8002708:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800270c:	460b      	mov	r3, r1
 800270e:	4313      	orrs	r3, r2
 8002710:	d053      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8002712:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002716:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800271a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800271e:	d035      	beq.n	800278c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002720:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002724:	d82e      	bhi.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002726:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800272a:	d031      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800272c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002730:	d828      	bhi.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002732:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002736:	d01a      	beq.n	800276e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002738:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800273c:	d822      	bhi.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8002742:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002746:	d007      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002748:	e01c      	b.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800274a:	4b32      	ldr	r3, [pc, #200]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800274c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274e:	4a31      	ldr	r2, [pc, #196]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002750:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002754:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002756:	e01c      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002758:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800275c:	3308      	adds	r3, #8
 800275e:	2100      	movs	r1, #0
 8002760:	4618      	mov	r0, r3
 8002762:	f001 fb83 	bl	8003e6c <RCCEx_PLL2_Config>
 8002766:	4603      	mov	r3, r0
 8002768:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800276c:	e011      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800276e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002772:	3328      	adds	r3, #40	@ 0x28
 8002774:	2100      	movs	r1, #0
 8002776:	4618      	mov	r0, r3
 8002778:	f001 fc2a 	bl	8003fd0 <RCCEx_PLL3_Config>
 800277c:	4603      	mov	r3, r0
 800277e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002782:	e006      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800278a:	e002      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800278c:	bf00      	nop
 800278e:	e000      	b.n	8002792 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002790:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002792:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10b      	bne.n	80027b2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800279a:	4b1e      	ldr	r3, [pc, #120]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800279c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800279e:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80027a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027a6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80027aa:	4a1a      	ldr	r2, [pc, #104]	@ (8002814 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027ac:	430b      	orrs	r3, r1
 80027ae:	6593      	str	r3, [r2, #88]	@ 0x58
 80027b0:	e003      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80027b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80027ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027c2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80027c6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80027ca:	2300      	movs	r3, #0
 80027cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80027d0:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80027d4:	460b      	mov	r3, r1
 80027d6:	4313      	orrs	r3, r2
 80027d8:	d056      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80027da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80027de:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80027e2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027e6:	d038      	beq.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80027e8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80027ec:	d831      	bhi.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80027ee:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80027f2:	d034      	beq.n	800285e <HAL_RCCEx_PeriphCLKConfig+0x382>
 80027f4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80027f8:	d82b      	bhi.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80027fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80027fe:	d01d      	beq.n	800283c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002800:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002804:	d825      	bhi.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002806:	2b00      	cmp	r3, #0
 8002808:	d006      	beq.n	8002818 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800280a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800280e:	d00a      	beq.n	8002826 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002810:	e01f      	b.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002812:	bf00      	nop
 8002814:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002818:	4ba2      	ldr	r3, [pc, #648]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800281a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800281c:	4aa1      	ldr	r2, [pc, #644]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800281e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002822:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002824:	e01c      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002826:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800282a:	3308      	adds	r3, #8
 800282c:	2100      	movs	r1, #0
 800282e:	4618      	mov	r0, r3
 8002830:	f001 fb1c 	bl	8003e6c <RCCEx_PLL2_Config>
 8002834:	4603      	mov	r3, r0
 8002836:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800283a:	e011      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800283c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002840:	3328      	adds	r3, #40	@ 0x28
 8002842:	2100      	movs	r1, #0
 8002844:	4618      	mov	r0, r3
 8002846:	f001 fbc3 	bl	8003fd0 <RCCEx_PLL3_Config>
 800284a:	4603      	mov	r3, r0
 800284c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002850:	e006      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002858:	e002      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800285a:	bf00      	nop
 800285c:	e000      	b.n	8002860 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800285e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002860:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002864:	2b00      	cmp	r3, #0
 8002866:	d10b      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002868:	4b8e      	ldr	r3, [pc, #568]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800286a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800286c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8002870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002874:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002878:	4a8a      	ldr	r2, [pc, #552]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800287a:	430b      	orrs	r3, r1
 800287c:	6593      	str	r3, [r2, #88]	@ 0x58
 800287e:	e003      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002880:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002884:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002888:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800288c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002890:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002894:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002898:	2300      	movs	r3, #0
 800289a:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800289e:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 80028a2:	460b      	mov	r3, r1
 80028a4:	4313      	orrs	r3, r2
 80028a6:	d03a      	beq.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80028a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028ae:	2b30      	cmp	r3, #48	@ 0x30
 80028b0:	d01f      	beq.n	80028f2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80028b2:	2b30      	cmp	r3, #48	@ 0x30
 80028b4:	d819      	bhi.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80028b6:	2b20      	cmp	r3, #32
 80028b8:	d00c      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80028ba:	2b20      	cmp	r3, #32
 80028bc:	d815      	bhi.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d019      	beq.n	80028f6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80028c2:	2b10      	cmp	r3, #16
 80028c4:	d111      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028c6:	4b77      	ldr	r3, [pc, #476]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ca:	4a76      	ldr	r2, [pc, #472]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80028cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80028d2:	e011      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80028d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80028d8:	3308      	adds	r3, #8
 80028da:	2102      	movs	r1, #2
 80028dc:	4618      	mov	r0, r3
 80028de:	f001 fac5 	bl	8003e6c <RCCEx_PLL2_Config>
 80028e2:	4603      	mov	r3, r0
 80028e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80028e8:	e006      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80028f0:	e002      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80028f2:	bf00      	nop
 80028f4:	e000      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80028f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80028f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d10a      	bne.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002900:	4b68      	ldr	r3, [pc, #416]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002902:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002904:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002908:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800290c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800290e:	4a65      	ldr	r2, [pc, #404]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002910:	430b      	orrs	r3, r1
 8002912:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002914:	e003      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002916:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800291a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800291e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002926:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800292a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800292e:	2300      	movs	r3, #0
 8002930:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002934:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002938:	460b      	mov	r3, r1
 800293a:	4313      	orrs	r3, r2
 800293c:	d051      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800293e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002942:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002944:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002948:	d035      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800294a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800294e:	d82e      	bhi.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002950:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002954:	d031      	beq.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002956:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800295a:	d828      	bhi.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800295c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002960:	d01a      	beq.n	8002998 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002962:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002966:	d822      	bhi.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002968:	2b00      	cmp	r3, #0
 800296a:	d003      	beq.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800296c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002970:	d007      	beq.n	8002982 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002972:	e01c      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002974:	4b4b      	ldr	r3, [pc, #300]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002978:	4a4a      	ldr	r2, [pc, #296]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800297a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800297e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002980:	e01c      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002982:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002986:	3308      	adds	r3, #8
 8002988:	2100      	movs	r1, #0
 800298a:	4618      	mov	r0, r3
 800298c:	f001 fa6e 	bl	8003e6c <RCCEx_PLL2_Config>
 8002990:	4603      	mov	r3, r0
 8002992:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002996:	e011      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002998:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800299c:	3328      	adds	r3, #40	@ 0x28
 800299e:	2100      	movs	r1, #0
 80029a0:	4618      	mov	r0, r3
 80029a2:	f001 fb15 	bl	8003fd0 <RCCEx_PLL3_Config>
 80029a6:	4603      	mov	r3, r0
 80029a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80029ac:	e006      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80029b4:	e002      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80029b6:	bf00      	nop
 80029b8:	e000      	b.n	80029bc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80029ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029bc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d10a      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80029c4:	4b37      	ldr	r3, [pc, #220]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029c8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 80029cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80029d2:	4a34      	ldr	r2, [pc, #208]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029d4:	430b      	orrs	r3, r1
 80029d6:	6513      	str	r3, [r2, #80]	@ 0x50
 80029d8:	e003      	b.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80029de:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80029e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80029e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ea:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 80029ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80029f2:	2300      	movs	r3, #0
 80029f4:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80029f8:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 80029fc:	460b      	mov	r3, r1
 80029fe:	4313      	orrs	r3, r2
 8002a00:	d056      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a0c:	d033      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002a0e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a12:	d82c      	bhi.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a14:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a18:	d02f      	beq.n	8002a7a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002a1a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002a1e:	d826      	bhi.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a20:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002a24:	d02b      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002a26:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002a2a:	d820      	bhi.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a30:	d012      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002a32:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002a36:	d81a      	bhi.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d022      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a40:	d115      	bne.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002a42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a46:	3308      	adds	r3, #8
 8002a48:	2101      	movs	r1, #1
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	f001 fa0e 	bl	8003e6c <RCCEx_PLL2_Config>
 8002a50:	4603      	mov	r3, r0
 8002a52:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002a56:	e015      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002a58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a5c:	3328      	adds	r3, #40	@ 0x28
 8002a5e:	2101      	movs	r1, #1
 8002a60:	4618      	mov	r0, r3
 8002a62:	f001 fab5 	bl	8003fd0 <RCCEx_PLL3_Config>
 8002a66:	4603      	mov	r3, r0
 8002a68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002a6c:	e00a      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002a74:	e006      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a76:	bf00      	nop
 8002a78:	e004      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a7a:	bf00      	nop
 8002a7c:	e002      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a7e:	bf00      	nop
 8002a80:	e000      	b.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002a82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002a84:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d10d      	bne.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002a8c:	4b05      	ldr	r3, [pc, #20]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002a90:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002a98:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a9a:	4a02      	ldr	r2, [pc, #8]	@ (8002aa4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a9c:	430b      	orrs	r3, r1
 8002a9e:	6513      	str	r3, [r2, #80]	@ 0x50
 8002aa0:	e006      	b.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002aa2:	bf00      	nop
 8002aa4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002aac:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002ab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002abc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002ac6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002aca:	460b      	mov	r3, r1
 8002acc:	4313      	orrs	r3, r2
 8002ace:	d055      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ad4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002ad8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002adc:	d033      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002ade:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002ae2:	d82c      	bhi.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002ae4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002ae8:	d02f      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aee:	d826      	bhi.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002af0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002af4:	d02b      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002af6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002afa:	d820      	bhi.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002afc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b00:	d012      	beq.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002b02:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002b06:	d81a      	bhi.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d022      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002b0c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b10:	d115      	bne.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b12:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b16:	3308      	adds	r3, #8
 8002b18:	2101      	movs	r1, #1
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f001 f9a6 	bl	8003e6c <RCCEx_PLL2_Config>
 8002b20:	4603      	mov	r3, r0
 8002b22:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002b26:	e015      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b28:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b2c:	3328      	adds	r3, #40	@ 0x28
 8002b2e:	2101      	movs	r1, #1
 8002b30:	4618      	mov	r0, r3
 8002b32:	f001 fa4d 	bl	8003fd0 <RCCEx_PLL3_Config>
 8002b36:	4603      	mov	r3, r0
 8002b38:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002b3c:	e00a      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002b44:	e006      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b46:	bf00      	nop
 8002b48:	e004      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b4a:	bf00      	nop
 8002b4c:	e002      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b4e:	bf00      	nop
 8002b50:	e000      	b.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002b52:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b54:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10b      	bne.n	8002b74 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002b5c:	4ba3      	ldr	r3, [pc, #652]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b5e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b60:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002b64:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b68:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002b6c:	4a9f      	ldr	r2, [pc, #636]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002b6e:	430b      	orrs	r3, r1
 8002b70:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b72:	e003      	b.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b74:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002b78:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b84:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002b88:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002b92:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002b96:	460b      	mov	r3, r1
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	d037      	beq.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ba0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ba2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ba6:	d00e      	beq.n	8002bc6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002ba8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bac:	d816      	bhi.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d018      	beq.n	8002be4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002bb2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002bb6:	d111      	bne.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bb8:	4b8c      	ldr	r3, [pc, #560]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bbc:	4a8b      	ldr	r2, [pc, #556]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bbe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bc2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002bc4:	e00f      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002bc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bca:	3308      	adds	r3, #8
 8002bcc:	2101      	movs	r1, #1
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f001 f94c 	bl	8003e6c <RCCEx_PLL2_Config>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002bda:	e004      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002be2:	e000      	b.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002be6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d10a      	bne.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002bee:	4b7f      	ldr	r3, [pc, #508]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bf0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bf2:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002bf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bfa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfc:	4a7b      	ldr	r2, [pc, #492]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002bfe:	430b      	orrs	r3, r1
 8002c00:	6513      	str	r3, [r2, #80]	@ 0x50
 8002c02:	e003      	b.n	8002c0c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c04:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002c0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c14:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002c18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002c1c:	2300      	movs	r3, #0
 8002c1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002c22:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002c26:	460b      	mov	r3, r1
 8002c28:	4313      	orrs	r3, r2
 8002c2a:	d039      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002c2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c32:	2b03      	cmp	r3, #3
 8002c34:	d81c      	bhi.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002c36:	a201      	add	r2, pc, #4	@ (adr r2, 8002c3c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002c38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c3c:	08002c79 	.word	0x08002c79
 8002c40:	08002c4d 	.word	0x08002c4d
 8002c44:	08002c5b 	.word	0x08002c5b
 8002c48:	08002c79 	.word	0x08002c79
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c4c:	4b67      	ldr	r3, [pc, #412]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c50:	4a66      	ldr	r2, [pc, #408]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c52:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c56:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002c58:	e00f      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002c5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c5e:	3308      	adds	r3, #8
 8002c60:	2102      	movs	r1, #2
 8002c62:	4618      	mov	r0, r3
 8002c64:	f001 f902 	bl	8003e6c <RCCEx_PLL2_Config>
 8002c68:	4603      	mov	r3, r0
 8002c6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002c6e:	e004      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002c76:	e000      	b.n	8002c7a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002c78:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c7a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10a      	bne.n	8002c98 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002c82:	4b5a      	ldr	r3, [pc, #360]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002c86:	f023 0103 	bic.w	r1, r3, #3
 8002c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002c8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c90:	4a56      	ldr	r2, [pc, #344]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002c92:	430b      	orrs	r3, r1
 8002c94:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002c96:	e003      	b.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002c9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca8:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002cac:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002cb6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002cba:	460b      	mov	r3, r1
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f000 809f 	beq.w	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002cc2:	4b4b      	ldr	r3, [pc, #300]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4a4a      	ldr	r2, [pc, #296]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ccc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002cce:	f7fe f893 	bl	8000df8 <HAL_GetTick>
 8002cd2:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cd6:	e00b      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cd8:	f7fe f88e 	bl	8000df8 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b64      	cmp	r3, #100	@ 0x64
 8002ce6:	d903      	bls.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002cee:	e005      	b.n	8002cfc <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002cf0:	4b3f      	ldr	r3, [pc, #252]	@ (8002df0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d0ed      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002cfc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d179      	bne.n	8002df8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002d04:	4b39      	ldr	r3, [pc, #228]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d06:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002d08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d0c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002d10:	4053      	eors	r3, r2
 8002d12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d015      	beq.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d1a:	4b34      	ldr	r3, [pc, #208]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002d22:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002d26:	4b31      	ldr	r3, [pc, #196]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d2a:	4a30      	ldr	r2, [pc, #192]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002d30:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002d32:	4b2e      	ldr	r3, [pc, #184]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d36:	4a2d      	ldr	r2, [pc, #180]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d3c:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002d3e:	4a2b      	ldr	r2, [pc, #172]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d44:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d4a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002d4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d52:	d118      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d54:	f7fe f850 	bl	8000df8 <HAL_GetTick>
 8002d58:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d5c:	e00d      	b.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d5e:	f7fe f84b 	bl	8000df8 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002d68:	1ad2      	subs	r2, r2, r3
 8002d6a:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d903      	bls.n	8002d7a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 8002d78:	e005      	b.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002d7a:	4b1c      	ldr	r3, [pc, #112]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002d7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d7e:	f003 0302 	and.w	r3, r3, #2
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d0eb      	beq.n	8002d5e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002d86:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d129      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002d96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d9a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002d9e:	d10e      	bne.n	8002dbe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002da0:	4b12      	ldr	r3, [pc, #72]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002da2:	691b      	ldr	r3, [r3, #16]
 8002da4:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002da8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002db0:	091a      	lsrs	r2, r3, #4
 8002db2:	4b10      	ldr	r3, [pc, #64]	@ (8002df4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	4a0d      	ldr	r2, [pc, #52]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002db8:	430b      	orrs	r3, r1
 8002dba:	6113      	str	r3, [r2, #16]
 8002dbc:	e005      	b.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8002dbe:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dc0:	691b      	ldr	r3, [r3, #16]
 8002dc2:	4a0a      	ldr	r2, [pc, #40]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dc4:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002dc8:	6113      	str	r3, [r2, #16]
 8002dca:	4b08      	ldr	r3, [pc, #32]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002dcc:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002dce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002dd2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002dda:	4a04      	ldr	r2, [pc, #16]	@ (8002dec <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ddc:	430b      	orrs	r3, r1
 8002dde:	6713      	str	r3, [r2, #112]	@ 0x70
 8002de0:	e00e      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002de2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002de6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8002dea:	e009      	b.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8002dec:	58024400 	.word	0x58024400
 8002df0:	58024800 	.word	0x58024800
 8002df4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002df8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002dfc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002e00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e08:	f002 0301 	and.w	r3, r2, #1
 8002e0c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e10:	2300      	movs	r3, #0
 8002e12:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002e16:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	f000 8089 	beq.w	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002e22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002e26:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002e28:	2b28      	cmp	r3, #40	@ 0x28
 8002e2a:	d86b      	bhi.n	8002f04 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8002e2c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e34 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8002e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e32:	bf00      	nop
 8002e34:	08002f0d 	.word	0x08002f0d
 8002e38:	08002f05 	.word	0x08002f05
 8002e3c:	08002f05 	.word	0x08002f05
 8002e40:	08002f05 	.word	0x08002f05
 8002e44:	08002f05 	.word	0x08002f05
 8002e48:	08002f05 	.word	0x08002f05
 8002e4c:	08002f05 	.word	0x08002f05
 8002e50:	08002f05 	.word	0x08002f05
 8002e54:	08002ed9 	.word	0x08002ed9
 8002e58:	08002f05 	.word	0x08002f05
 8002e5c:	08002f05 	.word	0x08002f05
 8002e60:	08002f05 	.word	0x08002f05
 8002e64:	08002f05 	.word	0x08002f05
 8002e68:	08002f05 	.word	0x08002f05
 8002e6c:	08002f05 	.word	0x08002f05
 8002e70:	08002f05 	.word	0x08002f05
 8002e74:	08002eef 	.word	0x08002eef
 8002e78:	08002f05 	.word	0x08002f05
 8002e7c:	08002f05 	.word	0x08002f05
 8002e80:	08002f05 	.word	0x08002f05
 8002e84:	08002f05 	.word	0x08002f05
 8002e88:	08002f05 	.word	0x08002f05
 8002e8c:	08002f05 	.word	0x08002f05
 8002e90:	08002f05 	.word	0x08002f05
 8002e94:	08002f0d 	.word	0x08002f0d
 8002e98:	08002f05 	.word	0x08002f05
 8002e9c:	08002f05 	.word	0x08002f05
 8002ea0:	08002f05 	.word	0x08002f05
 8002ea4:	08002f05 	.word	0x08002f05
 8002ea8:	08002f05 	.word	0x08002f05
 8002eac:	08002f05 	.word	0x08002f05
 8002eb0:	08002f05 	.word	0x08002f05
 8002eb4:	08002f0d 	.word	0x08002f0d
 8002eb8:	08002f05 	.word	0x08002f05
 8002ebc:	08002f05 	.word	0x08002f05
 8002ec0:	08002f05 	.word	0x08002f05
 8002ec4:	08002f05 	.word	0x08002f05
 8002ec8:	08002f05 	.word	0x08002f05
 8002ecc:	08002f05 	.word	0x08002f05
 8002ed0:	08002f05 	.word	0x08002f05
 8002ed4:	08002f0d 	.word	0x08002f0d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ed8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002edc:	3308      	adds	r3, #8
 8002ede:	2101      	movs	r1, #1
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 ffc3 	bl	8003e6c <RCCEx_PLL2_Config>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002eec:	e00f      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002eee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ef2:	3328      	adds	r3, #40	@ 0x28
 8002ef4:	2101      	movs	r1, #1
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f001 f86a 	bl	8003fd0 <RCCEx_PLL3_Config>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8002f02:	e004      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002f0a:	e000      	b.n	8002f0e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8002f0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002f0e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d10a      	bne.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8002f16:	4bbf      	ldr	r3, [pc, #764]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f1a:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8002f1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f22:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f24:	4abb      	ldr	r2, [pc, #748]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002f26:	430b      	orrs	r3, r1
 8002f28:	6553      	str	r3, [r2, #84]	@ 0x54
 8002f2a:	e003      	b.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f2c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002f30:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8002f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f3c:	f002 0302 	and.w	r3, r2, #2
 8002f40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002f44:	2300      	movs	r3, #0
 8002f46:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002f4a:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4313      	orrs	r3, r2
 8002f52:	d041      	beq.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8002f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f58:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002f5a:	2b05      	cmp	r3, #5
 8002f5c:	d824      	bhi.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8002f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8002f64 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8002f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f64:	08002fb1 	.word	0x08002fb1
 8002f68:	08002f7d 	.word	0x08002f7d
 8002f6c:	08002f93 	.word	0x08002f93
 8002f70:	08002fb1 	.word	0x08002fb1
 8002f74:	08002fb1 	.word	0x08002fb1
 8002f78:	08002fb1 	.word	0x08002fb1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002f7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f80:	3308      	adds	r3, #8
 8002f82:	2101      	movs	r1, #1
 8002f84:	4618      	mov	r0, r3
 8002f86:	f000 ff71 	bl	8003e6c <RCCEx_PLL2_Config>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002f90:	e00f      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002f96:	3328      	adds	r3, #40	@ 0x28
 8002f98:	2101      	movs	r1, #1
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	f001 f818 	bl	8003fd0 <RCCEx_PLL3_Config>
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8002fa6:	e004      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8002fae:	e000      	b.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8002fb0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002fb2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d10a      	bne.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8002fba:	4b96      	ldr	r3, [pc, #600]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002fbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002fbe:	f023 0107 	bic.w	r1, r3, #7
 8002fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fc6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002fc8:	4a92      	ldr	r2, [pc, #584]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8002fca:	430b      	orrs	r3, r1
 8002fcc:	6553      	str	r3, [r2, #84]	@ 0x54
 8002fce:	e003      	b.n	8002fd8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8002fd4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002fd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe0:	f002 0304 	and.w	r3, r2, #4
 8002fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002fe8:	2300      	movs	r3, #0
 8002fea:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002fee:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 8002ff2:	460b      	mov	r3, r1
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	d044      	beq.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8002ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003000:	2b05      	cmp	r3, #5
 8003002:	d825      	bhi.n	8003050 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003004:	a201      	add	r2, pc, #4	@ (adr r2, 800300c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800300a:	bf00      	nop
 800300c:	08003059 	.word	0x08003059
 8003010:	08003025 	.word	0x08003025
 8003014:	0800303b 	.word	0x0800303b
 8003018:	08003059 	.word	0x08003059
 800301c:	08003059 	.word	0x08003059
 8003020:	08003059 	.word	0x08003059
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003024:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003028:	3308      	adds	r3, #8
 800302a:	2101      	movs	r1, #1
 800302c:	4618      	mov	r0, r3
 800302e:	f000 ff1d 	bl	8003e6c <RCCEx_PLL2_Config>
 8003032:	4603      	mov	r3, r0
 8003034:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003038:	e00f      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800303a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800303e:	3328      	adds	r3, #40	@ 0x28
 8003040:	2101      	movs	r1, #1
 8003042:	4618      	mov	r0, r3
 8003044:	f000 ffc4 	bl	8003fd0 <RCCEx_PLL3_Config>
 8003048:	4603      	mov	r3, r0
 800304a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800304e:	e004      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003050:	2301      	movs	r3, #1
 8003052:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003056:	e000      	b.n	800305a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003058:	bf00      	nop
    }

    if (ret == HAL_OK)
 800305a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800305e:	2b00      	cmp	r3, #0
 8003060:	d10b      	bne.n	800307a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003062:	4b6c      	ldr	r3, [pc, #432]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003066:	f023 0107 	bic.w	r1, r3, #7
 800306a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800306e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003072:	4a68      	ldr	r2, [pc, #416]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003074:	430b      	orrs	r3, r1
 8003076:	6593      	str	r3, [r2, #88]	@ 0x58
 8003078:	e003      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800307a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800307e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003082:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800308a:	f002 0320 	and.w	r3, r2, #32
 800308e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003092:	2300      	movs	r3, #0
 8003094:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003098:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800309c:	460b      	mov	r3, r1
 800309e:	4313      	orrs	r3, r2
 80030a0:	d055      	beq.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80030a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030ae:	d033      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80030b0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030b4:	d82c      	bhi.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80030b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030ba:	d02f      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80030bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80030c0:	d826      	bhi.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80030c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80030c6:	d02b      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80030c8:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80030cc:	d820      	bhi.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80030ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030d2:	d012      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80030d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80030d8:	d81a      	bhi.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d022      	beq.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80030de:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80030e2:	d115      	bne.n	8003110 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80030e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030e8:	3308      	adds	r3, #8
 80030ea:	2100      	movs	r1, #0
 80030ec:	4618      	mov	r0, r3
 80030ee:	f000 febd 	bl	8003e6c <RCCEx_PLL2_Config>
 80030f2:	4603      	mov	r3, r0
 80030f4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80030f8:	e015      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80030fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80030fe:	3328      	adds	r3, #40	@ 0x28
 8003100:	2102      	movs	r1, #2
 8003102:	4618      	mov	r0, r3
 8003104:	f000 ff64 	bl	8003fd0 <RCCEx_PLL3_Config>
 8003108:	4603      	mov	r3, r0
 800310a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800310e:	e00a      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003116:	e006      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003118:	bf00      	nop
 800311a:	e004      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800311c:	bf00      	nop
 800311e:	e002      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003120:	bf00      	nop
 8003122:	e000      	b.n	8003126 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003124:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003126:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800312a:	2b00      	cmp	r3, #0
 800312c:	d10b      	bne.n	8003146 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800312e:	4b39      	ldr	r3, [pc, #228]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003130:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003132:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8003136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800313a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313e:	4a35      	ldr	r2, [pc, #212]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003140:	430b      	orrs	r3, r1
 8003142:	6553      	str	r3, [r2, #84]	@ 0x54
 8003144:	e003      	b.n	800314e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003146:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800314a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800314e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003156:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800315a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800315e:	2300      	movs	r3, #0
 8003160:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8003164:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8003168:	460b      	mov	r3, r1
 800316a:	4313      	orrs	r3, r2
 800316c:	d058      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800316e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003172:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003176:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800317a:	d033      	beq.n	80031e4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800317c:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003180:	d82c      	bhi.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003182:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003186:	d02f      	beq.n	80031e8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003188:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800318c:	d826      	bhi.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800318e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003192:	d02b      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003194:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003198:	d820      	bhi.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800319a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800319e:	d012      	beq.n	80031c6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80031a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031a4:	d81a      	bhi.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d022      	beq.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80031aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031ae:	d115      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80031b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031b4:	3308      	adds	r3, #8
 80031b6:	2100      	movs	r1, #0
 80031b8:	4618      	mov	r0, r3
 80031ba:	f000 fe57 	bl	8003e6c <RCCEx_PLL2_Config>
 80031be:	4603      	mov	r3, r0
 80031c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80031c4:	e015      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80031c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80031ca:	3328      	adds	r3, #40	@ 0x28
 80031cc:	2102      	movs	r1, #2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f000 fefe 	bl	8003fd0 <RCCEx_PLL3_Config>
 80031d4:	4603      	mov	r3, r0
 80031d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80031da:	e00a      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80031e2:	e006      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80031e4:	bf00      	nop
 80031e6:	e004      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80031e8:	bf00      	nop
 80031ea:	e002      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80031ec:	bf00      	nop
 80031ee:	e000      	b.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80031f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10e      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80031fa:	4b06      	ldr	r3, [pc, #24]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80031fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031fe:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003202:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003206:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800320a:	4a02      	ldr	r2, [pc, #8]	@ (8003214 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800320c:	430b      	orrs	r3, r1
 800320e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003210:	e006      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003212:	bf00      	nop
 8003214:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003218:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800321c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003220:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003228:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800322c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003230:	2300      	movs	r3, #0
 8003232:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003236:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800323a:	460b      	mov	r3, r1
 800323c:	4313      	orrs	r3, r2
 800323e:	d055      	beq.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003240:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003244:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8003248:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800324c:	d033      	beq.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800324e:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8003252:	d82c      	bhi.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003254:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003258:	d02f      	beq.n	80032ba <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800325a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800325e:	d826      	bhi.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003260:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8003264:	d02b      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003266:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800326a:	d820      	bhi.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800326c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003270:	d012      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003272:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003276:	d81a      	bhi.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003278:	2b00      	cmp	r3, #0
 800327a:	d022      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800327c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003280:	d115      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003282:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003286:	3308      	adds	r3, #8
 8003288:	2100      	movs	r1, #0
 800328a:	4618      	mov	r0, r3
 800328c:	f000 fdee 	bl	8003e6c <RCCEx_PLL2_Config>
 8003290:	4603      	mov	r3, r0
 8003292:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003296:	e015      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003298:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800329c:	3328      	adds	r3, #40	@ 0x28
 800329e:	2102      	movs	r1, #2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f000 fe95 	bl	8003fd0 <RCCEx_PLL3_Config>
 80032a6:	4603      	mov	r3, r0
 80032a8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80032ac:	e00a      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80032b4:	e006      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80032b6:	bf00      	nop
 80032b8:	e004      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80032ba:	bf00      	nop
 80032bc:	e002      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80032be:	bf00      	nop
 80032c0:	e000      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80032c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032c4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d10b      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80032cc:	4ba1      	ldr	r3, [pc, #644]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d0:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 80032d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80032dc:	4a9d      	ldr	r2, [pc, #628]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80032de:	430b      	orrs	r3, r1
 80032e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80032e2:	e003      	b.n	80032ec <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032e4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80032e8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80032ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80032f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032f4:	f002 0308 	and.w	r3, r2, #8
 80032f8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80032fc:	2300      	movs	r3, #0
 80032fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003302:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003306:	460b      	mov	r3, r1
 8003308:	4313      	orrs	r3, r2
 800330a:	d01e      	beq.n	800334a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800330c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003310:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003314:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003318:	d10c      	bne.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800331a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800331e:	3328      	adds	r3, #40	@ 0x28
 8003320:	2102      	movs	r1, #2
 8003322:	4618      	mov	r0, r3
 8003324:	f000 fe54 	bl	8003fd0 <RCCEx_PLL3_Config>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d002      	beq.n	8003334 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8003334:	4b87      	ldr	r3, [pc, #540]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003336:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003338:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800333c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003340:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003344:	4a83      	ldr	r2, [pc, #524]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003346:	430b      	orrs	r3, r1
 8003348:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800334a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800334e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003352:	f002 0310 	and.w	r3, r2, #16
 8003356:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800335a:	2300      	movs	r3, #0
 800335c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003360:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8003364:	460b      	mov	r3, r1
 8003366:	4313      	orrs	r3, r2
 8003368:	d01e      	beq.n	80033a8 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800336a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800336e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003372:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003376:	d10c      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003378:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800337c:	3328      	adds	r3, #40	@ 0x28
 800337e:	2102      	movs	r1, #2
 8003380:	4618      	mov	r0, r3
 8003382:	f000 fe25 	bl	8003fd0 <RCCEx_PLL3_Config>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d002      	beq.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003392:	4b70      	ldr	r3, [pc, #448]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003396:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800339a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800339e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80033a2:	4a6c      	ldr	r2, [pc, #432]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80033a4:	430b      	orrs	r3, r1
 80033a6:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80033a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b0:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80033b4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80033b8:	2300      	movs	r3, #0
 80033ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80033be:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80033c2:	460b      	mov	r3, r1
 80033c4:	4313      	orrs	r3, r2
 80033c6:	d03e      	beq.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80033c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80033d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033d4:	d022      	beq.n	800341c <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80033d6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80033da:	d81b      	bhi.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d003      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80033e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033e4:	d00b      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80033e6:	e015      	b.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80033ec:	3308      	adds	r3, #8
 80033ee:	2100      	movs	r1, #0
 80033f0:	4618      	mov	r0, r3
 80033f2:	f000 fd3b 	bl	8003e6c <RCCEx_PLL2_Config>
 80033f6:	4603      	mov	r3, r0
 80033f8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 80033fc:	e00f      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80033fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003402:	3328      	adds	r3, #40	@ 0x28
 8003404:	2102      	movs	r1, #2
 8003406:	4618      	mov	r0, r3
 8003408:	f000 fde2 	bl	8003fd0 <RCCEx_PLL3_Config>
 800340c:	4603      	mov	r3, r0
 800340e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003412:	e004      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800341a:	e000      	b.n	800341e <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800341c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800341e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10b      	bne.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003426:	4b4b      	ldr	r3, [pc, #300]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003428:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800342a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800342e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003432:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003436:	4a47      	ldr	r2, [pc, #284]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003438:	430b      	orrs	r3, r1
 800343a:	6593      	str	r3, [r2, #88]	@ 0x58
 800343c:	e003      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800343e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003442:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003446:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800344a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800344e:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8003452:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003454:	2300      	movs	r3, #0
 8003456:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8003458:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800345c:	460b      	mov	r3, r1
 800345e:	4313      	orrs	r3, r2
 8003460:	d03b      	beq.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8003462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003466:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800346a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800346e:	d01f      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8003470:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8003474:	d818      	bhi.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8003476:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800347a:	d003      	beq.n	8003484 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800347c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003480:	d007      	beq.n	8003492 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003482:	e011      	b.n	80034a8 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003484:	4b33      	ldr	r3, [pc, #204]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003488:	4a32      	ldr	r2, [pc, #200]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800348a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800348e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8003490:	e00f      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003492:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003496:	3328      	adds	r3, #40	@ 0x28
 8003498:	2101      	movs	r1, #1
 800349a:	4618      	mov	r0, r3
 800349c:	f000 fd98 	bl	8003fd0 <RCCEx_PLL3_Config>
 80034a0:	4603      	mov	r3, r0
 80034a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80034a6:	e004      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80034ae:	e000      	b.n	80034b2 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80034b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d10b      	bne.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80034ba:	4b26      	ldr	r3, [pc, #152]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034be:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80034c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ca:	4a22      	ldr	r2, [pc, #136]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80034cc:	430b      	orrs	r3, r1
 80034ce:	6553      	str	r3, [r2, #84]	@ 0x54
 80034d0:	e003      	b.n	80034da <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034d2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80034d6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80034da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034e2:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 80034e6:	673b      	str	r3, [r7, #112]	@ 0x70
 80034e8:	2300      	movs	r3, #0
 80034ea:	677b      	str	r3, [r7, #116]	@ 0x74
 80034ec:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80034f0:	460b      	mov	r3, r1
 80034f2:	4313      	orrs	r3, r2
 80034f4:	d034      	beq.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80034f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80034fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003500:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003504:	d007      	beq.n	8003516 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8003506:	e011      	b.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003508:	4b12      	ldr	r3, [pc, #72]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800350a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800350c:	4a11      	ldr	r2, [pc, #68]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800350e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003512:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003514:	e00e      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003516:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800351a:	3308      	adds	r3, #8
 800351c:	2102      	movs	r1, #2
 800351e:	4618      	mov	r0, r3
 8003520:	f000 fca4 	bl	8003e6c <RCCEx_PLL2_Config>
 8003524:	4603      	mov	r3, r0
 8003526:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800352a:	e003      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8003532:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003534:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10d      	bne.n	8003558 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800353c:	4b05      	ldr	r3, [pc, #20]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800353e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003540:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8003544:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800354a:	4a02      	ldr	r2, [pc, #8]	@ (8003554 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800354c:	430b      	orrs	r3, r1
 800354e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003550:	e006      	b.n	8003560 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8003552:	bf00      	nop
 8003554:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003558:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800355c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003560:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003568:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800356c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800356e:	2300      	movs	r3, #0
 8003570:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003572:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8003576:	460b      	mov	r3, r1
 8003578:	4313      	orrs	r3, r2
 800357a:	d00c      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800357c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003580:	3328      	adds	r3, #40	@ 0x28
 8003582:	2102      	movs	r1, #2
 8003584:	4618      	mov	r0, r3
 8003586:	f000 fd23 	bl	8003fd0 <RCCEx_PLL3_Config>
 800358a:	4603      	mov	r3, r0
 800358c:	2b00      	cmp	r3, #0
 800358e:	d002      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8003590:	2301      	movs	r3, #1
 8003592:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8003596:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800359a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80035a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80035a4:	2300      	movs	r3, #0
 80035a6:	667b      	str	r3, [r7, #100]	@ 0x64
 80035a8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80035ac:	460b      	mov	r3, r1
 80035ae:	4313      	orrs	r3, r2
 80035b0:	d038      	beq.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80035b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80035b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035be:	d018      	beq.n	80035f2 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80035c0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035c4:	d811      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80035c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035ca:	d014      	beq.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80035cc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035d0:	d80b      	bhi.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d011      	beq.n	80035fa <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80035d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035da:	d106      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035dc:	4bc3      	ldr	r3, [pc, #780]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035e0:	4ac2      	ldr	r2, [pc, #776]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80035e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80035e6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80035e8:	e008      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80035f0:	e004      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80035f2:	bf00      	nop
 80035f4:	e002      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80035f6:	bf00      	nop
 80035f8:	e000      	b.n	80035fc <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80035fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80035fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003600:	2b00      	cmp	r3, #0
 8003602:	d10b      	bne.n	800361c <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003604:	4bb9      	ldr	r3, [pc, #740]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003606:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003608:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800360c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003610:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003614:	4ab5      	ldr	r2, [pc, #724]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003616:	430b      	orrs	r3, r1
 8003618:	6553      	str	r3, [r2, #84]	@ 0x54
 800361a:	e003      	b.n	8003624 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800361c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003620:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003624:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362c:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 8003630:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003632:	2300      	movs	r3, #0
 8003634:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003636:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800363a:	460b      	mov	r3, r1
 800363c:	4313      	orrs	r3, r2
 800363e:	d009      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003640:	4baa      	ldr	r3, [pc, #680]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003642:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003644:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8003648:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800364c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800364e:	4aa7      	ldr	r2, [pc, #668]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003650:	430b      	orrs	r3, r1
 8003652:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003654:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800365c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8003660:	653b      	str	r3, [r7, #80]	@ 0x50
 8003662:	2300      	movs	r3, #0
 8003664:	657b      	str	r3, [r7, #84]	@ 0x54
 8003666:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800366a:	460b      	mov	r3, r1
 800366c:	4313      	orrs	r3, r2
 800366e:	d00a      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8003670:	4b9e      	ldr	r3, [pc, #632]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003672:	691b      	ldr	r3, [r3, #16]
 8003674:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8003678:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800367c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8003680:	4a9a      	ldr	r2, [pc, #616]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003682:	430b      	orrs	r3, r1
 8003684:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003686:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800368a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800368e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8003692:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003694:	2300      	movs	r3, #0
 8003696:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003698:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800369c:	460b      	mov	r3, r1
 800369e:	4313      	orrs	r3, r2
 80036a0:	d009      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80036a2:	4b92      	ldr	r3, [pc, #584]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036a6:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80036aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80036b0:	4a8e      	ldr	r2, [pc, #568]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036b2:	430b      	orrs	r3, r1
 80036b4:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80036b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036be:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80036c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80036c4:	2300      	movs	r3, #0
 80036c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80036c8:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80036cc:	460b      	mov	r3, r1
 80036ce:	4313      	orrs	r3, r2
 80036d0:	d00e      	beq.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80036d2:	4b86      	ldr	r3, [pc, #536]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036d4:	691b      	ldr	r3, [r3, #16]
 80036d6:	4a85      	ldr	r2, [pc, #532]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036d8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80036dc:	6113      	str	r3, [r2, #16]
 80036de:	4b83      	ldr	r3, [pc, #524]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036e0:	6919      	ldr	r1, [r3, #16]
 80036e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036e6:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80036ea:	4a80      	ldr	r2, [pc, #512]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80036ec:	430b      	orrs	r3, r1
 80036ee:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80036f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80036f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80036fc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80036fe:	2300      	movs	r3, #0
 8003700:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003702:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003706:	460b      	mov	r3, r1
 8003708:	4313      	orrs	r3, r2
 800370a:	d009      	beq.n	8003720 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800370c:	4b77      	ldr	r3, [pc, #476]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800370e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003710:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003718:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800371a:	4a74      	ldr	r2, [pc, #464]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800371c:	430b      	orrs	r3, r1
 800371e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800372c:	633b      	str	r3, [r7, #48]	@ 0x30
 800372e:	2300      	movs	r3, #0
 8003730:	637b      	str	r3, [r7, #52]	@ 0x34
 8003732:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8003736:	460b      	mov	r3, r1
 8003738:	4313      	orrs	r3, r2
 800373a:	d00a      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800373c:	4b6b      	ldr	r3, [pc, #428]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800373e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003740:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8003744:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003748:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800374c:	4a67      	ldr	r2, [pc, #412]	@ (80038ec <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800374e:	430b      	orrs	r3, r1
 8003750:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8003752:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800375a:	2100      	movs	r1, #0
 800375c:	62b9      	str	r1, [r7, #40]	@ 0x28
 800375e:	f003 0301 	and.w	r3, r3, #1
 8003762:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003764:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8003768:	460b      	mov	r3, r1
 800376a:	4313      	orrs	r3, r2
 800376c:	d011      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800376e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003772:	3308      	adds	r3, #8
 8003774:	2100      	movs	r1, #0
 8003776:	4618      	mov	r0, r3
 8003778:	f000 fb78 	bl	8003e6c <RCCEx_PLL2_Config>
 800377c:	4603      	mov	r3, r0
 800377e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003782:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800378a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800378e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8003792:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379a:	2100      	movs	r1, #0
 800379c:	6239      	str	r1, [r7, #32]
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037a4:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80037a8:	460b      	mov	r3, r1
 80037aa:	4313      	orrs	r3, r2
 80037ac:	d011      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80037ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037b2:	3308      	adds	r3, #8
 80037b4:	2101      	movs	r1, #1
 80037b6:	4618      	mov	r0, r3
 80037b8:	f000 fb58 	bl	8003e6c <RCCEx_PLL2_Config>
 80037bc:	4603      	mov	r3, r0
 80037be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80037c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80037ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80037d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037da:	2100      	movs	r1, #0
 80037dc:	61b9      	str	r1, [r7, #24]
 80037de:	f003 0304 	and.w	r3, r3, #4
 80037e2:	61fb      	str	r3, [r7, #28]
 80037e4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80037e8:	460b      	mov	r3, r1
 80037ea:	4313      	orrs	r3, r2
 80037ec:	d011      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80037ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037f2:	3308      	adds	r3, #8
 80037f4:	2102      	movs	r1, #2
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 fb38 	bl	8003e6c <RCCEx_PLL2_Config>
 80037fc:	4603      	mov	r3, r0
 80037fe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003802:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003806:	2b00      	cmp	r3, #0
 8003808:	d003      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800380a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800380e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003812:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800381a:	2100      	movs	r1, #0
 800381c:	6139      	str	r1, [r7, #16]
 800381e:	f003 0308 	and.w	r3, r3, #8
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003828:	460b      	mov	r3, r1
 800382a:	4313      	orrs	r3, r2
 800382c:	d011      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800382e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003832:	3328      	adds	r3, #40	@ 0x28
 8003834:	2100      	movs	r1, #0
 8003836:	4618      	mov	r0, r3
 8003838:	f000 fbca 	bl	8003fd0 <RCCEx_PLL3_Config>
 800383c:	4603      	mov	r3, r0
 800383e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8003842:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003846:	2b00      	cmp	r3, #0
 8003848:	d003      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800384a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800384e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385a:	2100      	movs	r1, #0
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	f003 0310 	and.w	r3, r3, #16
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003868:	460b      	mov	r3, r1
 800386a:	4313      	orrs	r3, r2
 800386c:	d011      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800386e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003872:	3328      	adds	r3, #40	@ 0x28
 8003874:	2101      	movs	r1, #1
 8003876:	4618      	mov	r0, r3
 8003878:	f000 fbaa 	bl	8003fd0 <RCCEx_PLL3_Config>
 800387c:	4603      	mov	r3, r0
 800387e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8003882:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800388a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800388e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389a:	2100      	movs	r1, #0
 800389c:	6039      	str	r1, [r7, #0]
 800389e:	f003 0320 	and.w	r3, r3, #32
 80038a2:	607b      	str	r3, [r7, #4]
 80038a4:	e9d7 1200 	ldrd	r1, r2, [r7]
 80038a8:	460b      	mov	r3, r1
 80038aa:	4313      	orrs	r3, r2
 80038ac:	d011      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80038ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80038b2:	3328      	adds	r3, #40	@ 0x28
 80038b4:	2102      	movs	r1, #2
 80038b6:	4618      	mov	r0, r3
 80038b8:	f000 fb8a 	bl	8003fd0 <RCCEx_PLL3_Config>
 80038bc:	4603      	mov	r3, r0
 80038be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 80038c2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d003      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80038ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80038ce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 80038d2:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d101      	bne.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80038da:	2300      	movs	r3, #0
 80038dc:	e000      	b.n	80038e0 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80038e6:	46bd      	mov	sp, r7
 80038e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80038ec:	58024400 	.word	0x58024400

080038f0 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80038f4:	f7fe fd96 	bl	8002424 <HAL_RCC_GetHCLKFreq>
 80038f8:	4602      	mov	r2, r0
 80038fa:	4b06      	ldr	r3, [pc, #24]	@ (8003914 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	091b      	lsrs	r3, r3, #4
 8003900:	f003 0307 	and.w	r3, r3, #7
 8003904:	4904      	ldr	r1, [pc, #16]	@ (8003918 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003906:	5ccb      	ldrb	r3, [r1, r3]
 8003908:	f003 031f 	and.w	r3, r3, #31
 800390c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003910:	4618      	mov	r0, r3
 8003912:	bd80      	pop	{r7, pc}
 8003914:	58024400 	.word	0x58024400
 8003918:	0800535c 	.word	0x0800535c

0800391c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800391c:	b480      	push	{r7}
 800391e:	b089      	sub	sp, #36	@ 0x24
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003924:	4ba1      	ldr	r3, [pc, #644]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003926:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003928:	f003 0303 	and.w	r3, r3, #3
 800392c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800392e:	4b9f      	ldr	r3, [pc, #636]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003930:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003932:	0b1b      	lsrs	r3, r3, #12
 8003934:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003938:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800393a:	4b9c      	ldr	r3, [pc, #624]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800393c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800393e:	091b      	lsrs	r3, r3, #4
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003946:	4b99      	ldr	r3, [pc, #612]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800394a:	08db      	lsrs	r3, r3, #3
 800394c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003950:	693a      	ldr	r2, [r7, #16]
 8003952:	fb02 f303 	mul.w	r3, r2, r3
 8003956:	ee07 3a90 	vmov	s15, r3
 800395a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800395e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	2b00      	cmp	r3, #0
 8003966:	f000 8111 	beq.w	8003b8c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	2b02      	cmp	r3, #2
 800396e:	f000 8083 	beq.w	8003a78 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003972:	69bb      	ldr	r3, [r7, #24]
 8003974:	2b02      	cmp	r3, #2
 8003976:	f200 80a1 	bhi.w	8003abc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d003      	beq.n	8003988 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003980:	69bb      	ldr	r3, [r7, #24]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d056      	beq.n	8003a34 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003986:	e099      	b.n	8003abc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003988:	4b88      	ldr	r3, [pc, #544]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	2b00      	cmp	r3, #0
 8003992:	d02d      	beq.n	80039f0 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003994:	4b85      	ldr	r3, [pc, #532]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	08db      	lsrs	r3, r3, #3
 800399a:	f003 0303 	and.w	r3, r3, #3
 800399e:	4a84      	ldr	r2, [pc, #528]	@ (8003bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80039a0:	fa22 f303 	lsr.w	r3, r2, r3
 80039a4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	ee07 3a90 	vmov	s15, r3
 80039ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	ee07 3a90 	vmov	s15, r3
 80039b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80039be:	4b7b      	ldr	r3, [pc, #492]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80039c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80039ce:	ed97 6a03 	vldr	s12, [r7, #12]
 80039d2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80039d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80039da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80039de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80039e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80039e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039ea:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80039ee:	e087      	b.n	8003b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80039f0:	697b      	ldr	r3, [r7, #20]
 80039f2:	ee07 3a90 	vmov	s15, r3
 80039f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80039fa:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80039fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a02:	4b6a      	ldr	r3, [pc, #424]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a0a:	ee07 3a90 	vmov	s15, r3
 8003a0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a12:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a16:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a2e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a32:	e065      	b.n	8003b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	ee07 3a90 	vmov	s15, r3
 8003a3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a3e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003bbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003a42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a46:	4b59      	ldr	r3, [pc, #356]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a4e:	ee07 3a90 	vmov	s15, r3
 8003a52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a56:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a5a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003a5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003a62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003a66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003a6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003a6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003a72:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003a76:	e043      	b.n	8003b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	ee07 3a90 	vmov	s15, r3
 8003a7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003a82:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003a8a:	4b48      	ldr	r3, [pc, #288]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003a8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a92:	ee07 3a90 	vmov	s15, r3
 8003a96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003a9a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003a9e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003aa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003aae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ab6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003aba:	e021      	b.n	8003b00 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	ee07 3a90 	vmov	s15, r3
 8003ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ac6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003bbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003aca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ace:	4b37      	ldr	r3, [pc, #220]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ad0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ad6:	ee07 3a90 	vmov	s15, r3
 8003ada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ade:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ae2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003aea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003aee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003af2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003af6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003afa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003afe:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003b00:	4b2a      	ldr	r3, [pc, #168]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b04:	0a5b      	lsrs	r3, r3, #9
 8003b06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b0a:	ee07 3a90 	vmov	s15, r3
 8003b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b26:	ee17 2a90 	vmov	r2, s15
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003b2e:	4b1f      	ldr	r3, [pc, #124]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b32:	0c1b      	lsrs	r3, r3, #16
 8003b34:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b38:	ee07 3a90 	vmov	s15, r3
 8003b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b40:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b44:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b48:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b50:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b54:	ee17 2a90 	vmov	r2, s15
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003b5c:	4b13      	ldr	r3, [pc, #76]	@ (8003bac <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b60:	0e1b      	lsrs	r3, r3, #24
 8003b62:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b66:	ee07 3a90 	vmov	s15, r3
 8003b6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b6e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003b72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b76:	edd7 6a07 	vldr	s13, [r7, #28]
 8003b7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b82:	ee17 2a90 	vmov	r2, s15
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003b8a:	e008      	b.n	8003b9e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2200      	movs	r2, #0
 8003b96:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	609a      	str	r2, [r3, #8]
}
 8003b9e:	bf00      	nop
 8003ba0:	3724      	adds	r7, #36	@ 0x24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba8:	4770      	bx	lr
 8003baa:	bf00      	nop
 8003bac:	58024400 	.word	0x58024400
 8003bb0:	03d09000 	.word	0x03d09000
 8003bb4:	46000000 	.word	0x46000000
 8003bb8:	4c742400 	.word	0x4c742400
 8003bbc:	4a742400 	.word	0x4a742400
 8003bc0:	4bbebc20 	.word	0x4bbebc20

08003bc4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b089      	sub	sp, #36	@ 0x24
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bcc:	4ba1      	ldr	r3, [pc, #644]	@ (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bd0:	f003 0303 	and.w	r3, r3, #3
 8003bd4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003bd6:	4b9f      	ldr	r3, [pc, #636]	@ (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bda:	0d1b      	lsrs	r3, r3, #20
 8003bdc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003be0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003be2:	4b9c      	ldr	r3, [pc, #624]	@ (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003be4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003be6:	0a1b      	lsrs	r3, r3, #8
 8003be8:	f003 0301 	and.w	r3, r3, #1
 8003bec:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003bee:	4b99      	ldr	r3, [pc, #612]	@ (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bf2:	08db      	lsrs	r3, r3, #3
 8003bf4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bf8:	693a      	ldr	r2, [r7, #16]
 8003bfa:	fb02 f303 	mul.w	r3, r2, r3
 8003bfe:	ee07 3a90 	vmov	s15, r3
 8003c02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c06:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 8111 	beq.w	8003e34 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003c12:	69bb      	ldr	r3, [r7, #24]
 8003c14:	2b02      	cmp	r3, #2
 8003c16:	f000 8083 	beq.w	8003d20 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003c1a:	69bb      	ldr	r3, [r7, #24]
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	f200 80a1 	bhi.w	8003d64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003c28:	69bb      	ldr	r3, [r7, #24]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d056      	beq.n	8003cdc <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003c2e:	e099      	b.n	8003d64 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c30:	4b88      	ldr	r3, [pc, #544]	@ (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f003 0320 	and.w	r3, r3, #32
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d02d      	beq.n	8003c98 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003c3c:	4b85      	ldr	r3, [pc, #532]	@ (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	08db      	lsrs	r3, r3, #3
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	4a84      	ldr	r2, [pc, #528]	@ (8003e58 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003c48:	fa22 f303 	lsr.w	r3, r2, r3
 8003c4c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	ee07 3a90 	vmov	s15, r3
 8003c54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c58:	697b      	ldr	r3, [r7, #20]
 8003c5a:	ee07 3a90 	vmov	s15, r3
 8003c5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c66:	4b7b      	ldr	r3, [pc, #492]	@ (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c6e:	ee07 3a90 	vmov	s15, r3
 8003c72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c76:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c7a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003c7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c86:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c92:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003c96:	e087      	b.n	8003da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003c98:	697b      	ldr	r3, [r7, #20]
 8003c9a:	ee07 3a90 	vmov	s15, r3
 8003c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003e60 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003ca6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003caa:	4b6a      	ldr	r3, [pc, #424]	@ (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cb2:	ee07 3a90 	vmov	s15, r3
 8003cb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cba:	ed97 6a03 	vldr	s12, [r7, #12]
 8003cbe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003cc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003cce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cd6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cda:	e065      	b.n	8003da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	ee07 3a90 	vmov	s15, r3
 8003ce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ce6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003e64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003cea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cee:	4b59      	ldr	r3, [pc, #356]	@ (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cf6:	ee07 3a90 	vmov	s15, r3
 8003cfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d02:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d1e:	e043      	b.n	8003da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	ee07 3a90 	vmov	s15, r3
 8003d26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003e68 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003d2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d32:	4b48      	ldr	r3, [pc, #288]	@ (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3a:	ee07 3a90 	vmov	s15, r3
 8003d3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d42:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d46:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d62:	e021      	b.n	8003da8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	ee07 3a90 	vmov	s15, r3
 8003d6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d6e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003e64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003d72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d76:	4b37      	ldr	r3, [pc, #220]	@ (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d7e:	ee07 3a90 	vmov	s15, r3
 8003d82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d86:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d8a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003e5c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003d8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003d9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003da6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003da8:	4b2a      	ldr	r3, [pc, #168]	@ (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dac:	0a5b      	lsrs	r3, r3, #9
 8003dae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003db2:	ee07 3a90 	vmov	s15, r3
 8003db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003dbe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dc2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dc6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dce:	ee17 2a90 	vmov	r2, s15
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003dd6:	4b1f      	ldr	r3, [pc, #124]	@ (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dda:	0c1b      	lsrs	r3, r3, #16
 8003ddc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003de0:	ee07 3a90 	vmov	s15, r3
 8003de4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003de8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003dec:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003df0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003df4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003df8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dfc:	ee17 2a90 	vmov	r2, s15
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003e04:	4b13      	ldr	r3, [pc, #76]	@ (8003e54 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e08:	0e1b      	lsrs	r3, r3, #24
 8003e0a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003e0e:	ee07 3a90 	vmov	s15, r3
 8003e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e16:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003e1a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003e1e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003e22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003e26:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e2a:	ee17 2a90 	vmov	r2, s15
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003e32:	e008      	b.n	8003e46 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2200      	movs	r2, #0
 8003e38:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	2200      	movs	r2, #0
 8003e44:	609a      	str	r2, [r3, #8]
}
 8003e46:	bf00      	nop
 8003e48:	3724      	adds	r7, #36	@ 0x24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e50:	4770      	bx	lr
 8003e52:	bf00      	nop
 8003e54:	58024400 	.word	0x58024400
 8003e58:	03d09000 	.word	0x03d09000
 8003e5c:	46000000 	.word	0x46000000
 8003e60:	4c742400 	.word	0x4c742400
 8003e64:	4a742400 	.word	0x4a742400
 8003e68:	4bbebc20 	.word	0x4bbebc20

08003e6c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003e7a:	4b53      	ldr	r3, [pc, #332]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e7e:	f003 0303 	and.w	r3, r3, #3
 8003e82:	2b03      	cmp	r3, #3
 8003e84:	d101      	bne.n	8003e8a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	e099      	b.n	8003fbe <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8003e8a:	4b4f      	ldr	r3, [pc, #316]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4a4e      	ldr	r2, [pc, #312]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003e90:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8003e94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e96:	f7fc ffaf 	bl	8000df8 <HAL_GetTick>
 8003e9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003e9c:	e008      	b.n	8003eb0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003e9e:	f7fc ffab 	bl	8000df8 <HAL_GetTick>
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	1ad3      	subs	r3, r2, r3
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d901      	bls.n	8003eb0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8003eac:	2303      	movs	r3, #3
 8003eae:	e086      	b.n	8003fbe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8003eb0:	4b45      	ldr	r3, [pc, #276]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1f0      	bne.n	8003e9e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8003ebc:	4b42      	ldr	r3, [pc, #264]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003ebe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ec0:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	031b      	lsls	r3, r3, #12
 8003eca:	493f      	ldr	r1, [pc, #252]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	628b      	str	r3, [r1, #40]	@ 0x28
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	3b01      	subs	r3, #1
 8003ed6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	025b      	lsls	r3, r3, #9
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	68db      	ldr	r3, [r3, #12]
 8003eea:	3b01      	subs	r3, #1
 8003eec:	041b      	lsls	r3, r3, #16
 8003eee:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8003ef2:	431a      	orrs	r2, r3
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	691b      	ldr	r3, [r3, #16]
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	061b      	lsls	r3, r3, #24
 8003efc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8003f00:	4931      	ldr	r1, [pc, #196]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f02:	4313      	orrs	r3, r2
 8003f04:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8003f06:	4b30      	ldr	r3, [pc, #192]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	695b      	ldr	r3, [r3, #20]
 8003f12:	492d      	ldr	r1, [pc, #180]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f14:	4313      	orrs	r3, r2
 8003f16:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8003f18:	4b2b      	ldr	r3, [pc, #172]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f1c:	f023 0220 	bic.w	r2, r3, #32
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	4928      	ldr	r1, [pc, #160]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f26:	4313      	orrs	r3, r2
 8003f28:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8003f2a:	4b27      	ldr	r3, [pc, #156]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f2e:	4a26      	ldr	r2, [pc, #152]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f30:	f023 0310 	bic.w	r3, r3, #16
 8003f34:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8003f36:	4b24      	ldr	r3, [pc, #144]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f38:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003f3a:	4b24      	ldr	r3, [pc, #144]	@ (8003fcc <RCCEx_PLL2_Config+0x160>)
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	687a      	ldr	r2, [r7, #4]
 8003f40:	69d2      	ldr	r2, [r2, #28]
 8003f42:	00d2      	lsls	r2, r2, #3
 8003f44:	4920      	ldr	r1, [pc, #128]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8003f4a:	4b1f      	ldr	r3, [pc, #124]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f4e:	4a1e      	ldr	r2, [pc, #120]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f50:	f043 0310 	orr.w	r3, r3, #16
 8003f54:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d106      	bne.n	8003f6a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8003f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f60:	4a19      	ldr	r2, [pc, #100]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f62:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8003f66:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f68:	e00f      	b.n	8003f8a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d106      	bne.n	8003f7e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8003f70:	4b15      	ldr	r3, [pc, #84]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f74:	4a14      	ldr	r2, [pc, #80]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f76:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003f7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8003f7c:	e005      	b.n	8003f8a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8003f7e:	4b12      	ldr	r3, [pc, #72]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f82:	4a11      	ldr	r2, [pc, #68]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f84:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003f88:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8003f8a:	4b0f      	ldr	r3, [pc, #60]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a0e      	ldr	r2, [pc, #56]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003f90:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003f94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f96:	f7fc ff2f 	bl	8000df8 <HAL_GetTick>
 8003f9a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003f9c:	e008      	b.n	8003fb0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8003f9e:	f7fc ff2b 	bl	8000df8 <HAL_GetTick>
 8003fa2:	4602      	mov	r2, r0
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	1ad3      	subs	r3, r2, r3
 8003fa8:	2b02      	cmp	r3, #2
 8003faa:	d901      	bls.n	8003fb0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8003fac:	2303      	movs	r3, #3
 8003fae:	e006      	b.n	8003fbe <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8003fb0:	4b05      	ldr	r3, [pc, #20]	@ (8003fc8 <RCCEx_PLL2_Config+0x15c>)
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d0f0      	beq.n	8003f9e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8003fbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	58024400 	.word	0x58024400
 8003fcc:	ffff0007 	.word	0xffff0007

08003fd0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b084      	sub	sp, #16
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003fda:	2300      	movs	r3, #0
 8003fdc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003fde:	4b53      	ldr	r3, [pc, #332]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003fe2:	f003 0303 	and.w	r3, r3, #3
 8003fe6:	2b03      	cmp	r3, #3
 8003fe8:	d101      	bne.n	8003fee <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8003fea:	2301      	movs	r3, #1
 8003fec:	e099      	b.n	8004122 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8003fee:	4b4f      	ldr	r3, [pc, #316]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	4a4e      	ldr	r2, [pc, #312]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 8003ff4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003ff8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ffa:	f7fc fefd 	bl	8000df8 <HAL_GetTick>
 8003ffe:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004000:	e008      	b.n	8004014 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004002:	f7fc fef9 	bl	8000df8 <HAL_GetTick>
 8004006:	4602      	mov	r2, r0
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	1ad3      	subs	r3, r2, r3
 800400c:	2b02      	cmp	r3, #2
 800400e:	d901      	bls.n	8004014 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004010:	2303      	movs	r3, #3
 8004012:	e086      	b.n	8004122 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004014:	4b45      	ldr	r3, [pc, #276]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1f0      	bne.n	8004002 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004020:	4b42      	ldr	r3, [pc, #264]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 8004022:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004024:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	051b      	lsls	r3, r3, #20
 800402e:	493f      	ldr	r1, [pc, #252]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 8004030:	4313      	orrs	r3, r2
 8004032:	628b      	str	r3, [r1, #40]	@ 0x28
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	3b01      	subs	r3, #1
 800403a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	3b01      	subs	r3, #1
 8004044:	025b      	lsls	r3, r3, #9
 8004046:	b29b      	uxth	r3, r3
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	3b01      	subs	r3, #1
 8004050:	041b      	lsls	r3, r3, #16
 8004052:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8004056:	431a      	orrs	r2, r3
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	3b01      	subs	r3, #1
 800405e:	061b      	lsls	r3, r3, #24
 8004060:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8004064:	4931      	ldr	r1, [pc, #196]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 8004066:	4313      	orrs	r3, r2
 8004068:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800406a:	4b30      	ldr	r3, [pc, #192]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 800406c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800406e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	695b      	ldr	r3, [r3, #20]
 8004076:	492d      	ldr	r1, [pc, #180]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 8004078:	4313      	orrs	r3, r2
 800407a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800407c:	4b2b      	ldr	r3, [pc, #172]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 800407e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004080:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	699b      	ldr	r3, [r3, #24]
 8004088:	4928      	ldr	r1, [pc, #160]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 800408a:	4313      	orrs	r3, r2
 800408c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800408e:	4b27      	ldr	r3, [pc, #156]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 8004090:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004092:	4a26      	ldr	r2, [pc, #152]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 8004094:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004098:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800409a:	4b24      	ldr	r3, [pc, #144]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 800409c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800409e:	4b24      	ldr	r3, [pc, #144]	@ (8004130 <RCCEx_PLL3_Config+0x160>)
 80040a0:	4013      	ands	r3, r2
 80040a2:	687a      	ldr	r2, [r7, #4]
 80040a4:	69d2      	ldr	r2, [r2, #28]
 80040a6:	00d2      	lsls	r2, r2, #3
 80040a8:	4920      	ldr	r1, [pc, #128]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80040ae:	4b1f      	ldr	r3, [pc, #124]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 80040b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040b2:	4a1e      	ldr	r2, [pc, #120]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 80040b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d106      	bne.n	80040ce <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 80040c0:	4b1a      	ldr	r3, [pc, #104]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 80040c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040c4:	4a19      	ldr	r2, [pc, #100]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 80040c6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80040ca:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80040cc:	e00f      	b.n	80040ee <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d106      	bne.n	80040e2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 80040d4:	4b15      	ldr	r3, [pc, #84]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 80040d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040d8:	4a14      	ldr	r2, [pc, #80]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 80040da:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80040de:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80040e0:	e005      	b.n	80040ee <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 80040e2:	4b12      	ldr	r3, [pc, #72]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 80040e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040e6:	4a11      	ldr	r2, [pc, #68]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 80040e8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80040ec:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 80040ee:	4b0f      	ldr	r3, [pc, #60]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a0e      	ldr	r2, [pc, #56]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 80040f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80040f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040fa:	f7fc fe7d 	bl	8000df8 <HAL_GetTick>
 80040fe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004100:	e008      	b.n	8004114 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004102:	f7fc fe79 	bl	8000df8 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	2b02      	cmp	r3, #2
 800410e:	d901      	bls.n	8004114 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e006      	b.n	8004122 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004114:	4b05      	ldr	r3, [pc, #20]	@ (800412c <RCCEx_PLL3_Config+0x15c>)
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d0f0      	beq.n	8004102 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004120:	7bfb      	ldrb	r3, [r7, #15]
}
 8004122:	4618      	mov	r0, r3
 8004124:	3710      	adds	r7, #16
 8004126:	46bd      	mov	sp, r7
 8004128:	bd80      	pop	{r7, pc}
 800412a:	bf00      	nop
 800412c:	58024400 	.word	0x58024400
 8004130:	ffff0007 	.word	0xffff0007

08004134 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e042      	b.n	80041cc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800414c:	2b00      	cmp	r3, #0
 800414e:	d106      	bne.n	800415e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004158:	6878      	ldr	r0, [r7, #4]
 800415a:	f7fc fd01 	bl	8000b60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	2224      	movs	r2, #36	@ 0x24
 8004162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	681a      	ldr	r2, [r3, #0]
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f022 0201 	bic.w	r2, r2, #1
 8004174:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800417a:	2b00      	cmp	r3, #0
 800417c:	d002      	beq.n	8004184 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f000 fd90 	bl	8004ca4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 f825 	bl	80041d4 <UART_SetConfig>
 800418a:	4603      	mov	r3, r0
 800418c:	2b01      	cmp	r3, #1
 800418e:	d101      	bne.n	8004194 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e01b      	b.n	80041cc <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	685a      	ldr	r2, [r3, #4]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80041a2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689a      	ldr	r2, [r3, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80041b2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0201 	orr.w	r2, r2, #1
 80041c2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 fe0f 	bl	8004de8 <UART_CheckIdleState>
 80041ca:	4603      	mov	r3, r0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041d8:	b092      	sub	sp, #72	@ 0x48
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041de:	2300      	movs	r3, #0
 80041e0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	689a      	ldr	r2, [r3, #8]
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	431a      	orrs	r2, r3
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	431a      	orrs	r2, r3
 80041f4:	697b      	ldr	r3, [r7, #20]
 80041f6:	69db      	ldr	r3, [r3, #28]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4bbe      	ldr	r3, [pc, #760]	@ (80044fc <UART_SetConfig+0x328>)
 8004204:	4013      	ands	r3, r2
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	6812      	ldr	r2, [r2, #0]
 800420a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800420c:	430b      	orrs	r3, r1
 800420e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	68da      	ldr	r2, [r3, #12]
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	430a      	orrs	r2, r1
 8004224:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004226:	697b      	ldr	r3, [r7, #20]
 8004228:	699b      	ldr	r3, [r3, #24]
 800422a:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4ab3      	ldr	r2, [pc, #716]	@ (8004500 <UART_SetConfig+0x32c>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d004      	beq.n	8004240 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800423c:	4313      	orrs	r3, r2
 800423e:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	4baf      	ldr	r3, [pc, #700]	@ (8004504 <UART_SetConfig+0x330>)
 8004248:	4013      	ands	r3, r2
 800424a:	697a      	ldr	r2, [r7, #20]
 800424c:	6812      	ldr	r2, [r2, #0]
 800424e:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004250:	430b      	orrs	r3, r1
 8004252:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004254:	697b      	ldr	r3, [r7, #20]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800425a:	f023 010f 	bic.w	r1, r3, #15
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	430a      	orrs	r2, r1
 8004268:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4aa6      	ldr	r2, [pc, #664]	@ (8004508 <UART_SetConfig+0x334>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d177      	bne.n	8004364 <UART_SetConfig+0x190>
 8004274:	4ba5      	ldr	r3, [pc, #660]	@ (800450c <UART_SetConfig+0x338>)
 8004276:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004278:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800427c:	2b28      	cmp	r3, #40	@ 0x28
 800427e:	d86d      	bhi.n	800435c <UART_SetConfig+0x188>
 8004280:	a201      	add	r2, pc, #4	@ (adr r2, 8004288 <UART_SetConfig+0xb4>)
 8004282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004286:	bf00      	nop
 8004288:	0800432d 	.word	0x0800432d
 800428c:	0800435d 	.word	0x0800435d
 8004290:	0800435d 	.word	0x0800435d
 8004294:	0800435d 	.word	0x0800435d
 8004298:	0800435d 	.word	0x0800435d
 800429c:	0800435d 	.word	0x0800435d
 80042a0:	0800435d 	.word	0x0800435d
 80042a4:	0800435d 	.word	0x0800435d
 80042a8:	08004335 	.word	0x08004335
 80042ac:	0800435d 	.word	0x0800435d
 80042b0:	0800435d 	.word	0x0800435d
 80042b4:	0800435d 	.word	0x0800435d
 80042b8:	0800435d 	.word	0x0800435d
 80042bc:	0800435d 	.word	0x0800435d
 80042c0:	0800435d 	.word	0x0800435d
 80042c4:	0800435d 	.word	0x0800435d
 80042c8:	0800433d 	.word	0x0800433d
 80042cc:	0800435d 	.word	0x0800435d
 80042d0:	0800435d 	.word	0x0800435d
 80042d4:	0800435d 	.word	0x0800435d
 80042d8:	0800435d 	.word	0x0800435d
 80042dc:	0800435d 	.word	0x0800435d
 80042e0:	0800435d 	.word	0x0800435d
 80042e4:	0800435d 	.word	0x0800435d
 80042e8:	08004345 	.word	0x08004345
 80042ec:	0800435d 	.word	0x0800435d
 80042f0:	0800435d 	.word	0x0800435d
 80042f4:	0800435d 	.word	0x0800435d
 80042f8:	0800435d 	.word	0x0800435d
 80042fc:	0800435d 	.word	0x0800435d
 8004300:	0800435d 	.word	0x0800435d
 8004304:	0800435d 	.word	0x0800435d
 8004308:	0800434d 	.word	0x0800434d
 800430c:	0800435d 	.word	0x0800435d
 8004310:	0800435d 	.word	0x0800435d
 8004314:	0800435d 	.word	0x0800435d
 8004318:	0800435d 	.word	0x0800435d
 800431c:	0800435d 	.word	0x0800435d
 8004320:	0800435d 	.word	0x0800435d
 8004324:	0800435d 	.word	0x0800435d
 8004328:	08004355 	.word	0x08004355
 800432c:	2301      	movs	r3, #1
 800432e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004332:	e222      	b.n	800477a <UART_SetConfig+0x5a6>
 8004334:	2304      	movs	r3, #4
 8004336:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800433a:	e21e      	b.n	800477a <UART_SetConfig+0x5a6>
 800433c:	2308      	movs	r3, #8
 800433e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004342:	e21a      	b.n	800477a <UART_SetConfig+0x5a6>
 8004344:	2310      	movs	r3, #16
 8004346:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800434a:	e216      	b.n	800477a <UART_SetConfig+0x5a6>
 800434c:	2320      	movs	r3, #32
 800434e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004352:	e212      	b.n	800477a <UART_SetConfig+0x5a6>
 8004354:	2340      	movs	r3, #64	@ 0x40
 8004356:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800435a:	e20e      	b.n	800477a <UART_SetConfig+0x5a6>
 800435c:	2380      	movs	r3, #128	@ 0x80
 800435e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004362:	e20a      	b.n	800477a <UART_SetConfig+0x5a6>
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a69      	ldr	r2, [pc, #420]	@ (8004510 <UART_SetConfig+0x33c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d130      	bne.n	80043d0 <UART_SetConfig+0x1fc>
 800436e:	4b67      	ldr	r3, [pc, #412]	@ (800450c <UART_SetConfig+0x338>)
 8004370:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	2b05      	cmp	r3, #5
 8004378:	d826      	bhi.n	80043c8 <UART_SetConfig+0x1f4>
 800437a:	a201      	add	r2, pc, #4	@ (adr r2, 8004380 <UART_SetConfig+0x1ac>)
 800437c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004380:	08004399 	.word	0x08004399
 8004384:	080043a1 	.word	0x080043a1
 8004388:	080043a9 	.word	0x080043a9
 800438c:	080043b1 	.word	0x080043b1
 8004390:	080043b9 	.word	0x080043b9
 8004394:	080043c1 	.word	0x080043c1
 8004398:	2300      	movs	r3, #0
 800439a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800439e:	e1ec      	b.n	800477a <UART_SetConfig+0x5a6>
 80043a0:	2304      	movs	r3, #4
 80043a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043a6:	e1e8      	b.n	800477a <UART_SetConfig+0x5a6>
 80043a8:	2308      	movs	r3, #8
 80043aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ae:	e1e4      	b.n	800477a <UART_SetConfig+0x5a6>
 80043b0:	2310      	movs	r3, #16
 80043b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043b6:	e1e0      	b.n	800477a <UART_SetConfig+0x5a6>
 80043b8:	2320      	movs	r3, #32
 80043ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043be:	e1dc      	b.n	800477a <UART_SetConfig+0x5a6>
 80043c0:	2340      	movs	r3, #64	@ 0x40
 80043c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043c6:	e1d8      	b.n	800477a <UART_SetConfig+0x5a6>
 80043c8:	2380      	movs	r3, #128	@ 0x80
 80043ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80043ce:	e1d4      	b.n	800477a <UART_SetConfig+0x5a6>
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a4f      	ldr	r2, [pc, #316]	@ (8004514 <UART_SetConfig+0x340>)
 80043d6:	4293      	cmp	r3, r2
 80043d8:	d130      	bne.n	800443c <UART_SetConfig+0x268>
 80043da:	4b4c      	ldr	r3, [pc, #304]	@ (800450c <UART_SetConfig+0x338>)
 80043dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043de:	f003 0307 	and.w	r3, r3, #7
 80043e2:	2b05      	cmp	r3, #5
 80043e4:	d826      	bhi.n	8004434 <UART_SetConfig+0x260>
 80043e6:	a201      	add	r2, pc, #4	@ (adr r2, 80043ec <UART_SetConfig+0x218>)
 80043e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ec:	08004405 	.word	0x08004405
 80043f0:	0800440d 	.word	0x0800440d
 80043f4:	08004415 	.word	0x08004415
 80043f8:	0800441d 	.word	0x0800441d
 80043fc:	08004425 	.word	0x08004425
 8004400:	0800442d 	.word	0x0800442d
 8004404:	2300      	movs	r3, #0
 8004406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800440a:	e1b6      	b.n	800477a <UART_SetConfig+0x5a6>
 800440c:	2304      	movs	r3, #4
 800440e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004412:	e1b2      	b.n	800477a <UART_SetConfig+0x5a6>
 8004414:	2308      	movs	r3, #8
 8004416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800441a:	e1ae      	b.n	800477a <UART_SetConfig+0x5a6>
 800441c:	2310      	movs	r3, #16
 800441e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004422:	e1aa      	b.n	800477a <UART_SetConfig+0x5a6>
 8004424:	2320      	movs	r3, #32
 8004426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800442a:	e1a6      	b.n	800477a <UART_SetConfig+0x5a6>
 800442c:	2340      	movs	r3, #64	@ 0x40
 800442e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004432:	e1a2      	b.n	800477a <UART_SetConfig+0x5a6>
 8004434:	2380      	movs	r3, #128	@ 0x80
 8004436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800443a:	e19e      	b.n	800477a <UART_SetConfig+0x5a6>
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a35      	ldr	r2, [pc, #212]	@ (8004518 <UART_SetConfig+0x344>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d130      	bne.n	80044a8 <UART_SetConfig+0x2d4>
 8004446:	4b31      	ldr	r3, [pc, #196]	@ (800450c <UART_SetConfig+0x338>)
 8004448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	2b05      	cmp	r3, #5
 8004450:	d826      	bhi.n	80044a0 <UART_SetConfig+0x2cc>
 8004452:	a201      	add	r2, pc, #4	@ (adr r2, 8004458 <UART_SetConfig+0x284>)
 8004454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004458:	08004471 	.word	0x08004471
 800445c:	08004479 	.word	0x08004479
 8004460:	08004481 	.word	0x08004481
 8004464:	08004489 	.word	0x08004489
 8004468:	08004491 	.word	0x08004491
 800446c:	08004499 	.word	0x08004499
 8004470:	2300      	movs	r3, #0
 8004472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004476:	e180      	b.n	800477a <UART_SetConfig+0x5a6>
 8004478:	2304      	movs	r3, #4
 800447a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800447e:	e17c      	b.n	800477a <UART_SetConfig+0x5a6>
 8004480:	2308      	movs	r3, #8
 8004482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004486:	e178      	b.n	800477a <UART_SetConfig+0x5a6>
 8004488:	2310      	movs	r3, #16
 800448a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800448e:	e174      	b.n	800477a <UART_SetConfig+0x5a6>
 8004490:	2320      	movs	r3, #32
 8004492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004496:	e170      	b.n	800477a <UART_SetConfig+0x5a6>
 8004498:	2340      	movs	r3, #64	@ 0x40
 800449a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800449e:	e16c      	b.n	800477a <UART_SetConfig+0x5a6>
 80044a0:	2380      	movs	r3, #128	@ 0x80
 80044a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044a6:	e168      	b.n	800477a <UART_SetConfig+0x5a6>
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a1b      	ldr	r2, [pc, #108]	@ (800451c <UART_SetConfig+0x348>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d142      	bne.n	8004538 <UART_SetConfig+0x364>
 80044b2:	4b16      	ldr	r3, [pc, #88]	@ (800450c <UART_SetConfig+0x338>)
 80044b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	2b05      	cmp	r3, #5
 80044bc:	d838      	bhi.n	8004530 <UART_SetConfig+0x35c>
 80044be:	a201      	add	r2, pc, #4	@ (adr r2, 80044c4 <UART_SetConfig+0x2f0>)
 80044c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c4:	080044dd 	.word	0x080044dd
 80044c8:	080044e5 	.word	0x080044e5
 80044cc:	080044ed 	.word	0x080044ed
 80044d0:	080044f5 	.word	0x080044f5
 80044d4:	08004521 	.word	0x08004521
 80044d8:	08004529 	.word	0x08004529
 80044dc:	2300      	movs	r3, #0
 80044de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044e2:	e14a      	b.n	800477a <UART_SetConfig+0x5a6>
 80044e4:	2304      	movs	r3, #4
 80044e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044ea:	e146      	b.n	800477a <UART_SetConfig+0x5a6>
 80044ec:	2308      	movs	r3, #8
 80044ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044f2:	e142      	b.n	800477a <UART_SetConfig+0x5a6>
 80044f4:	2310      	movs	r3, #16
 80044f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044fa:	e13e      	b.n	800477a <UART_SetConfig+0x5a6>
 80044fc:	cfff69f3 	.word	0xcfff69f3
 8004500:	58000c00 	.word	0x58000c00
 8004504:	11fff4ff 	.word	0x11fff4ff
 8004508:	40011000 	.word	0x40011000
 800450c:	58024400 	.word	0x58024400
 8004510:	40004400 	.word	0x40004400
 8004514:	40004800 	.word	0x40004800
 8004518:	40004c00 	.word	0x40004c00
 800451c:	40005000 	.word	0x40005000
 8004520:	2320      	movs	r3, #32
 8004522:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004526:	e128      	b.n	800477a <UART_SetConfig+0x5a6>
 8004528:	2340      	movs	r3, #64	@ 0x40
 800452a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800452e:	e124      	b.n	800477a <UART_SetConfig+0x5a6>
 8004530:	2380      	movs	r3, #128	@ 0x80
 8004532:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004536:	e120      	b.n	800477a <UART_SetConfig+0x5a6>
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	4acb      	ldr	r2, [pc, #812]	@ (800486c <UART_SetConfig+0x698>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d176      	bne.n	8004630 <UART_SetConfig+0x45c>
 8004542:	4bcb      	ldr	r3, [pc, #812]	@ (8004870 <UART_SetConfig+0x69c>)
 8004544:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004546:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800454a:	2b28      	cmp	r3, #40	@ 0x28
 800454c:	d86c      	bhi.n	8004628 <UART_SetConfig+0x454>
 800454e:	a201      	add	r2, pc, #4	@ (adr r2, 8004554 <UART_SetConfig+0x380>)
 8004550:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004554:	080045f9 	.word	0x080045f9
 8004558:	08004629 	.word	0x08004629
 800455c:	08004629 	.word	0x08004629
 8004560:	08004629 	.word	0x08004629
 8004564:	08004629 	.word	0x08004629
 8004568:	08004629 	.word	0x08004629
 800456c:	08004629 	.word	0x08004629
 8004570:	08004629 	.word	0x08004629
 8004574:	08004601 	.word	0x08004601
 8004578:	08004629 	.word	0x08004629
 800457c:	08004629 	.word	0x08004629
 8004580:	08004629 	.word	0x08004629
 8004584:	08004629 	.word	0x08004629
 8004588:	08004629 	.word	0x08004629
 800458c:	08004629 	.word	0x08004629
 8004590:	08004629 	.word	0x08004629
 8004594:	08004609 	.word	0x08004609
 8004598:	08004629 	.word	0x08004629
 800459c:	08004629 	.word	0x08004629
 80045a0:	08004629 	.word	0x08004629
 80045a4:	08004629 	.word	0x08004629
 80045a8:	08004629 	.word	0x08004629
 80045ac:	08004629 	.word	0x08004629
 80045b0:	08004629 	.word	0x08004629
 80045b4:	08004611 	.word	0x08004611
 80045b8:	08004629 	.word	0x08004629
 80045bc:	08004629 	.word	0x08004629
 80045c0:	08004629 	.word	0x08004629
 80045c4:	08004629 	.word	0x08004629
 80045c8:	08004629 	.word	0x08004629
 80045cc:	08004629 	.word	0x08004629
 80045d0:	08004629 	.word	0x08004629
 80045d4:	08004619 	.word	0x08004619
 80045d8:	08004629 	.word	0x08004629
 80045dc:	08004629 	.word	0x08004629
 80045e0:	08004629 	.word	0x08004629
 80045e4:	08004629 	.word	0x08004629
 80045e8:	08004629 	.word	0x08004629
 80045ec:	08004629 	.word	0x08004629
 80045f0:	08004629 	.word	0x08004629
 80045f4:	08004621 	.word	0x08004621
 80045f8:	2301      	movs	r3, #1
 80045fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045fe:	e0bc      	b.n	800477a <UART_SetConfig+0x5a6>
 8004600:	2304      	movs	r3, #4
 8004602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004606:	e0b8      	b.n	800477a <UART_SetConfig+0x5a6>
 8004608:	2308      	movs	r3, #8
 800460a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800460e:	e0b4      	b.n	800477a <UART_SetConfig+0x5a6>
 8004610:	2310      	movs	r3, #16
 8004612:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004616:	e0b0      	b.n	800477a <UART_SetConfig+0x5a6>
 8004618:	2320      	movs	r3, #32
 800461a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800461e:	e0ac      	b.n	800477a <UART_SetConfig+0x5a6>
 8004620:	2340      	movs	r3, #64	@ 0x40
 8004622:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004626:	e0a8      	b.n	800477a <UART_SetConfig+0x5a6>
 8004628:	2380      	movs	r3, #128	@ 0x80
 800462a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800462e:	e0a4      	b.n	800477a <UART_SetConfig+0x5a6>
 8004630:	697b      	ldr	r3, [r7, #20]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	4a8f      	ldr	r2, [pc, #572]	@ (8004874 <UART_SetConfig+0x6a0>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d130      	bne.n	800469c <UART_SetConfig+0x4c8>
 800463a:	4b8d      	ldr	r3, [pc, #564]	@ (8004870 <UART_SetConfig+0x69c>)
 800463c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	2b05      	cmp	r3, #5
 8004644:	d826      	bhi.n	8004694 <UART_SetConfig+0x4c0>
 8004646:	a201      	add	r2, pc, #4	@ (adr r2, 800464c <UART_SetConfig+0x478>)
 8004648:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800464c:	08004665 	.word	0x08004665
 8004650:	0800466d 	.word	0x0800466d
 8004654:	08004675 	.word	0x08004675
 8004658:	0800467d 	.word	0x0800467d
 800465c:	08004685 	.word	0x08004685
 8004660:	0800468d 	.word	0x0800468d
 8004664:	2300      	movs	r3, #0
 8004666:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800466a:	e086      	b.n	800477a <UART_SetConfig+0x5a6>
 800466c:	2304      	movs	r3, #4
 800466e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004672:	e082      	b.n	800477a <UART_SetConfig+0x5a6>
 8004674:	2308      	movs	r3, #8
 8004676:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800467a:	e07e      	b.n	800477a <UART_SetConfig+0x5a6>
 800467c:	2310      	movs	r3, #16
 800467e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004682:	e07a      	b.n	800477a <UART_SetConfig+0x5a6>
 8004684:	2320      	movs	r3, #32
 8004686:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800468a:	e076      	b.n	800477a <UART_SetConfig+0x5a6>
 800468c:	2340      	movs	r3, #64	@ 0x40
 800468e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004692:	e072      	b.n	800477a <UART_SetConfig+0x5a6>
 8004694:	2380      	movs	r3, #128	@ 0x80
 8004696:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800469a:	e06e      	b.n	800477a <UART_SetConfig+0x5a6>
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	4a75      	ldr	r2, [pc, #468]	@ (8004878 <UART_SetConfig+0x6a4>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d130      	bne.n	8004708 <UART_SetConfig+0x534>
 80046a6:	4b72      	ldr	r3, [pc, #456]	@ (8004870 <UART_SetConfig+0x69c>)
 80046a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	2b05      	cmp	r3, #5
 80046b0:	d826      	bhi.n	8004700 <UART_SetConfig+0x52c>
 80046b2:	a201      	add	r2, pc, #4	@ (adr r2, 80046b8 <UART_SetConfig+0x4e4>)
 80046b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b8:	080046d1 	.word	0x080046d1
 80046bc:	080046d9 	.word	0x080046d9
 80046c0:	080046e1 	.word	0x080046e1
 80046c4:	080046e9 	.word	0x080046e9
 80046c8:	080046f1 	.word	0x080046f1
 80046cc:	080046f9 	.word	0x080046f9
 80046d0:	2300      	movs	r3, #0
 80046d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046d6:	e050      	b.n	800477a <UART_SetConfig+0x5a6>
 80046d8:	2304      	movs	r3, #4
 80046da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046de:	e04c      	b.n	800477a <UART_SetConfig+0x5a6>
 80046e0:	2308      	movs	r3, #8
 80046e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046e6:	e048      	b.n	800477a <UART_SetConfig+0x5a6>
 80046e8:	2310      	movs	r3, #16
 80046ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ee:	e044      	b.n	800477a <UART_SetConfig+0x5a6>
 80046f0:	2320      	movs	r3, #32
 80046f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046f6:	e040      	b.n	800477a <UART_SetConfig+0x5a6>
 80046f8:	2340      	movs	r3, #64	@ 0x40
 80046fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046fe:	e03c      	b.n	800477a <UART_SetConfig+0x5a6>
 8004700:	2380      	movs	r3, #128	@ 0x80
 8004702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004706:	e038      	b.n	800477a <UART_SetConfig+0x5a6>
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a5b      	ldr	r2, [pc, #364]	@ (800487c <UART_SetConfig+0x6a8>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d130      	bne.n	8004774 <UART_SetConfig+0x5a0>
 8004712:	4b57      	ldr	r3, [pc, #348]	@ (8004870 <UART_SetConfig+0x69c>)
 8004714:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	2b05      	cmp	r3, #5
 800471c:	d826      	bhi.n	800476c <UART_SetConfig+0x598>
 800471e:	a201      	add	r2, pc, #4	@ (adr r2, 8004724 <UART_SetConfig+0x550>)
 8004720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004724:	0800473d 	.word	0x0800473d
 8004728:	08004745 	.word	0x08004745
 800472c:	0800474d 	.word	0x0800474d
 8004730:	08004755 	.word	0x08004755
 8004734:	0800475d 	.word	0x0800475d
 8004738:	08004765 	.word	0x08004765
 800473c:	2302      	movs	r3, #2
 800473e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004742:	e01a      	b.n	800477a <UART_SetConfig+0x5a6>
 8004744:	2304      	movs	r3, #4
 8004746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800474a:	e016      	b.n	800477a <UART_SetConfig+0x5a6>
 800474c:	2308      	movs	r3, #8
 800474e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004752:	e012      	b.n	800477a <UART_SetConfig+0x5a6>
 8004754:	2310      	movs	r3, #16
 8004756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800475a:	e00e      	b.n	800477a <UART_SetConfig+0x5a6>
 800475c:	2320      	movs	r3, #32
 800475e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004762:	e00a      	b.n	800477a <UART_SetConfig+0x5a6>
 8004764:	2340      	movs	r3, #64	@ 0x40
 8004766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800476a:	e006      	b.n	800477a <UART_SetConfig+0x5a6>
 800476c:	2380      	movs	r3, #128	@ 0x80
 800476e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004772:	e002      	b.n	800477a <UART_SetConfig+0x5a6>
 8004774:	2380      	movs	r3, #128	@ 0x80
 8004776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800477a:	697b      	ldr	r3, [r7, #20]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	4a3f      	ldr	r2, [pc, #252]	@ (800487c <UART_SetConfig+0x6a8>)
 8004780:	4293      	cmp	r3, r2
 8004782:	f040 80f8 	bne.w	8004976 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004786:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800478a:	2b20      	cmp	r3, #32
 800478c:	dc46      	bgt.n	800481c <UART_SetConfig+0x648>
 800478e:	2b02      	cmp	r3, #2
 8004790:	f2c0 8082 	blt.w	8004898 <UART_SetConfig+0x6c4>
 8004794:	3b02      	subs	r3, #2
 8004796:	2b1e      	cmp	r3, #30
 8004798:	d87e      	bhi.n	8004898 <UART_SetConfig+0x6c4>
 800479a:	a201      	add	r2, pc, #4	@ (adr r2, 80047a0 <UART_SetConfig+0x5cc>)
 800479c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a0:	08004823 	.word	0x08004823
 80047a4:	08004899 	.word	0x08004899
 80047a8:	0800482b 	.word	0x0800482b
 80047ac:	08004899 	.word	0x08004899
 80047b0:	08004899 	.word	0x08004899
 80047b4:	08004899 	.word	0x08004899
 80047b8:	0800483b 	.word	0x0800483b
 80047bc:	08004899 	.word	0x08004899
 80047c0:	08004899 	.word	0x08004899
 80047c4:	08004899 	.word	0x08004899
 80047c8:	08004899 	.word	0x08004899
 80047cc:	08004899 	.word	0x08004899
 80047d0:	08004899 	.word	0x08004899
 80047d4:	08004899 	.word	0x08004899
 80047d8:	0800484b 	.word	0x0800484b
 80047dc:	08004899 	.word	0x08004899
 80047e0:	08004899 	.word	0x08004899
 80047e4:	08004899 	.word	0x08004899
 80047e8:	08004899 	.word	0x08004899
 80047ec:	08004899 	.word	0x08004899
 80047f0:	08004899 	.word	0x08004899
 80047f4:	08004899 	.word	0x08004899
 80047f8:	08004899 	.word	0x08004899
 80047fc:	08004899 	.word	0x08004899
 8004800:	08004899 	.word	0x08004899
 8004804:	08004899 	.word	0x08004899
 8004808:	08004899 	.word	0x08004899
 800480c:	08004899 	.word	0x08004899
 8004810:	08004899 	.word	0x08004899
 8004814:	08004899 	.word	0x08004899
 8004818:	0800488b 	.word	0x0800488b
 800481c:	2b40      	cmp	r3, #64	@ 0x40
 800481e:	d037      	beq.n	8004890 <UART_SetConfig+0x6bc>
 8004820:	e03a      	b.n	8004898 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004822:	f7ff f865 	bl	80038f0 <HAL_RCCEx_GetD3PCLK1Freq>
 8004826:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004828:	e03c      	b.n	80048a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800482a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff f874 	bl	800391c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004836:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004838:	e034      	b.n	80048a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800483a:	f107 0318 	add.w	r3, r7, #24
 800483e:	4618      	mov	r0, r3
 8004840:	f7ff f9c0 	bl	8003bc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004848:	e02c      	b.n	80048a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800484a:	4b09      	ldr	r3, [pc, #36]	@ (8004870 <UART_SetConfig+0x69c>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f003 0320 	and.w	r3, r3, #32
 8004852:	2b00      	cmp	r3, #0
 8004854:	d016      	beq.n	8004884 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004856:	4b06      	ldr	r3, [pc, #24]	@ (8004870 <UART_SetConfig+0x69c>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	08db      	lsrs	r3, r3, #3
 800485c:	f003 0303 	and.w	r3, r3, #3
 8004860:	4a07      	ldr	r2, [pc, #28]	@ (8004880 <UART_SetConfig+0x6ac>)
 8004862:	fa22 f303 	lsr.w	r3, r2, r3
 8004866:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004868:	e01c      	b.n	80048a4 <UART_SetConfig+0x6d0>
 800486a:	bf00      	nop
 800486c:	40011400 	.word	0x40011400
 8004870:	58024400 	.word	0x58024400
 8004874:	40007800 	.word	0x40007800
 8004878:	40007c00 	.word	0x40007c00
 800487c:	58000c00 	.word	0x58000c00
 8004880:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004884:	4b9d      	ldr	r3, [pc, #628]	@ (8004afc <UART_SetConfig+0x928>)
 8004886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004888:	e00c      	b.n	80048a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800488a:	4b9d      	ldr	r3, [pc, #628]	@ (8004b00 <UART_SetConfig+0x92c>)
 800488c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800488e:	e009      	b.n	80048a4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004890:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004894:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004896:	e005      	b.n	80048a4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80048a2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80048a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 81de 	beq.w	8004c68 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048b0:	4a94      	ldr	r2, [pc, #592]	@ (8004b04 <UART_SetConfig+0x930>)
 80048b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048b6:	461a      	mov	r2, r3
 80048b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80048be:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	685a      	ldr	r2, [r3, #4]
 80048c4:	4613      	mov	r3, r2
 80048c6:	005b      	lsls	r3, r3, #1
 80048c8:	4413      	add	r3, r2
 80048ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048cc:	429a      	cmp	r2, r3
 80048ce:	d305      	bcc.n	80048dc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80048d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80048d8:	429a      	cmp	r2, r3
 80048da:	d903      	bls.n	80048e4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80048dc:	2301      	movs	r3, #1
 80048de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80048e2:	e1c1      	b.n	8004c68 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80048e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80048e6:	2200      	movs	r2, #0
 80048e8:	60bb      	str	r3, [r7, #8]
 80048ea:	60fa      	str	r2, [r7, #12]
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f0:	4a84      	ldr	r2, [pc, #528]	@ (8004b04 <UART_SetConfig+0x930>)
 80048f2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048f6:	b29b      	uxth	r3, r3
 80048f8:	2200      	movs	r2, #0
 80048fa:	603b      	str	r3, [r7, #0]
 80048fc:	607a      	str	r2, [r7, #4]
 80048fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004902:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004906:	f7fb fce7 	bl	80002d8 <__aeabi_uldivmod>
 800490a:	4602      	mov	r2, r0
 800490c:	460b      	mov	r3, r1
 800490e:	4610      	mov	r0, r2
 8004910:	4619      	mov	r1, r3
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	020b      	lsls	r3, r1, #8
 800491c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004920:	0202      	lsls	r2, r0, #8
 8004922:	6979      	ldr	r1, [r7, #20]
 8004924:	6849      	ldr	r1, [r1, #4]
 8004926:	0849      	lsrs	r1, r1, #1
 8004928:	2000      	movs	r0, #0
 800492a:	460c      	mov	r4, r1
 800492c:	4605      	mov	r5, r0
 800492e:	eb12 0804 	adds.w	r8, r2, r4
 8004932:	eb43 0905 	adc.w	r9, r3, r5
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	469a      	mov	sl, r3
 800493e:	4693      	mov	fp, r2
 8004940:	4652      	mov	r2, sl
 8004942:	465b      	mov	r3, fp
 8004944:	4640      	mov	r0, r8
 8004946:	4649      	mov	r1, r9
 8004948:	f7fb fcc6 	bl	80002d8 <__aeabi_uldivmod>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	4613      	mov	r3, r2
 8004952:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004954:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004956:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800495a:	d308      	bcc.n	800496e <UART_SetConfig+0x79a>
 800495c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800495e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004962:	d204      	bcs.n	800496e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800496a:	60da      	str	r2, [r3, #12]
 800496c:	e17c      	b.n	8004c68 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004974:	e178      	b.n	8004c68 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004976:	697b      	ldr	r3, [r7, #20]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800497e:	f040 80c5 	bne.w	8004b0c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004982:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004986:	2b20      	cmp	r3, #32
 8004988:	dc48      	bgt.n	8004a1c <UART_SetConfig+0x848>
 800498a:	2b00      	cmp	r3, #0
 800498c:	db7b      	blt.n	8004a86 <UART_SetConfig+0x8b2>
 800498e:	2b20      	cmp	r3, #32
 8004990:	d879      	bhi.n	8004a86 <UART_SetConfig+0x8b2>
 8004992:	a201      	add	r2, pc, #4	@ (adr r2, 8004998 <UART_SetConfig+0x7c4>)
 8004994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004998:	08004a23 	.word	0x08004a23
 800499c:	08004a2b 	.word	0x08004a2b
 80049a0:	08004a87 	.word	0x08004a87
 80049a4:	08004a87 	.word	0x08004a87
 80049a8:	08004a33 	.word	0x08004a33
 80049ac:	08004a87 	.word	0x08004a87
 80049b0:	08004a87 	.word	0x08004a87
 80049b4:	08004a87 	.word	0x08004a87
 80049b8:	08004a43 	.word	0x08004a43
 80049bc:	08004a87 	.word	0x08004a87
 80049c0:	08004a87 	.word	0x08004a87
 80049c4:	08004a87 	.word	0x08004a87
 80049c8:	08004a87 	.word	0x08004a87
 80049cc:	08004a87 	.word	0x08004a87
 80049d0:	08004a87 	.word	0x08004a87
 80049d4:	08004a87 	.word	0x08004a87
 80049d8:	08004a53 	.word	0x08004a53
 80049dc:	08004a87 	.word	0x08004a87
 80049e0:	08004a87 	.word	0x08004a87
 80049e4:	08004a87 	.word	0x08004a87
 80049e8:	08004a87 	.word	0x08004a87
 80049ec:	08004a87 	.word	0x08004a87
 80049f0:	08004a87 	.word	0x08004a87
 80049f4:	08004a87 	.word	0x08004a87
 80049f8:	08004a87 	.word	0x08004a87
 80049fc:	08004a87 	.word	0x08004a87
 8004a00:	08004a87 	.word	0x08004a87
 8004a04:	08004a87 	.word	0x08004a87
 8004a08:	08004a87 	.word	0x08004a87
 8004a0c:	08004a87 	.word	0x08004a87
 8004a10:	08004a87 	.word	0x08004a87
 8004a14:	08004a87 	.word	0x08004a87
 8004a18:	08004a79 	.word	0x08004a79
 8004a1c:	2b40      	cmp	r3, #64	@ 0x40
 8004a1e:	d02e      	beq.n	8004a7e <UART_SetConfig+0x8aa>
 8004a20:	e031      	b.n	8004a86 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a22:	f7fd fd2f 	bl	8002484 <HAL_RCC_GetPCLK1Freq>
 8004a26:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004a28:	e033      	b.n	8004a92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a2a:	f7fd fd41 	bl	80024b0 <HAL_RCC_GetPCLK2Freq>
 8004a2e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004a30:	e02f      	b.n	8004a92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004a32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004a36:	4618      	mov	r0, r3
 8004a38:	f7fe ff70 	bl	800391c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004a3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a40:	e027      	b.n	8004a92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004a42:	f107 0318 	add.w	r3, r7, #24
 8004a46:	4618      	mov	r0, r3
 8004a48:	f7ff f8bc 	bl	8003bc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004a4c:	69fb      	ldr	r3, [r7, #28]
 8004a4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a50:	e01f      	b.n	8004a92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004a52:	4b2d      	ldr	r3, [pc, #180]	@ (8004b08 <UART_SetConfig+0x934>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d009      	beq.n	8004a72 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004a5e:	4b2a      	ldr	r3, [pc, #168]	@ (8004b08 <UART_SetConfig+0x934>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	08db      	lsrs	r3, r3, #3
 8004a64:	f003 0303 	and.w	r3, r3, #3
 8004a68:	4a24      	ldr	r2, [pc, #144]	@ (8004afc <UART_SetConfig+0x928>)
 8004a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004a70:	e00f      	b.n	8004a92 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004a72:	4b22      	ldr	r3, [pc, #136]	@ (8004afc <UART_SetConfig+0x928>)
 8004a74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a76:	e00c      	b.n	8004a92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004a78:	4b21      	ldr	r3, [pc, #132]	@ (8004b00 <UART_SetConfig+0x92c>)
 8004a7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a7c:	e009      	b.n	8004a92 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a7e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004a82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004a84:	e005      	b.n	8004a92 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004a86:	2300      	movs	r3, #0
 8004a88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004a90:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	f000 80e7 	beq.w	8004c68 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a9e:	4a19      	ldr	r2, [pc, #100]	@ (8004b04 <UART_SetConfig+0x930>)
 8004aa0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004aa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8004aac:	005a      	lsls	r2, r3, #1
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	085b      	lsrs	r3, r3, #1
 8004ab4:	441a      	add	r2, r3
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004abe:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac2:	2b0f      	cmp	r3, #15
 8004ac4:	d916      	bls.n	8004af4 <UART_SetConfig+0x920>
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004acc:	d212      	bcs.n	8004af4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	f023 030f 	bic.w	r3, r3, #15
 8004ad6:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ada:	085b      	lsrs	r3, r3, #1
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	b29a      	uxth	r2, r3
 8004ae4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004aea:	697b      	ldr	r3, [r7, #20]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004af0:	60da      	str	r2, [r3, #12]
 8004af2:	e0b9      	b.n	8004c68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004afa:	e0b5      	b.n	8004c68 <UART_SetConfig+0xa94>
 8004afc:	03d09000 	.word	0x03d09000
 8004b00:	003d0900 	.word	0x003d0900
 8004b04:	0800536c 	.word	0x0800536c
 8004b08:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b0c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	dc49      	bgt.n	8004ba8 <UART_SetConfig+0x9d4>
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	db7c      	blt.n	8004c12 <UART_SetConfig+0xa3e>
 8004b18:	2b20      	cmp	r3, #32
 8004b1a:	d87a      	bhi.n	8004c12 <UART_SetConfig+0xa3e>
 8004b1c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b24 <UART_SetConfig+0x950>)
 8004b1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b22:	bf00      	nop
 8004b24:	08004baf 	.word	0x08004baf
 8004b28:	08004bb7 	.word	0x08004bb7
 8004b2c:	08004c13 	.word	0x08004c13
 8004b30:	08004c13 	.word	0x08004c13
 8004b34:	08004bbf 	.word	0x08004bbf
 8004b38:	08004c13 	.word	0x08004c13
 8004b3c:	08004c13 	.word	0x08004c13
 8004b40:	08004c13 	.word	0x08004c13
 8004b44:	08004bcf 	.word	0x08004bcf
 8004b48:	08004c13 	.word	0x08004c13
 8004b4c:	08004c13 	.word	0x08004c13
 8004b50:	08004c13 	.word	0x08004c13
 8004b54:	08004c13 	.word	0x08004c13
 8004b58:	08004c13 	.word	0x08004c13
 8004b5c:	08004c13 	.word	0x08004c13
 8004b60:	08004c13 	.word	0x08004c13
 8004b64:	08004bdf 	.word	0x08004bdf
 8004b68:	08004c13 	.word	0x08004c13
 8004b6c:	08004c13 	.word	0x08004c13
 8004b70:	08004c13 	.word	0x08004c13
 8004b74:	08004c13 	.word	0x08004c13
 8004b78:	08004c13 	.word	0x08004c13
 8004b7c:	08004c13 	.word	0x08004c13
 8004b80:	08004c13 	.word	0x08004c13
 8004b84:	08004c13 	.word	0x08004c13
 8004b88:	08004c13 	.word	0x08004c13
 8004b8c:	08004c13 	.word	0x08004c13
 8004b90:	08004c13 	.word	0x08004c13
 8004b94:	08004c13 	.word	0x08004c13
 8004b98:	08004c13 	.word	0x08004c13
 8004b9c:	08004c13 	.word	0x08004c13
 8004ba0:	08004c13 	.word	0x08004c13
 8004ba4:	08004c05 	.word	0x08004c05
 8004ba8:	2b40      	cmp	r3, #64	@ 0x40
 8004baa:	d02e      	beq.n	8004c0a <UART_SetConfig+0xa36>
 8004bac:	e031      	b.n	8004c12 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bae:	f7fd fc69 	bl	8002484 <HAL_RCC_GetPCLK1Freq>
 8004bb2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004bb4:	e033      	b.n	8004c1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004bb6:	f7fd fc7b 	bl	80024b0 <HAL_RCC_GetPCLK2Freq>
 8004bba:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004bbc:	e02f      	b.n	8004c1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004bbe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	f7fe feaa 	bl	800391c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004bc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bcc:	e027      	b.n	8004c1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004bce:	f107 0318 	add.w	r3, r7, #24
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f7fe fff6 	bl	8003bc4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004bdc:	e01f      	b.n	8004c1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bde:	4b2d      	ldr	r3, [pc, #180]	@ (8004c94 <UART_SetConfig+0xac0>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f003 0320 	and.w	r3, r3, #32
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d009      	beq.n	8004bfe <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004bea:	4b2a      	ldr	r3, [pc, #168]	@ (8004c94 <UART_SetConfig+0xac0>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	08db      	lsrs	r3, r3, #3
 8004bf0:	f003 0303 	and.w	r3, r3, #3
 8004bf4:	4a28      	ldr	r2, [pc, #160]	@ (8004c98 <UART_SetConfig+0xac4>)
 8004bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004bfc:	e00f      	b.n	8004c1e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004bfe:	4b26      	ldr	r3, [pc, #152]	@ (8004c98 <UART_SetConfig+0xac4>)
 8004c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c02:	e00c      	b.n	8004c1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004c04:	4b25      	ldr	r3, [pc, #148]	@ (8004c9c <UART_SetConfig+0xac8>)
 8004c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c08:	e009      	b.n	8004c1e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c0a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004c10:	e005      	b.n	8004c1e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004c12:	2300      	movs	r3, #0
 8004c14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004c1c:	bf00      	nop
    }

    if (pclk != 0U)
 8004c1e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d021      	beq.n	8004c68 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c28:	4a1d      	ldr	r2, [pc, #116]	@ (8004ca0 <UART_SetConfig+0xacc>)
 8004c2a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c2e:	461a      	mov	r2, r3
 8004c30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c32:	fbb3 f2f2 	udiv	r2, r3, r2
 8004c36:	697b      	ldr	r3, [r7, #20]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	085b      	lsrs	r3, r3, #1
 8004c3c:	441a      	add	r2, r3
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c46:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c4a:	2b0f      	cmp	r3, #15
 8004c4c:	d909      	bls.n	8004c62 <UART_SetConfig+0xa8e>
 8004c4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c54:	d205      	bcs.n	8004c62 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c58:	b29a      	uxth	r2, r3
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	60da      	str	r2, [r3, #12]
 8004c60:	e002      	b.n	8004c68 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004c62:	2301      	movs	r3, #1
 8004c64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004c68:	697b      	ldr	r3, [r7, #20]
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	2201      	movs	r2, #1
 8004c74:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004c7e:	697b      	ldr	r3, [r7, #20]
 8004c80:	2200      	movs	r2, #0
 8004c82:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004c84:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3748      	adds	r7, #72	@ 0x48
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004c92:	bf00      	nop
 8004c94:	58024400 	.word	0x58024400
 8004c98:	03d09000 	.word	0x03d09000
 8004c9c:	003d0900 	.word	0x003d0900
 8004ca0:	0800536c 	.word	0x0800536c

08004ca4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b083      	sub	sp, #12
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb0:	f003 0308 	and.w	r3, r3, #8
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d00a      	beq.n	8004cce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	430a      	orrs	r2, r1
 8004ccc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cd2:	f003 0301 	and.w	r3, r3, #1
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d00a      	beq.n	8004cf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685b      	ldr	r3, [r3, #4]
 8004ce0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	430a      	orrs	r2, r1
 8004cee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cf4:	f003 0302 	and.w	r3, r3, #2
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00a      	beq.n	8004d12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	430a      	orrs	r2, r1
 8004d10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d16:	f003 0304 	and.w	r3, r3, #4
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d00a      	beq.n	8004d34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685b      	ldr	r3, [r3, #4]
 8004d24:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	430a      	orrs	r2, r1
 8004d32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d38:	f003 0310 	and.w	r3, r3, #16
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d00a      	beq.n	8004d56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	430a      	orrs	r2, r1
 8004d54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d5a:	f003 0320 	and.w	r3, r3, #32
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d00a      	beq.n	8004d78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	430a      	orrs	r2, r1
 8004d76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d01a      	beq.n	8004dba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	685b      	ldr	r3, [r3, #4]
 8004d8a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	430a      	orrs	r2, r1
 8004d98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d9e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004da2:	d10a      	bne.n	8004dba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	430a      	orrs	r2, r1
 8004db8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d00a      	beq.n	8004ddc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	685b      	ldr	r3, [r3, #4]
 8004dcc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	605a      	str	r2, [r3, #4]
  }
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b098      	sub	sp, #96	@ 0x60
 8004dec:	af02      	add	r7, sp, #8
 8004dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004df8:	f7fb fffe 	bl	8000df8 <HAL_GetTick>
 8004dfc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	2b08      	cmp	r3, #8
 8004e0a:	d12f      	bne.n	8004e6c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e0c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e10:	9300      	str	r3, [sp, #0]
 8004e12:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e14:	2200      	movs	r2, #0
 8004e16:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f88e 	bl	8004f3c <UART_WaitOnFlagUntilTimeout>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d022      	beq.n	8004e6c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e2e:	e853 3f00 	ldrex	r3, [r3]
 8004e32:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e36:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e3a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	461a      	mov	r2, r3
 8004e42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e44:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e46:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e48:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e4a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e4c:	e841 2300 	strex	r3, r2, [r1]
 8004e50:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e52:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d1e6      	bne.n	8004e26 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2220      	movs	r2, #32
 8004e5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2200      	movs	r2, #0
 8004e64:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e063      	b.n	8004f34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0304 	and.w	r3, r3, #4
 8004e76:	2b04      	cmp	r3, #4
 8004e78:	d149      	bne.n	8004f0e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e7a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004e7e:	9300      	str	r3, [sp, #0]
 8004e80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004e82:	2200      	movs	r2, #0
 8004e84:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004e88:	6878      	ldr	r0, [r7, #4]
 8004e8a:	f000 f857 	bl	8004f3c <UART_WaitOnFlagUntilTimeout>
 8004e8e:	4603      	mov	r3, r0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d03c      	beq.n	8004f0e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e9c:	e853 3f00 	ldrex	r3, [r3]
 8004ea0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ea8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	461a      	mov	r2, r3
 8004eb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004eb2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eb4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004eb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004eba:	e841 2300 	strex	r3, r2, [r1]
 8004ebe:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1e6      	bne.n	8004e94 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3308      	adds	r3, #8
 8004ecc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ece:	693b      	ldr	r3, [r7, #16]
 8004ed0:	e853 3f00 	ldrex	r3, [r3]
 8004ed4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	f023 0301 	bic.w	r3, r3, #1
 8004edc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	3308      	adds	r3, #8
 8004ee4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ee6:	61fa      	str	r2, [r7, #28]
 8004ee8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eea:	69b9      	ldr	r1, [r7, #24]
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	e841 2300 	strex	r3, r2, [r1]
 8004ef2:	617b      	str	r3, [r7, #20]
   return(result);
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1e5      	bne.n	8004ec6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2220      	movs	r2, #32
 8004efe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f0a:	2303      	movs	r3, #3
 8004f0c:	e012      	b.n	8004f34 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2220      	movs	r2, #32
 8004f1a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004f32:	2300      	movs	r3, #0
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	3758      	adds	r7, #88	@ 0x58
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004f3c:	b580      	push	{r7, lr}
 8004f3e:	b084      	sub	sp, #16
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	60f8      	str	r0, [r7, #12]
 8004f44:	60b9      	str	r1, [r7, #8]
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f4c:	e04f      	b.n	8004fee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f54:	d04b      	beq.n	8004fee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f56:	f7fb ff4f 	bl	8000df8 <HAL_GetTick>
 8004f5a:	4602      	mov	r2, r0
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	1ad3      	subs	r3, r2, r3
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	429a      	cmp	r2, r3
 8004f64:	d302      	bcc.n	8004f6c <UART_WaitOnFlagUntilTimeout+0x30>
 8004f66:	69bb      	ldr	r3, [r7, #24]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004f6c:	2303      	movs	r3, #3
 8004f6e:	e04e      	b.n	800500e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f003 0304 	and.w	r3, r3, #4
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d037      	beq.n	8004fee <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b80      	cmp	r3, #128	@ 0x80
 8004f82:	d034      	beq.n	8004fee <UART_WaitOnFlagUntilTimeout+0xb2>
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	2b40      	cmp	r3, #64	@ 0x40
 8004f88:	d031      	beq.n	8004fee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	69db      	ldr	r3, [r3, #28]
 8004f90:	f003 0308 	and.w	r3, r3, #8
 8004f94:	2b08      	cmp	r3, #8
 8004f96:	d110      	bne.n	8004fba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	2208      	movs	r2, #8
 8004f9e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f000 f839 	bl	8005018 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2208      	movs	r2, #8
 8004faa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e029      	b.n	800500e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	69db      	ldr	r3, [r3, #28]
 8004fc0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004fc4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004fc8:	d111      	bne.n	8004fee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004fd2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fd4:	68f8      	ldr	r0, [r7, #12]
 8004fd6:	f000 f81f 	bl	8005018 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	2220      	movs	r2, #32
 8004fde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8004fea:	2303      	movs	r3, #3
 8004fec:	e00f      	b.n	800500e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	69da      	ldr	r2, [r3, #28]
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	4013      	ands	r3, r2
 8004ff8:	68ba      	ldr	r2, [r7, #8]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	bf0c      	ite	eq
 8004ffe:	2301      	moveq	r3, #1
 8005000:	2300      	movne	r3, #0
 8005002:	b2db      	uxtb	r3, r3
 8005004:	461a      	mov	r2, r3
 8005006:	79fb      	ldrb	r3, [r7, #7]
 8005008:	429a      	cmp	r2, r3
 800500a:	d0a0      	beq.n	8004f4e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3710      	adds	r7, #16
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}
	...

08005018 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005018:	b480      	push	{r7}
 800501a:	b095      	sub	sp, #84	@ 0x54
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005026:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005028:	e853 3f00 	ldrex	r3, [r3]
 800502c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800502e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005030:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005034:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	461a      	mov	r2, r3
 800503c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800503e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005040:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005042:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005044:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005046:	e841 2300 	strex	r3, r2, [r1]
 800504a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800504c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e6      	bne.n	8005020 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3308      	adds	r3, #8
 8005058:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800505a:	6a3b      	ldr	r3, [r7, #32]
 800505c:	e853 3f00 	ldrex	r3, [r3]
 8005060:	61fb      	str	r3, [r7, #28]
   return(result);
 8005062:	69fa      	ldr	r2, [r7, #28]
 8005064:	4b1e      	ldr	r3, [pc, #120]	@ (80050e0 <UART_EndRxTransfer+0xc8>)
 8005066:	4013      	ands	r3, r2
 8005068:	64bb      	str	r3, [r7, #72]	@ 0x48
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	3308      	adds	r3, #8
 8005070:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005072:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005074:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005076:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005078:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800507a:	e841 2300 	strex	r3, r2, [r1]
 800507e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1e5      	bne.n	8005052 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800508a:	2b01      	cmp	r3, #1
 800508c:	d118      	bne.n	80050c0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	e853 3f00 	ldrex	r3, [r3]
 800509a:	60bb      	str	r3, [r7, #8]
   return(result);
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f023 0310 	bic.w	r3, r3, #16
 80050a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	461a      	mov	r2, r3
 80050aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80050ac:	61bb      	str	r3, [r7, #24]
 80050ae:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b0:	6979      	ldr	r1, [r7, #20]
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	e841 2300 	strex	r3, r2, [r1]
 80050b8:	613b      	str	r3, [r7, #16]
   return(result);
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d1e6      	bne.n	800508e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2220      	movs	r2, #32
 80050c4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80050d4:	bf00      	nop
 80050d6:	3754      	adds	r7, #84	@ 0x54
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	effffffe 	.word	0xeffffffe

080050e4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80050e4:	b480      	push	{r7}
 80050e6:	b085      	sub	sp, #20
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80050f2:	2b01      	cmp	r3, #1
 80050f4:	d101      	bne.n	80050fa <HAL_UARTEx_DisableFifoMode+0x16>
 80050f6:	2302      	movs	r3, #2
 80050f8:	e027      	b.n	800514a <HAL_UARTEx_DisableFifoMode+0x66>
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2224      	movs	r2, #36	@ 0x24
 8005106:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0201 	bic.w	r2, r2, #1
 8005120:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005128:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2200      	movs	r2, #0
 800512e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2220      	movs	r2, #32
 800513c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005148:	2300      	movs	r3, #0
}
 800514a:	4618      	mov	r0, r3
 800514c:	3714      	adds	r7, #20
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	b084      	sub	sp, #16
 800515a:	af00      	add	r7, sp, #0
 800515c:	6078      	str	r0, [r7, #4]
 800515e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005166:	2b01      	cmp	r3, #1
 8005168:	d101      	bne.n	800516e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800516a:	2302      	movs	r3, #2
 800516c:	e02d      	b.n	80051ca <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2224      	movs	r2, #36	@ 0x24
 800517a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f022 0201 	bic.w	r2, r2, #1
 8005194:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	683a      	ldr	r2, [r7, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f850 	bl	8005250 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	68fa      	ldr	r2, [r7, #12]
 80051b6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2220      	movs	r2, #32
 80051bc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051c8:	2300      	movs	r3, #0
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3710      	adds	r7, #16
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}

080051d2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b084      	sub	sp, #16
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
 80051da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051e2:	2b01      	cmp	r3, #1
 80051e4:	d101      	bne.n	80051ea <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80051e6:	2302      	movs	r3, #2
 80051e8:	e02d      	b.n	8005246 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2224      	movs	r2, #36	@ 0x24
 80051f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f022 0201 	bic.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	683a      	ldr	r2, [r7, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005226:	6878      	ldr	r0, [r7, #4]
 8005228:	f000 f812 	bl	8005250 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	68fa      	ldr	r2, [r7, #12]
 8005232:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2220      	movs	r2, #32
 8005238:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005244:	2300      	movs	r3, #0
}
 8005246:	4618      	mov	r0, r3
 8005248:	3710      	adds	r7, #16
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
	...

08005250 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800525c:	2b00      	cmp	r3, #0
 800525e:	d108      	bne.n	8005272 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005270:	e031      	b.n	80052d6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005272:	2310      	movs	r3, #16
 8005274:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005276:	2310      	movs	r3, #16
 8005278:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	689b      	ldr	r3, [r3, #8]
 8005280:	0e5b      	lsrs	r3, r3, #25
 8005282:	b2db      	uxtb	r3, r3
 8005284:	f003 0307 	and.w	r3, r3, #7
 8005288:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	689b      	ldr	r3, [r3, #8]
 8005290:	0f5b      	lsrs	r3, r3, #29
 8005292:	b2db      	uxtb	r3, r3
 8005294:	f003 0307 	and.w	r3, r3, #7
 8005298:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800529a:	7bbb      	ldrb	r3, [r7, #14]
 800529c:	7b3a      	ldrb	r2, [r7, #12]
 800529e:	4911      	ldr	r1, [pc, #68]	@ (80052e4 <UARTEx_SetNbDataToProcess+0x94>)
 80052a0:	5c8a      	ldrb	r2, [r1, r2]
 80052a2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80052a6:	7b3a      	ldrb	r2, [r7, #12]
 80052a8:	490f      	ldr	r1, [pc, #60]	@ (80052e8 <UARTEx_SetNbDataToProcess+0x98>)
 80052aa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80052ac:	fb93 f3f2 	sdiv	r3, r3, r2
 80052b0:	b29a      	uxth	r2, r3
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
 80052ba:	7b7a      	ldrb	r2, [r7, #13]
 80052bc:	4909      	ldr	r1, [pc, #36]	@ (80052e4 <UARTEx_SetNbDataToProcess+0x94>)
 80052be:	5c8a      	ldrb	r2, [r1, r2]
 80052c0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80052c4:	7b7a      	ldrb	r2, [r7, #13]
 80052c6:	4908      	ldr	r1, [pc, #32]	@ (80052e8 <UARTEx_SetNbDataToProcess+0x98>)
 80052c8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80052ca:	fb93 f3f2 	sdiv	r3, r3, r2
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80052d6:	bf00      	nop
 80052d8:	3714      	adds	r7, #20
 80052da:	46bd      	mov	sp, r7
 80052dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052e0:	4770      	bx	lr
 80052e2:	bf00      	nop
 80052e4:	08005384 	.word	0x08005384
 80052e8:	0800538c 	.word	0x0800538c

080052ec <memset>:
 80052ec:	4402      	add	r2, r0
 80052ee:	4603      	mov	r3, r0
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d100      	bne.n	80052f6 <memset+0xa>
 80052f4:	4770      	bx	lr
 80052f6:	f803 1b01 	strb.w	r1, [r3], #1
 80052fa:	e7f9      	b.n	80052f0 <memset+0x4>

080052fc <__libc_init_array>:
 80052fc:	b570      	push	{r4, r5, r6, lr}
 80052fe:	4d0d      	ldr	r5, [pc, #52]	@ (8005334 <__libc_init_array+0x38>)
 8005300:	4c0d      	ldr	r4, [pc, #52]	@ (8005338 <__libc_init_array+0x3c>)
 8005302:	1b64      	subs	r4, r4, r5
 8005304:	10a4      	asrs	r4, r4, #2
 8005306:	2600      	movs	r6, #0
 8005308:	42a6      	cmp	r6, r4
 800530a:	d109      	bne.n	8005320 <__libc_init_array+0x24>
 800530c:	4d0b      	ldr	r5, [pc, #44]	@ (800533c <__libc_init_array+0x40>)
 800530e:	4c0c      	ldr	r4, [pc, #48]	@ (8005340 <__libc_init_array+0x44>)
 8005310:	f000 f818 	bl	8005344 <_init>
 8005314:	1b64      	subs	r4, r4, r5
 8005316:	10a4      	asrs	r4, r4, #2
 8005318:	2600      	movs	r6, #0
 800531a:	42a6      	cmp	r6, r4
 800531c:	d105      	bne.n	800532a <__libc_init_array+0x2e>
 800531e:	bd70      	pop	{r4, r5, r6, pc}
 8005320:	f855 3b04 	ldr.w	r3, [r5], #4
 8005324:	4798      	blx	r3
 8005326:	3601      	adds	r6, #1
 8005328:	e7ee      	b.n	8005308 <__libc_init_array+0xc>
 800532a:	f855 3b04 	ldr.w	r3, [r5], #4
 800532e:	4798      	blx	r3
 8005330:	3601      	adds	r6, #1
 8005332:	e7f2      	b.n	800531a <__libc_init_array+0x1e>
 8005334:	0800539c 	.word	0x0800539c
 8005338:	0800539c 	.word	0x0800539c
 800533c:	0800539c 	.word	0x0800539c
 8005340:	080053a0 	.word	0x080053a0

08005344 <_init>:
 8005344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005346:	bf00      	nop
 8005348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800534a:	bc08      	pop	{r3}
 800534c:	469e      	mov	lr, r3
 800534e:	4770      	bx	lr

08005350 <_fini>:
 8005350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005352:	bf00      	nop
 8005354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005356:	bc08      	pop	{r3}
 8005358:	469e      	mov	lr, r3
 800535a:	4770      	bx	lr
