
Timer_Test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006194  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08006434  08006434  00007434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800649c  0800649c  00008070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800649c  0800649c  0000749c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064a4  080064a4  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064a4  080064a4  000074a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080064a8  080064a8  000074a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  24000000  080064ac  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002b0  24000070  0800651c  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000320  0800651c  00008320  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001541e  00000000  00000000  0000809e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002675  00000000  00000000  0001d4bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  0001fb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d81  00000000  00000000  00020c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b9d6  00000000  00000000  00021a11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015c83  00000000  00000000  0005d3e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00189fd6  00000000  00000000  0007306a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001fd040  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050f4  00000000  00000000  001fd084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00202178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800641c 	.word	0x0800641c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	0800641c 	.word	0x0800641c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b0:	4b49      	ldr	r3, [pc, #292]	@ (80007d8 <SystemInit+0x12c>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006b6:	4a48      	ldr	r2, [pc, #288]	@ (80007d8 <SystemInit+0x12c>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006c0:	4b45      	ldr	r3, [pc, #276]	@ (80007d8 <SystemInit+0x12c>)
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	4a44      	ldr	r2, [pc, #272]	@ (80007d8 <SystemInit+0x12c>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006cc:	4b43      	ldr	r3, [pc, #268]	@ (80007dc <SystemInit+0x130>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	d807      	bhi.n	80006e8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d8:	4b40      	ldr	r3, [pc, #256]	@ (80007dc <SystemInit+0x130>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f023 030f 	bic.w	r3, r3, #15
 80006e0:	4a3e      	ldr	r2, [pc, #248]	@ (80007dc <SystemInit+0x130>)
 80006e2:	f043 0307 	orr.w	r3, r3, #7
 80006e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006e8:	4b3d      	ldr	r3, [pc, #244]	@ (80007e0 <SystemInit+0x134>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a3c      	ldr	r2, [pc, #240]	@ (80007e0 <SystemInit+0x134>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f4:	4b3a      	ldr	r3, [pc, #232]	@ (80007e0 <SystemInit+0x134>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006fa:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <SystemInit+0x134>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4938      	ldr	r1, [pc, #224]	@ (80007e0 <SystemInit+0x134>)
 8000700:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <SystemInit+0x138>)
 8000702:	4013      	ands	r3, r2
 8000704:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000706:	4b35      	ldr	r3, [pc, #212]	@ (80007dc <SystemInit+0x130>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	2b00      	cmp	r3, #0
 8000710:	d007      	beq.n	8000722 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000712:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <SystemInit+0x130>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f023 030f 	bic.w	r3, r3, #15
 800071a:	4a30      	ldr	r2, [pc, #192]	@ (80007dc <SystemInit+0x130>)
 800071c:	f043 0307 	orr.w	r3, r3, #7
 8000720:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000722:	4b2f      	ldr	r3, [pc, #188]	@ (80007e0 <SystemInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000728:	4b2d      	ldr	r3, [pc, #180]	@ (80007e0 <SystemInit+0x134>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800072e:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <SystemInit+0x134>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000734:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <SystemInit+0x134>)
 8000736:	4a2c      	ldr	r2, [pc, #176]	@ (80007e8 <SystemInit+0x13c>)
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800073a:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <SystemInit+0x134>)
 800073c:	4a2b      	ldr	r2, [pc, #172]	@ (80007ec <SystemInit+0x140>)
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000740:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <SystemInit+0x134>)
 8000742:	4a2b      	ldr	r2, [pc, #172]	@ (80007f0 <SystemInit+0x144>)
 8000744:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <SystemInit+0x134>)
 8000748:	2200      	movs	r2, #0
 800074a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800074c:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <SystemInit+0x134>)
 800074e:	4a28      	ldr	r2, [pc, #160]	@ (80007f0 <SystemInit+0x144>)
 8000750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000752:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <SystemInit+0x134>)
 8000754:	2200      	movs	r2, #0
 8000756:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000758:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <SystemInit+0x134>)
 800075a:	4a25      	ldr	r2, [pc, #148]	@ (80007f0 <SystemInit+0x144>)
 800075c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800075e:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <SystemInit+0x134>)
 8000760:	2200      	movs	r2, #0
 8000762:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <SystemInit+0x134>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1d      	ldr	r2, [pc, #116]	@ (80007e0 <SystemInit+0x134>)
 800076a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <SystemInit+0x134>)
 8000772:	2200      	movs	r2, #0
 8000774:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000776:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <SystemInit+0x148>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800077a:	4a1e      	ldr	r2, [pc, #120]	@ (80007f4 <SystemInit+0x148>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000780:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000782:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <SystemInit+0x14c>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <SystemInit+0x150>)
 8000788:	4013      	ands	r3, r2
 800078a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800078e:	d202      	bcs.n	8000796 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <SystemInit+0x154>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <SystemInit+0x134>)
 8000798:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800079c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d113      	bne.n	80007cc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <SystemInit+0x134>)
 80007a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007aa:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <SystemInit+0x134>)
 80007ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <SystemInit+0x158>)
 80007b6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ba:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <SystemInit+0x134>)
 80007be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007c2:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <SystemInit+0x134>)
 80007c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00
 80007dc:	52002000 	.word	0x52002000
 80007e0:	58024400 	.word	0x58024400
 80007e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007e8:	02020200 	.word	0x02020200
 80007ec:	01ff0000 	.word	0x01ff0000
 80007f0:	01010280 	.word	0x01010280
 80007f4:	580000c0 	.word	0x580000c0
 80007f8:	5c001000 	.word	0x5c001000
 80007fc:	ffff0000 	.word	0xffff0000
 8000800:	51008108 	.word	0x51008108
 8000804:	52004000 	.word	0x52004000

08000808 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <ExitRun0Mode+0x2c>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <ExitRun0Mode+0x2c>)
 8000812:	f023 0302 	bic.w	r3, r3, #2
 8000816:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000818:	bf00      	nop
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <ExitRun0Mode+0x2c>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f9      	beq.n	800081a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	58024800 	.word	0x58024800

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800083e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000842:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000844:	bf00      	nop
 8000846:	4b3b      	ldr	r3, [pc, #236]	@ (8000934 <main+0xfc>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800084e:	2b00      	cmp	r3, #0
 8000850:	d004      	beq.n	800085c <main+0x24>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	1e5a      	subs	r2, r3, #1
 8000856:	607a      	str	r2, [r7, #4]
 8000858:	2b00      	cmp	r3, #0
 800085a:	dcf4      	bgt.n	8000846 <main+0xe>
  if ( timeout < 0 )
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	da01      	bge.n	8000866 <main+0x2e>
  {
  Error_Handler();
 8000862:	f000 fab7 	bl	8000dd4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000866:	f000 fd41 	bl	80012ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086a:	f000 f86f 	bl	800094c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800086e:	4b31      	ldr	r3, [pc, #196]	@ (8000934 <main+0xfc>)
 8000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000874:	4a2f      	ldr	r2, [pc, #188]	@ (8000934 <main+0xfc>)
 8000876:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800087a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800087e:	4b2d      	ldr	r3, [pc, #180]	@ (8000934 <main+0xfc>)
 8000880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800088c:	2000      	movs	r0, #0
 800088e:	f001 f8b7 	bl	8001a00 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000892:	2100      	movs	r1, #0
 8000894:	2000      	movs	r0, #0
 8000896:	f001 f8cd 	bl	8001a34 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800089a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800089e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008a0:	bf00      	nop
 80008a2:	4b24      	ldr	r3, [pc, #144]	@ (8000934 <main+0xfc>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d104      	bne.n	80008b8 <main+0x80>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	1e5a      	subs	r2, r3, #1
 80008b2:	607a      	str	r2, [r7, #4]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	dcf4      	bgt.n	80008a2 <main+0x6a>
if ( timeout < 0 )
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	da01      	bge.n	80008c2 <main+0x8a>
{
Error_Handler();
 80008be:	f000 fa89 	bl	8000dd4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c2:	f000 f9f9 	bl	8000cb8 <MX_GPIO_Init>
  MX_TIM1_Init();
 80008c6:	f000 f8bd 	bl	8000a44 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008ca:	f000 f97f 	bl	8000bcc <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80008ce:	4b1a      	ldr	r3, [pc, #104]	@ (8000938 <main+0x100>)
 80008d0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d4:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80008d6:	4b18      	ldr	r3, [pc, #96]	@ (8000938 <main+0x100>)
 80008d8:	2200      	movs	r2, #0
 80008da:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80008dc:	4b16      	ldr	r3, [pc, #88]	@ (8000938 <main+0x100>)
 80008de:	2200      	movs	r2, #0
 80008e0:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80008e2:	4b15      	ldr	r3, [pc, #84]	@ (8000938 <main+0x100>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80008e8:	4b13      	ldr	r3, [pc, #76]	@ (8000938 <main+0x100>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80008ee:	4912      	ldr	r1, [pc, #72]	@ (8000938 <main+0x100>)
 80008f0:	2000      	movs	r0, #0
 80008f2:	f000 fc25 	bl	8001140 <BSP_COM_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <main+0xc8>
  {
    Error_Handler();
 80008fc:	f000 fa6a 	bl	8000dd4 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  __HAL_TIM_SET_COUNTER(&htim1, 16);
 8000900:	4b0e      	ldr	r3, [pc, #56]	@ (800093c <main+0x104>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2210      	movs	r2, #16
 8000906:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000908:	2100      	movs	r1, #0
 800090a:	480c      	ldr	r0, [pc, #48]	@ (800093c <main+0x104>)
 800090c:	f002 fc5c 	bl	80031c8 <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000910:	2100      	movs	r1, #0
 8000912:	480b      	ldr	r0, [pc, #44]	@ (8000940 <main+0x108>)
 8000914:	f002 fc58 	bl	80031c8 <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000918:	2101      	movs	r1, #1
 800091a:	480a      	ldr	r0, [pc, #40]	@ (8000944 <main+0x10c>)
 800091c:	f001 f855 	bl	80019ca <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000920:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000924:	f000 fd74 	bl	8001410 <HAL_Delay>
	  printf("Hello_Word");
 8000928:	4807      	ldr	r0, [pc, #28]	@ (8000948 <main+0x110>)
 800092a:	f004 ff0b 	bl	8005744 <iprintf>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800092e:	bf00      	nop
 8000930:	e7f2      	b.n	8000918 <main+0xe0>
 8000932:	bf00      	nop
 8000934:	58024400 	.word	0x58024400
 8000938:	2400008c 	.word	0x2400008c
 800093c:	2400009c 	.word	0x2400009c
 8000940:	240000e8 	.word	0x240000e8
 8000944:	58020400 	.word	0x58020400
 8000948:	08006434 	.word	0x08006434

0800094c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b09c      	sub	sp, #112	@ 0x70
 8000950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000952:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000956:	224c      	movs	r2, #76	@ 0x4c
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f004 ff47 	bl	80057ee <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2220      	movs	r2, #32
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f004 ff41 	bl	80057ee <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 800096c:	2004      	movs	r0, #4
 800096e:	f001 f875 	bl	8001a5c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	4b31      	ldr	r3, [pc, #196]	@ (8000a3c <SystemClock_Config+0xf0>)
 8000978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800097a:	4a30      	ldr	r2, [pc, #192]	@ (8000a3c <SystemClock_Config+0xf0>)
 800097c:	f023 0301 	bic.w	r3, r3, #1
 8000980:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000982:	4b2e      	ldr	r3, [pc, #184]	@ (8000a3c <SystemClock_Config+0xf0>)
 8000984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	4b2c      	ldr	r3, [pc, #176]	@ (8000a40 <SystemClock_Config+0xf4>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	4a2b      	ldr	r2, [pc, #172]	@ (8000a40 <SystemClock_Config+0xf4>)
 8000992:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000996:	6193      	str	r3, [r2, #24]
 8000998:	4b29      	ldr	r3, [pc, #164]	@ (8000a40 <SystemClock_Config+0xf4>)
 800099a:	699b      	ldr	r3, [r3, #24]
 800099c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009a0:	603b      	str	r3, [r7, #0]
 80009a2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009a4:	bf00      	nop
 80009a6:	4b26      	ldr	r3, [pc, #152]	@ (8000a40 <SystemClock_Config+0xf4>)
 80009a8:	699b      	ldr	r3, [r3, #24]
 80009aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009b2:	d1f8      	bne.n	80009a6 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b4:	2302      	movs	r3, #2
 80009b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009b8:	2301      	movs	r3, #1
 80009ba:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009bc:	2340      	movs	r3, #64	@ 0x40
 80009be:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c0:	2302      	movs	r3, #2
 80009c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009c4:	2300      	movs	r3, #0
 80009c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009c8:	2304      	movs	r3, #4
 80009ca:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 80009cc:	2332      	movs	r3, #50	@ 0x32
 80009ce:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009d0:	2302      	movs	r3, #2
 80009d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80009d4:	2305      	movs	r3, #5
 80009d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009d8:	2302      	movs	r3, #2
 80009da:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009dc:	230c      	movs	r3, #12
 80009de:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009e0:	2300      	movs	r3, #0
 80009e2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ec:	4618      	mov	r0, r3
 80009ee:	f001 f88f 	bl	8001b10 <HAL_RCC_OscConfig>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80009f8:	f000 f9ec 	bl	8000dd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009fc:	233f      	movs	r3, #63	@ 0x3f
 80009fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a00:	2303      	movs	r3, #3
 8000a02:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a04:	2300      	movs	r3, #0
 8000a06:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a08:	2308      	movs	r3, #8
 8000a0a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a0c:	2340      	movs	r3, #64	@ 0x40
 8000a0e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a10:	2340      	movs	r3, #64	@ 0x40
 8000a12:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a18:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a1a:	2340      	movs	r3, #64	@ 0x40
 8000a1c:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a1e:	1d3b      	adds	r3, r7, #4
 8000a20:	2102      	movs	r1, #2
 8000a22:	4618      	mov	r0, r3
 8000a24:	f001 fcce 	bl	80023c4 <HAL_RCC_ClockConfig>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000a2e:	f000 f9d1 	bl	8000dd4 <Error_Handler>
  }
}
 8000a32:	bf00      	nop
 8000a34:	3770      	adds	r7, #112	@ 0x70
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	58000400 	.word	0x58000400
 8000a40:	58024800 	.word	0x58024800

08000a44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b09e      	sub	sp, #120	@ 0x78
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4a:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a58:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a68:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a74:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]
 8000a82:	611a      	str	r2, [r3, #16]
 8000a84:	615a      	str	r2, [r3, #20]
 8000a86:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a88:	463b      	mov	r3, r7
 8000a8a:	222c      	movs	r2, #44	@ 0x2c
 8000a8c:	2100      	movs	r1, #0
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f004 fead 	bl	80057ee <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a94:	4b4b      	ldr	r3, [pc, #300]	@ (8000bc4 <MX_TIM1_Init+0x180>)
 8000a96:	4a4c      	ldr	r2, [pc, #304]	@ (8000bc8 <MX_TIM1_Init+0x184>)
 8000a98:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a9a:	4b4a      	ldr	r3, [pc, #296]	@ (8000bc4 <MX_TIM1_Init+0x180>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa0:	4b48      	ldr	r3, [pc, #288]	@ (8000bc4 <MX_TIM1_Init+0x180>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1999;
 8000aa6:	4b47      	ldr	r3, [pc, #284]	@ (8000bc4 <MX_TIM1_Init+0x180>)
 8000aa8:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000aac:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aae:	4b45      	ldr	r3, [pc, #276]	@ (8000bc4 <MX_TIM1_Init+0x180>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ab4:	4b43      	ldr	r3, [pc, #268]	@ (8000bc4 <MX_TIM1_Init+0x180>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000aba:	4b42      	ldr	r3, [pc, #264]	@ (8000bc4 <MX_TIM1_Init+0x180>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ac0:	4840      	ldr	r0, [pc, #256]	@ (8000bc4 <MX_TIM1_Init+0x180>)
 8000ac2:	f002 fac9 	bl	8003058 <HAL_TIM_Base_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000acc:	f000 f982 	bl	8000dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad4:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ad6:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000ada:	4619      	mov	r1, r3
 8000adc:	4839      	ldr	r0, [pc, #228]	@ (8000bc4 <MX_TIM1_Init+0x180>)
 8000ade:	f002 fd95 	bl	800360c <HAL_TIM_ConfigClockSource>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d001      	beq.n	8000aec <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000ae8:	f000 f974 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000aec:	4835      	ldr	r0, [pc, #212]	@ (8000bc4 <MX_TIM1_Init+0x180>)
 8000aee:	f002 fb0a 	bl	8003106 <HAL_TIM_PWM_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000af8:	f000 f96c 	bl	8000dd4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000afc:	2306      	movs	r3, #6
 8000afe:	657b      	str	r3, [r7, #84]	@ 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000b00:	2310      	movs	r3, #16
 8000b02:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000b04:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b08:	4619      	mov	r1, r3
 8000b0a:	482e      	ldr	r0, [pc, #184]	@ (8000bc4 <MX_TIM1_Init+0x180>)
 8000b0c:	f002 fe76 	bl	80037fc <HAL_TIM_SlaveConfigSynchro>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000b16:	f000 f95d 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b22:	2300      	movs	r3, #0
 8000b24:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b26:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4825      	ldr	r0, [pc, #148]	@ (8000bc4 <MX_TIM1_Init+0x180>)
 8000b2e:	f003 fbcb 	bl	80042c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000b38:	f000 f94c 	bl	8000dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b3c:	2360      	movs	r3, #96	@ 0x60
 8000b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 80;
 8000b40:	2350      	movs	r3, #80	@ 0x50
 8000b42:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000b44:	2302      	movs	r3, #2
 8000b46:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b50:	2300      	movs	r3, #0
 8000b52:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b54:	2300      	movs	r3, #0
 8000b56:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b58:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4818      	ldr	r0, [pc, #96]	@ (8000bc4 <MX_TIM1_Init+0x180>)
 8000b62:	f002 fc3f 	bl	80033e4 <HAL_TIM_PWM_ConfigChannel>
 8000b66:	4603      	mov	r3, r0
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d001      	beq.n	8000b70 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000b6c:	f000 f932 	bl	8000dd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b70:	2300      	movs	r3, #0
 8000b72:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b74:	2300      	movs	r3, #0
 8000b76:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b80:	2300      	movs	r3, #0
 8000b82:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b84:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b88:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b92:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b96:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ba0:	463b      	mov	r3, r7
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	4807      	ldr	r0, [pc, #28]	@ (8000bc4 <MX_TIM1_Init+0x180>)
 8000ba6:	f003 fc1d 	bl	80043e4 <HAL_TIMEx_ConfigBreakDeadTime>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8000bb0:	f000 f910 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bb4:	4803      	ldr	r0, [pc, #12]	@ (8000bc4 <MX_TIM1_Init+0x180>)
 8000bb6:	f000 f965 	bl	8000e84 <HAL_TIM_MspPostInit>

}
 8000bba:	bf00      	nop
 8000bbc:	3778      	adds	r7, #120	@ 0x78
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	2400009c 	.word	0x2400009c
 8000bc8:	40010000 	.word	0x40010000

08000bcc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b08e      	sub	sp, #56	@ 0x38
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bd2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	601a      	str	r2, [r3, #0]
 8000bda:	605a      	str	r2, [r3, #4]
 8000bdc:	609a      	str	r2, [r3, #8]
 8000bde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be0:	f107 031c 	add.w	r3, r7, #28
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bec:	463b      	mov	r3, r7
 8000bee:	2200      	movs	r2, #0
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	605a      	str	r2, [r3, #4]
 8000bf4:	609a      	str	r2, [r3, #8]
 8000bf6:	60da      	str	r2, [r3, #12]
 8000bf8:	611a      	str	r2, [r3, #16]
 8000bfa:	615a      	str	r2, [r3, #20]
 8000bfc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bfe:	4b2d      	ldr	r3, [pc, #180]	@ (8000cb4 <MX_TIM2_Init+0xe8>)
 8000c00:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 4;
 8000c06:	4b2b      	ldr	r3, [pc, #172]	@ (8000cb4 <MX_TIM2_Init+0xe8>)
 8000c08:	2204      	movs	r2, #4
 8000c0a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c0c:	4b29      	ldr	r3, [pc, #164]	@ (8000cb4 <MX_TIM2_Init+0xe8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19;
 8000c12:	4b28      	ldr	r3, [pc, #160]	@ (8000cb4 <MX_TIM2_Init+0xe8>)
 8000c14:	2213      	movs	r2, #19
 8000c16:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c18:	4b26      	ldr	r3, [pc, #152]	@ (8000cb4 <MX_TIM2_Init+0xe8>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c1e:	4b25      	ldr	r3, [pc, #148]	@ (8000cb4 <MX_TIM2_Init+0xe8>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c24:	4823      	ldr	r0, [pc, #140]	@ (8000cb4 <MX_TIM2_Init+0xe8>)
 8000c26:	f002 fa17 	bl	8003058 <HAL_TIM_Base_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c30:	f000 f8d0 	bl	8000dd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c34:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c38:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c3a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c3e:	4619      	mov	r1, r3
 8000c40:	481c      	ldr	r0, [pc, #112]	@ (8000cb4 <MX_TIM2_Init+0xe8>)
 8000c42:	f002 fce3 	bl	800360c <HAL_TIM_ConfigClockSource>
 8000c46:	4603      	mov	r3, r0
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d001      	beq.n	8000c50 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c4c:	f000 f8c2 	bl	8000dd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c50:	4818      	ldr	r0, [pc, #96]	@ (8000cb4 <MX_TIM2_Init+0xe8>)
 8000c52:	f002 fa58 	bl	8003106 <HAL_TIM_PWM_Init>
 8000c56:	4603      	mov	r3, r0
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d001      	beq.n	8000c60 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c5c:	f000 f8ba 	bl	8000dd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c60:	2320      	movs	r3, #32
 8000c62:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c68:	f107 031c 	add.w	r3, r7, #28
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4811      	ldr	r0, [pc, #68]	@ (8000cb4 <MX_TIM2_Init+0xe8>)
 8000c70:	f003 fb2a 	bl	80042c8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c7a:	f000 f8ab 	bl	8000dd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c7e:	2360      	movs	r3, #96	@ 0x60
 8000c80:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8000c82:	230a      	movs	r3, #10
 8000c84:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000c86:	2302      	movs	r3, #2
 8000c88:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c8e:	463b      	mov	r3, r7
 8000c90:	2200      	movs	r2, #0
 8000c92:	4619      	mov	r1, r3
 8000c94:	4807      	ldr	r0, [pc, #28]	@ (8000cb4 <MX_TIM2_Init+0xe8>)
 8000c96:	f002 fba5 	bl	80033e4 <HAL_TIM_PWM_ConfigChannel>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000ca0:	f000 f898 	bl	8000dd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000ca4:	4803      	ldr	r0, [pc, #12]	@ (8000cb4 <MX_TIM2_Init+0xe8>)
 8000ca6:	f000 f8ed 	bl	8000e84 <HAL_TIM_MspPostInit>

}
 8000caa:	bf00      	nop
 8000cac:	3738      	adds	r7, #56	@ 0x38
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	240000e8 	.word	0x240000e8

08000cb8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b08a      	sub	sp, #40	@ 0x28
 8000cbc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	601a      	str	r2, [r3, #0]
 8000cc6:	605a      	str	r2, [r3, #4]
 8000cc8:	609a      	str	r2, [r3, #8]
 8000cca:	60da      	str	r2, [r3, #12]
 8000ccc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cce:	4b3d      	ldr	r3, [pc, #244]	@ (8000dc4 <MX_GPIO_Init+0x10c>)
 8000cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd4:	4a3b      	ldr	r2, [pc, #236]	@ (8000dc4 <MX_GPIO_Init+0x10c>)
 8000cd6:	f043 0304 	orr.w	r3, r3, #4
 8000cda:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cde:	4b39      	ldr	r3, [pc, #228]	@ (8000dc4 <MX_GPIO_Init+0x10c>)
 8000ce0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ce4:	f003 0304 	and.w	r3, r3, #4
 8000ce8:	613b      	str	r3, [r7, #16]
 8000cea:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cec:	4b35      	ldr	r3, [pc, #212]	@ (8000dc4 <MX_GPIO_Init+0x10c>)
 8000cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cf2:	4a34      	ldr	r2, [pc, #208]	@ (8000dc4 <MX_GPIO_Init+0x10c>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cfc:	4b31      	ldr	r3, [pc, #196]	@ (8000dc4 <MX_GPIO_Init+0x10c>)
 8000cfe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d02:	f003 0301 	and.w	r3, r3, #1
 8000d06:	60fb      	str	r3, [r7, #12]
 8000d08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0a:	4b2e      	ldr	r3, [pc, #184]	@ (8000dc4 <MX_GPIO_Init+0x10c>)
 8000d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d10:	4a2c      	ldr	r2, [pc, #176]	@ (8000dc4 <MX_GPIO_Init+0x10c>)
 8000d12:	f043 0302 	orr.w	r3, r3, #2
 8000d16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d1a:	4b2a      	ldr	r3, [pc, #168]	@ (8000dc4 <MX_GPIO_Init+0x10c>)
 8000d1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d20:	f003 0302 	and.w	r3, r3, #2
 8000d24:	60bb      	str	r3, [r7, #8]
 8000d26:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d28:	4b26      	ldr	r3, [pc, #152]	@ (8000dc4 <MX_GPIO_Init+0x10c>)
 8000d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d2e:	4a25      	ldr	r2, [pc, #148]	@ (8000dc4 <MX_GPIO_Init+0x10c>)
 8000d30:	f043 0310 	orr.w	r3, r3, #16
 8000d34:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d38:	4b22      	ldr	r3, [pc, #136]	@ (8000dc4 <MX_GPIO_Init+0x10c>)
 8000d3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d3e:	f003 0310 	and.w	r3, r3, #16
 8000d42:	607b      	str	r3, [r7, #4]
 8000d44:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d46:	2200      	movs	r2, #0
 8000d48:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000d4c:	481e      	ldr	r0, [pc, #120]	@ (8000dc8 <MX_GPIO_Init+0x110>)
 8000d4e:	f000 fe23 	bl	8001998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2101      	movs	r1, #1
 8000d56:	481d      	ldr	r0, [pc, #116]	@ (8000dcc <MX_GPIO_Init+0x114>)
 8000d58:	f000 fe1e 	bl	8001998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	2102      	movs	r1, #2
 8000d60:	481b      	ldr	r0, [pc, #108]	@ (8000dd0 <MX_GPIO_Init+0x118>)
 8000d62:	f000 fe19 	bl	8001998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d66:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	2300      	movs	r3, #0
 8000d72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d74:	2300      	movs	r3, #0
 8000d76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d78:	f107 0314 	add.w	r3, r7, #20
 8000d7c:	4619      	mov	r1, r3
 8000d7e:	4812      	ldr	r0, [pc, #72]	@ (8000dc8 <MX_GPIO_Init+0x110>)
 8000d80:	f000 fc5a 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d84:	2301      	movs	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d88:	2301      	movs	r3, #1
 8000d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d90:	2300      	movs	r3, #0
 8000d92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d94:	f107 0314 	add.w	r3, r7, #20
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480c      	ldr	r0, [pc, #48]	@ (8000dcc <MX_GPIO_Init+0x114>)
 8000d9c:	f000 fc4c 	bl	8001638 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000da0:	2302      	movs	r3, #2
 8000da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da8:	2300      	movs	r3, #0
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	4806      	ldr	r0, [pc, #24]	@ (8000dd0 <MX_GPIO_Init+0x118>)
 8000db8:	f000 fc3e 	bl	8001638 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000dbc:	bf00      	nop
 8000dbe:	3728      	adds	r7, #40	@ 0x28
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	58024400 	.word	0x58024400
 8000dc8:	58020800 	.word	0x58020800
 8000dcc:	58020400 	.word	0x58020400
 8000dd0:	58021000 	.word	0x58021000

08000dd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dd8:	b672      	cpsid	i
}
 8000dda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <Error_Handler+0x8>

08000de0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	b083      	sub	sp, #12
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000de6:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <HAL_MspInit+0x30>)
 8000de8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dec:	4a08      	ldr	r2, [pc, #32]	@ (8000e10 <HAL_MspInit+0x30>)
 8000dee:	f043 0302 	orr.w	r3, r3, #2
 8000df2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000df6:	4b06      	ldr	r3, [pc, #24]	@ (8000e10 <HAL_MspInit+0x30>)
 8000df8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000dfc:	f003 0302 	and.w	r3, r3, #2
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	58024400 	.word	0x58024400

08000e14 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a16      	ldr	r2, [pc, #88]	@ (8000e7c <HAL_TIM_Base_MspInit+0x68>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d10f      	bne.n	8000e46 <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e26:	4b16      	ldr	r3, [pc, #88]	@ (8000e80 <HAL_TIM_Base_MspInit+0x6c>)
 8000e28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e2c:	4a14      	ldr	r2, [pc, #80]	@ (8000e80 <HAL_TIM_Base_MspInit+0x6c>)
 8000e2e:	f043 0301 	orr.w	r3, r3, #1
 8000e32:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000e36:	4b12      	ldr	r3, [pc, #72]	@ (8000e80 <HAL_TIM_Base_MspInit+0x6c>)
 8000e38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	60fb      	str	r3, [r7, #12]
 8000e42:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM2_MspInit 1 */

    /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e44:	e013      	b.n	8000e6e <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM2)
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000e4e:	d10e      	bne.n	8000e6e <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e50:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <HAL_TIM_Base_MspInit+0x6c>)
 8000e52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e56:	4a0a      	ldr	r2, [pc, #40]	@ (8000e80 <HAL_TIM_Base_MspInit+0x6c>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000e60:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <HAL_TIM_Base_MspInit+0x6c>)
 8000e62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000e66:	f003 0301 	and.w	r3, r3, #1
 8000e6a:	60bb      	str	r3, [r7, #8]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
}
 8000e6e:	bf00      	nop
 8000e70:	3714      	adds	r7, #20
 8000e72:	46bd      	mov	sp, r7
 8000e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e78:	4770      	bx	lr
 8000e7a:	bf00      	nop
 8000e7c:	40010000 	.word	0x40010000
 8000e80:	58024400 	.word	0x58024400

08000e84 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	@ 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a25      	ldr	r2, [pc, #148]	@ (8000f38 <HAL_TIM_MspPostInit+0xb4>)
 8000ea2:	4293      	cmp	r3, r2
 8000ea4:	d120      	bne.n	8000ee8 <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	4b25      	ldr	r3, [pc, #148]	@ (8000f3c <HAL_TIM_MspPostInit+0xb8>)
 8000ea8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000eac:	4a23      	ldr	r2, [pc, #140]	@ (8000f3c <HAL_TIM_MspPostInit+0xb8>)
 8000eae:	f043 0301 	orr.w	r3, r3, #1
 8000eb2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000eb6:	4b21      	ldr	r3, [pc, #132]	@ (8000f3c <HAL_TIM_MspPostInit+0xb8>)
 8000eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	613b      	str	r3, [r7, #16]
 8000ec2:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ec4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000ec8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eca:	2302      	movs	r3, #2
 8000ecc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 0314 	add.w	r3, r7, #20
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4817      	ldr	r0, [pc, #92]	@ (8000f40 <HAL_TIM_MspPostInit+0xbc>)
 8000ee2:	f000 fba9 	bl	8001638 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000ee6:	e023      	b.n	8000f30 <HAL_TIM_MspPostInit+0xac>
  else if(htim->Instance==TIM2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000ef0:	d11e      	bne.n	8000f30 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b12      	ldr	r3, [pc, #72]	@ (8000f3c <HAL_TIM_MspPostInit+0xb8>)
 8000ef4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ef8:	4a10      	ldr	r2, [pc, #64]	@ (8000f3c <HAL_TIM_MspPostInit+0xb8>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000f02:	4b0e      	ldr	r3, [pc, #56]	@ (8000f3c <HAL_TIM_MspPostInit+0xb8>)
 8000f04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000f08:	f003 0301 	and.w	r3, r3, #1
 8000f0c:	60fb      	str	r3, [r7, #12]
 8000f0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000f10:	2301      	movs	r3, #1
 8000f12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f14:	2302      	movs	r3, #2
 8000f16:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f20:	2301      	movs	r3, #1
 8000f22:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f24:	f107 0314 	add.w	r3, r7, #20
 8000f28:	4619      	mov	r1, r3
 8000f2a:	4805      	ldr	r0, [pc, #20]	@ (8000f40 <HAL_TIM_MspPostInit+0xbc>)
 8000f2c:	f000 fb84 	bl	8001638 <HAL_GPIO_Init>
}
 8000f30:	bf00      	nop
 8000f32:	3728      	adds	r7, #40	@ 0x28
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	40010000 	.word	0x40010000
 8000f3c:	58024400 	.word	0x58024400
 8000f40:	58020000 	.word	0x58020000

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <NMI_Handler+0x4>

08000f4c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f50:	bf00      	nop
 8000f52:	e7fd      	b.n	8000f50 <HardFault_Handler+0x4>

08000f54 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f58:	bf00      	nop
 8000f5a:	e7fd      	b.n	8000f58 <MemManage_Handler+0x4>

08000f5c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f60:	bf00      	nop
 8000f62:	e7fd      	b.n	8000f60 <BusFault_Handler+0x4>

08000f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f68:	bf00      	nop
 8000f6a:	e7fd      	b.n	8000f68 <UsageFault_Handler+0x4>

08000f6c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr

08000f7a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f7a:	b480      	push	{r7}
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7e:	bf00      	nop
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr

08000f96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f9a:	f000 fa19 	bl	80013d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	bd80      	pop	{r7, pc}

08000fa2 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa2:	b580      	push	{r7, lr}
 8000fa4:	b086      	sub	sp, #24
 8000fa6:	af00      	add	r7, sp, #0
 8000fa8:	60f8      	str	r0, [r7, #12]
 8000faa:	60b9      	str	r1, [r7, #8]
 8000fac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fae:	2300      	movs	r3, #0
 8000fb0:	617b      	str	r3, [r7, #20]
 8000fb2:	e00a      	b.n	8000fca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fb4:	f3af 8000 	nop.w
 8000fb8:	4601      	mov	r1, r0
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	1c5a      	adds	r2, r3, #1
 8000fbe:	60ba      	str	r2, [r7, #8]
 8000fc0:	b2ca      	uxtb	r2, r1
 8000fc2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	3301      	adds	r3, #1
 8000fc8:	617b      	str	r3, [r7, #20]
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	429a      	cmp	r2, r3
 8000fd0:	dbf0      	blt.n	8000fb4 <_read+0x12>
  }

  return len;
 8000fd2:	687b      	ldr	r3, [r7, #4]
}
 8000fd4:	4618      	mov	r0, r3
 8000fd6:	3718      	adds	r7, #24
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}

08000fdc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b086      	sub	sp, #24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe8:	2300      	movs	r3, #0
 8000fea:	617b      	str	r3, [r7, #20]
 8000fec:	e009      	b.n	8001002 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	1c5a      	adds	r2, r3, #1
 8000ff2:	60ba      	str	r2, [r7, #8]
 8000ff4:	781b      	ldrb	r3, [r3, #0]
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f000 f904 	bl	8001204 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	3301      	adds	r3, #1
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	697a      	ldr	r2, [r7, #20]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	429a      	cmp	r2, r3
 8001008:	dbf1      	blt.n	8000fee <_write+0x12>
  }
  return len;
 800100a:	687b      	ldr	r3, [r7, #4]
}
 800100c:	4618      	mov	r0, r3
 800100e:	3718      	adds	r7, #24
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}

08001014 <_close>:

int _close(int file)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800101c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001020:	4618      	mov	r0, r3
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800103c:	605a      	str	r2, [r3, #4]
  return 0;
 800103e:	2300      	movs	r3, #0
}
 8001040:	4618      	mov	r0, r3
 8001042:	370c      	adds	r7, #12
 8001044:	46bd      	mov	sp, r7
 8001046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104a:	4770      	bx	lr

0800104c <_isatty>:

int _isatty(int file)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001054:	2301      	movs	r3, #1
}
 8001056:	4618      	mov	r0, r3
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr

08001062 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001062:	b480      	push	{r7}
 8001064:	b085      	sub	sp, #20
 8001066:	af00      	add	r7, sp, #0
 8001068:	60f8      	str	r0, [r7, #12]
 800106a:	60b9      	str	r1, [r7, #8]
 800106c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800106e:	2300      	movs	r3, #0
}
 8001070:	4618      	mov	r0, r3
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr

0800107c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001084:	4a14      	ldr	r2, [pc, #80]	@ (80010d8 <_sbrk+0x5c>)
 8001086:	4b15      	ldr	r3, [pc, #84]	@ (80010dc <_sbrk+0x60>)
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001090:	4b13      	ldr	r3, [pc, #76]	@ (80010e0 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d102      	bne.n	800109e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001098:	4b11      	ldr	r3, [pc, #68]	@ (80010e0 <_sbrk+0x64>)
 800109a:	4a12      	ldr	r2, [pc, #72]	@ (80010e4 <_sbrk+0x68>)
 800109c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109e:	4b10      	ldr	r3, [pc, #64]	@ (80010e0 <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d207      	bcs.n	80010bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ac:	f004 fbee 	bl	800588c <__errno>
 80010b0:	4603      	mov	r3, r0
 80010b2:	220c      	movs	r2, #12
 80010b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295
 80010ba:	e009      	b.n	80010d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010bc:	4b08      	ldr	r3, [pc, #32]	@ (80010e0 <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c2:	4b07      	ldr	r3, [pc, #28]	@ (80010e0 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a05      	ldr	r2, [pc, #20]	@ (80010e0 <_sbrk+0x64>)
 80010cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	24080000 	.word	0x24080000
 80010dc:	00000400 	.word	0x00000400
 80010e0:	24000134 	.word	0x24000134
 80010e4:	24000320 	.word	0x24000320

080010e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80010e8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8001124 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80010ec:	f7ff fb8c 	bl	8000808 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80010f0:	f7ff fadc 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010f4:	480c      	ldr	r0, [pc, #48]	@ (8001128 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010f6:	490d      	ldr	r1, [pc, #52]	@ (800112c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010f8:	4a0d      	ldr	r2, [pc, #52]	@ (8001130 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010fc:	e002      	b.n	8001104 <LoopCopyDataInit>

080010fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001100:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001102:	3304      	adds	r3, #4

08001104 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001104:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001106:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001108:	d3f9      	bcc.n	80010fe <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800110a:	4a0a      	ldr	r2, [pc, #40]	@ (8001134 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800110c:	4c0a      	ldr	r4, [pc, #40]	@ (8001138 <LoopFillZerobss+0x22>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001110:	e001      	b.n	8001116 <LoopFillZerobss>

08001112 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001112:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001114:	3204      	adds	r2, #4

08001116 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001116:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001118:	d3fb      	bcc.n	8001112 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800111a:	f004 fbbd 	bl	8005898 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800111e:	f7ff fb8b 	bl	8000838 <main>
  bx  lr
 8001122:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001124:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001128:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800112c:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8001130:	080064ac 	.word	0x080064ac
  ldr r2, =_sbss
 8001134:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8001138:	24000320 	.word	0x24000320

0800113c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800113c:	e7fe      	b.n	800113c <ADC3_IRQHandler>
	...

08001140 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	6039      	str	r1, [r7, #0]
 800114a:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8001150:	79fb      	ldrb	r3, [r7, #7]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001156:	f06f 0301 	mvn.w	r3, #1
 800115a:	60fb      	str	r3, [r7, #12]
 800115c:	e018      	b.n	8001190 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800115e:	79fb      	ldrb	r3, [r7, #7]
 8001160:	2294      	movs	r2, #148	@ 0x94
 8001162:	fb02 f303 	mul.w	r3, r2, r3
 8001166:	4a0d      	ldr	r2, [pc, #52]	@ (800119c <BSP_COM_Init+0x5c>)
 8001168:	4413      	add	r3, r2
 800116a:	4618      	mov	r0, r3
 800116c:	f000 f866 	bl	800123c <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2294      	movs	r2, #148	@ 0x94
 8001174:	fb02 f303 	mul.w	r3, r2, r3
 8001178:	4a08      	ldr	r2, [pc, #32]	@ (800119c <BSP_COM_Init+0x5c>)
 800117a:	4413      	add	r3, r2
 800117c:	6839      	ldr	r1, [r7, #0]
 800117e:	4618      	mov	r0, r3
 8001180:	f000 f80e 	bl	80011a0 <MX_USART3_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d002      	beq.n	8001190 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800118a:	f06f 0303 	mvn.w	r3, #3
 800118e:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001190:	68fb      	ldr	r3, [r7, #12]
}
 8001192:	4618      	mov	r0, r3
 8001194:	3710      	adds	r7, #16
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	24000138 	.word	0x24000138

080011a0 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 80011aa:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <MX_USART3_Init+0x60>)
 80011ac:	681a      	ldr	r2, [r3, #0]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681a      	ldr	r2, [r3, #0]
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	220c      	movs	r2, #12
 80011be:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	895b      	ldrh	r3, [r3, #10]
 80011c4:	461a      	mov	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	685a      	ldr	r2, [r3, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	891b      	ldrh	r3, [r3, #8]
 80011d6:	461a      	mov	r2, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	899b      	ldrh	r3, [r3, #12]
 80011e0:	461a      	mov	r2, r3
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80011ec:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f003 f976 	bl	80044e0 <HAL_UART_Init>
 80011f4:	4603      	mov	r3, r0
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	24000008 	.word	0x24000008

08001204 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 800120c:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <__io_putchar+0x30>)
 800120e:	781b      	ldrb	r3, [r3, #0]
 8001210:	461a      	mov	r2, r3
 8001212:	2394      	movs	r3, #148	@ 0x94
 8001214:	fb02 f303 	mul.w	r3, r2, r3
 8001218:	4a07      	ldr	r2, [pc, #28]	@ (8001238 <__io_putchar+0x34>)
 800121a:	1898      	adds	r0, r3, r2
 800121c:	1d39      	adds	r1, r7, #4
 800121e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001222:	2201      	movs	r2, #1
 8001224:	f003 f9b6 	bl	8004594 <HAL_UART_Transmit>
  return ch;
 8001228:	687b      	ldr	r3, [r7, #4]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	240001cc 	.word	0x240001cc
 8001238:	24000138 	.word	0x24000138

0800123c <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b08a      	sub	sp, #40	@ 0x28
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001244:	4b27      	ldr	r3, [pc, #156]	@ (80012e4 <COM1_MspInit+0xa8>)
 8001246:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800124a:	4a26      	ldr	r2, [pc, #152]	@ (80012e4 <COM1_MspInit+0xa8>)
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001254:	4b23      	ldr	r3, [pc, #140]	@ (80012e4 <COM1_MspInit+0xa8>)
 8001256:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	613b      	str	r3, [r7, #16]
 8001260:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001262:	4b20      	ldr	r3, [pc, #128]	@ (80012e4 <COM1_MspInit+0xa8>)
 8001264:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001268:	4a1e      	ldr	r2, [pc, #120]	@ (80012e4 <COM1_MspInit+0xa8>)
 800126a:	f043 0308 	orr.w	r3, r3, #8
 800126e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001272:	4b1c      	ldr	r3, [pc, #112]	@ (80012e4 <COM1_MspInit+0xa8>)
 8001274:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001278:	f003 0308 	and.w	r3, r3, #8
 800127c:	60fb      	str	r3, [r7, #12]
 800127e:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001280:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <COM1_MspInit+0xa8>)
 8001282:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001286:	4a17      	ldr	r2, [pc, #92]	@ (80012e4 <COM1_MspInit+0xa8>)
 8001288:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800128c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001290:	4b14      	ldr	r3, [pc, #80]	@ (80012e4 <COM1_MspInit+0xa8>)
 8001292:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001296:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800129a:	60bb      	str	r3, [r7, #8]
 800129c:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 800129e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012a2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80012a8:	2302      	movs	r3, #2
 80012aa:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 80012b0:	2307      	movs	r3, #7
 80012b2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	480b      	ldr	r0, [pc, #44]	@ (80012e8 <COM1_MspInit+0xac>)
 80012bc:	f000 f9bc 	bl	8001638 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 80012c0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80012c4:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80012c6:	2302      	movs	r3, #2
 80012c8:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 80012ca:	2307      	movs	r3, #7
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	4619      	mov	r1, r3
 80012d4:	4804      	ldr	r0, [pc, #16]	@ (80012e8 <COM1_MspInit+0xac>)
 80012d6:	f000 f9af 	bl	8001638 <HAL_GPIO_Init>
}
 80012da:	bf00      	nop
 80012dc:	3728      	adds	r7, #40	@ 0x28
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	58024400 	.word	0x58024400
 80012e8:	58020c00 	.word	0x58020c00

080012ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012f2:	2003      	movs	r0, #3
 80012f4:	f000 f96e 	bl	80015d4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80012f8:	f001 fa1a 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 80012fc:	4602      	mov	r2, r0
 80012fe:	4b15      	ldr	r3, [pc, #84]	@ (8001354 <HAL_Init+0x68>)
 8001300:	699b      	ldr	r3, [r3, #24]
 8001302:	0a1b      	lsrs	r3, r3, #8
 8001304:	f003 030f 	and.w	r3, r3, #15
 8001308:	4913      	ldr	r1, [pc, #76]	@ (8001358 <HAL_Init+0x6c>)
 800130a:	5ccb      	ldrb	r3, [r1, r3]
 800130c:	f003 031f 	and.w	r3, r3, #31
 8001310:	fa22 f303 	lsr.w	r3, r2, r3
 8001314:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001316:	4b0f      	ldr	r3, [pc, #60]	@ (8001354 <HAL_Init+0x68>)
 8001318:	699b      	ldr	r3, [r3, #24]
 800131a:	f003 030f 	and.w	r3, r3, #15
 800131e:	4a0e      	ldr	r2, [pc, #56]	@ (8001358 <HAL_Init+0x6c>)
 8001320:	5cd3      	ldrb	r3, [r2, r3]
 8001322:	f003 031f 	and.w	r3, r3, #31
 8001326:	687a      	ldr	r2, [r7, #4]
 8001328:	fa22 f303 	lsr.w	r3, r2, r3
 800132c:	4a0b      	ldr	r2, [pc, #44]	@ (800135c <HAL_Init+0x70>)
 800132e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001330:	4a0b      	ldr	r2, [pc, #44]	@ (8001360 <HAL_Init+0x74>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001336:	2000      	movs	r0, #0
 8001338:	f000 f814 	bl	8001364 <HAL_InitTick>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e002      	b.n	800134c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001346:	f7ff fd4b 	bl	8000de0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134a:	2300      	movs	r3, #0
}
 800134c:	4618      	mov	r0, r3
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	58024400 	.word	0x58024400
 8001358:	08006440 	.word	0x08006440
 800135c:	24000004 	.word	0x24000004
 8001360:	24000000 	.word	0x24000000

08001364 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800136c:	4b15      	ldr	r3, [pc, #84]	@ (80013c4 <HAL_InitTick+0x60>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d101      	bne.n	8001378 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	e021      	b.n	80013bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001378:	4b13      	ldr	r3, [pc, #76]	@ (80013c8 <HAL_InitTick+0x64>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <HAL_InitTick+0x60>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001386:	fbb3 f3f1 	udiv	r3, r3, r1
 800138a:	fbb2 f3f3 	udiv	r3, r2, r3
 800138e:	4618      	mov	r0, r3
 8001390:	f000 f945 	bl	800161e <HAL_SYSTICK_Config>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e00e      	b.n	80013bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b0f      	cmp	r3, #15
 80013a2:	d80a      	bhi.n	80013ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a4:	2200      	movs	r2, #0
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f000 f91d 	bl	80015ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b0:	4a06      	ldr	r2, [pc, #24]	@ (80013cc <HAL_InitTick+0x68>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e000      	b.n	80013bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	24000010 	.word	0x24000010
 80013c8:	24000000 	.word	0x24000000
 80013cc:	2400000c 	.word	0x2400000c

080013d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013d4:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <HAL_IncTick+0x20>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_IncTick+0x24>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	4a04      	ldr	r2, [pc, #16]	@ (80013f4 <HAL_IncTick+0x24>)
 80013e2:	6013      	str	r3, [r2, #0]
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	24000010 	.word	0x24000010
 80013f4:	240001d0 	.word	0x240001d0

080013f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return uwTick;
 80013fc:	4b03      	ldr	r3, [pc, #12]	@ (800140c <HAL_GetTick+0x14>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	240001d0 	.word	0x240001d0

08001410 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001418:	f7ff ffee 	bl	80013f8 <HAL_GetTick>
 800141c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001428:	d005      	beq.n	8001436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142a:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <HAL_Delay+0x44>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4413      	add	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001436:	bf00      	nop
 8001438:	f7ff ffde 	bl	80013f8 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	429a      	cmp	r2, r3
 8001446:	d8f7      	bhi.n	8001438 <HAL_Delay+0x28>
  {
  }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	24000010 	.word	0x24000010

08001458 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800145c:	4b03      	ldr	r3, [pc, #12]	@ (800146c <HAL_GetREVID+0x14>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	0c1b      	lsrs	r3, r3, #16
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	5c001000 	.word	0x5c001000

08001470 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	f003 0307 	and.w	r3, r3, #7
 800147e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001480:	4b0b      	ldr	r3, [pc, #44]	@ (80014b0 <__NVIC_SetPriorityGrouping+0x40>)
 8001482:	68db      	ldr	r3, [r3, #12]
 8001484:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001486:	68ba      	ldr	r2, [r7, #8]
 8001488:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800148c:	4013      	ands	r3, r2
 800148e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001498:	4b06      	ldr	r3, [pc, #24]	@ (80014b4 <__NVIC_SetPriorityGrouping+0x44>)
 800149a:	4313      	orrs	r3, r2
 800149c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149e:	4a04      	ldr	r2, [pc, #16]	@ (80014b0 <__NVIC_SetPriorityGrouping+0x40>)
 80014a0:	68bb      	ldr	r3, [r7, #8]
 80014a2:	60d3      	str	r3, [r2, #12]
}
 80014a4:	bf00      	nop
 80014a6:	3714      	adds	r7, #20
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	e000ed00 	.word	0xe000ed00
 80014b4:	05fa0000 	.word	0x05fa0000

080014b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014bc:	4b04      	ldr	r3, [pc, #16]	@ (80014d0 <__NVIC_GetPriorityGrouping+0x18>)
 80014be:	68db      	ldr	r3, [r3, #12]
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	f003 0307 	and.w	r3, r3, #7
}
 80014c6:	4618      	mov	r0, r3
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014d4:	b480      	push	{r7}
 80014d6:	b083      	sub	sp, #12
 80014d8:	af00      	add	r7, sp, #0
 80014da:	4603      	mov	r3, r0
 80014dc:	6039      	str	r1, [r7, #0]
 80014de:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80014e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	db0a      	blt.n	80014fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	b2da      	uxtb	r2, r3
 80014ec:	490c      	ldr	r1, [pc, #48]	@ (8001520 <__NVIC_SetPriority+0x4c>)
 80014ee:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014f2:	0112      	lsls	r2, r2, #4
 80014f4:	b2d2      	uxtb	r2, r2
 80014f6:	440b      	add	r3, r1
 80014f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014fc:	e00a      	b.n	8001514 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	b2da      	uxtb	r2, r3
 8001502:	4908      	ldr	r1, [pc, #32]	@ (8001524 <__NVIC_SetPriority+0x50>)
 8001504:	88fb      	ldrh	r3, [r7, #6]
 8001506:	f003 030f 	and.w	r3, r3, #15
 800150a:	3b04      	subs	r3, #4
 800150c:	0112      	lsls	r2, r2, #4
 800150e:	b2d2      	uxtb	r2, r2
 8001510:	440b      	add	r3, r1
 8001512:	761a      	strb	r2, [r3, #24]
}
 8001514:	bf00      	nop
 8001516:	370c      	adds	r7, #12
 8001518:	46bd      	mov	sp, r7
 800151a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151e:	4770      	bx	lr
 8001520:	e000e100 	.word	0xe000e100
 8001524:	e000ed00 	.word	0xe000ed00

08001528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	@ 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	60f8      	str	r0, [r7, #12]
 8001530:	60b9      	str	r1, [r7, #8]
 8001532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	f003 0307 	and.w	r3, r3, #7
 800153a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	f1c3 0307 	rsb	r3, r3, #7
 8001542:	2b04      	cmp	r3, #4
 8001544:	bf28      	it	cs
 8001546:	2304      	movcs	r3, #4
 8001548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	3304      	adds	r3, #4
 800154e:	2b06      	cmp	r3, #6
 8001550:	d902      	bls.n	8001558 <NVIC_EncodePriority+0x30>
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	3b03      	subs	r3, #3
 8001556:	e000      	b.n	800155a <NVIC_EncodePriority+0x32>
 8001558:	2300      	movs	r3, #0
 800155a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800155c:	f04f 32ff 	mov.w	r2, #4294967295
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	fa02 f303 	lsl.w	r3, r2, r3
 8001566:	43da      	mvns	r2, r3
 8001568:	68bb      	ldr	r3, [r7, #8]
 800156a:	401a      	ands	r2, r3
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001570:	f04f 31ff 	mov.w	r1, #4294967295
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	43d9      	mvns	r1, r3
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	4313      	orrs	r3, r2
         );
}
 8001582:	4618      	mov	r0, r3
 8001584:	3724      	adds	r7, #36	@ 0x24
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
	...

08001590 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	3b01      	subs	r3, #1
 800159c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80015a0:	d301      	bcc.n	80015a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015a2:	2301      	movs	r3, #1
 80015a4:	e00f      	b.n	80015c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015a6:	4a0a      	ldr	r2, [pc, #40]	@ (80015d0 <SysTick_Config+0x40>)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	3b01      	subs	r3, #1
 80015ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ae:	210f      	movs	r1, #15
 80015b0:	f04f 30ff 	mov.w	r0, #4294967295
 80015b4:	f7ff ff8e 	bl	80014d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015b8:	4b05      	ldr	r3, [pc, #20]	@ (80015d0 <SysTick_Config+0x40>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015be:	4b04      	ldr	r3, [pc, #16]	@ (80015d0 <SysTick_Config+0x40>)
 80015c0:	2207      	movs	r2, #7
 80015c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015c4:	2300      	movs	r3, #0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	e000e010 	.word	0xe000e010

080015d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015dc:	6878      	ldr	r0, [r7, #4]
 80015de:	f7ff ff47 	bl	8001470 <__NVIC_SetPriorityGrouping>
}
 80015e2:	bf00      	nop
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}

080015ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ea:	b580      	push	{r7, lr}
 80015ec:	b086      	sub	sp, #24
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	4603      	mov	r3, r0
 80015f2:	60b9      	str	r1, [r7, #8]
 80015f4:	607a      	str	r2, [r7, #4]
 80015f6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80015f8:	f7ff ff5e 	bl	80014b8 <__NVIC_GetPriorityGrouping>
 80015fc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015fe:	687a      	ldr	r2, [r7, #4]
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	6978      	ldr	r0, [r7, #20]
 8001604:	f7ff ff90 	bl	8001528 <NVIC_EncodePriority>
 8001608:	4602      	mov	r2, r0
 800160a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800160e:	4611      	mov	r1, r2
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff ff5f 	bl	80014d4 <__NVIC_SetPriority>
}
 8001616:	bf00      	nop
 8001618:	3718      	adds	r7, #24
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}

0800161e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	b082      	sub	sp, #8
 8001622:	af00      	add	r7, sp, #0
 8001624:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001626:	6878      	ldr	r0, [r7, #4]
 8001628:	f7ff ffb2 	bl	8001590 <SysTick_Config>
 800162c:	4603      	mov	r3, r0
}
 800162e:	4618      	mov	r0, r3
 8001630:	3708      	adds	r7, #8
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
	...

08001638 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001638:	b480      	push	{r7}
 800163a:	b089      	sub	sp, #36	@ 0x24
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001646:	4b89      	ldr	r3, [pc, #548]	@ (800186c <HAL_GPIO_Init+0x234>)
 8001648:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800164a:	e194      	b.n	8001976 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	681a      	ldr	r2, [r3, #0]
 8001650:	2101      	movs	r1, #1
 8001652:	69fb      	ldr	r3, [r7, #28]
 8001654:	fa01 f303 	lsl.w	r3, r1, r3
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	2b00      	cmp	r3, #0
 8001660:	f000 8186 	beq.w	8001970 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f003 0303 	and.w	r3, r3, #3
 800166c:	2b01      	cmp	r3, #1
 800166e:	d005      	beq.n	800167c <HAL_GPIO_Init+0x44>
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f003 0303 	and.w	r3, r3, #3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d130      	bne.n	80016de <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	2203      	movs	r2, #3
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	43db      	mvns	r3, r3
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	4013      	ands	r3, r2
 8001692:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	68da      	ldr	r2, [r3, #12]
 8001698:	69fb      	ldr	r3, [r7, #28]
 800169a:	005b      	lsls	r3, r3, #1
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	69ba      	ldr	r2, [r7, #24]
 80016a2:	4313      	orrs	r3, r2
 80016a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69ba      	ldr	r2, [r7, #24]
 80016aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016b2:	2201      	movs	r2, #1
 80016b4:	69fb      	ldr	r3, [r7, #28]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43db      	mvns	r3, r3
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	4013      	ands	r3, r2
 80016c0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	091b      	lsrs	r3, r3, #4
 80016c8:	f003 0201 	and.w	r2, r3, #1
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	fa02 f303 	lsl.w	r3, r2, r3
 80016d2:	69ba      	ldr	r2, [r7, #24]
 80016d4:	4313      	orrs	r3, r2
 80016d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	685b      	ldr	r3, [r3, #4]
 80016e2:	f003 0303 	and.w	r3, r3, #3
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	d017      	beq.n	800171a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	68db      	ldr	r3, [r3, #12]
 80016ee:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80016f0:	69fb      	ldr	r3, [r7, #28]
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	2203      	movs	r2, #3
 80016f6:	fa02 f303 	lsl.w	r3, r2, r3
 80016fa:	43db      	mvns	r3, r3
 80016fc:	69ba      	ldr	r2, [r7, #24]
 80016fe:	4013      	ands	r3, r2
 8001700:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	689a      	ldr	r2, [r3, #8]
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	005b      	lsls	r3, r3, #1
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4313      	orrs	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	69ba      	ldr	r2, [r7, #24]
 8001718:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 0303 	and.w	r3, r3, #3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d123      	bne.n	800176e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	08da      	lsrs	r2, r3, #3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	3208      	adds	r2, #8
 800172e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	f003 0307 	and.w	r3, r3, #7
 800173a:	009b      	lsls	r3, r3, #2
 800173c:	220f      	movs	r2, #15
 800173e:	fa02 f303 	lsl.w	r3, r2, r3
 8001742:	43db      	mvns	r3, r3
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	4013      	ands	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	691a      	ldr	r2, [r3, #16]
 800174e:	69fb      	ldr	r3, [r7, #28]
 8001750:	f003 0307 	and.w	r3, r3, #7
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4313      	orrs	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	08da      	lsrs	r2, r3, #3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	3208      	adds	r2, #8
 8001768:	69b9      	ldr	r1, [r7, #24]
 800176a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001774:	69fb      	ldr	r3, [r7, #28]
 8001776:	005b      	lsls	r3, r3, #1
 8001778:	2203      	movs	r2, #3
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	43db      	mvns	r3, r3
 8001780:	69ba      	ldr	r2, [r7, #24]
 8001782:	4013      	ands	r3, r2
 8001784:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	f003 0203 	and.w	r2, r3, #3
 800178e:	69fb      	ldr	r3, [r7, #28]
 8001790:	005b      	lsls	r3, r3, #1
 8001792:	fa02 f303 	lsl.w	r3, r2, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4313      	orrs	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017a2:	683b      	ldr	r3, [r7, #0]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	f000 80e0 	beq.w	8001970 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b0:	4b2f      	ldr	r3, [pc, #188]	@ (8001870 <HAL_GPIO_Init+0x238>)
 80017b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017b6:	4a2e      	ldr	r2, [pc, #184]	@ (8001870 <HAL_GPIO_Init+0x238>)
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80017c0:	4b2b      	ldr	r3, [pc, #172]	@ (8001870 <HAL_GPIO_Init+0x238>)
 80017c2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ce:	4a29      	ldr	r2, [pc, #164]	@ (8001874 <HAL_GPIO_Init+0x23c>)
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	3302      	adds	r3, #2
 80017d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	220f      	movs	r2, #15
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a20      	ldr	r2, [pc, #128]	@ (8001878 <HAL_GPIO_Init+0x240>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d052      	beq.n	80018a0 <HAL_GPIO_Init+0x268>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a1f      	ldr	r2, [pc, #124]	@ (800187c <HAL_GPIO_Init+0x244>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d031      	beq.n	8001866 <HAL_GPIO_Init+0x22e>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a1e      	ldr	r2, [pc, #120]	@ (8001880 <HAL_GPIO_Init+0x248>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d02b      	beq.n	8001862 <HAL_GPIO_Init+0x22a>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a1d      	ldr	r2, [pc, #116]	@ (8001884 <HAL_GPIO_Init+0x24c>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d025      	beq.n	800185e <HAL_GPIO_Init+0x226>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a1c      	ldr	r2, [pc, #112]	@ (8001888 <HAL_GPIO_Init+0x250>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d01f      	beq.n	800185a <HAL_GPIO_Init+0x222>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a1b      	ldr	r2, [pc, #108]	@ (800188c <HAL_GPIO_Init+0x254>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d019      	beq.n	8001856 <HAL_GPIO_Init+0x21e>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a1a      	ldr	r2, [pc, #104]	@ (8001890 <HAL_GPIO_Init+0x258>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d013      	beq.n	8001852 <HAL_GPIO_Init+0x21a>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a19      	ldr	r2, [pc, #100]	@ (8001894 <HAL_GPIO_Init+0x25c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d00d      	beq.n	800184e <HAL_GPIO_Init+0x216>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a18      	ldr	r2, [pc, #96]	@ (8001898 <HAL_GPIO_Init+0x260>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d007      	beq.n	800184a <HAL_GPIO_Init+0x212>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a17      	ldr	r2, [pc, #92]	@ (800189c <HAL_GPIO_Init+0x264>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d101      	bne.n	8001846 <HAL_GPIO_Init+0x20e>
 8001842:	2309      	movs	r3, #9
 8001844:	e02d      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 8001846:	230a      	movs	r3, #10
 8001848:	e02b      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 800184a:	2308      	movs	r3, #8
 800184c:	e029      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 800184e:	2307      	movs	r3, #7
 8001850:	e027      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 8001852:	2306      	movs	r3, #6
 8001854:	e025      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 8001856:	2305      	movs	r3, #5
 8001858:	e023      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 800185a:	2304      	movs	r3, #4
 800185c:	e021      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 800185e:	2303      	movs	r3, #3
 8001860:	e01f      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 8001862:	2302      	movs	r3, #2
 8001864:	e01d      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 8001866:	2301      	movs	r3, #1
 8001868:	e01b      	b.n	80018a2 <HAL_GPIO_Init+0x26a>
 800186a:	bf00      	nop
 800186c:	58000080 	.word	0x58000080
 8001870:	58024400 	.word	0x58024400
 8001874:	58000400 	.word	0x58000400
 8001878:	58020000 	.word	0x58020000
 800187c:	58020400 	.word	0x58020400
 8001880:	58020800 	.word	0x58020800
 8001884:	58020c00 	.word	0x58020c00
 8001888:	58021000 	.word	0x58021000
 800188c:	58021400 	.word	0x58021400
 8001890:	58021800 	.word	0x58021800
 8001894:	58021c00 	.word	0x58021c00
 8001898:	58022000 	.word	0x58022000
 800189c:	58022400 	.word	0x58022400
 80018a0:	2300      	movs	r3, #0
 80018a2:	69fa      	ldr	r2, [r7, #28]
 80018a4:	f002 0203 	and.w	r2, r2, #3
 80018a8:	0092      	lsls	r2, r2, #2
 80018aa:	4093      	lsls	r3, r2
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018b2:	4938      	ldr	r1, [pc, #224]	@ (8001994 <HAL_GPIO_Init+0x35c>)
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	089b      	lsrs	r3, r3, #2
 80018b8:	3302      	adds	r3, #2
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018c0:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018c8:	693b      	ldr	r3, [r7, #16]
 80018ca:	43db      	mvns	r3, r3
 80018cc:	69ba      	ldr	r2, [r7, #24]
 80018ce:	4013      	ands	r3, r2
 80018d0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d003      	beq.n	80018e6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	4313      	orrs	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80018e6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80018ee:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	43db      	mvns	r3, r3
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4013      	ands	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001908:	2b00      	cmp	r3, #0
 800190a:	d003      	beq.n	8001914 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800190c:	69ba      	ldr	r2, [r7, #24]
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001914:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	69ba      	ldr	r2, [r7, #24]
 800196e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	3301      	adds	r3, #1
 8001974:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	fa22 f303 	lsr.w	r3, r2, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	f47f ae63 	bne.w	800164c <HAL_GPIO_Init+0x14>
  }
}
 8001986:	bf00      	nop
 8001988:	bf00      	nop
 800198a:	3724      	adds	r7, #36	@ 0x24
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr
 8001994:	58000400 	.word	0x58000400

08001998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	807b      	strh	r3, [r7, #2]
 80019a4:	4613      	mov	r3, r2
 80019a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80019a8:	787b      	ldrb	r3, [r7, #1]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d003      	beq.n	80019b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019ae:	887a      	ldrh	r2, [r7, #2]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80019b4:	e003      	b.n	80019be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80019b6:	887b      	ldrh	r3, [r7, #2]
 80019b8:	041a      	lsls	r2, r3, #16
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	619a      	str	r2, [r3, #24]
}
 80019be:	bf00      	nop
 80019c0:	370c      	adds	r7, #12
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr

080019ca <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019ca:	b480      	push	{r7}
 80019cc:	b085      	sub	sp, #20
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
 80019d2:	460b      	mov	r3, r1
 80019d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	695b      	ldr	r3, [r3, #20]
 80019da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019dc:	887a      	ldrh	r2, [r7, #2]
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	4013      	ands	r3, r2
 80019e2:	041a      	lsls	r2, r3, #16
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	43d9      	mvns	r1, r3
 80019e8:	887b      	ldrh	r3, [r7, #2]
 80019ea:	400b      	ands	r3, r1
 80019ec:	431a      	orrs	r2, r3
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	619a      	str	r2, [r3, #24]
}
 80019f2:	bf00      	nop
 80019f4:	3714      	adds	r7, #20
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
	...

08001a00 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001a08:	4a08      	ldr	r2, [pc, #32]	@ (8001a2c <HAL_HSEM_FastTake+0x2c>)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	3320      	adds	r3, #32
 8001a0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a12:	4a07      	ldr	r2, [pc, #28]	@ (8001a30 <HAL_HSEM_FastTake+0x30>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d101      	bne.n	8001a1c <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	e000      	b.n	8001a1e <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001a1c:	2301      	movs	r3, #1
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	370c      	adds	r7, #12
 8001a22:	46bd      	mov	sp, r7
 8001a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a28:	4770      	bx	lr
 8001a2a:	bf00      	nop
 8001a2c:	58026400 	.word	0x58026400
 8001a30:	80000300 	.word	0x80000300

08001a34 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
 8001a3c:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001a3e:	4906      	ldr	r1, [pc, #24]	@ (8001a58 <HAL_HSEM_Release+0x24>)
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001a4c:	bf00      	nop
 8001a4e:	370c      	adds	r7, #12
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	58026400 	.word	0x58026400

08001a5c <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001a64:	4b29      	ldr	r3, [pc, #164]	@ (8001b0c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	f003 0307 	and.w	r3, r3, #7
 8001a6c:	2b06      	cmp	r3, #6
 8001a6e:	d00a      	beq.n	8001a86 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001a70:	4b26      	ldr	r3, [pc, #152]	@ (8001b0c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a72:	68db      	ldr	r3, [r3, #12]
 8001a74:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a78:	687a      	ldr	r2, [r7, #4]
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	d001      	beq.n	8001a82 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	e040      	b.n	8001b04 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001a82:	2300      	movs	r3, #0
 8001a84:	e03e      	b.n	8001b04 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001a86:	4b21      	ldr	r3, [pc, #132]	@ (8001b0c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a88:	68db      	ldr	r3, [r3, #12]
 8001a8a:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001a8e:	491f      	ldr	r1, [pc, #124]	@ (8001b0c <HAL_PWREx_ConfigSupply+0xb0>)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4313      	orrs	r3, r2
 8001a94:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001a96:	f7ff fcaf 	bl	80013f8 <HAL_GetTick>
 8001a9a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001a9c:	e009      	b.n	8001ab2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001a9e:	f7ff fcab 	bl	80013f8 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001aac:	d901      	bls.n	8001ab2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e028      	b.n	8001b04 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001ab2:	4b16      	ldr	r3, [pc, #88]	@ (8001b0c <HAL_PWREx_ConfigSupply+0xb0>)
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001aba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001abe:	d1ee      	bne.n	8001a9e <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b1e      	cmp	r3, #30
 8001ac4:	d008      	beq.n	8001ad8 <HAL_PWREx_ConfigSupply+0x7c>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b2e      	cmp	r3, #46	@ 0x2e
 8001aca:	d005      	beq.n	8001ad8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2b1d      	cmp	r3, #29
 8001ad0:	d002      	beq.n	8001ad8 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b2d      	cmp	r3, #45	@ 0x2d
 8001ad6:	d114      	bne.n	8001b02 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001ad8:	f7ff fc8e 	bl	80013f8 <HAL_GetTick>
 8001adc:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001ade:	e009      	b.n	8001af4 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001ae0:	f7ff fc8a 	bl	80013f8 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001aee:	d901      	bls.n	8001af4 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001af0:	2301      	movs	r3, #1
 8001af2:	e007      	b.n	8001b04 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001af4:	4b05      	ldr	r3, [pc, #20]	@ (8001b0c <HAL_PWREx_ConfigSupply+0xb0>)
 8001af6:	68db      	ldr	r3, [r3, #12]
 8001af8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001afc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b00:	d1ee      	bne.n	8001ae0 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	58024800 	.word	0x58024800

08001b10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b08c      	sub	sp, #48	@ 0x30
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d102      	bne.n	8001b24 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	f000 bc48 	b.w	80023b4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 8088 	beq.w	8001c42 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b32:	4b99      	ldr	r3, [pc, #612]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001b34:	691b      	ldr	r3, [r3, #16]
 8001b36:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001b3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001b3c:	4b96      	ldr	r3, [pc, #600]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b40:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001b42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b44:	2b10      	cmp	r3, #16
 8001b46:	d007      	beq.n	8001b58 <HAL_RCC_OscConfig+0x48>
 8001b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b4a:	2b18      	cmp	r3, #24
 8001b4c:	d111      	bne.n	8001b72 <HAL_RCC_OscConfig+0x62>
 8001b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b50:	f003 0303 	and.w	r3, r3, #3
 8001b54:	2b02      	cmp	r3, #2
 8001b56:	d10c      	bne.n	8001b72 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b58:	4b8f      	ldr	r3, [pc, #572]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d06d      	beq.n	8001c40 <HAL_RCC_OscConfig+0x130>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d169      	bne.n	8001c40 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	f000 bc21 	b.w	80023b4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001b7a:	d106      	bne.n	8001b8a <HAL_RCC_OscConfig+0x7a>
 8001b7c:	4b86      	ldr	r3, [pc, #536]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a85      	ldr	r2, [pc, #532]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001b82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001b86:	6013      	str	r3, [r2, #0]
 8001b88:	e02e      	b.n	8001be8 <HAL_RCC_OscConfig+0xd8>
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d10c      	bne.n	8001bac <HAL_RCC_OscConfig+0x9c>
 8001b92:	4b81      	ldr	r3, [pc, #516]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a80      	ldr	r2, [pc, #512]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001b98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4b7e      	ldr	r3, [pc, #504]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a7d      	ldr	r2, [pc, #500]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001ba4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	e01d      	b.n	8001be8 <HAL_RCC_OscConfig+0xd8>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001bb4:	d10c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0xc0>
 8001bb6:	4b78      	ldr	r3, [pc, #480]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a77      	ldr	r2, [pc, #476]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001bbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001bc0:	6013      	str	r3, [r2, #0]
 8001bc2:	4b75      	ldr	r3, [pc, #468]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a74      	ldr	r2, [pc, #464]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001bc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	e00b      	b.n	8001be8 <HAL_RCC_OscConfig+0xd8>
 8001bd0:	4b71      	ldr	r3, [pc, #452]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a70      	ldr	r2, [pc, #448]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001bd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001bda:	6013      	str	r3, [r2, #0]
 8001bdc:	4b6e      	ldr	r3, [pc, #440]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a6d      	ldr	r2, [pc, #436]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001be2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	685b      	ldr	r3, [r3, #4]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d013      	beq.n	8001c18 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf0:	f7ff fc02 	bl	80013f8 <HAL_GetTick>
 8001bf4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001bf6:	e008      	b.n	8001c0a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf8:	f7ff fbfe 	bl	80013f8 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	2b64      	cmp	r3, #100	@ 0x64
 8001c04:	d901      	bls.n	8001c0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001c06:	2303      	movs	r3, #3
 8001c08:	e3d4      	b.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001c0a:	4b63      	ldr	r3, [pc, #396]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f0      	beq.n	8001bf8 <HAL_RCC_OscConfig+0xe8>
 8001c16:	e014      	b.n	8001c42 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c18:	f7ff fbee 	bl	80013f8 <HAL_GetTick>
 8001c1c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001c20:	f7ff fbea 	bl	80013f8 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b64      	cmp	r3, #100	@ 0x64
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e3c0      	b.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001c32:	4b59      	ldr	r3, [pc, #356]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d1f0      	bne.n	8001c20 <HAL_RCC_OscConfig+0x110>
 8001c3e:	e000      	b.n	8001c42 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0302 	and.w	r3, r3, #2
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	f000 80ca 	beq.w	8001de4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c50:	4b51      	ldr	r3, [pc, #324]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c58:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c5a:	4b4f      	ldr	r3, [pc, #316]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c5e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001c60:	6a3b      	ldr	r3, [r7, #32]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d007      	beq.n	8001c76 <HAL_RCC_OscConfig+0x166>
 8001c66:	6a3b      	ldr	r3, [r7, #32]
 8001c68:	2b18      	cmp	r3, #24
 8001c6a:	d156      	bne.n	8001d1a <HAL_RCC_OscConfig+0x20a>
 8001c6c:	69fb      	ldr	r3, [r7, #28]
 8001c6e:	f003 0303 	and.w	r3, r3, #3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d151      	bne.n	8001d1a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c76:	4b48      	ldr	r3, [pc, #288]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 0304 	and.w	r3, r3, #4
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d005      	beq.n	8001c8e <HAL_RCC_OscConfig+0x17e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	68db      	ldr	r3, [r3, #12]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d101      	bne.n	8001c8e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
 8001c8c:	e392      	b.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001c8e:	4b42      	ldr	r3, [pc, #264]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f023 0219 	bic.w	r2, r3, #25
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	493f      	ldr	r1, [pc, #252]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fbaa 	bl	80013f8 <HAL_GetTick>
 8001ca4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ca8:	f7ff fba6 	bl	80013f8 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e37c      	b.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001cba:	4b37      	ldr	r3, [pc, #220]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cc6:	f7ff fbc7 	bl	8001458 <HAL_GetREVID>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d817      	bhi.n	8001d04 <HAL_RCC_OscConfig+0x1f4>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	2b40      	cmp	r3, #64	@ 0x40
 8001cda:	d108      	bne.n	8001cee <HAL_RCC_OscConfig+0x1de>
 8001cdc:	4b2e      	ldr	r3, [pc, #184]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001ce4:	4a2c      	ldr	r2, [pc, #176]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001ce6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cea:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001cec:	e07a      	b.n	8001de4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001cee:	4b2a      	ldr	r3, [pc, #168]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	691b      	ldr	r3, [r3, #16]
 8001cfa:	031b      	lsls	r3, r3, #12
 8001cfc:	4926      	ldr	r1, [pc, #152]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d02:	e06f      	b.n	8001de4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d04:	4b24      	ldr	r3, [pc, #144]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	061b      	lsls	r3, r3, #24
 8001d12:	4921      	ldr	r1, [pc, #132]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d18:	e064      	b.n	8001de4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	68db      	ldr	r3, [r3, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d047      	beq.n	8001db2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001d22:	4b1d      	ldr	r3, [pc, #116]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f023 0219 	bic.w	r2, r3, #25
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	491a      	ldr	r1, [pc, #104]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d34:	f7ff fb60 	bl	80013f8 <HAL_GetTick>
 8001d38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d3a:	e008      	b.n	8001d4e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001d3c:	f7ff fb5c 	bl	80013f8 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	2b02      	cmp	r3, #2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e332      	b.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001d4e:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d0f0      	beq.n	8001d3c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d5a:	f7ff fb7d 	bl	8001458 <HAL_GetREVID>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d819      	bhi.n	8001d9c <HAL_RCC_OscConfig+0x28c>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691b      	ldr	r3, [r3, #16]
 8001d6c:	2b40      	cmp	r3, #64	@ 0x40
 8001d6e:	d108      	bne.n	8001d82 <HAL_RCC_OscConfig+0x272>
 8001d70:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001d78:	4a07      	ldr	r2, [pc, #28]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001d7a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d7e:	6053      	str	r3, [r2, #4]
 8001d80:	e030      	b.n	8001de4 <HAL_RCC_OscConfig+0x2d4>
 8001d82:	4b05      	ldr	r3, [pc, #20]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	691b      	ldr	r3, [r3, #16]
 8001d8e:	031b      	lsls	r3, r3, #12
 8001d90:	4901      	ldr	r1, [pc, #4]	@ (8001d98 <HAL_RCC_OscConfig+0x288>)
 8001d92:	4313      	orrs	r3, r2
 8001d94:	604b      	str	r3, [r1, #4]
 8001d96:	e025      	b.n	8001de4 <HAL_RCC_OscConfig+0x2d4>
 8001d98:	58024400 	.word	0x58024400
 8001d9c:	4b9a      	ldr	r3, [pc, #616]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	061b      	lsls	r3, r3, #24
 8001daa:	4997      	ldr	r1, [pc, #604]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001dac:	4313      	orrs	r3, r2
 8001dae:	604b      	str	r3, [r1, #4]
 8001db0:	e018      	b.n	8001de4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001db2:	4b95      	ldr	r3, [pc, #596]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a94      	ldr	r2, [pc, #592]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001db8:	f023 0301 	bic.w	r3, r3, #1
 8001dbc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbe:	f7ff fb1b 	bl	80013f8 <HAL_GetTick>
 8001dc2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001dc4:	e008      	b.n	8001dd8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dc6:	f7ff fb17 	bl	80013f8 <HAL_GetTick>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dce:	1ad3      	subs	r3, r2, r3
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d901      	bls.n	8001dd8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001dd4:	2303      	movs	r3, #3
 8001dd6:	e2ed      	b.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001dd8:	4b8b      	ldr	r3, [pc, #556]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0304 	and.w	r3, r3, #4
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d1f0      	bne.n	8001dc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0310 	and.w	r3, r3, #16
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	f000 80a9 	beq.w	8001f44 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df2:	4b85      	ldr	r3, [pc, #532]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001df4:	691b      	ldr	r3, [r3, #16]
 8001df6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dfa:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001dfc:	4b82      	ldr	r3, [pc, #520]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e00:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	2b08      	cmp	r3, #8
 8001e06:	d007      	beq.n	8001e18 <HAL_RCC_OscConfig+0x308>
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	2b18      	cmp	r3, #24
 8001e0c:	d13a      	bne.n	8001e84 <HAL_RCC_OscConfig+0x374>
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	f003 0303 	and.w	r3, r3, #3
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d135      	bne.n	8001e84 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e18:	4b7b      	ldr	r3, [pc, #492]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d005      	beq.n	8001e30 <HAL_RCC_OscConfig+0x320>
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	69db      	ldr	r3, [r3, #28]
 8001e28:	2b80      	cmp	r3, #128	@ 0x80
 8001e2a:	d001      	beq.n	8001e30 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	e2c1      	b.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e30:	f7ff fb12 	bl	8001458 <HAL_GetREVID>
 8001e34:	4603      	mov	r3, r0
 8001e36:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d817      	bhi.n	8001e6e <HAL_RCC_OscConfig+0x35e>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6a1b      	ldr	r3, [r3, #32]
 8001e42:	2b20      	cmp	r3, #32
 8001e44:	d108      	bne.n	8001e58 <HAL_RCC_OscConfig+0x348>
 8001e46:	4b70      	ldr	r3, [pc, #448]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001e4e:	4a6e      	ldr	r2, [pc, #440]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001e50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001e54:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e56:	e075      	b.n	8001f44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e58:	4b6b      	ldr	r3, [pc, #428]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	069b      	lsls	r3, r3, #26
 8001e66:	4968      	ldr	r1, [pc, #416]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e6c:	e06a      	b.n	8001f44 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001e6e:	4b66      	ldr	r3, [pc, #408]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6a1b      	ldr	r3, [r3, #32]
 8001e7a:	061b      	lsls	r3, r3, #24
 8001e7c:	4962      	ldr	r1, [pc, #392]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001e82:	e05f      	b.n	8001f44 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	69db      	ldr	r3, [r3, #28]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d042      	beq.n	8001f12 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001e8c:	4b5e      	ldr	r3, [pc, #376]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a5d      	ldr	r2, [pc, #372]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001e92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001e96:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e98:	f7ff faae 	bl	80013f8 <HAL_GetTick>
 8001e9c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ea0:	f7ff faaa 	bl	80013f8 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e280      	b.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001eb2:	4b55      	ldr	r3, [pc, #340]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ebe:	f7ff facb 	bl	8001458 <HAL_GetREVID>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d817      	bhi.n	8001efc <HAL_RCC_OscConfig+0x3ec>
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6a1b      	ldr	r3, [r3, #32]
 8001ed0:	2b20      	cmp	r3, #32
 8001ed2:	d108      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x3d6>
 8001ed4:	4b4c      	ldr	r3, [pc, #304]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001edc:	4a4a      	ldr	r2, [pc, #296]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001ede:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ee2:	6053      	str	r3, [r2, #4]
 8001ee4:	e02e      	b.n	8001f44 <HAL_RCC_OscConfig+0x434>
 8001ee6:	4b48      	ldr	r3, [pc, #288]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001ee8:	685b      	ldr	r3, [r3, #4]
 8001eea:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6a1b      	ldr	r3, [r3, #32]
 8001ef2:	069b      	lsls	r3, r3, #26
 8001ef4:	4944      	ldr	r1, [pc, #272]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	604b      	str	r3, [r1, #4]
 8001efa:	e023      	b.n	8001f44 <HAL_RCC_OscConfig+0x434>
 8001efc:	4b42      	ldr	r3, [pc, #264]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6a1b      	ldr	r3, [r3, #32]
 8001f08:	061b      	lsls	r3, r3, #24
 8001f0a:	493f      	ldr	r1, [pc, #252]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	60cb      	str	r3, [r1, #12]
 8001f10:	e018      	b.n	8001f44 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001f12:	4b3d      	ldr	r3, [pc, #244]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a3c      	ldr	r2, [pc, #240]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001f18:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001f1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f1e:	f7ff fa6b 	bl	80013f8 <HAL_GetTick>
 8001f22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f24:	e008      	b.n	8001f38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001f26:	f7ff fa67 	bl	80013f8 <HAL_GetTick>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f2e:	1ad3      	subs	r3, r2, r3
 8001f30:	2b02      	cmp	r3, #2
 8001f32:	d901      	bls.n	8001f38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001f34:	2303      	movs	r3, #3
 8001f36:	e23d      	b.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001f38:	4b33      	ldr	r3, [pc, #204]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d1f0      	bne.n	8001f26 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0308 	and.w	r3, r3, #8
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d036      	beq.n	8001fbe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	695b      	ldr	r3, [r3, #20]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d019      	beq.n	8001f8c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f58:	4b2b      	ldr	r3, [pc, #172]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001f5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f5c:	4a2a      	ldr	r2, [pc, #168]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001f5e:	f043 0301 	orr.w	r3, r3, #1
 8001f62:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f64:	f7ff fa48 	bl	80013f8 <HAL_GetTick>
 8001f68:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f6a:	e008      	b.n	8001f7e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f6c:	f7ff fa44 	bl	80013f8 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d901      	bls.n	8001f7e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001f7a:	2303      	movs	r3, #3
 8001f7c:	e21a      	b.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001f7e:	4b22      	ldr	r3, [pc, #136]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001f80:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f82:	f003 0302 	and.w	r3, r3, #2
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d0f0      	beq.n	8001f6c <HAL_RCC_OscConfig+0x45c>
 8001f8a:	e018      	b.n	8001fbe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f8c:	4b1e      	ldr	r3, [pc, #120]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001f8e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f90:	4a1d      	ldr	r2, [pc, #116]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001f92:	f023 0301 	bic.w	r3, r3, #1
 8001f96:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f98:	f7ff fa2e 	bl	80013f8 <HAL_GetTick>
 8001f9c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fa0:	f7ff fa2a 	bl	80013f8 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e200      	b.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001fb2:	4b15      	ldr	r3, [pc, #84]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001fb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0320 	and.w	r3, r3, #32
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d039      	beq.n	800203e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d01c      	beq.n	800200c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a0c      	ldr	r2, [pc, #48]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001fd8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001fdc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001fde:	f7ff fa0b 	bl	80013f8 <HAL_GetTick>
 8001fe2:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001fe4:	e008      	b.n	8001ff8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001fe6:	f7ff fa07 	bl	80013f8 <HAL_GetTick>
 8001fea:	4602      	mov	r2, r0
 8001fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fee:	1ad3      	subs	r3, r2, r3
 8001ff0:	2b02      	cmp	r3, #2
 8001ff2:	d901      	bls.n	8001ff8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001ff4:	2303      	movs	r3, #3
 8001ff6:	e1dd      	b.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ff8:	4b03      	ldr	r3, [pc, #12]	@ (8002008 <HAL_RCC_OscConfig+0x4f8>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0f0      	beq.n	8001fe6 <HAL_RCC_OscConfig+0x4d6>
 8002004:	e01b      	b.n	800203e <HAL_RCC_OscConfig+0x52e>
 8002006:	bf00      	nop
 8002008:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800200c:	4b9b      	ldr	r3, [pc, #620]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a9a      	ldr	r2, [pc, #616]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 8002012:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002016:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002018:	f7ff f9ee 	bl	80013f8 <HAL_GetTick>
 800201c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002020:	f7ff f9ea 	bl	80013f8 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e1c0      	b.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002032:	4b92      	ldr	r3, [pc, #584]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 0304 	and.w	r3, r3, #4
 8002046:	2b00      	cmp	r3, #0
 8002048:	f000 8081 	beq.w	800214e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800204c:	4b8c      	ldr	r3, [pc, #560]	@ (8002280 <HAL_RCC_OscConfig+0x770>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a8b      	ldr	r2, [pc, #556]	@ (8002280 <HAL_RCC_OscConfig+0x770>)
 8002052:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002056:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002058:	f7ff f9ce 	bl	80013f8 <HAL_GetTick>
 800205c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800205e:	e008      	b.n	8002072 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002060:	f7ff f9ca 	bl	80013f8 <HAL_GetTick>
 8002064:	4602      	mov	r2, r0
 8002066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002068:	1ad3      	subs	r3, r2, r3
 800206a:	2b64      	cmp	r3, #100	@ 0x64
 800206c:	d901      	bls.n	8002072 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800206e:	2303      	movs	r3, #3
 8002070:	e1a0      	b.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002072:	4b83      	ldr	r3, [pc, #524]	@ (8002280 <HAL_RCC_OscConfig+0x770>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0f0      	beq.n	8002060 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d106      	bne.n	8002094 <HAL_RCC_OscConfig+0x584>
 8002086:	4b7d      	ldr	r3, [pc, #500]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208a:	4a7c      	ldr	r2, [pc, #496]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6713      	str	r3, [r2, #112]	@ 0x70
 8002092:	e02d      	b.n	80020f0 <HAL_RCC_OscConfig+0x5e0>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d10c      	bne.n	80020b6 <HAL_RCC_OscConfig+0x5a6>
 800209c:	4b77      	ldr	r3, [pc, #476]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 800209e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a0:	4a76      	ldr	r2, [pc, #472]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 80020a2:	f023 0301 	bic.w	r3, r3, #1
 80020a6:	6713      	str	r3, [r2, #112]	@ 0x70
 80020a8:	4b74      	ldr	r3, [pc, #464]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 80020aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ac:	4a73      	ldr	r2, [pc, #460]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 80020ae:	f023 0304 	bic.w	r3, r3, #4
 80020b2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020b4:	e01c      	b.n	80020f0 <HAL_RCC_OscConfig+0x5e0>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	689b      	ldr	r3, [r3, #8]
 80020ba:	2b05      	cmp	r3, #5
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x5c8>
 80020be:	4b6f      	ldr	r3, [pc, #444]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 80020c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020c2:	4a6e      	ldr	r2, [pc, #440]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 80020c4:	f043 0304 	orr.w	r3, r3, #4
 80020c8:	6713      	str	r3, [r2, #112]	@ 0x70
 80020ca:	4b6c      	ldr	r3, [pc, #432]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 80020cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020ce:	4a6b      	ldr	r2, [pc, #428]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 80020d0:	f043 0301 	orr.w	r3, r3, #1
 80020d4:	6713      	str	r3, [r2, #112]	@ 0x70
 80020d6:	e00b      	b.n	80020f0 <HAL_RCC_OscConfig+0x5e0>
 80020d8:	4b68      	ldr	r3, [pc, #416]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 80020da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020dc:	4a67      	ldr	r2, [pc, #412]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 80020de:	f023 0301 	bic.w	r3, r3, #1
 80020e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80020e4:	4b65      	ldr	r3, [pc, #404]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 80020e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020e8:	4a64      	ldr	r2, [pc, #400]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 80020ea:	f023 0304 	bic.w	r3, r3, #4
 80020ee:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d015      	beq.n	8002124 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020f8:	f7ff f97e 	bl	80013f8 <HAL_GetTick>
 80020fc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80020fe:	e00a      	b.n	8002116 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002100:	f7ff f97a 	bl	80013f8 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800210e:	4293      	cmp	r3, r2
 8002110:	d901      	bls.n	8002116 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002112:	2303      	movs	r3, #3
 8002114:	e14e      	b.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002116:	4b59      	ldr	r3, [pc, #356]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 8002118:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d0ee      	beq.n	8002100 <HAL_RCC_OscConfig+0x5f0>
 8002122:	e014      	b.n	800214e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002124:	f7ff f968 	bl	80013f8 <HAL_GetTick>
 8002128:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800212a:	e00a      	b.n	8002142 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800212c:	f7ff f964 	bl	80013f8 <HAL_GetTick>
 8002130:	4602      	mov	r2, r0
 8002132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002134:	1ad3      	subs	r3, r2, r3
 8002136:	f241 3288 	movw	r2, #5000	@ 0x1388
 800213a:	4293      	cmp	r3, r2
 800213c:	d901      	bls.n	8002142 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800213e:	2303      	movs	r3, #3
 8002140:	e138      	b.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002142:	4b4e      	ldr	r3, [pc, #312]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 8002144:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002146:	f003 0302 	and.w	r3, r3, #2
 800214a:	2b00      	cmp	r3, #0
 800214c:	d1ee      	bne.n	800212c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002152:	2b00      	cmp	r3, #0
 8002154:	f000 812d 	beq.w	80023b2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002158:	4b48      	ldr	r3, [pc, #288]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002160:	2b18      	cmp	r3, #24
 8002162:	f000 80bd 	beq.w	80022e0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800216a:	2b02      	cmp	r3, #2
 800216c:	f040 809e 	bne.w	80022ac <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002170:	4b42      	ldr	r3, [pc, #264]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a41      	ldr	r2, [pc, #260]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 8002176:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800217a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800217c:	f7ff f93c 	bl	80013f8 <HAL_GetTick>
 8002180:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002184:	f7ff f938 	bl	80013f8 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e10e      	b.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002196:	4b39      	ldr	r3, [pc, #228]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d1f0      	bne.n	8002184 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021a2:	4b36      	ldr	r3, [pc, #216]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 80021a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80021a6:	4b37      	ldr	r3, [pc, #220]	@ (8002284 <HAL_RCC_OscConfig+0x774>)
 80021a8:	4013      	ands	r3, r2
 80021aa:	687a      	ldr	r2, [r7, #4]
 80021ac:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 80021ae:	687a      	ldr	r2, [r7, #4]
 80021b0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80021b2:	0112      	lsls	r2, r2, #4
 80021b4:	430a      	orrs	r2, r1
 80021b6:	4931      	ldr	r1, [pc, #196]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	628b      	str	r3, [r1, #40]	@ 0x28
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021c0:	3b01      	subs	r3, #1
 80021c2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021ca:	3b01      	subs	r3, #1
 80021cc:	025b      	lsls	r3, r3, #9
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80021d6:	3b01      	subs	r3, #1
 80021d8:	041b      	lsls	r3, r3, #16
 80021da:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80021de:	431a      	orrs	r2, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021e4:	3b01      	subs	r3, #1
 80021e6:	061b      	lsls	r3, r3, #24
 80021e8:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80021ec:	4923      	ldr	r1, [pc, #140]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 80021ee:	4313      	orrs	r3, r2
 80021f0:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80021f2:	4b22      	ldr	r3, [pc, #136]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 80021f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021f6:	4a21      	ldr	r2, [pc, #132]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 80021f8:	f023 0301 	bic.w	r3, r3, #1
 80021fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021fe:	4b1f      	ldr	r3, [pc, #124]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 8002200:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002202:	4b21      	ldr	r3, [pc, #132]	@ (8002288 <HAL_RCC_OscConfig+0x778>)
 8002204:	4013      	ands	r3, r2
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800220a:	00d2      	lsls	r2, r2, #3
 800220c:	491b      	ldr	r1, [pc, #108]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 800220e:	4313      	orrs	r3, r2
 8002210:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002212:	4b1a      	ldr	r3, [pc, #104]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 8002214:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002216:	f023 020c 	bic.w	r2, r3, #12
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800221e:	4917      	ldr	r1, [pc, #92]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 8002220:	4313      	orrs	r3, r2
 8002222:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002224:	4b15      	ldr	r3, [pc, #84]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 8002226:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002228:	f023 0202 	bic.w	r2, r3, #2
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002230:	4912      	ldr	r1, [pc, #72]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 8002232:	4313      	orrs	r3, r2
 8002234:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002236:	4b11      	ldr	r3, [pc, #68]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 8002238:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800223a:	4a10      	ldr	r2, [pc, #64]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 800223c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002240:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002242:	4b0e      	ldr	r3, [pc, #56]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 8002244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002246:	4a0d      	ldr	r2, [pc, #52]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 8002248:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800224c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800224e:	4b0b      	ldr	r3, [pc, #44]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 8002250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002252:	4a0a      	ldr	r2, [pc, #40]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 8002254:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002258:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800225a:	4b08      	ldr	r3, [pc, #32]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 800225c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800225e:	4a07      	ldr	r2, [pc, #28]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 8002260:	f043 0301 	orr.w	r3, r3, #1
 8002264:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002266:	4b05      	ldr	r3, [pc, #20]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a04      	ldr	r2, [pc, #16]	@ (800227c <HAL_RCC_OscConfig+0x76c>)
 800226c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002270:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002272:	f7ff f8c1 	bl	80013f8 <HAL_GetTick>
 8002276:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002278:	e011      	b.n	800229e <HAL_RCC_OscConfig+0x78e>
 800227a:	bf00      	nop
 800227c:	58024400 	.word	0x58024400
 8002280:	58024800 	.word	0x58024800
 8002284:	fffffc0c 	.word	0xfffffc0c
 8002288:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800228c:	f7ff f8b4 	bl	80013f8 <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002294:	1ad3      	subs	r3, r2, r3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d901      	bls.n	800229e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800229a:	2303      	movs	r3, #3
 800229c:	e08a      	b.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800229e:	4b47      	ldr	r3, [pc, #284]	@ (80023bc <HAL_RCC_OscConfig+0x8ac>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d0f0      	beq.n	800228c <HAL_RCC_OscConfig+0x77c>
 80022aa:	e082      	b.n	80023b2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ac:	4b43      	ldr	r3, [pc, #268]	@ (80023bc <HAL_RCC_OscConfig+0x8ac>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a42      	ldr	r2, [pc, #264]	@ (80023bc <HAL_RCC_OscConfig+0x8ac>)
 80022b2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b8:	f7ff f89e 	bl	80013f8 <HAL_GetTick>
 80022bc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022be:	e008      	b.n	80022d2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c0:	f7ff f89a 	bl	80013f8 <HAL_GetTick>
 80022c4:	4602      	mov	r2, r0
 80022c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022c8:	1ad3      	subs	r3, r2, r3
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d901      	bls.n	80022d2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80022ce:	2303      	movs	r3, #3
 80022d0:	e070      	b.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80022d2:	4b3a      	ldr	r3, [pc, #232]	@ (80023bc <HAL_RCC_OscConfig+0x8ac>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d1f0      	bne.n	80022c0 <HAL_RCC_OscConfig+0x7b0>
 80022de:	e068      	b.n	80023b2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80022e0:	4b36      	ldr	r3, [pc, #216]	@ (80023bc <HAL_RCC_OscConfig+0x8ac>)
 80022e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80022e6:	4b35      	ldr	r3, [pc, #212]	@ (80023bc <HAL_RCC_OscConfig+0x8ac>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ea:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f0:	2b01      	cmp	r3, #1
 80022f2:	d031      	beq.n	8002358 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022f4:	693b      	ldr	r3, [r7, #16]
 80022f6:	f003 0203 	and.w	r2, r3, #3
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022fe:	429a      	cmp	r2, r3
 8002300:	d12a      	bne.n	8002358 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d122      	bne.n	8002358 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800231c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800231e:	429a      	cmp	r2, r3
 8002320:	d11a      	bne.n	8002358 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	0a5b      	lsrs	r3, r3, #9
 8002326:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800232e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d111      	bne.n	8002358 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	0c1b      	lsrs	r3, r3, #16
 8002338:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002340:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002342:	429a      	cmp	r2, r3
 8002344:	d108      	bne.n	8002358 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	0e1b      	lsrs	r3, r3, #24
 800234a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002352:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002354:	429a      	cmp	r2, r3
 8002356:	d001      	beq.n	800235c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002358:	2301      	movs	r3, #1
 800235a:	e02b      	b.n	80023b4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800235c:	4b17      	ldr	r3, [pc, #92]	@ (80023bc <HAL_RCC_OscConfig+0x8ac>)
 800235e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002360:	08db      	lsrs	r3, r3, #3
 8002362:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002366:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	429a      	cmp	r2, r3
 8002370:	d01f      	beq.n	80023b2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002372:	4b12      	ldr	r3, [pc, #72]	@ (80023bc <HAL_RCC_OscConfig+0x8ac>)
 8002374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002376:	4a11      	ldr	r2, [pc, #68]	@ (80023bc <HAL_RCC_OscConfig+0x8ac>)
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800237e:	f7ff f83b 	bl	80013f8 <HAL_GetTick>
 8002382:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002384:	bf00      	nop
 8002386:	f7ff f837 	bl	80013f8 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800238e:	4293      	cmp	r3, r2
 8002390:	d0f9      	beq.n	8002386 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002392:	4b0a      	ldr	r3, [pc, #40]	@ (80023bc <HAL_RCC_OscConfig+0x8ac>)
 8002394:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002396:	4b0a      	ldr	r3, [pc, #40]	@ (80023c0 <HAL_RCC_OscConfig+0x8b0>)
 8002398:	4013      	ands	r3, r2
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800239e:	00d2      	lsls	r2, r2, #3
 80023a0:	4906      	ldr	r1, [pc, #24]	@ (80023bc <HAL_RCC_OscConfig+0x8ac>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80023a6:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <HAL_RCC_OscConfig+0x8ac>)
 80023a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023aa:	4a04      	ldr	r2, [pc, #16]	@ (80023bc <HAL_RCC_OscConfig+0x8ac>)
 80023ac:	f043 0301 	orr.w	r3, r3, #1
 80023b0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80023b2:	2300      	movs	r3, #0
}
 80023b4:	4618      	mov	r0, r3
 80023b6:	3730      	adds	r7, #48	@ 0x30
 80023b8:	46bd      	mov	sp, r7
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	58024400 	.word	0x58024400
 80023c0:	ffff0007 	.word	0xffff0007

080023c4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e19c      	b.n	8002712 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023d8:	4b8a      	ldr	r3, [pc, #552]	@ (8002604 <HAL_RCC_ClockConfig+0x240>)
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 030f 	and.w	r3, r3, #15
 80023e0:	683a      	ldr	r2, [r7, #0]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d910      	bls.n	8002408 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023e6:	4b87      	ldr	r3, [pc, #540]	@ (8002604 <HAL_RCC_ClockConfig+0x240>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f023 020f 	bic.w	r2, r3, #15
 80023ee:	4985      	ldr	r1, [pc, #532]	@ (8002604 <HAL_RCC_ClockConfig+0x240>)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	4313      	orrs	r3, r2
 80023f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023f6:	4b83      	ldr	r3, [pc, #524]	@ (8002604 <HAL_RCC_ClockConfig+0x240>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 030f 	and.w	r3, r3, #15
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d001      	beq.n	8002408 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e184      	b.n	8002712 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d010      	beq.n	8002436 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	691a      	ldr	r2, [r3, #16]
 8002418:	4b7b      	ldr	r3, [pc, #492]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002420:	429a      	cmp	r2, r3
 8002422:	d908      	bls.n	8002436 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002424:	4b78      	ldr	r3, [pc, #480]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	691b      	ldr	r3, [r3, #16]
 8002430:	4975      	ldr	r1, [pc, #468]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 8002432:	4313      	orrs	r3, r2
 8002434:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0308 	and.w	r3, r3, #8
 800243e:	2b00      	cmp	r3, #0
 8002440:	d010      	beq.n	8002464 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	695a      	ldr	r2, [r3, #20]
 8002446:	4b70      	ldr	r3, [pc, #448]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 8002448:	69db      	ldr	r3, [r3, #28]
 800244a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800244e:	429a      	cmp	r2, r3
 8002450:	d908      	bls.n	8002464 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002452:	4b6d      	ldr	r3, [pc, #436]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 8002454:	69db      	ldr	r3, [r3, #28]
 8002456:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	695b      	ldr	r3, [r3, #20]
 800245e:	496a      	ldr	r1, [pc, #424]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 8002460:	4313      	orrs	r3, r2
 8002462:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0310 	and.w	r3, r3, #16
 800246c:	2b00      	cmp	r3, #0
 800246e:	d010      	beq.n	8002492 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	699a      	ldr	r2, [r3, #24]
 8002474:	4b64      	ldr	r3, [pc, #400]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 8002476:	69db      	ldr	r3, [r3, #28]
 8002478:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800247c:	429a      	cmp	r2, r3
 800247e:	d908      	bls.n	8002492 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002480:	4b61      	ldr	r3, [pc, #388]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 8002482:	69db      	ldr	r3, [r3, #28]
 8002484:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	495e      	ldr	r1, [pc, #376]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 800248e:	4313      	orrs	r3, r2
 8002490:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f003 0320 	and.w	r3, r3, #32
 800249a:	2b00      	cmp	r3, #0
 800249c:	d010      	beq.n	80024c0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	69da      	ldr	r2, [r3, #28]
 80024a2:	4b59      	ldr	r3, [pc, #356]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 80024a4:	6a1b      	ldr	r3, [r3, #32]
 80024a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024aa:	429a      	cmp	r2, r3
 80024ac:	d908      	bls.n	80024c0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80024ae:	4b56      	ldr	r3, [pc, #344]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 80024b0:	6a1b      	ldr	r3, [r3, #32]
 80024b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	4953      	ldr	r1, [pc, #332]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 80024bc:	4313      	orrs	r3, r2
 80024be:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d010      	beq.n	80024ee <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	4b4d      	ldr	r3, [pc, #308]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	f003 030f 	and.w	r3, r3, #15
 80024d8:	429a      	cmp	r2, r3
 80024da:	d908      	bls.n	80024ee <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024dc:	4b4a      	ldr	r3, [pc, #296]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 80024de:	699b      	ldr	r3, [r3, #24]
 80024e0:	f023 020f 	bic.w	r2, r3, #15
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68db      	ldr	r3, [r3, #12]
 80024e8:	4947      	ldr	r1, [pc, #284]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f003 0301 	and.w	r3, r3, #1
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d055      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80024fa:	4b43      	ldr	r3, [pc, #268]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	4940      	ldr	r1, [pc, #256]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 8002508:	4313      	orrs	r3, r2
 800250a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	2b02      	cmp	r3, #2
 8002512:	d107      	bne.n	8002524 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002514:	4b3c      	ldr	r3, [pc, #240]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d121      	bne.n	8002564 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002520:	2301      	movs	r3, #1
 8002522:	e0f6      	b.n	8002712 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	2b03      	cmp	r3, #3
 800252a:	d107      	bne.n	800253c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800252c:	4b36      	ldr	r3, [pc, #216]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d115      	bne.n	8002564 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e0ea      	b.n	8002712 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d107      	bne.n	8002554 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002544:	4b30      	ldr	r3, [pc, #192]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d109      	bne.n	8002564 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e0de      	b.n	8002712 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002554:	4b2c      	ldr	r3, [pc, #176]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0304 	and.w	r3, r3, #4
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0d6      	b.n	8002712 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002564:	4b28      	ldr	r3, [pc, #160]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 8002566:	691b      	ldr	r3, [r3, #16]
 8002568:	f023 0207 	bic.w	r2, r3, #7
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	685b      	ldr	r3, [r3, #4]
 8002570:	4925      	ldr	r1, [pc, #148]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 8002572:	4313      	orrs	r3, r2
 8002574:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002576:	f7fe ff3f 	bl	80013f8 <HAL_GetTick>
 800257a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800257c:	e00a      	b.n	8002594 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800257e:	f7fe ff3b 	bl	80013f8 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	f241 3288 	movw	r2, #5000	@ 0x1388
 800258c:	4293      	cmp	r3, r2
 800258e:	d901      	bls.n	8002594 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e0be      	b.n	8002712 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002594:	4b1c      	ldr	r3, [pc, #112]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 8002596:	691b      	ldr	r3, [r3, #16]
 8002598:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d1eb      	bne.n	800257e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d010      	beq.n	80025d4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	68da      	ldr	r2, [r3, #12]
 80025b6:	4b14      	ldr	r3, [pc, #80]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	429a      	cmp	r2, r3
 80025c0:	d208      	bcs.n	80025d4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025c2:	4b11      	ldr	r3, [pc, #68]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 80025c4:	699b      	ldr	r3, [r3, #24]
 80025c6:	f023 020f 	bic.w	r2, r3, #15
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	490e      	ldr	r1, [pc, #56]	@ (8002608 <HAL_RCC_ClockConfig+0x244>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002604 <HAL_RCC_ClockConfig+0x240>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f003 030f 	and.w	r3, r3, #15
 80025dc:	683a      	ldr	r2, [r7, #0]
 80025de:	429a      	cmp	r2, r3
 80025e0:	d214      	bcs.n	800260c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025e2:	4b08      	ldr	r3, [pc, #32]	@ (8002604 <HAL_RCC_ClockConfig+0x240>)
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f023 020f 	bic.w	r2, r3, #15
 80025ea:	4906      	ldr	r1, [pc, #24]	@ (8002604 <HAL_RCC_ClockConfig+0x240>)
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025f2:	4b04      	ldr	r3, [pc, #16]	@ (8002604 <HAL_RCC_ClockConfig+0x240>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	683a      	ldr	r2, [r7, #0]
 80025fc:	429a      	cmp	r2, r3
 80025fe:	d005      	beq.n	800260c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002600:	2301      	movs	r3, #1
 8002602:	e086      	b.n	8002712 <HAL_RCC_ClockConfig+0x34e>
 8002604:	52002000 	.word	0x52002000
 8002608:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0304 	and.w	r3, r3, #4
 8002614:	2b00      	cmp	r3, #0
 8002616:	d010      	beq.n	800263a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	691a      	ldr	r2, [r3, #16]
 800261c:	4b3f      	ldr	r3, [pc, #252]	@ (800271c <HAL_RCC_ClockConfig+0x358>)
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002624:	429a      	cmp	r2, r3
 8002626:	d208      	bcs.n	800263a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002628:	4b3c      	ldr	r3, [pc, #240]	@ (800271c <HAL_RCC_ClockConfig+0x358>)
 800262a:	699b      	ldr	r3, [r3, #24]
 800262c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	691b      	ldr	r3, [r3, #16]
 8002634:	4939      	ldr	r1, [pc, #228]	@ (800271c <HAL_RCC_ClockConfig+0x358>)
 8002636:	4313      	orrs	r3, r2
 8002638:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d010      	beq.n	8002668 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695a      	ldr	r2, [r3, #20]
 800264a:	4b34      	ldr	r3, [pc, #208]	@ (800271c <HAL_RCC_ClockConfig+0x358>)
 800264c:	69db      	ldr	r3, [r3, #28]
 800264e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002652:	429a      	cmp	r2, r3
 8002654:	d208      	bcs.n	8002668 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002656:	4b31      	ldr	r3, [pc, #196]	@ (800271c <HAL_RCC_ClockConfig+0x358>)
 8002658:	69db      	ldr	r3, [r3, #28]
 800265a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	695b      	ldr	r3, [r3, #20]
 8002662:	492e      	ldr	r1, [pc, #184]	@ (800271c <HAL_RCC_ClockConfig+0x358>)
 8002664:	4313      	orrs	r3, r2
 8002666:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b00      	cmp	r3, #0
 8002672:	d010      	beq.n	8002696 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	699a      	ldr	r2, [r3, #24]
 8002678:	4b28      	ldr	r3, [pc, #160]	@ (800271c <HAL_RCC_ClockConfig+0x358>)
 800267a:	69db      	ldr	r3, [r3, #28]
 800267c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002680:	429a      	cmp	r2, r3
 8002682:	d208      	bcs.n	8002696 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002684:	4b25      	ldr	r3, [pc, #148]	@ (800271c <HAL_RCC_ClockConfig+0x358>)
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	4922      	ldr	r1, [pc, #136]	@ (800271c <HAL_RCC_ClockConfig+0x358>)
 8002692:	4313      	orrs	r3, r2
 8002694:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0320 	and.w	r3, r3, #32
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d010      	beq.n	80026c4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	69da      	ldr	r2, [r3, #28]
 80026a6:	4b1d      	ldr	r3, [pc, #116]	@ (800271c <HAL_RCC_ClockConfig+0x358>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80026ae:	429a      	cmp	r2, r3
 80026b0:	d208      	bcs.n	80026c4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80026b2:	4b1a      	ldr	r3, [pc, #104]	@ (800271c <HAL_RCC_ClockConfig+0x358>)
 80026b4:	6a1b      	ldr	r3, [r3, #32]
 80026b6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	4917      	ldr	r1, [pc, #92]	@ (800271c <HAL_RCC_ClockConfig+0x358>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80026c4:	f000 f834 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b14      	ldr	r3, [pc, #80]	@ (800271c <HAL_RCC_ClockConfig+0x358>)
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	0a1b      	lsrs	r3, r3, #8
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	4912      	ldr	r1, [pc, #72]	@ (8002720 <HAL_RCC_ClockConfig+0x35c>)
 80026d6:	5ccb      	ldrb	r3, [r1, r3]
 80026d8:	f003 031f 	and.w	r3, r3, #31
 80026dc:	fa22 f303 	lsr.w	r3, r2, r3
 80026e0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80026e2:	4b0e      	ldr	r3, [pc, #56]	@ (800271c <HAL_RCC_ClockConfig+0x358>)
 80026e4:	699b      	ldr	r3, [r3, #24]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002720 <HAL_RCC_ClockConfig+0x35c>)
 80026ec:	5cd3      	ldrb	r3, [r2, r3]
 80026ee:	f003 031f 	and.w	r3, r3, #31
 80026f2:	693a      	ldr	r2, [r7, #16]
 80026f4:	fa22 f303 	lsr.w	r3, r2, r3
 80026f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002724 <HAL_RCC_ClockConfig+0x360>)
 80026fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002728 <HAL_RCC_ClockConfig+0x364>)
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002702:	4b0a      	ldr	r3, [pc, #40]	@ (800272c <HAL_RCC_ClockConfig+0x368>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	4618      	mov	r0, r3
 8002708:	f7fe fe2c 	bl	8001364 <HAL_InitTick>
 800270c:	4603      	mov	r3, r0
 800270e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002710:	7bfb      	ldrb	r3, [r7, #15]
}
 8002712:	4618      	mov	r0, r3
 8002714:	3718      	adds	r7, #24
 8002716:	46bd      	mov	sp, r7
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	58024400 	.word	0x58024400
 8002720:	08006440 	.word	0x08006440
 8002724:	24000004 	.word	0x24000004
 8002728:	24000000 	.word	0x24000000
 800272c:	2400000c 	.word	0x2400000c

08002730 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002730:	b480      	push	{r7}
 8002732:	b089      	sub	sp, #36	@ 0x24
 8002734:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002736:	4bb3      	ldr	r3, [pc, #716]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002738:	691b      	ldr	r3, [r3, #16]
 800273a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800273e:	2b18      	cmp	r3, #24
 8002740:	f200 8155 	bhi.w	80029ee <HAL_RCC_GetSysClockFreq+0x2be>
 8002744:	a201      	add	r2, pc, #4	@ (adr r2, 800274c <HAL_RCC_GetSysClockFreq+0x1c>)
 8002746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800274a:	bf00      	nop
 800274c:	080027b1 	.word	0x080027b1
 8002750:	080029ef 	.word	0x080029ef
 8002754:	080029ef 	.word	0x080029ef
 8002758:	080029ef 	.word	0x080029ef
 800275c:	080029ef 	.word	0x080029ef
 8002760:	080029ef 	.word	0x080029ef
 8002764:	080029ef 	.word	0x080029ef
 8002768:	080029ef 	.word	0x080029ef
 800276c:	080027d7 	.word	0x080027d7
 8002770:	080029ef 	.word	0x080029ef
 8002774:	080029ef 	.word	0x080029ef
 8002778:	080029ef 	.word	0x080029ef
 800277c:	080029ef 	.word	0x080029ef
 8002780:	080029ef 	.word	0x080029ef
 8002784:	080029ef 	.word	0x080029ef
 8002788:	080029ef 	.word	0x080029ef
 800278c:	080027dd 	.word	0x080027dd
 8002790:	080029ef 	.word	0x080029ef
 8002794:	080029ef 	.word	0x080029ef
 8002798:	080029ef 	.word	0x080029ef
 800279c:	080029ef 	.word	0x080029ef
 80027a0:	080029ef 	.word	0x080029ef
 80027a4:	080029ef 	.word	0x080029ef
 80027a8:	080029ef 	.word	0x080029ef
 80027ac:	080027e3 	.word	0x080027e3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027b0:	4b94      	ldr	r3, [pc, #592]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0320 	and.w	r3, r3, #32
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d009      	beq.n	80027d0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80027bc:	4b91      	ldr	r3, [pc, #580]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	08db      	lsrs	r3, r3, #3
 80027c2:	f003 0303 	and.w	r3, r3, #3
 80027c6:	4a90      	ldr	r2, [pc, #576]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027c8:	fa22 f303 	lsr.w	r3, r2, r3
 80027cc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80027ce:	e111      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80027d0:	4b8d      	ldr	r3, [pc, #564]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80027d2:	61bb      	str	r3, [r7, #24]
      break;
 80027d4:	e10e      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80027d6:	4b8d      	ldr	r3, [pc, #564]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80027d8:	61bb      	str	r3, [r7, #24]
      break;
 80027da:	e10b      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80027dc:	4b8c      	ldr	r3, [pc, #560]	@ (8002a10 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80027de:	61bb      	str	r3, [r7, #24]
      break;
 80027e0:	e108      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80027e2:	4b88      	ldr	r3, [pc, #544]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027e6:	f003 0303 	and.w	r3, r3, #3
 80027ea:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80027ec:	4b85      	ldr	r3, [pc, #532]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027f0:	091b      	lsrs	r3, r3, #4
 80027f2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80027f6:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80027f8:	4b82      	ldr	r3, [pc, #520]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027fc:	f003 0301 	and.w	r3, r3, #1
 8002800:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002802:	4b80      	ldr	r3, [pc, #512]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002804:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002806:	08db      	lsrs	r3, r3, #3
 8002808:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	fb02 f303 	mul.w	r3, r2, r3
 8002812:	ee07 3a90 	vmov	s15, r3
 8002816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800281a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 80e1 	beq.w	80029e8 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2b02      	cmp	r3, #2
 800282a:	f000 8083 	beq.w	8002934 <HAL_RCC_GetSysClockFreq+0x204>
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	2b02      	cmp	r3, #2
 8002832:	f200 80a1 	bhi.w	8002978 <HAL_RCC_GetSysClockFreq+0x248>
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d003      	beq.n	8002844 <HAL_RCC_GetSysClockFreq+0x114>
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	2b01      	cmp	r3, #1
 8002840:	d056      	beq.n	80028f0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002842:	e099      	b.n	8002978 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002844:	4b6f      	ldr	r3, [pc, #444]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0320 	and.w	r3, r3, #32
 800284c:	2b00      	cmp	r3, #0
 800284e:	d02d      	beq.n	80028ac <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002850:	4b6c      	ldr	r3, [pc, #432]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	08db      	lsrs	r3, r3, #3
 8002856:	f003 0303 	and.w	r3, r3, #3
 800285a:	4a6b      	ldr	r2, [pc, #428]	@ (8002a08 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800285c:	fa22 f303 	lsr.w	r3, r2, r3
 8002860:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	ee07 3a90 	vmov	s15, r3
 8002868:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	ee07 3a90 	vmov	s15, r3
 8002872:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002876:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800287a:	4b62      	ldr	r3, [pc, #392]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800287c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800287e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002882:	ee07 3a90 	vmov	s15, r3
 8002886:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800288a:	ed97 6a02 	vldr	s12, [r7, #8]
 800288e:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002892:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002896:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800289a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800289e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028a6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80028aa:	e087      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028ac:	693b      	ldr	r3, [r7, #16]
 80028ae:	ee07 3a90 	vmov	s15, r3
 80028b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028b6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002a18 <HAL_RCC_GetSysClockFreq+0x2e8>
 80028ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80028be:	4b51      	ldr	r3, [pc, #324]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028c6:	ee07 3a90 	vmov	s15, r3
 80028ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80028ce:	ed97 6a02 	vldr	s12, [r7, #8]
 80028d2:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 80028d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80028da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80028de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80028e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80028e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028ea:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80028ee:	e065      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	ee07 3a90 	vmov	s15, r3
 80028f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80028fa:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002a1c <HAL_RCC_GetSysClockFreq+0x2ec>
 80028fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002902:	4b40      	ldr	r3, [pc, #256]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002904:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002906:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800290a:	ee07 3a90 	vmov	s15, r3
 800290e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002912:	ed97 6a02 	vldr	s12, [r7, #8]
 8002916:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 800291a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800291e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002922:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002926:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800292a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800292e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002932:	e043      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002934:	693b      	ldr	r3, [r7, #16]
 8002936:	ee07 3a90 	vmov	s15, r3
 800293a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800293e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002a20 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002942:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002946:	4b2f      	ldr	r3, [pc, #188]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800294e:	ee07 3a90 	vmov	s15, r3
 8002952:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002956:	ed97 6a02 	vldr	s12, [r7, #8]
 800295a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 800295e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002962:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002966:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800296a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800296e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002972:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002976:	e021      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	ee07 3a90 	vmov	s15, r3
 800297e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002982:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002a1c <HAL_RCC_GetSysClockFreq+0x2ec>
 8002986:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800298a:	4b1e      	ldr	r3, [pc, #120]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002992:	ee07 3a90 	vmov	s15, r3
 8002996:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800299a:	ed97 6a02 	vldr	s12, [r7, #8]
 800299e:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002a14 <HAL_RCC_GetSysClockFreq+0x2e4>
 80029a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80029a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80029aa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80029ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80029b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80029b6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80029ba:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80029bc:	4b11      	ldr	r3, [pc, #68]	@ (8002a04 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c0:	0a5b      	lsrs	r3, r3, #9
 80029c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80029c6:	3301      	adds	r3, #1
 80029c8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	ee07 3a90 	vmov	s15, r3
 80029d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80029d4:	edd7 6a07 	vldr	s13, [r7, #28]
 80029d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80029dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029e0:	ee17 3a90 	vmov	r3, s15
 80029e4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80029e6:	e005      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80029e8:	2300      	movs	r3, #0
 80029ea:	61bb      	str	r3, [r7, #24]
      break;
 80029ec:	e002      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80029ee:	4b07      	ldr	r3, [pc, #28]	@ (8002a0c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80029f0:	61bb      	str	r3, [r7, #24]
      break;
 80029f2:	bf00      	nop
  }

  return sysclockfreq;
 80029f4:	69bb      	ldr	r3, [r7, #24]
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3724      	adds	r7, #36	@ 0x24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	58024400 	.word	0x58024400
 8002a08:	03d09000 	.word	0x03d09000
 8002a0c:	003d0900 	.word	0x003d0900
 8002a10:	017d7840 	.word	0x017d7840
 8002a14:	46000000 	.word	0x46000000
 8002a18:	4c742400 	.word	0x4c742400
 8002a1c:	4a742400 	.word	0x4a742400
 8002a20:	4bbebc20 	.word	0x4bbebc20

08002a24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002a2a:	f7ff fe81 	bl	8002730 <HAL_RCC_GetSysClockFreq>
 8002a2e:	4602      	mov	r2, r0
 8002a30:	4b10      	ldr	r3, [pc, #64]	@ (8002a74 <HAL_RCC_GetHCLKFreq+0x50>)
 8002a32:	699b      	ldr	r3, [r3, #24]
 8002a34:	0a1b      	lsrs	r3, r3, #8
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	490f      	ldr	r1, [pc, #60]	@ (8002a78 <HAL_RCC_GetHCLKFreq+0x54>)
 8002a3c:	5ccb      	ldrb	r3, [r1, r3]
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	fa22 f303 	lsr.w	r3, r2, r3
 8002a46:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002a48:	4b0a      	ldr	r3, [pc, #40]	@ (8002a74 <HAL_RCC_GetHCLKFreq+0x50>)
 8002a4a:	699b      	ldr	r3, [r3, #24]
 8002a4c:	f003 030f 	and.w	r3, r3, #15
 8002a50:	4a09      	ldr	r2, [pc, #36]	@ (8002a78 <HAL_RCC_GetHCLKFreq+0x54>)
 8002a52:	5cd3      	ldrb	r3, [r2, r3]
 8002a54:	f003 031f 	and.w	r3, r3, #31
 8002a58:	687a      	ldr	r2, [r7, #4]
 8002a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8002a5e:	4a07      	ldr	r2, [pc, #28]	@ (8002a7c <HAL_RCC_GetHCLKFreq+0x58>)
 8002a60:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002a62:	4a07      	ldr	r2, [pc, #28]	@ (8002a80 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002a68:	4b04      	ldr	r3, [pc, #16]	@ (8002a7c <HAL_RCC_GetHCLKFreq+0x58>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	3708      	adds	r7, #8
 8002a70:	46bd      	mov	sp, r7
 8002a72:	bd80      	pop	{r7, pc}
 8002a74:	58024400 	.word	0x58024400
 8002a78:	08006440 	.word	0x08006440
 8002a7c:	24000004 	.word	0x24000004
 8002a80:	24000000 	.word	0x24000000

08002a84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002a88:	f7ff ffcc 	bl	8002a24 <HAL_RCC_GetHCLKFreq>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	4b06      	ldr	r3, [pc, #24]	@ (8002aa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	091b      	lsrs	r3, r3, #4
 8002a94:	f003 0307 	and.w	r3, r3, #7
 8002a98:	4904      	ldr	r1, [pc, #16]	@ (8002aac <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a9a:	5ccb      	ldrb	r3, [r1, r3]
 8002a9c:	f003 031f 	and.w	r3, r3, #31
 8002aa0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	58024400 	.word	0x58024400
 8002aac:	08006440 	.word	0x08006440

08002ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002ab4:	f7ff ffb6 	bl	8002a24 <HAL_RCC_GetHCLKFreq>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	4b06      	ldr	r3, [pc, #24]	@ (8002ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	0a1b      	lsrs	r3, r3, #8
 8002ac0:	f003 0307 	and.w	r3, r3, #7
 8002ac4:	4904      	ldr	r1, [pc, #16]	@ (8002ad8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002ac6:	5ccb      	ldrb	r3, [r1, r3]
 8002ac8:	f003 031f 	and.w	r3, r3, #31
 8002acc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	58024400 	.word	0x58024400
 8002ad8:	08006440 	.word	0x08006440

08002adc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002ae0:	f7ff ffa0 	bl	8002a24 <HAL_RCC_GetHCLKFreq>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	4b06      	ldr	r3, [pc, #24]	@ (8002b00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002ae8:	6a1b      	ldr	r3, [r3, #32]
 8002aea:	091b      	lsrs	r3, r3, #4
 8002aec:	f003 0307 	and.w	r3, r3, #7
 8002af0:	4904      	ldr	r1, [pc, #16]	@ (8002b04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002af2:	5ccb      	ldrb	r3, [r1, r3]
 8002af4:	f003 031f 	and.w	r3, r3, #31
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	58024400 	.word	0x58024400
 8002b04:	08006440 	.word	0x08006440

08002b08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b089      	sub	sp, #36	@ 0x24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002b10:	4ba1      	ldr	r3, [pc, #644]	@ (8002d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b14:	f003 0303 	and.w	r3, r3, #3
 8002b18:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8002b1a:	4b9f      	ldr	r3, [pc, #636]	@ (8002d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b1e:	0b1b      	lsrs	r3, r3, #12
 8002b20:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b24:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002b26:	4b9c      	ldr	r3, [pc, #624]	@ (8002d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b2a:	091b      	lsrs	r3, r3, #4
 8002b2c:	f003 0301 	and.w	r3, r3, #1
 8002b30:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8002b32:	4b99      	ldr	r3, [pc, #612]	@ (8002d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b36:	08db      	lsrs	r3, r3, #3
 8002b38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002b3c:	693a      	ldr	r2, [r7, #16]
 8002b3e:	fb02 f303 	mul.w	r3, r2, r3
 8002b42:	ee07 3a90 	vmov	s15, r3
 8002b46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	f000 8111 	beq.w	8002d78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8002b56:	69bb      	ldr	r3, [r7, #24]
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	f000 8083 	beq.w	8002c64 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	2b02      	cmp	r3, #2
 8002b62:	f200 80a1 	bhi.w	8002ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d003      	beq.n	8002b74 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d056      	beq.n	8002c20 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8002b72:	e099      	b.n	8002ca8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002b74:	4b88      	ldr	r3, [pc, #544]	@ (8002d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d02d      	beq.n	8002bdc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002b80:	4b85      	ldr	r3, [pc, #532]	@ (8002d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	08db      	lsrs	r3, r3, #3
 8002b86:	f003 0303 	and.w	r3, r3, #3
 8002b8a:	4a84      	ldr	r2, [pc, #528]	@ (8002d9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8002b8c:	fa22 f303 	lsr.w	r3, r2, r3
 8002b90:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	ee07 3a90 	vmov	s15, r3
 8002b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	ee07 3a90 	vmov	s15, r3
 8002ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002baa:	4b7b      	ldr	r3, [pc, #492]	@ (8002d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bb2:	ee07 3a90 	vmov	s15, r3
 8002bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bba:	ed97 6a03 	vldr	s12, [r7, #12]
 8002bbe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002da0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002bca:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002bd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002bda:	e087      	b.n	8002cec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	ee07 3a90 	vmov	s15, r3
 8002be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002be6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002da4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8002bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002bee:	4b6a      	ldr	r3, [pc, #424]	@ (8002d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002bf6:	ee07 3a90 	vmov	s15, r3
 8002bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002bfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8002c02:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002da0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c0e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c1e:	e065      	b.n	8002cec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	ee07 3a90 	vmov	s15, r3
 8002c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c2a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c32:	4b59      	ldr	r3, [pc, #356]	@ (8002d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002c34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c3a:	ee07 3a90 	vmov	s15, r3
 8002c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c42:	ed97 6a03 	vldr	s12, [r7, #12]
 8002c46:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002da0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c52:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002c5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002c62:	e043      	b.n	8002cec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	ee07 3a90 	vmov	s15, r3
 8002c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c6e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002dac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8002c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002c76:	4b48      	ldr	r3, [pc, #288]	@ (8002d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002c78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c7e:	ee07 3a90 	vmov	s15, r3
 8002c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c86:	ed97 6a03 	vldr	s12, [r7, #12]
 8002c8a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002da0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002c96:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ca2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ca6:	e021      	b.n	8002cec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	ee07 3a90 	vmov	s15, r3
 8002cae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cb2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002da8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002cb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cba:	4b37      	ldr	r3, [pc, #220]	@ (8002d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002cbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cc2:	ee07 3a90 	vmov	s15, r3
 8002cc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cca:	ed97 6a03 	vldr	s12, [r7, #12]
 8002cce:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002da0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002cd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ce2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ce6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002cea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002cec:	4b2a      	ldr	r3, [pc, #168]	@ (8002d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002cee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002cf0:	0a5b      	lsrs	r3, r3, #9
 8002cf2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002cf6:	ee07 3a90 	vmov	s15, r3
 8002cfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cfe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002d06:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d12:	ee17 2a90 	vmov	r2, s15
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8002d1a:	4b1f      	ldr	r3, [pc, #124]	@ (8002d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d1e:	0c1b      	lsrs	r3, r3, #16
 8002d20:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d24:	ee07 3a90 	vmov	s15, r3
 8002d28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002d34:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d40:	ee17 2a90 	vmov	r2, s15
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8002d48:	4b13      	ldr	r3, [pc, #76]	@ (8002d98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002d4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d4c:	0e1b      	lsrs	r3, r3, #24
 8002d4e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002d52:	ee07 3a90 	vmov	s15, r3
 8002d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d5a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002d62:	edd7 6a07 	vldr	s13, [r7, #28]
 8002d66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002d6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002d6e:	ee17 2a90 	vmov	r2, s15
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002d76:	e008      	b.n	8002d8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2200      	movs	r2, #0
 8002d88:	609a      	str	r2, [r3, #8]
}
 8002d8a:	bf00      	nop
 8002d8c:	3724      	adds	r7, #36	@ 0x24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
 8002d96:	bf00      	nop
 8002d98:	58024400 	.word	0x58024400
 8002d9c:	03d09000 	.word	0x03d09000
 8002da0:	46000000 	.word	0x46000000
 8002da4:	4c742400 	.word	0x4c742400
 8002da8:	4a742400 	.word	0x4a742400
 8002dac:	4bbebc20 	.word	0x4bbebc20

08002db0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b089      	sub	sp, #36	@ 0x24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002db8:	4ba1      	ldr	r3, [pc, #644]	@ (8003040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dbc:	f003 0303 	and.w	r3, r3, #3
 8002dc0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8002dc2:	4b9f      	ldr	r3, [pc, #636]	@ (8003040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dc6:	0d1b      	lsrs	r3, r3, #20
 8002dc8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002dcc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002dce:	4b9c      	ldr	r3, [pc, #624]	@ (8003040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dd2:	0a1b      	lsrs	r3, r3, #8
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002dda:	4b99      	ldr	r3, [pc, #612]	@ (8003040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dde:	08db      	lsrs	r3, r3, #3
 8002de0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002de4:	693a      	ldr	r2, [r7, #16]
 8002de6:	fb02 f303 	mul.w	r3, r2, r3
 8002dea:	ee07 3a90 	vmov	s15, r3
 8002dee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002df2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	f000 8111 	beq.w	8003020 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	f000 8083 	beq.w	8002f0c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	f200 80a1 	bhi.w	8002f50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d003      	beq.n	8002e1c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d056      	beq.n	8002ec8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8002e1a:	e099      	b.n	8002f50 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002e1c:	4b88      	ldr	r3, [pc, #544]	@ (8003040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f003 0320 	and.w	r3, r3, #32
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d02d      	beq.n	8002e84 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002e28:	4b85      	ldr	r3, [pc, #532]	@ (8003040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	08db      	lsrs	r3, r3, #3
 8002e2e:	f003 0303 	and.w	r3, r3, #3
 8002e32:	4a84      	ldr	r2, [pc, #528]	@ (8003044 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8002e34:	fa22 f303 	lsr.w	r3, r2, r3
 8002e38:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	ee07 3a90 	vmov	s15, r3
 8002e40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e44:	697b      	ldr	r3, [r7, #20]
 8002e46:	ee07 3a90 	vmov	s15, r3
 8002e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e52:	4b7b      	ldr	r3, [pc, #492]	@ (8003040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e56:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e5a:	ee07 3a90 	vmov	s15, r3
 8002e5e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e62:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e66:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003048 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002e6a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e6e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e76:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e7e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002e82:	e087      	b.n	8002f94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	ee07 3a90 	vmov	s15, r3
 8002e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e8e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800304c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8002e92:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e96:	4b6a      	ldr	r3, [pc, #424]	@ (8003040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e9e:	ee07 3a90 	vmov	s15, r3
 8002ea2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ea6:	ed97 6a03 	vldr	s12, [r7, #12]
 8002eaa:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003048 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002eae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002eb2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002eb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002eba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ec2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ec6:	e065      	b.n	8002f94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	ee07 3a90 	vmov	s15, r3
 8002ece:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003050 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002ed6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002eda:	4b59      	ldr	r3, [pc, #356]	@ (8003040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ede:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ee2:	ee07 3a90 	vmov	s15, r3
 8002ee6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002eea:	ed97 6a03 	vldr	s12, [r7, #12]
 8002eee:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003048 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002ef2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ef6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002efa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002efe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f02:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f06:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f0a:	e043      	b.n	8002f94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	ee07 3a90 	vmov	s15, r3
 8002f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f16:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003054 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8002f1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f1e:	4b48      	ldr	r3, [pc, #288]	@ (8003040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f26:	ee07 3a90 	vmov	s15, r3
 8002f2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f2e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002f32:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003048 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002f36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f4a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f4e:	e021      	b.n	8002f94 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	ee07 3a90 	vmov	s15, r3
 8002f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f5a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003050 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002f5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f62:	4b37      	ldr	r3, [pc, #220]	@ (8003040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f6a:	ee07 3a90 	vmov	s15, r3
 8002f6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f72:	ed97 6a03 	vldr	s12, [r7, #12]
 8002f76:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003048 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002f7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002f7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002f82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002f86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002f8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f8e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002f92:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8002f94:	4b2a      	ldr	r3, [pc, #168]	@ (8003040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f98:	0a5b      	lsrs	r3, r3, #9
 8002f9a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002f9e:	ee07 3a90 	vmov	s15, r3
 8002fa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fa6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002faa:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002fae:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fb2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fb6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fba:	ee17 2a90 	vmov	r2, s15
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8002fc2:	4b1f      	ldr	r3, [pc, #124]	@ (8003040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	0c1b      	lsrs	r3, r3, #16
 8002fc8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002fcc:	ee07 3a90 	vmov	s15, r3
 8002fd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fd4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002fd8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002fdc:	edd7 6a07 	vldr	s13, [r7, #28]
 8002fe0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002fe8:	ee17 2a90 	vmov	r2, s15
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8002ff0:	4b13      	ldr	r3, [pc, #76]	@ (8003040 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff4:	0e1b      	lsrs	r3, r3, #24
 8002ff6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ffa:	ee07 3a90 	vmov	s15, r3
 8002ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003002:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003006:	ee37 7a87 	vadd.f32	s14, s15, s14
 800300a:	edd7 6a07 	vldr	s13, [r7, #28]
 800300e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003016:	ee17 2a90 	vmov	r2, s15
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800301e:	e008      	b.n	8003032 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	609a      	str	r2, [r3, #8]
}
 8003032:	bf00      	nop
 8003034:	3724      	adds	r7, #36	@ 0x24
 8003036:	46bd      	mov	sp, r7
 8003038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800303c:	4770      	bx	lr
 800303e:	bf00      	nop
 8003040:	58024400 	.word	0x58024400
 8003044:	03d09000 	.word	0x03d09000
 8003048:	46000000 	.word	0x46000000
 800304c:	4c742400 	.word	0x4c742400
 8003050:	4a742400 	.word	0x4a742400
 8003054:	4bbebc20 	.word	0x4bbebc20

08003058 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e049      	b.n	80030fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b00      	cmp	r3, #0
 8003074:	d106      	bne.n	8003084 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2200      	movs	r2, #0
 800307a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7fd fec8 	bl	8000e14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2202      	movs	r2, #2
 8003088:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3304      	adds	r3, #4
 8003094:	4619      	mov	r1, r3
 8003096:	4610      	mov	r0, r2
 8003098:	f000 fbf2 	bl	8003880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2201      	movs	r2, #1
 80030d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	2201      	movs	r2, #1
 80030d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	2201      	movs	r2, #1
 80030e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80030fc:	2300      	movs	r3, #0
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b082      	sub	sp, #8
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d101      	bne.n	8003118 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003114:	2301      	movs	r3, #1
 8003116:	e049      	b.n	80031ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800311e:	b2db      	uxtb	r3, r3
 8003120:	2b00      	cmp	r3, #0
 8003122:	d106      	bne.n	8003132 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2200      	movs	r2, #0
 8003128:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	f000 f841 	bl	80031b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2202      	movs	r2, #2
 8003136:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3304      	adds	r3, #4
 8003142:	4619      	mov	r1, r3
 8003144:	4610      	mov	r0, r2
 8003146:	f000 fb9b 	bl	8003880 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2201      	movs	r2, #1
 800314e:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2201      	movs	r2, #1
 8003156:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2201      	movs	r2, #1
 800315e:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2201      	movs	r2, #1
 8003166:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2201      	movs	r2, #1
 800316e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2201      	movs	r2, #1
 8003176:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2201      	movs	r2, #1
 800317e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031bc:	bf00      	nop
 80031be:	370c      	adds	r7, #12
 80031c0:	46bd      	mov	sp, r7
 80031c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c6:	4770      	bx	lr

080031c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d109      	bne.n	80031ec <HAL_TIM_PWM_Start+0x24>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	bf14      	ite	ne
 80031e4:	2301      	movne	r3, #1
 80031e6:	2300      	moveq	r3, #0
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	e03c      	b.n	8003266 <HAL_TIM_PWM_Start+0x9e>
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	d109      	bne.n	8003206 <HAL_TIM_PWM_Start+0x3e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	bf14      	ite	ne
 80031fe:	2301      	movne	r3, #1
 8003200:	2300      	moveq	r3, #0
 8003202:	b2db      	uxtb	r3, r3
 8003204:	e02f      	b.n	8003266 <HAL_TIM_PWM_Start+0x9e>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	2b08      	cmp	r3, #8
 800320a:	d109      	bne.n	8003220 <HAL_TIM_PWM_Start+0x58>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	bf14      	ite	ne
 8003218:	2301      	movne	r3, #1
 800321a:	2300      	moveq	r3, #0
 800321c:	b2db      	uxtb	r3, r3
 800321e:	e022      	b.n	8003266 <HAL_TIM_PWM_Start+0x9e>
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	2b0c      	cmp	r3, #12
 8003224:	d109      	bne.n	800323a <HAL_TIM_PWM_Start+0x72>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b01      	cmp	r3, #1
 8003230:	bf14      	ite	ne
 8003232:	2301      	movne	r3, #1
 8003234:	2300      	moveq	r3, #0
 8003236:	b2db      	uxtb	r3, r3
 8003238:	e015      	b.n	8003266 <HAL_TIM_PWM_Start+0x9e>
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b10      	cmp	r3, #16
 800323e:	d109      	bne.n	8003254 <HAL_TIM_PWM_Start+0x8c>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003246:	b2db      	uxtb	r3, r3
 8003248:	2b01      	cmp	r3, #1
 800324a:	bf14      	ite	ne
 800324c:	2301      	movne	r3, #1
 800324e:	2300      	moveq	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	e008      	b.n	8003266 <HAL_TIM_PWM_Start+0x9e>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b01      	cmp	r3, #1
 800325e:	bf14      	ite	ne
 8003260:	2301      	movne	r3, #1
 8003262:	2300      	moveq	r3, #0
 8003264:	b2db      	uxtb	r3, r3
 8003266:	2b00      	cmp	r3, #0
 8003268:	d001      	beq.n	800326e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e0a1      	b.n	80033b2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d104      	bne.n	800327e <HAL_TIM_PWM_Start+0xb6>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2202      	movs	r2, #2
 8003278:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800327c:	e023      	b.n	80032c6 <HAL_TIM_PWM_Start+0xfe>
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	2b04      	cmp	r3, #4
 8003282:	d104      	bne.n	800328e <HAL_TIM_PWM_Start+0xc6>
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2202      	movs	r2, #2
 8003288:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800328c:	e01b      	b.n	80032c6 <HAL_TIM_PWM_Start+0xfe>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	2b08      	cmp	r3, #8
 8003292:	d104      	bne.n	800329e <HAL_TIM_PWM_Start+0xd6>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2202      	movs	r2, #2
 8003298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800329c:	e013      	b.n	80032c6 <HAL_TIM_PWM_Start+0xfe>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	2b0c      	cmp	r3, #12
 80032a2:	d104      	bne.n	80032ae <HAL_TIM_PWM_Start+0xe6>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2202      	movs	r2, #2
 80032a8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80032ac:	e00b      	b.n	80032c6 <HAL_TIM_PWM_Start+0xfe>
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b10      	cmp	r3, #16
 80032b2:	d104      	bne.n	80032be <HAL_TIM_PWM_Start+0xf6>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2202      	movs	r2, #2
 80032b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032bc:	e003      	b.n	80032c6 <HAL_TIM_PWM_Start+0xfe>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2202      	movs	r2, #2
 80032c2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	2201      	movs	r2, #1
 80032cc:	6839      	ldr	r1, [r7, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f000 ffd4 	bl	800427c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a38      	ldr	r2, [pc, #224]	@ (80033bc <HAL_TIM_PWM_Start+0x1f4>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d013      	beq.n	8003306 <HAL_TIM_PWM_Start+0x13e>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	4a37      	ldr	r2, [pc, #220]	@ (80033c0 <HAL_TIM_PWM_Start+0x1f8>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d00e      	beq.n	8003306 <HAL_TIM_PWM_Start+0x13e>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	4a35      	ldr	r2, [pc, #212]	@ (80033c4 <HAL_TIM_PWM_Start+0x1fc>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d009      	beq.n	8003306 <HAL_TIM_PWM_Start+0x13e>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4a34      	ldr	r2, [pc, #208]	@ (80033c8 <HAL_TIM_PWM_Start+0x200>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d004      	beq.n	8003306 <HAL_TIM_PWM_Start+0x13e>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a32      	ldr	r2, [pc, #200]	@ (80033cc <HAL_TIM_PWM_Start+0x204>)
 8003302:	4293      	cmp	r3, r2
 8003304:	d101      	bne.n	800330a <HAL_TIM_PWM_Start+0x142>
 8003306:	2301      	movs	r3, #1
 8003308:	e000      	b.n	800330c <HAL_TIM_PWM_Start+0x144>
 800330a:	2300      	movs	r3, #0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d007      	beq.n	8003320 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800331e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a25      	ldr	r2, [pc, #148]	@ (80033bc <HAL_TIM_PWM_Start+0x1f4>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d022      	beq.n	8003370 <HAL_TIM_PWM_Start+0x1a8>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003332:	d01d      	beq.n	8003370 <HAL_TIM_PWM_Start+0x1a8>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a25      	ldr	r2, [pc, #148]	@ (80033d0 <HAL_TIM_PWM_Start+0x208>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d018      	beq.n	8003370 <HAL_TIM_PWM_Start+0x1a8>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	4a24      	ldr	r2, [pc, #144]	@ (80033d4 <HAL_TIM_PWM_Start+0x20c>)
 8003344:	4293      	cmp	r3, r2
 8003346:	d013      	beq.n	8003370 <HAL_TIM_PWM_Start+0x1a8>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a22      	ldr	r2, [pc, #136]	@ (80033d8 <HAL_TIM_PWM_Start+0x210>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00e      	beq.n	8003370 <HAL_TIM_PWM_Start+0x1a8>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a1a      	ldr	r2, [pc, #104]	@ (80033c0 <HAL_TIM_PWM_Start+0x1f8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d009      	beq.n	8003370 <HAL_TIM_PWM_Start+0x1a8>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a1e      	ldr	r2, [pc, #120]	@ (80033dc <HAL_TIM_PWM_Start+0x214>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d004      	beq.n	8003370 <HAL_TIM_PWM_Start+0x1a8>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a16      	ldr	r2, [pc, #88]	@ (80033c4 <HAL_TIM_PWM_Start+0x1fc>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d115      	bne.n	800339c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689a      	ldr	r2, [r3, #8]
 8003376:	4b1a      	ldr	r3, [pc, #104]	@ (80033e0 <HAL_TIM_PWM_Start+0x218>)
 8003378:	4013      	ands	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b06      	cmp	r3, #6
 8003380:	d015      	beq.n	80033ae <HAL_TIM_PWM_Start+0x1e6>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003388:	d011      	beq.n	80033ae <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f042 0201 	orr.w	r2, r2, #1
 8003398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800339a:	e008      	b.n	80033ae <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f042 0201 	orr.w	r2, r2, #1
 80033aa:	601a      	str	r2, [r3, #0]
 80033ac:	e000      	b.n	80033b0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80033b0:	2300      	movs	r3, #0
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3710      	adds	r7, #16
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
 80033ba:	bf00      	nop
 80033bc:	40010000 	.word	0x40010000
 80033c0:	40010400 	.word	0x40010400
 80033c4:	40014000 	.word	0x40014000
 80033c8:	40014400 	.word	0x40014400
 80033cc:	40014800 	.word	0x40014800
 80033d0:	40000400 	.word	0x40000400
 80033d4:	40000800 	.word	0x40000800
 80033d8:	40000c00 	.word	0x40000c00
 80033dc:	40001800 	.word	0x40001800
 80033e0:	00010007 	.word	0x00010007

080033e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	60f8      	str	r0, [r7, #12]
 80033ec:	60b9      	str	r1, [r7, #8]
 80033ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80033f0:	2300      	movs	r3, #0
 80033f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d101      	bne.n	8003402 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80033fe:	2302      	movs	r3, #2
 8003400:	e0ff      	b.n	8003602 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2b14      	cmp	r3, #20
 800340e:	f200 80f0 	bhi.w	80035f2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003412:	a201      	add	r2, pc, #4	@ (adr r2, 8003418 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003418:	0800346d 	.word	0x0800346d
 800341c:	080035f3 	.word	0x080035f3
 8003420:	080035f3 	.word	0x080035f3
 8003424:	080035f3 	.word	0x080035f3
 8003428:	080034ad 	.word	0x080034ad
 800342c:	080035f3 	.word	0x080035f3
 8003430:	080035f3 	.word	0x080035f3
 8003434:	080035f3 	.word	0x080035f3
 8003438:	080034ef 	.word	0x080034ef
 800343c:	080035f3 	.word	0x080035f3
 8003440:	080035f3 	.word	0x080035f3
 8003444:	080035f3 	.word	0x080035f3
 8003448:	0800352f 	.word	0x0800352f
 800344c:	080035f3 	.word	0x080035f3
 8003450:	080035f3 	.word	0x080035f3
 8003454:	080035f3 	.word	0x080035f3
 8003458:	08003571 	.word	0x08003571
 800345c:	080035f3 	.word	0x080035f3
 8003460:	080035f3 	.word	0x080035f3
 8003464:	080035f3 	.word	0x080035f3
 8003468:	080035b1 	.word	0x080035b1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68b9      	ldr	r1, [r7, #8]
 8003472:	4618      	mov	r0, r3
 8003474:	f000 faa4 	bl	80039c0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	699a      	ldr	r2, [r3, #24]
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f042 0208 	orr.w	r2, r2, #8
 8003486:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	699a      	ldr	r2, [r3, #24]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0204 	bic.w	r2, r2, #4
 8003496:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	6999      	ldr	r1, [r3, #24]
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	691a      	ldr	r2, [r3, #16]
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	430a      	orrs	r2, r1
 80034a8:	619a      	str	r2, [r3, #24]
      break;
 80034aa:	e0a5      	b.n	80035f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68b9      	ldr	r1, [r7, #8]
 80034b2:	4618      	mov	r0, r3
 80034b4:	f000 fb14 	bl	8003ae0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	699a      	ldr	r2, [r3, #24]
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80034c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	699a      	ldr	r2, [r3, #24]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	6999      	ldr	r1, [r3, #24]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	021a      	lsls	r2, r3, #8
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	619a      	str	r2, [r3, #24]
      break;
 80034ec:	e084      	b.n	80035f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	68b9      	ldr	r1, [r7, #8]
 80034f4:	4618      	mov	r0, r3
 80034f6:	f000 fb7d 	bl	8003bf4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69da      	ldr	r2, [r3, #28]
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0208 	orr.w	r2, r2, #8
 8003508:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	69da      	ldr	r2, [r3, #28]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f022 0204 	bic.w	r2, r2, #4
 8003518:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	69d9      	ldr	r1, [r3, #28]
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	430a      	orrs	r2, r1
 800352a:	61da      	str	r2, [r3, #28]
      break;
 800352c:	e064      	b.n	80035f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	68b9      	ldr	r1, [r7, #8]
 8003534:	4618      	mov	r0, r3
 8003536:	f000 fbe5 	bl	8003d04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	69da      	ldr	r2, [r3, #28]
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003548:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	69da      	ldr	r2, [r3, #28]
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003558:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	69d9      	ldr	r1, [r3, #28]
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	021a      	lsls	r2, r3, #8
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	430a      	orrs	r2, r1
 800356c:	61da      	str	r2, [r3, #28]
      break;
 800356e:	e043      	b.n	80035f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68b9      	ldr	r1, [r7, #8]
 8003576:	4618      	mov	r0, r3
 8003578:	f000 fc2e 	bl	8003dd8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f042 0208 	orr.w	r2, r2, #8
 800358a:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f022 0204 	bic.w	r2, r2, #4
 800359a:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	691a      	ldr	r2, [r3, #16]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80035ae:	e023      	b.n	80035f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68b9      	ldr	r1, [r7, #8]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f000 fc72 	bl	8003ea0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035ca:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035da:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	021a      	lsls	r2, r3, #8
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 80035f0:	e002      	b.n	80035f8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	75fb      	strb	r3, [r7, #23]
      break;
 80035f6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003600:	7dfb      	ldrb	r3, [r7, #23]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop

0800360c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b084      	sub	sp, #16
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
 8003614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003616:	2300      	movs	r3, #0
 8003618:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003620:	2b01      	cmp	r3, #1
 8003622:	d101      	bne.n	8003628 <HAL_TIM_ConfigClockSource+0x1c>
 8003624:	2302      	movs	r3, #2
 8003626:	e0dc      	b.n	80037e2 <HAL_TIM_ConfigClockSource+0x1d6>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003640:	68ba      	ldr	r2, [r7, #8]
 8003642:	4b6a      	ldr	r3, [pc, #424]	@ (80037ec <HAL_TIM_ConfigClockSource+0x1e0>)
 8003644:	4013      	ands	r3, r2
 8003646:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800364e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68ba      	ldr	r2, [r7, #8]
 8003656:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a64      	ldr	r2, [pc, #400]	@ (80037f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	f000 80a9 	beq.w	80037b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8003664:	4a62      	ldr	r2, [pc, #392]	@ (80037f0 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	f200 80ae 	bhi.w	80037c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800366c:	4a61      	ldr	r2, [pc, #388]	@ (80037f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800366e:	4293      	cmp	r3, r2
 8003670:	f000 80a1 	beq.w	80037b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8003674:	4a5f      	ldr	r2, [pc, #380]	@ (80037f4 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003676:	4293      	cmp	r3, r2
 8003678:	f200 80a6 	bhi.w	80037c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800367c:	4a5e      	ldr	r2, [pc, #376]	@ (80037f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800367e:	4293      	cmp	r3, r2
 8003680:	f000 8099 	beq.w	80037b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8003684:	4a5c      	ldr	r2, [pc, #368]	@ (80037f8 <HAL_TIM_ConfigClockSource+0x1ec>)
 8003686:	4293      	cmp	r3, r2
 8003688:	f200 809e 	bhi.w	80037c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800368c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003690:	f000 8091 	beq.w	80037b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8003694:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003698:	f200 8096 	bhi.w	80037c8 <HAL_TIM_ConfigClockSource+0x1bc>
 800369c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036a0:	f000 8089 	beq.w	80037b6 <HAL_TIM_ConfigClockSource+0x1aa>
 80036a4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036a8:	f200 808e 	bhi.w	80037c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80036ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036b0:	d03e      	beq.n	8003730 <HAL_TIM_ConfigClockSource+0x124>
 80036b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80036b6:	f200 8087 	bhi.w	80037c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80036ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036be:	f000 8086 	beq.w	80037ce <HAL_TIM_ConfigClockSource+0x1c2>
 80036c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80036c6:	d87f      	bhi.n	80037c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80036c8:	2b70      	cmp	r3, #112	@ 0x70
 80036ca:	d01a      	beq.n	8003702 <HAL_TIM_ConfigClockSource+0xf6>
 80036cc:	2b70      	cmp	r3, #112	@ 0x70
 80036ce:	d87b      	bhi.n	80037c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80036d0:	2b60      	cmp	r3, #96	@ 0x60
 80036d2:	d050      	beq.n	8003776 <HAL_TIM_ConfigClockSource+0x16a>
 80036d4:	2b60      	cmp	r3, #96	@ 0x60
 80036d6:	d877      	bhi.n	80037c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80036d8:	2b50      	cmp	r3, #80	@ 0x50
 80036da:	d03c      	beq.n	8003756 <HAL_TIM_ConfigClockSource+0x14a>
 80036dc:	2b50      	cmp	r3, #80	@ 0x50
 80036de:	d873      	bhi.n	80037c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80036e0:	2b40      	cmp	r3, #64	@ 0x40
 80036e2:	d058      	beq.n	8003796 <HAL_TIM_ConfigClockSource+0x18a>
 80036e4:	2b40      	cmp	r3, #64	@ 0x40
 80036e6:	d86f      	bhi.n	80037c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80036e8:	2b30      	cmp	r3, #48	@ 0x30
 80036ea:	d064      	beq.n	80037b6 <HAL_TIM_ConfigClockSource+0x1aa>
 80036ec:	2b30      	cmp	r3, #48	@ 0x30
 80036ee:	d86b      	bhi.n	80037c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80036f0:	2b20      	cmp	r3, #32
 80036f2:	d060      	beq.n	80037b6 <HAL_TIM_ConfigClockSource+0x1aa>
 80036f4:	2b20      	cmp	r3, #32
 80036f6:	d867      	bhi.n	80037c8 <HAL_TIM_ConfigClockSource+0x1bc>
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d05c      	beq.n	80037b6 <HAL_TIM_ConfigClockSource+0x1aa>
 80036fc:	2b10      	cmp	r3, #16
 80036fe:	d05a      	beq.n	80037b6 <HAL_TIM_ConfigClockSource+0x1aa>
 8003700:	e062      	b.n	80037c8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003712:	f000 fd93 	bl	800423c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003724:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	609a      	str	r2, [r3, #8]
      break;
 800372e:	e04f      	b.n	80037d0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003740:	f000 fd7c 	bl	800423c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003752:	609a      	str	r2, [r3, #8]
      break;
 8003754:	e03c      	b.n	80037d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003762:	461a      	mov	r2, r3
 8003764:	f000 fcec 	bl	8004140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2150      	movs	r1, #80	@ 0x50
 800376e:	4618      	mov	r0, r3
 8003770:	f000 fd46 	bl	8004200 <TIM_ITRx_SetConfig>
      break;
 8003774:	e02c      	b.n	80037d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003782:	461a      	mov	r2, r3
 8003784:	f000 fd0b 	bl	800419e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	2160      	movs	r1, #96	@ 0x60
 800378e:	4618      	mov	r0, r3
 8003790:	f000 fd36 	bl	8004200 <TIM_ITRx_SetConfig>
      break;
 8003794:	e01c      	b.n	80037d0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037a2:	461a      	mov	r2, r3
 80037a4:	f000 fccc 	bl	8004140 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	2140      	movs	r1, #64	@ 0x40
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 fd26 	bl	8004200 <TIM_ITRx_SetConfig>
      break;
 80037b4:	e00c      	b.n	80037d0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4619      	mov	r1, r3
 80037c0:	4610      	mov	r0, r2
 80037c2:	f000 fd1d 	bl	8004200 <TIM_ITRx_SetConfig>
      break;
 80037c6:	e003      	b.n	80037d0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	73fb      	strb	r3, [r7, #15]
      break;
 80037cc:	e000      	b.n	80037d0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 80037ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3710      	adds	r7, #16
 80037e6:	46bd      	mov	sp, r7
 80037e8:	bd80      	pop	{r7, pc}
 80037ea:	bf00      	nop
 80037ec:	ffceff88 	.word	0xffceff88
 80037f0:	00100040 	.word	0x00100040
 80037f4:	00100030 	.word	0x00100030
 80037f8:	00100020 	.word	0x00100020

080037fc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b082      	sub	sp, #8
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
 8003804:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800380c:	2b01      	cmp	r3, #1
 800380e:	d101      	bne.n	8003814 <HAL_TIM_SlaveConfigSynchro+0x18>
 8003810:	2302      	movs	r3, #2
 8003812:	e031      	b.n	8003878 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2202      	movs	r2, #2
 8003820:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8003824:	6839      	ldr	r1, [r7, #0]
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fba0 	bl	8003f6c <TIM_SlaveTimer_SetConfig>
 800382c:	4603      	mov	r3, r0
 800382e:	2b00      	cmp	r3, #0
 8003830:	d009      	beq.n	8003846 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2201      	movs	r2, #1
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8003842:	2301      	movs	r3, #1
 8003844:	e018      	b.n	8003878 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	68da      	ldr	r2, [r3, #12]
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003854:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003864:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2201      	movs	r2, #1
 800386a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	3708      	adds	r7, #8
 800387c:	46bd      	mov	sp, r7
 800387e:	bd80      	pop	{r7, pc}

08003880 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003880:	b480      	push	{r7}
 8003882:	b085      	sub	sp, #20
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a43      	ldr	r2, [pc, #268]	@ (80039a0 <TIM_Base_SetConfig+0x120>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d013      	beq.n	80038c0 <TIM_Base_SetConfig+0x40>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800389e:	d00f      	beq.n	80038c0 <TIM_Base_SetConfig+0x40>
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	4a40      	ldr	r2, [pc, #256]	@ (80039a4 <TIM_Base_SetConfig+0x124>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d00b      	beq.n	80038c0 <TIM_Base_SetConfig+0x40>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	4a3f      	ldr	r2, [pc, #252]	@ (80039a8 <TIM_Base_SetConfig+0x128>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d007      	beq.n	80038c0 <TIM_Base_SetConfig+0x40>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a3e      	ldr	r2, [pc, #248]	@ (80039ac <TIM_Base_SetConfig+0x12c>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d003      	beq.n	80038c0 <TIM_Base_SetConfig+0x40>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a3d      	ldr	r2, [pc, #244]	@ (80039b0 <TIM_Base_SetConfig+0x130>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d108      	bne.n	80038d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	68fa      	ldr	r2, [r7, #12]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a32      	ldr	r2, [pc, #200]	@ (80039a0 <TIM_Base_SetConfig+0x120>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d01f      	beq.n	800391a <TIM_Base_SetConfig+0x9a>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038e0:	d01b      	beq.n	800391a <TIM_Base_SetConfig+0x9a>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a2f      	ldr	r2, [pc, #188]	@ (80039a4 <TIM_Base_SetConfig+0x124>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d017      	beq.n	800391a <TIM_Base_SetConfig+0x9a>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a2e      	ldr	r2, [pc, #184]	@ (80039a8 <TIM_Base_SetConfig+0x128>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d013      	beq.n	800391a <TIM_Base_SetConfig+0x9a>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a2d      	ldr	r2, [pc, #180]	@ (80039ac <TIM_Base_SetConfig+0x12c>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00f      	beq.n	800391a <TIM_Base_SetConfig+0x9a>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a2c      	ldr	r2, [pc, #176]	@ (80039b0 <TIM_Base_SetConfig+0x130>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d00b      	beq.n	800391a <TIM_Base_SetConfig+0x9a>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a2b      	ldr	r2, [pc, #172]	@ (80039b4 <TIM_Base_SetConfig+0x134>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d007      	beq.n	800391a <TIM_Base_SetConfig+0x9a>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a2a      	ldr	r2, [pc, #168]	@ (80039b8 <TIM_Base_SetConfig+0x138>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d003      	beq.n	800391a <TIM_Base_SetConfig+0x9a>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a29      	ldr	r2, [pc, #164]	@ (80039bc <TIM_Base_SetConfig+0x13c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d108      	bne.n	800392c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003920:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	68fa      	ldr	r2, [r7, #12]
 8003928:	4313      	orrs	r3, r2
 800392a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	695b      	ldr	r3, [r3, #20]
 8003936:	4313      	orrs	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	689a      	ldr	r2, [r3, #8]
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a14      	ldr	r2, [pc, #80]	@ (80039a0 <TIM_Base_SetConfig+0x120>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00f      	beq.n	8003972 <TIM_Base_SetConfig+0xf2>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a16      	ldr	r2, [pc, #88]	@ (80039b0 <TIM_Base_SetConfig+0x130>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d00b      	beq.n	8003972 <TIM_Base_SetConfig+0xf2>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a15      	ldr	r2, [pc, #84]	@ (80039b4 <TIM_Base_SetConfig+0x134>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d007      	beq.n	8003972 <TIM_Base_SetConfig+0xf2>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a14      	ldr	r2, [pc, #80]	@ (80039b8 <TIM_Base_SetConfig+0x138>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d003      	beq.n	8003972 <TIM_Base_SetConfig+0xf2>
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a13      	ldr	r2, [pc, #76]	@ (80039bc <TIM_Base_SetConfig+0x13c>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d103      	bne.n	800397a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	691a      	ldr	r2, [r3, #16]
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f043 0204 	orr.w	r2, r3, #4
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	68fa      	ldr	r2, [r7, #12]
 8003990:	601a      	str	r2, [r3, #0]
}
 8003992:	bf00      	nop
 8003994:	3714      	adds	r7, #20
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	40010000 	.word	0x40010000
 80039a4:	40000400 	.word	0x40000400
 80039a8:	40000800 	.word	0x40000800
 80039ac:	40000c00 	.word	0x40000c00
 80039b0:	40010400 	.word	0x40010400
 80039b4:	40014000 	.word	0x40014000
 80039b8:	40014400 	.word	0x40014400
 80039bc:	40014800 	.word	0x40014800

080039c0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039c0:	b480      	push	{r7}
 80039c2:	b087      	sub	sp, #28
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
 80039c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6a1b      	ldr	r3, [r3, #32]
 80039d4:	f023 0201 	bic.w	r2, r3, #1
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	699b      	ldr	r3, [r3, #24]
 80039e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039e8:	68fa      	ldr	r2, [r7, #12]
 80039ea:	4b37      	ldr	r3, [pc, #220]	@ (8003ac8 <TIM_OC1_SetConfig+0x108>)
 80039ec:	4013      	ands	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0303 	bic.w	r3, r3, #3
 80039f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	4313      	orrs	r3, r2
 8003a00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003a02:	697b      	ldr	r3, [r7, #20]
 8003a04:	f023 0302 	bic.w	r3, r3, #2
 8003a08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	4a2d      	ldr	r2, [pc, #180]	@ (8003acc <TIM_OC1_SetConfig+0x10c>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d00f      	beq.n	8003a3c <TIM_OC1_SetConfig+0x7c>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	4a2c      	ldr	r2, [pc, #176]	@ (8003ad0 <TIM_OC1_SetConfig+0x110>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d00b      	beq.n	8003a3c <TIM_OC1_SetConfig+0x7c>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	4a2b      	ldr	r2, [pc, #172]	@ (8003ad4 <TIM_OC1_SetConfig+0x114>)
 8003a28:	4293      	cmp	r3, r2
 8003a2a:	d007      	beq.n	8003a3c <TIM_OC1_SetConfig+0x7c>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a2a      	ldr	r2, [pc, #168]	@ (8003ad8 <TIM_OC1_SetConfig+0x118>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d003      	beq.n	8003a3c <TIM_OC1_SetConfig+0x7c>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a29      	ldr	r2, [pc, #164]	@ (8003adc <TIM_OC1_SetConfig+0x11c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d10c      	bne.n	8003a56 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f023 0308 	bic.w	r3, r3, #8
 8003a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	697a      	ldr	r2, [r7, #20]
 8003a4a:	4313      	orrs	r3, r2
 8003a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a4e:	697b      	ldr	r3, [r7, #20]
 8003a50:	f023 0304 	bic.w	r3, r3, #4
 8003a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a1c      	ldr	r2, [pc, #112]	@ (8003acc <TIM_OC1_SetConfig+0x10c>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d00f      	beq.n	8003a7e <TIM_OC1_SetConfig+0xbe>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a1b      	ldr	r2, [pc, #108]	@ (8003ad0 <TIM_OC1_SetConfig+0x110>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d00b      	beq.n	8003a7e <TIM_OC1_SetConfig+0xbe>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a1a      	ldr	r2, [pc, #104]	@ (8003ad4 <TIM_OC1_SetConfig+0x114>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d007      	beq.n	8003a7e <TIM_OC1_SetConfig+0xbe>
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a19      	ldr	r2, [pc, #100]	@ (8003ad8 <TIM_OC1_SetConfig+0x118>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d003      	beq.n	8003a7e <TIM_OC1_SetConfig+0xbe>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a18      	ldr	r2, [pc, #96]	@ (8003adc <TIM_OC1_SetConfig+0x11c>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d111      	bne.n	8003aa2 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a7e:	693b      	ldr	r3, [r7, #16]
 8003a80:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a86:	693b      	ldr	r3, [r7, #16]
 8003a88:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	695b      	ldr	r3, [r3, #20]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	699b      	ldr	r3, [r3, #24]
 8003a9c:	693a      	ldr	r2, [r7, #16]
 8003a9e:	4313      	orrs	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	693a      	ldr	r2, [r7, #16]
 8003aa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	68fa      	ldr	r2, [r7, #12]
 8003aac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	697a      	ldr	r2, [r7, #20]
 8003aba:	621a      	str	r2, [r3, #32]
}
 8003abc:	bf00      	nop
 8003abe:	371c      	adds	r7, #28
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr
 8003ac8:	fffeff8f 	.word	0xfffeff8f
 8003acc:	40010000 	.word	0x40010000
 8003ad0:	40010400 	.word	0x40010400
 8003ad4:	40014000 	.word	0x40014000
 8003ad8:	40014400 	.word	0x40014400
 8003adc:	40014800 	.word	0x40014800

08003ae0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b087      	sub	sp, #28
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6a1b      	ldr	r3, [r3, #32]
 8003aee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a1b      	ldr	r3, [r3, #32]
 8003af4:	f023 0210 	bic.w	r2, r3, #16
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	699b      	ldr	r3, [r3, #24]
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b08:	68fa      	ldr	r2, [r7, #12]
 8003b0a:	4b34      	ldr	r3, [pc, #208]	@ (8003bdc <TIM_OC2_SetConfig+0xfc>)
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	021b      	lsls	r3, r3, #8
 8003b1e:	68fa      	ldr	r2, [r7, #12]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b24:	697b      	ldr	r3, [r7, #20]
 8003b26:	f023 0320 	bic.w	r3, r3, #32
 8003b2a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	011b      	lsls	r3, r3, #4
 8003b32:	697a      	ldr	r2, [r7, #20]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	4a29      	ldr	r2, [pc, #164]	@ (8003be0 <TIM_OC2_SetConfig+0x100>)
 8003b3c:	4293      	cmp	r3, r2
 8003b3e:	d003      	beq.n	8003b48 <TIM_OC2_SetConfig+0x68>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	4a28      	ldr	r2, [pc, #160]	@ (8003be4 <TIM_OC2_SetConfig+0x104>)
 8003b44:	4293      	cmp	r3, r2
 8003b46:	d10d      	bne.n	8003b64 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	011b      	lsls	r3, r3, #4
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b5c:	697b      	ldr	r3, [r7, #20]
 8003b5e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b62:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	4a1e      	ldr	r2, [pc, #120]	@ (8003be0 <TIM_OC2_SetConfig+0x100>)
 8003b68:	4293      	cmp	r3, r2
 8003b6a:	d00f      	beq.n	8003b8c <TIM_OC2_SetConfig+0xac>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	4a1d      	ldr	r2, [pc, #116]	@ (8003be4 <TIM_OC2_SetConfig+0x104>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d00b      	beq.n	8003b8c <TIM_OC2_SetConfig+0xac>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	4a1c      	ldr	r2, [pc, #112]	@ (8003be8 <TIM_OC2_SetConfig+0x108>)
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d007      	beq.n	8003b8c <TIM_OC2_SetConfig+0xac>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	4a1b      	ldr	r2, [pc, #108]	@ (8003bec <TIM_OC2_SetConfig+0x10c>)
 8003b80:	4293      	cmp	r3, r2
 8003b82:	d003      	beq.n	8003b8c <TIM_OC2_SetConfig+0xac>
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	4a1a      	ldr	r2, [pc, #104]	@ (8003bf0 <TIM_OC2_SetConfig+0x110>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d113      	bne.n	8003bb4 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	009b      	lsls	r3, r3, #2
 8003bae:	693a      	ldr	r2, [r7, #16]
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	68fa      	ldr	r2, [r7, #12]
 8003bbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	621a      	str	r2, [r3, #32]
}
 8003bce:	bf00      	nop
 8003bd0:	371c      	adds	r7, #28
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd8:	4770      	bx	lr
 8003bda:	bf00      	nop
 8003bdc:	feff8fff 	.word	0xfeff8fff
 8003be0:	40010000 	.word	0x40010000
 8003be4:	40010400 	.word	0x40010400
 8003be8:	40014000 	.word	0x40014000
 8003bec:	40014400 	.word	0x40014400
 8003bf0:	40014800 	.word	0x40014800

08003bf4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b087      	sub	sp, #28
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
 8003bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a1b      	ldr	r3, [r3, #32]
 8003c02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	6a1b      	ldr	r3, [r3, #32]
 8003c08:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69db      	ldr	r3, [r3, #28]
 8003c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c1c:	68fa      	ldr	r2, [r7, #12]
 8003c1e:	4b33      	ldr	r3, [pc, #204]	@ (8003cec <TIM_OC3_SetConfig+0xf8>)
 8003c20:	4013      	ands	r3, r2
 8003c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f023 0303 	bic.w	r3, r3, #3
 8003c2a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	68fa      	ldr	r2, [r7, #12]
 8003c32:	4313      	orrs	r3, r2
 8003c34:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c3c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	689b      	ldr	r3, [r3, #8]
 8003c42:	021b      	lsls	r3, r3, #8
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a28      	ldr	r2, [pc, #160]	@ (8003cf0 <TIM_OC3_SetConfig+0xfc>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d003      	beq.n	8003c5a <TIM_OC3_SetConfig+0x66>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a27      	ldr	r2, [pc, #156]	@ (8003cf4 <TIM_OC3_SetConfig+0x100>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d10d      	bne.n	8003c76 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c5a:	697b      	ldr	r3, [r7, #20]
 8003c5c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c60:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	021b      	lsls	r3, r3, #8
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	4313      	orrs	r3, r2
 8003c6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	4a1d      	ldr	r2, [pc, #116]	@ (8003cf0 <TIM_OC3_SetConfig+0xfc>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d00f      	beq.n	8003c9e <TIM_OC3_SetConfig+0xaa>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	4a1c      	ldr	r2, [pc, #112]	@ (8003cf4 <TIM_OC3_SetConfig+0x100>)
 8003c82:	4293      	cmp	r3, r2
 8003c84:	d00b      	beq.n	8003c9e <TIM_OC3_SetConfig+0xaa>
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	4a1b      	ldr	r2, [pc, #108]	@ (8003cf8 <TIM_OC3_SetConfig+0x104>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d007      	beq.n	8003c9e <TIM_OC3_SetConfig+0xaa>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	4a1a      	ldr	r2, [pc, #104]	@ (8003cfc <TIM_OC3_SetConfig+0x108>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d003      	beq.n	8003c9e <TIM_OC3_SetConfig+0xaa>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	4a19      	ldr	r2, [pc, #100]	@ (8003d00 <TIM_OC3_SetConfig+0x10c>)
 8003c9a:	4293      	cmp	r3, r2
 8003c9c:	d113      	bne.n	8003cc6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003ca4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003cac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	695b      	ldr	r3, [r3, #20]
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	011b      	lsls	r3, r3, #4
 8003cc0:	693a      	ldr	r2, [r7, #16]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	693a      	ldr	r2, [r7, #16]
 8003cca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	697a      	ldr	r2, [r7, #20]
 8003cde:	621a      	str	r2, [r3, #32]
}
 8003ce0:	bf00      	nop
 8003ce2:	371c      	adds	r7, #28
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	fffeff8f 	.word	0xfffeff8f
 8003cf0:	40010000 	.word	0x40010000
 8003cf4:	40010400 	.word	0x40010400
 8003cf8:	40014000 	.word	0x40014000
 8003cfc:	40014400 	.word	0x40014400
 8003d00:	40014800 	.word	0x40014800

08003d04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69db      	ldr	r3, [r3, #28]
 8003d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d2c:	68fa      	ldr	r2, [r7, #12]
 8003d2e:	4b24      	ldr	r3, [pc, #144]	@ (8003dc0 <TIM_OC4_SetConfig+0xbc>)
 8003d30:	4013      	ands	r3, r2
 8003d32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	021b      	lsls	r3, r3, #8
 8003d42:	68fa      	ldr	r2, [r7, #12]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	031b      	lsls	r3, r3, #12
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	4a19      	ldr	r2, [pc, #100]	@ (8003dc4 <TIM_OC4_SetConfig+0xc0>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d00f      	beq.n	8003d84 <TIM_OC4_SetConfig+0x80>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a18      	ldr	r2, [pc, #96]	@ (8003dc8 <TIM_OC4_SetConfig+0xc4>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d00b      	beq.n	8003d84 <TIM_OC4_SetConfig+0x80>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a17      	ldr	r2, [pc, #92]	@ (8003dcc <TIM_OC4_SetConfig+0xc8>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d007      	beq.n	8003d84 <TIM_OC4_SetConfig+0x80>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a16      	ldr	r2, [pc, #88]	@ (8003dd0 <TIM_OC4_SetConfig+0xcc>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d003      	beq.n	8003d84 <TIM_OC4_SetConfig+0x80>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a15      	ldr	r2, [pc, #84]	@ (8003dd4 <TIM_OC4_SetConfig+0xd0>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d109      	bne.n	8003d98 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d8a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	695b      	ldr	r3, [r3, #20]
 8003d90:	019b      	lsls	r3, r3, #6
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	4313      	orrs	r3, r2
 8003d96:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	68fa      	ldr	r2, [r7, #12]
 8003da2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685a      	ldr	r2, [r3, #4]
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	693a      	ldr	r2, [r7, #16]
 8003db0:	621a      	str	r2, [r3, #32]
}
 8003db2:	bf00      	nop
 8003db4:	371c      	adds	r7, #28
 8003db6:	46bd      	mov	sp, r7
 8003db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbc:	4770      	bx	lr
 8003dbe:	bf00      	nop
 8003dc0:	feff8fff 	.word	0xfeff8fff
 8003dc4:	40010000 	.word	0x40010000
 8003dc8:	40010400 	.word	0x40010400
 8003dcc:	40014000 	.word	0x40014000
 8003dd0:	40014400 	.word	0x40014400
 8003dd4:	40014800 	.word	0x40014800

08003dd8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003e00:	68fa      	ldr	r2, [r7, #12]
 8003e02:	4b21      	ldr	r3, [pc, #132]	@ (8003e88 <TIM_OC5_SetConfig+0xb0>)
 8003e04:	4013      	ands	r3, r2
 8003e06:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003e12:	693b      	ldr	r3, [r7, #16]
 8003e14:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003e18:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	041b      	lsls	r3, r3, #16
 8003e20:	693a      	ldr	r2, [r7, #16]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a18      	ldr	r2, [pc, #96]	@ (8003e8c <TIM_OC5_SetConfig+0xb4>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d00f      	beq.n	8003e4e <TIM_OC5_SetConfig+0x76>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a17      	ldr	r2, [pc, #92]	@ (8003e90 <TIM_OC5_SetConfig+0xb8>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00b      	beq.n	8003e4e <TIM_OC5_SetConfig+0x76>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a16      	ldr	r2, [pc, #88]	@ (8003e94 <TIM_OC5_SetConfig+0xbc>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d007      	beq.n	8003e4e <TIM_OC5_SetConfig+0x76>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a15      	ldr	r2, [pc, #84]	@ (8003e98 <TIM_OC5_SetConfig+0xc0>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d003      	beq.n	8003e4e <TIM_OC5_SetConfig+0x76>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	4a14      	ldr	r2, [pc, #80]	@ (8003e9c <TIM_OC5_SetConfig+0xc4>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d109      	bne.n	8003e62 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003e4e:	697b      	ldr	r3, [r7, #20]
 8003e50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e54:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	021b      	lsls	r3, r3, #8
 8003e5c:	697a      	ldr	r2, [r7, #20]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	697a      	ldr	r2, [r7, #20]
 8003e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	693a      	ldr	r2, [r7, #16]
 8003e7a:	621a      	str	r2, [r3, #32]
}
 8003e7c:	bf00      	nop
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr
 8003e88:	fffeff8f 	.word	0xfffeff8f
 8003e8c:	40010000 	.word	0x40010000
 8003e90:	40010400 	.word	0x40010400
 8003e94:	40014000 	.word	0x40014000
 8003e98:	40014400 	.word	0x40014400
 8003e9c:	40014800 	.word	0x40014800

08003ea0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b087      	sub	sp, #28
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
 8003ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a1b      	ldr	r3, [r3, #32]
 8003eae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6a1b      	ldr	r3, [r3, #32]
 8003eb4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4b22      	ldr	r3, [pc, #136]	@ (8003f54 <TIM_OC6_SetConfig+0xb4>)
 8003ecc:	4013      	ands	r3, r2
 8003ece:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	021b      	lsls	r3, r3, #8
 8003ed6:	68fa      	ldr	r2, [r7, #12]
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003ee2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	051b      	lsls	r3, r3, #20
 8003eea:	693a      	ldr	r2, [r7, #16]
 8003eec:	4313      	orrs	r3, r2
 8003eee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	4a19      	ldr	r2, [pc, #100]	@ (8003f58 <TIM_OC6_SetConfig+0xb8>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d00f      	beq.n	8003f18 <TIM_OC6_SetConfig+0x78>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	4a18      	ldr	r2, [pc, #96]	@ (8003f5c <TIM_OC6_SetConfig+0xbc>)
 8003efc:	4293      	cmp	r3, r2
 8003efe:	d00b      	beq.n	8003f18 <TIM_OC6_SetConfig+0x78>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a17      	ldr	r2, [pc, #92]	@ (8003f60 <TIM_OC6_SetConfig+0xc0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d007      	beq.n	8003f18 <TIM_OC6_SetConfig+0x78>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a16      	ldr	r2, [pc, #88]	@ (8003f64 <TIM_OC6_SetConfig+0xc4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d003      	beq.n	8003f18 <TIM_OC6_SetConfig+0x78>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a15      	ldr	r2, [pc, #84]	@ (8003f68 <TIM_OC6_SetConfig+0xc8>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d109      	bne.n	8003f2c <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	029b      	lsls	r3, r3, #10
 8003f26:	697a      	ldr	r2, [r7, #20]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	697a      	ldr	r2, [r7, #20]
 8003f30:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68fa      	ldr	r2, [r7, #12]
 8003f36:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	685a      	ldr	r2, [r3, #4]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	621a      	str	r2, [r3, #32]
}
 8003f46:	bf00      	nop
 8003f48:	371c      	adds	r7, #28
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	feff8fff 	.word	0xfeff8fff
 8003f58:	40010000 	.word	0x40010000
 8003f5c:	40010400 	.word	0x40010400
 8003f60:	40014000 	.word	0x40014000
 8003f64:	40014400 	.word	0x40014400
 8003f68:	40014800 	.word	0x40014800

08003f6c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b086      	sub	sp, #24
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
 8003f74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f76:	2300      	movs	r3, #0
 8003f78:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	689b      	ldr	r3, [r3, #8]
 8003f80:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003f82:	693a      	ldr	r2, [r7, #16]
 8003f84:	4b65      	ldr	r3, [pc, #404]	@ (800411c <TIM_SlaveTimer_SetConfig+0x1b0>)
 8003f86:	4013      	ands	r3, r2
 8003f88:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	4313      	orrs	r3, r2
 8003f92:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4b62      	ldr	r3, [pc, #392]	@ (8004120 <TIM_SlaveTimer_SetConfig+0x1b4>)
 8003f98:	4013      	ands	r3, r2
 8003f9a:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	693a      	ldr	r2, [r7, #16]
 8003fac:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	4a5c      	ldr	r2, [pc, #368]	@ (8004124 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	f000 80ab 	beq.w	8004110 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003fba:	4a5a      	ldr	r2, [pc, #360]	@ (8004124 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	f200 80a4 	bhi.w	800410a <TIM_SlaveTimer_SetConfig+0x19e>
 8003fc2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fc6:	f000 80a3 	beq.w	8004110 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003fca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fce:	f200 809c 	bhi.w	800410a <TIM_SlaveTimer_SetConfig+0x19e>
 8003fd2:	4a55      	ldr	r2, [pc, #340]	@ (8004128 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	f000 809b 	beq.w	8004110 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003fda:	4a53      	ldr	r2, [pc, #332]	@ (8004128 <TIM_SlaveTimer_SetConfig+0x1bc>)
 8003fdc:	4293      	cmp	r3, r2
 8003fde:	f200 8094 	bhi.w	800410a <TIM_SlaveTimer_SetConfig+0x19e>
 8003fe2:	4a52      	ldr	r2, [pc, #328]	@ (800412c <TIM_SlaveTimer_SetConfig+0x1c0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	f000 8093 	beq.w	8004110 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003fea:	4a50      	ldr	r2, [pc, #320]	@ (800412c <TIM_SlaveTimer_SetConfig+0x1c0>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	f200 808c 	bhi.w	800410a <TIM_SlaveTimer_SetConfig+0x19e>
 8003ff2:	4a4f      	ldr	r2, [pc, #316]	@ (8004130 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	f000 808b 	beq.w	8004110 <TIM_SlaveTimer_SetConfig+0x1a4>
 8003ffa:	4a4d      	ldr	r2, [pc, #308]	@ (8004130 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	f200 8084 	bhi.w	800410a <TIM_SlaveTimer_SetConfig+0x19e>
 8004002:	4a4c      	ldr	r2, [pc, #304]	@ (8004134 <TIM_SlaveTimer_SetConfig+0x1c8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	f000 8083 	beq.w	8004110 <TIM_SlaveTimer_SetConfig+0x1a4>
 800400a:	4a4a      	ldr	r2, [pc, #296]	@ (8004134 <TIM_SlaveTimer_SetConfig+0x1c8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d87c      	bhi.n	800410a <TIM_SlaveTimer_SetConfig+0x19e>
 8004010:	4a49      	ldr	r2, [pc, #292]	@ (8004138 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8004012:	4293      	cmp	r3, r2
 8004014:	d07c      	beq.n	8004110 <TIM_SlaveTimer_SetConfig+0x1a4>
 8004016:	4a48      	ldr	r2, [pc, #288]	@ (8004138 <TIM_SlaveTimer_SetConfig+0x1cc>)
 8004018:	4293      	cmp	r3, r2
 800401a:	d876      	bhi.n	800410a <TIM_SlaveTimer_SetConfig+0x19e>
 800401c:	4a47      	ldr	r2, [pc, #284]	@ (800413c <TIM_SlaveTimer_SetConfig+0x1d0>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d076      	beq.n	8004110 <TIM_SlaveTimer_SetConfig+0x1a4>
 8004022:	4a46      	ldr	r2, [pc, #280]	@ (800413c <TIM_SlaveTimer_SetConfig+0x1d0>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d870      	bhi.n	800410a <TIM_SlaveTimer_SetConfig+0x19e>
 8004028:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800402c:	d070      	beq.n	8004110 <TIM_SlaveTimer_SetConfig+0x1a4>
 800402e:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8004032:	d86a      	bhi.n	800410a <TIM_SlaveTimer_SetConfig+0x19e>
 8004034:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004038:	d06a      	beq.n	8004110 <TIM_SlaveTimer_SetConfig+0x1a4>
 800403a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800403e:	d864      	bhi.n	800410a <TIM_SlaveTimer_SetConfig+0x19e>
 8004040:	2b70      	cmp	r3, #112	@ 0x70
 8004042:	d01a      	beq.n	800407a <TIM_SlaveTimer_SetConfig+0x10e>
 8004044:	2b70      	cmp	r3, #112	@ 0x70
 8004046:	d860      	bhi.n	800410a <TIM_SlaveTimer_SetConfig+0x19e>
 8004048:	2b60      	cmp	r3, #96	@ 0x60
 800404a:	d054      	beq.n	80040f6 <TIM_SlaveTimer_SetConfig+0x18a>
 800404c:	2b60      	cmp	r3, #96	@ 0x60
 800404e:	d85c      	bhi.n	800410a <TIM_SlaveTimer_SetConfig+0x19e>
 8004050:	2b50      	cmp	r3, #80	@ 0x50
 8004052:	d046      	beq.n	80040e2 <TIM_SlaveTimer_SetConfig+0x176>
 8004054:	2b50      	cmp	r3, #80	@ 0x50
 8004056:	d858      	bhi.n	800410a <TIM_SlaveTimer_SetConfig+0x19e>
 8004058:	2b40      	cmp	r3, #64	@ 0x40
 800405a:	d019      	beq.n	8004090 <TIM_SlaveTimer_SetConfig+0x124>
 800405c:	2b40      	cmp	r3, #64	@ 0x40
 800405e:	d854      	bhi.n	800410a <TIM_SlaveTimer_SetConfig+0x19e>
 8004060:	2b30      	cmp	r3, #48	@ 0x30
 8004062:	d055      	beq.n	8004110 <TIM_SlaveTimer_SetConfig+0x1a4>
 8004064:	2b30      	cmp	r3, #48	@ 0x30
 8004066:	d850      	bhi.n	800410a <TIM_SlaveTimer_SetConfig+0x19e>
 8004068:	2b20      	cmp	r3, #32
 800406a:	d051      	beq.n	8004110 <TIM_SlaveTimer_SetConfig+0x1a4>
 800406c:	2b20      	cmp	r3, #32
 800406e:	d84c      	bhi.n	800410a <TIM_SlaveTimer_SetConfig+0x19e>
 8004070:	2b00      	cmp	r3, #0
 8004072:	d04d      	beq.n	8004110 <TIM_SlaveTimer_SetConfig+0x1a4>
 8004074:	2b10      	cmp	r3, #16
 8004076:	d04b      	beq.n	8004110 <TIM_SlaveTimer_SetConfig+0x1a4>
 8004078:	e047      	b.n	800410a <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800408a:	f000 f8d7 	bl	800423c <TIM_ETR_SetConfig>
      break;
 800408e:	e040      	b.n	8004112 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	2b05      	cmp	r3, #5
 8004096:	d101      	bne.n	800409c <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	e03b      	b.n	8004114 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	6a1a      	ldr	r2, [r3, #32]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f022 0201 	bic.w	r2, r2, #1
 80040b2:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040c2:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	691b      	ldr	r3, [r3, #16]
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	68ba      	ldr	r2, [r7, #8]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	68ba      	ldr	r2, [r7, #8]
 80040d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	621a      	str	r2, [r3, #32]
      break;
 80040e0:	e017      	b.n	8004112 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80040ea:	683b      	ldr	r3, [r7, #0]
 80040ec:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ee:	461a      	mov	r2, r3
 80040f0:	f000 f826 	bl	8004140 <TIM_TI1_ConfigInputStage>
      break;
 80040f4:	e00d      	b.n	8004112 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004102:	461a      	mov	r2, r3
 8004104:	f000 f84b 	bl	800419e <TIM_TI2_ConfigInputStage>
      break;
 8004108:	e003      	b.n	8004112 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	75fb      	strb	r3, [r7, #23]
      break;
 800410e:	e000      	b.n	8004112 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 8004110:	bf00      	nop
  }

  return status;
 8004112:	7dfb      	ldrb	r3, [r7, #23]
}
 8004114:	4618      	mov	r0, r3
 8004116:	3718      	adds	r7, #24
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	ffcfff8f 	.word	0xffcfff8f
 8004120:	fffefff8 	.word	0xfffefff8
 8004124:	00200010 	.word	0x00200010
 8004128:	00100070 	.word	0x00100070
 800412c:	00100060 	.word	0x00100060
 8004130:	00100050 	.word	0x00100050
 8004134:	00100040 	.word	0x00100040
 8004138:	00100030 	.word	0x00100030
 800413c:	00100020 	.word	0x00100020

08004140 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6a1b      	ldr	r3, [r3, #32]
 8004150:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	f023 0201 	bic.w	r2, r3, #1
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800416a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	011b      	lsls	r3, r3, #4
 8004170:	693a      	ldr	r2, [r7, #16]
 8004172:	4313      	orrs	r3, r2
 8004174:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f023 030a 	bic.w	r3, r3, #10
 800417c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800417e:	697a      	ldr	r2, [r7, #20]
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	4313      	orrs	r3, r2
 8004184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	621a      	str	r2, [r3, #32]
}
 8004192:	bf00      	nop
 8004194:	371c      	adds	r7, #28
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800419e:	b480      	push	{r7}
 80041a0:	b087      	sub	sp, #28
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	6a1b      	ldr	r3, [r3, #32]
 80041ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a1b      	ldr	r3, [r3, #32]
 80041b4:	f023 0210 	bic.w	r2, r3, #16
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041c2:	693b      	ldr	r3, [r7, #16]
 80041c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80041c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	031b      	lsls	r3, r3, #12
 80041ce:	693a      	ldr	r2, [r7, #16]
 80041d0:	4313      	orrs	r3, r2
 80041d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80041da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041dc:	68bb      	ldr	r3, [r7, #8]
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	697a      	ldr	r2, [r7, #20]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	693a      	ldr	r2, [r7, #16]
 80041ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	697a      	ldr	r2, [r7, #20]
 80041f0:	621a      	str	r2, [r3, #32]
}
 80041f2:	bf00      	nop
 80041f4:	371c      	adds	r7, #28
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
	...

08004200 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004200:	b480      	push	{r7}
 8004202:	b085      	sub	sp, #20
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
 8004208:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4b09      	ldr	r3, [pc, #36]	@ (8004238 <TIM_ITRx_SetConfig+0x38>)
 8004214:	4013      	ands	r3, r2
 8004216:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	4313      	orrs	r3, r2
 800421e:	f043 0307 	orr.w	r3, r3, #7
 8004222:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	609a      	str	r2, [r3, #8]
}
 800422a:	bf00      	nop
 800422c:	3714      	adds	r7, #20
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	ffcfff8f 	.word	0xffcfff8f

0800423c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	60b9      	str	r1, [r7, #8]
 8004246:	607a      	str	r2, [r7, #4]
 8004248:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004256:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	021a      	lsls	r2, r3, #8
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	431a      	orrs	r2, r3
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	4313      	orrs	r3, r2
 8004264:	697a      	ldr	r2, [r7, #20]
 8004266:	4313      	orrs	r3, r2
 8004268:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	609a      	str	r2, [r3, #8]
}
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr

0800427c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800427c:	b480      	push	{r7}
 800427e:	b087      	sub	sp, #28
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f003 031f 	and.w	r3, r3, #31
 800428e:	2201      	movs	r2, #1
 8004290:	fa02 f303 	lsl.w	r3, r2, r3
 8004294:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	6a1a      	ldr	r2, [r3, #32]
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	43db      	mvns	r3, r3
 800429e:	401a      	ands	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a1a      	ldr	r2, [r3, #32]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	f003 031f 	and.w	r3, r3, #31
 80042ae:	6879      	ldr	r1, [r7, #4]
 80042b0:	fa01 f303 	lsl.w	r3, r1, r3
 80042b4:	431a      	orrs	r2, r3
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	621a      	str	r2, [r3, #32]
}
 80042ba:	bf00      	nop
 80042bc:	371c      	adds	r7, #28
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d101      	bne.n	80042e0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042dc:	2302      	movs	r3, #2
 80042de:	e06d      	b.n	80043bc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a30      	ldr	r2, [pc, #192]	@ (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d004      	beq.n	8004314 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a2f      	ldr	r2, [pc, #188]	@ (80043cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d108      	bne.n	8004326 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800431a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	68fa      	ldr	r2, [r7, #12]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800432c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	4313      	orrs	r3, r2
 8004336:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	68fa      	ldr	r2, [r7, #12]
 800433e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a20      	ldr	r2, [pc, #128]	@ (80043c8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d022      	beq.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004352:	d01d      	beq.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a1d      	ldr	r2, [pc, #116]	@ (80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d018      	beq.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a1c      	ldr	r2, [pc, #112]	@ (80043d4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d013      	beq.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1a      	ldr	r2, [pc, #104]	@ (80043d8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d00e      	beq.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a15      	ldr	r2, [pc, #84]	@ (80043cc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d009      	beq.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a16      	ldr	r2, [pc, #88]	@ (80043dc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d004      	beq.n	8004390 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a15      	ldr	r2, [pc, #84]	@ (80043e0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d10c      	bne.n	80043aa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004396:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	4313      	orrs	r3, r2
 80043a0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68ba      	ldr	r2, [r7, #8]
 80043a8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80043ba:	2300      	movs	r3, #0
}
 80043bc:	4618      	mov	r0, r3
 80043be:	3714      	adds	r7, #20
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	40010000 	.word	0x40010000
 80043cc:	40010400 	.word	0x40010400
 80043d0:	40000400 	.word	0x40000400
 80043d4:	40000800 	.word	0x40000800
 80043d8:	40000c00 	.word	0x40000c00
 80043dc:	40001800 	.word	0x40001800
 80043e0:	40014000 	.word	0x40014000

080043e4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
 80043ec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d101      	bne.n	8004400 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80043fc:	2302      	movs	r3, #2
 80043fe:	e065      	b.n	80044cc <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2201      	movs	r2, #1
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	4313      	orrs	r3, r2
 8004422:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800442a:	683b      	ldr	r3, [r7, #0]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	4313      	orrs	r3, r2
 8004430:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	4313      	orrs	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	699b      	ldr	r3, [r3, #24]
 8004474:	041b      	lsls	r3, r3, #16
 8004476:	4313      	orrs	r3, r2
 8004478:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	4a16      	ldr	r2, [pc, #88]	@ (80044d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004480:	4293      	cmp	r3, r2
 8004482:	d004      	beq.n	800448e <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	4a14      	ldr	r2, [pc, #80]	@ (80044dc <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d115      	bne.n	80044ba <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004498:	051b      	lsls	r3, r3, #20
 800449a:	4313      	orrs	r3, r2
 800449c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044ca:	2300      	movs	r3, #0
}
 80044cc:	4618      	mov	r0, r3
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	40010000 	.word	0x40010000
 80044dc:	40010400 	.word	0x40010400

080044e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b082      	sub	sp, #8
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d101      	bne.n	80044f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e042      	b.n	8004578 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d106      	bne.n	800450a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2200      	movs	r2, #0
 8004500:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f000 f83b 	bl	8004580 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2224      	movs	r2, #36	@ 0x24
 800450e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f022 0201 	bic.w	r2, r2, #1
 8004520:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f000 fe28 	bl	8005180 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f000 f8bd 	bl	80046b0 <UART_SetConfig>
 8004536:	4603      	mov	r3, r0
 8004538:	2b01      	cmp	r3, #1
 800453a:	d101      	bne.n	8004540 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e01b      	b.n	8004578 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800454e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689a      	ldr	r2, [r3, #8]
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800455e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f042 0201 	orr.w	r2, r2, #1
 800456e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 fea7 	bl	80052c4 <UART_CheckIdleState>
 8004576:	4603      	mov	r3, r0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3708      	adds	r7, #8
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004588:	bf00      	nop
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08a      	sub	sp, #40	@ 0x28
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	4613      	mov	r3, r2
 80045a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045aa:	2b20      	cmp	r3, #32
 80045ac:	d17b      	bne.n	80046a6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <HAL_UART_Transmit+0x26>
 80045b4:	88fb      	ldrh	r3, [r7, #6]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d101      	bne.n	80045be <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e074      	b.n	80046a8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2200      	movs	r2, #0
 80045c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2221      	movs	r2, #33	@ 0x21
 80045ca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ce:	f7fc ff13 	bl	80013f8 <HAL_GetTick>
 80045d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	88fa      	ldrh	r2, [r7, #6]
 80045d8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	88fa      	ldrh	r2, [r7, #6]
 80045e0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045ec:	d108      	bne.n	8004600 <HAL_UART_Transmit+0x6c>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	691b      	ldr	r3, [r3, #16]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d104      	bne.n	8004600 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	61bb      	str	r3, [r7, #24]
 80045fe:	e003      	b.n	8004608 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004604:	2300      	movs	r3, #0
 8004606:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004608:	e030      	b.n	800466c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	697b      	ldr	r3, [r7, #20]
 8004610:	2200      	movs	r2, #0
 8004612:	2180      	movs	r1, #128	@ 0x80
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f000 feff 	bl	8005418 <UART_WaitOnFlagUntilTimeout>
 800461a:	4603      	mov	r3, r0
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2220      	movs	r2, #32
 8004624:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004628:	2303      	movs	r3, #3
 800462a:	e03d      	b.n	80046a8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d10b      	bne.n	800464a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004632:	69bb      	ldr	r3, [r7, #24]
 8004634:	881b      	ldrh	r3, [r3, #0]
 8004636:	461a      	mov	r2, r3
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004640:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004642:	69bb      	ldr	r3, [r7, #24]
 8004644:	3302      	adds	r3, #2
 8004646:	61bb      	str	r3, [r7, #24]
 8004648:	e007      	b.n	800465a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	781a      	ldrb	r2, [r3, #0]
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	3301      	adds	r3, #1
 8004658:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004660:	b29b      	uxth	r3, r3
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004672:	b29b      	uxth	r3, r3
 8004674:	2b00      	cmp	r3, #0
 8004676:	d1c8      	bne.n	800460a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	9300      	str	r3, [sp, #0]
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	2200      	movs	r2, #0
 8004680:	2140      	movs	r1, #64	@ 0x40
 8004682:	68f8      	ldr	r0, [r7, #12]
 8004684:	f000 fec8 	bl	8005418 <UART_WaitOnFlagUntilTimeout>
 8004688:	4603      	mov	r3, r0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d005      	beq.n	800469a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2220      	movs	r2, #32
 8004692:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e006      	b.n	80046a8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2220      	movs	r2, #32
 800469e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80046a2:	2300      	movs	r3, #0
 80046a4:	e000      	b.n	80046a8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80046a6:	2302      	movs	r3, #2
  }
}
 80046a8:	4618      	mov	r0, r3
 80046aa:	3720      	adds	r7, #32
 80046ac:	46bd      	mov	sp, r7
 80046ae:	bd80      	pop	{r7, pc}

080046b0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046b4:	b092      	sub	sp, #72	@ 0x48
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046ba:	2300      	movs	r3, #0
 80046bc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	689a      	ldr	r2, [r3, #8]
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	691b      	ldr	r3, [r3, #16]
 80046c8:	431a      	orrs	r2, r3
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	695b      	ldr	r3, [r3, #20]
 80046ce:	431a      	orrs	r2, r3
 80046d0:	697b      	ldr	r3, [r7, #20]
 80046d2:	69db      	ldr	r3, [r3, #28]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	4bbe      	ldr	r3, [pc, #760]	@ (80049d8 <UART_SetConfig+0x328>)
 80046e0:	4013      	ands	r3, r2
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	6812      	ldr	r2, [r2, #0]
 80046e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80046e8:	430b      	orrs	r3, r1
 80046ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046ec:	697b      	ldr	r3, [r7, #20]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80046f6:	697b      	ldr	r3, [r7, #20]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	430a      	orrs	r2, r1
 8004700:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	699b      	ldr	r3, [r3, #24]
 8004706:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4ab3      	ldr	r2, [pc, #716]	@ (80049dc <UART_SetConfig+0x32c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d004      	beq.n	800471c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	6a1b      	ldr	r3, [r3, #32]
 8004716:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004718:	4313      	orrs	r3, r2
 800471a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	689a      	ldr	r2, [r3, #8]
 8004722:	4baf      	ldr	r3, [pc, #700]	@ (80049e0 <UART_SetConfig+0x330>)
 8004724:	4013      	ands	r3, r2
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	6812      	ldr	r2, [r2, #0]
 800472a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800472c:	430b      	orrs	r3, r1
 800472e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004730:	697b      	ldr	r3, [r7, #20]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004736:	f023 010f 	bic.w	r1, r3, #15
 800473a:	697b      	ldr	r3, [r7, #20]
 800473c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	4aa6      	ldr	r2, [pc, #664]	@ (80049e4 <UART_SetConfig+0x334>)
 800474c:	4293      	cmp	r3, r2
 800474e:	d177      	bne.n	8004840 <UART_SetConfig+0x190>
 8004750:	4ba5      	ldr	r3, [pc, #660]	@ (80049e8 <UART_SetConfig+0x338>)
 8004752:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004754:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004758:	2b28      	cmp	r3, #40	@ 0x28
 800475a:	d86d      	bhi.n	8004838 <UART_SetConfig+0x188>
 800475c:	a201      	add	r2, pc, #4	@ (adr r2, 8004764 <UART_SetConfig+0xb4>)
 800475e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004762:	bf00      	nop
 8004764:	08004809 	.word	0x08004809
 8004768:	08004839 	.word	0x08004839
 800476c:	08004839 	.word	0x08004839
 8004770:	08004839 	.word	0x08004839
 8004774:	08004839 	.word	0x08004839
 8004778:	08004839 	.word	0x08004839
 800477c:	08004839 	.word	0x08004839
 8004780:	08004839 	.word	0x08004839
 8004784:	08004811 	.word	0x08004811
 8004788:	08004839 	.word	0x08004839
 800478c:	08004839 	.word	0x08004839
 8004790:	08004839 	.word	0x08004839
 8004794:	08004839 	.word	0x08004839
 8004798:	08004839 	.word	0x08004839
 800479c:	08004839 	.word	0x08004839
 80047a0:	08004839 	.word	0x08004839
 80047a4:	08004819 	.word	0x08004819
 80047a8:	08004839 	.word	0x08004839
 80047ac:	08004839 	.word	0x08004839
 80047b0:	08004839 	.word	0x08004839
 80047b4:	08004839 	.word	0x08004839
 80047b8:	08004839 	.word	0x08004839
 80047bc:	08004839 	.word	0x08004839
 80047c0:	08004839 	.word	0x08004839
 80047c4:	08004821 	.word	0x08004821
 80047c8:	08004839 	.word	0x08004839
 80047cc:	08004839 	.word	0x08004839
 80047d0:	08004839 	.word	0x08004839
 80047d4:	08004839 	.word	0x08004839
 80047d8:	08004839 	.word	0x08004839
 80047dc:	08004839 	.word	0x08004839
 80047e0:	08004839 	.word	0x08004839
 80047e4:	08004829 	.word	0x08004829
 80047e8:	08004839 	.word	0x08004839
 80047ec:	08004839 	.word	0x08004839
 80047f0:	08004839 	.word	0x08004839
 80047f4:	08004839 	.word	0x08004839
 80047f8:	08004839 	.word	0x08004839
 80047fc:	08004839 	.word	0x08004839
 8004800:	08004839 	.word	0x08004839
 8004804:	08004831 	.word	0x08004831
 8004808:	2301      	movs	r3, #1
 800480a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800480e:	e222      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004810:	2304      	movs	r3, #4
 8004812:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004816:	e21e      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004818:	2308      	movs	r3, #8
 800481a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800481e:	e21a      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004820:	2310      	movs	r3, #16
 8004822:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004826:	e216      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004828:	2320      	movs	r3, #32
 800482a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800482e:	e212      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004830:	2340      	movs	r3, #64	@ 0x40
 8004832:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004836:	e20e      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004838:	2380      	movs	r3, #128	@ 0x80
 800483a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800483e:	e20a      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a69      	ldr	r2, [pc, #420]	@ (80049ec <UART_SetConfig+0x33c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d130      	bne.n	80048ac <UART_SetConfig+0x1fc>
 800484a:	4b67      	ldr	r3, [pc, #412]	@ (80049e8 <UART_SetConfig+0x338>)
 800484c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800484e:	f003 0307 	and.w	r3, r3, #7
 8004852:	2b05      	cmp	r3, #5
 8004854:	d826      	bhi.n	80048a4 <UART_SetConfig+0x1f4>
 8004856:	a201      	add	r2, pc, #4	@ (adr r2, 800485c <UART_SetConfig+0x1ac>)
 8004858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485c:	08004875 	.word	0x08004875
 8004860:	0800487d 	.word	0x0800487d
 8004864:	08004885 	.word	0x08004885
 8004868:	0800488d 	.word	0x0800488d
 800486c:	08004895 	.word	0x08004895
 8004870:	0800489d 	.word	0x0800489d
 8004874:	2300      	movs	r3, #0
 8004876:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800487a:	e1ec      	b.n	8004c56 <UART_SetConfig+0x5a6>
 800487c:	2304      	movs	r3, #4
 800487e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004882:	e1e8      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004884:	2308      	movs	r3, #8
 8004886:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800488a:	e1e4      	b.n	8004c56 <UART_SetConfig+0x5a6>
 800488c:	2310      	movs	r3, #16
 800488e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004892:	e1e0      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004894:	2320      	movs	r3, #32
 8004896:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800489a:	e1dc      	b.n	8004c56 <UART_SetConfig+0x5a6>
 800489c:	2340      	movs	r3, #64	@ 0x40
 800489e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048a2:	e1d8      	b.n	8004c56 <UART_SetConfig+0x5a6>
 80048a4:	2380      	movs	r3, #128	@ 0x80
 80048a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048aa:	e1d4      	b.n	8004c56 <UART_SetConfig+0x5a6>
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4a4f      	ldr	r2, [pc, #316]	@ (80049f0 <UART_SetConfig+0x340>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d130      	bne.n	8004918 <UART_SetConfig+0x268>
 80048b6:	4b4c      	ldr	r3, [pc, #304]	@ (80049e8 <UART_SetConfig+0x338>)
 80048b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ba:	f003 0307 	and.w	r3, r3, #7
 80048be:	2b05      	cmp	r3, #5
 80048c0:	d826      	bhi.n	8004910 <UART_SetConfig+0x260>
 80048c2:	a201      	add	r2, pc, #4	@ (adr r2, 80048c8 <UART_SetConfig+0x218>)
 80048c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048c8:	080048e1 	.word	0x080048e1
 80048cc:	080048e9 	.word	0x080048e9
 80048d0:	080048f1 	.word	0x080048f1
 80048d4:	080048f9 	.word	0x080048f9
 80048d8:	08004901 	.word	0x08004901
 80048dc:	08004909 	.word	0x08004909
 80048e0:	2300      	movs	r3, #0
 80048e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048e6:	e1b6      	b.n	8004c56 <UART_SetConfig+0x5a6>
 80048e8:	2304      	movs	r3, #4
 80048ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ee:	e1b2      	b.n	8004c56 <UART_SetConfig+0x5a6>
 80048f0:	2308      	movs	r3, #8
 80048f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048f6:	e1ae      	b.n	8004c56 <UART_SetConfig+0x5a6>
 80048f8:	2310      	movs	r3, #16
 80048fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048fe:	e1aa      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004900:	2320      	movs	r3, #32
 8004902:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004906:	e1a6      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004908:	2340      	movs	r3, #64	@ 0x40
 800490a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800490e:	e1a2      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004910:	2380      	movs	r3, #128	@ 0x80
 8004912:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004916:	e19e      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a35      	ldr	r2, [pc, #212]	@ (80049f4 <UART_SetConfig+0x344>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d130      	bne.n	8004984 <UART_SetConfig+0x2d4>
 8004922:	4b31      	ldr	r3, [pc, #196]	@ (80049e8 <UART_SetConfig+0x338>)
 8004924:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004926:	f003 0307 	and.w	r3, r3, #7
 800492a:	2b05      	cmp	r3, #5
 800492c:	d826      	bhi.n	800497c <UART_SetConfig+0x2cc>
 800492e:	a201      	add	r2, pc, #4	@ (adr r2, 8004934 <UART_SetConfig+0x284>)
 8004930:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004934:	0800494d 	.word	0x0800494d
 8004938:	08004955 	.word	0x08004955
 800493c:	0800495d 	.word	0x0800495d
 8004940:	08004965 	.word	0x08004965
 8004944:	0800496d 	.word	0x0800496d
 8004948:	08004975 	.word	0x08004975
 800494c:	2300      	movs	r3, #0
 800494e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004952:	e180      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004954:	2304      	movs	r3, #4
 8004956:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800495a:	e17c      	b.n	8004c56 <UART_SetConfig+0x5a6>
 800495c:	2308      	movs	r3, #8
 800495e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004962:	e178      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004964:	2310      	movs	r3, #16
 8004966:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800496a:	e174      	b.n	8004c56 <UART_SetConfig+0x5a6>
 800496c:	2320      	movs	r3, #32
 800496e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004972:	e170      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004974:	2340      	movs	r3, #64	@ 0x40
 8004976:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800497a:	e16c      	b.n	8004c56 <UART_SetConfig+0x5a6>
 800497c:	2380      	movs	r3, #128	@ 0x80
 800497e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004982:	e168      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	4a1b      	ldr	r2, [pc, #108]	@ (80049f8 <UART_SetConfig+0x348>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d142      	bne.n	8004a14 <UART_SetConfig+0x364>
 800498e:	4b16      	ldr	r3, [pc, #88]	@ (80049e8 <UART_SetConfig+0x338>)
 8004990:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004992:	f003 0307 	and.w	r3, r3, #7
 8004996:	2b05      	cmp	r3, #5
 8004998:	d838      	bhi.n	8004a0c <UART_SetConfig+0x35c>
 800499a:	a201      	add	r2, pc, #4	@ (adr r2, 80049a0 <UART_SetConfig+0x2f0>)
 800499c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049a0:	080049b9 	.word	0x080049b9
 80049a4:	080049c1 	.word	0x080049c1
 80049a8:	080049c9 	.word	0x080049c9
 80049ac:	080049d1 	.word	0x080049d1
 80049b0:	080049fd 	.word	0x080049fd
 80049b4:	08004a05 	.word	0x08004a05
 80049b8:	2300      	movs	r3, #0
 80049ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049be:	e14a      	b.n	8004c56 <UART_SetConfig+0x5a6>
 80049c0:	2304      	movs	r3, #4
 80049c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049c6:	e146      	b.n	8004c56 <UART_SetConfig+0x5a6>
 80049c8:	2308      	movs	r3, #8
 80049ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ce:	e142      	b.n	8004c56 <UART_SetConfig+0x5a6>
 80049d0:	2310      	movs	r3, #16
 80049d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049d6:	e13e      	b.n	8004c56 <UART_SetConfig+0x5a6>
 80049d8:	cfff69f3 	.word	0xcfff69f3
 80049dc:	58000c00 	.word	0x58000c00
 80049e0:	11fff4ff 	.word	0x11fff4ff
 80049e4:	40011000 	.word	0x40011000
 80049e8:	58024400 	.word	0x58024400
 80049ec:	40004400 	.word	0x40004400
 80049f0:	40004800 	.word	0x40004800
 80049f4:	40004c00 	.word	0x40004c00
 80049f8:	40005000 	.word	0x40005000
 80049fc:	2320      	movs	r3, #32
 80049fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a02:	e128      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004a04:	2340      	movs	r3, #64	@ 0x40
 8004a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a0a:	e124      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004a0c:	2380      	movs	r3, #128	@ 0x80
 8004a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a12:	e120      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4acb      	ldr	r2, [pc, #812]	@ (8004d48 <UART_SetConfig+0x698>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d176      	bne.n	8004b0c <UART_SetConfig+0x45c>
 8004a1e:	4bcb      	ldr	r3, [pc, #812]	@ (8004d4c <UART_SetConfig+0x69c>)
 8004a20:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004a26:	2b28      	cmp	r3, #40	@ 0x28
 8004a28:	d86c      	bhi.n	8004b04 <UART_SetConfig+0x454>
 8004a2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a30 <UART_SetConfig+0x380>)
 8004a2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a30:	08004ad5 	.word	0x08004ad5
 8004a34:	08004b05 	.word	0x08004b05
 8004a38:	08004b05 	.word	0x08004b05
 8004a3c:	08004b05 	.word	0x08004b05
 8004a40:	08004b05 	.word	0x08004b05
 8004a44:	08004b05 	.word	0x08004b05
 8004a48:	08004b05 	.word	0x08004b05
 8004a4c:	08004b05 	.word	0x08004b05
 8004a50:	08004add 	.word	0x08004add
 8004a54:	08004b05 	.word	0x08004b05
 8004a58:	08004b05 	.word	0x08004b05
 8004a5c:	08004b05 	.word	0x08004b05
 8004a60:	08004b05 	.word	0x08004b05
 8004a64:	08004b05 	.word	0x08004b05
 8004a68:	08004b05 	.word	0x08004b05
 8004a6c:	08004b05 	.word	0x08004b05
 8004a70:	08004ae5 	.word	0x08004ae5
 8004a74:	08004b05 	.word	0x08004b05
 8004a78:	08004b05 	.word	0x08004b05
 8004a7c:	08004b05 	.word	0x08004b05
 8004a80:	08004b05 	.word	0x08004b05
 8004a84:	08004b05 	.word	0x08004b05
 8004a88:	08004b05 	.word	0x08004b05
 8004a8c:	08004b05 	.word	0x08004b05
 8004a90:	08004aed 	.word	0x08004aed
 8004a94:	08004b05 	.word	0x08004b05
 8004a98:	08004b05 	.word	0x08004b05
 8004a9c:	08004b05 	.word	0x08004b05
 8004aa0:	08004b05 	.word	0x08004b05
 8004aa4:	08004b05 	.word	0x08004b05
 8004aa8:	08004b05 	.word	0x08004b05
 8004aac:	08004b05 	.word	0x08004b05
 8004ab0:	08004af5 	.word	0x08004af5
 8004ab4:	08004b05 	.word	0x08004b05
 8004ab8:	08004b05 	.word	0x08004b05
 8004abc:	08004b05 	.word	0x08004b05
 8004ac0:	08004b05 	.word	0x08004b05
 8004ac4:	08004b05 	.word	0x08004b05
 8004ac8:	08004b05 	.word	0x08004b05
 8004acc:	08004b05 	.word	0x08004b05
 8004ad0:	08004afd 	.word	0x08004afd
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ada:	e0bc      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004adc:	2304      	movs	r3, #4
 8004ade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ae2:	e0b8      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004ae4:	2308      	movs	r3, #8
 8004ae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aea:	e0b4      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004aec:	2310      	movs	r3, #16
 8004aee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004af2:	e0b0      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004af4:	2320      	movs	r3, #32
 8004af6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004afa:	e0ac      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004afc:	2340      	movs	r3, #64	@ 0x40
 8004afe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b02:	e0a8      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004b04:	2380      	movs	r3, #128	@ 0x80
 8004b06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b0a:	e0a4      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a8f      	ldr	r2, [pc, #572]	@ (8004d50 <UART_SetConfig+0x6a0>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d130      	bne.n	8004b78 <UART_SetConfig+0x4c8>
 8004b16:	4b8d      	ldr	r3, [pc, #564]	@ (8004d4c <UART_SetConfig+0x69c>)
 8004b18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b1a:	f003 0307 	and.w	r3, r3, #7
 8004b1e:	2b05      	cmp	r3, #5
 8004b20:	d826      	bhi.n	8004b70 <UART_SetConfig+0x4c0>
 8004b22:	a201      	add	r2, pc, #4	@ (adr r2, 8004b28 <UART_SetConfig+0x478>)
 8004b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b28:	08004b41 	.word	0x08004b41
 8004b2c:	08004b49 	.word	0x08004b49
 8004b30:	08004b51 	.word	0x08004b51
 8004b34:	08004b59 	.word	0x08004b59
 8004b38:	08004b61 	.word	0x08004b61
 8004b3c:	08004b69 	.word	0x08004b69
 8004b40:	2300      	movs	r3, #0
 8004b42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b46:	e086      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004b48:	2304      	movs	r3, #4
 8004b4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b4e:	e082      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004b50:	2308      	movs	r3, #8
 8004b52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b56:	e07e      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004b58:	2310      	movs	r3, #16
 8004b5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b5e:	e07a      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004b60:	2320      	movs	r3, #32
 8004b62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b66:	e076      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004b68:	2340      	movs	r3, #64	@ 0x40
 8004b6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b6e:	e072      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004b70:	2380      	movs	r3, #128	@ 0x80
 8004b72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b76:	e06e      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004b78:	697b      	ldr	r3, [r7, #20]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	4a75      	ldr	r2, [pc, #468]	@ (8004d54 <UART_SetConfig+0x6a4>)
 8004b7e:	4293      	cmp	r3, r2
 8004b80:	d130      	bne.n	8004be4 <UART_SetConfig+0x534>
 8004b82:	4b72      	ldr	r3, [pc, #456]	@ (8004d4c <UART_SetConfig+0x69c>)
 8004b84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b86:	f003 0307 	and.w	r3, r3, #7
 8004b8a:	2b05      	cmp	r3, #5
 8004b8c:	d826      	bhi.n	8004bdc <UART_SetConfig+0x52c>
 8004b8e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b94 <UART_SetConfig+0x4e4>)
 8004b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b94:	08004bad 	.word	0x08004bad
 8004b98:	08004bb5 	.word	0x08004bb5
 8004b9c:	08004bbd 	.word	0x08004bbd
 8004ba0:	08004bc5 	.word	0x08004bc5
 8004ba4:	08004bcd 	.word	0x08004bcd
 8004ba8:	08004bd5 	.word	0x08004bd5
 8004bac:	2300      	movs	r3, #0
 8004bae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bb2:	e050      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004bb4:	2304      	movs	r3, #4
 8004bb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bba:	e04c      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004bbc:	2308      	movs	r3, #8
 8004bbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bc2:	e048      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004bc4:	2310      	movs	r3, #16
 8004bc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bca:	e044      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004bcc:	2320      	movs	r3, #32
 8004bce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bd2:	e040      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004bd4:	2340      	movs	r3, #64	@ 0x40
 8004bd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bda:	e03c      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004bdc:	2380      	movs	r3, #128	@ 0x80
 8004bde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004be2:	e038      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a5b      	ldr	r2, [pc, #364]	@ (8004d58 <UART_SetConfig+0x6a8>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d130      	bne.n	8004c50 <UART_SetConfig+0x5a0>
 8004bee:	4b57      	ldr	r3, [pc, #348]	@ (8004d4c <UART_SetConfig+0x69c>)
 8004bf0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004bf2:	f003 0307 	and.w	r3, r3, #7
 8004bf6:	2b05      	cmp	r3, #5
 8004bf8:	d826      	bhi.n	8004c48 <UART_SetConfig+0x598>
 8004bfa:	a201      	add	r2, pc, #4	@ (adr r2, 8004c00 <UART_SetConfig+0x550>)
 8004bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c00:	08004c19 	.word	0x08004c19
 8004c04:	08004c21 	.word	0x08004c21
 8004c08:	08004c29 	.word	0x08004c29
 8004c0c:	08004c31 	.word	0x08004c31
 8004c10:	08004c39 	.word	0x08004c39
 8004c14:	08004c41 	.word	0x08004c41
 8004c18:	2302      	movs	r3, #2
 8004c1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c1e:	e01a      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004c20:	2304      	movs	r3, #4
 8004c22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c26:	e016      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004c28:	2308      	movs	r3, #8
 8004c2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c2e:	e012      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004c30:	2310      	movs	r3, #16
 8004c32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c36:	e00e      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004c38:	2320      	movs	r3, #32
 8004c3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c3e:	e00a      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004c40:	2340      	movs	r3, #64	@ 0x40
 8004c42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c46:	e006      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004c48:	2380      	movs	r3, #128	@ 0x80
 8004c4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c4e:	e002      	b.n	8004c56 <UART_SetConfig+0x5a6>
 8004c50:	2380      	movs	r3, #128	@ 0x80
 8004c52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004c56:	697b      	ldr	r3, [r7, #20]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a3f      	ldr	r2, [pc, #252]	@ (8004d58 <UART_SetConfig+0x6a8>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	f040 80f8 	bne.w	8004e52 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004c62:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004c66:	2b20      	cmp	r3, #32
 8004c68:	dc46      	bgt.n	8004cf8 <UART_SetConfig+0x648>
 8004c6a:	2b02      	cmp	r3, #2
 8004c6c:	f2c0 8082 	blt.w	8004d74 <UART_SetConfig+0x6c4>
 8004c70:	3b02      	subs	r3, #2
 8004c72:	2b1e      	cmp	r3, #30
 8004c74:	d87e      	bhi.n	8004d74 <UART_SetConfig+0x6c4>
 8004c76:	a201      	add	r2, pc, #4	@ (adr r2, 8004c7c <UART_SetConfig+0x5cc>)
 8004c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c7c:	08004cff 	.word	0x08004cff
 8004c80:	08004d75 	.word	0x08004d75
 8004c84:	08004d07 	.word	0x08004d07
 8004c88:	08004d75 	.word	0x08004d75
 8004c8c:	08004d75 	.word	0x08004d75
 8004c90:	08004d75 	.word	0x08004d75
 8004c94:	08004d17 	.word	0x08004d17
 8004c98:	08004d75 	.word	0x08004d75
 8004c9c:	08004d75 	.word	0x08004d75
 8004ca0:	08004d75 	.word	0x08004d75
 8004ca4:	08004d75 	.word	0x08004d75
 8004ca8:	08004d75 	.word	0x08004d75
 8004cac:	08004d75 	.word	0x08004d75
 8004cb0:	08004d75 	.word	0x08004d75
 8004cb4:	08004d27 	.word	0x08004d27
 8004cb8:	08004d75 	.word	0x08004d75
 8004cbc:	08004d75 	.word	0x08004d75
 8004cc0:	08004d75 	.word	0x08004d75
 8004cc4:	08004d75 	.word	0x08004d75
 8004cc8:	08004d75 	.word	0x08004d75
 8004ccc:	08004d75 	.word	0x08004d75
 8004cd0:	08004d75 	.word	0x08004d75
 8004cd4:	08004d75 	.word	0x08004d75
 8004cd8:	08004d75 	.word	0x08004d75
 8004cdc:	08004d75 	.word	0x08004d75
 8004ce0:	08004d75 	.word	0x08004d75
 8004ce4:	08004d75 	.word	0x08004d75
 8004ce8:	08004d75 	.word	0x08004d75
 8004cec:	08004d75 	.word	0x08004d75
 8004cf0:	08004d75 	.word	0x08004d75
 8004cf4:	08004d67 	.word	0x08004d67
 8004cf8:	2b40      	cmp	r3, #64	@ 0x40
 8004cfa:	d037      	beq.n	8004d6c <UART_SetConfig+0x6bc>
 8004cfc:	e03a      	b.n	8004d74 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004cfe:	f7fd feed 	bl	8002adc <HAL_RCCEx_GetD3PCLK1Freq>
 8004d02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004d04:	e03c      	b.n	8004d80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	f7fd fefc 	bl	8002b08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004d10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d14:	e034      	b.n	8004d80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004d16:	f107 0318 	add.w	r3, r7, #24
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	f7fe f848 	bl	8002db0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d24:	e02c      	b.n	8004d80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004d26:	4b09      	ldr	r3, [pc, #36]	@ (8004d4c <UART_SetConfig+0x69c>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 0320 	and.w	r3, r3, #32
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d016      	beq.n	8004d60 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004d32:	4b06      	ldr	r3, [pc, #24]	@ (8004d4c <UART_SetConfig+0x69c>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	08db      	lsrs	r3, r3, #3
 8004d38:	f003 0303 	and.w	r3, r3, #3
 8004d3c:	4a07      	ldr	r2, [pc, #28]	@ (8004d5c <UART_SetConfig+0x6ac>)
 8004d3e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d44:	e01c      	b.n	8004d80 <UART_SetConfig+0x6d0>
 8004d46:	bf00      	nop
 8004d48:	40011400 	.word	0x40011400
 8004d4c:	58024400 	.word	0x58024400
 8004d50:	40007800 	.word	0x40007800
 8004d54:	40007c00 	.word	0x40007c00
 8004d58:	58000c00 	.word	0x58000c00
 8004d5c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004d60:	4b9d      	ldr	r3, [pc, #628]	@ (8004fd8 <UART_SetConfig+0x928>)
 8004d62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d64:	e00c      	b.n	8004d80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004d66:	4b9d      	ldr	r3, [pc, #628]	@ (8004fdc <UART_SetConfig+0x92c>)
 8004d68:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d6a:	e009      	b.n	8004d80 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d6c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d72:	e005      	b.n	8004d80 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004d78:	2301      	movs	r3, #1
 8004d7a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004d7e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004d80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	f000 81de 	beq.w	8005144 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8c:	4a94      	ldr	r2, [pc, #592]	@ (8004fe0 <UART_SetConfig+0x930>)
 8004d8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d92:	461a      	mov	r2, r3
 8004d94:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d96:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d9a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	685a      	ldr	r2, [r3, #4]
 8004da0:	4613      	mov	r3, r2
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	4413      	add	r3, r2
 8004da6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d305      	bcc.n	8004db8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d903      	bls.n	8004dc0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004db8:	2301      	movs	r3, #1
 8004dba:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004dbe:	e1c1      	b.n	8005144 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	60bb      	str	r3, [r7, #8]
 8004dc6:	60fa      	str	r2, [r7, #12]
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dcc:	4a84      	ldr	r2, [pc, #528]	@ (8004fe0 <UART_SetConfig+0x930>)
 8004dce:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	603b      	str	r3, [r7, #0]
 8004dd8:	607a      	str	r2, [r7, #4]
 8004dda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004dde:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004de2:	f7fb facd 	bl	8000380 <__aeabi_uldivmod>
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4610      	mov	r0, r2
 8004dec:	4619      	mov	r1, r3
 8004dee:	f04f 0200 	mov.w	r2, #0
 8004df2:	f04f 0300 	mov.w	r3, #0
 8004df6:	020b      	lsls	r3, r1, #8
 8004df8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004dfc:	0202      	lsls	r2, r0, #8
 8004dfe:	6979      	ldr	r1, [r7, #20]
 8004e00:	6849      	ldr	r1, [r1, #4]
 8004e02:	0849      	lsrs	r1, r1, #1
 8004e04:	2000      	movs	r0, #0
 8004e06:	460c      	mov	r4, r1
 8004e08:	4605      	mov	r5, r0
 8004e0a:	eb12 0804 	adds.w	r8, r2, r4
 8004e0e:	eb43 0905 	adc.w	r9, r3, r5
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	469a      	mov	sl, r3
 8004e1a:	4693      	mov	fp, r2
 8004e1c:	4652      	mov	r2, sl
 8004e1e:	465b      	mov	r3, fp
 8004e20:	4640      	mov	r0, r8
 8004e22:	4649      	mov	r1, r9
 8004e24:	f7fb faac 	bl	8000380 <__aeabi_uldivmod>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004e30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004e36:	d308      	bcc.n	8004e4a <UART_SetConfig+0x79a>
 8004e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e3a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e3e:	d204      	bcs.n	8004e4a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004e46:	60da      	str	r2, [r3, #12]
 8004e48:	e17c      	b.n	8005144 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004e50:	e178      	b.n	8005144 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e5a:	f040 80c5 	bne.w	8004fe8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004e5e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004e62:	2b20      	cmp	r3, #32
 8004e64:	dc48      	bgt.n	8004ef8 <UART_SetConfig+0x848>
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	db7b      	blt.n	8004f62 <UART_SetConfig+0x8b2>
 8004e6a:	2b20      	cmp	r3, #32
 8004e6c:	d879      	bhi.n	8004f62 <UART_SetConfig+0x8b2>
 8004e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8004e74 <UART_SetConfig+0x7c4>)
 8004e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e74:	08004eff 	.word	0x08004eff
 8004e78:	08004f07 	.word	0x08004f07
 8004e7c:	08004f63 	.word	0x08004f63
 8004e80:	08004f63 	.word	0x08004f63
 8004e84:	08004f0f 	.word	0x08004f0f
 8004e88:	08004f63 	.word	0x08004f63
 8004e8c:	08004f63 	.word	0x08004f63
 8004e90:	08004f63 	.word	0x08004f63
 8004e94:	08004f1f 	.word	0x08004f1f
 8004e98:	08004f63 	.word	0x08004f63
 8004e9c:	08004f63 	.word	0x08004f63
 8004ea0:	08004f63 	.word	0x08004f63
 8004ea4:	08004f63 	.word	0x08004f63
 8004ea8:	08004f63 	.word	0x08004f63
 8004eac:	08004f63 	.word	0x08004f63
 8004eb0:	08004f63 	.word	0x08004f63
 8004eb4:	08004f2f 	.word	0x08004f2f
 8004eb8:	08004f63 	.word	0x08004f63
 8004ebc:	08004f63 	.word	0x08004f63
 8004ec0:	08004f63 	.word	0x08004f63
 8004ec4:	08004f63 	.word	0x08004f63
 8004ec8:	08004f63 	.word	0x08004f63
 8004ecc:	08004f63 	.word	0x08004f63
 8004ed0:	08004f63 	.word	0x08004f63
 8004ed4:	08004f63 	.word	0x08004f63
 8004ed8:	08004f63 	.word	0x08004f63
 8004edc:	08004f63 	.word	0x08004f63
 8004ee0:	08004f63 	.word	0x08004f63
 8004ee4:	08004f63 	.word	0x08004f63
 8004ee8:	08004f63 	.word	0x08004f63
 8004eec:	08004f63 	.word	0x08004f63
 8004ef0:	08004f63 	.word	0x08004f63
 8004ef4:	08004f55 	.word	0x08004f55
 8004ef8:	2b40      	cmp	r3, #64	@ 0x40
 8004efa:	d02e      	beq.n	8004f5a <UART_SetConfig+0x8aa>
 8004efc:	e031      	b.n	8004f62 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004efe:	f7fd fdc1 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 8004f02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f04:	e033      	b.n	8004f6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f06:	f7fd fdd3 	bl	8002ab0 <HAL_RCC_GetPCLK2Freq>
 8004f0a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004f0c:	e02f      	b.n	8004f6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fd fdf8 	bl	8002b08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f1c:	e027      	b.n	8004f6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f1e:	f107 0318 	add.w	r3, r7, #24
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7fd ff44 	bl	8002db0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f2c:	e01f      	b.n	8004f6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f2e:	4b2d      	ldr	r3, [pc, #180]	@ (8004fe4 <UART_SetConfig+0x934>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d009      	beq.n	8004f4e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f3a:	4b2a      	ldr	r3, [pc, #168]	@ (8004fe4 <UART_SetConfig+0x934>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	08db      	lsrs	r3, r3, #3
 8004f40:	f003 0303 	and.w	r3, r3, #3
 8004f44:	4a24      	ldr	r2, [pc, #144]	@ (8004fd8 <UART_SetConfig+0x928>)
 8004f46:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f4c:	e00f      	b.n	8004f6e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004f4e:	4b22      	ldr	r3, [pc, #136]	@ (8004fd8 <UART_SetConfig+0x928>)
 8004f50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f52:	e00c      	b.n	8004f6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f54:	4b21      	ldr	r3, [pc, #132]	@ (8004fdc <UART_SetConfig+0x92c>)
 8004f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f58:	e009      	b.n	8004f6e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f5a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f60:	e005      	b.n	8004f6e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004f62:	2300      	movs	r3, #0
 8004f64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004f6c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 80e7 	beq.w	8005144 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7a:	4a19      	ldr	r2, [pc, #100]	@ (8004fe0 <UART_SetConfig+0x930>)
 8004f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f80:	461a      	mov	r2, r3
 8004f82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f84:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f88:	005a      	lsls	r2, r3, #1
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	085b      	lsrs	r3, r3, #1
 8004f90:	441a      	add	r2, r3
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f9e:	2b0f      	cmp	r3, #15
 8004fa0:	d916      	bls.n	8004fd0 <UART_SetConfig+0x920>
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fa8:	d212      	bcs.n	8004fd0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004faa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	f023 030f 	bic.w	r3, r3, #15
 8004fb2:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb6:	085b      	lsrs	r3, r3, #1
 8004fb8:	b29b      	uxth	r3, r3
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004fcc:	60da      	str	r2, [r3, #12]
 8004fce:	e0b9      	b.n	8005144 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004fd0:	2301      	movs	r3, #1
 8004fd2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004fd6:	e0b5      	b.n	8005144 <UART_SetConfig+0xa94>
 8004fd8:	03d09000 	.word	0x03d09000
 8004fdc:	003d0900 	.word	0x003d0900
 8004fe0:	08006450 	.word	0x08006450
 8004fe4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004fe8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004fec:	2b20      	cmp	r3, #32
 8004fee:	dc49      	bgt.n	8005084 <UART_SetConfig+0x9d4>
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	db7c      	blt.n	80050ee <UART_SetConfig+0xa3e>
 8004ff4:	2b20      	cmp	r3, #32
 8004ff6:	d87a      	bhi.n	80050ee <UART_SetConfig+0xa3e>
 8004ff8:	a201      	add	r2, pc, #4	@ (adr r2, 8005000 <UART_SetConfig+0x950>)
 8004ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ffe:	bf00      	nop
 8005000:	0800508b 	.word	0x0800508b
 8005004:	08005093 	.word	0x08005093
 8005008:	080050ef 	.word	0x080050ef
 800500c:	080050ef 	.word	0x080050ef
 8005010:	0800509b 	.word	0x0800509b
 8005014:	080050ef 	.word	0x080050ef
 8005018:	080050ef 	.word	0x080050ef
 800501c:	080050ef 	.word	0x080050ef
 8005020:	080050ab 	.word	0x080050ab
 8005024:	080050ef 	.word	0x080050ef
 8005028:	080050ef 	.word	0x080050ef
 800502c:	080050ef 	.word	0x080050ef
 8005030:	080050ef 	.word	0x080050ef
 8005034:	080050ef 	.word	0x080050ef
 8005038:	080050ef 	.word	0x080050ef
 800503c:	080050ef 	.word	0x080050ef
 8005040:	080050bb 	.word	0x080050bb
 8005044:	080050ef 	.word	0x080050ef
 8005048:	080050ef 	.word	0x080050ef
 800504c:	080050ef 	.word	0x080050ef
 8005050:	080050ef 	.word	0x080050ef
 8005054:	080050ef 	.word	0x080050ef
 8005058:	080050ef 	.word	0x080050ef
 800505c:	080050ef 	.word	0x080050ef
 8005060:	080050ef 	.word	0x080050ef
 8005064:	080050ef 	.word	0x080050ef
 8005068:	080050ef 	.word	0x080050ef
 800506c:	080050ef 	.word	0x080050ef
 8005070:	080050ef 	.word	0x080050ef
 8005074:	080050ef 	.word	0x080050ef
 8005078:	080050ef 	.word	0x080050ef
 800507c:	080050ef 	.word	0x080050ef
 8005080:	080050e1 	.word	0x080050e1
 8005084:	2b40      	cmp	r3, #64	@ 0x40
 8005086:	d02e      	beq.n	80050e6 <UART_SetConfig+0xa36>
 8005088:	e031      	b.n	80050ee <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800508a:	f7fd fcfb 	bl	8002a84 <HAL_RCC_GetPCLK1Freq>
 800508e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005090:	e033      	b.n	80050fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005092:	f7fd fd0d 	bl	8002ab0 <HAL_RCC_GetPCLK2Freq>
 8005096:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005098:	e02f      	b.n	80050fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800509a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800509e:	4618      	mov	r0, r3
 80050a0:	f7fd fd32 	bl	8002b08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80050a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050a8:	e027      	b.n	80050fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050aa:	f107 0318 	add.w	r3, r7, #24
 80050ae:	4618      	mov	r0, r3
 80050b0:	f7fd fe7e 	bl	8002db0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050b8:	e01f      	b.n	80050fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050ba:	4b2d      	ldr	r3, [pc, #180]	@ (8005170 <UART_SetConfig+0xac0>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d009      	beq.n	80050da <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80050c6:	4b2a      	ldr	r3, [pc, #168]	@ (8005170 <UART_SetConfig+0xac0>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	08db      	lsrs	r3, r3, #3
 80050cc:	f003 0303 	and.w	r3, r3, #3
 80050d0:	4a28      	ldr	r2, [pc, #160]	@ (8005174 <UART_SetConfig+0xac4>)
 80050d2:	fa22 f303 	lsr.w	r3, r2, r3
 80050d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050d8:	e00f      	b.n	80050fa <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80050da:	4b26      	ldr	r3, [pc, #152]	@ (8005174 <UART_SetConfig+0xac4>)
 80050dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050de:	e00c      	b.n	80050fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80050e0:	4b25      	ldr	r3, [pc, #148]	@ (8005178 <UART_SetConfig+0xac8>)
 80050e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050e4:	e009      	b.n	80050fa <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050e6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80050ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050ec:	e005      	b.n	80050fa <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80050ee:	2300      	movs	r3, #0
 80050f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80050f2:	2301      	movs	r3, #1
 80050f4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80050f8:	bf00      	nop
    }

    if (pclk != 0U)
 80050fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d021      	beq.n	8005144 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005100:	697b      	ldr	r3, [r7, #20]
 8005102:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005104:	4a1d      	ldr	r2, [pc, #116]	@ (800517c <UART_SetConfig+0xacc>)
 8005106:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800510a:	461a      	mov	r2, r3
 800510c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800510e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	085b      	lsrs	r3, r3, #1
 8005118:	441a      	add	r2, r3
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005122:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005126:	2b0f      	cmp	r3, #15
 8005128:	d909      	bls.n	800513e <UART_SetConfig+0xa8e>
 800512a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800512c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005130:	d205      	bcs.n	800513e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005134:	b29a      	uxth	r2, r3
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60da      	str	r2, [r3, #12]
 800513c:	e002      	b.n	8005144 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800513e:	2301      	movs	r3, #1
 8005140:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	2201      	movs	r2, #1
 8005148:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	2201      	movs	r2, #1
 8005150:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	2200      	movs	r2, #0
 8005158:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	2200      	movs	r2, #0
 800515e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005160:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005164:	4618      	mov	r0, r3
 8005166:	3748      	adds	r7, #72	@ 0x48
 8005168:	46bd      	mov	sp, r7
 800516a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800516e:	bf00      	nop
 8005170:	58024400 	.word	0x58024400
 8005174:	03d09000 	.word	0x03d09000
 8005178:	003d0900 	.word	0x003d0900
 800517c:	08006450 	.word	0x08006450

08005180 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005180:	b480      	push	{r7}
 8005182:	b083      	sub	sp, #12
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800518c:	f003 0308 	and.w	r3, r3, #8
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00a      	beq.n	80051aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685b      	ldr	r3, [r3, #4]
 800519a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	430a      	orrs	r2, r1
 80051a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051ae:	f003 0301 	and.w	r3, r3, #1
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	685b      	ldr	r3, [r3, #4]
 80051bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	430a      	orrs	r2, r1
 80051ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051d0:	f003 0302 	and.w	r3, r3, #2
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d00a      	beq.n	80051ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	430a      	orrs	r2, r1
 80051ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051f2:	f003 0304 	and.w	r3, r3, #4
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00a      	beq.n	8005210 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	430a      	orrs	r2, r1
 800520e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005214:	f003 0310 	and.w	r3, r3, #16
 8005218:	2b00      	cmp	r3, #0
 800521a:	d00a      	beq.n	8005232 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	430a      	orrs	r2, r1
 8005230:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005236:	f003 0320 	and.w	r3, r3, #32
 800523a:	2b00      	cmp	r3, #0
 800523c:	d00a      	beq.n	8005254 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	430a      	orrs	r2, r1
 8005252:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005258:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800525c:	2b00      	cmp	r3, #0
 800525e:	d01a      	beq.n	8005296 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	430a      	orrs	r2, r1
 8005274:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800527a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800527e:	d10a      	bne.n	8005296 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	430a      	orrs	r2, r1
 8005294:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800529a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d00a      	beq.n	80052b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	430a      	orrs	r2, r1
 80052b6:	605a      	str	r2, [r3, #4]
  }
}
 80052b8:	bf00      	nop
 80052ba:	370c      	adds	r7, #12
 80052bc:	46bd      	mov	sp, r7
 80052be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c2:	4770      	bx	lr

080052c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b098      	sub	sp, #96	@ 0x60
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2200      	movs	r2, #0
 80052d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80052d4:	f7fc f890 	bl	80013f8 <HAL_GetTick>
 80052d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0308 	and.w	r3, r3, #8
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d12f      	bne.n	8005348 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80052e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80052ec:	9300      	str	r3, [sp, #0]
 80052ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80052f0:	2200      	movs	r2, #0
 80052f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80052f6:	6878      	ldr	r0, [r7, #4]
 80052f8:	f000 f88e 	bl	8005418 <UART_WaitOnFlagUntilTimeout>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d022      	beq.n	8005348 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005308:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800530a:	e853 3f00 	ldrex	r3, [r3]
 800530e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005310:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005312:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005316:	653b      	str	r3, [r7, #80]	@ 0x50
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005320:	647b      	str	r3, [r7, #68]	@ 0x44
 8005322:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005326:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800532e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e6      	bne.n	8005302 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2220      	movs	r2, #32
 8005338:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2200      	movs	r2, #0
 8005340:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e063      	b.n	8005410 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0304 	and.w	r3, r3, #4
 8005352:	2b04      	cmp	r3, #4
 8005354:	d149      	bne.n	80053ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005356:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800535a:	9300      	str	r3, [sp, #0]
 800535c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800535e:	2200      	movs	r2, #0
 8005360:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f857 	bl	8005418 <UART_WaitOnFlagUntilTimeout>
 800536a:	4603      	mov	r3, r0
 800536c:	2b00      	cmp	r3, #0
 800536e:	d03c      	beq.n	80053ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005378:	e853 3f00 	ldrex	r3, [r3]
 800537c:	623b      	str	r3, [r7, #32]
   return(result);
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005384:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	461a      	mov	r2, r3
 800538c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800538e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005390:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005392:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005394:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005396:	e841 2300 	strex	r3, r2, [r1]
 800539a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800539c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d1e6      	bne.n	8005370 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	3308      	adds	r3, #8
 80053a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	e853 3f00 	ldrex	r3, [r3]
 80053b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	f023 0301 	bic.w	r3, r3, #1
 80053b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3308      	adds	r3, #8
 80053c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053c2:	61fa      	str	r2, [r7, #28]
 80053c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c6:	69b9      	ldr	r1, [r7, #24]
 80053c8:	69fa      	ldr	r2, [r7, #28]
 80053ca:	e841 2300 	strex	r3, r2, [r1]
 80053ce:	617b      	str	r3, [r7, #20]
   return(result);
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d1e5      	bne.n	80053a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2220      	movs	r2, #32
 80053da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2200      	movs	r2, #0
 80053e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e012      	b.n	8005410 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2220      	movs	r2, #32
 80053ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	2220      	movs	r2, #32
 80053f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	2200      	movs	r2, #0
 80053fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2200      	movs	r2, #0
 8005404:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800540e:	2300      	movs	r3, #0
}
 8005410:	4618      	mov	r0, r3
 8005412:	3758      	adds	r7, #88	@ 0x58
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b084      	sub	sp, #16
 800541c:	af00      	add	r7, sp, #0
 800541e:	60f8      	str	r0, [r7, #12]
 8005420:	60b9      	str	r1, [r7, #8]
 8005422:	603b      	str	r3, [r7, #0]
 8005424:	4613      	mov	r3, r2
 8005426:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005428:	e04f      	b.n	80054ca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800542a:	69bb      	ldr	r3, [r7, #24]
 800542c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005430:	d04b      	beq.n	80054ca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005432:	f7fb ffe1 	bl	80013f8 <HAL_GetTick>
 8005436:	4602      	mov	r2, r0
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	1ad3      	subs	r3, r2, r3
 800543c:	69ba      	ldr	r2, [r7, #24]
 800543e:	429a      	cmp	r2, r3
 8005440:	d302      	bcc.n	8005448 <UART_WaitOnFlagUntilTimeout+0x30>
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e04e      	b.n	80054ea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b00      	cmp	r3, #0
 8005458:	d037      	beq.n	80054ca <UART_WaitOnFlagUntilTimeout+0xb2>
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	2b80      	cmp	r3, #128	@ 0x80
 800545e:	d034      	beq.n	80054ca <UART_WaitOnFlagUntilTimeout+0xb2>
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	2b40      	cmp	r3, #64	@ 0x40
 8005464:	d031      	beq.n	80054ca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	69db      	ldr	r3, [r3, #28]
 800546c:	f003 0308 	and.w	r3, r3, #8
 8005470:	2b08      	cmp	r3, #8
 8005472:	d110      	bne.n	8005496 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	2208      	movs	r2, #8
 800547a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f000 f839 	bl	80054f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2208      	movs	r2, #8
 8005486:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005492:	2301      	movs	r3, #1
 8005494:	e029      	b.n	80054ea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	69db      	ldr	r3, [r3, #28]
 800549c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80054a4:	d111      	bne.n	80054ca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80054ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80054b0:	68f8      	ldr	r0, [r7, #12]
 80054b2:	f000 f81f 	bl	80054f4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	2220      	movs	r2, #32
 80054ba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	2200      	movs	r2, #0
 80054c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e00f      	b.n	80054ea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	69da      	ldr	r2, [r3, #28]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	4013      	ands	r3, r2
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	bf0c      	ite	eq
 80054da:	2301      	moveq	r3, #1
 80054dc:	2300      	movne	r3, #0
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	461a      	mov	r2, r3
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d0a0      	beq.n	800542a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054e8:	2300      	movs	r3, #0
}
 80054ea:	4618      	mov	r0, r3
 80054ec:	3710      	adds	r7, #16
 80054ee:	46bd      	mov	sp, r7
 80054f0:	bd80      	pop	{r7, pc}
	...

080054f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b095      	sub	sp, #84	@ 0x54
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005502:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005504:	e853 3f00 	ldrex	r3, [r3]
 8005508:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800550a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005510:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	461a      	mov	r2, r3
 8005518:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800551a:	643b      	str	r3, [r7, #64]	@ 0x40
 800551c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800551e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005520:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005522:	e841 2300 	strex	r3, r2, [r1]
 8005526:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005528:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1e6      	bne.n	80054fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3308      	adds	r3, #8
 8005534:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005536:	6a3b      	ldr	r3, [r7, #32]
 8005538:	e853 3f00 	ldrex	r3, [r3]
 800553c:	61fb      	str	r3, [r7, #28]
   return(result);
 800553e:	69fa      	ldr	r2, [r7, #28]
 8005540:	4b1e      	ldr	r3, [pc, #120]	@ (80055bc <UART_EndRxTransfer+0xc8>)
 8005542:	4013      	ands	r3, r2
 8005544:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3308      	adds	r3, #8
 800554c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800554e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005550:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005552:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005554:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005556:	e841 2300 	strex	r3, r2, [r1]
 800555a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800555c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1e5      	bne.n	800552e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005566:	2b01      	cmp	r3, #1
 8005568:	d118      	bne.n	800559c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	e853 3f00 	ldrex	r3, [r3]
 8005576:	60bb      	str	r3, [r7, #8]
   return(result);
 8005578:	68bb      	ldr	r3, [r7, #8]
 800557a:	f023 0310 	bic.w	r3, r3, #16
 800557e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	461a      	mov	r2, r3
 8005586:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005588:	61bb      	str	r3, [r7, #24]
 800558a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800558c:	6979      	ldr	r1, [r7, #20]
 800558e:	69ba      	ldr	r2, [r7, #24]
 8005590:	e841 2300 	strex	r3, r2, [r1]
 8005594:	613b      	str	r3, [r7, #16]
   return(result);
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d1e6      	bne.n	800556a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2220      	movs	r2, #32
 80055a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80055b0:	bf00      	nop
 80055b2:	3754      	adds	r7, #84	@ 0x54
 80055b4:	46bd      	mov	sp, r7
 80055b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ba:	4770      	bx	lr
 80055bc:	effffffe 	.word	0xeffffffe

080055c0 <std>:
 80055c0:	2300      	movs	r3, #0
 80055c2:	b510      	push	{r4, lr}
 80055c4:	4604      	mov	r4, r0
 80055c6:	e9c0 3300 	strd	r3, r3, [r0]
 80055ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80055ce:	6083      	str	r3, [r0, #8]
 80055d0:	8181      	strh	r1, [r0, #12]
 80055d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80055d4:	81c2      	strh	r2, [r0, #14]
 80055d6:	6183      	str	r3, [r0, #24]
 80055d8:	4619      	mov	r1, r3
 80055da:	2208      	movs	r2, #8
 80055dc:	305c      	adds	r0, #92	@ 0x5c
 80055de:	f000 f906 	bl	80057ee <memset>
 80055e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005618 <std+0x58>)
 80055e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80055e6:	4b0d      	ldr	r3, [pc, #52]	@ (800561c <std+0x5c>)
 80055e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80055ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005620 <std+0x60>)
 80055ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80055ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005624 <std+0x64>)
 80055f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80055f2:	4b0d      	ldr	r3, [pc, #52]	@ (8005628 <std+0x68>)
 80055f4:	6224      	str	r4, [r4, #32]
 80055f6:	429c      	cmp	r4, r3
 80055f8:	d006      	beq.n	8005608 <std+0x48>
 80055fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80055fe:	4294      	cmp	r4, r2
 8005600:	d002      	beq.n	8005608 <std+0x48>
 8005602:	33d0      	adds	r3, #208	@ 0xd0
 8005604:	429c      	cmp	r4, r3
 8005606:	d105      	bne.n	8005614 <std+0x54>
 8005608:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800560c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005610:	f000 b966 	b.w	80058e0 <__retarget_lock_init_recursive>
 8005614:	bd10      	pop	{r4, pc}
 8005616:	bf00      	nop
 8005618:	08005769 	.word	0x08005769
 800561c:	0800578b 	.word	0x0800578b
 8005620:	080057c3 	.word	0x080057c3
 8005624:	080057e7 	.word	0x080057e7
 8005628:	240001d4 	.word	0x240001d4

0800562c <stdio_exit_handler>:
 800562c:	4a02      	ldr	r2, [pc, #8]	@ (8005638 <stdio_exit_handler+0xc>)
 800562e:	4903      	ldr	r1, [pc, #12]	@ (800563c <stdio_exit_handler+0x10>)
 8005630:	4803      	ldr	r0, [pc, #12]	@ (8005640 <stdio_exit_handler+0x14>)
 8005632:	f000 b869 	b.w	8005708 <_fwalk_sglue>
 8005636:	bf00      	nop
 8005638:	24000014 	.word	0x24000014
 800563c:	0800617d 	.word	0x0800617d
 8005640:	24000024 	.word	0x24000024

08005644 <cleanup_stdio>:
 8005644:	6841      	ldr	r1, [r0, #4]
 8005646:	4b0c      	ldr	r3, [pc, #48]	@ (8005678 <cleanup_stdio+0x34>)
 8005648:	4299      	cmp	r1, r3
 800564a:	b510      	push	{r4, lr}
 800564c:	4604      	mov	r4, r0
 800564e:	d001      	beq.n	8005654 <cleanup_stdio+0x10>
 8005650:	f000 fd94 	bl	800617c <_fflush_r>
 8005654:	68a1      	ldr	r1, [r4, #8]
 8005656:	4b09      	ldr	r3, [pc, #36]	@ (800567c <cleanup_stdio+0x38>)
 8005658:	4299      	cmp	r1, r3
 800565a:	d002      	beq.n	8005662 <cleanup_stdio+0x1e>
 800565c:	4620      	mov	r0, r4
 800565e:	f000 fd8d 	bl	800617c <_fflush_r>
 8005662:	68e1      	ldr	r1, [r4, #12]
 8005664:	4b06      	ldr	r3, [pc, #24]	@ (8005680 <cleanup_stdio+0x3c>)
 8005666:	4299      	cmp	r1, r3
 8005668:	d004      	beq.n	8005674 <cleanup_stdio+0x30>
 800566a:	4620      	mov	r0, r4
 800566c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005670:	f000 bd84 	b.w	800617c <_fflush_r>
 8005674:	bd10      	pop	{r4, pc}
 8005676:	bf00      	nop
 8005678:	240001d4 	.word	0x240001d4
 800567c:	2400023c 	.word	0x2400023c
 8005680:	240002a4 	.word	0x240002a4

08005684 <global_stdio_init.part.0>:
 8005684:	b510      	push	{r4, lr}
 8005686:	4b0b      	ldr	r3, [pc, #44]	@ (80056b4 <global_stdio_init.part.0+0x30>)
 8005688:	4c0b      	ldr	r4, [pc, #44]	@ (80056b8 <global_stdio_init.part.0+0x34>)
 800568a:	4a0c      	ldr	r2, [pc, #48]	@ (80056bc <global_stdio_init.part.0+0x38>)
 800568c:	601a      	str	r2, [r3, #0]
 800568e:	4620      	mov	r0, r4
 8005690:	2200      	movs	r2, #0
 8005692:	2104      	movs	r1, #4
 8005694:	f7ff ff94 	bl	80055c0 <std>
 8005698:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800569c:	2201      	movs	r2, #1
 800569e:	2109      	movs	r1, #9
 80056a0:	f7ff ff8e 	bl	80055c0 <std>
 80056a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80056a8:	2202      	movs	r2, #2
 80056aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056ae:	2112      	movs	r1, #18
 80056b0:	f7ff bf86 	b.w	80055c0 <std>
 80056b4:	2400030c 	.word	0x2400030c
 80056b8:	240001d4 	.word	0x240001d4
 80056bc:	0800562d 	.word	0x0800562d

080056c0 <__sfp_lock_acquire>:
 80056c0:	4801      	ldr	r0, [pc, #4]	@ (80056c8 <__sfp_lock_acquire+0x8>)
 80056c2:	f000 b90e 	b.w	80058e2 <__retarget_lock_acquire_recursive>
 80056c6:	bf00      	nop
 80056c8:	24000315 	.word	0x24000315

080056cc <__sfp_lock_release>:
 80056cc:	4801      	ldr	r0, [pc, #4]	@ (80056d4 <__sfp_lock_release+0x8>)
 80056ce:	f000 b909 	b.w	80058e4 <__retarget_lock_release_recursive>
 80056d2:	bf00      	nop
 80056d4:	24000315 	.word	0x24000315

080056d8 <__sinit>:
 80056d8:	b510      	push	{r4, lr}
 80056da:	4604      	mov	r4, r0
 80056dc:	f7ff fff0 	bl	80056c0 <__sfp_lock_acquire>
 80056e0:	6a23      	ldr	r3, [r4, #32]
 80056e2:	b11b      	cbz	r3, 80056ec <__sinit+0x14>
 80056e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056e8:	f7ff bff0 	b.w	80056cc <__sfp_lock_release>
 80056ec:	4b04      	ldr	r3, [pc, #16]	@ (8005700 <__sinit+0x28>)
 80056ee:	6223      	str	r3, [r4, #32]
 80056f0:	4b04      	ldr	r3, [pc, #16]	@ (8005704 <__sinit+0x2c>)
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d1f5      	bne.n	80056e4 <__sinit+0xc>
 80056f8:	f7ff ffc4 	bl	8005684 <global_stdio_init.part.0>
 80056fc:	e7f2      	b.n	80056e4 <__sinit+0xc>
 80056fe:	bf00      	nop
 8005700:	08005645 	.word	0x08005645
 8005704:	2400030c 	.word	0x2400030c

08005708 <_fwalk_sglue>:
 8005708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800570c:	4607      	mov	r7, r0
 800570e:	4688      	mov	r8, r1
 8005710:	4614      	mov	r4, r2
 8005712:	2600      	movs	r6, #0
 8005714:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005718:	f1b9 0901 	subs.w	r9, r9, #1
 800571c:	d505      	bpl.n	800572a <_fwalk_sglue+0x22>
 800571e:	6824      	ldr	r4, [r4, #0]
 8005720:	2c00      	cmp	r4, #0
 8005722:	d1f7      	bne.n	8005714 <_fwalk_sglue+0xc>
 8005724:	4630      	mov	r0, r6
 8005726:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800572a:	89ab      	ldrh	r3, [r5, #12]
 800572c:	2b01      	cmp	r3, #1
 800572e:	d907      	bls.n	8005740 <_fwalk_sglue+0x38>
 8005730:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005734:	3301      	adds	r3, #1
 8005736:	d003      	beq.n	8005740 <_fwalk_sglue+0x38>
 8005738:	4629      	mov	r1, r5
 800573a:	4638      	mov	r0, r7
 800573c:	47c0      	blx	r8
 800573e:	4306      	orrs	r6, r0
 8005740:	3568      	adds	r5, #104	@ 0x68
 8005742:	e7e9      	b.n	8005718 <_fwalk_sglue+0x10>

08005744 <iprintf>:
 8005744:	b40f      	push	{r0, r1, r2, r3}
 8005746:	b507      	push	{r0, r1, r2, lr}
 8005748:	4906      	ldr	r1, [pc, #24]	@ (8005764 <iprintf+0x20>)
 800574a:	ab04      	add	r3, sp, #16
 800574c:	6808      	ldr	r0, [r1, #0]
 800574e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005752:	6881      	ldr	r1, [r0, #8]
 8005754:	9301      	str	r3, [sp, #4]
 8005756:	f000 f9e9 	bl	8005b2c <_vfiprintf_r>
 800575a:	b003      	add	sp, #12
 800575c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005760:	b004      	add	sp, #16
 8005762:	4770      	bx	lr
 8005764:	24000020 	.word	0x24000020

08005768 <__sread>:
 8005768:	b510      	push	{r4, lr}
 800576a:	460c      	mov	r4, r1
 800576c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005770:	f000 f868 	bl	8005844 <_read_r>
 8005774:	2800      	cmp	r0, #0
 8005776:	bfab      	itete	ge
 8005778:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800577a:	89a3      	ldrhlt	r3, [r4, #12]
 800577c:	181b      	addge	r3, r3, r0
 800577e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005782:	bfac      	ite	ge
 8005784:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005786:	81a3      	strhlt	r3, [r4, #12]
 8005788:	bd10      	pop	{r4, pc}

0800578a <__swrite>:
 800578a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800578e:	461f      	mov	r7, r3
 8005790:	898b      	ldrh	r3, [r1, #12]
 8005792:	05db      	lsls	r3, r3, #23
 8005794:	4605      	mov	r5, r0
 8005796:	460c      	mov	r4, r1
 8005798:	4616      	mov	r6, r2
 800579a:	d505      	bpl.n	80057a8 <__swrite+0x1e>
 800579c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057a0:	2302      	movs	r3, #2
 80057a2:	2200      	movs	r2, #0
 80057a4:	f000 f83c 	bl	8005820 <_lseek_r>
 80057a8:	89a3      	ldrh	r3, [r4, #12]
 80057aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80057b2:	81a3      	strh	r3, [r4, #12]
 80057b4:	4632      	mov	r2, r6
 80057b6:	463b      	mov	r3, r7
 80057b8:	4628      	mov	r0, r5
 80057ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057be:	f000 b853 	b.w	8005868 <_write_r>

080057c2 <__sseek>:
 80057c2:	b510      	push	{r4, lr}
 80057c4:	460c      	mov	r4, r1
 80057c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ca:	f000 f829 	bl	8005820 <_lseek_r>
 80057ce:	1c43      	adds	r3, r0, #1
 80057d0:	89a3      	ldrh	r3, [r4, #12]
 80057d2:	bf15      	itete	ne
 80057d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80057d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80057da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80057de:	81a3      	strheq	r3, [r4, #12]
 80057e0:	bf18      	it	ne
 80057e2:	81a3      	strhne	r3, [r4, #12]
 80057e4:	bd10      	pop	{r4, pc}

080057e6 <__sclose>:
 80057e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ea:	f000 b809 	b.w	8005800 <_close_r>

080057ee <memset>:
 80057ee:	4402      	add	r2, r0
 80057f0:	4603      	mov	r3, r0
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d100      	bne.n	80057f8 <memset+0xa>
 80057f6:	4770      	bx	lr
 80057f8:	f803 1b01 	strb.w	r1, [r3], #1
 80057fc:	e7f9      	b.n	80057f2 <memset+0x4>
	...

08005800 <_close_r>:
 8005800:	b538      	push	{r3, r4, r5, lr}
 8005802:	4d06      	ldr	r5, [pc, #24]	@ (800581c <_close_r+0x1c>)
 8005804:	2300      	movs	r3, #0
 8005806:	4604      	mov	r4, r0
 8005808:	4608      	mov	r0, r1
 800580a:	602b      	str	r3, [r5, #0]
 800580c:	f7fb fc02 	bl	8001014 <_close>
 8005810:	1c43      	adds	r3, r0, #1
 8005812:	d102      	bne.n	800581a <_close_r+0x1a>
 8005814:	682b      	ldr	r3, [r5, #0]
 8005816:	b103      	cbz	r3, 800581a <_close_r+0x1a>
 8005818:	6023      	str	r3, [r4, #0]
 800581a:	bd38      	pop	{r3, r4, r5, pc}
 800581c:	24000310 	.word	0x24000310

08005820 <_lseek_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4d07      	ldr	r5, [pc, #28]	@ (8005840 <_lseek_r+0x20>)
 8005824:	4604      	mov	r4, r0
 8005826:	4608      	mov	r0, r1
 8005828:	4611      	mov	r1, r2
 800582a:	2200      	movs	r2, #0
 800582c:	602a      	str	r2, [r5, #0]
 800582e:	461a      	mov	r2, r3
 8005830:	f7fb fc17 	bl	8001062 <_lseek>
 8005834:	1c43      	adds	r3, r0, #1
 8005836:	d102      	bne.n	800583e <_lseek_r+0x1e>
 8005838:	682b      	ldr	r3, [r5, #0]
 800583a:	b103      	cbz	r3, 800583e <_lseek_r+0x1e>
 800583c:	6023      	str	r3, [r4, #0]
 800583e:	bd38      	pop	{r3, r4, r5, pc}
 8005840:	24000310 	.word	0x24000310

08005844 <_read_r>:
 8005844:	b538      	push	{r3, r4, r5, lr}
 8005846:	4d07      	ldr	r5, [pc, #28]	@ (8005864 <_read_r+0x20>)
 8005848:	4604      	mov	r4, r0
 800584a:	4608      	mov	r0, r1
 800584c:	4611      	mov	r1, r2
 800584e:	2200      	movs	r2, #0
 8005850:	602a      	str	r2, [r5, #0]
 8005852:	461a      	mov	r2, r3
 8005854:	f7fb fba5 	bl	8000fa2 <_read>
 8005858:	1c43      	adds	r3, r0, #1
 800585a:	d102      	bne.n	8005862 <_read_r+0x1e>
 800585c:	682b      	ldr	r3, [r5, #0]
 800585e:	b103      	cbz	r3, 8005862 <_read_r+0x1e>
 8005860:	6023      	str	r3, [r4, #0]
 8005862:	bd38      	pop	{r3, r4, r5, pc}
 8005864:	24000310 	.word	0x24000310

08005868 <_write_r>:
 8005868:	b538      	push	{r3, r4, r5, lr}
 800586a:	4d07      	ldr	r5, [pc, #28]	@ (8005888 <_write_r+0x20>)
 800586c:	4604      	mov	r4, r0
 800586e:	4608      	mov	r0, r1
 8005870:	4611      	mov	r1, r2
 8005872:	2200      	movs	r2, #0
 8005874:	602a      	str	r2, [r5, #0]
 8005876:	461a      	mov	r2, r3
 8005878:	f7fb fbb0 	bl	8000fdc <_write>
 800587c:	1c43      	adds	r3, r0, #1
 800587e:	d102      	bne.n	8005886 <_write_r+0x1e>
 8005880:	682b      	ldr	r3, [r5, #0]
 8005882:	b103      	cbz	r3, 8005886 <_write_r+0x1e>
 8005884:	6023      	str	r3, [r4, #0]
 8005886:	bd38      	pop	{r3, r4, r5, pc}
 8005888:	24000310 	.word	0x24000310

0800588c <__errno>:
 800588c:	4b01      	ldr	r3, [pc, #4]	@ (8005894 <__errno+0x8>)
 800588e:	6818      	ldr	r0, [r3, #0]
 8005890:	4770      	bx	lr
 8005892:	bf00      	nop
 8005894:	24000020 	.word	0x24000020

08005898 <__libc_init_array>:
 8005898:	b570      	push	{r4, r5, r6, lr}
 800589a:	4d0d      	ldr	r5, [pc, #52]	@ (80058d0 <__libc_init_array+0x38>)
 800589c:	4c0d      	ldr	r4, [pc, #52]	@ (80058d4 <__libc_init_array+0x3c>)
 800589e:	1b64      	subs	r4, r4, r5
 80058a0:	10a4      	asrs	r4, r4, #2
 80058a2:	2600      	movs	r6, #0
 80058a4:	42a6      	cmp	r6, r4
 80058a6:	d109      	bne.n	80058bc <__libc_init_array+0x24>
 80058a8:	4d0b      	ldr	r5, [pc, #44]	@ (80058d8 <__libc_init_array+0x40>)
 80058aa:	4c0c      	ldr	r4, [pc, #48]	@ (80058dc <__libc_init_array+0x44>)
 80058ac:	f000 fdb6 	bl	800641c <_init>
 80058b0:	1b64      	subs	r4, r4, r5
 80058b2:	10a4      	asrs	r4, r4, #2
 80058b4:	2600      	movs	r6, #0
 80058b6:	42a6      	cmp	r6, r4
 80058b8:	d105      	bne.n	80058c6 <__libc_init_array+0x2e>
 80058ba:	bd70      	pop	{r4, r5, r6, pc}
 80058bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80058c0:	4798      	blx	r3
 80058c2:	3601      	adds	r6, #1
 80058c4:	e7ee      	b.n	80058a4 <__libc_init_array+0xc>
 80058c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ca:	4798      	blx	r3
 80058cc:	3601      	adds	r6, #1
 80058ce:	e7f2      	b.n	80058b6 <__libc_init_array+0x1e>
 80058d0:	080064a4 	.word	0x080064a4
 80058d4:	080064a4 	.word	0x080064a4
 80058d8:	080064a4 	.word	0x080064a4
 80058dc:	080064a8 	.word	0x080064a8

080058e0 <__retarget_lock_init_recursive>:
 80058e0:	4770      	bx	lr

080058e2 <__retarget_lock_acquire_recursive>:
 80058e2:	4770      	bx	lr

080058e4 <__retarget_lock_release_recursive>:
 80058e4:	4770      	bx	lr
	...

080058e8 <_free_r>:
 80058e8:	b538      	push	{r3, r4, r5, lr}
 80058ea:	4605      	mov	r5, r0
 80058ec:	2900      	cmp	r1, #0
 80058ee:	d041      	beq.n	8005974 <_free_r+0x8c>
 80058f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058f4:	1f0c      	subs	r4, r1, #4
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	bfb8      	it	lt
 80058fa:	18e4      	addlt	r4, r4, r3
 80058fc:	f000 f8e0 	bl	8005ac0 <__malloc_lock>
 8005900:	4a1d      	ldr	r2, [pc, #116]	@ (8005978 <_free_r+0x90>)
 8005902:	6813      	ldr	r3, [r2, #0]
 8005904:	b933      	cbnz	r3, 8005914 <_free_r+0x2c>
 8005906:	6063      	str	r3, [r4, #4]
 8005908:	6014      	str	r4, [r2, #0]
 800590a:	4628      	mov	r0, r5
 800590c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005910:	f000 b8dc 	b.w	8005acc <__malloc_unlock>
 8005914:	42a3      	cmp	r3, r4
 8005916:	d908      	bls.n	800592a <_free_r+0x42>
 8005918:	6820      	ldr	r0, [r4, #0]
 800591a:	1821      	adds	r1, r4, r0
 800591c:	428b      	cmp	r3, r1
 800591e:	bf01      	itttt	eq
 8005920:	6819      	ldreq	r1, [r3, #0]
 8005922:	685b      	ldreq	r3, [r3, #4]
 8005924:	1809      	addeq	r1, r1, r0
 8005926:	6021      	streq	r1, [r4, #0]
 8005928:	e7ed      	b.n	8005906 <_free_r+0x1e>
 800592a:	461a      	mov	r2, r3
 800592c:	685b      	ldr	r3, [r3, #4]
 800592e:	b10b      	cbz	r3, 8005934 <_free_r+0x4c>
 8005930:	42a3      	cmp	r3, r4
 8005932:	d9fa      	bls.n	800592a <_free_r+0x42>
 8005934:	6811      	ldr	r1, [r2, #0]
 8005936:	1850      	adds	r0, r2, r1
 8005938:	42a0      	cmp	r0, r4
 800593a:	d10b      	bne.n	8005954 <_free_r+0x6c>
 800593c:	6820      	ldr	r0, [r4, #0]
 800593e:	4401      	add	r1, r0
 8005940:	1850      	adds	r0, r2, r1
 8005942:	4283      	cmp	r3, r0
 8005944:	6011      	str	r1, [r2, #0]
 8005946:	d1e0      	bne.n	800590a <_free_r+0x22>
 8005948:	6818      	ldr	r0, [r3, #0]
 800594a:	685b      	ldr	r3, [r3, #4]
 800594c:	6053      	str	r3, [r2, #4]
 800594e:	4408      	add	r0, r1
 8005950:	6010      	str	r0, [r2, #0]
 8005952:	e7da      	b.n	800590a <_free_r+0x22>
 8005954:	d902      	bls.n	800595c <_free_r+0x74>
 8005956:	230c      	movs	r3, #12
 8005958:	602b      	str	r3, [r5, #0]
 800595a:	e7d6      	b.n	800590a <_free_r+0x22>
 800595c:	6820      	ldr	r0, [r4, #0]
 800595e:	1821      	adds	r1, r4, r0
 8005960:	428b      	cmp	r3, r1
 8005962:	bf04      	itt	eq
 8005964:	6819      	ldreq	r1, [r3, #0]
 8005966:	685b      	ldreq	r3, [r3, #4]
 8005968:	6063      	str	r3, [r4, #4]
 800596a:	bf04      	itt	eq
 800596c:	1809      	addeq	r1, r1, r0
 800596e:	6021      	streq	r1, [r4, #0]
 8005970:	6054      	str	r4, [r2, #4]
 8005972:	e7ca      	b.n	800590a <_free_r+0x22>
 8005974:	bd38      	pop	{r3, r4, r5, pc}
 8005976:	bf00      	nop
 8005978:	2400031c 	.word	0x2400031c

0800597c <sbrk_aligned>:
 800597c:	b570      	push	{r4, r5, r6, lr}
 800597e:	4e0f      	ldr	r6, [pc, #60]	@ (80059bc <sbrk_aligned+0x40>)
 8005980:	460c      	mov	r4, r1
 8005982:	6831      	ldr	r1, [r6, #0]
 8005984:	4605      	mov	r5, r0
 8005986:	b911      	cbnz	r1, 800598e <sbrk_aligned+0x12>
 8005988:	f000 fcb4 	bl	80062f4 <_sbrk_r>
 800598c:	6030      	str	r0, [r6, #0]
 800598e:	4621      	mov	r1, r4
 8005990:	4628      	mov	r0, r5
 8005992:	f000 fcaf 	bl	80062f4 <_sbrk_r>
 8005996:	1c43      	adds	r3, r0, #1
 8005998:	d103      	bne.n	80059a2 <sbrk_aligned+0x26>
 800599a:	f04f 34ff 	mov.w	r4, #4294967295
 800599e:	4620      	mov	r0, r4
 80059a0:	bd70      	pop	{r4, r5, r6, pc}
 80059a2:	1cc4      	adds	r4, r0, #3
 80059a4:	f024 0403 	bic.w	r4, r4, #3
 80059a8:	42a0      	cmp	r0, r4
 80059aa:	d0f8      	beq.n	800599e <sbrk_aligned+0x22>
 80059ac:	1a21      	subs	r1, r4, r0
 80059ae:	4628      	mov	r0, r5
 80059b0:	f000 fca0 	bl	80062f4 <_sbrk_r>
 80059b4:	3001      	adds	r0, #1
 80059b6:	d1f2      	bne.n	800599e <sbrk_aligned+0x22>
 80059b8:	e7ef      	b.n	800599a <sbrk_aligned+0x1e>
 80059ba:	bf00      	nop
 80059bc:	24000318 	.word	0x24000318

080059c0 <_malloc_r>:
 80059c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059c4:	1ccd      	adds	r5, r1, #3
 80059c6:	f025 0503 	bic.w	r5, r5, #3
 80059ca:	3508      	adds	r5, #8
 80059cc:	2d0c      	cmp	r5, #12
 80059ce:	bf38      	it	cc
 80059d0:	250c      	movcc	r5, #12
 80059d2:	2d00      	cmp	r5, #0
 80059d4:	4606      	mov	r6, r0
 80059d6:	db01      	blt.n	80059dc <_malloc_r+0x1c>
 80059d8:	42a9      	cmp	r1, r5
 80059da:	d904      	bls.n	80059e6 <_malloc_r+0x26>
 80059dc:	230c      	movs	r3, #12
 80059de:	6033      	str	r3, [r6, #0]
 80059e0:	2000      	movs	r0, #0
 80059e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005abc <_malloc_r+0xfc>
 80059ea:	f000 f869 	bl	8005ac0 <__malloc_lock>
 80059ee:	f8d8 3000 	ldr.w	r3, [r8]
 80059f2:	461c      	mov	r4, r3
 80059f4:	bb44      	cbnz	r4, 8005a48 <_malloc_r+0x88>
 80059f6:	4629      	mov	r1, r5
 80059f8:	4630      	mov	r0, r6
 80059fa:	f7ff ffbf 	bl	800597c <sbrk_aligned>
 80059fe:	1c43      	adds	r3, r0, #1
 8005a00:	4604      	mov	r4, r0
 8005a02:	d158      	bne.n	8005ab6 <_malloc_r+0xf6>
 8005a04:	f8d8 4000 	ldr.w	r4, [r8]
 8005a08:	4627      	mov	r7, r4
 8005a0a:	2f00      	cmp	r7, #0
 8005a0c:	d143      	bne.n	8005a96 <_malloc_r+0xd6>
 8005a0e:	2c00      	cmp	r4, #0
 8005a10:	d04b      	beq.n	8005aaa <_malloc_r+0xea>
 8005a12:	6823      	ldr	r3, [r4, #0]
 8005a14:	4639      	mov	r1, r7
 8005a16:	4630      	mov	r0, r6
 8005a18:	eb04 0903 	add.w	r9, r4, r3
 8005a1c:	f000 fc6a 	bl	80062f4 <_sbrk_r>
 8005a20:	4581      	cmp	r9, r0
 8005a22:	d142      	bne.n	8005aaa <_malloc_r+0xea>
 8005a24:	6821      	ldr	r1, [r4, #0]
 8005a26:	1a6d      	subs	r5, r5, r1
 8005a28:	4629      	mov	r1, r5
 8005a2a:	4630      	mov	r0, r6
 8005a2c:	f7ff ffa6 	bl	800597c <sbrk_aligned>
 8005a30:	3001      	adds	r0, #1
 8005a32:	d03a      	beq.n	8005aaa <_malloc_r+0xea>
 8005a34:	6823      	ldr	r3, [r4, #0]
 8005a36:	442b      	add	r3, r5
 8005a38:	6023      	str	r3, [r4, #0]
 8005a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	bb62      	cbnz	r2, 8005a9c <_malloc_r+0xdc>
 8005a42:	f8c8 7000 	str.w	r7, [r8]
 8005a46:	e00f      	b.n	8005a68 <_malloc_r+0xa8>
 8005a48:	6822      	ldr	r2, [r4, #0]
 8005a4a:	1b52      	subs	r2, r2, r5
 8005a4c:	d420      	bmi.n	8005a90 <_malloc_r+0xd0>
 8005a4e:	2a0b      	cmp	r2, #11
 8005a50:	d917      	bls.n	8005a82 <_malloc_r+0xc2>
 8005a52:	1961      	adds	r1, r4, r5
 8005a54:	42a3      	cmp	r3, r4
 8005a56:	6025      	str	r5, [r4, #0]
 8005a58:	bf18      	it	ne
 8005a5a:	6059      	strne	r1, [r3, #4]
 8005a5c:	6863      	ldr	r3, [r4, #4]
 8005a5e:	bf08      	it	eq
 8005a60:	f8c8 1000 	streq.w	r1, [r8]
 8005a64:	5162      	str	r2, [r4, r5]
 8005a66:	604b      	str	r3, [r1, #4]
 8005a68:	4630      	mov	r0, r6
 8005a6a:	f000 f82f 	bl	8005acc <__malloc_unlock>
 8005a6e:	f104 000b 	add.w	r0, r4, #11
 8005a72:	1d23      	adds	r3, r4, #4
 8005a74:	f020 0007 	bic.w	r0, r0, #7
 8005a78:	1ac2      	subs	r2, r0, r3
 8005a7a:	bf1c      	itt	ne
 8005a7c:	1a1b      	subne	r3, r3, r0
 8005a7e:	50a3      	strne	r3, [r4, r2]
 8005a80:	e7af      	b.n	80059e2 <_malloc_r+0x22>
 8005a82:	6862      	ldr	r2, [r4, #4]
 8005a84:	42a3      	cmp	r3, r4
 8005a86:	bf0c      	ite	eq
 8005a88:	f8c8 2000 	streq.w	r2, [r8]
 8005a8c:	605a      	strne	r2, [r3, #4]
 8005a8e:	e7eb      	b.n	8005a68 <_malloc_r+0xa8>
 8005a90:	4623      	mov	r3, r4
 8005a92:	6864      	ldr	r4, [r4, #4]
 8005a94:	e7ae      	b.n	80059f4 <_malloc_r+0x34>
 8005a96:	463c      	mov	r4, r7
 8005a98:	687f      	ldr	r7, [r7, #4]
 8005a9a:	e7b6      	b.n	8005a0a <_malloc_r+0x4a>
 8005a9c:	461a      	mov	r2, r3
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	42a3      	cmp	r3, r4
 8005aa2:	d1fb      	bne.n	8005a9c <_malloc_r+0xdc>
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	6053      	str	r3, [r2, #4]
 8005aa8:	e7de      	b.n	8005a68 <_malloc_r+0xa8>
 8005aaa:	230c      	movs	r3, #12
 8005aac:	6033      	str	r3, [r6, #0]
 8005aae:	4630      	mov	r0, r6
 8005ab0:	f000 f80c 	bl	8005acc <__malloc_unlock>
 8005ab4:	e794      	b.n	80059e0 <_malloc_r+0x20>
 8005ab6:	6005      	str	r5, [r0, #0]
 8005ab8:	e7d6      	b.n	8005a68 <_malloc_r+0xa8>
 8005aba:	bf00      	nop
 8005abc:	2400031c 	.word	0x2400031c

08005ac0 <__malloc_lock>:
 8005ac0:	4801      	ldr	r0, [pc, #4]	@ (8005ac8 <__malloc_lock+0x8>)
 8005ac2:	f7ff bf0e 	b.w	80058e2 <__retarget_lock_acquire_recursive>
 8005ac6:	bf00      	nop
 8005ac8:	24000314 	.word	0x24000314

08005acc <__malloc_unlock>:
 8005acc:	4801      	ldr	r0, [pc, #4]	@ (8005ad4 <__malloc_unlock+0x8>)
 8005ace:	f7ff bf09 	b.w	80058e4 <__retarget_lock_release_recursive>
 8005ad2:	bf00      	nop
 8005ad4:	24000314 	.word	0x24000314

08005ad8 <__sfputc_r>:
 8005ad8:	6893      	ldr	r3, [r2, #8]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	b410      	push	{r4}
 8005ae0:	6093      	str	r3, [r2, #8]
 8005ae2:	da08      	bge.n	8005af6 <__sfputc_r+0x1e>
 8005ae4:	6994      	ldr	r4, [r2, #24]
 8005ae6:	42a3      	cmp	r3, r4
 8005ae8:	db01      	blt.n	8005aee <__sfputc_r+0x16>
 8005aea:	290a      	cmp	r1, #10
 8005aec:	d103      	bne.n	8005af6 <__sfputc_r+0x1e>
 8005aee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005af2:	f000 bb6b 	b.w	80061cc <__swbuf_r>
 8005af6:	6813      	ldr	r3, [r2, #0]
 8005af8:	1c58      	adds	r0, r3, #1
 8005afa:	6010      	str	r0, [r2, #0]
 8005afc:	7019      	strb	r1, [r3, #0]
 8005afe:	4608      	mov	r0, r1
 8005b00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005b04:	4770      	bx	lr

08005b06 <__sfputs_r>:
 8005b06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b08:	4606      	mov	r6, r0
 8005b0a:	460f      	mov	r7, r1
 8005b0c:	4614      	mov	r4, r2
 8005b0e:	18d5      	adds	r5, r2, r3
 8005b10:	42ac      	cmp	r4, r5
 8005b12:	d101      	bne.n	8005b18 <__sfputs_r+0x12>
 8005b14:	2000      	movs	r0, #0
 8005b16:	e007      	b.n	8005b28 <__sfputs_r+0x22>
 8005b18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b1c:	463a      	mov	r2, r7
 8005b1e:	4630      	mov	r0, r6
 8005b20:	f7ff ffda 	bl	8005ad8 <__sfputc_r>
 8005b24:	1c43      	adds	r3, r0, #1
 8005b26:	d1f3      	bne.n	8005b10 <__sfputs_r+0xa>
 8005b28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005b2c <_vfiprintf_r>:
 8005b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b30:	460d      	mov	r5, r1
 8005b32:	b09d      	sub	sp, #116	@ 0x74
 8005b34:	4614      	mov	r4, r2
 8005b36:	4698      	mov	r8, r3
 8005b38:	4606      	mov	r6, r0
 8005b3a:	b118      	cbz	r0, 8005b44 <_vfiprintf_r+0x18>
 8005b3c:	6a03      	ldr	r3, [r0, #32]
 8005b3e:	b90b      	cbnz	r3, 8005b44 <_vfiprintf_r+0x18>
 8005b40:	f7ff fdca 	bl	80056d8 <__sinit>
 8005b44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b46:	07d9      	lsls	r1, r3, #31
 8005b48:	d405      	bmi.n	8005b56 <_vfiprintf_r+0x2a>
 8005b4a:	89ab      	ldrh	r3, [r5, #12]
 8005b4c:	059a      	lsls	r2, r3, #22
 8005b4e:	d402      	bmi.n	8005b56 <_vfiprintf_r+0x2a>
 8005b50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b52:	f7ff fec6 	bl	80058e2 <__retarget_lock_acquire_recursive>
 8005b56:	89ab      	ldrh	r3, [r5, #12]
 8005b58:	071b      	lsls	r3, r3, #28
 8005b5a:	d501      	bpl.n	8005b60 <_vfiprintf_r+0x34>
 8005b5c:	692b      	ldr	r3, [r5, #16]
 8005b5e:	b99b      	cbnz	r3, 8005b88 <_vfiprintf_r+0x5c>
 8005b60:	4629      	mov	r1, r5
 8005b62:	4630      	mov	r0, r6
 8005b64:	f000 fb70 	bl	8006248 <__swsetup_r>
 8005b68:	b170      	cbz	r0, 8005b88 <_vfiprintf_r+0x5c>
 8005b6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005b6c:	07dc      	lsls	r4, r3, #31
 8005b6e:	d504      	bpl.n	8005b7a <_vfiprintf_r+0x4e>
 8005b70:	f04f 30ff 	mov.w	r0, #4294967295
 8005b74:	b01d      	add	sp, #116	@ 0x74
 8005b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b7a:	89ab      	ldrh	r3, [r5, #12]
 8005b7c:	0598      	lsls	r0, r3, #22
 8005b7e:	d4f7      	bmi.n	8005b70 <_vfiprintf_r+0x44>
 8005b80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005b82:	f7ff feaf 	bl	80058e4 <__retarget_lock_release_recursive>
 8005b86:	e7f3      	b.n	8005b70 <_vfiprintf_r+0x44>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b8c:	2320      	movs	r3, #32
 8005b8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005b92:	f8cd 800c 	str.w	r8, [sp, #12]
 8005b96:	2330      	movs	r3, #48	@ 0x30
 8005b98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005d48 <_vfiprintf_r+0x21c>
 8005b9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005ba0:	f04f 0901 	mov.w	r9, #1
 8005ba4:	4623      	mov	r3, r4
 8005ba6:	469a      	mov	sl, r3
 8005ba8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bac:	b10a      	cbz	r2, 8005bb2 <_vfiprintf_r+0x86>
 8005bae:	2a25      	cmp	r2, #37	@ 0x25
 8005bb0:	d1f9      	bne.n	8005ba6 <_vfiprintf_r+0x7a>
 8005bb2:	ebba 0b04 	subs.w	fp, sl, r4
 8005bb6:	d00b      	beq.n	8005bd0 <_vfiprintf_r+0xa4>
 8005bb8:	465b      	mov	r3, fp
 8005bba:	4622      	mov	r2, r4
 8005bbc:	4629      	mov	r1, r5
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	f7ff ffa1 	bl	8005b06 <__sfputs_r>
 8005bc4:	3001      	adds	r0, #1
 8005bc6:	f000 80a7 	beq.w	8005d18 <_vfiprintf_r+0x1ec>
 8005bca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005bcc:	445a      	add	r2, fp
 8005bce:	9209      	str	r2, [sp, #36]	@ 0x24
 8005bd0:	f89a 3000 	ldrb.w	r3, [sl]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	f000 809f 	beq.w	8005d18 <_vfiprintf_r+0x1ec>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f04f 32ff 	mov.w	r2, #4294967295
 8005be0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005be4:	f10a 0a01 	add.w	sl, sl, #1
 8005be8:	9304      	str	r3, [sp, #16]
 8005bea:	9307      	str	r3, [sp, #28]
 8005bec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005bf0:	931a      	str	r3, [sp, #104]	@ 0x68
 8005bf2:	4654      	mov	r4, sl
 8005bf4:	2205      	movs	r2, #5
 8005bf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005bfa:	4853      	ldr	r0, [pc, #332]	@ (8005d48 <_vfiprintf_r+0x21c>)
 8005bfc:	f7fa fb70 	bl	80002e0 <memchr>
 8005c00:	9a04      	ldr	r2, [sp, #16]
 8005c02:	b9d8      	cbnz	r0, 8005c3c <_vfiprintf_r+0x110>
 8005c04:	06d1      	lsls	r1, r2, #27
 8005c06:	bf44      	itt	mi
 8005c08:	2320      	movmi	r3, #32
 8005c0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c0e:	0713      	lsls	r3, r2, #28
 8005c10:	bf44      	itt	mi
 8005c12:	232b      	movmi	r3, #43	@ 0x2b
 8005c14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005c18:	f89a 3000 	ldrb.w	r3, [sl]
 8005c1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c1e:	d015      	beq.n	8005c4c <_vfiprintf_r+0x120>
 8005c20:	9a07      	ldr	r2, [sp, #28]
 8005c22:	4654      	mov	r4, sl
 8005c24:	2000      	movs	r0, #0
 8005c26:	f04f 0c0a 	mov.w	ip, #10
 8005c2a:	4621      	mov	r1, r4
 8005c2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c30:	3b30      	subs	r3, #48	@ 0x30
 8005c32:	2b09      	cmp	r3, #9
 8005c34:	d94b      	bls.n	8005cce <_vfiprintf_r+0x1a2>
 8005c36:	b1b0      	cbz	r0, 8005c66 <_vfiprintf_r+0x13a>
 8005c38:	9207      	str	r2, [sp, #28]
 8005c3a:	e014      	b.n	8005c66 <_vfiprintf_r+0x13a>
 8005c3c:	eba0 0308 	sub.w	r3, r0, r8
 8005c40:	fa09 f303 	lsl.w	r3, r9, r3
 8005c44:	4313      	orrs	r3, r2
 8005c46:	9304      	str	r3, [sp, #16]
 8005c48:	46a2      	mov	sl, r4
 8005c4a:	e7d2      	b.n	8005bf2 <_vfiprintf_r+0xc6>
 8005c4c:	9b03      	ldr	r3, [sp, #12]
 8005c4e:	1d19      	adds	r1, r3, #4
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	9103      	str	r1, [sp, #12]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	bfbb      	ittet	lt
 8005c58:	425b      	neglt	r3, r3
 8005c5a:	f042 0202 	orrlt.w	r2, r2, #2
 8005c5e:	9307      	strge	r3, [sp, #28]
 8005c60:	9307      	strlt	r3, [sp, #28]
 8005c62:	bfb8      	it	lt
 8005c64:	9204      	strlt	r2, [sp, #16]
 8005c66:	7823      	ldrb	r3, [r4, #0]
 8005c68:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c6a:	d10a      	bne.n	8005c82 <_vfiprintf_r+0x156>
 8005c6c:	7863      	ldrb	r3, [r4, #1]
 8005c6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8005c70:	d132      	bne.n	8005cd8 <_vfiprintf_r+0x1ac>
 8005c72:	9b03      	ldr	r3, [sp, #12]
 8005c74:	1d1a      	adds	r2, r3, #4
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	9203      	str	r2, [sp, #12]
 8005c7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005c7e:	3402      	adds	r4, #2
 8005c80:	9305      	str	r3, [sp, #20]
 8005c82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005d58 <_vfiprintf_r+0x22c>
 8005c86:	7821      	ldrb	r1, [r4, #0]
 8005c88:	2203      	movs	r2, #3
 8005c8a:	4650      	mov	r0, sl
 8005c8c:	f7fa fb28 	bl	80002e0 <memchr>
 8005c90:	b138      	cbz	r0, 8005ca2 <_vfiprintf_r+0x176>
 8005c92:	9b04      	ldr	r3, [sp, #16]
 8005c94:	eba0 000a 	sub.w	r0, r0, sl
 8005c98:	2240      	movs	r2, #64	@ 0x40
 8005c9a:	4082      	lsls	r2, r0
 8005c9c:	4313      	orrs	r3, r2
 8005c9e:	3401      	adds	r4, #1
 8005ca0:	9304      	str	r3, [sp, #16]
 8005ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005ca6:	4829      	ldr	r0, [pc, #164]	@ (8005d4c <_vfiprintf_r+0x220>)
 8005ca8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005cac:	2206      	movs	r2, #6
 8005cae:	f7fa fb17 	bl	80002e0 <memchr>
 8005cb2:	2800      	cmp	r0, #0
 8005cb4:	d03f      	beq.n	8005d36 <_vfiprintf_r+0x20a>
 8005cb6:	4b26      	ldr	r3, [pc, #152]	@ (8005d50 <_vfiprintf_r+0x224>)
 8005cb8:	bb1b      	cbnz	r3, 8005d02 <_vfiprintf_r+0x1d6>
 8005cba:	9b03      	ldr	r3, [sp, #12]
 8005cbc:	3307      	adds	r3, #7
 8005cbe:	f023 0307 	bic.w	r3, r3, #7
 8005cc2:	3308      	adds	r3, #8
 8005cc4:	9303      	str	r3, [sp, #12]
 8005cc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cc8:	443b      	add	r3, r7
 8005cca:	9309      	str	r3, [sp, #36]	@ 0x24
 8005ccc:	e76a      	b.n	8005ba4 <_vfiprintf_r+0x78>
 8005cce:	fb0c 3202 	mla	r2, ip, r2, r3
 8005cd2:	460c      	mov	r4, r1
 8005cd4:	2001      	movs	r0, #1
 8005cd6:	e7a8      	b.n	8005c2a <_vfiprintf_r+0xfe>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	3401      	adds	r4, #1
 8005cdc:	9305      	str	r3, [sp, #20]
 8005cde:	4619      	mov	r1, r3
 8005ce0:	f04f 0c0a 	mov.w	ip, #10
 8005ce4:	4620      	mov	r0, r4
 8005ce6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005cea:	3a30      	subs	r2, #48	@ 0x30
 8005cec:	2a09      	cmp	r2, #9
 8005cee:	d903      	bls.n	8005cf8 <_vfiprintf_r+0x1cc>
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d0c6      	beq.n	8005c82 <_vfiprintf_r+0x156>
 8005cf4:	9105      	str	r1, [sp, #20]
 8005cf6:	e7c4      	b.n	8005c82 <_vfiprintf_r+0x156>
 8005cf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8005cfc:	4604      	mov	r4, r0
 8005cfe:	2301      	movs	r3, #1
 8005d00:	e7f0      	b.n	8005ce4 <_vfiprintf_r+0x1b8>
 8005d02:	ab03      	add	r3, sp, #12
 8005d04:	9300      	str	r3, [sp, #0]
 8005d06:	462a      	mov	r2, r5
 8005d08:	4b12      	ldr	r3, [pc, #72]	@ (8005d54 <_vfiprintf_r+0x228>)
 8005d0a:	a904      	add	r1, sp, #16
 8005d0c:	4630      	mov	r0, r6
 8005d0e:	f3af 8000 	nop.w
 8005d12:	4607      	mov	r7, r0
 8005d14:	1c78      	adds	r0, r7, #1
 8005d16:	d1d6      	bne.n	8005cc6 <_vfiprintf_r+0x19a>
 8005d18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d1a:	07d9      	lsls	r1, r3, #31
 8005d1c:	d405      	bmi.n	8005d2a <_vfiprintf_r+0x1fe>
 8005d1e:	89ab      	ldrh	r3, [r5, #12]
 8005d20:	059a      	lsls	r2, r3, #22
 8005d22:	d402      	bmi.n	8005d2a <_vfiprintf_r+0x1fe>
 8005d24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d26:	f7ff fddd 	bl	80058e4 <__retarget_lock_release_recursive>
 8005d2a:	89ab      	ldrh	r3, [r5, #12]
 8005d2c:	065b      	lsls	r3, r3, #25
 8005d2e:	f53f af1f 	bmi.w	8005b70 <_vfiprintf_r+0x44>
 8005d32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005d34:	e71e      	b.n	8005b74 <_vfiprintf_r+0x48>
 8005d36:	ab03      	add	r3, sp, #12
 8005d38:	9300      	str	r3, [sp, #0]
 8005d3a:	462a      	mov	r2, r5
 8005d3c:	4b05      	ldr	r3, [pc, #20]	@ (8005d54 <_vfiprintf_r+0x228>)
 8005d3e:	a904      	add	r1, sp, #16
 8005d40:	4630      	mov	r0, r6
 8005d42:	f000 f879 	bl	8005e38 <_printf_i>
 8005d46:	e7e4      	b.n	8005d12 <_vfiprintf_r+0x1e6>
 8005d48:	08006468 	.word	0x08006468
 8005d4c:	08006472 	.word	0x08006472
 8005d50:	00000000 	.word	0x00000000
 8005d54:	08005b07 	.word	0x08005b07
 8005d58:	0800646e 	.word	0x0800646e

08005d5c <_printf_common>:
 8005d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d60:	4616      	mov	r6, r2
 8005d62:	4698      	mov	r8, r3
 8005d64:	688a      	ldr	r2, [r1, #8]
 8005d66:	690b      	ldr	r3, [r1, #16]
 8005d68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	bfb8      	it	lt
 8005d70:	4613      	movlt	r3, r2
 8005d72:	6033      	str	r3, [r6, #0]
 8005d74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005d78:	4607      	mov	r7, r0
 8005d7a:	460c      	mov	r4, r1
 8005d7c:	b10a      	cbz	r2, 8005d82 <_printf_common+0x26>
 8005d7e:	3301      	adds	r3, #1
 8005d80:	6033      	str	r3, [r6, #0]
 8005d82:	6823      	ldr	r3, [r4, #0]
 8005d84:	0699      	lsls	r1, r3, #26
 8005d86:	bf42      	ittt	mi
 8005d88:	6833      	ldrmi	r3, [r6, #0]
 8005d8a:	3302      	addmi	r3, #2
 8005d8c:	6033      	strmi	r3, [r6, #0]
 8005d8e:	6825      	ldr	r5, [r4, #0]
 8005d90:	f015 0506 	ands.w	r5, r5, #6
 8005d94:	d106      	bne.n	8005da4 <_printf_common+0x48>
 8005d96:	f104 0a19 	add.w	sl, r4, #25
 8005d9a:	68e3      	ldr	r3, [r4, #12]
 8005d9c:	6832      	ldr	r2, [r6, #0]
 8005d9e:	1a9b      	subs	r3, r3, r2
 8005da0:	42ab      	cmp	r3, r5
 8005da2:	dc26      	bgt.n	8005df2 <_printf_common+0x96>
 8005da4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005da8:	6822      	ldr	r2, [r4, #0]
 8005daa:	3b00      	subs	r3, #0
 8005dac:	bf18      	it	ne
 8005dae:	2301      	movne	r3, #1
 8005db0:	0692      	lsls	r2, r2, #26
 8005db2:	d42b      	bmi.n	8005e0c <_printf_common+0xb0>
 8005db4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005db8:	4641      	mov	r1, r8
 8005dba:	4638      	mov	r0, r7
 8005dbc:	47c8      	blx	r9
 8005dbe:	3001      	adds	r0, #1
 8005dc0:	d01e      	beq.n	8005e00 <_printf_common+0xa4>
 8005dc2:	6823      	ldr	r3, [r4, #0]
 8005dc4:	6922      	ldr	r2, [r4, #16]
 8005dc6:	f003 0306 	and.w	r3, r3, #6
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	bf02      	ittt	eq
 8005dce:	68e5      	ldreq	r5, [r4, #12]
 8005dd0:	6833      	ldreq	r3, [r6, #0]
 8005dd2:	1aed      	subeq	r5, r5, r3
 8005dd4:	68a3      	ldr	r3, [r4, #8]
 8005dd6:	bf0c      	ite	eq
 8005dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005ddc:	2500      	movne	r5, #0
 8005dde:	4293      	cmp	r3, r2
 8005de0:	bfc4      	itt	gt
 8005de2:	1a9b      	subgt	r3, r3, r2
 8005de4:	18ed      	addgt	r5, r5, r3
 8005de6:	2600      	movs	r6, #0
 8005de8:	341a      	adds	r4, #26
 8005dea:	42b5      	cmp	r5, r6
 8005dec:	d11a      	bne.n	8005e24 <_printf_common+0xc8>
 8005dee:	2000      	movs	r0, #0
 8005df0:	e008      	b.n	8005e04 <_printf_common+0xa8>
 8005df2:	2301      	movs	r3, #1
 8005df4:	4652      	mov	r2, sl
 8005df6:	4641      	mov	r1, r8
 8005df8:	4638      	mov	r0, r7
 8005dfa:	47c8      	blx	r9
 8005dfc:	3001      	adds	r0, #1
 8005dfe:	d103      	bne.n	8005e08 <_printf_common+0xac>
 8005e00:	f04f 30ff 	mov.w	r0, #4294967295
 8005e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e08:	3501      	adds	r5, #1
 8005e0a:	e7c6      	b.n	8005d9a <_printf_common+0x3e>
 8005e0c:	18e1      	adds	r1, r4, r3
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	2030      	movs	r0, #48	@ 0x30
 8005e12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005e16:	4422      	add	r2, r4
 8005e18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005e1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005e20:	3302      	adds	r3, #2
 8005e22:	e7c7      	b.n	8005db4 <_printf_common+0x58>
 8005e24:	2301      	movs	r3, #1
 8005e26:	4622      	mov	r2, r4
 8005e28:	4641      	mov	r1, r8
 8005e2a:	4638      	mov	r0, r7
 8005e2c:	47c8      	blx	r9
 8005e2e:	3001      	adds	r0, #1
 8005e30:	d0e6      	beq.n	8005e00 <_printf_common+0xa4>
 8005e32:	3601      	adds	r6, #1
 8005e34:	e7d9      	b.n	8005dea <_printf_common+0x8e>
	...

08005e38 <_printf_i>:
 8005e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e3c:	7e0f      	ldrb	r7, [r1, #24]
 8005e3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005e40:	2f78      	cmp	r7, #120	@ 0x78
 8005e42:	4691      	mov	r9, r2
 8005e44:	4680      	mov	r8, r0
 8005e46:	460c      	mov	r4, r1
 8005e48:	469a      	mov	sl, r3
 8005e4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005e4e:	d807      	bhi.n	8005e60 <_printf_i+0x28>
 8005e50:	2f62      	cmp	r7, #98	@ 0x62
 8005e52:	d80a      	bhi.n	8005e6a <_printf_i+0x32>
 8005e54:	2f00      	cmp	r7, #0
 8005e56:	f000 80d1 	beq.w	8005ffc <_printf_i+0x1c4>
 8005e5a:	2f58      	cmp	r7, #88	@ 0x58
 8005e5c:	f000 80b8 	beq.w	8005fd0 <_printf_i+0x198>
 8005e60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005e64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005e68:	e03a      	b.n	8005ee0 <_printf_i+0xa8>
 8005e6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005e6e:	2b15      	cmp	r3, #21
 8005e70:	d8f6      	bhi.n	8005e60 <_printf_i+0x28>
 8005e72:	a101      	add	r1, pc, #4	@ (adr r1, 8005e78 <_printf_i+0x40>)
 8005e74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e78:	08005ed1 	.word	0x08005ed1
 8005e7c:	08005ee5 	.word	0x08005ee5
 8005e80:	08005e61 	.word	0x08005e61
 8005e84:	08005e61 	.word	0x08005e61
 8005e88:	08005e61 	.word	0x08005e61
 8005e8c:	08005e61 	.word	0x08005e61
 8005e90:	08005ee5 	.word	0x08005ee5
 8005e94:	08005e61 	.word	0x08005e61
 8005e98:	08005e61 	.word	0x08005e61
 8005e9c:	08005e61 	.word	0x08005e61
 8005ea0:	08005e61 	.word	0x08005e61
 8005ea4:	08005fe3 	.word	0x08005fe3
 8005ea8:	08005f0f 	.word	0x08005f0f
 8005eac:	08005f9d 	.word	0x08005f9d
 8005eb0:	08005e61 	.word	0x08005e61
 8005eb4:	08005e61 	.word	0x08005e61
 8005eb8:	08006005 	.word	0x08006005
 8005ebc:	08005e61 	.word	0x08005e61
 8005ec0:	08005f0f 	.word	0x08005f0f
 8005ec4:	08005e61 	.word	0x08005e61
 8005ec8:	08005e61 	.word	0x08005e61
 8005ecc:	08005fa5 	.word	0x08005fa5
 8005ed0:	6833      	ldr	r3, [r6, #0]
 8005ed2:	1d1a      	adds	r2, r3, #4
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6032      	str	r2, [r6, #0]
 8005ed8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005edc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ee0:	2301      	movs	r3, #1
 8005ee2:	e09c      	b.n	800601e <_printf_i+0x1e6>
 8005ee4:	6833      	ldr	r3, [r6, #0]
 8005ee6:	6820      	ldr	r0, [r4, #0]
 8005ee8:	1d19      	adds	r1, r3, #4
 8005eea:	6031      	str	r1, [r6, #0]
 8005eec:	0606      	lsls	r6, r0, #24
 8005eee:	d501      	bpl.n	8005ef4 <_printf_i+0xbc>
 8005ef0:	681d      	ldr	r5, [r3, #0]
 8005ef2:	e003      	b.n	8005efc <_printf_i+0xc4>
 8005ef4:	0645      	lsls	r5, r0, #25
 8005ef6:	d5fb      	bpl.n	8005ef0 <_printf_i+0xb8>
 8005ef8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005efc:	2d00      	cmp	r5, #0
 8005efe:	da03      	bge.n	8005f08 <_printf_i+0xd0>
 8005f00:	232d      	movs	r3, #45	@ 0x2d
 8005f02:	426d      	negs	r5, r5
 8005f04:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005f08:	4858      	ldr	r0, [pc, #352]	@ (800606c <_printf_i+0x234>)
 8005f0a:	230a      	movs	r3, #10
 8005f0c:	e011      	b.n	8005f32 <_printf_i+0xfa>
 8005f0e:	6821      	ldr	r1, [r4, #0]
 8005f10:	6833      	ldr	r3, [r6, #0]
 8005f12:	0608      	lsls	r0, r1, #24
 8005f14:	f853 5b04 	ldr.w	r5, [r3], #4
 8005f18:	d402      	bmi.n	8005f20 <_printf_i+0xe8>
 8005f1a:	0649      	lsls	r1, r1, #25
 8005f1c:	bf48      	it	mi
 8005f1e:	b2ad      	uxthmi	r5, r5
 8005f20:	2f6f      	cmp	r7, #111	@ 0x6f
 8005f22:	4852      	ldr	r0, [pc, #328]	@ (800606c <_printf_i+0x234>)
 8005f24:	6033      	str	r3, [r6, #0]
 8005f26:	bf14      	ite	ne
 8005f28:	230a      	movne	r3, #10
 8005f2a:	2308      	moveq	r3, #8
 8005f2c:	2100      	movs	r1, #0
 8005f2e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005f32:	6866      	ldr	r6, [r4, #4]
 8005f34:	60a6      	str	r6, [r4, #8]
 8005f36:	2e00      	cmp	r6, #0
 8005f38:	db05      	blt.n	8005f46 <_printf_i+0x10e>
 8005f3a:	6821      	ldr	r1, [r4, #0]
 8005f3c:	432e      	orrs	r6, r5
 8005f3e:	f021 0104 	bic.w	r1, r1, #4
 8005f42:	6021      	str	r1, [r4, #0]
 8005f44:	d04b      	beq.n	8005fde <_printf_i+0x1a6>
 8005f46:	4616      	mov	r6, r2
 8005f48:	fbb5 f1f3 	udiv	r1, r5, r3
 8005f4c:	fb03 5711 	mls	r7, r3, r1, r5
 8005f50:	5dc7      	ldrb	r7, [r0, r7]
 8005f52:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005f56:	462f      	mov	r7, r5
 8005f58:	42bb      	cmp	r3, r7
 8005f5a:	460d      	mov	r5, r1
 8005f5c:	d9f4      	bls.n	8005f48 <_printf_i+0x110>
 8005f5e:	2b08      	cmp	r3, #8
 8005f60:	d10b      	bne.n	8005f7a <_printf_i+0x142>
 8005f62:	6823      	ldr	r3, [r4, #0]
 8005f64:	07df      	lsls	r7, r3, #31
 8005f66:	d508      	bpl.n	8005f7a <_printf_i+0x142>
 8005f68:	6923      	ldr	r3, [r4, #16]
 8005f6a:	6861      	ldr	r1, [r4, #4]
 8005f6c:	4299      	cmp	r1, r3
 8005f6e:	bfde      	ittt	le
 8005f70:	2330      	movle	r3, #48	@ 0x30
 8005f72:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005f76:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005f7a:	1b92      	subs	r2, r2, r6
 8005f7c:	6122      	str	r2, [r4, #16]
 8005f7e:	f8cd a000 	str.w	sl, [sp]
 8005f82:	464b      	mov	r3, r9
 8005f84:	aa03      	add	r2, sp, #12
 8005f86:	4621      	mov	r1, r4
 8005f88:	4640      	mov	r0, r8
 8005f8a:	f7ff fee7 	bl	8005d5c <_printf_common>
 8005f8e:	3001      	adds	r0, #1
 8005f90:	d14a      	bne.n	8006028 <_printf_i+0x1f0>
 8005f92:	f04f 30ff 	mov.w	r0, #4294967295
 8005f96:	b004      	add	sp, #16
 8005f98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f9c:	6823      	ldr	r3, [r4, #0]
 8005f9e:	f043 0320 	orr.w	r3, r3, #32
 8005fa2:	6023      	str	r3, [r4, #0]
 8005fa4:	4832      	ldr	r0, [pc, #200]	@ (8006070 <_printf_i+0x238>)
 8005fa6:	2778      	movs	r7, #120	@ 0x78
 8005fa8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005fac:	6823      	ldr	r3, [r4, #0]
 8005fae:	6831      	ldr	r1, [r6, #0]
 8005fb0:	061f      	lsls	r7, r3, #24
 8005fb2:	f851 5b04 	ldr.w	r5, [r1], #4
 8005fb6:	d402      	bmi.n	8005fbe <_printf_i+0x186>
 8005fb8:	065f      	lsls	r7, r3, #25
 8005fba:	bf48      	it	mi
 8005fbc:	b2ad      	uxthmi	r5, r5
 8005fbe:	6031      	str	r1, [r6, #0]
 8005fc0:	07d9      	lsls	r1, r3, #31
 8005fc2:	bf44      	itt	mi
 8005fc4:	f043 0320 	orrmi.w	r3, r3, #32
 8005fc8:	6023      	strmi	r3, [r4, #0]
 8005fca:	b11d      	cbz	r5, 8005fd4 <_printf_i+0x19c>
 8005fcc:	2310      	movs	r3, #16
 8005fce:	e7ad      	b.n	8005f2c <_printf_i+0xf4>
 8005fd0:	4826      	ldr	r0, [pc, #152]	@ (800606c <_printf_i+0x234>)
 8005fd2:	e7e9      	b.n	8005fa8 <_printf_i+0x170>
 8005fd4:	6823      	ldr	r3, [r4, #0]
 8005fd6:	f023 0320 	bic.w	r3, r3, #32
 8005fda:	6023      	str	r3, [r4, #0]
 8005fdc:	e7f6      	b.n	8005fcc <_printf_i+0x194>
 8005fde:	4616      	mov	r6, r2
 8005fe0:	e7bd      	b.n	8005f5e <_printf_i+0x126>
 8005fe2:	6833      	ldr	r3, [r6, #0]
 8005fe4:	6825      	ldr	r5, [r4, #0]
 8005fe6:	6961      	ldr	r1, [r4, #20]
 8005fe8:	1d18      	adds	r0, r3, #4
 8005fea:	6030      	str	r0, [r6, #0]
 8005fec:	062e      	lsls	r6, r5, #24
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	d501      	bpl.n	8005ff6 <_printf_i+0x1be>
 8005ff2:	6019      	str	r1, [r3, #0]
 8005ff4:	e002      	b.n	8005ffc <_printf_i+0x1c4>
 8005ff6:	0668      	lsls	r0, r5, #25
 8005ff8:	d5fb      	bpl.n	8005ff2 <_printf_i+0x1ba>
 8005ffa:	8019      	strh	r1, [r3, #0]
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	6123      	str	r3, [r4, #16]
 8006000:	4616      	mov	r6, r2
 8006002:	e7bc      	b.n	8005f7e <_printf_i+0x146>
 8006004:	6833      	ldr	r3, [r6, #0]
 8006006:	1d1a      	adds	r2, r3, #4
 8006008:	6032      	str	r2, [r6, #0]
 800600a:	681e      	ldr	r6, [r3, #0]
 800600c:	6862      	ldr	r2, [r4, #4]
 800600e:	2100      	movs	r1, #0
 8006010:	4630      	mov	r0, r6
 8006012:	f7fa f965 	bl	80002e0 <memchr>
 8006016:	b108      	cbz	r0, 800601c <_printf_i+0x1e4>
 8006018:	1b80      	subs	r0, r0, r6
 800601a:	6060      	str	r0, [r4, #4]
 800601c:	6863      	ldr	r3, [r4, #4]
 800601e:	6123      	str	r3, [r4, #16]
 8006020:	2300      	movs	r3, #0
 8006022:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006026:	e7aa      	b.n	8005f7e <_printf_i+0x146>
 8006028:	6923      	ldr	r3, [r4, #16]
 800602a:	4632      	mov	r2, r6
 800602c:	4649      	mov	r1, r9
 800602e:	4640      	mov	r0, r8
 8006030:	47d0      	blx	sl
 8006032:	3001      	adds	r0, #1
 8006034:	d0ad      	beq.n	8005f92 <_printf_i+0x15a>
 8006036:	6823      	ldr	r3, [r4, #0]
 8006038:	079b      	lsls	r3, r3, #30
 800603a:	d413      	bmi.n	8006064 <_printf_i+0x22c>
 800603c:	68e0      	ldr	r0, [r4, #12]
 800603e:	9b03      	ldr	r3, [sp, #12]
 8006040:	4298      	cmp	r0, r3
 8006042:	bfb8      	it	lt
 8006044:	4618      	movlt	r0, r3
 8006046:	e7a6      	b.n	8005f96 <_printf_i+0x15e>
 8006048:	2301      	movs	r3, #1
 800604a:	4632      	mov	r2, r6
 800604c:	4649      	mov	r1, r9
 800604e:	4640      	mov	r0, r8
 8006050:	47d0      	blx	sl
 8006052:	3001      	adds	r0, #1
 8006054:	d09d      	beq.n	8005f92 <_printf_i+0x15a>
 8006056:	3501      	adds	r5, #1
 8006058:	68e3      	ldr	r3, [r4, #12]
 800605a:	9903      	ldr	r1, [sp, #12]
 800605c:	1a5b      	subs	r3, r3, r1
 800605e:	42ab      	cmp	r3, r5
 8006060:	dcf2      	bgt.n	8006048 <_printf_i+0x210>
 8006062:	e7eb      	b.n	800603c <_printf_i+0x204>
 8006064:	2500      	movs	r5, #0
 8006066:	f104 0619 	add.w	r6, r4, #25
 800606a:	e7f5      	b.n	8006058 <_printf_i+0x220>
 800606c:	08006479 	.word	0x08006479
 8006070:	0800648a 	.word	0x0800648a

08006074 <__sflush_r>:
 8006074:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800607c:	0716      	lsls	r6, r2, #28
 800607e:	4605      	mov	r5, r0
 8006080:	460c      	mov	r4, r1
 8006082:	d454      	bmi.n	800612e <__sflush_r+0xba>
 8006084:	684b      	ldr	r3, [r1, #4]
 8006086:	2b00      	cmp	r3, #0
 8006088:	dc02      	bgt.n	8006090 <__sflush_r+0x1c>
 800608a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800608c:	2b00      	cmp	r3, #0
 800608e:	dd48      	ble.n	8006122 <__sflush_r+0xae>
 8006090:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006092:	2e00      	cmp	r6, #0
 8006094:	d045      	beq.n	8006122 <__sflush_r+0xae>
 8006096:	2300      	movs	r3, #0
 8006098:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800609c:	682f      	ldr	r7, [r5, #0]
 800609e:	6a21      	ldr	r1, [r4, #32]
 80060a0:	602b      	str	r3, [r5, #0]
 80060a2:	d030      	beq.n	8006106 <__sflush_r+0x92>
 80060a4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80060a6:	89a3      	ldrh	r3, [r4, #12]
 80060a8:	0759      	lsls	r1, r3, #29
 80060aa:	d505      	bpl.n	80060b8 <__sflush_r+0x44>
 80060ac:	6863      	ldr	r3, [r4, #4]
 80060ae:	1ad2      	subs	r2, r2, r3
 80060b0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80060b2:	b10b      	cbz	r3, 80060b8 <__sflush_r+0x44>
 80060b4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80060b6:	1ad2      	subs	r2, r2, r3
 80060b8:	2300      	movs	r3, #0
 80060ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80060bc:	6a21      	ldr	r1, [r4, #32]
 80060be:	4628      	mov	r0, r5
 80060c0:	47b0      	blx	r6
 80060c2:	1c43      	adds	r3, r0, #1
 80060c4:	89a3      	ldrh	r3, [r4, #12]
 80060c6:	d106      	bne.n	80060d6 <__sflush_r+0x62>
 80060c8:	6829      	ldr	r1, [r5, #0]
 80060ca:	291d      	cmp	r1, #29
 80060cc:	d82b      	bhi.n	8006126 <__sflush_r+0xb2>
 80060ce:	4a2a      	ldr	r2, [pc, #168]	@ (8006178 <__sflush_r+0x104>)
 80060d0:	40ca      	lsrs	r2, r1
 80060d2:	07d6      	lsls	r6, r2, #31
 80060d4:	d527      	bpl.n	8006126 <__sflush_r+0xb2>
 80060d6:	2200      	movs	r2, #0
 80060d8:	6062      	str	r2, [r4, #4]
 80060da:	04d9      	lsls	r1, r3, #19
 80060dc:	6922      	ldr	r2, [r4, #16]
 80060de:	6022      	str	r2, [r4, #0]
 80060e0:	d504      	bpl.n	80060ec <__sflush_r+0x78>
 80060e2:	1c42      	adds	r2, r0, #1
 80060e4:	d101      	bne.n	80060ea <__sflush_r+0x76>
 80060e6:	682b      	ldr	r3, [r5, #0]
 80060e8:	b903      	cbnz	r3, 80060ec <__sflush_r+0x78>
 80060ea:	6560      	str	r0, [r4, #84]	@ 0x54
 80060ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80060ee:	602f      	str	r7, [r5, #0]
 80060f0:	b1b9      	cbz	r1, 8006122 <__sflush_r+0xae>
 80060f2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80060f6:	4299      	cmp	r1, r3
 80060f8:	d002      	beq.n	8006100 <__sflush_r+0x8c>
 80060fa:	4628      	mov	r0, r5
 80060fc:	f7ff fbf4 	bl	80058e8 <_free_r>
 8006100:	2300      	movs	r3, #0
 8006102:	6363      	str	r3, [r4, #52]	@ 0x34
 8006104:	e00d      	b.n	8006122 <__sflush_r+0xae>
 8006106:	2301      	movs	r3, #1
 8006108:	4628      	mov	r0, r5
 800610a:	47b0      	blx	r6
 800610c:	4602      	mov	r2, r0
 800610e:	1c50      	adds	r0, r2, #1
 8006110:	d1c9      	bne.n	80060a6 <__sflush_r+0x32>
 8006112:	682b      	ldr	r3, [r5, #0]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d0c6      	beq.n	80060a6 <__sflush_r+0x32>
 8006118:	2b1d      	cmp	r3, #29
 800611a:	d001      	beq.n	8006120 <__sflush_r+0xac>
 800611c:	2b16      	cmp	r3, #22
 800611e:	d11e      	bne.n	800615e <__sflush_r+0xea>
 8006120:	602f      	str	r7, [r5, #0]
 8006122:	2000      	movs	r0, #0
 8006124:	e022      	b.n	800616c <__sflush_r+0xf8>
 8006126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800612a:	b21b      	sxth	r3, r3
 800612c:	e01b      	b.n	8006166 <__sflush_r+0xf2>
 800612e:	690f      	ldr	r7, [r1, #16]
 8006130:	2f00      	cmp	r7, #0
 8006132:	d0f6      	beq.n	8006122 <__sflush_r+0xae>
 8006134:	0793      	lsls	r3, r2, #30
 8006136:	680e      	ldr	r6, [r1, #0]
 8006138:	bf08      	it	eq
 800613a:	694b      	ldreq	r3, [r1, #20]
 800613c:	600f      	str	r7, [r1, #0]
 800613e:	bf18      	it	ne
 8006140:	2300      	movne	r3, #0
 8006142:	eba6 0807 	sub.w	r8, r6, r7
 8006146:	608b      	str	r3, [r1, #8]
 8006148:	f1b8 0f00 	cmp.w	r8, #0
 800614c:	dde9      	ble.n	8006122 <__sflush_r+0xae>
 800614e:	6a21      	ldr	r1, [r4, #32]
 8006150:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8006152:	4643      	mov	r3, r8
 8006154:	463a      	mov	r2, r7
 8006156:	4628      	mov	r0, r5
 8006158:	47b0      	blx	r6
 800615a:	2800      	cmp	r0, #0
 800615c:	dc08      	bgt.n	8006170 <__sflush_r+0xfc>
 800615e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006162:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006166:	81a3      	strh	r3, [r4, #12]
 8006168:	f04f 30ff 	mov.w	r0, #4294967295
 800616c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006170:	4407      	add	r7, r0
 8006172:	eba8 0800 	sub.w	r8, r8, r0
 8006176:	e7e7      	b.n	8006148 <__sflush_r+0xd4>
 8006178:	20400001 	.word	0x20400001

0800617c <_fflush_r>:
 800617c:	b538      	push	{r3, r4, r5, lr}
 800617e:	690b      	ldr	r3, [r1, #16]
 8006180:	4605      	mov	r5, r0
 8006182:	460c      	mov	r4, r1
 8006184:	b913      	cbnz	r3, 800618c <_fflush_r+0x10>
 8006186:	2500      	movs	r5, #0
 8006188:	4628      	mov	r0, r5
 800618a:	bd38      	pop	{r3, r4, r5, pc}
 800618c:	b118      	cbz	r0, 8006196 <_fflush_r+0x1a>
 800618e:	6a03      	ldr	r3, [r0, #32]
 8006190:	b90b      	cbnz	r3, 8006196 <_fflush_r+0x1a>
 8006192:	f7ff faa1 	bl	80056d8 <__sinit>
 8006196:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d0f3      	beq.n	8006186 <_fflush_r+0xa>
 800619e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80061a0:	07d0      	lsls	r0, r2, #31
 80061a2:	d404      	bmi.n	80061ae <_fflush_r+0x32>
 80061a4:	0599      	lsls	r1, r3, #22
 80061a6:	d402      	bmi.n	80061ae <_fflush_r+0x32>
 80061a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061aa:	f7ff fb9a 	bl	80058e2 <__retarget_lock_acquire_recursive>
 80061ae:	4628      	mov	r0, r5
 80061b0:	4621      	mov	r1, r4
 80061b2:	f7ff ff5f 	bl	8006074 <__sflush_r>
 80061b6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80061b8:	07da      	lsls	r2, r3, #31
 80061ba:	4605      	mov	r5, r0
 80061bc:	d4e4      	bmi.n	8006188 <_fflush_r+0xc>
 80061be:	89a3      	ldrh	r3, [r4, #12]
 80061c0:	059b      	lsls	r3, r3, #22
 80061c2:	d4e1      	bmi.n	8006188 <_fflush_r+0xc>
 80061c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80061c6:	f7ff fb8d 	bl	80058e4 <__retarget_lock_release_recursive>
 80061ca:	e7dd      	b.n	8006188 <_fflush_r+0xc>

080061cc <__swbuf_r>:
 80061cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ce:	460e      	mov	r6, r1
 80061d0:	4614      	mov	r4, r2
 80061d2:	4605      	mov	r5, r0
 80061d4:	b118      	cbz	r0, 80061de <__swbuf_r+0x12>
 80061d6:	6a03      	ldr	r3, [r0, #32]
 80061d8:	b90b      	cbnz	r3, 80061de <__swbuf_r+0x12>
 80061da:	f7ff fa7d 	bl	80056d8 <__sinit>
 80061de:	69a3      	ldr	r3, [r4, #24]
 80061e0:	60a3      	str	r3, [r4, #8]
 80061e2:	89a3      	ldrh	r3, [r4, #12]
 80061e4:	071a      	lsls	r2, r3, #28
 80061e6:	d501      	bpl.n	80061ec <__swbuf_r+0x20>
 80061e8:	6923      	ldr	r3, [r4, #16]
 80061ea:	b943      	cbnz	r3, 80061fe <__swbuf_r+0x32>
 80061ec:	4621      	mov	r1, r4
 80061ee:	4628      	mov	r0, r5
 80061f0:	f000 f82a 	bl	8006248 <__swsetup_r>
 80061f4:	b118      	cbz	r0, 80061fe <__swbuf_r+0x32>
 80061f6:	f04f 37ff 	mov.w	r7, #4294967295
 80061fa:	4638      	mov	r0, r7
 80061fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80061fe:	6823      	ldr	r3, [r4, #0]
 8006200:	6922      	ldr	r2, [r4, #16]
 8006202:	1a98      	subs	r0, r3, r2
 8006204:	6963      	ldr	r3, [r4, #20]
 8006206:	b2f6      	uxtb	r6, r6
 8006208:	4283      	cmp	r3, r0
 800620a:	4637      	mov	r7, r6
 800620c:	dc05      	bgt.n	800621a <__swbuf_r+0x4e>
 800620e:	4621      	mov	r1, r4
 8006210:	4628      	mov	r0, r5
 8006212:	f7ff ffb3 	bl	800617c <_fflush_r>
 8006216:	2800      	cmp	r0, #0
 8006218:	d1ed      	bne.n	80061f6 <__swbuf_r+0x2a>
 800621a:	68a3      	ldr	r3, [r4, #8]
 800621c:	3b01      	subs	r3, #1
 800621e:	60a3      	str	r3, [r4, #8]
 8006220:	6823      	ldr	r3, [r4, #0]
 8006222:	1c5a      	adds	r2, r3, #1
 8006224:	6022      	str	r2, [r4, #0]
 8006226:	701e      	strb	r6, [r3, #0]
 8006228:	6962      	ldr	r2, [r4, #20]
 800622a:	1c43      	adds	r3, r0, #1
 800622c:	429a      	cmp	r2, r3
 800622e:	d004      	beq.n	800623a <__swbuf_r+0x6e>
 8006230:	89a3      	ldrh	r3, [r4, #12]
 8006232:	07db      	lsls	r3, r3, #31
 8006234:	d5e1      	bpl.n	80061fa <__swbuf_r+0x2e>
 8006236:	2e0a      	cmp	r6, #10
 8006238:	d1df      	bne.n	80061fa <__swbuf_r+0x2e>
 800623a:	4621      	mov	r1, r4
 800623c:	4628      	mov	r0, r5
 800623e:	f7ff ff9d 	bl	800617c <_fflush_r>
 8006242:	2800      	cmp	r0, #0
 8006244:	d0d9      	beq.n	80061fa <__swbuf_r+0x2e>
 8006246:	e7d6      	b.n	80061f6 <__swbuf_r+0x2a>

08006248 <__swsetup_r>:
 8006248:	b538      	push	{r3, r4, r5, lr}
 800624a:	4b29      	ldr	r3, [pc, #164]	@ (80062f0 <__swsetup_r+0xa8>)
 800624c:	4605      	mov	r5, r0
 800624e:	6818      	ldr	r0, [r3, #0]
 8006250:	460c      	mov	r4, r1
 8006252:	b118      	cbz	r0, 800625c <__swsetup_r+0x14>
 8006254:	6a03      	ldr	r3, [r0, #32]
 8006256:	b90b      	cbnz	r3, 800625c <__swsetup_r+0x14>
 8006258:	f7ff fa3e 	bl	80056d8 <__sinit>
 800625c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006260:	0719      	lsls	r1, r3, #28
 8006262:	d422      	bmi.n	80062aa <__swsetup_r+0x62>
 8006264:	06da      	lsls	r2, r3, #27
 8006266:	d407      	bmi.n	8006278 <__swsetup_r+0x30>
 8006268:	2209      	movs	r2, #9
 800626a:	602a      	str	r2, [r5, #0]
 800626c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006270:	81a3      	strh	r3, [r4, #12]
 8006272:	f04f 30ff 	mov.w	r0, #4294967295
 8006276:	e033      	b.n	80062e0 <__swsetup_r+0x98>
 8006278:	0758      	lsls	r0, r3, #29
 800627a:	d512      	bpl.n	80062a2 <__swsetup_r+0x5a>
 800627c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800627e:	b141      	cbz	r1, 8006292 <__swsetup_r+0x4a>
 8006280:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006284:	4299      	cmp	r1, r3
 8006286:	d002      	beq.n	800628e <__swsetup_r+0x46>
 8006288:	4628      	mov	r0, r5
 800628a:	f7ff fb2d 	bl	80058e8 <_free_r>
 800628e:	2300      	movs	r3, #0
 8006290:	6363      	str	r3, [r4, #52]	@ 0x34
 8006292:	89a3      	ldrh	r3, [r4, #12]
 8006294:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006298:	81a3      	strh	r3, [r4, #12]
 800629a:	2300      	movs	r3, #0
 800629c:	6063      	str	r3, [r4, #4]
 800629e:	6923      	ldr	r3, [r4, #16]
 80062a0:	6023      	str	r3, [r4, #0]
 80062a2:	89a3      	ldrh	r3, [r4, #12]
 80062a4:	f043 0308 	orr.w	r3, r3, #8
 80062a8:	81a3      	strh	r3, [r4, #12]
 80062aa:	6923      	ldr	r3, [r4, #16]
 80062ac:	b94b      	cbnz	r3, 80062c2 <__swsetup_r+0x7a>
 80062ae:	89a3      	ldrh	r3, [r4, #12]
 80062b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80062b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80062b8:	d003      	beq.n	80062c2 <__swsetup_r+0x7a>
 80062ba:	4621      	mov	r1, r4
 80062bc:	4628      	mov	r0, r5
 80062be:	f000 f84f 	bl	8006360 <__smakebuf_r>
 80062c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80062c6:	f013 0201 	ands.w	r2, r3, #1
 80062ca:	d00a      	beq.n	80062e2 <__swsetup_r+0x9a>
 80062cc:	2200      	movs	r2, #0
 80062ce:	60a2      	str	r2, [r4, #8]
 80062d0:	6962      	ldr	r2, [r4, #20]
 80062d2:	4252      	negs	r2, r2
 80062d4:	61a2      	str	r2, [r4, #24]
 80062d6:	6922      	ldr	r2, [r4, #16]
 80062d8:	b942      	cbnz	r2, 80062ec <__swsetup_r+0xa4>
 80062da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80062de:	d1c5      	bne.n	800626c <__swsetup_r+0x24>
 80062e0:	bd38      	pop	{r3, r4, r5, pc}
 80062e2:	0799      	lsls	r1, r3, #30
 80062e4:	bf58      	it	pl
 80062e6:	6962      	ldrpl	r2, [r4, #20]
 80062e8:	60a2      	str	r2, [r4, #8]
 80062ea:	e7f4      	b.n	80062d6 <__swsetup_r+0x8e>
 80062ec:	2000      	movs	r0, #0
 80062ee:	e7f7      	b.n	80062e0 <__swsetup_r+0x98>
 80062f0:	24000020 	.word	0x24000020

080062f4 <_sbrk_r>:
 80062f4:	b538      	push	{r3, r4, r5, lr}
 80062f6:	4d06      	ldr	r5, [pc, #24]	@ (8006310 <_sbrk_r+0x1c>)
 80062f8:	2300      	movs	r3, #0
 80062fa:	4604      	mov	r4, r0
 80062fc:	4608      	mov	r0, r1
 80062fe:	602b      	str	r3, [r5, #0]
 8006300:	f7fa febc 	bl	800107c <_sbrk>
 8006304:	1c43      	adds	r3, r0, #1
 8006306:	d102      	bne.n	800630e <_sbrk_r+0x1a>
 8006308:	682b      	ldr	r3, [r5, #0]
 800630a:	b103      	cbz	r3, 800630e <_sbrk_r+0x1a>
 800630c:	6023      	str	r3, [r4, #0]
 800630e:	bd38      	pop	{r3, r4, r5, pc}
 8006310:	24000310 	.word	0x24000310

08006314 <__swhatbuf_r>:
 8006314:	b570      	push	{r4, r5, r6, lr}
 8006316:	460c      	mov	r4, r1
 8006318:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800631c:	2900      	cmp	r1, #0
 800631e:	b096      	sub	sp, #88	@ 0x58
 8006320:	4615      	mov	r5, r2
 8006322:	461e      	mov	r6, r3
 8006324:	da0d      	bge.n	8006342 <__swhatbuf_r+0x2e>
 8006326:	89a3      	ldrh	r3, [r4, #12]
 8006328:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800632c:	f04f 0100 	mov.w	r1, #0
 8006330:	bf14      	ite	ne
 8006332:	2340      	movne	r3, #64	@ 0x40
 8006334:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006338:	2000      	movs	r0, #0
 800633a:	6031      	str	r1, [r6, #0]
 800633c:	602b      	str	r3, [r5, #0]
 800633e:	b016      	add	sp, #88	@ 0x58
 8006340:	bd70      	pop	{r4, r5, r6, pc}
 8006342:	466a      	mov	r2, sp
 8006344:	f000 f848 	bl	80063d8 <_fstat_r>
 8006348:	2800      	cmp	r0, #0
 800634a:	dbec      	blt.n	8006326 <__swhatbuf_r+0x12>
 800634c:	9901      	ldr	r1, [sp, #4]
 800634e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006352:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006356:	4259      	negs	r1, r3
 8006358:	4159      	adcs	r1, r3
 800635a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800635e:	e7eb      	b.n	8006338 <__swhatbuf_r+0x24>

08006360 <__smakebuf_r>:
 8006360:	898b      	ldrh	r3, [r1, #12]
 8006362:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006364:	079d      	lsls	r5, r3, #30
 8006366:	4606      	mov	r6, r0
 8006368:	460c      	mov	r4, r1
 800636a:	d507      	bpl.n	800637c <__smakebuf_r+0x1c>
 800636c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	6123      	str	r3, [r4, #16]
 8006374:	2301      	movs	r3, #1
 8006376:	6163      	str	r3, [r4, #20]
 8006378:	b003      	add	sp, #12
 800637a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800637c:	ab01      	add	r3, sp, #4
 800637e:	466a      	mov	r2, sp
 8006380:	f7ff ffc8 	bl	8006314 <__swhatbuf_r>
 8006384:	9f00      	ldr	r7, [sp, #0]
 8006386:	4605      	mov	r5, r0
 8006388:	4639      	mov	r1, r7
 800638a:	4630      	mov	r0, r6
 800638c:	f7ff fb18 	bl	80059c0 <_malloc_r>
 8006390:	b948      	cbnz	r0, 80063a6 <__smakebuf_r+0x46>
 8006392:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006396:	059a      	lsls	r2, r3, #22
 8006398:	d4ee      	bmi.n	8006378 <__smakebuf_r+0x18>
 800639a:	f023 0303 	bic.w	r3, r3, #3
 800639e:	f043 0302 	orr.w	r3, r3, #2
 80063a2:	81a3      	strh	r3, [r4, #12]
 80063a4:	e7e2      	b.n	800636c <__smakebuf_r+0xc>
 80063a6:	89a3      	ldrh	r3, [r4, #12]
 80063a8:	6020      	str	r0, [r4, #0]
 80063aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80063ae:	81a3      	strh	r3, [r4, #12]
 80063b0:	9b01      	ldr	r3, [sp, #4]
 80063b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80063b6:	b15b      	cbz	r3, 80063d0 <__smakebuf_r+0x70>
 80063b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063bc:	4630      	mov	r0, r6
 80063be:	f000 f81d 	bl	80063fc <_isatty_r>
 80063c2:	b128      	cbz	r0, 80063d0 <__smakebuf_r+0x70>
 80063c4:	89a3      	ldrh	r3, [r4, #12]
 80063c6:	f023 0303 	bic.w	r3, r3, #3
 80063ca:	f043 0301 	orr.w	r3, r3, #1
 80063ce:	81a3      	strh	r3, [r4, #12]
 80063d0:	89a3      	ldrh	r3, [r4, #12]
 80063d2:	431d      	orrs	r5, r3
 80063d4:	81a5      	strh	r5, [r4, #12]
 80063d6:	e7cf      	b.n	8006378 <__smakebuf_r+0x18>

080063d8 <_fstat_r>:
 80063d8:	b538      	push	{r3, r4, r5, lr}
 80063da:	4d07      	ldr	r5, [pc, #28]	@ (80063f8 <_fstat_r+0x20>)
 80063dc:	2300      	movs	r3, #0
 80063de:	4604      	mov	r4, r0
 80063e0:	4608      	mov	r0, r1
 80063e2:	4611      	mov	r1, r2
 80063e4:	602b      	str	r3, [r5, #0]
 80063e6:	f7fa fe21 	bl	800102c <_fstat>
 80063ea:	1c43      	adds	r3, r0, #1
 80063ec:	d102      	bne.n	80063f4 <_fstat_r+0x1c>
 80063ee:	682b      	ldr	r3, [r5, #0]
 80063f0:	b103      	cbz	r3, 80063f4 <_fstat_r+0x1c>
 80063f2:	6023      	str	r3, [r4, #0]
 80063f4:	bd38      	pop	{r3, r4, r5, pc}
 80063f6:	bf00      	nop
 80063f8:	24000310 	.word	0x24000310

080063fc <_isatty_r>:
 80063fc:	b538      	push	{r3, r4, r5, lr}
 80063fe:	4d06      	ldr	r5, [pc, #24]	@ (8006418 <_isatty_r+0x1c>)
 8006400:	2300      	movs	r3, #0
 8006402:	4604      	mov	r4, r0
 8006404:	4608      	mov	r0, r1
 8006406:	602b      	str	r3, [r5, #0]
 8006408:	f7fa fe20 	bl	800104c <_isatty>
 800640c:	1c43      	adds	r3, r0, #1
 800640e:	d102      	bne.n	8006416 <_isatty_r+0x1a>
 8006410:	682b      	ldr	r3, [r5, #0]
 8006412:	b103      	cbz	r3, 8006416 <_isatty_r+0x1a>
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	bd38      	pop	{r3, r4, r5, pc}
 8006418:	24000310 	.word	0x24000310

0800641c <_init>:
 800641c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800641e:	bf00      	nop
 8006420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006422:	bc08      	pop	{r3}
 8006424:	469e      	mov	lr, r3
 8006426:	4770      	bx	lr

08006428 <_fini>:
 8006428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800642a:	bf00      	nop
 800642c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800642e:	bc08      	pop	{r3}
 8006430:	469e      	mov	lr, r3
 8006432:	4770      	bx	lr
