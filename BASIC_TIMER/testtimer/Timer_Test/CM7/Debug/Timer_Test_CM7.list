
Timer_Test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d90  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08006030  08006030  00007030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006098  08006098  00008070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006098  08006098  00007098  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060a0  080060a0  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060a0  080060a0  000070a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080060a4  080060a4  000070a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  24000000  080060a8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  24000070  08006118  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  240002d4  08006118  000082d4  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015305  00000000  00000000  0000809e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002668  00000000  00000000  0001d3a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001150  00000000  00000000  0001fa10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d79  00000000  00000000  00020b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b9d6  00000000  00000000  000218d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015ba3  00000000  00000000  0005d2af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00189fc3  00000000  00000000  00072e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001fce15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050cc  00000000  00000000  001fce58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00201f24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08006018 	.word	0x08006018

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	08006018 	.word	0x08006018

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b0:	4b49      	ldr	r3, [pc, #292]	@ (80007d8 <SystemInit+0x12c>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006b6:	4a48      	ldr	r2, [pc, #288]	@ (80007d8 <SystemInit+0x12c>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006c0:	4b45      	ldr	r3, [pc, #276]	@ (80007d8 <SystemInit+0x12c>)
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	4a44      	ldr	r2, [pc, #272]	@ (80007d8 <SystemInit+0x12c>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006cc:	4b43      	ldr	r3, [pc, #268]	@ (80007dc <SystemInit+0x130>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	d807      	bhi.n	80006e8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d8:	4b40      	ldr	r3, [pc, #256]	@ (80007dc <SystemInit+0x130>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f023 030f 	bic.w	r3, r3, #15
 80006e0:	4a3e      	ldr	r2, [pc, #248]	@ (80007dc <SystemInit+0x130>)
 80006e2:	f043 0307 	orr.w	r3, r3, #7
 80006e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006e8:	4b3d      	ldr	r3, [pc, #244]	@ (80007e0 <SystemInit+0x134>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a3c      	ldr	r2, [pc, #240]	@ (80007e0 <SystemInit+0x134>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f4:	4b3a      	ldr	r3, [pc, #232]	@ (80007e0 <SystemInit+0x134>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006fa:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <SystemInit+0x134>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4938      	ldr	r1, [pc, #224]	@ (80007e0 <SystemInit+0x134>)
 8000700:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <SystemInit+0x138>)
 8000702:	4013      	ands	r3, r2
 8000704:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000706:	4b35      	ldr	r3, [pc, #212]	@ (80007dc <SystemInit+0x130>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	2b00      	cmp	r3, #0
 8000710:	d007      	beq.n	8000722 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000712:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <SystemInit+0x130>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f023 030f 	bic.w	r3, r3, #15
 800071a:	4a30      	ldr	r2, [pc, #192]	@ (80007dc <SystemInit+0x130>)
 800071c:	f043 0307 	orr.w	r3, r3, #7
 8000720:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000722:	4b2f      	ldr	r3, [pc, #188]	@ (80007e0 <SystemInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000728:	4b2d      	ldr	r3, [pc, #180]	@ (80007e0 <SystemInit+0x134>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800072e:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <SystemInit+0x134>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000734:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <SystemInit+0x134>)
 8000736:	4a2c      	ldr	r2, [pc, #176]	@ (80007e8 <SystemInit+0x13c>)
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800073a:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <SystemInit+0x134>)
 800073c:	4a2b      	ldr	r2, [pc, #172]	@ (80007ec <SystemInit+0x140>)
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000740:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <SystemInit+0x134>)
 8000742:	4a2b      	ldr	r2, [pc, #172]	@ (80007f0 <SystemInit+0x144>)
 8000744:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <SystemInit+0x134>)
 8000748:	2200      	movs	r2, #0
 800074a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800074c:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <SystemInit+0x134>)
 800074e:	4a28      	ldr	r2, [pc, #160]	@ (80007f0 <SystemInit+0x144>)
 8000750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000752:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <SystemInit+0x134>)
 8000754:	2200      	movs	r2, #0
 8000756:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000758:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <SystemInit+0x134>)
 800075a:	4a25      	ldr	r2, [pc, #148]	@ (80007f0 <SystemInit+0x144>)
 800075c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800075e:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <SystemInit+0x134>)
 8000760:	2200      	movs	r2, #0
 8000762:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <SystemInit+0x134>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1d      	ldr	r2, [pc, #116]	@ (80007e0 <SystemInit+0x134>)
 800076a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <SystemInit+0x134>)
 8000772:	2200      	movs	r2, #0
 8000774:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000776:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <SystemInit+0x148>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800077a:	4a1e      	ldr	r2, [pc, #120]	@ (80007f4 <SystemInit+0x148>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000780:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000782:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <SystemInit+0x14c>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <SystemInit+0x150>)
 8000788:	4013      	ands	r3, r2
 800078a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800078e:	d202      	bcs.n	8000796 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <SystemInit+0x154>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <SystemInit+0x134>)
 8000798:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800079c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d113      	bne.n	80007cc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <SystemInit+0x134>)
 80007a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007aa:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <SystemInit+0x134>)
 80007ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <SystemInit+0x158>)
 80007b6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ba:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <SystemInit+0x134>)
 80007be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007c2:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <SystemInit+0x134>)
 80007c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00
 80007dc:	52002000 	.word	0x52002000
 80007e0:	58024400 	.word	0x58024400
 80007e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007e8:	02020200 	.word	0x02020200
 80007ec:	01ff0000 	.word	0x01ff0000
 80007f0:	01010280 	.word	0x01010280
 80007f4:	580000c0 	.word	0x580000c0
 80007f8:	5c001000 	.word	0x5c001000
 80007fc:	ffff0000 	.word	0xffff0000
 8000800:	51008108 	.word	0x51008108
 8000804:	52004000 	.word	0x52004000

08000808 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <ExitRun0Mode+0x2c>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <ExitRun0Mode+0x2c>)
 8000812:	f023 0302 	bic.w	r3, r3, #2
 8000816:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000818:	bf00      	nop
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <ExitRun0Mode+0x2c>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f9      	beq.n	800081a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	58024800 	.word	0x58024800

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800083e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000842:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000844:	bf00      	nop
 8000846:	4b34      	ldr	r3, [pc, #208]	@ (8000918 <main+0xe0>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800084e:	2b00      	cmp	r3, #0
 8000850:	d004      	beq.n	800085c <main+0x24>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	1e5a      	subs	r2, r3, #1
 8000856:	607a      	str	r2, [r7, #4]
 8000858:	2b00      	cmp	r3, #0
 800085a:	dcf4      	bgt.n	8000846 <main+0xe>
  if ( timeout < 0 )
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	da01      	bge.n	8000866 <main+0x2e>
  {
  Error_Handler();
 8000862:	f000 fa1b 	bl	8000c9c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000866:	f000 fc6b 	bl	8001140 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086a:	f000 f85d 	bl	8000928 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800086e:	4b2a      	ldr	r3, [pc, #168]	@ (8000918 <main+0xe0>)
 8000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000874:	4a28      	ldr	r2, [pc, #160]	@ (8000918 <main+0xe0>)
 8000876:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800087a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800087e:	4b26      	ldr	r3, [pc, #152]	@ (8000918 <main+0xe0>)
 8000880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800088c:	2000      	movs	r0, #0
 800088e:	f000 ffe1 	bl	8001854 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000892:	2100      	movs	r1, #0
 8000894:	2000      	movs	r0, #0
 8000896:	f000 fff7 	bl	8001888 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800089a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800089e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008a0:	bf00      	nop
 80008a2:	4b1d      	ldr	r3, [pc, #116]	@ (8000918 <main+0xe0>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d104      	bne.n	80008b8 <main+0x80>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	1e5a      	subs	r2, r3, #1
 80008b2:	607a      	str	r2, [r7, #4]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	dcf4      	bgt.n	80008a2 <main+0x6a>
if ( timeout < 0 )
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	da01      	bge.n	80008c2 <main+0x8a>
{
Error_Handler();
 80008be:	f000 f9ed 	bl	8000c9c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c2:	f000 f95d 	bl	8000b80 <MX_GPIO_Init>
  MX_TIM1_Init();
 80008c6:	f000 f8ab 	bl	8000a20 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80008ca:	4b14      	ldr	r3, [pc, #80]	@ (800091c <main+0xe4>)
 80008cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d0:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80008d2:	4b12      	ldr	r3, [pc, #72]	@ (800091c <main+0xe4>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80008d8:	4b10      	ldr	r3, [pc, #64]	@ (800091c <main+0xe4>)
 80008da:	2200      	movs	r2, #0
 80008dc:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80008de:	4b0f      	ldr	r3, [pc, #60]	@ (800091c <main+0xe4>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80008e4:	4b0d      	ldr	r3, [pc, #52]	@ (800091c <main+0xe4>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80008ea:	490c      	ldr	r1, [pc, #48]	@ (800091c <main+0xe4>)
 80008ec:	2000      	movs	r0, #0
 80008ee:	f000 fb51 	bl	8000f94 <BSP_COM_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <main+0xc4>
  {
    Error_Handler();
 80008f8:	f000 f9d0 	bl	8000c9c <Error_Handler>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80008fc:	2101      	movs	r1, #1
 80008fe:	4808      	ldr	r0, [pc, #32]	@ (8000920 <main+0xe8>)
 8000900:	f000 ff8d 	bl	800181e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000904:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000908:	f000 fcac 	bl	8001264 <HAL_Delay>
	  printf("Hello_Word");
 800090c:	4805      	ldr	r0, [pc, #20]	@ (8000924 <main+0xec>)
 800090e:	f004 fd17 	bl	8005340 <iprintf>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000912:	bf00      	nop
 8000914:	e7f2      	b.n	80008fc <main+0xc4>
 8000916:	bf00      	nop
 8000918:	58024400 	.word	0x58024400
 800091c:	2400008c 	.word	0x2400008c
 8000920:	58020400 	.word	0x58020400
 8000924:	08006030 	.word	0x08006030

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b09c      	sub	sp, #112	@ 0x70
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000932:	224c      	movs	r2, #76	@ 0x4c
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f004 fd57 	bl	80053ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	2220      	movs	r2, #32
 8000940:	2100      	movs	r1, #0
 8000942:	4618      	mov	r0, r3
 8000944:	f004 fd51 	bl	80053ea <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000948:	2004      	movs	r0, #4
 800094a:	f000 ffb1 	bl	80018b0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800094e:	2300      	movs	r3, #0
 8000950:	603b      	str	r3, [r7, #0]
 8000952:	4b31      	ldr	r3, [pc, #196]	@ (8000a18 <SystemClock_Config+0xf0>)
 8000954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000956:	4a30      	ldr	r2, [pc, #192]	@ (8000a18 <SystemClock_Config+0xf0>)
 8000958:	f023 0301 	bic.w	r3, r3, #1
 800095c:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800095e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a18 <SystemClock_Config+0xf0>)
 8000960:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	603b      	str	r3, [r7, #0]
 8000968:	4b2c      	ldr	r3, [pc, #176]	@ (8000a1c <SystemClock_Config+0xf4>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	4a2b      	ldr	r2, [pc, #172]	@ (8000a1c <SystemClock_Config+0xf4>)
 800096e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000972:	6193      	str	r3, [r2, #24]
 8000974:	4b29      	ldr	r3, [pc, #164]	@ (8000a1c <SystemClock_Config+0xf4>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000980:	bf00      	nop
 8000982:	4b26      	ldr	r3, [pc, #152]	@ (8000a1c <SystemClock_Config+0xf4>)
 8000984:	699b      	ldr	r3, [r3, #24]
 8000986:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800098a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800098e:	d1f8      	bne.n	8000982 <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000990:	2302      	movs	r3, #2
 8000992:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000994:	2301      	movs	r3, #1
 8000996:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000998:	2340      	movs	r3, #64	@ 0x40
 800099a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800099c:	2302      	movs	r3, #2
 800099e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009a0:	2300      	movs	r3, #0
 80009a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009a4:	2304      	movs	r3, #4
 80009a6:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 80009a8:	2332      	movs	r3, #50	@ 0x32
 80009aa:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009ac:	2302      	movs	r3, #2
 80009ae:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80009b0:	2305      	movs	r3, #5
 80009b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009b4:	2302      	movs	r3, #2
 80009b6:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009b8:	230c      	movs	r3, #12
 80009ba:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009bc:	2300      	movs	r3, #0
 80009be:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009c8:	4618      	mov	r0, r3
 80009ca:	f000 ffcb 	bl	8001964 <HAL_RCC_OscConfig>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 80009d4:	f000 f962 	bl	8000c9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009d8:	233f      	movs	r3, #63	@ 0x3f
 80009da:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009dc:	2303      	movs	r3, #3
 80009de:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80009e4:	2308      	movs	r3, #8
 80009e6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80009e8:	2340      	movs	r3, #64	@ 0x40
 80009ea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009ec:	2340      	movs	r3, #64	@ 0x40
 80009ee:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80009f4:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80009f6:	2340      	movs	r3, #64	@ 0x40
 80009f8:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	2102      	movs	r1, #2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f001 fc0a 	bl	8002218 <HAL_RCC_ClockConfig>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000a0a:	f000 f947 	bl	8000c9c <Error_Handler>
  }
}
 8000a0e:	bf00      	nop
 8000a10:	3770      	adds	r7, #112	@ 0x70
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	58000400 	.word	0x58000400
 8000a1c:	58024800 	.word	0x58024800

08000a20 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b09a      	sub	sp, #104	@ 0x68
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a26:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	601a      	str	r2, [r3, #0]
 8000a2e:	605a      	str	r2, [r3, #4]
 8000a30:	609a      	str	r2, [r3, #8]
 8000a32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a34:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a40:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000a44:	2200      	movs	r2, #0
 8000a46:	601a      	str	r2, [r3, #0]
 8000a48:	605a      	str	r2, [r3, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
 8000a4c:	60da      	str	r2, [r3, #12]
 8000a4e:	611a      	str	r2, [r3, #16]
 8000a50:	615a      	str	r2, [r3, #20]
 8000a52:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	222c      	movs	r2, #44	@ 0x2c
 8000a58:	2100      	movs	r1, #0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f004 fcc5 	bl	80053ea <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a60:	4b45      	ldr	r3, [pc, #276]	@ (8000b78 <MX_TIM1_Init+0x158>)
 8000a62:	4a46      	ldr	r2, [pc, #280]	@ (8000b7c <MX_TIM1_Init+0x15c>)
 8000a64:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 100;
 8000a66:	4b44      	ldr	r3, [pc, #272]	@ (8000b78 <MX_TIM1_Init+0x158>)
 8000a68:	2264      	movs	r2, #100	@ 0x64
 8000a6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a6c:	4b42      	ldr	r3, [pc, #264]	@ (8000b78 <MX_TIM1_Init+0x158>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 8000a72:	4b41      	ldr	r3, [pc, #260]	@ (8000b78 <MX_TIM1_Init+0x158>)
 8000a74:	2264      	movs	r2, #100	@ 0x64
 8000a76:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a78:	4b3f      	ldr	r3, [pc, #252]	@ (8000b78 <MX_TIM1_Init+0x158>)
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a7e:	4b3e      	ldr	r3, [pc, #248]	@ (8000b78 <MX_TIM1_Init+0x158>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a84:	4b3c      	ldr	r3, [pc, #240]	@ (8000b78 <MX_TIM1_Init+0x158>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a8a:	483b      	ldr	r0, [pc, #236]	@ (8000b78 <MX_TIM1_Init+0x158>)
 8000a8c:	f002 fa0e 	bl	8002eac <HAL_TIM_Base_Init>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d001      	beq.n	8000a9a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000a96:	f000 f901 	bl	8000c9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a9a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a9e:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000aa0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4834      	ldr	r0, [pc, #208]	@ (8000b78 <MX_TIM1_Init+0x158>)
 8000aa8:	f002 fcda 	bl	8003460 <HAL_TIM_ConfigClockSource>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000ab2:	f000 f8f3 	bl	8000c9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000ab6:	4830      	ldr	r0, [pc, #192]	@ (8000b78 <MX_TIM1_Init+0x158>)
 8000ab8:	f002 fa4f 	bl	8002f5a <HAL_TIM_PWM_Init>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8000ac2:	f000 f8eb 	bl	8000c9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000aca:	2300      	movs	r3, #0
 8000acc:	653b      	str	r3, [r7, #80]	@ 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ad2:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4827      	ldr	r0, [pc, #156]	@ (8000b78 <MX_TIM1_Init+0x158>)
 8000ada:	f003 f9f3 	bl	8003ec4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8000ae4:	f000 f8da 	bl	8000c9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ae8:	2360      	movs	r3, #96	@ 0x60
 8000aea:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.Pulse = 50;
 8000aec:	2332      	movs	r3, #50	@ 0x32
 8000aee:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000af0:	2300      	movs	r3, #0
 8000af2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000af4:	2300      	movs	r3, #0
 8000af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000af8:	2300      	movs	r3, #0
 8000afa:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000afc:	2300      	movs	r3, #0
 8000afe:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b00:	2300      	movs	r3, #0
 8000b02:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b04:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000b08:	2200      	movs	r2, #0
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	481a      	ldr	r0, [pc, #104]	@ (8000b78 <MX_TIM1_Init+0x158>)
 8000b0e:	f002 fb93 	bl	8003238 <HAL_TIM_PWM_ConfigChannel>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8000b18:	f000 f8c0 	bl	8000c9c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b34:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b3e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b42:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000b44:	2300      	movs	r3, #0
 8000b46:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000b4c:	1d3b      	adds	r3, r7, #4
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4809      	ldr	r0, [pc, #36]	@ (8000b78 <MX_TIM1_Init+0x158>)
 8000b52:	f003 fa45 	bl	8003fe0 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000b5c:	f000 f89e 	bl	8000c9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000b60:	2100      	movs	r1, #0
 8000b62:	4805      	ldr	r0, [pc, #20]	@ (8000b78 <MX_TIM1_Init+0x158>)
 8000b64:	f002 fa5a 	bl	800301c <HAL_TIM_PWM_Start>
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000b68:	4803      	ldr	r0, [pc, #12]	@ (8000b78 <MX_TIM1_Init+0x158>)
 8000b6a:	f000 f8d9 	bl	8000d20 <HAL_TIM_MspPostInit>

}
 8000b6e:	bf00      	nop
 8000b70:	3768      	adds	r7, #104	@ 0x68
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	2400009c 	.word	0x2400009c
 8000b7c:	40010000 	.word	0x40010000

08000b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b08a      	sub	sp, #40	@ 0x28
 8000b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b86:	f107 0314 	add.w	r3, r7, #20
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	601a      	str	r2, [r3, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
 8000b90:	609a      	str	r2, [r3, #8]
 8000b92:	60da      	str	r2, [r3, #12]
 8000b94:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b96:	4b3d      	ldr	r3, [pc, #244]	@ (8000c8c <MX_GPIO_Init+0x10c>)
 8000b98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b9c:	4a3b      	ldr	r2, [pc, #236]	@ (8000c8c <MX_GPIO_Init+0x10c>)
 8000b9e:	f043 0304 	orr.w	r3, r3, #4
 8000ba2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000ba6:	4b39      	ldr	r3, [pc, #228]	@ (8000c8c <MX_GPIO_Init+0x10c>)
 8000ba8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bac:	f003 0304 	and.w	r3, r3, #4
 8000bb0:	613b      	str	r3, [r7, #16]
 8000bb2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb4:	4b35      	ldr	r3, [pc, #212]	@ (8000c8c <MX_GPIO_Init+0x10c>)
 8000bb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bba:	4a34      	ldr	r2, [pc, #208]	@ (8000c8c <MX_GPIO_Init+0x10c>)
 8000bbc:	f043 0302 	orr.w	r3, r3, #2
 8000bc0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bc4:	4b31      	ldr	r3, [pc, #196]	@ (8000c8c <MX_GPIO_Init+0x10c>)
 8000bc6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bca:	f003 0302 	and.w	r3, r3, #2
 8000bce:	60fb      	str	r3, [r7, #12]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	@ (8000c8c <MX_GPIO_Init+0x10c>)
 8000bd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd8:	4a2c      	ldr	r2, [pc, #176]	@ (8000c8c <MX_GPIO_Init+0x10c>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000be2:	4b2a      	ldr	r3, [pc, #168]	@ (8000c8c <MX_GPIO_Init+0x10c>)
 8000be4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000be8:	f003 0301 	and.w	r3, r3, #1
 8000bec:	60bb      	str	r3, [r7, #8]
 8000bee:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bf0:	4b26      	ldr	r3, [pc, #152]	@ (8000c8c <MX_GPIO_Init+0x10c>)
 8000bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bf6:	4a25      	ldr	r2, [pc, #148]	@ (8000c8c <MX_GPIO_Init+0x10c>)
 8000bf8:	f043 0310 	orr.w	r3, r3, #16
 8000bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000c00:	4b22      	ldr	r3, [pc, #136]	@ (8000c8c <MX_GPIO_Init+0x10c>)
 8000c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000c06:	f003 0310 	and.w	r3, r3, #16
 8000c0a:	607b      	str	r3, [r7, #4]
 8000c0c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c14:	481e      	ldr	r0, [pc, #120]	@ (8000c90 <MX_GPIO_Init+0x110>)
 8000c16:	f000 fde9 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	481d      	ldr	r0, [pc, #116]	@ (8000c94 <MX_GPIO_Init+0x114>)
 8000c20:	f000 fde4 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2102      	movs	r1, #2
 8000c28:	481b      	ldr	r0, [pc, #108]	@ (8000c98 <MX_GPIO_Init+0x118>)
 8000c2a:	f000 fddf 	bl	80017ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c2e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000c32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c34:	2301      	movs	r3, #1
 8000c36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c40:	f107 0314 	add.w	r3, r7, #20
 8000c44:	4619      	mov	r1, r3
 8000c46:	4812      	ldr	r0, [pc, #72]	@ (8000c90 <MX_GPIO_Init+0x110>)
 8000c48:	f000 fc20 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c4c:	2301      	movs	r3, #1
 8000c4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c50:	2301      	movs	r3, #1
 8000c52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c5c:	f107 0314 	add.w	r3, r7, #20
 8000c60:	4619      	mov	r1, r3
 8000c62:	480c      	ldr	r0, [pc, #48]	@ (8000c94 <MX_GPIO_Init+0x114>)
 8000c64:	f000 fc12 	bl	800148c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c6c:	2301      	movs	r3, #1
 8000c6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c70:	2300      	movs	r3, #0
 8000c72:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c74:	2300      	movs	r3, #0
 8000c76:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c78:	f107 0314 	add.w	r3, r7, #20
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4806      	ldr	r0, [pc, #24]	@ (8000c98 <MX_GPIO_Init+0x118>)
 8000c80:	f000 fc04 	bl	800148c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c84:	bf00      	nop
 8000c86:	3728      	adds	r7, #40	@ 0x28
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	58024400 	.word	0x58024400
 8000c90:	58020800 	.word	0x58020800
 8000c94:	58020400 	.word	0x58020400
 8000c98:	58021000 	.word	0x58021000

08000c9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca0:	b672      	cpsid	i
}
 8000ca2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ca4:	bf00      	nop
 8000ca6:	e7fd      	b.n	8000ca4 <Error_Handler+0x8>

08000ca8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b083      	sub	sp, #12
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cae:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd8 <HAL_MspInit+0x30>)
 8000cb0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cb4:	4a08      	ldr	r2, [pc, #32]	@ (8000cd8 <HAL_MspInit+0x30>)
 8000cb6:	f043 0302 	orr.w	r3, r3, #2
 8000cba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000cbe:	4b06      	ldr	r3, [pc, #24]	@ (8000cd8 <HAL_MspInit+0x30>)
 8000cc0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000cc4:	f003 0302 	and.w	r3, r3, #2
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ccc:	bf00      	nop
 8000cce:	370c      	adds	r7, #12
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd6:	4770      	bx	lr
 8000cd8:	58024400 	.word	0x58024400

08000cdc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b085      	sub	sp, #20
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a0b      	ldr	r2, [pc, #44]	@ (8000d18 <HAL_TIM_Base_MspInit+0x3c>)
 8000cea:	4293      	cmp	r3, r2
 8000cec:	d10e      	bne.n	8000d0c <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000cee:	4b0b      	ldr	r3, [pc, #44]	@ (8000d1c <HAL_TIM_Base_MspInit+0x40>)
 8000cf0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000cf4:	4a09      	ldr	r2, [pc, #36]	@ (8000d1c <HAL_TIM_Base_MspInit+0x40>)
 8000cf6:	f043 0301 	orr.w	r3, r3, #1
 8000cfa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000cfe:	4b07      	ldr	r3, [pc, #28]	@ (8000d1c <HAL_TIM_Base_MspInit+0x40>)
 8000d00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000d04:	f003 0301 	and.w	r3, r3, #1
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	40010000 	.word	0x40010000
 8000d1c:	58024400 	.word	0x58024400

08000d20 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b088      	sub	sp, #32
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 030c 	add.w	r3, r7, #12
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a13      	ldr	r2, [pc, #76]	@ (8000d8c <HAL_TIM_MspPostInit+0x6c>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d11f      	bne.n	8000d82 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d42:	4b13      	ldr	r3, [pc, #76]	@ (8000d90 <HAL_TIM_MspPostInit+0x70>)
 8000d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d48:	4a11      	ldr	r2, [pc, #68]	@ (8000d90 <HAL_TIM_MspPostInit+0x70>)
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d52:	4b0f      	ldr	r3, [pc, #60]	@ (8000d90 <HAL_TIM_MspPostInit+0x70>)
 8000d54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d58:	f003 0301 	and.w	r3, r3, #1
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d64:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d66:	2302      	movs	r3, #2
 8000d68:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d72:	2301      	movs	r3, #1
 8000d74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d76:	f107 030c 	add.w	r3, r7, #12
 8000d7a:	4619      	mov	r1, r3
 8000d7c:	4805      	ldr	r0, [pc, #20]	@ (8000d94 <HAL_TIM_MspPostInit+0x74>)
 8000d7e:	f000 fb85 	bl	800148c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM1_MspPostInit 1 */

    /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000d82:	bf00      	nop
 8000d84:	3720      	adds	r7, #32
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40010000 	.word	0x40010000
 8000d90:	58024400 	.word	0x58024400
 8000d94:	58020000 	.word	0x58020000

08000d98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d9c:	bf00      	nop
 8000d9e:	e7fd      	b.n	8000d9c <NMI_Handler+0x4>

08000da0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <HardFault_Handler+0x4>

08000da8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dac:	bf00      	nop
 8000dae:	e7fd      	b.n	8000dac <MemManage_Handler+0x4>

08000db0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000db4:	bf00      	nop
 8000db6:	e7fd      	b.n	8000db4 <BusFault_Handler+0x4>

08000db8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dbc:	bf00      	nop
 8000dbe:	e7fd      	b.n	8000dbc <UsageFault_Handler+0x4>

08000dc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dc4:	bf00      	nop
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dce:	b480      	push	{r7}
 8000dd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr

08000dea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dee:	f000 fa19 	bl	8001224 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000df6:	b580      	push	{r7, lr}
 8000df8:	b086      	sub	sp, #24
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	60f8      	str	r0, [r7, #12]
 8000dfe:	60b9      	str	r1, [r7, #8]
 8000e00:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
 8000e06:	e00a      	b.n	8000e1e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e08:	f3af 8000 	nop.w
 8000e0c:	4601      	mov	r1, r0
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	1c5a      	adds	r2, r3, #1
 8000e12:	60ba      	str	r2, [r7, #8]
 8000e14:	b2ca      	uxtb	r2, r1
 8000e16:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e18:	697b      	ldr	r3, [r7, #20]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	697a      	ldr	r2, [r7, #20]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	429a      	cmp	r2, r3
 8000e24:	dbf0      	blt.n	8000e08 <_read+0x12>
  }

  return len;
 8000e26:	687b      	ldr	r3, [r7, #4]
}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3718      	adds	r7, #24
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	60f8      	str	r0, [r7, #12]
 8000e38:	60b9      	str	r1, [r7, #8]
 8000e3a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
 8000e40:	e009      	b.n	8000e56 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e42:	68bb      	ldr	r3, [r7, #8]
 8000e44:	1c5a      	adds	r2, r3, #1
 8000e46:	60ba      	str	r2, [r7, #8]
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	f000 f904 	bl	8001058 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	3301      	adds	r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	697a      	ldr	r2, [r7, #20]
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	429a      	cmp	r2, r3
 8000e5c:	dbf1      	blt.n	8000e42 <_write+0x12>
  }
  return len;
 8000e5e:	687b      	ldr	r3, [r7, #4]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3718      	adds	r7, #24
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <_close>:

int _close(int file)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b083      	sub	sp, #12
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e70:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr

08000e80 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
 8000e88:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e8a:	683b      	ldr	r3, [r7, #0]
 8000e8c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e90:	605a      	str	r2, [r3, #4]
  return 0;
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <_isatty>:

int _isatty(int file)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ea8:	2301      	movs	r3, #1
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	370c      	adds	r7, #12
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr

08000eb6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	b085      	sub	sp, #20
 8000eba:	af00      	add	r7, sp, #0
 8000ebc:	60f8      	str	r0, [r7, #12]
 8000ebe:	60b9      	str	r1, [r7, #8]
 8000ec0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ec2:	2300      	movs	r3, #0
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr

08000ed0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b086      	sub	sp, #24
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ed8:	4a14      	ldr	r2, [pc, #80]	@ (8000f2c <_sbrk+0x5c>)
 8000eda:	4b15      	ldr	r3, [pc, #84]	@ (8000f30 <_sbrk+0x60>)
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ee4:	4b13      	ldr	r3, [pc, #76]	@ (8000f34 <_sbrk+0x64>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d102      	bne.n	8000ef2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000eec:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <_sbrk+0x64>)
 8000eee:	4a12      	ldr	r2, [pc, #72]	@ (8000f38 <_sbrk+0x68>)
 8000ef0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ef2:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	429a      	cmp	r2, r3
 8000efe:	d207      	bcs.n	8000f10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f00:	f004 fac2 	bl	8005488 <__errno>
 8000f04:	4603      	mov	r3, r0
 8000f06:	220c      	movs	r2, #12
 8000f08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000f0e:	e009      	b.n	8000f24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f10:	4b08      	ldr	r3, [pc, #32]	@ (8000f34 <_sbrk+0x64>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f16:	4b07      	ldr	r3, [pc, #28]	@ (8000f34 <_sbrk+0x64>)
 8000f18:	681a      	ldr	r2, [r3, #0]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	4413      	add	r3, r2
 8000f1e:	4a05      	ldr	r2, [pc, #20]	@ (8000f34 <_sbrk+0x64>)
 8000f20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f22:	68fb      	ldr	r3, [r7, #12]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3718      	adds	r7, #24
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	24080000 	.word	0x24080000
 8000f30:	00000400 	.word	0x00000400
 8000f34:	240000e8 	.word	0x240000e8
 8000f38:	240002d8 	.word	0x240002d8

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f3c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000f78 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000f40:	f7ff fc62 	bl	8000808 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f44:	f7ff fbb2 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f48:	480c      	ldr	r0, [pc, #48]	@ (8000f7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f4a:	490d      	ldr	r1, [pc, #52]	@ (8000f80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8000f84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f60:	4c0a      	ldr	r4, [pc, #40]	@ (8000f8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f6e:	f004 fa91 	bl	8005494 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f72:	f7ff fc61 	bl	8000838 <main>
  bx  lr
 8000f76:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f78:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f7c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f80:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 8000f84:	080060a8 	.word	0x080060a8
  ldr r2, =_sbss
 8000f88:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 8000f8c:	240002d4 	.word	0x240002d4

08000f90 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f90:	e7fe      	b.n	8000f90 <ADC3_IRQHandler>
	...

08000f94 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	6039      	str	r1, [r7, #0]
 8000f9e:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 8000fa4:	79fb      	ldrb	r3, [r7, #7]
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d003      	beq.n	8000fb2 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8000faa:	f06f 0301 	mvn.w	r3, #1
 8000fae:	60fb      	str	r3, [r7, #12]
 8000fb0:	e018      	b.n	8000fe4 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8000fb2:	79fb      	ldrb	r3, [r7, #7]
 8000fb4:	2294      	movs	r2, #148	@ 0x94
 8000fb6:	fb02 f303 	mul.w	r3, r2, r3
 8000fba:	4a0d      	ldr	r2, [pc, #52]	@ (8000ff0 <BSP_COM_Init+0x5c>)
 8000fbc:	4413      	add	r3, r2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f866 	bl	8001090 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8000fc4:	79fb      	ldrb	r3, [r7, #7]
 8000fc6:	2294      	movs	r2, #148	@ 0x94
 8000fc8:	fb02 f303 	mul.w	r3, r2, r3
 8000fcc:	4a08      	ldr	r2, [pc, #32]	@ (8000ff0 <BSP_COM_Init+0x5c>)
 8000fce:	4413      	add	r3, r2
 8000fd0:	6839      	ldr	r1, [r7, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f80e 	bl	8000ff4 <MX_USART3_Init>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d002      	beq.n	8000fe4 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8000fde:	f06f 0303 	mvn.w	r3, #3
 8000fe2:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8000fe4:	68fb      	ldr	r3, [r7, #12]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3710      	adds	r7, #16
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	240000ec 	.word	0x240000ec

08000ff4 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8000ffe:	4b15      	ldr	r3, [pc, #84]	@ (8001054 <MX_USART3_Init+0x60>)
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	681a      	ldr	r2, [r3, #0]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	220c      	movs	r2, #12
 8001012:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	895b      	ldrh	r3, [r3, #10]
 8001018:	461a      	mov	r2, r3
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800101e:	683b      	ldr	r3, [r7, #0]
 8001020:	685a      	ldr	r2, [r3, #4]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	891b      	ldrh	r3, [r3, #8]
 800102a:	461a      	mov	r2, r3
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001030:	683b      	ldr	r3, [r7, #0]
 8001032:	899b      	ldrh	r3, [r3, #12]
 8001034:	461a      	mov	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001040:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f003 f84a 	bl	80040dc <HAL_UART_Init>
 8001048:	4603      	mov	r3, r0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3708      	adds	r7, #8
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	24000008 	.word	0x24000008

08001058 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 8001060:	4b09      	ldr	r3, [pc, #36]	@ (8001088 <__io_putchar+0x30>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	461a      	mov	r2, r3
 8001066:	2394      	movs	r3, #148	@ 0x94
 8001068:	fb02 f303 	mul.w	r3, r2, r3
 800106c:	4a07      	ldr	r2, [pc, #28]	@ (800108c <__io_putchar+0x34>)
 800106e:	1898      	adds	r0, r3, r2
 8001070:	1d39      	adds	r1, r7, #4
 8001072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001076:	2201      	movs	r2, #1
 8001078:	f003 f88a 	bl	8004190 <HAL_UART_Transmit>
  return ch;
 800107c:	687b      	ldr	r3, [r7, #4]
}
 800107e:	4618      	mov	r0, r3
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	24000180 	.word	0x24000180
 800108c:	240000ec 	.word	0x240000ec

08001090 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	@ 0x28
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 8001098:	4b27      	ldr	r3, [pc, #156]	@ (8001138 <COM1_MspInit+0xa8>)
 800109a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800109e:	4a26      	ldr	r2, [pc, #152]	@ (8001138 <COM1_MspInit+0xa8>)
 80010a0:	f043 0308 	orr.w	r3, r3, #8
 80010a4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a8:	4b23      	ldr	r3, [pc, #140]	@ (8001138 <COM1_MspInit+0xa8>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ae:	f003 0308 	and.w	r3, r3, #8
 80010b2:	613b      	str	r3, [r7, #16]
 80010b4:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80010b6:	4b20      	ldr	r3, [pc, #128]	@ (8001138 <COM1_MspInit+0xa8>)
 80010b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010bc:	4a1e      	ldr	r2, [pc, #120]	@ (8001138 <COM1_MspInit+0xa8>)
 80010be:	f043 0308 	orr.w	r3, r3, #8
 80010c2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010c6:	4b1c      	ldr	r3, [pc, #112]	@ (8001138 <COM1_MspInit+0xa8>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010cc:	f003 0308 	and.w	r3, r3, #8
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80010d4:	4b18      	ldr	r3, [pc, #96]	@ (8001138 <COM1_MspInit+0xa8>)
 80010d6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010da:	4a17      	ldr	r2, [pc, #92]	@ (8001138 <COM1_MspInit+0xa8>)
 80010dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010e0:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80010e4:	4b14      	ldr	r3, [pc, #80]	@ (8001138 <COM1_MspInit+0xa8>)
 80010e6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80010ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80010ee:	60bb      	str	r3, [r7, #8]
 80010f0:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 80010f2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010f6:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80010f8:	2302      	movs	r3, #2
 80010fa:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80010fc:	2302      	movs	r3, #2
 80010fe:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001100:	2301      	movs	r3, #1
 8001102:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001104:	2307      	movs	r3, #7
 8001106:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4619      	mov	r1, r3
 800110e:	480b      	ldr	r0, [pc, #44]	@ (800113c <COM1_MspInit+0xac>)
 8001110:	f000 f9bc 	bl	800148c <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001114:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001118:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800111e:	2307      	movs	r3, #7
 8001120:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001122:	f107 0314 	add.w	r3, r7, #20
 8001126:	4619      	mov	r1, r3
 8001128:	4804      	ldr	r0, [pc, #16]	@ (800113c <COM1_MspInit+0xac>)
 800112a:	f000 f9af 	bl	800148c <HAL_GPIO_Init>
}
 800112e:	bf00      	nop
 8001130:	3728      	adds	r7, #40	@ 0x28
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	58024400 	.word	0x58024400
 800113c:	58020c00 	.word	0x58020c00

08001140 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001146:	2003      	movs	r0, #3
 8001148:	f000 f96e 	bl	8001428 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800114c:	f001 fa1a 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 8001150:	4602      	mov	r2, r0
 8001152:	4b15      	ldr	r3, [pc, #84]	@ (80011a8 <HAL_Init+0x68>)
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	0a1b      	lsrs	r3, r3, #8
 8001158:	f003 030f 	and.w	r3, r3, #15
 800115c:	4913      	ldr	r1, [pc, #76]	@ (80011ac <HAL_Init+0x6c>)
 800115e:	5ccb      	ldrb	r3, [r1, r3]
 8001160:	f003 031f 	and.w	r3, r3, #31
 8001164:	fa22 f303 	lsr.w	r3, r2, r3
 8001168:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800116a:	4b0f      	ldr	r3, [pc, #60]	@ (80011a8 <HAL_Init+0x68>)
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	4a0e      	ldr	r2, [pc, #56]	@ (80011ac <HAL_Init+0x6c>)
 8001174:	5cd3      	ldrb	r3, [r2, r3]
 8001176:	f003 031f 	and.w	r3, r3, #31
 800117a:	687a      	ldr	r2, [r7, #4]
 800117c:	fa22 f303 	lsr.w	r3, r2, r3
 8001180:	4a0b      	ldr	r2, [pc, #44]	@ (80011b0 <HAL_Init+0x70>)
 8001182:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001184:	4a0b      	ldr	r2, [pc, #44]	@ (80011b4 <HAL_Init+0x74>)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800118a:	2000      	movs	r0, #0
 800118c:	f000 f814 	bl	80011b8 <HAL_InitTick>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e002      	b.n	80011a0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800119a:	f7ff fd85 	bl	8000ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800119e:	2300      	movs	r3, #0
}
 80011a0:	4618      	mov	r0, r3
 80011a2:	3708      	adds	r7, #8
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	58024400 	.word	0x58024400
 80011ac:	0800603c 	.word	0x0800603c
 80011b0:	24000004 	.word	0x24000004
 80011b4:	24000000 	.word	0x24000000

080011b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80011c0:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <HAL_InitTick+0x60>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d101      	bne.n	80011cc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	e021      	b.n	8001210 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80011cc:	4b13      	ldr	r3, [pc, #76]	@ (800121c <HAL_InitTick+0x64>)
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	4b11      	ldr	r3, [pc, #68]	@ (8001218 <HAL_InitTick+0x60>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	4619      	mov	r1, r3
 80011d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011da:	fbb3 f3f1 	udiv	r3, r3, r1
 80011de:	fbb2 f3f3 	udiv	r3, r2, r3
 80011e2:	4618      	mov	r0, r3
 80011e4:	f000 f945 	bl	8001472 <HAL_SYSTICK_Config>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
 80011f0:	e00e      	b.n	8001210 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2b0f      	cmp	r3, #15
 80011f6:	d80a      	bhi.n	800120e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011f8:	2200      	movs	r2, #0
 80011fa:	6879      	ldr	r1, [r7, #4]
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	f000 f91d 	bl	800143e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001204:	4a06      	ldr	r2, [pc, #24]	@ (8001220 <HAL_InitTick+0x68>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800120a:	2300      	movs	r3, #0
 800120c:	e000      	b.n	8001210 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}
 8001218:	24000010 	.word	0x24000010
 800121c:	24000000 	.word	0x24000000
 8001220:	2400000c 	.word	0x2400000c

08001224 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <HAL_IncTick+0x20>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	461a      	mov	r2, r3
 800122e:	4b06      	ldr	r3, [pc, #24]	@ (8001248 <HAL_IncTick+0x24>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4413      	add	r3, r2
 8001234:	4a04      	ldr	r2, [pc, #16]	@ (8001248 <HAL_IncTick+0x24>)
 8001236:	6013      	str	r3, [r2, #0]
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	24000010 	.word	0x24000010
 8001248:	24000184 	.word	0x24000184

0800124c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  return uwTick;
 8001250:	4b03      	ldr	r3, [pc, #12]	@ (8001260 <HAL_GetTick+0x14>)
 8001252:	681b      	ldr	r3, [r3, #0]
}
 8001254:	4618      	mov	r0, r3
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	24000184 	.word	0x24000184

08001264 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b084      	sub	sp, #16
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800126c:	f7ff ffee 	bl	800124c <HAL_GetTick>
 8001270:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800127c:	d005      	beq.n	800128a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800127e:	4b0a      	ldr	r3, [pc, #40]	@ (80012a8 <HAL_Delay+0x44>)
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	461a      	mov	r2, r3
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800128a:	bf00      	nop
 800128c:	f7ff ffde 	bl	800124c <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	68bb      	ldr	r3, [r7, #8]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	68fa      	ldr	r2, [r7, #12]
 8001298:	429a      	cmp	r2, r3
 800129a:	d8f7      	bhi.n	800128c <HAL_Delay+0x28>
  {
  }
}
 800129c:	bf00      	nop
 800129e:	bf00      	nop
 80012a0:	3710      	adds	r7, #16
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	24000010 	.word	0x24000010

080012ac <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80012b0:	4b03      	ldr	r3, [pc, #12]	@ (80012c0 <HAL_GetREVID+0x14>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	0c1b      	lsrs	r3, r3, #16
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr
 80012c0:	5c001000 	.word	0x5c001000

080012c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b085      	sub	sp, #20
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f003 0307 	and.w	r3, r3, #7
 80012d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001304 <__NVIC_SetPriorityGrouping+0x40>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012e0:	4013      	ands	r3, r2
 80012e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012ec:	4b06      	ldr	r3, [pc, #24]	@ (8001308 <__NVIC_SetPriorityGrouping+0x44>)
 80012ee:	4313      	orrs	r3, r2
 80012f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012f2:	4a04      	ldr	r2, [pc, #16]	@ (8001304 <__NVIC_SetPriorityGrouping+0x40>)
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	60d3      	str	r3, [r2, #12]
}
 80012f8:	bf00      	nop
 80012fa:	3714      	adds	r7, #20
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	e000ed00 	.word	0xe000ed00
 8001308:	05fa0000 	.word	0x05fa0000

0800130c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001310:	4b04      	ldr	r3, [pc, #16]	@ (8001324 <__NVIC_GetPriorityGrouping+0x18>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	0a1b      	lsrs	r3, r3, #8
 8001316:	f003 0307 	and.w	r3, r3, #7
}
 800131a:	4618      	mov	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	6039      	str	r1, [r7, #0]
 8001332:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001334:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001338:	2b00      	cmp	r3, #0
 800133a:	db0a      	blt.n	8001352 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	b2da      	uxtb	r2, r3
 8001340:	490c      	ldr	r1, [pc, #48]	@ (8001374 <__NVIC_SetPriority+0x4c>)
 8001342:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001346:	0112      	lsls	r2, r2, #4
 8001348:	b2d2      	uxtb	r2, r2
 800134a:	440b      	add	r3, r1
 800134c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001350:	e00a      	b.n	8001368 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	b2da      	uxtb	r2, r3
 8001356:	4908      	ldr	r1, [pc, #32]	@ (8001378 <__NVIC_SetPriority+0x50>)
 8001358:	88fb      	ldrh	r3, [r7, #6]
 800135a:	f003 030f 	and.w	r3, r3, #15
 800135e:	3b04      	subs	r3, #4
 8001360:	0112      	lsls	r2, r2, #4
 8001362:	b2d2      	uxtb	r2, r2
 8001364:	440b      	add	r3, r1
 8001366:	761a      	strb	r2, [r3, #24]
}
 8001368:	bf00      	nop
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr
 8001374:	e000e100 	.word	0xe000e100
 8001378:	e000ed00 	.word	0xe000ed00

0800137c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800137c:	b480      	push	{r7}
 800137e:	b089      	sub	sp, #36	@ 0x24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	f003 0307 	and.w	r3, r3, #7
 800138e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	f1c3 0307 	rsb	r3, r3, #7
 8001396:	2b04      	cmp	r3, #4
 8001398:	bf28      	it	cs
 800139a:	2304      	movcs	r3, #4
 800139c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	3304      	adds	r3, #4
 80013a2:	2b06      	cmp	r3, #6
 80013a4:	d902      	bls.n	80013ac <NVIC_EncodePriority+0x30>
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3b03      	subs	r3, #3
 80013aa:	e000      	b.n	80013ae <NVIC_EncodePriority+0x32>
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b0:	f04f 32ff 	mov.w	r2, #4294967295
 80013b4:	69bb      	ldr	r3, [r7, #24]
 80013b6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ba:	43da      	mvns	r2, r3
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	401a      	ands	r2, r3
 80013c0:	697b      	ldr	r3, [r7, #20]
 80013c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c4:	f04f 31ff 	mov.w	r1, #4294967295
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	fa01 f303 	lsl.w	r3, r1, r3
 80013ce:	43d9      	mvns	r1, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	4313      	orrs	r3, r2
         );
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	3724      	adds	r7, #36	@ 0x24
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
	...

080013e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b082      	sub	sp, #8
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80013f4:	d301      	bcc.n	80013fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013f6:	2301      	movs	r3, #1
 80013f8:	e00f      	b.n	800141a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001424 <SysTick_Config+0x40>)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	3b01      	subs	r3, #1
 8001400:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001402:	210f      	movs	r1, #15
 8001404:	f04f 30ff 	mov.w	r0, #4294967295
 8001408:	f7ff ff8e 	bl	8001328 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800140c:	4b05      	ldr	r3, [pc, #20]	@ (8001424 <SysTick_Config+0x40>)
 800140e:	2200      	movs	r2, #0
 8001410:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001412:	4b04      	ldr	r3, [pc, #16]	@ (8001424 <SysTick_Config+0x40>)
 8001414:	2207      	movs	r2, #7
 8001416:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	e000e010 	.word	0xe000e010

08001428 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b082      	sub	sp, #8
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f7ff ff47 	bl	80012c4 <__NVIC_SetPriorityGrouping>
}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	b086      	sub	sp, #24
 8001442:	af00      	add	r7, sp, #0
 8001444:	4603      	mov	r3, r0
 8001446:	60b9      	str	r1, [r7, #8]
 8001448:	607a      	str	r2, [r7, #4]
 800144a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800144c:	f7ff ff5e 	bl	800130c <__NVIC_GetPriorityGrouping>
 8001450:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	6978      	ldr	r0, [r7, #20]
 8001458:	f7ff ff90 	bl	800137c <NVIC_EncodePriority>
 800145c:	4602      	mov	r2, r0
 800145e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001462:	4611      	mov	r1, r2
 8001464:	4618      	mov	r0, r3
 8001466:	f7ff ff5f 	bl	8001328 <__NVIC_SetPriority>
}
 800146a:	bf00      	nop
 800146c:	3718      	adds	r7, #24
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f7ff ffb2 	bl	80013e4 <SysTick_Config>
 8001480:	4603      	mov	r3, r0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
	...

0800148c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800148c:	b480      	push	{r7}
 800148e:	b089      	sub	sp, #36	@ 0x24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001496:	2300      	movs	r3, #0
 8001498:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800149a:	4b89      	ldr	r3, [pc, #548]	@ (80016c0 <HAL_GPIO_Init+0x234>)
 800149c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800149e:	e194      	b.n	80017ca <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	2101      	movs	r1, #1
 80014a6:	69fb      	ldr	r3, [r7, #28]
 80014a8:	fa01 f303 	lsl.w	r3, r1, r3
 80014ac:	4013      	ands	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	f000 8186 	beq.w	80017c4 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	f003 0303 	and.w	r3, r3, #3
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d005      	beq.n	80014d0 <HAL_GPIO_Init+0x44>
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	f003 0303 	and.w	r3, r3, #3
 80014cc:	2b02      	cmp	r3, #2
 80014ce:	d130      	bne.n	8001532 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	2203      	movs	r2, #3
 80014dc:	fa02 f303 	lsl.w	r3, r2, r3
 80014e0:	43db      	mvns	r3, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4013      	ands	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	68da      	ldr	r2, [r3, #12]
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	fa02 f303 	lsl.w	r3, r2, r3
 80014f4:	69ba      	ldr	r2, [r7, #24]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001506:	2201      	movs	r2, #1
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	fa02 f303 	lsl.w	r3, r2, r3
 800150e:	43db      	mvns	r3, r3
 8001510:	69ba      	ldr	r2, [r7, #24]
 8001512:	4013      	ands	r3, r2
 8001514:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	091b      	lsrs	r3, r3, #4
 800151c:	f003 0201 	and.w	r2, r3, #1
 8001520:	69fb      	ldr	r3, [r7, #28]
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f003 0303 	and.w	r3, r3, #3
 800153a:	2b03      	cmp	r3, #3
 800153c:	d017      	beq.n	800156e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	68db      	ldr	r3, [r3, #12]
 8001542:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	2203      	movs	r2, #3
 800154a:	fa02 f303 	lsl.w	r3, r2, r3
 800154e:	43db      	mvns	r3, r3
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	4013      	ands	r3, r2
 8001554:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	689a      	ldr	r2, [r3, #8]
 800155a:	69fb      	ldr	r3, [r7, #28]
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	69ba      	ldr	r2, [r7, #24]
 8001564:	4313      	orrs	r3, r2
 8001566:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0303 	and.w	r3, r3, #3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d123      	bne.n	80015c2 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	08da      	lsrs	r2, r3, #3
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	3208      	adds	r2, #8
 8001582:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001586:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	009b      	lsls	r3, r3, #2
 8001590:	220f      	movs	r2, #15
 8001592:	fa02 f303 	lsl.w	r3, r2, r3
 8001596:	43db      	mvns	r3, r3
 8001598:	69ba      	ldr	r2, [r7, #24]
 800159a:	4013      	ands	r3, r2
 800159c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	691a      	ldr	r2, [r3, #16]
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	f003 0307 	and.w	r3, r3, #7
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	fa02 f303 	lsl.w	r3, r2, r3
 80015ae:	69ba      	ldr	r2, [r7, #24]
 80015b0:	4313      	orrs	r3, r2
 80015b2:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015b4:	69fb      	ldr	r3, [r7, #28]
 80015b6:	08da      	lsrs	r2, r3, #3
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	3208      	adds	r2, #8
 80015bc:	69b9      	ldr	r1, [r7, #24]
 80015be:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80015c8:	69fb      	ldr	r3, [r7, #28]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	2203      	movs	r2, #3
 80015ce:	fa02 f303 	lsl.w	r3, r2, r3
 80015d2:	43db      	mvns	r3, r3
 80015d4:	69ba      	ldr	r2, [r7, #24]
 80015d6:	4013      	ands	r3, r2
 80015d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	f003 0203 	and.w	r2, r3, #3
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015fe:	2b00      	cmp	r3, #0
 8001600:	f000 80e0 	beq.w	80017c4 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001604:	4b2f      	ldr	r3, [pc, #188]	@ (80016c4 <HAL_GPIO_Init+0x238>)
 8001606:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800160a:	4a2e      	ldr	r2, [pc, #184]	@ (80016c4 <HAL_GPIO_Init+0x238>)
 800160c:	f043 0302 	orr.w	r3, r3, #2
 8001610:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001614:	4b2b      	ldr	r3, [pc, #172]	@ (80016c4 <HAL_GPIO_Init+0x238>)
 8001616:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001622:	4a29      	ldr	r2, [pc, #164]	@ (80016c8 <HAL_GPIO_Init+0x23c>)
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	089b      	lsrs	r3, r3, #2
 8001628:	3302      	adds	r3, #2
 800162a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001630:	69fb      	ldr	r3, [r7, #28]
 8001632:	f003 0303 	and.w	r3, r3, #3
 8001636:	009b      	lsls	r3, r3, #2
 8001638:	220f      	movs	r2, #15
 800163a:	fa02 f303 	lsl.w	r3, r2, r3
 800163e:	43db      	mvns	r3, r3
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4013      	ands	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a20      	ldr	r2, [pc, #128]	@ (80016cc <HAL_GPIO_Init+0x240>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d052      	beq.n	80016f4 <HAL_GPIO_Init+0x268>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a1f      	ldr	r2, [pc, #124]	@ (80016d0 <HAL_GPIO_Init+0x244>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d031      	beq.n	80016ba <HAL_GPIO_Init+0x22e>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a1e      	ldr	r2, [pc, #120]	@ (80016d4 <HAL_GPIO_Init+0x248>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d02b      	beq.n	80016b6 <HAL_GPIO_Init+0x22a>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a1d      	ldr	r2, [pc, #116]	@ (80016d8 <HAL_GPIO_Init+0x24c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d025      	beq.n	80016b2 <HAL_GPIO_Init+0x226>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a1c      	ldr	r2, [pc, #112]	@ (80016dc <HAL_GPIO_Init+0x250>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d01f      	beq.n	80016ae <HAL_GPIO_Init+0x222>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a1b      	ldr	r2, [pc, #108]	@ (80016e0 <HAL_GPIO_Init+0x254>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d019      	beq.n	80016aa <HAL_GPIO_Init+0x21e>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a1a      	ldr	r2, [pc, #104]	@ (80016e4 <HAL_GPIO_Init+0x258>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d013      	beq.n	80016a6 <HAL_GPIO_Init+0x21a>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a19      	ldr	r2, [pc, #100]	@ (80016e8 <HAL_GPIO_Init+0x25c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d00d      	beq.n	80016a2 <HAL_GPIO_Init+0x216>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a18      	ldr	r2, [pc, #96]	@ (80016ec <HAL_GPIO_Init+0x260>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d007      	beq.n	800169e <HAL_GPIO_Init+0x212>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a17      	ldr	r2, [pc, #92]	@ (80016f0 <HAL_GPIO_Init+0x264>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d101      	bne.n	800169a <HAL_GPIO_Init+0x20e>
 8001696:	2309      	movs	r3, #9
 8001698:	e02d      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 800169a:	230a      	movs	r3, #10
 800169c:	e02b      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 800169e:	2308      	movs	r3, #8
 80016a0:	e029      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016a2:	2307      	movs	r3, #7
 80016a4:	e027      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016a6:	2306      	movs	r3, #6
 80016a8:	e025      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016aa:	2305      	movs	r3, #5
 80016ac:	e023      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016ae:	2304      	movs	r3, #4
 80016b0:	e021      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016b2:	2303      	movs	r3, #3
 80016b4:	e01f      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016b6:	2302      	movs	r3, #2
 80016b8:	e01d      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016ba:	2301      	movs	r3, #1
 80016bc:	e01b      	b.n	80016f6 <HAL_GPIO_Init+0x26a>
 80016be:	bf00      	nop
 80016c0:	58000080 	.word	0x58000080
 80016c4:	58024400 	.word	0x58024400
 80016c8:	58000400 	.word	0x58000400
 80016cc:	58020000 	.word	0x58020000
 80016d0:	58020400 	.word	0x58020400
 80016d4:	58020800 	.word	0x58020800
 80016d8:	58020c00 	.word	0x58020c00
 80016dc:	58021000 	.word	0x58021000
 80016e0:	58021400 	.word	0x58021400
 80016e4:	58021800 	.word	0x58021800
 80016e8:	58021c00 	.word	0x58021c00
 80016ec:	58022000 	.word	0x58022000
 80016f0:	58022400 	.word	0x58022400
 80016f4:	2300      	movs	r3, #0
 80016f6:	69fa      	ldr	r2, [r7, #28]
 80016f8:	f002 0203 	and.w	r2, r2, #3
 80016fc:	0092      	lsls	r2, r2, #2
 80016fe:	4093      	lsls	r3, r2
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4313      	orrs	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001706:	4938      	ldr	r1, [pc, #224]	@ (80017e8 <HAL_GPIO_Init+0x35c>)
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	089b      	lsrs	r3, r3, #2
 800170c:	3302      	adds	r3, #2
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001714:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800171c:	693b      	ldr	r3, [r7, #16]
 800171e:	43db      	mvns	r3, r3
 8001720:	69ba      	ldr	r2, [r7, #24]
 8001722:	4013      	ands	r3, r2
 8001724:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d003      	beq.n	800173a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001732:	69ba      	ldr	r2, [r7, #24]
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800173a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800173e:	69bb      	ldr	r3, [r7, #24]
 8001740:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001742:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800174a:	693b      	ldr	r3, [r7, #16]
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685b      	ldr	r3, [r3, #4]
 8001758:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800175c:	2b00      	cmp	r3, #0
 800175e:	d003      	beq.n	8001768 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4313      	orrs	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001768:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800176c:	69bb      	ldr	r3, [r7, #24]
 800176e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001770:	697b      	ldr	r3, [r7, #20]
 8001772:	685b      	ldr	r3, [r3, #4]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	43db      	mvns	r3, r3
 800177a:	69ba      	ldr	r2, [r7, #24]
 800177c:	4013      	ands	r3, r2
 800177e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d003      	beq.n	8001794 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	4313      	orrs	r3, r2
 8001792:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	43db      	mvns	r3, r3
 80017a4:	69ba      	ldr	r2, [r7, #24]
 80017a6:	4013      	ands	r3, r2
 80017a8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	4313      	orrs	r3, r2
 80017bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80017c4:	69fb      	ldr	r3, [r7, #28]
 80017c6:	3301      	adds	r3, #1
 80017c8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	fa22 f303 	lsr.w	r3, r2, r3
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	f47f ae63 	bne.w	80014a0 <HAL_GPIO_Init+0x14>
  }
}
 80017da:	bf00      	nop
 80017dc:	bf00      	nop
 80017de:	3724      	adds	r7, #36	@ 0x24
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	58000400 	.word	0x58000400

080017ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	460b      	mov	r3, r1
 80017f6:	807b      	strh	r3, [r7, #2]
 80017f8:	4613      	mov	r3, r2
 80017fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017fc:	787b      	ldrb	r3, [r7, #1]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d003      	beq.n	800180a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001802:	887a      	ldrh	r2, [r7, #2]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001808:	e003      	b.n	8001812 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800180a:	887b      	ldrh	r3, [r7, #2]
 800180c:	041a      	lsls	r2, r3, #16
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	619a      	str	r2, [r3, #24]
}
 8001812:	bf00      	nop
 8001814:	370c      	adds	r7, #12
 8001816:	46bd      	mov	sp, r7
 8001818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181c:	4770      	bx	lr

0800181e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800181e:	b480      	push	{r7}
 8001820:	b085      	sub	sp, #20
 8001822:	af00      	add	r7, sp, #0
 8001824:	6078      	str	r0, [r7, #4]
 8001826:	460b      	mov	r3, r1
 8001828:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	695b      	ldr	r3, [r3, #20]
 800182e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001830:	887a      	ldrh	r2, [r7, #2]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	4013      	ands	r3, r2
 8001836:	041a      	lsls	r2, r3, #16
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	43d9      	mvns	r1, r3
 800183c:	887b      	ldrh	r3, [r7, #2]
 800183e:	400b      	ands	r3, r1
 8001840:	431a      	orrs	r2, r3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	619a      	str	r2, [r3, #24]
}
 8001846:	bf00      	nop
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001850:	4770      	bx	lr
	...

08001854 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001854:	b480      	push	{r7}
 8001856:	b083      	sub	sp, #12
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800185c:	4a08      	ldr	r2, [pc, #32]	@ (8001880 <HAL_HSEM_FastTake+0x2c>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3320      	adds	r3, #32
 8001862:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001866:	4a07      	ldr	r2, [pc, #28]	@ (8001884 <HAL_HSEM_FastTake+0x30>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d101      	bne.n	8001870 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800186c:	2300      	movs	r3, #0
 800186e:	e000      	b.n	8001872 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001870:	2301      	movs	r3, #1
}
 8001872:	4618      	mov	r0, r3
 8001874:	370c      	adds	r7, #12
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	58026400 	.word	0x58026400
 8001884:	80000300 	.word	0x80000300

08001888 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001892:	4906      	ldr	r1, [pc, #24]	@ (80018ac <HAL_HSEM_Release+0x24>)
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	58026400 	.word	0x58026400

080018b0 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80018b8:	4b29      	ldr	r3, [pc, #164]	@ (8001960 <HAL_PWREx_ConfigSupply+0xb0>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	f003 0307 	and.w	r3, r3, #7
 80018c0:	2b06      	cmp	r3, #6
 80018c2:	d00a      	beq.n	80018da <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80018c4:	4b26      	ldr	r3, [pc, #152]	@ (8001960 <HAL_PWREx_ConfigSupply+0xb0>)
 80018c6:	68db      	ldr	r3, [r3, #12]
 80018c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d001      	beq.n	80018d6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e040      	b.n	8001958 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80018d6:	2300      	movs	r3, #0
 80018d8:	e03e      	b.n	8001958 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80018da:	4b21      	ldr	r3, [pc, #132]	@ (8001960 <HAL_PWREx_ConfigSupply+0xb0>)
 80018dc:	68db      	ldr	r3, [r3, #12]
 80018de:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80018e2:	491f      	ldr	r1, [pc, #124]	@ (8001960 <HAL_PWREx_ConfigSupply+0xb0>)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80018ea:	f7ff fcaf 	bl	800124c <HAL_GetTick>
 80018ee:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80018f0:	e009      	b.n	8001906 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80018f2:	f7ff fcab 	bl	800124c <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001900:	d901      	bls.n	8001906 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e028      	b.n	8001958 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001906:	4b16      	ldr	r3, [pc, #88]	@ (8001960 <HAL_PWREx_ConfigSupply+0xb0>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800190e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001912:	d1ee      	bne.n	80018f2 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b1e      	cmp	r3, #30
 8001918:	d008      	beq.n	800192c <HAL_PWREx_ConfigSupply+0x7c>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	2b2e      	cmp	r3, #46	@ 0x2e
 800191e:	d005      	beq.n	800192c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	2b1d      	cmp	r3, #29
 8001924:	d002      	beq.n	800192c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2b2d      	cmp	r3, #45	@ 0x2d
 800192a:	d114      	bne.n	8001956 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800192c:	f7ff fc8e 	bl	800124c <HAL_GetTick>
 8001930:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001932:	e009      	b.n	8001948 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001934:	f7ff fc8a 	bl	800124c <HAL_GetTick>
 8001938:	4602      	mov	r2, r0
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	1ad3      	subs	r3, r2, r3
 800193e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001942:	d901      	bls.n	8001948 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e007      	b.n	8001958 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001948:	4b05      	ldr	r3, [pc, #20]	@ (8001960 <HAL_PWREx_ConfigSupply+0xb0>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001950:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001954:	d1ee      	bne.n	8001934 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3710      	adds	r7, #16
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	58024800 	.word	0x58024800

08001964 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08c      	sub	sp, #48	@ 0x30
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d102      	bne.n	8001978 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
 8001974:	f000 bc48 	b.w	8002208 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	f000 8088 	beq.w	8001a96 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001986:	4b99      	ldr	r3, [pc, #612]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001988:	691b      	ldr	r3, [r3, #16]
 800198a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800198e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001990:	4b96      	ldr	r3, [pc, #600]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001994:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001998:	2b10      	cmp	r3, #16
 800199a:	d007      	beq.n	80019ac <HAL_RCC_OscConfig+0x48>
 800199c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800199e:	2b18      	cmp	r3, #24
 80019a0:	d111      	bne.n	80019c6 <HAL_RCC_OscConfig+0x62>
 80019a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80019a4:	f003 0303 	and.w	r3, r3, #3
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d10c      	bne.n	80019c6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019ac:	4b8f      	ldr	r3, [pc, #572]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d06d      	beq.n	8001a94 <HAL_RCC_OscConfig+0x130>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d169      	bne.n	8001a94 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	f000 bc21 	b.w	8002208 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80019ce:	d106      	bne.n	80019de <HAL_RCC_OscConfig+0x7a>
 80019d0:	4b86      	ldr	r3, [pc, #536]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a85      	ldr	r2, [pc, #532]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 80019d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	e02e      	b.n	8001a3c <HAL_RCC_OscConfig+0xd8>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x9c>
 80019e6:	4b81      	ldr	r3, [pc, #516]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a80      	ldr	r2, [pc, #512]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 80019ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80019f0:	6013      	str	r3, [r2, #0]
 80019f2:	4b7e      	ldr	r3, [pc, #504]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	4a7d      	ldr	r2, [pc, #500]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 80019f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80019fc:	6013      	str	r3, [r2, #0]
 80019fe:	e01d      	b.n	8001a3c <HAL_RCC_OscConfig+0xd8>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a08:	d10c      	bne.n	8001a24 <HAL_RCC_OscConfig+0xc0>
 8001a0a:	4b78      	ldr	r3, [pc, #480]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	4a77      	ldr	r2, [pc, #476]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001a10:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001a14:	6013      	str	r3, [r2, #0]
 8001a16:	4b75      	ldr	r3, [pc, #468]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a74      	ldr	r2, [pc, #464]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001a1c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a20:	6013      	str	r3, [r2, #0]
 8001a22:	e00b      	b.n	8001a3c <HAL_RCC_OscConfig+0xd8>
 8001a24:	4b71      	ldr	r3, [pc, #452]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a70      	ldr	r2, [pc, #448]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001a2a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001a2e:	6013      	str	r3, [r2, #0]
 8001a30:	4b6e      	ldr	r3, [pc, #440]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a6d      	ldr	r2, [pc, #436]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001a36:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001a3a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d013      	beq.n	8001a6c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a44:	f7ff fc02 	bl	800124c <HAL_GetTick>
 8001a48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a4a:	e008      	b.n	8001a5e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a4c:	f7ff fbfe 	bl	800124c <HAL_GetTick>
 8001a50:	4602      	mov	r2, r0
 8001a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a54:	1ad3      	subs	r3, r2, r3
 8001a56:	2b64      	cmp	r3, #100	@ 0x64
 8001a58:	d901      	bls.n	8001a5e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001a5a:	2303      	movs	r3, #3
 8001a5c:	e3d4      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001a5e:	4b63      	ldr	r3, [pc, #396]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d0f0      	beq.n	8001a4c <HAL_RCC_OscConfig+0xe8>
 8001a6a:	e014      	b.n	8001a96 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6c:	f7ff fbee 	bl	800124c <HAL_GetTick>
 8001a70:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a74:	f7ff fbea 	bl	800124c <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b64      	cmp	r3, #100	@ 0x64
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e3c0      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a86:	4b59      	ldr	r3, [pc, #356]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x110>
 8001a92:	e000      	b.n	8001a96 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a94:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	f000 80ca 	beq.w	8001c38 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001aa4:	4b51      	ldr	r3, [pc, #324]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001aac:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001aae:	4b4f      	ldr	r3, [pc, #316]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001ab0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d007      	beq.n	8001aca <HAL_RCC_OscConfig+0x166>
 8001aba:	6a3b      	ldr	r3, [r7, #32]
 8001abc:	2b18      	cmp	r3, #24
 8001abe:	d156      	bne.n	8001b6e <HAL_RCC_OscConfig+0x20a>
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d151      	bne.n	8001b6e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001aca:	4b48      	ldr	r3, [pc, #288]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d005      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x17e>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d101      	bne.n	8001ae2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e392      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ae2:	4b42      	ldr	r3, [pc, #264]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f023 0219 	bic.w	r2, r3, #25
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68db      	ldr	r3, [r3, #12]
 8001aee:	493f      	ldr	r1, [pc, #252]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001af0:	4313      	orrs	r3, r2
 8001af2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001af4:	f7ff fbaa 	bl	800124c <HAL_GetTick>
 8001af8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001afc:	f7ff fba6 	bl	800124c <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b02      	cmp	r3, #2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e37c      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b0e:	4b37      	ldr	r3, [pc, #220]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d0f0      	beq.n	8001afc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b1a:	f7ff fbc7 	bl	80012ac <HAL_GetREVID>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001b24:	4293      	cmp	r3, r2
 8001b26:	d817      	bhi.n	8001b58 <HAL_RCC_OscConfig+0x1f4>
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	691b      	ldr	r3, [r3, #16]
 8001b2c:	2b40      	cmp	r3, #64	@ 0x40
 8001b2e:	d108      	bne.n	8001b42 <HAL_RCC_OscConfig+0x1de>
 8001b30:	4b2e      	ldr	r3, [pc, #184]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001b38:	4a2c      	ldr	r2, [pc, #176]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001b3a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b3e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b40:	e07a      	b.n	8001c38 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b42:	4b2a      	ldr	r3, [pc, #168]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	691b      	ldr	r3, [r3, #16]
 8001b4e:	031b      	lsls	r3, r3, #12
 8001b50:	4926      	ldr	r1, [pc, #152]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b56:	e06f      	b.n	8001c38 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b58:	4b24      	ldr	r3, [pc, #144]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	691b      	ldr	r3, [r3, #16]
 8001b64:	061b      	lsls	r3, r3, #24
 8001b66:	4921      	ldr	r1, [pc, #132]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b6c:	e064      	b.n	8001c38 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	68db      	ldr	r3, [r3, #12]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d047      	beq.n	8001c06 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001b76:	4b1d      	ldr	r3, [pc, #116]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f023 0219 	bic.w	r2, r3, #25
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	491a      	ldr	r1, [pc, #104]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001b84:	4313      	orrs	r3, r2
 8001b86:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b88:	f7ff fb60 	bl	800124c <HAL_GetTick>
 8001b8c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b90:	f7ff fb5c 	bl	800124c <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b02      	cmp	r3, #2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e332      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ba2:	4b12      	ldr	r3, [pc, #72]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0304 	and.w	r3, r3, #4
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0f0      	beq.n	8001b90 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bae:	f7ff fb7d 	bl	80012ac <HAL_GetREVID>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d819      	bhi.n	8001bf0 <HAL_RCC_OscConfig+0x28c>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	691b      	ldr	r3, [r3, #16]
 8001bc0:	2b40      	cmp	r3, #64	@ 0x40
 8001bc2:	d108      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x272>
 8001bc4:	4b09      	ldr	r3, [pc, #36]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001bcc:	4a07      	ldr	r2, [pc, #28]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001bce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001bd2:	6053      	str	r3, [r2, #4]
 8001bd4:	e030      	b.n	8001c38 <HAL_RCC_OscConfig+0x2d4>
 8001bd6:	4b05      	ldr	r3, [pc, #20]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	031b      	lsls	r3, r3, #12
 8001be4:	4901      	ldr	r1, [pc, #4]	@ (8001bec <HAL_RCC_OscConfig+0x288>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	604b      	str	r3, [r1, #4]
 8001bea:	e025      	b.n	8001c38 <HAL_RCC_OscConfig+0x2d4>
 8001bec:	58024400 	.word	0x58024400
 8001bf0:	4b9a      	ldr	r3, [pc, #616]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	691b      	ldr	r3, [r3, #16]
 8001bfc:	061b      	lsls	r3, r3, #24
 8001bfe:	4997      	ldr	r1, [pc, #604]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
 8001c04:	e018      	b.n	8001c38 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c06:	4b95      	ldr	r3, [pc, #596]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a94      	ldr	r2, [pc, #592]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c12:	f7ff fb1b 	bl	800124c <HAL_GetTick>
 8001c16:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c1a:	f7ff fb17 	bl	800124c <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e2ed      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001c2c:	4b8b      	ldr	r3, [pc, #556]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f003 0304 	and.w	r3, r3, #4
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d1f0      	bne.n	8001c1a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0310 	and.w	r3, r3, #16
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	f000 80a9 	beq.w	8001d98 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c46:	4b85      	ldr	r3, [pc, #532]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c48:	691b      	ldr	r3, [r3, #16]
 8001c4a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c4e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001c50:	4b82      	ldr	r3, [pc, #520]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c54:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d007      	beq.n	8001c6c <HAL_RCC_OscConfig+0x308>
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2b18      	cmp	r3, #24
 8001c60:	d13a      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x374>
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f003 0303 	and.w	r3, r3, #3
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d135      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001c6c:	4b7b      	ldr	r3, [pc, #492]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_OscConfig+0x320>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69db      	ldr	r3, [r3, #28]
 8001c7c:	2b80      	cmp	r3, #128	@ 0x80
 8001c7e:	d001      	beq.n	8001c84 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e2c1      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001c84:	f7ff fb12 	bl	80012ac <HAL_GetREVID>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d817      	bhi.n	8001cc2 <HAL_RCC_OscConfig+0x35e>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1b      	ldr	r3, [r3, #32]
 8001c96:	2b20      	cmp	r3, #32
 8001c98:	d108      	bne.n	8001cac <HAL_RCC_OscConfig+0x348>
 8001c9a:	4b70      	ldr	r3, [pc, #448]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001c9c:	685b      	ldr	r3, [r3, #4]
 8001c9e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001ca2:	4a6e      	ldr	r2, [pc, #440]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001ca4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ca8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001caa:	e075      	b.n	8001d98 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cac:	4b6b      	ldr	r3, [pc, #428]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a1b      	ldr	r3, [r3, #32]
 8001cb8:	069b      	lsls	r3, r3, #26
 8001cba:	4968      	ldr	r1, [pc, #416]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001cbc:	4313      	orrs	r3, r2
 8001cbe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cc0:	e06a      	b.n	8001d98 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001cc2:	4b66      	ldr	r3, [pc, #408]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	061b      	lsls	r3, r3, #24
 8001cd0:	4962      	ldr	r1, [pc, #392]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001cd6:	e05f      	b.n	8001d98 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	69db      	ldr	r3, [r3, #28]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d042      	beq.n	8001d66 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001ce0:	4b5e      	ldr	r3, [pc, #376]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a5d      	ldr	r2, [pc, #372]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001ce6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001cea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cec:	f7ff faae 	bl	800124c <HAL_GetTick>
 8001cf0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001cf2:	e008      	b.n	8001d06 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001cf4:	f7ff faaa 	bl	800124c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b02      	cmp	r3, #2
 8001d00:	d901      	bls.n	8001d06 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001d02:	2303      	movs	r3, #3
 8001d04:	e280      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001d06:	4b55      	ldr	r3, [pc, #340]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d0f0      	beq.n	8001cf4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001d12:	f7ff facb 	bl	80012ac <HAL_GetREVID>
 8001d16:	4603      	mov	r3, r0
 8001d18:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d817      	bhi.n	8001d50 <HAL_RCC_OscConfig+0x3ec>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a1b      	ldr	r3, [r3, #32]
 8001d24:	2b20      	cmp	r3, #32
 8001d26:	d108      	bne.n	8001d3a <HAL_RCC_OscConfig+0x3d6>
 8001d28:	4b4c      	ldr	r3, [pc, #304]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001d30:	4a4a      	ldr	r2, [pc, #296]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001d32:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001d36:	6053      	str	r3, [r2, #4]
 8001d38:	e02e      	b.n	8001d98 <HAL_RCC_OscConfig+0x434>
 8001d3a:	4b48      	ldr	r3, [pc, #288]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001d3c:	685b      	ldr	r3, [r3, #4]
 8001d3e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	069b      	lsls	r3, r3, #26
 8001d48:	4944      	ldr	r1, [pc, #272]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	604b      	str	r3, [r1, #4]
 8001d4e:	e023      	b.n	8001d98 <HAL_RCC_OscConfig+0x434>
 8001d50:	4b42      	ldr	r3, [pc, #264]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6a1b      	ldr	r3, [r3, #32]
 8001d5c:	061b      	lsls	r3, r3, #24
 8001d5e:	493f      	ldr	r1, [pc, #252]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001d60:	4313      	orrs	r3, r2
 8001d62:	60cb      	str	r3, [r1, #12]
 8001d64:	e018      	b.n	8001d98 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001d66:	4b3d      	ldr	r3, [pc, #244]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a3c      	ldr	r2, [pc, #240]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001d6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d72:	f7ff fa6b 	bl	800124c <HAL_GetTick>
 8001d76:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d78:	e008      	b.n	8001d8c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001d7a:	f7ff fa67 	bl	800124c <HAL_GetTick>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d82:	1ad3      	subs	r3, r2, r3
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	d901      	bls.n	8001d8c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001d88:	2303      	movs	r3, #3
 8001d8a:	e23d      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001d8c:	4b33      	ldr	r3, [pc, #204]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d1f0      	bne.n	8001d7a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0308 	and.w	r3, r3, #8
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d036      	beq.n	8001e12 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	695b      	ldr	r3, [r3, #20]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d019      	beq.n	8001de0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001dac:	4b2b      	ldr	r3, [pc, #172]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001dae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001db0:	4a2a      	ldr	r2, [pc, #168]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001db8:	f7ff fa48 	bl	800124c <HAL_GetTick>
 8001dbc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001dc0:	f7ff fa44 	bl	800124c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e21a      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001dd2:	4b22      	ldr	r3, [pc, #136]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001dd4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001dd6:	f003 0302 	and.w	r3, r3, #2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x45c>
 8001dde:	e018      	b.n	8001e12 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001de0:	4b1e      	ldr	r3, [pc, #120]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001de2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001de4:	4a1d      	ldr	r2, [pc, #116]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001de6:	f023 0301 	bic.w	r3, r3, #1
 8001dea:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dec:	f7ff fa2e 	bl	800124c <HAL_GetTick>
 8001df0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001df2:	e008      	b.n	8001e06 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001df4:	f7ff fa2a 	bl	800124c <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d901      	bls.n	8001e06 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001e02:	2303      	movs	r3, #3
 8001e04:	e200      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001e06:	4b15      	ldr	r3, [pc, #84]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001e08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001e0a:	f003 0302 	and.w	r3, r3, #2
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d1f0      	bne.n	8001df4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0320 	and.w	r3, r3, #32
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d039      	beq.n	8001e92 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	699b      	ldr	r3, [r3, #24]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d01c      	beq.n	8001e60 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001e26:	4b0d      	ldr	r3, [pc, #52]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001e2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001e30:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e32:	f7ff fa0b 	bl	800124c <HAL_GetTick>
 8001e36:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e38:	e008      	b.n	8001e4c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e3a:	f7ff fa07 	bl	800124c <HAL_GetTick>
 8001e3e:	4602      	mov	r2, r0
 8001e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e42:	1ad3      	subs	r3, r2, r3
 8001e44:	2b02      	cmp	r3, #2
 8001e46:	d901      	bls.n	8001e4c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001e48:	2303      	movs	r3, #3
 8001e4a:	e1dd      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001e4c:	4b03      	ldr	r3, [pc, #12]	@ (8001e5c <HAL_RCC_OscConfig+0x4f8>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d0f0      	beq.n	8001e3a <HAL_RCC_OscConfig+0x4d6>
 8001e58:	e01b      	b.n	8001e92 <HAL_RCC_OscConfig+0x52e>
 8001e5a:	bf00      	nop
 8001e5c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e60:	4b9b      	ldr	r3, [pc, #620]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a9a      	ldr	r2, [pc, #616]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001e66:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001e6a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001e6c:	f7ff f9ee 	bl	800124c <HAL_GetTick>
 8001e70:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e74:	f7ff f9ea 	bl	800124c <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e1c0      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001e86:	4b92      	ldr	r3, [pc, #584]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0304 	and.w	r3, r3, #4
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	f000 8081 	beq.w	8001fa2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001ea0:	4b8c      	ldr	r3, [pc, #560]	@ (80020d4 <HAL_RCC_OscConfig+0x770>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a8b      	ldr	r2, [pc, #556]	@ (80020d4 <HAL_RCC_OscConfig+0x770>)
 8001ea6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001eaa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001eac:	f7ff f9ce 	bl	800124c <HAL_GetTick>
 8001eb0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001eb2:	e008      	b.n	8001ec6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001eb4:	f7ff f9ca 	bl	800124c <HAL_GetTick>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ebc:	1ad3      	subs	r3, r2, r3
 8001ebe:	2b64      	cmp	r3, #100	@ 0x64
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e1a0      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ec6:	4b83      	ldr	r3, [pc, #524]	@ (80020d4 <HAL_RCC_OscConfig+0x770>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d0f0      	beq.n	8001eb4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	689b      	ldr	r3, [r3, #8]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	d106      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x584>
 8001eda:	4b7d      	ldr	r3, [pc, #500]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ede:	4a7c      	ldr	r2, [pc, #496]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ee6:	e02d      	b.n	8001f44 <HAL_RCC_OscConfig+0x5e0>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d10c      	bne.n	8001f0a <HAL_RCC_OscConfig+0x5a6>
 8001ef0:	4b77      	ldr	r3, [pc, #476]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001ef2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ef4:	4a76      	ldr	r2, [pc, #472]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001ef6:	f023 0301 	bic.w	r3, r3, #1
 8001efa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001efc:	4b74      	ldr	r3, [pc, #464]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001efe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f00:	4a73      	ldr	r2, [pc, #460]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001f02:	f023 0304 	bic.w	r3, r3, #4
 8001f06:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f08:	e01c      	b.n	8001f44 <HAL_RCC_OscConfig+0x5e0>
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	2b05      	cmp	r3, #5
 8001f10:	d10c      	bne.n	8001f2c <HAL_RCC_OscConfig+0x5c8>
 8001f12:	4b6f      	ldr	r3, [pc, #444]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f16:	4a6e      	ldr	r2, [pc, #440]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001f18:	f043 0304 	orr.w	r3, r3, #4
 8001f1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f1e:	4b6c      	ldr	r3, [pc, #432]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001f20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f22:	4a6b      	ldr	r2, [pc, #428]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f2a:	e00b      	b.n	8001f44 <HAL_RCC_OscConfig+0x5e0>
 8001f2c:	4b68      	ldr	r3, [pc, #416]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001f2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f30:	4a67      	ldr	r2, [pc, #412]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001f32:	f023 0301 	bic.w	r3, r3, #1
 8001f36:	6713      	str	r3, [r2, #112]	@ 0x70
 8001f38:	4b65      	ldr	r3, [pc, #404]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001f3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f3c:	4a64      	ldr	r2, [pc, #400]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001f3e:	f023 0304 	bic.w	r3, r3, #4
 8001f42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	689b      	ldr	r3, [r3, #8]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d015      	beq.n	8001f78 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4c:	f7ff f97e 	bl	800124c <HAL_GetTick>
 8001f50:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f52:	e00a      	b.n	8001f6a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f54:	f7ff f97a 	bl	800124c <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e14e      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001f6a:	4b59      	ldr	r3, [pc, #356]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001f6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f6e:	f003 0302 	and.w	r3, r3, #2
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d0ee      	beq.n	8001f54 <HAL_RCC_OscConfig+0x5f0>
 8001f76:	e014      	b.n	8001fa2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f78:	f7ff f968 	bl	800124c <HAL_GetTick>
 8001f7c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f7e:	e00a      	b.n	8001f96 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f80:	f7ff f964 	bl	800124c <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e138      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001f96:	4b4e      	ldr	r3, [pc, #312]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001f98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001f9a:	f003 0302 	and.w	r3, r3, #2
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1ee      	bne.n	8001f80 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 812d 	beq.w	8002206 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001fac:	4b48      	ldr	r3, [pc, #288]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001fb4:	2b18      	cmp	r3, #24
 8001fb6:	f000 80bd 	beq.w	8002134 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fbe:	2b02      	cmp	r3, #2
 8001fc0:	f040 809e 	bne.w	8002100 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fc4:	4b42      	ldr	r3, [pc, #264]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a41      	ldr	r2, [pc, #260]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001fca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001fce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fd0:	f7ff f93c 	bl	800124c <HAL_GetTick>
 8001fd4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fd8:	f7ff f938 	bl	800124c <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b02      	cmp	r3, #2
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e10e      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001fea:	4b39      	ldr	r3, [pc, #228]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d1f0      	bne.n	8001fd8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ff6:	4b36      	ldr	r3, [pc, #216]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8001ff8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ffa:	4b37      	ldr	r3, [pc, #220]	@ (80020d8 <HAL_RCC_OscConfig+0x774>)
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	687a      	ldr	r2, [r7, #4]
 8002000:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002006:	0112      	lsls	r2, r2, #4
 8002008:	430a      	orrs	r2, r1
 800200a:	4931      	ldr	r1, [pc, #196]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 800200c:	4313      	orrs	r3, r2
 800200e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002014:	3b01      	subs	r3, #1
 8002016:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800201e:	3b01      	subs	r3, #1
 8002020:	025b      	lsls	r3, r3, #9
 8002022:	b29b      	uxth	r3, r3
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800202a:	3b01      	subs	r3, #1
 800202c:	041b      	lsls	r3, r3, #16
 800202e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002032:	431a      	orrs	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002038:	3b01      	subs	r3, #1
 800203a:	061b      	lsls	r3, r3, #24
 800203c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002040:	4923      	ldr	r1, [pc, #140]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8002042:	4313      	orrs	r3, r2
 8002044:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002046:	4b22      	ldr	r3, [pc, #136]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8002048:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800204a:	4a21      	ldr	r2, [pc, #132]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 800204c:	f023 0301 	bic.w	r3, r3, #1
 8002050:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002052:	4b1f      	ldr	r3, [pc, #124]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8002054:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002056:	4b21      	ldr	r3, [pc, #132]	@ (80020dc <HAL_RCC_OscConfig+0x778>)
 8002058:	4013      	ands	r3, r2
 800205a:	687a      	ldr	r2, [r7, #4]
 800205c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800205e:	00d2      	lsls	r2, r2, #3
 8002060:	491b      	ldr	r1, [pc, #108]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8002062:	4313      	orrs	r3, r2
 8002064:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002066:	4b1a      	ldr	r3, [pc, #104]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8002068:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800206a:	f023 020c 	bic.w	r2, r3, #12
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	4917      	ldr	r1, [pc, #92]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8002074:	4313      	orrs	r3, r2
 8002076:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002078:	4b15      	ldr	r3, [pc, #84]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 800207a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800207c:	f023 0202 	bic.w	r2, r3, #2
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002084:	4912      	ldr	r1, [pc, #72]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8002086:	4313      	orrs	r3, r2
 8002088:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800208a:	4b11      	ldr	r3, [pc, #68]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 800208c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800208e:	4a10      	ldr	r2, [pc, #64]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8002090:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002094:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002096:	4b0e      	ldr	r3, [pc, #56]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 8002098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800209a:	4a0d      	ldr	r2, [pc, #52]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 800209c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80020a2:	4b0b      	ldr	r3, [pc, #44]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 80020a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020a6:	4a0a      	ldr	r2, [pc, #40]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 80020a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020ac:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80020ae:	4b08      	ldr	r3, [pc, #32]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 80020b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80020b2:	4a07      	ldr	r2, [pc, #28]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80020ba:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a04      	ldr	r2, [pc, #16]	@ (80020d0 <HAL_RCC_OscConfig+0x76c>)
 80020c0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80020c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c6:	f7ff f8c1 	bl	800124c <HAL_GetTick>
 80020ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020cc:	e011      	b.n	80020f2 <HAL_RCC_OscConfig+0x78e>
 80020ce:	bf00      	nop
 80020d0:	58024400 	.word	0x58024400
 80020d4:	58024800 	.word	0x58024800
 80020d8:	fffffc0c 	.word	0xfffffc0c
 80020dc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020e0:	f7ff f8b4 	bl	800124c <HAL_GetTick>
 80020e4:	4602      	mov	r2, r0
 80020e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e08a      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80020f2:	4b47      	ldr	r3, [pc, #284]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d0f0      	beq.n	80020e0 <HAL_RCC_OscConfig+0x77c>
 80020fe:	e082      	b.n	8002206 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002100:	4b43      	ldr	r3, [pc, #268]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a42      	ldr	r2, [pc, #264]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 8002106:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800210a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800210c:	f7ff f89e 	bl	800124c <HAL_GetTick>
 8002110:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002112:	e008      	b.n	8002126 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002114:	f7ff f89a 	bl	800124c <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	2b02      	cmp	r3, #2
 8002120:	d901      	bls.n	8002126 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002122:	2303      	movs	r3, #3
 8002124:	e070      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002126:	4b3a      	ldr	r3, [pc, #232]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d1f0      	bne.n	8002114 <HAL_RCC_OscConfig+0x7b0>
 8002132:	e068      	b.n	8002206 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002134:	4b36      	ldr	r3, [pc, #216]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 8002136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002138:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800213a:	4b35      	ldr	r3, [pc, #212]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800213e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002144:	2b01      	cmp	r3, #1
 8002146:	d031      	beq.n	80021ac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	f003 0203 	and.w	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002152:	429a      	cmp	r2, r3
 8002154:	d12a      	bne.n	80021ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002156:	693b      	ldr	r3, [r7, #16]
 8002158:	091b      	lsrs	r3, r3, #4
 800215a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002162:	429a      	cmp	r2, r3
 8002164:	d122      	bne.n	80021ac <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002170:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002172:	429a      	cmp	r2, r3
 8002174:	d11a      	bne.n	80021ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	0a5b      	lsrs	r3, r3, #9
 800217a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002182:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002184:	429a      	cmp	r2, r3
 8002186:	d111      	bne.n	80021ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	0c1b      	lsrs	r3, r3, #16
 800218c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002194:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002196:	429a      	cmp	r2, r3
 8002198:	d108      	bne.n	80021ac <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	0e1b      	lsrs	r3, r3, #24
 800219e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021a6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80021a8:	429a      	cmp	r2, r3
 80021aa:	d001      	beq.n	80021b0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e02b      	b.n	8002208 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80021b0:	4b17      	ldr	r3, [pc, #92]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 80021b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021b4:	08db      	lsrs	r3, r3, #3
 80021b6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80021ba:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021c0:	693a      	ldr	r2, [r7, #16]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d01f      	beq.n	8002206 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80021c6:	4b12      	ldr	r3, [pc, #72]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 80021c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021ca:	4a11      	ldr	r2, [pc, #68]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 80021cc:	f023 0301 	bic.w	r3, r3, #1
 80021d0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80021d2:	f7ff f83b 	bl	800124c <HAL_GetTick>
 80021d6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80021d8:	bf00      	nop
 80021da:	f7ff f837 	bl	800124c <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d0f9      	beq.n	80021da <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80021e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 80021e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80021ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002214 <HAL_RCC_OscConfig+0x8b0>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80021f2:	00d2      	lsls	r2, r2, #3
 80021f4:	4906      	ldr	r1, [pc, #24]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80021fa:	4b05      	ldr	r3, [pc, #20]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 80021fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80021fe:	4a04      	ldr	r2, [pc, #16]	@ (8002210 <HAL_RCC_OscConfig+0x8ac>)
 8002200:	f043 0301 	orr.w	r3, r3, #1
 8002204:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
}
 8002208:	4618      	mov	r0, r3
 800220a:	3730      	adds	r7, #48	@ 0x30
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	58024400 	.word	0x58024400
 8002214:	ffff0007 	.word	0xffff0007

08002218 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e19c      	b.n	8002566 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800222c:	4b8a      	ldr	r3, [pc, #552]	@ (8002458 <HAL_RCC_ClockConfig+0x240>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	683a      	ldr	r2, [r7, #0]
 8002236:	429a      	cmp	r2, r3
 8002238:	d910      	bls.n	800225c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800223a:	4b87      	ldr	r3, [pc, #540]	@ (8002458 <HAL_RCC_ClockConfig+0x240>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f023 020f 	bic.w	r2, r3, #15
 8002242:	4985      	ldr	r1, [pc, #532]	@ (8002458 <HAL_RCC_ClockConfig+0x240>)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	4313      	orrs	r3, r2
 8002248:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800224a:	4b83      	ldr	r3, [pc, #524]	@ (8002458 <HAL_RCC_ClockConfig+0x240>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f003 030f 	and.w	r3, r3, #15
 8002252:	683a      	ldr	r2, [r7, #0]
 8002254:	429a      	cmp	r2, r3
 8002256:	d001      	beq.n	800225c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e184      	b.n	8002566 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b00      	cmp	r3, #0
 8002266:	d010      	beq.n	800228a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	691a      	ldr	r2, [r3, #16]
 800226c:	4b7b      	ldr	r3, [pc, #492]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 800226e:	699b      	ldr	r3, [r3, #24]
 8002270:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002274:	429a      	cmp	r2, r3
 8002276:	d908      	bls.n	800228a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002278:	4b78      	ldr	r3, [pc, #480]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	4975      	ldr	r1, [pc, #468]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 8002286:	4313      	orrs	r3, r2
 8002288:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0308 	and.w	r3, r3, #8
 8002292:	2b00      	cmp	r3, #0
 8002294:	d010      	beq.n	80022b8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	695a      	ldr	r2, [r3, #20]
 800229a:	4b70      	ldr	r3, [pc, #448]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 800229c:	69db      	ldr	r3, [r3, #28]
 800229e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022a2:	429a      	cmp	r2, r3
 80022a4:	d908      	bls.n	80022b8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80022a6:	4b6d      	ldr	r3, [pc, #436]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 80022a8:	69db      	ldr	r3, [r3, #28]
 80022aa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	695b      	ldr	r3, [r3, #20]
 80022b2:	496a      	ldr	r1, [pc, #424]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0310 	and.w	r3, r3, #16
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d010      	beq.n	80022e6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	699a      	ldr	r2, [r3, #24]
 80022c8:	4b64      	ldr	r3, [pc, #400]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 80022ca:	69db      	ldr	r3, [r3, #28]
 80022cc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d908      	bls.n	80022e6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022d4:	4b61      	ldr	r3, [pc, #388]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	495e      	ldr	r1, [pc, #376]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0320 	and.w	r3, r3, #32
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d010      	beq.n	8002314 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69da      	ldr	r2, [r3, #28]
 80022f6:	4b59      	ldr	r3, [pc, #356]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 80022f8:	6a1b      	ldr	r3, [r3, #32]
 80022fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80022fe:	429a      	cmp	r2, r3
 8002300:	d908      	bls.n	8002314 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002302:	4b56      	ldr	r3, [pc, #344]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 8002304:	6a1b      	ldr	r3, [r3, #32]
 8002306:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
 800230e:	4953      	ldr	r1, [pc, #332]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 8002310:	4313      	orrs	r3, r2
 8002312:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0302 	and.w	r3, r3, #2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d010      	beq.n	8002342 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	68da      	ldr	r2, [r3, #12]
 8002324:	4b4d      	ldr	r3, [pc, #308]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	f003 030f 	and.w	r3, r3, #15
 800232c:	429a      	cmp	r2, r3
 800232e:	d908      	bls.n	8002342 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002330:	4b4a      	ldr	r3, [pc, #296]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 8002332:	699b      	ldr	r3, [r3, #24]
 8002334:	f023 020f 	bic.w	r2, r3, #15
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4947      	ldr	r1, [pc, #284]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 800233e:	4313      	orrs	r3, r2
 8002340:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	2b00      	cmp	r3, #0
 800234c:	d055      	beq.n	80023fa <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800234e:	4b43      	ldr	r3, [pc, #268]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 8002350:	699b      	ldr	r3, [r3, #24]
 8002352:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	4940      	ldr	r1, [pc, #256]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 800235c:	4313      	orrs	r3, r2
 800235e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	2b02      	cmp	r3, #2
 8002366:	d107      	bne.n	8002378 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002368:	4b3c      	ldr	r3, [pc, #240]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002370:	2b00      	cmp	r3, #0
 8002372:	d121      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002374:	2301      	movs	r3, #1
 8002376:	e0f6      	b.n	8002566 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b03      	cmp	r3, #3
 800237e:	d107      	bne.n	8002390 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002380:	4b36      	ldr	r3, [pc, #216]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d115      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800238c:	2301      	movs	r3, #1
 800238e:	e0ea      	b.n	8002566 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002398:	4b30      	ldr	r3, [pc, #192]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d109      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0de      	b.n	8002566 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023a8:	4b2c      	ldr	r3, [pc, #176]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d101      	bne.n	80023b8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80023b4:	2301      	movs	r3, #1
 80023b6:	e0d6      	b.n	8002566 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023b8:	4b28      	ldr	r3, [pc, #160]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	f023 0207 	bic.w	r2, r3, #7
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	4925      	ldr	r1, [pc, #148]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 80023c6:	4313      	orrs	r3, r2
 80023c8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ca:	f7fe ff3f 	bl	800124c <HAL_GetTick>
 80023ce:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d0:	e00a      	b.n	80023e8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d2:	f7fe ff3b 	bl	800124c <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e0be      	b.n	8002566 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023e8:	4b1c      	ldr	r3, [pc, #112]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 80023ea:	691b      	ldr	r3, [r3, #16]
 80023ec:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	429a      	cmp	r2, r3
 80023f8:	d1eb      	bne.n	80023d2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d010      	beq.n	8002428 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68da      	ldr	r2, [r3, #12]
 800240a:	4b14      	ldr	r3, [pc, #80]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 800240c:	699b      	ldr	r3, [r3, #24]
 800240e:	f003 030f 	and.w	r3, r3, #15
 8002412:	429a      	cmp	r2, r3
 8002414:	d208      	bcs.n	8002428 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002416:	4b11      	ldr	r3, [pc, #68]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 8002418:	699b      	ldr	r3, [r3, #24]
 800241a:	f023 020f 	bic.w	r2, r3, #15
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	68db      	ldr	r3, [r3, #12]
 8002422:	490e      	ldr	r1, [pc, #56]	@ (800245c <HAL_RCC_ClockConfig+0x244>)
 8002424:	4313      	orrs	r3, r2
 8002426:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002428:	4b0b      	ldr	r3, [pc, #44]	@ (8002458 <HAL_RCC_ClockConfig+0x240>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d214      	bcs.n	8002460 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002436:	4b08      	ldr	r3, [pc, #32]	@ (8002458 <HAL_RCC_ClockConfig+0x240>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f023 020f 	bic.w	r2, r3, #15
 800243e:	4906      	ldr	r1, [pc, #24]	@ (8002458 <HAL_RCC_ClockConfig+0x240>)
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	4313      	orrs	r3, r2
 8002444:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002446:	4b04      	ldr	r3, [pc, #16]	@ (8002458 <HAL_RCC_ClockConfig+0x240>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 030f 	and.w	r3, r3, #15
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	429a      	cmp	r2, r3
 8002452:	d005      	beq.n	8002460 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e086      	b.n	8002566 <HAL_RCC_ClockConfig+0x34e>
 8002458:	52002000 	.word	0x52002000
 800245c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d010      	beq.n	800248e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	691a      	ldr	r2, [r3, #16]
 8002470:	4b3f      	ldr	r3, [pc, #252]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 8002472:	699b      	ldr	r3, [r3, #24]
 8002474:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002478:	429a      	cmp	r2, r3
 800247a:	d208      	bcs.n	800248e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800247c:	4b3c      	ldr	r3, [pc, #240]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 800247e:	699b      	ldr	r3, [r3, #24]
 8002480:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	691b      	ldr	r3, [r3, #16]
 8002488:	4939      	ldr	r1, [pc, #228]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 800248a:	4313      	orrs	r3, r2
 800248c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d010      	beq.n	80024bc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695a      	ldr	r2, [r3, #20]
 800249e:	4b34      	ldr	r3, [pc, #208]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 80024a0:	69db      	ldr	r3, [r3, #28]
 80024a2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d208      	bcs.n	80024bc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80024aa:	4b31      	ldr	r3, [pc, #196]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 80024ac:	69db      	ldr	r3, [r3, #28]
 80024ae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	695b      	ldr	r3, [r3, #20]
 80024b6:	492e      	ldr	r1, [pc, #184]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f003 0310 	and.w	r3, r3, #16
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d010      	beq.n	80024ea <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	699a      	ldr	r2, [r3, #24]
 80024cc:	4b28      	ldr	r3, [pc, #160]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 80024ce:	69db      	ldr	r3, [r3, #28]
 80024d0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d208      	bcs.n	80024ea <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80024d8:	4b25      	ldr	r3, [pc, #148]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 80024da:	69db      	ldr	r3, [r3, #28]
 80024dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	699b      	ldr	r3, [r3, #24]
 80024e4:	4922      	ldr	r1, [pc, #136]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f003 0320 	and.w	r3, r3, #32
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d010      	beq.n	8002518 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	69da      	ldr	r2, [r3, #28]
 80024fa:	4b1d      	ldr	r3, [pc, #116]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002502:	429a      	cmp	r2, r3
 8002504:	d208      	bcs.n	8002518 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002506:	4b1a      	ldr	r3, [pc, #104]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 8002508:	6a1b      	ldr	r3, [r3, #32]
 800250a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	4917      	ldr	r1, [pc, #92]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 8002514:	4313      	orrs	r3, r2
 8002516:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002518:	f000 f834 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 800251c:	4602      	mov	r2, r0
 800251e:	4b14      	ldr	r3, [pc, #80]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 8002520:	699b      	ldr	r3, [r3, #24]
 8002522:	0a1b      	lsrs	r3, r3, #8
 8002524:	f003 030f 	and.w	r3, r3, #15
 8002528:	4912      	ldr	r1, [pc, #72]	@ (8002574 <HAL_RCC_ClockConfig+0x35c>)
 800252a:	5ccb      	ldrb	r3, [r1, r3]
 800252c:	f003 031f 	and.w	r3, r3, #31
 8002530:	fa22 f303 	lsr.w	r3, r2, r3
 8002534:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002536:	4b0e      	ldr	r3, [pc, #56]	@ (8002570 <HAL_RCC_ClockConfig+0x358>)
 8002538:	699b      	ldr	r3, [r3, #24]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	4a0d      	ldr	r2, [pc, #52]	@ (8002574 <HAL_RCC_ClockConfig+0x35c>)
 8002540:	5cd3      	ldrb	r3, [r2, r3]
 8002542:	f003 031f 	and.w	r3, r3, #31
 8002546:	693a      	ldr	r2, [r7, #16]
 8002548:	fa22 f303 	lsr.w	r3, r2, r3
 800254c:	4a0a      	ldr	r2, [pc, #40]	@ (8002578 <HAL_RCC_ClockConfig+0x360>)
 800254e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002550:	4a0a      	ldr	r2, [pc, #40]	@ (800257c <HAL_RCC_ClockConfig+0x364>)
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002556:	4b0a      	ldr	r3, [pc, #40]	@ (8002580 <HAL_RCC_ClockConfig+0x368>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f7fe fe2c 	bl	80011b8 <HAL_InitTick>
 8002560:	4603      	mov	r3, r0
 8002562:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002564:	7bfb      	ldrb	r3, [r7, #15]
}
 8002566:	4618      	mov	r0, r3
 8002568:	3718      	adds	r7, #24
 800256a:	46bd      	mov	sp, r7
 800256c:	bd80      	pop	{r7, pc}
 800256e:	bf00      	nop
 8002570:	58024400 	.word	0x58024400
 8002574:	0800603c 	.word	0x0800603c
 8002578:	24000004 	.word	0x24000004
 800257c:	24000000 	.word	0x24000000
 8002580:	2400000c 	.word	0x2400000c

08002584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002584:	b480      	push	{r7}
 8002586:	b089      	sub	sp, #36	@ 0x24
 8002588:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800258a:	4bb3      	ldr	r3, [pc, #716]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002592:	2b18      	cmp	r3, #24
 8002594:	f200 8155 	bhi.w	8002842 <HAL_RCC_GetSysClockFreq+0x2be>
 8002598:	a201      	add	r2, pc, #4	@ (adr r2, 80025a0 <HAL_RCC_GetSysClockFreq+0x1c>)
 800259a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800259e:	bf00      	nop
 80025a0:	08002605 	.word	0x08002605
 80025a4:	08002843 	.word	0x08002843
 80025a8:	08002843 	.word	0x08002843
 80025ac:	08002843 	.word	0x08002843
 80025b0:	08002843 	.word	0x08002843
 80025b4:	08002843 	.word	0x08002843
 80025b8:	08002843 	.word	0x08002843
 80025bc:	08002843 	.word	0x08002843
 80025c0:	0800262b 	.word	0x0800262b
 80025c4:	08002843 	.word	0x08002843
 80025c8:	08002843 	.word	0x08002843
 80025cc:	08002843 	.word	0x08002843
 80025d0:	08002843 	.word	0x08002843
 80025d4:	08002843 	.word	0x08002843
 80025d8:	08002843 	.word	0x08002843
 80025dc:	08002843 	.word	0x08002843
 80025e0:	08002631 	.word	0x08002631
 80025e4:	08002843 	.word	0x08002843
 80025e8:	08002843 	.word	0x08002843
 80025ec:	08002843 	.word	0x08002843
 80025f0:	08002843 	.word	0x08002843
 80025f4:	08002843 	.word	0x08002843
 80025f8:	08002843 	.word	0x08002843
 80025fc:	08002843 	.word	0x08002843
 8002600:	08002637 	.word	0x08002637
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002604:	4b94      	ldr	r3, [pc, #592]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0320 	and.w	r3, r3, #32
 800260c:	2b00      	cmp	r3, #0
 800260e:	d009      	beq.n	8002624 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002610:	4b91      	ldr	r3, [pc, #580]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	08db      	lsrs	r3, r3, #3
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	4a90      	ldr	r2, [pc, #576]	@ (800285c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800261c:	fa22 f303 	lsr.w	r3, r2, r3
 8002620:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002622:	e111      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002624:	4b8d      	ldr	r3, [pc, #564]	@ (800285c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002626:	61bb      	str	r3, [r7, #24]
      break;
 8002628:	e10e      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800262a:	4b8d      	ldr	r3, [pc, #564]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800262c:	61bb      	str	r3, [r7, #24]
      break;
 800262e:	e10b      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002630:	4b8c      	ldr	r3, [pc, #560]	@ (8002864 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002632:	61bb      	str	r3, [r7, #24]
      break;
 8002634:	e108      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002636:	4b88      	ldr	r3, [pc, #544]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002638:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800263a:	f003 0303 	and.w	r3, r3, #3
 800263e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002640:	4b85      	ldr	r3, [pc, #532]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002644:	091b      	lsrs	r3, r3, #4
 8002646:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800264a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800264c:	4b82      	ldr	r3, [pc, #520]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800264e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002650:	f003 0301 	and.w	r3, r3, #1
 8002654:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002656:	4b80      	ldr	r3, [pc, #512]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002658:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800265a:	08db      	lsrs	r3, r3, #3
 800265c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	fb02 f303 	mul.w	r3, r2, r3
 8002666:	ee07 3a90 	vmov	s15, r3
 800266a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800266e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	2b00      	cmp	r3, #0
 8002676:	f000 80e1 	beq.w	800283c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800267a:	697b      	ldr	r3, [r7, #20]
 800267c:	2b02      	cmp	r3, #2
 800267e:	f000 8083 	beq.w	8002788 <HAL_RCC_GetSysClockFreq+0x204>
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	2b02      	cmp	r3, #2
 8002686:	f200 80a1 	bhi.w	80027cc <HAL_RCC_GetSysClockFreq+0x248>
 800268a:	697b      	ldr	r3, [r7, #20]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d003      	beq.n	8002698 <HAL_RCC_GetSysClockFreq+0x114>
 8002690:	697b      	ldr	r3, [r7, #20]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d056      	beq.n	8002744 <HAL_RCC_GetSysClockFreq+0x1c0>
 8002696:	e099      	b.n	80027cc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002698:	4b6f      	ldr	r3, [pc, #444]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d02d      	beq.n	8002700 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80026a4:	4b6c      	ldr	r3, [pc, #432]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	08db      	lsrs	r3, r3, #3
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	4a6b      	ldr	r2, [pc, #428]	@ (800285c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80026b0:	fa22 f303 	lsr.w	r3, r2, r3
 80026b4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	ee07 3a90 	vmov	s15, r3
 80026bc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	ee07 3a90 	vmov	s15, r3
 80026c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80026ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80026ce:	4b62      	ldr	r3, [pc, #392]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80026d6:	ee07 3a90 	vmov	s15, r3
 80026da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80026de:	ed97 6a02 	vldr	s12, [r7, #8]
 80026e2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002868 <HAL_RCC_GetSysClockFreq+0x2e4>
 80026e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80026ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80026ee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80026f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80026f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026fa:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80026fe:	e087      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	ee07 3a90 	vmov	s15, r3
 8002706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800270a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800286c <HAL_RCC_GetSysClockFreq+0x2e8>
 800270e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002712:	4b51      	ldr	r3, [pc, #324]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002714:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002716:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800271a:	ee07 3a90 	vmov	s15, r3
 800271e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002722:	ed97 6a02 	vldr	s12, [r7, #8]
 8002726:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002868 <HAL_RCC_GetSysClockFreq+0x2e4>
 800272a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800272e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002732:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002736:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800273a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800273e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002742:	e065      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	ee07 3a90 	vmov	s15, r3
 800274a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800274e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002870 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002752:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002756:	4b40      	ldr	r3, [pc, #256]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800275e:	ee07 3a90 	vmov	s15, r3
 8002762:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002766:	ed97 6a02 	vldr	s12, [r7, #8]
 800276a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002868 <HAL_RCC_GetSysClockFreq+0x2e4>
 800276e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002772:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002776:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800277a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800277e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002782:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002786:	e043      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	ee07 3a90 	vmov	s15, r3
 800278e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002792:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002874 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002796:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800279a:	4b2f      	ldr	r3, [pc, #188]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800279e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a2:	ee07 3a90 	vmov	s15, r3
 80027a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80027ae:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002868 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80027be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80027c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80027ca:	e021      	b.n	8002810 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	ee07 3a90 	vmov	s15, r3
 80027d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80027d6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002870 <HAL_RCC_GetSysClockFreq+0x2ec>
 80027da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027de:	4b1e      	ldr	r3, [pc, #120]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027e6:	ee07 3a90 	vmov	s15, r3
 80027ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80027ee:	ed97 6a02 	vldr	s12, [r7, #8]
 80027f2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002868 <HAL_RCC_GetSysClockFreq+0x2e4>
 80027f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80027fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80027fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002802:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002806:	ee67 7a27 	vmul.f32	s15, s14, s15
 800280a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800280e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002810:	4b11      	ldr	r3, [pc, #68]	@ (8002858 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002812:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002814:	0a5b      	lsrs	r3, r3, #9
 8002816:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800281a:	3301      	adds	r3, #1
 800281c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	ee07 3a90 	vmov	s15, r3
 8002824:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002828:	edd7 6a07 	vldr	s13, [r7, #28]
 800282c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002830:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002834:	ee17 3a90 	vmov	r3, s15
 8002838:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800283a:	e005      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	61bb      	str	r3, [r7, #24]
      break;
 8002840:	e002      	b.n	8002848 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002842:	4b07      	ldr	r3, [pc, #28]	@ (8002860 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002844:	61bb      	str	r3, [r7, #24]
      break;
 8002846:	bf00      	nop
  }

  return sysclockfreq;
 8002848:	69bb      	ldr	r3, [r7, #24]
}
 800284a:	4618      	mov	r0, r3
 800284c:	3724      	adds	r7, #36	@ 0x24
 800284e:	46bd      	mov	sp, r7
 8002850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002854:	4770      	bx	lr
 8002856:	bf00      	nop
 8002858:	58024400 	.word	0x58024400
 800285c:	03d09000 	.word	0x03d09000
 8002860:	003d0900 	.word	0x003d0900
 8002864:	017d7840 	.word	0x017d7840
 8002868:	46000000 	.word	0x46000000
 800286c:	4c742400 	.word	0x4c742400
 8002870:	4a742400 	.word	0x4a742400
 8002874:	4bbebc20 	.word	0x4bbebc20

08002878 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800287e:	f7ff fe81 	bl	8002584 <HAL_RCC_GetSysClockFreq>
 8002882:	4602      	mov	r2, r0
 8002884:	4b10      	ldr	r3, [pc, #64]	@ (80028c8 <HAL_RCC_GetHCLKFreq+0x50>)
 8002886:	699b      	ldr	r3, [r3, #24]
 8002888:	0a1b      	lsrs	r3, r3, #8
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	490f      	ldr	r1, [pc, #60]	@ (80028cc <HAL_RCC_GetHCLKFreq+0x54>)
 8002890:	5ccb      	ldrb	r3, [r1, r3]
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	fa22 f303 	lsr.w	r3, r2, r3
 800289a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800289c:	4b0a      	ldr	r3, [pc, #40]	@ (80028c8 <HAL_RCC_GetHCLKFreq+0x50>)
 800289e:	699b      	ldr	r3, [r3, #24]
 80028a0:	f003 030f 	and.w	r3, r3, #15
 80028a4:	4a09      	ldr	r2, [pc, #36]	@ (80028cc <HAL_RCC_GetHCLKFreq+0x54>)
 80028a6:	5cd3      	ldrb	r3, [r2, r3]
 80028a8:	f003 031f 	and.w	r3, r3, #31
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	fa22 f303 	lsr.w	r3, r2, r3
 80028b2:	4a07      	ldr	r2, [pc, #28]	@ (80028d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80028b4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028b6:	4a07      	ldr	r2, [pc, #28]	@ (80028d4 <HAL_RCC_GetHCLKFreq+0x5c>)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80028bc:	4b04      	ldr	r3, [pc, #16]	@ (80028d0 <HAL_RCC_GetHCLKFreq+0x58>)
 80028be:	681b      	ldr	r3, [r3, #0]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	3708      	adds	r7, #8
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	58024400 	.word	0x58024400
 80028cc:	0800603c 	.word	0x0800603c
 80028d0:	24000004 	.word	0x24000004
 80028d4:	24000000 	.word	0x24000000

080028d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80028dc:	f7ff ffcc 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 80028e0:	4602      	mov	r2, r0
 80028e2:	4b06      	ldr	r3, [pc, #24]	@ (80028fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	091b      	lsrs	r3, r3, #4
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	4904      	ldr	r1, [pc, #16]	@ (8002900 <HAL_RCC_GetPCLK1Freq+0x28>)
 80028ee:	5ccb      	ldrb	r3, [r1, r3]
 80028f0:	f003 031f 	and.w	r3, r3, #31
 80028f4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	58024400 	.word	0x58024400
 8002900:	0800603c 	.word	0x0800603c

08002904 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002908:	f7ff ffb6 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 800290c:	4602      	mov	r2, r0
 800290e:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002910:	69db      	ldr	r3, [r3, #28]
 8002912:	0a1b      	lsrs	r3, r3, #8
 8002914:	f003 0307 	and.w	r3, r3, #7
 8002918:	4904      	ldr	r1, [pc, #16]	@ (800292c <HAL_RCC_GetPCLK2Freq+0x28>)
 800291a:	5ccb      	ldrb	r3, [r1, r3]
 800291c:	f003 031f 	and.w	r3, r3, #31
 8002920:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002924:	4618      	mov	r0, r3
 8002926:	bd80      	pop	{r7, pc}
 8002928:	58024400 	.word	0x58024400
 800292c:	0800603c 	.word	0x0800603c

08002930 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002934:	f7ff ffa0 	bl	8002878 <HAL_RCC_GetHCLKFreq>
 8002938:	4602      	mov	r2, r0
 800293a:	4b06      	ldr	r3, [pc, #24]	@ (8002954 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800293c:	6a1b      	ldr	r3, [r3, #32]
 800293e:	091b      	lsrs	r3, r3, #4
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	4904      	ldr	r1, [pc, #16]	@ (8002958 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002946:	5ccb      	ldrb	r3, [r1, r3]
 8002948:	f003 031f 	and.w	r3, r3, #31
 800294c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002950:	4618      	mov	r0, r3
 8002952:	bd80      	pop	{r7, pc}
 8002954:	58024400 	.word	0x58024400
 8002958:	0800603c 	.word	0x0800603c

0800295c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800295c:	b480      	push	{r7}
 800295e:	b089      	sub	sp, #36	@ 0x24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002964:	4ba1      	ldr	r3, [pc, #644]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002968:	f003 0303 	and.w	r3, r3, #3
 800296c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800296e:	4b9f      	ldr	r3, [pc, #636]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002970:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002972:	0b1b      	lsrs	r3, r3, #12
 8002974:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002978:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800297a:	4b9c      	ldr	r3, [pc, #624]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800297c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800297e:	091b      	lsrs	r3, r3, #4
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8002986:	4b99      	ldr	r3, [pc, #612]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002988:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800298a:	08db      	lsrs	r3, r3, #3
 800298c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002990:	693a      	ldr	r2, [r7, #16]
 8002992:	fb02 f303 	mul.w	r3, r2, r3
 8002996:	ee07 3a90 	vmov	s15, r3
 800299a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800299e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 80029a2:	697b      	ldr	r3, [r7, #20]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	f000 8111 	beq.w	8002bcc <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	f000 8083 	beq.w	8002ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	2b02      	cmp	r3, #2
 80029b6:	f200 80a1 	bhi.w	8002afc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 80029ba:	69bb      	ldr	r3, [r7, #24]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 80029c0:	69bb      	ldr	r3, [r7, #24]
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d056      	beq.n	8002a74 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 80029c6:	e099      	b.n	8002afc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029c8:	4b88      	ldr	r3, [pc, #544]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0320 	and.w	r3, r3, #32
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d02d      	beq.n	8002a30 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029d4:	4b85      	ldr	r3, [pc, #532]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	08db      	lsrs	r3, r3, #3
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	4a84      	ldr	r2, [pc, #528]	@ (8002bf0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80029e0:	fa22 f303 	lsr.w	r3, r2, r3
 80029e4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	ee07 3a90 	vmov	s15, r3
 80029ec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80029f0:	697b      	ldr	r3, [r7, #20]
 80029f2:	ee07 3a90 	vmov	s15, r3
 80029f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80029fe:	4b7b      	ldr	r3, [pc, #492]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a06:	ee07 3a90 	vmov	s15, r3
 8002a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a12:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002a2e:	e087      	b.n	8002b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	ee07 3a90 	vmov	s15, r3
 8002a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a3a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002bf8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8002a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a42:	4b6a      	ldr	r3, [pc, #424]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a4a:	ee07 3a90 	vmov	s15, r3
 8002a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a56:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002a72:	e065      	b.n	8002b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	ee07 3a90 	vmov	s15, r3
 8002a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a7e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002bfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a86:	4b59      	ldr	r3, [pc, #356]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a8e:	ee07 3a90 	vmov	s15, r3
 8002a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8002a9a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002ab6:	e043      	b.n	8002b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	ee07 3a90 	vmov	s15, r3
 8002abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ac2:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002c00 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8002ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aca:	4b48      	ldr	r3, [pc, #288]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ad2:	ee07 3a90 	vmov	s15, r3
 8002ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8002ade:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002afa:	e021      	b.n	8002b40 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	ee07 3a90 	vmov	s15, r3
 8002b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b06:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002bfc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002b0a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b0e:	4b37      	ldr	r3, [pc, #220]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b12:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b16:	ee07 3a90 	vmov	s15, r3
 8002b1a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b1e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002b22:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002b26:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b2a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b2e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b32:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b3a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002b3e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002b40:	4b2a      	ldr	r3, [pc, #168]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b44:	0a5b      	lsrs	r3, r3, #9
 8002b46:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b4a:	ee07 3a90 	vmov	s15, r3
 8002b4e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b52:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b56:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b5a:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b66:	ee17 2a90 	vmov	r2, s15
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8002b6e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b72:	0c1b      	lsrs	r3, r3, #16
 8002b74:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b78:	ee07 3a90 	vmov	s15, r3
 8002b7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002b84:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002b88:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b94:	ee17 2a90 	vmov	r2, s15
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8002b9c:	4b13      	ldr	r3, [pc, #76]	@ (8002bec <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002b9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ba0:	0e1b      	lsrs	r3, r3, #24
 8002ba2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ba6:	ee07 3a90 	vmov	s15, r3
 8002baa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002bae:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002bb2:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002bb6:	edd7 6a07 	vldr	s13, [r7, #28]
 8002bba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002bbe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bc2:	ee17 2a90 	vmov	r2, s15
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002bca:	e008      	b.n	8002bde <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	609a      	str	r2, [r3, #8]
}
 8002bde:	bf00      	nop
 8002be0:	3724      	adds	r7, #36	@ 0x24
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	58024400 	.word	0x58024400
 8002bf0:	03d09000 	.word	0x03d09000
 8002bf4:	46000000 	.word	0x46000000
 8002bf8:	4c742400 	.word	0x4c742400
 8002bfc:	4a742400 	.word	0x4a742400
 8002c00:	4bbebc20 	.word	0x4bbebc20

08002c04 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b089      	sub	sp, #36	@ 0x24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002c0c:	4ba1      	ldr	r3, [pc, #644]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c10:	f003 0303 	and.w	r3, r3, #3
 8002c14:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8002c16:	4b9f      	ldr	r3, [pc, #636]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c1a:	0d1b      	lsrs	r3, r3, #20
 8002c1c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002c20:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002c22:	4b9c      	ldr	r3, [pc, #624]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c26:	0a1b      	lsrs	r3, r3, #8
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002c2e:	4b99      	ldr	r3, [pc, #612]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c32:	08db      	lsrs	r3, r3, #3
 8002c34:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002c38:	693a      	ldr	r2, [r7, #16]
 8002c3a:	fb02 f303 	mul.w	r3, r2, r3
 8002c3e:	ee07 3a90 	vmov	s15, r3
 8002c42:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c46:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	f000 8111 	beq.w	8002e74 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	f000 8083 	beq.w	8002d60 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	f200 80a1 	bhi.w	8002da4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8002c62:	69bb      	ldr	r3, [r7, #24]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d003      	beq.n	8002c70 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	2b01      	cmp	r3, #1
 8002c6c:	d056      	beq.n	8002d1c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8002c6e:	e099      	b.n	8002da4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002c70:	4b88      	ldr	r3, [pc, #544]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f003 0320 	and.w	r3, r3, #32
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d02d      	beq.n	8002cd8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002c7c:	4b85      	ldr	r3, [pc, #532]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	08db      	lsrs	r3, r3, #3
 8002c82:	f003 0303 	and.w	r3, r3, #3
 8002c86:	4a84      	ldr	r2, [pc, #528]	@ (8002e98 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8002c88:	fa22 f303 	lsr.w	r3, r2, r3
 8002c8c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002c8e:	68bb      	ldr	r3, [r7, #8]
 8002c90:	ee07 3a90 	vmov	s15, r3
 8002c94:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	ee07 3a90 	vmov	s15, r3
 8002c9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ca6:	4b7b      	ldr	r3, [pc, #492]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cae:	ee07 3a90 	vmov	s15, r3
 8002cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8002cba:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002cc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002cd6:	e087      	b.n	8002de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	ee07 3a90 	vmov	s15, r3
 8002cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ce2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002ea0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8002ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002cea:	4b6a      	ldr	r3, [pc, #424]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cf2:	ee07 3a90 	vmov	s15, r3
 8002cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8002cfe:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d1a:	e065      	b.n	8002de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d26:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d2e:	4b59      	ldr	r3, [pc, #356]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d36:	ee07 3a90 	vmov	s15, r3
 8002d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d42:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002d5e:	e043      	b.n	8002de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002d60:	697b      	ldr	r3, [r7, #20]
 8002d62:	ee07 3a90 	vmov	s15, r3
 8002d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d6a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002ea8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8002d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d72:	4b48      	ldr	r3, [pc, #288]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d7a:	ee07 3a90 	vmov	s15, r3
 8002d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d86:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002da2:	e021      	b.n	8002de8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	ee07 3a90 	vmov	s15, r3
 8002daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dae:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002ea4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8002db2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002db6:	4b37      	ldr	r3, [pc, #220]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dbe:	ee07 3a90 	vmov	s15, r3
 8002dc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002dc6:	ed97 6a03 	vldr	s12, [r7, #12]
 8002dca:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002e9c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8002dce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002dd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dde:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002de2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002de6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8002de8:	4b2a      	ldr	r3, [pc, #168]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dec:	0a5b      	lsrs	r3, r3, #9
 8002dee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002df2:	ee07 3a90 	vmov	s15, r3
 8002df6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dfa:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002dfe:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002e02:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e06:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e0e:	ee17 2a90 	vmov	r2, s15
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8002e16:	4b1f      	ldr	r3, [pc, #124]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e1a:	0c1b      	lsrs	r3, r3, #16
 8002e1c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e20:	ee07 3a90 	vmov	s15, r3
 8002e24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e2c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002e30:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e3c:	ee17 2a90 	vmov	r2, s15
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8002e44:	4b13      	ldr	r3, [pc, #76]	@ (8002e94 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e48:	0e1b      	lsrs	r3, r3, #24
 8002e4a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e4e:	ee07 3a90 	vmov	s15, r3
 8002e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e56:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002e5e:	edd7 6a07 	vldr	s13, [r7, #28]
 8002e62:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e66:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002e6a:	ee17 2a90 	vmov	r2, s15
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8002e72:	e008      	b.n	8002e86 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	2200      	movs	r2, #0
 8002e84:	609a      	str	r2, [r3, #8]
}
 8002e86:	bf00      	nop
 8002e88:	3724      	adds	r7, #36	@ 0x24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	58024400 	.word	0x58024400
 8002e98:	03d09000 	.word	0x03d09000
 8002e9c:	46000000 	.word	0x46000000
 8002ea0:	4c742400 	.word	0x4c742400
 8002ea4:	4a742400 	.word	0x4a742400
 8002ea8:	4bbebc20 	.word	0x4bbebc20

08002eac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b082      	sub	sp, #8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e049      	b.n	8002f52 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d106      	bne.n	8002ed8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ed2:	6878      	ldr	r0, [r7, #4]
 8002ed4:	f7fd ff02 	bl	8000cdc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2202      	movs	r2, #2
 8002edc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	3304      	adds	r3, #4
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4610      	mov	r0, r2
 8002eec:	f000 fbb0 	bl	8003650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b082      	sub	sp, #8
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d101      	bne.n	8002f6c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e049      	b.n	8003000 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d106      	bne.n	8002f86 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 f841 	bl	8003008 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2202      	movs	r2, #2
 8002f8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	3304      	adds	r3, #4
 8002f96:	4619      	mov	r1, r3
 8002f98:	4610      	mov	r0, r2
 8002f9a:	f000 fb59 	bl	8003650 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	2201      	movs	r2, #1
 8002fb2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2201      	movs	r2, #1
 8002fca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2201      	movs	r2, #1
 8002fe2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2201      	movs	r2, #1
 8002fea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}

08003008 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d109      	bne.n	8003040 <HAL_TIM_PWM_Start+0x24>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b01      	cmp	r3, #1
 8003036:	bf14      	ite	ne
 8003038:	2301      	movne	r3, #1
 800303a:	2300      	moveq	r3, #0
 800303c:	b2db      	uxtb	r3, r3
 800303e:	e03c      	b.n	80030ba <HAL_TIM_PWM_Start+0x9e>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	2b04      	cmp	r3, #4
 8003044:	d109      	bne.n	800305a <HAL_TIM_PWM_Start+0x3e>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b01      	cmp	r3, #1
 8003050:	bf14      	ite	ne
 8003052:	2301      	movne	r3, #1
 8003054:	2300      	moveq	r3, #0
 8003056:	b2db      	uxtb	r3, r3
 8003058:	e02f      	b.n	80030ba <HAL_TIM_PWM_Start+0x9e>
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	2b08      	cmp	r3, #8
 800305e:	d109      	bne.n	8003074 <HAL_TIM_PWM_Start+0x58>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b01      	cmp	r3, #1
 800306a:	bf14      	ite	ne
 800306c:	2301      	movne	r3, #1
 800306e:	2300      	moveq	r3, #0
 8003070:	b2db      	uxtb	r3, r3
 8003072:	e022      	b.n	80030ba <HAL_TIM_PWM_Start+0x9e>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	2b0c      	cmp	r3, #12
 8003078:	d109      	bne.n	800308e <HAL_TIM_PWM_Start+0x72>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b01      	cmp	r3, #1
 8003084:	bf14      	ite	ne
 8003086:	2301      	movne	r3, #1
 8003088:	2300      	moveq	r3, #0
 800308a:	b2db      	uxtb	r3, r3
 800308c:	e015      	b.n	80030ba <HAL_TIM_PWM_Start+0x9e>
 800308e:	683b      	ldr	r3, [r7, #0]
 8003090:	2b10      	cmp	r3, #16
 8003092:	d109      	bne.n	80030a8 <HAL_TIM_PWM_Start+0x8c>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800309a:	b2db      	uxtb	r3, r3
 800309c:	2b01      	cmp	r3, #1
 800309e:	bf14      	ite	ne
 80030a0:	2301      	movne	r3, #1
 80030a2:	2300      	moveq	r3, #0
 80030a4:	b2db      	uxtb	r3, r3
 80030a6:	e008      	b.n	80030ba <HAL_TIM_PWM_Start+0x9e>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	bf14      	ite	ne
 80030b4:	2301      	movne	r3, #1
 80030b6:	2300      	moveq	r3, #0
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e0a1      	b.n	8003206 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d104      	bne.n	80030d2 <HAL_TIM_PWM_Start+0xb6>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2202      	movs	r2, #2
 80030cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030d0:	e023      	b.n	800311a <HAL_TIM_PWM_Start+0xfe>
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	2b04      	cmp	r3, #4
 80030d6:	d104      	bne.n	80030e2 <HAL_TIM_PWM_Start+0xc6>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2202      	movs	r2, #2
 80030dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030e0:	e01b      	b.n	800311a <HAL_TIM_PWM_Start+0xfe>
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	2b08      	cmp	r3, #8
 80030e6:	d104      	bne.n	80030f2 <HAL_TIM_PWM_Start+0xd6>
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	2202      	movs	r2, #2
 80030ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030f0:	e013      	b.n	800311a <HAL_TIM_PWM_Start+0xfe>
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b0c      	cmp	r3, #12
 80030f6:	d104      	bne.n	8003102 <HAL_TIM_PWM_Start+0xe6>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2202      	movs	r2, #2
 80030fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003100:	e00b      	b.n	800311a <HAL_TIM_PWM_Start+0xfe>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b10      	cmp	r3, #16
 8003106:	d104      	bne.n	8003112 <HAL_TIM_PWM_Start+0xf6>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2202      	movs	r2, #2
 800310c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003110:	e003      	b.n	800311a <HAL_TIM_PWM_Start+0xfe>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2202      	movs	r2, #2
 8003116:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	2201      	movs	r2, #1
 8003120:	6839      	ldr	r1, [r7, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f000 fea8 	bl	8003e78 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a38      	ldr	r2, [pc, #224]	@ (8003210 <HAL_TIM_PWM_Start+0x1f4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d013      	beq.n	800315a <HAL_TIM_PWM_Start+0x13e>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a37      	ldr	r2, [pc, #220]	@ (8003214 <HAL_TIM_PWM_Start+0x1f8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d00e      	beq.n	800315a <HAL_TIM_PWM_Start+0x13e>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a35      	ldr	r2, [pc, #212]	@ (8003218 <HAL_TIM_PWM_Start+0x1fc>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d009      	beq.n	800315a <HAL_TIM_PWM_Start+0x13e>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a34      	ldr	r2, [pc, #208]	@ (800321c <HAL_TIM_PWM_Start+0x200>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d004      	beq.n	800315a <HAL_TIM_PWM_Start+0x13e>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a32      	ldr	r2, [pc, #200]	@ (8003220 <HAL_TIM_PWM_Start+0x204>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d101      	bne.n	800315e <HAL_TIM_PWM_Start+0x142>
 800315a:	2301      	movs	r3, #1
 800315c:	e000      	b.n	8003160 <HAL_TIM_PWM_Start+0x144>
 800315e:	2300      	movs	r3, #0
 8003160:	2b00      	cmp	r3, #0
 8003162:	d007      	beq.n	8003174 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003172:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a25      	ldr	r2, [pc, #148]	@ (8003210 <HAL_TIM_PWM_Start+0x1f4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d022      	beq.n	80031c4 <HAL_TIM_PWM_Start+0x1a8>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003186:	d01d      	beq.n	80031c4 <HAL_TIM_PWM_Start+0x1a8>
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a25      	ldr	r2, [pc, #148]	@ (8003224 <HAL_TIM_PWM_Start+0x208>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d018      	beq.n	80031c4 <HAL_TIM_PWM_Start+0x1a8>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4a24      	ldr	r2, [pc, #144]	@ (8003228 <HAL_TIM_PWM_Start+0x20c>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d013      	beq.n	80031c4 <HAL_TIM_PWM_Start+0x1a8>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	4a22      	ldr	r2, [pc, #136]	@ (800322c <HAL_TIM_PWM_Start+0x210>)
 80031a2:	4293      	cmp	r3, r2
 80031a4:	d00e      	beq.n	80031c4 <HAL_TIM_PWM_Start+0x1a8>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4a1a      	ldr	r2, [pc, #104]	@ (8003214 <HAL_TIM_PWM_Start+0x1f8>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d009      	beq.n	80031c4 <HAL_TIM_PWM_Start+0x1a8>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003230 <HAL_TIM_PWM_Start+0x214>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d004      	beq.n	80031c4 <HAL_TIM_PWM_Start+0x1a8>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a16      	ldr	r2, [pc, #88]	@ (8003218 <HAL_TIM_PWM_Start+0x1fc>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d115      	bne.n	80031f0 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689a      	ldr	r2, [r3, #8]
 80031ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003234 <HAL_TIM_PWM_Start+0x218>)
 80031cc:	4013      	ands	r3, r2
 80031ce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	2b06      	cmp	r3, #6
 80031d4:	d015      	beq.n	8003202 <HAL_TIM_PWM_Start+0x1e6>
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031dc:	d011      	beq.n	8003202 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f042 0201 	orr.w	r2, r2, #1
 80031ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ee:	e008      	b.n	8003202 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681a      	ldr	r2, [r3, #0]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f042 0201 	orr.w	r2, r2, #1
 80031fe:	601a      	str	r2, [r3, #0]
 8003200:	e000      	b.n	8003204 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003202:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	3710      	adds	r7, #16
 800320a:	46bd      	mov	sp, r7
 800320c:	bd80      	pop	{r7, pc}
 800320e:	bf00      	nop
 8003210:	40010000 	.word	0x40010000
 8003214:	40010400 	.word	0x40010400
 8003218:	40014000 	.word	0x40014000
 800321c:	40014400 	.word	0x40014400
 8003220:	40014800 	.word	0x40014800
 8003224:	40000400 	.word	0x40000400
 8003228:	40000800 	.word	0x40000800
 800322c:	40000c00 	.word	0x40000c00
 8003230:	40001800 	.word	0x40001800
 8003234:	00010007 	.word	0x00010007

08003238 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003252:	2302      	movs	r3, #2
 8003254:	e0ff      	b.n	8003456 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b14      	cmp	r3, #20
 8003262:	f200 80f0 	bhi.w	8003446 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8003266:	a201      	add	r2, pc, #4	@ (adr r2, 800326c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326c:	080032c1 	.word	0x080032c1
 8003270:	08003447 	.word	0x08003447
 8003274:	08003447 	.word	0x08003447
 8003278:	08003447 	.word	0x08003447
 800327c:	08003301 	.word	0x08003301
 8003280:	08003447 	.word	0x08003447
 8003284:	08003447 	.word	0x08003447
 8003288:	08003447 	.word	0x08003447
 800328c:	08003343 	.word	0x08003343
 8003290:	08003447 	.word	0x08003447
 8003294:	08003447 	.word	0x08003447
 8003298:	08003447 	.word	0x08003447
 800329c:	08003383 	.word	0x08003383
 80032a0:	08003447 	.word	0x08003447
 80032a4:	08003447 	.word	0x08003447
 80032a8:	08003447 	.word	0x08003447
 80032ac:	080033c5 	.word	0x080033c5
 80032b0:	08003447 	.word	0x08003447
 80032b4:	08003447 	.word	0x08003447
 80032b8:	08003447 	.word	0x08003447
 80032bc:	08003405 	.word	0x08003405
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68b9      	ldr	r1, [r7, #8]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fa62 	bl	8003790 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f042 0208 	orr.w	r2, r2, #8
 80032da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	699a      	ldr	r2, [r3, #24]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0204 	bic.w	r2, r2, #4
 80032ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	6999      	ldr	r1, [r3, #24]
 80032f2:	68bb      	ldr	r3, [r7, #8]
 80032f4:	691a      	ldr	r2, [r3, #16]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	430a      	orrs	r2, r1
 80032fc:	619a      	str	r2, [r3, #24]
      break;
 80032fe:	e0a5      	b.n	800344c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	68b9      	ldr	r1, [r7, #8]
 8003306:	4618      	mov	r0, r3
 8003308:	f000 fad2 	bl	80038b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	699a      	ldr	r2, [r3, #24]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800331a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699a      	ldr	r2, [r3, #24]
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800332a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6999      	ldr	r1, [r3, #24]
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	021a      	lsls	r2, r3, #8
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	430a      	orrs	r2, r1
 800333e:	619a      	str	r2, [r3, #24]
      break;
 8003340:	e084      	b.n	800344c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	68b9      	ldr	r1, [r7, #8]
 8003348:	4618      	mov	r0, r3
 800334a:	f000 fb3b 	bl	80039c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f042 0208 	orr.w	r2, r2, #8
 800335c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	69da      	ldr	r2, [r3, #28]
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f022 0204 	bic.w	r2, r2, #4
 800336c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69d9      	ldr	r1, [r3, #28]
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	691a      	ldr	r2, [r3, #16]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	61da      	str	r2, [r3, #28]
      break;
 8003380:	e064      	b.n	800344c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	68b9      	ldr	r1, [r7, #8]
 8003388:	4618      	mov	r0, r3
 800338a:	f000 fba3 	bl	8003ad4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69da      	ldr	r2, [r3, #28]
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800339c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69da      	ldr	r2, [r3, #28]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69d9      	ldr	r1, [r3, #28]
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	021a      	lsls	r2, r3, #8
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	61da      	str	r2, [r3, #28]
      break;
 80033c2:	e043      	b.n	800344c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68b9      	ldr	r1, [r7, #8]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 fbec 	bl	8003ba8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 0208 	orr.w	r2, r2, #8
 80033de:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f022 0204 	bic.w	r2, r2, #4
 80033ee:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	691a      	ldr	r2, [r3, #16]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003402:	e023      	b.n	800344c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68b9      	ldr	r1, [r7, #8]
 800340a:	4618      	mov	r0, r3
 800340c:	f000 fc30 	bl	8003c70 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800341e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800342e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	691b      	ldr	r3, [r3, #16]
 800343a:	021a      	lsls	r2, r3, #8
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	430a      	orrs	r2, r1
 8003442:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003444:	e002      	b.n	800344c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003446:	2301      	movs	r3, #1
 8003448:	75fb      	strb	r3, [r7, #23]
      break;
 800344a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2200      	movs	r2, #0
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003454:	7dfb      	ldrb	r3, [r7, #23]
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop

08003460 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b084      	sub	sp, #16
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800346a:	2300      	movs	r3, #0
 800346c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003474:	2b01      	cmp	r3, #1
 8003476:	d101      	bne.n	800347c <HAL_TIM_ConfigClockSource+0x1c>
 8003478:	2302      	movs	r3, #2
 800347a:	e0dc      	b.n	8003636 <HAL_TIM_ConfigClockSource+0x1d6>
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	2201      	movs	r2, #1
 8003480:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003494:	68ba      	ldr	r2, [r7, #8]
 8003496:	4b6a      	ldr	r3, [pc, #424]	@ (8003640 <HAL_TIM_ConfigClockSource+0x1e0>)
 8003498:	4013      	ands	r3, r2
 800349a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80034a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	68ba      	ldr	r2, [r7, #8]
 80034aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a64      	ldr	r2, [pc, #400]	@ (8003644 <HAL_TIM_ConfigClockSource+0x1e4>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	f000 80a9 	beq.w	800360a <HAL_TIM_ConfigClockSource+0x1aa>
 80034b8:	4a62      	ldr	r2, [pc, #392]	@ (8003644 <HAL_TIM_ConfigClockSource+0x1e4>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	f200 80ae 	bhi.w	800361c <HAL_TIM_ConfigClockSource+0x1bc>
 80034c0:	4a61      	ldr	r2, [pc, #388]	@ (8003648 <HAL_TIM_ConfigClockSource+0x1e8>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	f000 80a1 	beq.w	800360a <HAL_TIM_ConfigClockSource+0x1aa>
 80034c8:	4a5f      	ldr	r2, [pc, #380]	@ (8003648 <HAL_TIM_ConfigClockSource+0x1e8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	f200 80a6 	bhi.w	800361c <HAL_TIM_ConfigClockSource+0x1bc>
 80034d0:	4a5e      	ldr	r2, [pc, #376]	@ (800364c <HAL_TIM_ConfigClockSource+0x1ec>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	f000 8099 	beq.w	800360a <HAL_TIM_ConfigClockSource+0x1aa>
 80034d8:	4a5c      	ldr	r2, [pc, #368]	@ (800364c <HAL_TIM_ConfigClockSource+0x1ec>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	f200 809e 	bhi.w	800361c <HAL_TIM_ConfigClockSource+0x1bc>
 80034e0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80034e4:	f000 8091 	beq.w	800360a <HAL_TIM_ConfigClockSource+0x1aa>
 80034e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80034ec:	f200 8096 	bhi.w	800361c <HAL_TIM_ConfigClockSource+0x1bc>
 80034f0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034f4:	f000 8089 	beq.w	800360a <HAL_TIM_ConfigClockSource+0x1aa>
 80034f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80034fc:	f200 808e 	bhi.w	800361c <HAL_TIM_ConfigClockSource+0x1bc>
 8003500:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003504:	d03e      	beq.n	8003584 <HAL_TIM_ConfigClockSource+0x124>
 8003506:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800350a:	f200 8087 	bhi.w	800361c <HAL_TIM_ConfigClockSource+0x1bc>
 800350e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003512:	f000 8086 	beq.w	8003622 <HAL_TIM_ConfigClockSource+0x1c2>
 8003516:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800351a:	d87f      	bhi.n	800361c <HAL_TIM_ConfigClockSource+0x1bc>
 800351c:	2b70      	cmp	r3, #112	@ 0x70
 800351e:	d01a      	beq.n	8003556 <HAL_TIM_ConfigClockSource+0xf6>
 8003520:	2b70      	cmp	r3, #112	@ 0x70
 8003522:	d87b      	bhi.n	800361c <HAL_TIM_ConfigClockSource+0x1bc>
 8003524:	2b60      	cmp	r3, #96	@ 0x60
 8003526:	d050      	beq.n	80035ca <HAL_TIM_ConfigClockSource+0x16a>
 8003528:	2b60      	cmp	r3, #96	@ 0x60
 800352a:	d877      	bhi.n	800361c <HAL_TIM_ConfigClockSource+0x1bc>
 800352c:	2b50      	cmp	r3, #80	@ 0x50
 800352e:	d03c      	beq.n	80035aa <HAL_TIM_ConfigClockSource+0x14a>
 8003530:	2b50      	cmp	r3, #80	@ 0x50
 8003532:	d873      	bhi.n	800361c <HAL_TIM_ConfigClockSource+0x1bc>
 8003534:	2b40      	cmp	r3, #64	@ 0x40
 8003536:	d058      	beq.n	80035ea <HAL_TIM_ConfigClockSource+0x18a>
 8003538:	2b40      	cmp	r3, #64	@ 0x40
 800353a:	d86f      	bhi.n	800361c <HAL_TIM_ConfigClockSource+0x1bc>
 800353c:	2b30      	cmp	r3, #48	@ 0x30
 800353e:	d064      	beq.n	800360a <HAL_TIM_ConfigClockSource+0x1aa>
 8003540:	2b30      	cmp	r3, #48	@ 0x30
 8003542:	d86b      	bhi.n	800361c <HAL_TIM_ConfigClockSource+0x1bc>
 8003544:	2b20      	cmp	r3, #32
 8003546:	d060      	beq.n	800360a <HAL_TIM_ConfigClockSource+0x1aa>
 8003548:	2b20      	cmp	r3, #32
 800354a:	d867      	bhi.n	800361c <HAL_TIM_ConfigClockSource+0x1bc>
 800354c:	2b00      	cmp	r3, #0
 800354e:	d05c      	beq.n	800360a <HAL_TIM_ConfigClockSource+0x1aa>
 8003550:	2b10      	cmp	r3, #16
 8003552:	d05a      	beq.n	800360a <HAL_TIM_ConfigClockSource+0x1aa>
 8003554:	e062      	b.n	800361c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003566:	f000 fc67 	bl	8003e38 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003578:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68ba      	ldr	r2, [r7, #8]
 8003580:	609a      	str	r2, [r3, #8]
      break;
 8003582:	e04f      	b.n	8003624 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003594:	f000 fc50 	bl	8003e38 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689a      	ldr	r2, [r3, #8]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80035a6:	609a      	str	r2, [r3, #8]
      break;
 80035a8:	e03c      	b.n	8003624 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035b2:	683b      	ldr	r3, [r7, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035b6:	461a      	mov	r2, r3
 80035b8:	f000 fbc0 	bl	8003d3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2150      	movs	r1, #80	@ 0x50
 80035c2:	4618      	mov	r0, r3
 80035c4:	f000 fc1a 	bl	8003dfc <TIM_ITRx_SetConfig>
      break;
 80035c8:	e02c      	b.n	8003624 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80035d6:	461a      	mov	r2, r3
 80035d8:	f000 fbdf 	bl	8003d9a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	2160      	movs	r1, #96	@ 0x60
 80035e2:	4618      	mov	r0, r3
 80035e4:	f000 fc0a 	bl	8003dfc <TIM_ITRx_SetConfig>
      break;
 80035e8:	e01c      	b.n	8003624 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80035f6:	461a      	mov	r2, r3
 80035f8:	f000 fba0 	bl	8003d3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2140      	movs	r1, #64	@ 0x40
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fbfa 	bl	8003dfc <TIM_ITRx_SetConfig>
      break;
 8003608:	e00c      	b.n	8003624 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4619      	mov	r1, r3
 8003614:	4610      	mov	r0, r2
 8003616:	f000 fbf1 	bl	8003dfc <TIM_ITRx_SetConfig>
      break;
 800361a:	e003      	b.n	8003624 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800361c:	2301      	movs	r3, #1
 800361e:	73fb      	strb	r3, [r7, #15]
      break;
 8003620:	e000      	b.n	8003624 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8003622:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003634:	7bfb      	ldrb	r3, [r7, #15]
}
 8003636:	4618      	mov	r0, r3
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	ffceff88 	.word	0xffceff88
 8003644:	00100040 	.word	0x00100040
 8003648:	00100030 	.word	0x00100030
 800364c:	00100020 	.word	0x00100020

08003650 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003650:	b480      	push	{r7}
 8003652:	b085      	sub	sp, #20
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
 8003658:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a43      	ldr	r2, [pc, #268]	@ (8003770 <TIM_Base_SetConfig+0x120>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d013      	beq.n	8003690 <TIM_Base_SetConfig+0x40>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800366e:	d00f      	beq.n	8003690 <TIM_Base_SetConfig+0x40>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a40      	ldr	r2, [pc, #256]	@ (8003774 <TIM_Base_SetConfig+0x124>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d00b      	beq.n	8003690 <TIM_Base_SetConfig+0x40>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a3f      	ldr	r2, [pc, #252]	@ (8003778 <TIM_Base_SetConfig+0x128>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d007      	beq.n	8003690 <TIM_Base_SetConfig+0x40>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	4a3e      	ldr	r2, [pc, #248]	@ (800377c <TIM_Base_SetConfig+0x12c>)
 8003684:	4293      	cmp	r3, r2
 8003686:	d003      	beq.n	8003690 <TIM_Base_SetConfig+0x40>
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	4a3d      	ldr	r2, [pc, #244]	@ (8003780 <TIM_Base_SetConfig+0x130>)
 800368c:	4293      	cmp	r3, r2
 800368e:	d108      	bne.n	80036a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003696:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	4313      	orrs	r3, r2
 80036a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	4a32      	ldr	r2, [pc, #200]	@ (8003770 <TIM_Base_SetConfig+0x120>)
 80036a6:	4293      	cmp	r3, r2
 80036a8:	d01f      	beq.n	80036ea <TIM_Base_SetConfig+0x9a>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80036b0:	d01b      	beq.n	80036ea <TIM_Base_SetConfig+0x9a>
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	4a2f      	ldr	r2, [pc, #188]	@ (8003774 <TIM_Base_SetConfig+0x124>)
 80036b6:	4293      	cmp	r3, r2
 80036b8:	d017      	beq.n	80036ea <TIM_Base_SetConfig+0x9a>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	4a2e      	ldr	r2, [pc, #184]	@ (8003778 <TIM_Base_SetConfig+0x128>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d013      	beq.n	80036ea <TIM_Base_SetConfig+0x9a>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a2d      	ldr	r2, [pc, #180]	@ (800377c <TIM_Base_SetConfig+0x12c>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d00f      	beq.n	80036ea <TIM_Base_SetConfig+0x9a>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	4a2c      	ldr	r2, [pc, #176]	@ (8003780 <TIM_Base_SetConfig+0x130>)
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d00b      	beq.n	80036ea <TIM_Base_SetConfig+0x9a>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a2b      	ldr	r2, [pc, #172]	@ (8003784 <TIM_Base_SetConfig+0x134>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d007      	beq.n	80036ea <TIM_Base_SetConfig+0x9a>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	4a2a      	ldr	r2, [pc, #168]	@ (8003788 <TIM_Base_SetConfig+0x138>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d003      	beq.n	80036ea <TIM_Base_SetConfig+0x9a>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	4a29      	ldr	r2, [pc, #164]	@ (800378c <TIM_Base_SetConfig+0x13c>)
 80036e6:	4293      	cmp	r3, r2
 80036e8:	d108      	bne.n	80036fc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80036f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	68db      	ldr	r3, [r3, #12]
 80036f6:	68fa      	ldr	r2, [r7, #12]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	695b      	ldr	r3, [r3, #20]
 8003706:	4313      	orrs	r3, r2
 8003708:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	689a      	ldr	r2, [r3, #8]
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	4a14      	ldr	r2, [pc, #80]	@ (8003770 <TIM_Base_SetConfig+0x120>)
 800371e:	4293      	cmp	r3, r2
 8003720:	d00f      	beq.n	8003742 <TIM_Base_SetConfig+0xf2>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a16      	ldr	r2, [pc, #88]	@ (8003780 <TIM_Base_SetConfig+0x130>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d00b      	beq.n	8003742 <TIM_Base_SetConfig+0xf2>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a15      	ldr	r2, [pc, #84]	@ (8003784 <TIM_Base_SetConfig+0x134>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d007      	beq.n	8003742 <TIM_Base_SetConfig+0xf2>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	4a14      	ldr	r2, [pc, #80]	@ (8003788 <TIM_Base_SetConfig+0x138>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d003      	beq.n	8003742 <TIM_Base_SetConfig+0xf2>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	4a13      	ldr	r2, [pc, #76]	@ (800378c <TIM_Base_SetConfig+0x13c>)
 800373e:	4293      	cmp	r3, r2
 8003740:	d103      	bne.n	800374a <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	691a      	ldr	r2, [r3, #16]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f043 0204 	orr.w	r2, r3, #4
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	68fa      	ldr	r2, [r7, #12]
 8003760:	601a      	str	r2, [r3, #0]
}
 8003762:	bf00      	nop
 8003764:	3714      	adds	r7, #20
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	40010000 	.word	0x40010000
 8003774:	40000400 	.word	0x40000400
 8003778:	40000800 	.word	0x40000800
 800377c:	40000c00 	.word	0x40000c00
 8003780:	40010400 	.word	0x40010400
 8003784:	40014000 	.word	0x40014000
 8003788:	40014400 	.word	0x40014400
 800378c:	40014800 	.word	0x40014800

08003790 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	f023 0201 	bic.w	r2, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80037b8:	68fa      	ldr	r2, [r7, #12]
 80037ba:	4b37      	ldr	r3, [pc, #220]	@ (8003898 <TIM_OC1_SetConfig+0x108>)
 80037bc:	4013      	ands	r3, r2
 80037be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f023 0303 	bic.w	r3, r3, #3
 80037c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	68fa      	ldr	r2, [r7, #12]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f023 0302 	bic.w	r3, r3, #2
 80037d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	697a      	ldr	r2, [r7, #20]
 80037e0:	4313      	orrs	r3, r2
 80037e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	4a2d      	ldr	r2, [pc, #180]	@ (800389c <TIM_OC1_SetConfig+0x10c>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00f      	beq.n	800380c <TIM_OC1_SetConfig+0x7c>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	4a2c      	ldr	r2, [pc, #176]	@ (80038a0 <TIM_OC1_SetConfig+0x110>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d00b      	beq.n	800380c <TIM_OC1_SetConfig+0x7c>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	4a2b      	ldr	r2, [pc, #172]	@ (80038a4 <TIM_OC1_SetConfig+0x114>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d007      	beq.n	800380c <TIM_OC1_SetConfig+0x7c>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	4a2a      	ldr	r2, [pc, #168]	@ (80038a8 <TIM_OC1_SetConfig+0x118>)
 8003800:	4293      	cmp	r3, r2
 8003802:	d003      	beq.n	800380c <TIM_OC1_SetConfig+0x7c>
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	4a29      	ldr	r2, [pc, #164]	@ (80038ac <TIM_OC1_SetConfig+0x11c>)
 8003808:	4293      	cmp	r3, r2
 800380a:	d10c      	bne.n	8003826 <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800380c:	697b      	ldr	r3, [r7, #20]
 800380e:	f023 0308 	bic.w	r3, r3, #8
 8003812:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	4313      	orrs	r3, r2
 800381c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800381e:	697b      	ldr	r3, [r7, #20]
 8003820:	f023 0304 	bic.w	r3, r3, #4
 8003824:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	4a1c      	ldr	r2, [pc, #112]	@ (800389c <TIM_OC1_SetConfig+0x10c>)
 800382a:	4293      	cmp	r3, r2
 800382c:	d00f      	beq.n	800384e <TIM_OC1_SetConfig+0xbe>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	4a1b      	ldr	r2, [pc, #108]	@ (80038a0 <TIM_OC1_SetConfig+0x110>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d00b      	beq.n	800384e <TIM_OC1_SetConfig+0xbe>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	4a1a      	ldr	r2, [pc, #104]	@ (80038a4 <TIM_OC1_SetConfig+0x114>)
 800383a:	4293      	cmp	r3, r2
 800383c:	d007      	beq.n	800384e <TIM_OC1_SetConfig+0xbe>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	4a19      	ldr	r2, [pc, #100]	@ (80038a8 <TIM_OC1_SetConfig+0x118>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d003      	beq.n	800384e <TIM_OC1_SetConfig+0xbe>
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	4a18      	ldr	r2, [pc, #96]	@ (80038ac <TIM_OC1_SetConfig+0x11c>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d111      	bne.n	8003872 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800385c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	695b      	ldr	r3, [r3, #20]
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	693a      	ldr	r2, [r7, #16]
 800386e:	4313      	orrs	r3, r2
 8003870:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	693a      	ldr	r2, [r7, #16]
 8003876:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685a      	ldr	r2, [r3, #4]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	621a      	str	r2, [r3, #32]
}
 800388c:	bf00      	nop
 800388e:	371c      	adds	r7, #28
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	fffeff8f 	.word	0xfffeff8f
 800389c:	40010000 	.word	0x40010000
 80038a0:	40010400 	.word	0x40010400
 80038a4:	40014000 	.word	0x40014000
 80038a8:	40014400 	.word	0x40014400
 80038ac:	40014800 	.word	0x40014800

080038b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b087      	sub	sp, #28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	6a1b      	ldr	r3, [r3, #32]
 80038be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	f023 0210 	bic.w	r2, r3, #16
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	699b      	ldr	r3, [r3, #24]
 80038d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80038d8:	68fa      	ldr	r2, [r7, #12]
 80038da:	4b34      	ldr	r3, [pc, #208]	@ (80039ac <TIM_OC2_SetConfig+0xfc>)
 80038dc:	4013      	ands	r3, r2
 80038de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	021b      	lsls	r3, r3, #8
 80038ee:	68fa      	ldr	r2, [r7, #12]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	f023 0320 	bic.w	r3, r3, #32
 80038fa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	011b      	lsls	r3, r3, #4
 8003902:	697a      	ldr	r2, [r7, #20]
 8003904:	4313      	orrs	r3, r2
 8003906:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	4a29      	ldr	r2, [pc, #164]	@ (80039b0 <TIM_OC2_SetConfig+0x100>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d003      	beq.n	8003918 <TIM_OC2_SetConfig+0x68>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	4a28      	ldr	r2, [pc, #160]	@ (80039b4 <TIM_OC2_SetConfig+0x104>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d10d      	bne.n	8003934 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800391e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003920:	683b      	ldr	r3, [r7, #0]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	011b      	lsls	r3, r3, #4
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	4313      	orrs	r3, r2
 800392a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003932:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	4a1e      	ldr	r2, [pc, #120]	@ (80039b0 <TIM_OC2_SetConfig+0x100>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d00f      	beq.n	800395c <TIM_OC2_SetConfig+0xac>
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	4a1d      	ldr	r2, [pc, #116]	@ (80039b4 <TIM_OC2_SetConfig+0x104>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d00b      	beq.n	800395c <TIM_OC2_SetConfig+0xac>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	4a1c      	ldr	r2, [pc, #112]	@ (80039b8 <TIM_OC2_SetConfig+0x108>)
 8003948:	4293      	cmp	r3, r2
 800394a:	d007      	beq.n	800395c <TIM_OC2_SetConfig+0xac>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	4a1b      	ldr	r2, [pc, #108]	@ (80039bc <TIM_OC2_SetConfig+0x10c>)
 8003950:	4293      	cmp	r3, r2
 8003952:	d003      	beq.n	800395c <TIM_OC2_SetConfig+0xac>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a1a      	ldr	r2, [pc, #104]	@ (80039c0 <TIM_OC2_SetConfig+0x110>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d113      	bne.n	8003984 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003962:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800396a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	695b      	ldr	r3, [r3, #20]
 8003970:	009b      	lsls	r3, r3, #2
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4313      	orrs	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003978:	683b      	ldr	r3, [r7, #0]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	4313      	orrs	r3, r2
 8003982:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	685a      	ldr	r2, [r3, #4]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	697a      	ldr	r2, [r7, #20]
 800399c:	621a      	str	r2, [r3, #32]
}
 800399e:	bf00      	nop
 80039a0:	371c      	adds	r7, #28
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	feff8fff 	.word	0xfeff8fff
 80039b0:	40010000 	.word	0x40010000
 80039b4:	40010400 	.word	0x40010400
 80039b8:	40014000 	.word	0x40014000
 80039bc:	40014400 	.word	0x40014400
 80039c0:	40014800 	.word	0x40014800

080039c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b087      	sub	sp, #28
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
 80039cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6a1b      	ldr	r3, [r3, #32]
 80039d2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	6a1b      	ldr	r3, [r3, #32]
 80039d8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	685b      	ldr	r3, [r3, #4]
 80039e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80039ec:	68fa      	ldr	r2, [r7, #12]
 80039ee:	4b33      	ldr	r3, [pc, #204]	@ (8003abc <TIM_OC3_SetConfig+0xf8>)
 80039f0:	4013      	ands	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f023 0303 	bic.w	r3, r3, #3
 80039fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	4313      	orrs	r3, r2
 8003a04:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a0c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	021b      	lsls	r3, r3, #8
 8003a14:	697a      	ldr	r2, [r7, #20]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	4a28      	ldr	r2, [pc, #160]	@ (8003ac0 <TIM_OC3_SetConfig+0xfc>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d003      	beq.n	8003a2a <TIM_OC3_SetConfig+0x66>
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	4a27      	ldr	r2, [pc, #156]	@ (8003ac4 <TIM_OC3_SetConfig+0x100>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d10d      	bne.n	8003a46 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003a30:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	68db      	ldr	r3, [r3, #12]
 8003a36:	021b      	lsls	r3, r3, #8
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003a44:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a1d      	ldr	r2, [pc, #116]	@ (8003ac0 <TIM_OC3_SetConfig+0xfc>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00f      	beq.n	8003a6e <TIM_OC3_SetConfig+0xaa>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a1c      	ldr	r2, [pc, #112]	@ (8003ac4 <TIM_OC3_SetConfig+0x100>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d00b      	beq.n	8003a6e <TIM_OC3_SetConfig+0xaa>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	4a1b      	ldr	r2, [pc, #108]	@ (8003ac8 <TIM_OC3_SetConfig+0x104>)
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d007      	beq.n	8003a6e <TIM_OC3_SetConfig+0xaa>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4a1a      	ldr	r2, [pc, #104]	@ (8003acc <TIM_OC3_SetConfig+0x108>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d003      	beq.n	8003a6e <TIM_OC3_SetConfig+0xaa>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a19      	ldr	r2, [pc, #100]	@ (8003ad0 <TIM_OC3_SetConfig+0x10c>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d113      	bne.n	8003a96 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003a74:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003a7c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	695b      	ldr	r3, [r3, #20]
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	699b      	ldr	r3, [r3, #24]
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	68fa      	ldr	r2, [r7, #12]
 8003aa0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	697a      	ldr	r2, [r7, #20]
 8003aae:	621a      	str	r2, [r3, #32]
}
 8003ab0:	bf00      	nop
 8003ab2:	371c      	adds	r7, #28
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aba:	4770      	bx	lr
 8003abc:	fffeff8f 	.word	0xfffeff8f
 8003ac0:	40010000 	.word	0x40010000
 8003ac4:	40010400 	.word	0x40010400
 8003ac8:	40014000 	.word	0x40014000
 8003acc:	40014400 	.word	0x40014400
 8003ad0:	40014800 	.word	0x40014800

08003ad4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ad4:	b480      	push	{r7}
 8003ad6:	b087      	sub	sp, #28
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6a1b      	ldr	r3, [r3, #32]
 8003ae2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6a1b      	ldr	r3, [r3, #32]
 8003ae8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69db      	ldr	r3, [r3, #28]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	4b24      	ldr	r3, [pc, #144]	@ (8003b90 <TIM_OC4_SetConfig+0xbc>)
 8003b00:	4013      	ands	r3, r2
 8003b02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	021b      	lsls	r3, r3, #8
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003b18:	693b      	ldr	r3, [r7, #16]
 8003b1a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003b1e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	031b      	lsls	r3, r3, #12
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a19      	ldr	r2, [pc, #100]	@ (8003b94 <TIM_OC4_SetConfig+0xc0>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d00f      	beq.n	8003b54 <TIM_OC4_SetConfig+0x80>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a18      	ldr	r2, [pc, #96]	@ (8003b98 <TIM_OC4_SetConfig+0xc4>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00b      	beq.n	8003b54 <TIM_OC4_SetConfig+0x80>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	4a17      	ldr	r2, [pc, #92]	@ (8003b9c <TIM_OC4_SetConfig+0xc8>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d007      	beq.n	8003b54 <TIM_OC4_SetConfig+0x80>
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	4a16      	ldr	r2, [pc, #88]	@ (8003ba0 <TIM_OC4_SetConfig+0xcc>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d003      	beq.n	8003b54 <TIM_OC4_SetConfig+0x80>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	4a15      	ldr	r2, [pc, #84]	@ (8003ba4 <TIM_OC4_SetConfig+0xd0>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d109      	bne.n	8003b68 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003b5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	695b      	ldr	r3, [r3, #20]
 8003b60:	019b      	lsls	r3, r3, #6
 8003b62:	697a      	ldr	r2, [r7, #20]
 8003b64:	4313      	orrs	r3, r2
 8003b66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	697a      	ldr	r2, [r7, #20]
 8003b6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	693a      	ldr	r2, [r7, #16]
 8003b80:	621a      	str	r2, [r3, #32]
}
 8003b82:	bf00      	nop
 8003b84:	371c      	adds	r7, #28
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr
 8003b8e:	bf00      	nop
 8003b90:	feff8fff 	.word	0xfeff8fff
 8003b94:	40010000 	.word	0x40010000
 8003b98:	40010400 	.word	0x40010400
 8003b9c:	40014000 	.word	0x40014000
 8003ba0:	40014400 	.word	0x40014400
 8003ba4:	40014800 	.word	0x40014800

08003ba8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6a1b      	ldr	r3, [r3, #32]
 8003bb6:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	4b21      	ldr	r3, [pc, #132]	@ (8003c58 <TIM_OC5_SetConfig+0xb0>)
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	68fa      	ldr	r2, [r7, #12]
 8003bde:	4313      	orrs	r3, r2
 8003be0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003be8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003bea:	683b      	ldr	r3, [r7, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	041b      	lsls	r3, r3, #16
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a18      	ldr	r2, [pc, #96]	@ (8003c5c <TIM_OC5_SetConfig+0xb4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d00f      	beq.n	8003c1e <TIM_OC5_SetConfig+0x76>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a17      	ldr	r2, [pc, #92]	@ (8003c60 <TIM_OC5_SetConfig+0xb8>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d00b      	beq.n	8003c1e <TIM_OC5_SetConfig+0x76>
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a16      	ldr	r2, [pc, #88]	@ (8003c64 <TIM_OC5_SetConfig+0xbc>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d007      	beq.n	8003c1e <TIM_OC5_SetConfig+0x76>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	4a15      	ldr	r2, [pc, #84]	@ (8003c68 <TIM_OC5_SetConfig+0xc0>)
 8003c12:	4293      	cmp	r3, r2
 8003c14:	d003      	beq.n	8003c1e <TIM_OC5_SetConfig+0x76>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a14      	ldr	r2, [pc, #80]	@ (8003c6c <TIM_OC5_SetConfig+0xc4>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d109      	bne.n	8003c32 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c24:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	695b      	ldr	r3, [r3, #20]
 8003c2a:	021b      	lsls	r3, r3, #8
 8003c2c:	697a      	ldr	r2, [r7, #20]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	68fa      	ldr	r2, [r7, #12]
 8003c3c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	621a      	str	r2, [r3, #32]
}
 8003c4c:	bf00      	nop
 8003c4e:	371c      	adds	r7, #28
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr
 8003c58:	fffeff8f 	.word	0xfffeff8f
 8003c5c:	40010000 	.word	0x40010000
 8003c60:	40010400 	.word	0x40010400
 8003c64:	40014000 	.word	0x40014000
 8003c68:	40014400 	.word	0x40014400
 8003c6c:	40014800 	.word	0x40014800

08003c70 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003c70:	b480      	push	{r7}
 8003c72:	b087      	sub	sp, #28
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6a1b      	ldr	r3, [r3, #32]
 8003c7e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a1b      	ldr	r3, [r3, #32]
 8003c84:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4b22      	ldr	r3, [pc, #136]	@ (8003d24 <TIM_OC6_SetConfig+0xb4>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	021b      	lsls	r3, r3, #8
 8003ca6:	68fa      	ldr	r2, [r7, #12]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003cac:	693b      	ldr	r3, [r7, #16]
 8003cae:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003cb2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	051b      	lsls	r3, r3, #20
 8003cba:	693a      	ldr	r2, [r7, #16]
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a19      	ldr	r2, [pc, #100]	@ (8003d28 <TIM_OC6_SetConfig+0xb8>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d00f      	beq.n	8003ce8 <TIM_OC6_SetConfig+0x78>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a18      	ldr	r2, [pc, #96]	@ (8003d2c <TIM_OC6_SetConfig+0xbc>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d00b      	beq.n	8003ce8 <TIM_OC6_SetConfig+0x78>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a17      	ldr	r2, [pc, #92]	@ (8003d30 <TIM_OC6_SetConfig+0xc0>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d007      	beq.n	8003ce8 <TIM_OC6_SetConfig+0x78>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a16      	ldr	r2, [pc, #88]	@ (8003d34 <TIM_OC6_SetConfig+0xc4>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d003      	beq.n	8003ce8 <TIM_OC6_SetConfig+0x78>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a15      	ldr	r2, [pc, #84]	@ (8003d38 <TIM_OC6_SetConfig+0xc8>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d109      	bne.n	8003cfc <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003ce8:	697b      	ldr	r3, [r7, #20]
 8003cea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cee:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003cf0:	683b      	ldr	r3, [r7, #0]
 8003cf2:	695b      	ldr	r3, [r3, #20]
 8003cf4:	029b      	lsls	r3, r3, #10
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	4313      	orrs	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	685a      	ldr	r2, [r3, #4]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	693a      	ldr	r2, [r7, #16]
 8003d14:	621a      	str	r2, [r3, #32]
}
 8003d16:	bf00      	nop
 8003d18:	371c      	adds	r7, #28
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d20:	4770      	bx	lr
 8003d22:	bf00      	nop
 8003d24:	feff8fff 	.word	0xfeff8fff
 8003d28:	40010000 	.word	0x40010000
 8003d2c:	40010400 	.word	0x40010400
 8003d30:	40014000 	.word	0x40014000
 8003d34:	40014400 	.word	0x40014400
 8003d38:	40014800 	.word	0x40014800

08003d3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d3c:	b480      	push	{r7}
 8003d3e:	b087      	sub	sp, #28
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a1b      	ldr	r3, [r3, #32]
 8003d4c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	6a1b      	ldr	r3, [r3, #32]
 8003d52:	f023 0201 	bic.w	r2, r3, #1
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	693a      	ldr	r2, [r7, #16]
 8003d6e:	4313      	orrs	r3, r2
 8003d70:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	f023 030a 	bic.w	r3, r3, #10
 8003d78:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003d7a:	697a      	ldr	r2, [r7, #20]
 8003d7c:	68bb      	ldr	r3, [r7, #8]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	693a      	ldr	r2, [r7, #16]
 8003d86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	697a      	ldr	r2, [r7, #20]
 8003d8c:	621a      	str	r2, [r3, #32]
}
 8003d8e:	bf00      	nop
 8003d90:	371c      	adds	r7, #28
 8003d92:	46bd      	mov	sp, r7
 8003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d98:	4770      	bx	lr

08003d9a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d9a:	b480      	push	{r7}
 8003d9c:	b087      	sub	sp, #28
 8003d9e:	af00      	add	r7, sp, #0
 8003da0:	60f8      	str	r0, [r7, #12]
 8003da2:	60b9      	str	r1, [r7, #8]
 8003da4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6a1b      	ldr	r3, [r3, #32]
 8003daa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	f023 0210 	bic.w	r2, r3, #16
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	699b      	ldr	r3, [r3, #24]
 8003dbc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003dc4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	031b      	lsls	r3, r3, #12
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003dd6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003dd8:	68bb      	ldr	r3, [r7, #8]
 8003dda:	011b      	lsls	r3, r3, #4
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	693a      	ldr	r2, [r7, #16]
 8003de6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	621a      	str	r2, [r3, #32]
}
 8003dee:	bf00      	nop
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	4b09      	ldr	r3, [pc, #36]	@ (8003e34 <TIM_ITRx_SetConfig+0x38>)
 8003e10:	4013      	ands	r3, r2
 8003e12:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e14:	683a      	ldr	r2, [r7, #0]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	f043 0307 	orr.w	r3, r3, #7
 8003e1e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	68fa      	ldr	r2, [r7, #12]
 8003e24:	609a      	str	r2, [r3, #8]
}
 8003e26:	bf00      	nop
 8003e28:	3714      	adds	r7, #20
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr
 8003e32:	bf00      	nop
 8003e34:	ffcfff8f 	.word	0xffcfff8f

08003e38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b087      	sub	sp, #28
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	60f8      	str	r0, [r7, #12]
 8003e40:	60b9      	str	r1, [r7, #8]
 8003e42:	607a      	str	r2, [r7, #4]
 8003e44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	689b      	ldr	r3, [r3, #8]
 8003e4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	021a      	lsls	r2, r3, #8
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	431a      	orrs	r2, r3
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	609a      	str	r2, [r3, #8]
}
 8003e6c:	bf00      	nop
 8003e6e:	371c      	adds	r7, #28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b087      	sub	sp, #28
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	f003 031f 	and.w	r3, r3, #31
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e90:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	6a1a      	ldr	r2, [r3, #32]
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	43db      	mvns	r3, r3
 8003e9a:	401a      	ands	r2, r3
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a1a      	ldr	r2, [r3, #32]
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f003 031f 	and.w	r3, r3, #31
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	fa01 f303 	lsl.w	r3, r1, r3
 8003eb0:	431a      	orrs	r2, r3
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	621a      	str	r2, [r3, #32]
}
 8003eb6:	bf00      	nop
 8003eb8:	371c      	adds	r7, #28
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
	...

08003ec4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ed4:	2b01      	cmp	r3, #1
 8003ed6:	d101      	bne.n	8003edc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ed8:	2302      	movs	r3, #2
 8003eda:	e06d      	b.n	8003fb8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2202      	movs	r2, #2
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	4a30      	ldr	r2, [pc, #192]	@ (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d004      	beq.n	8003f10 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a2f      	ldr	r2, [pc, #188]	@ (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d108      	bne.n	8003f22 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8003f16:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	68fa      	ldr	r2, [r7, #12]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f28:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f2a:	683b      	ldr	r3, [r7, #0]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68fa      	ldr	r2, [r7, #12]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4a20      	ldr	r2, [pc, #128]	@ (8003fc4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d022      	beq.n	8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f4e:	d01d      	beq.n	8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	4a1d      	ldr	r2, [pc, #116]	@ (8003fcc <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d018      	beq.n	8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a1c      	ldr	r2, [pc, #112]	@ (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d013      	beq.n	8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a1a      	ldr	r2, [pc, #104]	@ (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d00e      	beq.n	8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a15      	ldr	r2, [pc, #84]	@ (8003fc8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d009      	beq.n	8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a16      	ldr	r2, [pc, #88]	@ (8003fd8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d004      	beq.n	8003f8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a15      	ldr	r2, [pc, #84]	@ (8003fdc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d10c      	bne.n	8003fa6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f92:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	68ba      	ldr	r2, [r7, #8]
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003fb6:	2300      	movs	r3, #0
}
 8003fb8:	4618      	mov	r0, r3
 8003fba:	3714      	adds	r7, #20
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr
 8003fc4:	40010000 	.word	0x40010000
 8003fc8:	40010400 	.word	0x40010400
 8003fcc:	40000400 	.word	0x40000400
 8003fd0:	40000800 	.word	0x40000800
 8003fd4:	40000c00 	.word	0x40000c00
 8003fd8:	40001800 	.word	0x40001800
 8003fdc:	40014000 	.word	0x40014000

08003fe0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b085      	sub	sp, #20
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
 8003fe8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003fea:	2300      	movs	r3, #0
 8003fec:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d101      	bne.n	8003ffc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003ff8:	2302      	movs	r3, #2
 8003ffa:	e065      	b.n	80040c8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2201      	movs	r2, #1
 8004000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800400a:	683b      	ldr	r3, [r7, #0]
 800400c:	68db      	ldr	r3, [r3, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	4313      	orrs	r3, r2
 800401e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	4313      	orrs	r3, r2
 800402c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	695b      	ldr	r3, [r3, #20]
 8004054:	4313      	orrs	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	699b      	ldr	r3, [r3, #24]
 8004070:	041b      	lsls	r3, r3, #16
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4a16      	ldr	r2, [pc, #88]	@ (80040d4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d004      	beq.n	800408a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a14      	ldr	r2, [pc, #80]	@ (80040d8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d115      	bne.n	80040b6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004094:	051b      	lsls	r3, r3, #20
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	69db      	ldr	r3, [r3, #28]
 80040a4:	4313      	orrs	r3, r2
 80040a6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3714      	adds	r7, #20
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr
 80040d4:	40010000 	.word	0x40010000
 80040d8:	40010400 	.word	0x40010400

080040dc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b082      	sub	sp, #8
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e042      	b.n	8004174 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d106      	bne.n	8004106 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f83b 	bl	800417c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	2224      	movs	r2, #36	@ 0x24
 800410a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f022 0201 	bic.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f000 fe28 	bl	8004d7c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800412c:	6878      	ldr	r0, [r7, #4]
 800412e:	f000 f8bd 	bl	80042ac <UART_SetConfig>
 8004132:	4603      	mov	r3, r0
 8004134:	2b01      	cmp	r3, #1
 8004136:	d101      	bne.n	800413c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004138:	2301      	movs	r3, #1
 800413a:	e01b      	b.n	8004174 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	685a      	ldr	r2, [r3, #4]
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800414a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	689a      	ldr	r2, [r3, #8]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800415a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f042 0201 	orr.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 fea7 	bl	8004ec0 <UART_CheckIdleState>
 8004172:	4603      	mov	r3, r0
}
 8004174:	4618      	mov	r0, r3
 8004176:	3708      	adds	r7, #8
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08a      	sub	sp, #40	@ 0x28
 8004194:	af02      	add	r7, sp, #8
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	603b      	str	r3, [r7, #0]
 800419c:	4613      	mov	r3, r2
 800419e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	d17b      	bne.n	80042a2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80041aa:	68bb      	ldr	r3, [r7, #8]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d002      	beq.n	80041b6 <HAL_UART_Transmit+0x26>
 80041b0:	88fb      	ldrh	r3, [r7, #6]
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d101      	bne.n	80041ba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e074      	b.n	80042a4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2221      	movs	r2, #33	@ 0x21
 80041c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80041ca:	f7fd f83f 	bl	800124c <HAL_GetTick>
 80041ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	88fa      	ldrh	r2, [r7, #6]
 80041d4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	88fa      	ldrh	r2, [r7, #6]
 80041dc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e8:	d108      	bne.n	80041fc <HAL_UART_Transmit+0x6c>
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	691b      	ldr	r3, [r3, #16]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d104      	bne.n	80041fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80041f2:	2300      	movs	r3, #0
 80041f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	e003      	b.n	8004204 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004200:	2300      	movs	r3, #0
 8004202:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004204:	e030      	b.n	8004268 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2200      	movs	r2, #0
 800420e:	2180      	movs	r1, #128	@ 0x80
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 feff 	bl	8005014 <UART_WaitOnFlagUntilTimeout>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e03d      	b.n	80042a4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004228:	69fb      	ldr	r3, [r7, #28]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d10b      	bne.n	8004246 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800422e:	69bb      	ldr	r3, [r7, #24]
 8004230:	881b      	ldrh	r3, [r3, #0]
 8004232:	461a      	mov	r2, r3
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800423c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800423e:	69bb      	ldr	r3, [r7, #24]
 8004240:	3302      	adds	r3, #2
 8004242:	61bb      	str	r3, [r7, #24]
 8004244:	e007      	b.n	8004256 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004246:	69fb      	ldr	r3, [r7, #28]
 8004248:	781a      	ldrb	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	3301      	adds	r3, #1
 8004254:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800425c:	b29b      	uxth	r3, r3
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800426e:	b29b      	uxth	r3, r3
 8004270:	2b00      	cmp	r3, #0
 8004272:	d1c8      	bne.n	8004206 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	2200      	movs	r2, #0
 800427c:	2140      	movs	r1, #64	@ 0x40
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 fec8 	bl	8005014 <UART_WaitOnFlagUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d005      	beq.n	8004296 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	2220      	movs	r2, #32
 800428e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004292:	2303      	movs	r3, #3
 8004294:	e006      	b.n	80042a4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2220      	movs	r2, #32
 800429a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800429e:	2300      	movs	r3, #0
 80042a0:	e000      	b.n	80042a4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80042a2:	2302      	movs	r3, #2
  }
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3720      	adds	r7, #32
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd80      	pop	{r7, pc}

080042ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b0:	b092      	sub	sp, #72	@ 0x48
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	689a      	ldr	r2, [r3, #8]
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	691b      	ldr	r3, [r3, #16]
 80042c4:	431a      	orrs	r2, r3
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	431a      	orrs	r2, r3
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	4bbe      	ldr	r3, [pc, #760]	@ (80045d4 <UART_SetConfig+0x328>)
 80042dc:	4013      	ands	r3, r2
 80042de:	697a      	ldr	r2, [r7, #20]
 80042e0:	6812      	ldr	r2, [r2, #0]
 80042e2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80042e4:	430b      	orrs	r3, r1
 80042e6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	430a      	orrs	r2, r1
 80042fc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	699b      	ldr	r3, [r3, #24]
 8004302:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4ab3      	ldr	r2, [pc, #716]	@ (80045d8 <UART_SetConfig+0x32c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d004      	beq.n	8004318 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800430e:	697b      	ldr	r3, [r7, #20]
 8004310:	6a1b      	ldr	r3, [r3, #32]
 8004312:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004314:	4313      	orrs	r3, r2
 8004316:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	4baf      	ldr	r3, [pc, #700]	@ (80045dc <UART_SetConfig+0x330>)
 8004320:	4013      	ands	r3, r2
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	6812      	ldr	r2, [r2, #0]
 8004326:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004328:	430b      	orrs	r3, r1
 800432a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004332:	f023 010f 	bic.w	r1, r3, #15
 8004336:	697b      	ldr	r3, [r7, #20]
 8004338:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800433a:	697b      	ldr	r3, [r7, #20]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	430a      	orrs	r2, r1
 8004340:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	4aa6      	ldr	r2, [pc, #664]	@ (80045e0 <UART_SetConfig+0x334>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d177      	bne.n	800443c <UART_SetConfig+0x190>
 800434c:	4ba5      	ldr	r3, [pc, #660]	@ (80045e4 <UART_SetConfig+0x338>)
 800434e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004350:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004354:	2b28      	cmp	r3, #40	@ 0x28
 8004356:	d86d      	bhi.n	8004434 <UART_SetConfig+0x188>
 8004358:	a201      	add	r2, pc, #4	@ (adr r2, 8004360 <UART_SetConfig+0xb4>)
 800435a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800435e:	bf00      	nop
 8004360:	08004405 	.word	0x08004405
 8004364:	08004435 	.word	0x08004435
 8004368:	08004435 	.word	0x08004435
 800436c:	08004435 	.word	0x08004435
 8004370:	08004435 	.word	0x08004435
 8004374:	08004435 	.word	0x08004435
 8004378:	08004435 	.word	0x08004435
 800437c:	08004435 	.word	0x08004435
 8004380:	0800440d 	.word	0x0800440d
 8004384:	08004435 	.word	0x08004435
 8004388:	08004435 	.word	0x08004435
 800438c:	08004435 	.word	0x08004435
 8004390:	08004435 	.word	0x08004435
 8004394:	08004435 	.word	0x08004435
 8004398:	08004435 	.word	0x08004435
 800439c:	08004435 	.word	0x08004435
 80043a0:	08004415 	.word	0x08004415
 80043a4:	08004435 	.word	0x08004435
 80043a8:	08004435 	.word	0x08004435
 80043ac:	08004435 	.word	0x08004435
 80043b0:	08004435 	.word	0x08004435
 80043b4:	08004435 	.word	0x08004435
 80043b8:	08004435 	.word	0x08004435
 80043bc:	08004435 	.word	0x08004435
 80043c0:	0800441d 	.word	0x0800441d
 80043c4:	08004435 	.word	0x08004435
 80043c8:	08004435 	.word	0x08004435
 80043cc:	08004435 	.word	0x08004435
 80043d0:	08004435 	.word	0x08004435
 80043d4:	08004435 	.word	0x08004435
 80043d8:	08004435 	.word	0x08004435
 80043dc:	08004435 	.word	0x08004435
 80043e0:	08004425 	.word	0x08004425
 80043e4:	08004435 	.word	0x08004435
 80043e8:	08004435 	.word	0x08004435
 80043ec:	08004435 	.word	0x08004435
 80043f0:	08004435 	.word	0x08004435
 80043f4:	08004435 	.word	0x08004435
 80043f8:	08004435 	.word	0x08004435
 80043fc:	08004435 	.word	0x08004435
 8004400:	0800442d 	.word	0x0800442d
 8004404:	2301      	movs	r3, #1
 8004406:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800440a:	e222      	b.n	8004852 <UART_SetConfig+0x5a6>
 800440c:	2304      	movs	r3, #4
 800440e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004412:	e21e      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004414:	2308      	movs	r3, #8
 8004416:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800441a:	e21a      	b.n	8004852 <UART_SetConfig+0x5a6>
 800441c:	2310      	movs	r3, #16
 800441e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004422:	e216      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004424:	2320      	movs	r3, #32
 8004426:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800442a:	e212      	b.n	8004852 <UART_SetConfig+0x5a6>
 800442c:	2340      	movs	r3, #64	@ 0x40
 800442e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004432:	e20e      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004434:	2380      	movs	r3, #128	@ 0x80
 8004436:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800443a:	e20a      	b.n	8004852 <UART_SetConfig+0x5a6>
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a69      	ldr	r2, [pc, #420]	@ (80045e8 <UART_SetConfig+0x33c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d130      	bne.n	80044a8 <UART_SetConfig+0x1fc>
 8004446:	4b67      	ldr	r3, [pc, #412]	@ (80045e4 <UART_SetConfig+0x338>)
 8004448:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800444a:	f003 0307 	and.w	r3, r3, #7
 800444e:	2b05      	cmp	r3, #5
 8004450:	d826      	bhi.n	80044a0 <UART_SetConfig+0x1f4>
 8004452:	a201      	add	r2, pc, #4	@ (adr r2, 8004458 <UART_SetConfig+0x1ac>)
 8004454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004458:	08004471 	.word	0x08004471
 800445c:	08004479 	.word	0x08004479
 8004460:	08004481 	.word	0x08004481
 8004464:	08004489 	.word	0x08004489
 8004468:	08004491 	.word	0x08004491
 800446c:	08004499 	.word	0x08004499
 8004470:	2300      	movs	r3, #0
 8004472:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004476:	e1ec      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004478:	2304      	movs	r3, #4
 800447a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800447e:	e1e8      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004480:	2308      	movs	r3, #8
 8004482:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004486:	e1e4      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004488:	2310      	movs	r3, #16
 800448a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800448e:	e1e0      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004490:	2320      	movs	r3, #32
 8004492:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004496:	e1dc      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004498:	2340      	movs	r3, #64	@ 0x40
 800449a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800449e:	e1d8      	b.n	8004852 <UART_SetConfig+0x5a6>
 80044a0:	2380      	movs	r3, #128	@ 0x80
 80044a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044a6:	e1d4      	b.n	8004852 <UART_SetConfig+0x5a6>
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a4f      	ldr	r2, [pc, #316]	@ (80045ec <UART_SetConfig+0x340>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d130      	bne.n	8004514 <UART_SetConfig+0x268>
 80044b2:	4b4c      	ldr	r3, [pc, #304]	@ (80045e4 <UART_SetConfig+0x338>)
 80044b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b6:	f003 0307 	and.w	r3, r3, #7
 80044ba:	2b05      	cmp	r3, #5
 80044bc:	d826      	bhi.n	800450c <UART_SetConfig+0x260>
 80044be:	a201      	add	r2, pc, #4	@ (adr r2, 80044c4 <UART_SetConfig+0x218>)
 80044c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044c4:	080044dd 	.word	0x080044dd
 80044c8:	080044e5 	.word	0x080044e5
 80044cc:	080044ed 	.word	0x080044ed
 80044d0:	080044f5 	.word	0x080044f5
 80044d4:	080044fd 	.word	0x080044fd
 80044d8:	08004505 	.word	0x08004505
 80044dc:	2300      	movs	r3, #0
 80044de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044e2:	e1b6      	b.n	8004852 <UART_SetConfig+0x5a6>
 80044e4:	2304      	movs	r3, #4
 80044e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044ea:	e1b2      	b.n	8004852 <UART_SetConfig+0x5a6>
 80044ec:	2308      	movs	r3, #8
 80044ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044f2:	e1ae      	b.n	8004852 <UART_SetConfig+0x5a6>
 80044f4:	2310      	movs	r3, #16
 80044f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80044fa:	e1aa      	b.n	8004852 <UART_SetConfig+0x5a6>
 80044fc:	2320      	movs	r3, #32
 80044fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004502:	e1a6      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004504:	2340      	movs	r3, #64	@ 0x40
 8004506:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800450a:	e1a2      	b.n	8004852 <UART_SetConfig+0x5a6>
 800450c:	2380      	movs	r3, #128	@ 0x80
 800450e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004512:	e19e      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	4a35      	ldr	r2, [pc, #212]	@ (80045f0 <UART_SetConfig+0x344>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d130      	bne.n	8004580 <UART_SetConfig+0x2d4>
 800451e:	4b31      	ldr	r3, [pc, #196]	@ (80045e4 <UART_SetConfig+0x338>)
 8004520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004522:	f003 0307 	and.w	r3, r3, #7
 8004526:	2b05      	cmp	r3, #5
 8004528:	d826      	bhi.n	8004578 <UART_SetConfig+0x2cc>
 800452a:	a201      	add	r2, pc, #4	@ (adr r2, 8004530 <UART_SetConfig+0x284>)
 800452c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004530:	08004549 	.word	0x08004549
 8004534:	08004551 	.word	0x08004551
 8004538:	08004559 	.word	0x08004559
 800453c:	08004561 	.word	0x08004561
 8004540:	08004569 	.word	0x08004569
 8004544:	08004571 	.word	0x08004571
 8004548:	2300      	movs	r3, #0
 800454a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800454e:	e180      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004550:	2304      	movs	r3, #4
 8004552:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004556:	e17c      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004558:	2308      	movs	r3, #8
 800455a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800455e:	e178      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004560:	2310      	movs	r3, #16
 8004562:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004566:	e174      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004568:	2320      	movs	r3, #32
 800456a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800456e:	e170      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004570:	2340      	movs	r3, #64	@ 0x40
 8004572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004576:	e16c      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004578:	2380      	movs	r3, #128	@ 0x80
 800457a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800457e:	e168      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a1b      	ldr	r2, [pc, #108]	@ (80045f4 <UART_SetConfig+0x348>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d142      	bne.n	8004610 <UART_SetConfig+0x364>
 800458a:	4b16      	ldr	r3, [pc, #88]	@ (80045e4 <UART_SetConfig+0x338>)
 800458c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800458e:	f003 0307 	and.w	r3, r3, #7
 8004592:	2b05      	cmp	r3, #5
 8004594:	d838      	bhi.n	8004608 <UART_SetConfig+0x35c>
 8004596:	a201      	add	r2, pc, #4	@ (adr r2, 800459c <UART_SetConfig+0x2f0>)
 8004598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459c:	080045b5 	.word	0x080045b5
 80045a0:	080045bd 	.word	0x080045bd
 80045a4:	080045c5 	.word	0x080045c5
 80045a8:	080045cd 	.word	0x080045cd
 80045ac:	080045f9 	.word	0x080045f9
 80045b0:	08004601 	.word	0x08004601
 80045b4:	2300      	movs	r3, #0
 80045b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ba:	e14a      	b.n	8004852 <UART_SetConfig+0x5a6>
 80045bc:	2304      	movs	r3, #4
 80045be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045c2:	e146      	b.n	8004852 <UART_SetConfig+0x5a6>
 80045c4:	2308      	movs	r3, #8
 80045c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ca:	e142      	b.n	8004852 <UART_SetConfig+0x5a6>
 80045cc:	2310      	movs	r3, #16
 80045ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045d2:	e13e      	b.n	8004852 <UART_SetConfig+0x5a6>
 80045d4:	cfff69f3 	.word	0xcfff69f3
 80045d8:	58000c00 	.word	0x58000c00
 80045dc:	11fff4ff 	.word	0x11fff4ff
 80045e0:	40011000 	.word	0x40011000
 80045e4:	58024400 	.word	0x58024400
 80045e8:	40004400 	.word	0x40004400
 80045ec:	40004800 	.word	0x40004800
 80045f0:	40004c00 	.word	0x40004c00
 80045f4:	40005000 	.word	0x40005000
 80045f8:	2320      	movs	r3, #32
 80045fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045fe:	e128      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004600:	2340      	movs	r3, #64	@ 0x40
 8004602:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004606:	e124      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004608:	2380      	movs	r3, #128	@ 0x80
 800460a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800460e:	e120      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4acb      	ldr	r2, [pc, #812]	@ (8004944 <UART_SetConfig+0x698>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d176      	bne.n	8004708 <UART_SetConfig+0x45c>
 800461a:	4bcb      	ldr	r3, [pc, #812]	@ (8004948 <UART_SetConfig+0x69c>)
 800461c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800461e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004622:	2b28      	cmp	r3, #40	@ 0x28
 8004624:	d86c      	bhi.n	8004700 <UART_SetConfig+0x454>
 8004626:	a201      	add	r2, pc, #4	@ (adr r2, 800462c <UART_SetConfig+0x380>)
 8004628:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462c:	080046d1 	.word	0x080046d1
 8004630:	08004701 	.word	0x08004701
 8004634:	08004701 	.word	0x08004701
 8004638:	08004701 	.word	0x08004701
 800463c:	08004701 	.word	0x08004701
 8004640:	08004701 	.word	0x08004701
 8004644:	08004701 	.word	0x08004701
 8004648:	08004701 	.word	0x08004701
 800464c:	080046d9 	.word	0x080046d9
 8004650:	08004701 	.word	0x08004701
 8004654:	08004701 	.word	0x08004701
 8004658:	08004701 	.word	0x08004701
 800465c:	08004701 	.word	0x08004701
 8004660:	08004701 	.word	0x08004701
 8004664:	08004701 	.word	0x08004701
 8004668:	08004701 	.word	0x08004701
 800466c:	080046e1 	.word	0x080046e1
 8004670:	08004701 	.word	0x08004701
 8004674:	08004701 	.word	0x08004701
 8004678:	08004701 	.word	0x08004701
 800467c:	08004701 	.word	0x08004701
 8004680:	08004701 	.word	0x08004701
 8004684:	08004701 	.word	0x08004701
 8004688:	08004701 	.word	0x08004701
 800468c:	080046e9 	.word	0x080046e9
 8004690:	08004701 	.word	0x08004701
 8004694:	08004701 	.word	0x08004701
 8004698:	08004701 	.word	0x08004701
 800469c:	08004701 	.word	0x08004701
 80046a0:	08004701 	.word	0x08004701
 80046a4:	08004701 	.word	0x08004701
 80046a8:	08004701 	.word	0x08004701
 80046ac:	080046f1 	.word	0x080046f1
 80046b0:	08004701 	.word	0x08004701
 80046b4:	08004701 	.word	0x08004701
 80046b8:	08004701 	.word	0x08004701
 80046bc:	08004701 	.word	0x08004701
 80046c0:	08004701 	.word	0x08004701
 80046c4:	08004701 	.word	0x08004701
 80046c8:	08004701 	.word	0x08004701
 80046cc:	080046f9 	.word	0x080046f9
 80046d0:	2301      	movs	r3, #1
 80046d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046d6:	e0bc      	b.n	8004852 <UART_SetConfig+0x5a6>
 80046d8:	2304      	movs	r3, #4
 80046da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046de:	e0b8      	b.n	8004852 <UART_SetConfig+0x5a6>
 80046e0:	2308      	movs	r3, #8
 80046e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046e6:	e0b4      	b.n	8004852 <UART_SetConfig+0x5a6>
 80046e8:	2310      	movs	r3, #16
 80046ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ee:	e0b0      	b.n	8004852 <UART_SetConfig+0x5a6>
 80046f0:	2320      	movs	r3, #32
 80046f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046f6:	e0ac      	b.n	8004852 <UART_SetConfig+0x5a6>
 80046f8:	2340      	movs	r3, #64	@ 0x40
 80046fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046fe:	e0a8      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004700:	2380      	movs	r3, #128	@ 0x80
 8004702:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004706:	e0a4      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	4a8f      	ldr	r2, [pc, #572]	@ (800494c <UART_SetConfig+0x6a0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d130      	bne.n	8004774 <UART_SetConfig+0x4c8>
 8004712:	4b8d      	ldr	r3, [pc, #564]	@ (8004948 <UART_SetConfig+0x69c>)
 8004714:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004716:	f003 0307 	and.w	r3, r3, #7
 800471a:	2b05      	cmp	r3, #5
 800471c:	d826      	bhi.n	800476c <UART_SetConfig+0x4c0>
 800471e:	a201      	add	r2, pc, #4	@ (adr r2, 8004724 <UART_SetConfig+0x478>)
 8004720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004724:	0800473d 	.word	0x0800473d
 8004728:	08004745 	.word	0x08004745
 800472c:	0800474d 	.word	0x0800474d
 8004730:	08004755 	.word	0x08004755
 8004734:	0800475d 	.word	0x0800475d
 8004738:	08004765 	.word	0x08004765
 800473c:	2300      	movs	r3, #0
 800473e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004742:	e086      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004744:	2304      	movs	r3, #4
 8004746:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800474a:	e082      	b.n	8004852 <UART_SetConfig+0x5a6>
 800474c:	2308      	movs	r3, #8
 800474e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004752:	e07e      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004754:	2310      	movs	r3, #16
 8004756:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800475a:	e07a      	b.n	8004852 <UART_SetConfig+0x5a6>
 800475c:	2320      	movs	r3, #32
 800475e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004762:	e076      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004764:	2340      	movs	r3, #64	@ 0x40
 8004766:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800476a:	e072      	b.n	8004852 <UART_SetConfig+0x5a6>
 800476c:	2380      	movs	r3, #128	@ 0x80
 800476e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004772:	e06e      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004774:	697b      	ldr	r3, [r7, #20]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	4a75      	ldr	r2, [pc, #468]	@ (8004950 <UART_SetConfig+0x6a4>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d130      	bne.n	80047e0 <UART_SetConfig+0x534>
 800477e:	4b72      	ldr	r3, [pc, #456]	@ (8004948 <UART_SetConfig+0x69c>)
 8004780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004782:	f003 0307 	and.w	r3, r3, #7
 8004786:	2b05      	cmp	r3, #5
 8004788:	d826      	bhi.n	80047d8 <UART_SetConfig+0x52c>
 800478a:	a201      	add	r2, pc, #4	@ (adr r2, 8004790 <UART_SetConfig+0x4e4>)
 800478c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004790:	080047a9 	.word	0x080047a9
 8004794:	080047b1 	.word	0x080047b1
 8004798:	080047b9 	.word	0x080047b9
 800479c:	080047c1 	.word	0x080047c1
 80047a0:	080047c9 	.word	0x080047c9
 80047a4:	080047d1 	.word	0x080047d1
 80047a8:	2300      	movs	r3, #0
 80047aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ae:	e050      	b.n	8004852 <UART_SetConfig+0x5a6>
 80047b0:	2304      	movs	r3, #4
 80047b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047b6:	e04c      	b.n	8004852 <UART_SetConfig+0x5a6>
 80047b8:	2308      	movs	r3, #8
 80047ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047be:	e048      	b.n	8004852 <UART_SetConfig+0x5a6>
 80047c0:	2310      	movs	r3, #16
 80047c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047c6:	e044      	b.n	8004852 <UART_SetConfig+0x5a6>
 80047c8:	2320      	movs	r3, #32
 80047ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ce:	e040      	b.n	8004852 <UART_SetConfig+0x5a6>
 80047d0:	2340      	movs	r3, #64	@ 0x40
 80047d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047d6:	e03c      	b.n	8004852 <UART_SetConfig+0x5a6>
 80047d8:	2380      	movs	r3, #128	@ 0x80
 80047da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047de:	e038      	b.n	8004852 <UART_SetConfig+0x5a6>
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a5b      	ldr	r2, [pc, #364]	@ (8004954 <UART_SetConfig+0x6a8>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d130      	bne.n	800484c <UART_SetConfig+0x5a0>
 80047ea:	4b57      	ldr	r3, [pc, #348]	@ (8004948 <UART_SetConfig+0x69c>)
 80047ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80047ee:	f003 0307 	and.w	r3, r3, #7
 80047f2:	2b05      	cmp	r3, #5
 80047f4:	d826      	bhi.n	8004844 <UART_SetConfig+0x598>
 80047f6:	a201      	add	r2, pc, #4	@ (adr r2, 80047fc <UART_SetConfig+0x550>)
 80047f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047fc:	08004815 	.word	0x08004815
 8004800:	0800481d 	.word	0x0800481d
 8004804:	08004825 	.word	0x08004825
 8004808:	0800482d 	.word	0x0800482d
 800480c:	08004835 	.word	0x08004835
 8004810:	0800483d 	.word	0x0800483d
 8004814:	2302      	movs	r3, #2
 8004816:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800481a:	e01a      	b.n	8004852 <UART_SetConfig+0x5a6>
 800481c:	2304      	movs	r3, #4
 800481e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004822:	e016      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004824:	2308      	movs	r3, #8
 8004826:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800482a:	e012      	b.n	8004852 <UART_SetConfig+0x5a6>
 800482c:	2310      	movs	r3, #16
 800482e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004832:	e00e      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004834:	2320      	movs	r3, #32
 8004836:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800483a:	e00a      	b.n	8004852 <UART_SetConfig+0x5a6>
 800483c:	2340      	movs	r3, #64	@ 0x40
 800483e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004842:	e006      	b.n	8004852 <UART_SetConfig+0x5a6>
 8004844:	2380      	movs	r3, #128	@ 0x80
 8004846:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800484a:	e002      	b.n	8004852 <UART_SetConfig+0x5a6>
 800484c:	2380      	movs	r3, #128	@ 0x80
 800484e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	4a3f      	ldr	r2, [pc, #252]	@ (8004954 <UART_SetConfig+0x6a8>)
 8004858:	4293      	cmp	r3, r2
 800485a:	f040 80f8 	bne.w	8004a4e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800485e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004862:	2b20      	cmp	r3, #32
 8004864:	dc46      	bgt.n	80048f4 <UART_SetConfig+0x648>
 8004866:	2b02      	cmp	r3, #2
 8004868:	f2c0 8082 	blt.w	8004970 <UART_SetConfig+0x6c4>
 800486c:	3b02      	subs	r3, #2
 800486e:	2b1e      	cmp	r3, #30
 8004870:	d87e      	bhi.n	8004970 <UART_SetConfig+0x6c4>
 8004872:	a201      	add	r2, pc, #4	@ (adr r2, 8004878 <UART_SetConfig+0x5cc>)
 8004874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004878:	080048fb 	.word	0x080048fb
 800487c:	08004971 	.word	0x08004971
 8004880:	08004903 	.word	0x08004903
 8004884:	08004971 	.word	0x08004971
 8004888:	08004971 	.word	0x08004971
 800488c:	08004971 	.word	0x08004971
 8004890:	08004913 	.word	0x08004913
 8004894:	08004971 	.word	0x08004971
 8004898:	08004971 	.word	0x08004971
 800489c:	08004971 	.word	0x08004971
 80048a0:	08004971 	.word	0x08004971
 80048a4:	08004971 	.word	0x08004971
 80048a8:	08004971 	.word	0x08004971
 80048ac:	08004971 	.word	0x08004971
 80048b0:	08004923 	.word	0x08004923
 80048b4:	08004971 	.word	0x08004971
 80048b8:	08004971 	.word	0x08004971
 80048bc:	08004971 	.word	0x08004971
 80048c0:	08004971 	.word	0x08004971
 80048c4:	08004971 	.word	0x08004971
 80048c8:	08004971 	.word	0x08004971
 80048cc:	08004971 	.word	0x08004971
 80048d0:	08004971 	.word	0x08004971
 80048d4:	08004971 	.word	0x08004971
 80048d8:	08004971 	.word	0x08004971
 80048dc:	08004971 	.word	0x08004971
 80048e0:	08004971 	.word	0x08004971
 80048e4:	08004971 	.word	0x08004971
 80048e8:	08004971 	.word	0x08004971
 80048ec:	08004971 	.word	0x08004971
 80048f0:	08004963 	.word	0x08004963
 80048f4:	2b40      	cmp	r3, #64	@ 0x40
 80048f6:	d037      	beq.n	8004968 <UART_SetConfig+0x6bc>
 80048f8:	e03a      	b.n	8004970 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80048fa:	f7fe f819 	bl	8002930 <HAL_RCCEx_GetD3PCLK1Freq>
 80048fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004900:	e03c      	b.n	800497c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004902:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004906:	4618      	mov	r0, r3
 8004908:	f7fe f828 	bl	800295c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800490c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800490e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004910:	e034      	b.n	800497c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004912:	f107 0318 	add.w	r3, r7, #24
 8004916:	4618      	mov	r0, r3
 8004918:	f7fe f974 	bl	8002c04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004920:	e02c      	b.n	800497c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004922:	4b09      	ldr	r3, [pc, #36]	@ (8004948 <UART_SetConfig+0x69c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0320 	and.w	r3, r3, #32
 800492a:	2b00      	cmp	r3, #0
 800492c:	d016      	beq.n	800495c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800492e:	4b06      	ldr	r3, [pc, #24]	@ (8004948 <UART_SetConfig+0x69c>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	08db      	lsrs	r3, r3, #3
 8004934:	f003 0303 	and.w	r3, r3, #3
 8004938:	4a07      	ldr	r2, [pc, #28]	@ (8004958 <UART_SetConfig+0x6ac>)
 800493a:	fa22 f303 	lsr.w	r3, r2, r3
 800493e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004940:	e01c      	b.n	800497c <UART_SetConfig+0x6d0>
 8004942:	bf00      	nop
 8004944:	40011400 	.word	0x40011400
 8004948:	58024400 	.word	0x58024400
 800494c:	40007800 	.word	0x40007800
 8004950:	40007c00 	.word	0x40007c00
 8004954:	58000c00 	.word	0x58000c00
 8004958:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800495c:	4b9d      	ldr	r3, [pc, #628]	@ (8004bd4 <UART_SetConfig+0x928>)
 800495e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004960:	e00c      	b.n	800497c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004962:	4b9d      	ldr	r3, [pc, #628]	@ (8004bd8 <UART_SetConfig+0x92c>)
 8004964:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004966:	e009      	b.n	800497c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004968:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800496c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800496e:	e005      	b.n	800497c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004970:	2300      	movs	r3, #0
 8004972:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004974:	2301      	movs	r3, #1
 8004976:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800497a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800497c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 81de 	beq.w	8004d40 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004988:	4a94      	ldr	r2, [pc, #592]	@ (8004bdc <UART_SetConfig+0x930>)
 800498a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800498e:	461a      	mov	r2, r3
 8004990:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004992:	fbb3 f3f2 	udiv	r3, r3, r2
 8004996:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004998:	697b      	ldr	r3, [r7, #20]
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	4613      	mov	r3, r2
 800499e:	005b      	lsls	r3, r3, #1
 80049a0:	4413      	add	r3, r2
 80049a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d305      	bcc.n	80049b4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80049a8:	697b      	ldr	r3, [r7, #20]
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80049ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049b0:	429a      	cmp	r2, r3
 80049b2:	d903      	bls.n	80049bc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80049b4:	2301      	movs	r3, #1
 80049b6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80049ba:	e1c1      	b.n	8004d40 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049be:	2200      	movs	r2, #0
 80049c0:	60bb      	str	r3, [r7, #8]
 80049c2:	60fa      	str	r2, [r7, #12]
 80049c4:	697b      	ldr	r3, [r7, #20]
 80049c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049c8:	4a84      	ldr	r2, [pc, #528]	@ (8004bdc <UART_SetConfig+0x930>)
 80049ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	2200      	movs	r2, #0
 80049d2:	603b      	str	r3, [r7, #0]
 80049d4:	607a      	str	r2, [r7, #4]
 80049d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80049da:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80049de:	f7fb fccf 	bl	8000380 <__aeabi_uldivmod>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	4610      	mov	r0, r2
 80049e8:	4619      	mov	r1, r3
 80049ea:	f04f 0200 	mov.w	r2, #0
 80049ee:	f04f 0300 	mov.w	r3, #0
 80049f2:	020b      	lsls	r3, r1, #8
 80049f4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80049f8:	0202      	lsls	r2, r0, #8
 80049fa:	6979      	ldr	r1, [r7, #20]
 80049fc:	6849      	ldr	r1, [r1, #4]
 80049fe:	0849      	lsrs	r1, r1, #1
 8004a00:	2000      	movs	r0, #0
 8004a02:	460c      	mov	r4, r1
 8004a04:	4605      	mov	r5, r0
 8004a06:	eb12 0804 	adds.w	r8, r2, r4
 8004a0a:	eb43 0905 	adc.w	r9, r3, r5
 8004a0e:	697b      	ldr	r3, [r7, #20]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	469a      	mov	sl, r3
 8004a16:	4693      	mov	fp, r2
 8004a18:	4652      	mov	r2, sl
 8004a1a:	465b      	mov	r3, fp
 8004a1c:	4640      	mov	r0, r8
 8004a1e:	4649      	mov	r1, r9
 8004a20:	f7fb fcae 	bl	8000380 <__aeabi_uldivmod>
 8004a24:	4602      	mov	r2, r0
 8004a26:	460b      	mov	r3, r1
 8004a28:	4613      	mov	r3, r2
 8004a2a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004a2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004a32:	d308      	bcc.n	8004a46 <UART_SetConfig+0x79a>
 8004a34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a36:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004a3a:	d204      	bcs.n	8004a46 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004a3c:	697b      	ldr	r3, [r7, #20]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004a42:	60da      	str	r2, [r3, #12]
 8004a44:	e17c      	b.n	8004d40 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004a46:	2301      	movs	r3, #1
 8004a48:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004a4c:	e178      	b.n	8004d40 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a4e:	697b      	ldr	r3, [r7, #20]
 8004a50:	69db      	ldr	r3, [r3, #28]
 8004a52:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004a56:	f040 80c5 	bne.w	8004be4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004a5a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004a5e:	2b20      	cmp	r3, #32
 8004a60:	dc48      	bgt.n	8004af4 <UART_SetConfig+0x848>
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	db7b      	blt.n	8004b5e <UART_SetConfig+0x8b2>
 8004a66:	2b20      	cmp	r3, #32
 8004a68:	d879      	bhi.n	8004b5e <UART_SetConfig+0x8b2>
 8004a6a:	a201      	add	r2, pc, #4	@ (adr r2, 8004a70 <UART_SetConfig+0x7c4>)
 8004a6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a70:	08004afb 	.word	0x08004afb
 8004a74:	08004b03 	.word	0x08004b03
 8004a78:	08004b5f 	.word	0x08004b5f
 8004a7c:	08004b5f 	.word	0x08004b5f
 8004a80:	08004b0b 	.word	0x08004b0b
 8004a84:	08004b5f 	.word	0x08004b5f
 8004a88:	08004b5f 	.word	0x08004b5f
 8004a8c:	08004b5f 	.word	0x08004b5f
 8004a90:	08004b1b 	.word	0x08004b1b
 8004a94:	08004b5f 	.word	0x08004b5f
 8004a98:	08004b5f 	.word	0x08004b5f
 8004a9c:	08004b5f 	.word	0x08004b5f
 8004aa0:	08004b5f 	.word	0x08004b5f
 8004aa4:	08004b5f 	.word	0x08004b5f
 8004aa8:	08004b5f 	.word	0x08004b5f
 8004aac:	08004b5f 	.word	0x08004b5f
 8004ab0:	08004b2b 	.word	0x08004b2b
 8004ab4:	08004b5f 	.word	0x08004b5f
 8004ab8:	08004b5f 	.word	0x08004b5f
 8004abc:	08004b5f 	.word	0x08004b5f
 8004ac0:	08004b5f 	.word	0x08004b5f
 8004ac4:	08004b5f 	.word	0x08004b5f
 8004ac8:	08004b5f 	.word	0x08004b5f
 8004acc:	08004b5f 	.word	0x08004b5f
 8004ad0:	08004b5f 	.word	0x08004b5f
 8004ad4:	08004b5f 	.word	0x08004b5f
 8004ad8:	08004b5f 	.word	0x08004b5f
 8004adc:	08004b5f 	.word	0x08004b5f
 8004ae0:	08004b5f 	.word	0x08004b5f
 8004ae4:	08004b5f 	.word	0x08004b5f
 8004ae8:	08004b5f 	.word	0x08004b5f
 8004aec:	08004b5f 	.word	0x08004b5f
 8004af0:	08004b51 	.word	0x08004b51
 8004af4:	2b40      	cmp	r3, #64	@ 0x40
 8004af6:	d02e      	beq.n	8004b56 <UART_SetConfig+0x8aa>
 8004af8:	e031      	b.n	8004b5e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004afa:	f7fd feed 	bl	80028d8 <HAL_RCC_GetPCLK1Freq>
 8004afe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004b00:	e033      	b.n	8004b6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b02:	f7fd feff 	bl	8002904 <HAL_RCC_GetPCLK2Freq>
 8004b06:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004b08:	e02f      	b.n	8004b6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004b0e:	4618      	mov	r0, r3
 8004b10:	f7fd ff24 	bl	800295c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b16:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b18:	e027      	b.n	8004b6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b1a:	f107 0318 	add.w	r3, r7, #24
 8004b1e:	4618      	mov	r0, r3
 8004b20:	f7fe f870 	bl	8002c04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b28:	e01f      	b.n	8004b6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004b2a:	4b2d      	ldr	r3, [pc, #180]	@ (8004be0 <UART_SetConfig+0x934>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 0320 	and.w	r3, r3, #32
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d009      	beq.n	8004b4a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004b36:	4b2a      	ldr	r3, [pc, #168]	@ (8004be0 <UART_SetConfig+0x934>)
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	08db      	lsrs	r3, r3, #3
 8004b3c:	f003 0303 	and.w	r3, r3, #3
 8004b40:	4a24      	ldr	r2, [pc, #144]	@ (8004bd4 <UART_SetConfig+0x928>)
 8004b42:	fa22 f303 	lsr.w	r3, r2, r3
 8004b46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b48:	e00f      	b.n	8004b6a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004b4a:	4b22      	ldr	r3, [pc, #136]	@ (8004bd4 <UART_SetConfig+0x928>)
 8004b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b4e:	e00c      	b.n	8004b6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004b50:	4b21      	ldr	r3, [pc, #132]	@ (8004bd8 <UART_SetConfig+0x92c>)
 8004b52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b54:	e009      	b.n	8004b6a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b56:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b5c:	e005      	b.n	8004b6a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004b62:	2301      	movs	r3, #1
 8004b64:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004b68:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 80e7 	beq.w	8004d40 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b72:	697b      	ldr	r3, [r7, #20]
 8004b74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b76:	4a19      	ldr	r2, [pc, #100]	@ (8004bdc <UART_SetConfig+0x930>)
 8004b78:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b7c:	461a      	mov	r2, r3
 8004b7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b80:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b84:	005a      	lsls	r2, r3, #1
 8004b86:	697b      	ldr	r3, [r7, #20]
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	085b      	lsrs	r3, r3, #1
 8004b8c:	441a      	add	r2, r3
 8004b8e:	697b      	ldr	r3, [r7, #20]
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b96:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004b9a:	2b0f      	cmp	r3, #15
 8004b9c:	d916      	bls.n	8004bcc <UART_SetConfig+0x920>
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ba4:	d212      	bcs.n	8004bcc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ba6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba8:	b29b      	uxth	r3, r3
 8004baa:	f023 030f 	bic.w	r3, r3, #15
 8004bae:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bb2:	085b      	lsrs	r3, r3, #1
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	f003 0307 	and.w	r3, r3, #7
 8004bba:	b29a      	uxth	r2, r3
 8004bbc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004bc8:	60da      	str	r2, [r3, #12]
 8004bca:	e0b9      	b.n	8004d40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004bd2:	e0b5      	b.n	8004d40 <UART_SetConfig+0xa94>
 8004bd4:	03d09000 	.word	0x03d09000
 8004bd8:	003d0900 	.word	0x003d0900
 8004bdc:	0800604c 	.word	0x0800604c
 8004be0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004be4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004be8:	2b20      	cmp	r3, #32
 8004bea:	dc49      	bgt.n	8004c80 <UART_SetConfig+0x9d4>
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	db7c      	blt.n	8004cea <UART_SetConfig+0xa3e>
 8004bf0:	2b20      	cmp	r3, #32
 8004bf2:	d87a      	bhi.n	8004cea <UART_SetConfig+0xa3e>
 8004bf4:	a201      	add	r2, pc, #4	@ (adr r2, 8004bfc <UART_SetConfig+0x950>)
 8004bf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bfa:	bf00      	nop
 8004bfc:	08004c87 	.word	0x08004c87
 8004c00:	08004c8f 	.word	0x08004c8f
 8004c04:	08004ceb 	.word	0x08004ceb
 8004c08:	08004ceb 	.word	0x08004ceb
 8004c0c:	08004c97 	.word	0x08004c97
 8004c10:	08004ceb 	.word	0x08004ceb
 8004c14:	08004ceb 	.word	0x08004ceb
 8004c18:	08004ceb 	.word	0x08004ceb
 8004c1c:	08004ca7 	.word	0x08004ca7
 8004c20:	08004ceb 	.word	0x08004ceb
 8004c24:	08004ceb 	.word	0x08004ceb
 8004c28:	08004ceb 	.word	0x08004ceb
 8004c2c:	08004ceb 	.word	0x08004ceb
 8004c30:	08004ceb 	.word	0x08004ceb
 8004c34:	08004ceb 	.word	0x08004ceb
 8004c38:	08004ceb 	.word	0x08004ceb
 8004c3c:	08004cb7 	.word	0x08004cb7
 8004c40:	08004ceb 	.word	0x08004ceb
 8004c44:	08004ceb 	.word	0x08004ceb
 8004c48:	08004ceb 	.word	0x08004ceb
 8004c4c:	08004ceb 	.word	0x08004ceb
 8004c50:	08004ceb 	.word	0x08004ceb
 8004c54:	08004ceb 	.word	0x08004ceb
 8004c58:	08004ceb 	.word	0x08004ceb
 8004c5c:	08004ceb 	.word	0x08004ceb
 8004c60:	08004ceb 	.word	0x08004ceb
 8004c64:	08004ceb 	.word	0x08004ceb
 8004c68:	08004ceb 	.word	0x08004ceb
 8004c6c:	08004ceb 	.word	0x08004ceb
 8004c70:	08004ceb 	.word	0x08004ceb
 8004c74:	08004ceb 	.word	0x08004ceb
 8004c78:	08004ceb 	.word	0x08004ceb
 8004c7c:	08004cdd 	.word	0x08004cdd
 8004c80:	2b40      	cmp	r3, #64	@ 0x40
 8004c82:	d02e      	beq.n	8004ce2 <UART_SetConfig+0xa36>
 8004c84:	e031      	b.n	8004cea <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c86:	f7fd fe27 	bl	80028d8 <HAL_RCC_GetPCLK1Freq>
 8004c8a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004c8c:	e033      	b.n	8004cf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c8e:	f7fd fe39 	bl	8002904 <HAL_RCC_GetPCLK2Freq>
 8004c92:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004c94:	e02f      	b.n	8004cf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004c96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004c9a:	4618      	mov	r0, r3
 8004c9c:	f7fd fe5e 	bl	800295c <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ca4:	e027      	b.n	8004cf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ca6:	f107 0318 	add.w	r3, r7, #24
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fd ffaa 	bl	8002c04 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cb4:	e01f      	b.n	8004cf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cb6:	4b2d      	ldr	r3, [pc, #180]	@ (8004d6c <UART_SetConfig+0xac0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 0320 	and.w	r3, r3, #32
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d009      	beq.n	8004cd6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004cc2:	4b2a      	ldr	r3, [pc, #168]	@ (8004d6c <UART_SetConfig+0xac0>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	08db      	lsrs	r3, r3, #3
 8004cc8:	f003 0303 	and.w	r3, r3, #3
 8004ccc:	4a28      	ldr	r2, [pc, #160]	@ (8004d70 <UART_SetConfig+0xac4>)
 8004cce:	fa22 f303 	lsr.w	r3, r2, r3
 8004cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004cd4:	e00f      	b.n	8004cf6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004cd6:	4b26      	ldr	r3, [pc, #152]	@ (8004d70 <UART_SetConfig+0xac4>)
 8004cd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cda:	e00c      	b.n	8004cf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004cdc:	4b25      	ldr	r3, [pc, #148]	@ (8004d74 <UART_SetConfig+0xac8>)
 8004cde:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ce0:	e009      	b.n	8004cf6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ce2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ce8:	e005      	b.n	8004cf6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004cea:	2300      	movs	r3, #0
 8004cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004cee:	2301      	movs	r3, #1
 8004cf0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004cf4:	bf00      	nop
    }

    if (pclk != 0U)
 8004cf6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d021      	beq.n	8004d40 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d00:	4a1d      	ldr	r2, [pc, #116]	@ (8004d78 <UART_SetConfig+0xacc>)
 8004d02:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d06:	461a      	mov	r2, r3
 8004d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d0a:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	085b      	lsrs	r3, r3, #1
 8004d14:	441a      	add	r2, r3
 8004d16:	697b      	ldr	r3, [r7, #20]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d1e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d22:	2b0f      	cmp	r3, #15
 8004d24:	d909      	bls.n	8004d3a <UART_SetConfig+0xa8e>
 8004d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d2c:	d205      	bcs.n	8004d3a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d30:	b29a      	uxth	r2, r3
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	60da      	str	r2, [r3, #12]
 8004d38:	e002      	b.n	8004d40 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2201      	movs	r2, #1
 8004d44:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004d48:	697b      	ldr	r3, [r7, #20]
 8004d4a:	2201      	movs	r2, #1
 8004d4c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d50:	697b      	ldr	r3, [r7, #20]
 8004d52:	2200      	movs	r2, #0
 8004d54:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004d56:	697b      	ldr	r3, [r7, #20]
 8004d58:	2200      	movs	r2, #0
 8004d5a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004d5c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3748      	adds	r7, #72	@ 0x48
 8004d64:	46bd      	mov	sp, r7
 8004d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d6a:	bf00      	nop
 8004d6c:	58024400 	.word	0x58024400
 8004d70:	03d09000 	.word	0x03d09000
 8004d74:	003d0900 	.word	0x003d0900
 8004d78:	0800604c 	.word	0x0800604c

08004d7c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d88:	f003 0308 	and.w	r3, r3, #8
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	430a      	orrs	r2, r1
 8004da4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004daa:	f003 0301 	and.w	r3, r3, #1
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d00a      	beq.n	8004dc8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	685b      	ldr	r3, [r3, #4]
 8004db8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	430a      	orrs	r2, r1
 8004dc6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dcc:	f003 0302 	and.w	r3, r3, #2
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00a      	beq.n	8004dea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	430a      	orrs	r2, r1
 8004de8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dee:	f003 0304 	and.w	r3, r3, #4
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d00a      	beq.n	8004e0c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	430a      	orrs	r2, r1
 8004e0a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e10:	f003 0310 	and.w	r3, r3, #16
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00a      	beq.n	8004e2e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e32:	f003 0320 	and.w	r3, r3, #32
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00a      	beq.n	8004e50 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	430a      	orrs	r2, r1
 8004e4e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d01a      	beq.n	8004e92 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e76:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e7a:	d10a      	bne.n	8004e92 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	430a      	orrs	r2, r1
 8004e90:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d00a      	beq.n	8004eb4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	605a      	str	r2, [r3, #4]
  }
}
 8004eb4:	bf00      	nop
 8004eb6:	370c      	adds	r7, #12
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b098      	sub	sp, #96	@ 0x60
 8004ec4:	af02      	add	r7, sp, #8
 8004ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ed0:	f7fc f9bc 	bl	800124c <HAL_GetTick>
 8004ed4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0308 	and.w	r3, r3, #8
 8004ee0:	2b08      	cmp	r3, #8
 8004ee2:	d12f      	bne.n	8004f44 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ee4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004ee8:	9300      	str	r3, [sp, #0]
 8004eea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004eec:	2200      	movs	r2, #0
 8004eee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f000 f88e 	bl	8005014 <UART_WaitOnFlagUntilTimeout>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d022      	beq.n	8004f44 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f06:	e853 3f00 	ldrex	r3, [r3]
 8004f0a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f0e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f12:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	461a      	mov	r2, r3
 8004f1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f1e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f20:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f24:	e841 2300 	strex	r3, r2, [r1]
 8004f28:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e6      	bne.n	8004efe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2220      	movs	r2, #32
 8004f34:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e063      	b.n	800500c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0304 	and.w	r3, r3, #4
 8004f4e:	2b04      	cmp	r3, #4
 8004f50:	d149      	bne.n	8004fe6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f52:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 f857 	bl	8005014 <UART_WaitOnFlagUntilTimeout>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d03c      	beq.n	8004fe6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f74:	e853 3f00 	ldrex	r3, [r3]
 8004f78:	623b      	str	r3, [r7, #32]
   return(result);
 8004f7a:	6a3b      	ldr	r3, [r7, #32]
 8004f7c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f80:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	461a      	mov	r2, r3
 8004f88:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f8a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f8c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f92:	e841 2300 	strex	r3, r2, [r1]
 8004f96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d1e6      	bne.n	8004f6c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	e853 3f00 	ldrex	r3, [r3]
 8004fac:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	f023 0301 	bic.w	r3, r3, #1
 8004fb4:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3308      	adds	r3, #8
 8004fbc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fbe:	61fa      	str	r2, [r7, #28]
 8004fc0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc2:	69b9      	ldr	r1, [r7, #24]
 8004fc4:	69fa      	ldr	r2, [r7, #28]
 8004fc6:	e841 2300 	strex	r3, r2, [r1]
 8004fca:	617b      	str	r3, [r7, #20]
   return(result);
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d1e5      	bne.n	8004f9e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e012      	b.n	800500c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2220      	movs	r2, #32
 8004fea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2220      	movs	r2, #32
 8004ff2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3758      	adds	r7, #88	@ 0x58
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	603b      	str	r3, [r7, #0]
 8005020:	4613      	mov	r3, r2
 8005022:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005024:	e04f      	b.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800502c:	d04b      	beq.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800502e:	f7fc f90d 	bl	800124c <HAL_GetTick>
 8005032:	4602      	mov	r2, r0
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	1ad3      	subs	r3, r2, r3
 8005038:	69ba      	ldr	r2, [r7, #24]
 800503a:	429a      	cmp	r2, r3
 800503c:	d302      	bcc.n	8005044 <UART_WaitOnFlagUntilTimeout+0x30>
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e04e      	b.n	80050e6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 0304 	and.w	r3, r3, #4
 8005052:	2b00      	cmp	r3, #0
 8005054:	d037      	beq.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	2b80      	cmp	r3, #128	@ 0x80
 800505a:	d034      	beq.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	2b40      	cmp	r3, #64	@ 0x40
 8005060:	d031      	beq.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69db      	ldr	r3, [r3, #28]
 8005068:	f003 0308 	and.w	r3, r3, #8
 800506c:	2b08      	cmp	r3, #8
 800506e:	d110      	bne.n	8005092 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	2208      	movs	r2, #8
 8005076:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f000 f839 	bl	80050f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2208      	movs	r2, #8
 8005082:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	e029      	b.n	80050e6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	69db      	ldr	r3, [r3, #28]
 8005098:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800509c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050a0:	d111      	bne.n	80050c6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050aa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050ac:	68f8      	ldr	r0, [r7, #12]
 80050ae:	f000 f81f 	bl	80050f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e00f      	b.n	80050e6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	69da      	ldr	r2, [r3, #28]
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	4013      	ands	r3, r2
 80050d0:	68ba      	ldr	r2, [r7, #8]
 80050d2:	429a      	cmp	r2, r3
 80050d4:	bf0c      	ite	eq
 80050d6:	2301      	moveq	r3, #1
 80050d8:	2300      	movne	r3, #0
 80050da:	b2db      	uxtb	r3, r3
 80050dc:	461a      	mov	r2, r3
 80050de:	79fb      	ldrb	r3, [r7, #7]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d0a0      	beq.n	8005026 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050e4:	2300      	movs	r3, #0
}
 80050e6:	4618      	mov	r0, r3
 80050e8:	3710      	adds	r7, #16
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
	...

080050f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050f0:	b480      	push	{r7}
 80050f2:	b095      	sub	sp, #84	@ 0x54
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005108:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800510c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	461a      	mov	r2, r3
 8005114:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005116:	643b      	str	r3, [r7, #64]	@ 0x40
 8005118:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800511c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800511e:	e841 2300 	strex	r3, r2, [r1]
 8005122:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1e6      	bne.n	80050f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3308      	adds	r3, #8
 8005130:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	61fb      	str	r3, [r7, #28]
   return(result);
 800513a:	69fa      	ldr	r2, [r7, #28]
 800513c:	4b1e      	ldr	r3, [pc, #120]	@ (80051b8 <UART_EndRxTransfer+0xc8>)
 800513e:	4013      	ands	r3, r2
 8005140:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3308      	adds	r3, #8
 8005148:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800514a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800514c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005150:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e5      	bne.n	800512a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005162:	2b01      	cmp	r3, #1
 8005164:	d118      	bne.n	8005198 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	e853 3f00 	ldrex	r3, [r3]
 8005172:	60bb      	str	r3, [r7, #8]
   return(result);
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	f023 0310 	bic.w	r3, r3, #16
 800517a:	647b      	str	r3, [r7, #68]	@ 0x44
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	461a      	mov	r2, r3
 8005182:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005184:	61bb      	str	r3, [r7, #24]
 8005186:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005188:	6979      	ldr	r1, [r7, #20]
 800518a:	69ba      	ldr	r2, [r7, #24]
 800518c:	e841 2300 	strex	r3, r2, [r1]
 8005190:	613b      	str	r3, [r7, #16]
   return(result);
 8005192:	693b      	ldr	r3, [r7, #16]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d1e6      	bne.n	8005166 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2220      	movs	r2, #32
 800519c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2200      	movs	r2, #0
 80051aa:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80051ac:	bf00      	nop
 80051ae:	3754      	adds	r7, #84	@ 0x54
 80051b0:	46bd      	mov	sp, r7
 80051b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b6:	4770      	bx	lr
 80051b8:	effffffe 	.word	0xeffffffe

080051bc <std>:
 80051bc:	2300      	movs	r3, #0
 80051be:	b510      	push	{r4, lr}
 80051c0:	4604      	mov	r4, r0
 80051c2:	e9c0 3300 	strd	r3, r3, [r0]
 80051c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051ca:	6083      	str	r3, [r0, #8]
 80051cc:	8181      	strh	r1, [r0, #12]
 80051ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80051d0:	81c2      	strh	r2, [r0, #14]
 80051d2:	6183      	str	r3, [r0, #24]
 80051d4:	4619      	mov	r1, r3
 80051d6:	2208      	movs	r2, #8
 80051d8:	305c      	adds	r0, #92	@ 0x5c
 80051da:	f000 f906 	bl	80053ea <memset>
 80051de:	4b0d      	ldr	r3, [pc, #52]	@ (8005214 <std+0x58>)
 80051e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80051e2:	4b0d      	ldr	r3, [pc, #52]	@ (8005218 <std+0x5c>)
 80051e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051e6:	4b0d      	ldr	r3, [pc, #52]	@ (800521c <std+0x60>)
 80051e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005220 <std+0x64>)
 80051ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80051ee:	4b0d      	ldr	r3, [pc, #52]	@ (8005224 <std+0x68>)
 80051f0:	6224      	str	r4, [r4, #32]
 80051f2:	429c      	cmp	r4, r3
 80051f4:	d006      	beq.n	8005204 <std+0x48>
 80051f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80051fa:	4294      	cmp	r4, r2
 80051fc:	d002      	beq.n	8005204 <std+0x48>
 80051fe:	33d0      	adds	r3, #208	@ 0xd0
 8005200:	429c      	cmp	r4, r3
 8005202:	d105      	bne.n	8005210 <std+0x54>
 8005204:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800520c:	f000 b966 	b.w	80054dc <__retarget_lock_init_recursive>
 8005210:	bd10      	pop	{r4, pc}
 8005212:	bf00      	nop
 8005214:	08005365 	.word	0x08005365
 8005218:	08005387 	.word	0x08005387
 800521c:	080053bf 	.word	0x080053bf
 8005220:	080053e3 	.word	0x080053e3
 8005224:	24000188 	.word	0x24000188

08005228 <stdio_exit_handler>:
 8005228:	4a02      	ldr	r2, [pc, #8]	@ (8005234 <stdio_exit_handler+0xc>)
 800522a:	4903      	ldr	r1, [pc, #12]	@ (8005238 <stdio_exit_handler+0x10>)
 800522c:	4803      	ldr	r0, [pc, #12]	@ (800523c <stdio_exit_handler+0x14>)
 800522e:	f000 b869 	b.w	8005304 <_fwalk_sglue>
 8005232:	bf00      	nop
 8005234:	24000014 	.word	0x24000014
 8005238:	08005d79 	.word	0x08005d79
 800523c:	24000024 	.word	0x24000024

08005240 <cleanup_stdio>:
 8005240:	6841      	ldr	r1, [r0, #4]
 8005242:	4b0c      	ldr	r3, [pc, #48]	@ (8005274 <cleanup_stdio+0x34>)
 8005244:	4299      	cmp	r1, r3
 8005246:	b510      	push	{r4, lr}
 8005248:	4604      	mov	r4, r0
 800524a:	d001      	beq.n	8005250 <cleanup_stdio+0x10>
 800524c:	f000 fd94 	bl	8005d78 <_fflush_r>
 8005250:	68a1      	ldr	r1, [r4, #8]
 8005252:	4b09      	ldr	r3, [pc, #36]	@ (8005278 <cleanup_stdio+0x38>)
 8005254:	4299      	cmp	r1, r3
 8005256:	d002      	beq.n	800525e <cleanup_stdio+0x1e>
 8005258:	4620      	mov	r0, r4
 800525a:	f000 fd8d 	bl	8005d78 <_fflush_r>
 800525e:	68e1      	ldr	r1, [r4, #12]
 8005260:	4b06      	ldr	r3, [pc, #24]	@ (800527c <cleanup_stdio+0x3c>)
 8005262:	4299      	cmp	r1, r3
 8005264:	d004      	beq.n	8005270 <cleanup_stdio+0x30>
 8005266:	4620      	mov	r0, r4
 8005268:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800526c:	f000 bd84 	b.w	8005d78 <_fflush_r>
 8005270:	bd10      	pop	{r4, pc}
 8005272:	bf00      	nop
 8005274:	24000188 	.word	0x24000188
 8005278:	240001f0 	.word	0x240001f0
 800527c:	24000258 	.word	0x24000258

08005280 <global_stdio_init.part.0>:
 8005280:	b510      	push	{r4, lr}
 8005282:	4b0b      	ldr	r3, [pc, #44]	@ (80052b0 <global_stdio_init.part.0+0x30>)
 8005284:	4c0b      	ldr	r4, [pc, #44]	@ (80052b4 <global_stdio_init.part.0+0x34>)
 8005286:	4a0c      	ldr	r2, [pc, #48]	@ (80052b8 <global_stdio_init.part.0+0x38>)
 8005288:	601a      	str	r2, [r3, #0]
 800528a:	4620      	mov	r0, r4
 800528c:	2200      	movs	r2, #0
 800528e:	2104      	movs	r1, #4
 8005290:	f7ff ff94 	bl	80051bc <std>
 8005294:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005298:	2201      	movs	r2, #1
 800529a:	2109      	movs	r1, #9
 800529c:	f7ff ff8e 	bl	80051bc <std>
 80052a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80052a4:	2202      	movs	r2, #2
 80052a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052aa:	2112      	movs	r1, #18
 80052ac:	f7ff bf86 	b.w	80051bc <std>
 80052b0:	240002c0 	.word	0x240002c0
 80052b4:	24000188 	.word	0x24000188
 80052b8:	08005229 	.word	0x08005229

080052bc <__sfp_lock_acquire>:
 80052bc:	4801      	ldr	r0, [pc, #4]	@ (80052c4 <__sfp_lock_acquire+0x8>)
 80052be:	f000 b90e 	b.w	80054de <__retarget_lock_acquire_recursive>
 80052c2:	bf00      	nop
 80052c4:	240002c9 	.word	0x240002c9

080052c8 <__sfp_lock_release>:
 80052c8:	4801      	ldr	r0, [pc, #4]	@ (80052d0 <__sfp_lock_release+0x8>)
 80052ca:	f000 b909 	b.w	80054e0 <__retarget_lock_release_recursive>
 80052ce:	bf00      	nop
 80052d0:	240002c9 	.word	0x240002c9

080052d4 <__sinit>:
 80052d4:	b510      	push	{r4, lr}
 80052d6:	4604      	mov	r4, r0
 80052d8:	f7ff fff0 	bl	80052bc <__sfp_lock_acquire>
 80052dc:	6a23      	ldr	r3, [r4, #32]
 80052de:	b11b      	cbz	r3, 80052e8 <__sinit+0x14>
 80052e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e4:	f7ff bff0 	b.w	80052c8 <__sfp_lock_release>
 80052e8:	4b04      	ldr	r3, [pc, #16]	@ (80052fc <__sinit+0x28>)
 80052ea:	6223      	str	r3, [r4, #32]
 80052ec:	4b04      	ldr	r3, [pc, #16]	@ (8005300 <__sinit+0x2c>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d1f5      	bne.n	80052e0 <__sinit+0xc>
 80052f4:	f7ff ffc4 	bl	8005280 <global_stdio_init.part.0>
 80052f8:	e7f2      	b.n	80052e0 <__sinit+0xc>
 80052fa:	bf00      	nop
 80052fc:	08005241 	.word	0x08005241
 8005300:	240002c0 	.word	0x240002c0

08005304 <_fwalk_sglue>:
 8005304:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005308:	4607      	mov	r7, r0
 800530a:	4688      	mov	r8, r1
 800530c:	4614      	mov	r4, r2
 800530e:	2600      	movs	r6, #0
 8005310:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005314:	f1b9 0901 	subs.w	r9, r9, #1
 8005318:	d505      	bpl.n	8005326 <_fwalk_sglue+0x22>
 800531a:	6824      	ldr	r4, [r4, #0]
 800531c:	2c00      	cmp	r4, #0
 800531e:	d1f7      	bne.n	8005310 <_fwalk_sglue+0xc>
 8005320:	4630      	mov	r0, r6
 8005322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005326:	89ab      	ldrh	r3, [r5, #12]
 8005328:	2b01      	cmp	r3, #1
 800532a:	d907      	bls.n	800533c <_fwalk_sglue+0x38>
 800532c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005330:	3301      	adds	r3, #1
 8005332:	d003      	beq.n	800533c <_fwalk_sglue+0x38>
 8005334:	4629      	mov	r1, r5
 8005336:	4638      	mov	r0, r7
 8005338:	47c0      	blx	r8
 800533a:	4306      	orrs	r6, r0
 800533c:	3568      	adds	r5, #104	@ 0x68
 800533e:	e7e9      	b.n	8005314 <_fwalk_sglue+0x10>

08005340 <iprintf>:
 8005340:	b40f      	push	{r0, r1, r2, r3}
 8005342:	b507      	push	{r0, r1, r2, lr}
 8005344:	4906      	ldr	r1, [pc, #24]	@ (8005360 <iprintf+0x20>)
 8005346:	ab04      	add	r3, sp, #16
 8005348:	6808      	ldr	r0, [r1, #0]
 800534a:	f853 2b04 	ldr.w	r2, [r3], #4
 800534e:	6881      	ldr	r1, [r0, #8]
 8005350:	9301      	str	r3, [sp, #4]
 8005352:	f000 f9e9 	bl	8005728 <_vfiprintf_r>
 8005356:	b003      	add	sp, #12
 8005358:	f85d eb04 	ldr.w	lr, [sp], #4
 800535c:	b004      	add	sp, #16
 800535e:	4770      	bx	lr
 8005360:	24000020 	.word	0x24000020

08005364 <__sread>:
 8005364:	b510      	push	{r4, lr}
 8005366:	460c      	mov	r4, r1
 8005368:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800536c:	f000 f868 	bl	8005440 <_read_r>
 8005370:	2800      	cmp	r0, #0
 8005372:	bfab      	itete	ge
 8005374:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005376:	89a3      	ldrhlt	r3, [r4, #12]
 8005378:	181b      	addge	r3, r3, r0
 800537a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800537e:	bfac      	ite	ge
 8005380:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005382:	81a3      	strhlt	r3, [r4, #12]
 8005384:	bd10      	pop	{r4, pc}

08005386 <__swrite>:
 8005386:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800538a:	461f      	mov	r7, r3
 800538c:	898b      	ldrh	r3, [r1, #12]
 800538e:	05db      	lsls	r3, r3, #23
 8005390:	4605      	mov	r5, r0
 8005392:	460c      	mov	r4, r1
 8005394:	4616      	mov	r6, r2
 8005396:	d505      	bpl.n	80053a4 <__swrite+0x1e>
 8005398:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800539c:	2302      	movs	r3, #2
 800539e:	2200      	movs	r2, #0
 80053a0:	f000 f83c 	bl	800541c <_lseek_r>
 80053a4:	89a3      	ldrh	r3, [r4, #12]
 80053a6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053aa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80053ae:	81a3      	strh	r3, [r4, #12]
 80053b0:	4632      	mov	r2, r6
 80053b2:	463b      	mov	r3, r7
 80053b4:	4628      	mov	r0, r5
 80053b6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053ba:	f000 b853 	b.w	8005464 <_write_r>

080053be <__sseek>:
 80053be:	b510      	push	{r4, lr}
 80053c0:	460c      	mov	r4, r1
 80053c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053c6:	f000 f829 	bl	800541c <_lseek_r>
 80053ca:	1c43      	adds	r3, r0, #1
 80053cc:	89a3      	ldrh	r3, [r4, #12]
 80053ce:	bf15      	itete	ne
 80053d0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80053d2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80053d6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80053da:	81a3      	strheq	r3, [r4, #12]
 80053dc:	bf18      	it	ne
 80053de:	81a3      	strhne	r3, [r4, #12]
 80053e0:	bd10      	pop	{r4, pc}

080053e2 <__sclose>:
 80053e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e6:	f000 b809 	b.w	80053fc <_close_r>

080053ea <memset>:
 80053ea:	4402      	add	r2, r0
 80053ec:	4603      	mov	r3, r0
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d100      	bne.n	80053f4 <memset+0xa>
 80053f2:	4770      	bx	lr
 80053f4:	f803 1b01 	strb.w	r1, [r3], #1
 80053f8:	e7f9      	b.n	80053ee <memset+0x4>
	...

080053fc <_close_r>:
 80053fc:	b538      	push	{r3, r4, r5, lr}
 80053fe:	4d06      	ldr	r5, [pc, #24]	@ (8005418 <_close_r+0x1c>)
 8005400:	2300      	movs	r3, #0
 8005402:	4604      	mov	r4, r0
 8005404:	4608      	mov	r0, r1
 8005406:	602b      	str	r3, [r5, #0]
 8005408:	f7fb fd2e 	bl	8000e68 <_close>
 800540c:	1c43      	adds	r3, r0, #1
 800540e:	d102      	bne.n	8005416 <_close_r+0x1a>
 8005410:	682b      	ldr	r3, [r5, #0]
 8005412:	b103      	cbz	r3, 8005416 <_close_r+0x1a>
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	bd38      	pop	{r3, r4, r5, pc}
 8005418:	240002c4 	.word	0x240002c4

0800541c <_lseek_r>:
 800541c:	b538      	push	{r3, r4, r5, lr}
 800541e:	4d07      	ldr	r5, [pc, #28]	@ (800543c <_lseek_r+0x20>)
 8005420:	4604      	mov	r4, r0
 8005422:	4608      	mov	r0, r1
 8005424:	4611      	mov	r1, r2
 8005426:	2200      	movs	r2, #0
 8005428:	602a      	str	r2, [r5, #0]
 800542a:	461a      	mov	r2, r3
 800542c:	f7fb fd43 	bl	8000eb6 <_lseek>
 8005430:	1c43      	adds	r3, r0, #1
 8005432:	d102      	bne.n	800543a <_lseek_r+0x1e>
 8005434:	682b      	ldr	r3, [r5, #0]
 8005436:	b103      	cbz	r3, 800543a <_lseek_r+0x1e>
 8005438:	6023      	str	r3, [r4, #0]
 800543a:	bd38      	pop	{r3, r4, r5, pc}
 800543c:	240002c4 	.word	0x240002c4

08005440 <_read_r>:
 8005440:	b538      	push	{r3, r4, r5, lr}
 8005442:	4d07      	ldr	r5, [pc, #28]	@ (8005460 <_read_r+0x20>)
 8005444:	4604      	mov	r4, r0
 8005446:	4608      	mov	r0, r1
 8005448:	4611      	mov	r1, r2
 800544a:	2200      	movs	r2, #0
 800544c:	602a      	str	r2, [r5, #0]
 800544e:	461a      	mov	r2, r3
 8005450:	f7fb fcd1 	bl	8000df6 <_read>
 8005454:	1c43      	adds	r3, r0, #1
 8005456:	d102      	bne.n	800545e <_read_r+0x1e>
 8005458:	682b      	ldr	r3, [r5, #0]
 800545a:	b103      	cbz	r3, 800545e <_read_r+0x1e>
 800545c:	6023      	str	r3, [r4, #0]
 800545e:	bd38      	pop	{r3, r4, r5, pc}
 8005460:	240002c4 	.word	0x240002c4

08005464 <_write_r>:
 8005464:	b538      	push	{r3, r4, r5, lr}
 8005466:	4d07      	ldr	r5, [pc, #28]	@ (8005484 <_write_r+0x20>)
 8005468:	4604      	mov	r4, r0
 800546a:	4608      	mov	r0, r1
 800546c:	4611      	mov	r1, r2
 800546e:	2200      	movs	r2, #0
 8005470:	602a      	str	r2, [r5, #0]
 8005472:	461a      	mov	r2, r3
 8005474:	f7fb fcdc 	bl	8000e30 <_write>
 8005478:	1c43      	adds	r3, r0, #1
 800547a:	d102      	bne.n	8005482 <_write_r+0x1e>
 800547c:	682b      	ldr	r3, [r5, #0]
 800547e:	b103      	cbz	r3, 8005482 <_write_r+0x1e>
 8005480:	6023      	str	r3, [r4, #0]
 8005482:	bd38      	pop	{r3, r4, r5, pc}
 8005484:	240002c4 	.word	0x240002c4

08005488 <__errno>:
 8005488:	4b01      	ldr	r3, [pc, #4]	@ (8005490 <__errno+0x8>)
 800548a:	6818      	ldr	r0, [r3, #0]
 800548c:	4770      	bx	lr
 800548e:	bf00      	nop
 8005490:	24000020 	.word	0x24000020

08005494 <__libc_init_array>:
 8005494:	b570      	push	{r4, r5, r6, lr}
 8005496:	4d0d      	ldr	r5, [pc, #52]	@ (80054cc <__libc_init_array+0x38>)
 8005498:	4c0d      	ldr	r4, [pc, #52]	@ (80054d0 <__libc_init_array+0x3c>)
 800549a:	1b64      	subs	r4, r4, r5
 800549c:	10a4      	asrs	r4, r4, #2
 800549e:	2600      	movs	r6, #0
 80054a0:	42a6      	cmp	r6, r4
 80054a2:	d109      	bne.n	80054b8 <__libc_init_array+0x24>
 80054a4:	4d0b      	ldr	r5, [pc, #44]	@ (80054d4 <__libc_init_array+0x40>)
 80054a6:	4c0c      	ldr	r4, [pc, #48]	@ (80054d8 <__libc_init_array+0x44>)
 80054a8:	f000 fdb6 	bl	8006018 <_init>
 80054ac:	1b64      	subs	r4, r4, r5
 80054ae:	10a4      	asrs	r4, r4, #2
 80054b0:	2600      	movs	r6, #0
 80054b2:	42a6      	cmp	r6, r4
 80054b4:	d105      	bne.n	80054c2 <__libc_init_array+0x2e>
 80054b6:	bd70      	pop	{r4, r5, r6, pc}
 80054b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80054bc:	4798      	blx	r3
 80054be:	3601      	adds	r6, #1
 80054c0:	e7ee      	b.n	80054a0 <__libc_init_array+0xc>
 80054c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80054c6:	4798      	blx	r3
 80054c8:	3601      	adds	r6, #1
 80054ca:	e7f2      	b.n	80054b2 <__libc_init_array+0x1e>
 80054cc:	080060a0 	.word	0x080060a0
 80054d0:	080060a0 	.word	0x080060a0
 80054d4:	080060a0 	.word	0x080060a0
 80054d8:	080060a4 	.word	0x080060a4

080054dc <__retarget_lock_init_recursive>:
 80054dc:	4770      	bx	lr

080054de <__retarget_lock_acquire_recursive>:
 80054de:	4770      	bx	lr

080054e0 <__retarget_lock_release_recursive>:
 80054e0:	4770      	bx	lr
	...

080054e4 <_free_r>:
 80054e4:	b538      	push	{r3, r4, r5, lr}
 80054e6:	4605      	mov	r5, r0
 80054e8:	2900      	cmp	r1, #0
 80054ea:	d041      	beq.n	8005570 <_free_r+0x8c>
 80054ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054f0:	1f0c      	subs	r4, r1, #4
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	bfb8      	it	lt
 80054f6:	18e4      	addlt	r4, r4, r3
 80054f8:	f000 f8e0 	bl	80056bc <__malloc_lock>
 80054fc:	4a1d      	ldr	r2, [pc, #116]	@ (8005574 <_free_r+0x90>)
 80054fe:	6813      	ldr	r3, [r2, #0]
 8005500:	b933      	cbnz	r3, 8005510 <_free_r+0x2c>
 8005502:	6063      	str	r3, [r4, #4]
 8005504:	6014      	str	r4, [r2, #0]
 8005506:	4628      	mov	r0, r5
 8005508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800550c:	f000 b8dc 	b.w	80056c8 <__malloc_unlock>
 8005510:	42a3      	cmp	r3, r4
 8005512:	d908      	bls.n	8005526 <_free_r+0x42>
 8005514:	6820      	ldr	r0, [r4, #0]
 8005516:	1821      	adds	r1, r4, r0
 8005518:	428b      	cmp	r3, r1
 800551a:	bf01      	itttt	eq
 800551c:	6819      	ldreq	r1, [r3, #0]
 800551e:	685b      	ldreq	r3, [r3, #4]
 8005520:	1809      	addeq	r1, r1, r0
 8005522:	6021      	streq	r1, [r4, #0]
 8005524:	e7ed      	b.n	8005502 <_free_r+0x1e>
 8005526:	461a      	mov	r2, r3
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	b10b      	cbz	r3, 8005530 <_free_r+0x4c>
 800552c:	42a3      	cmp	r3, r4
 800552e:	d9fa      	bls.n	8005526 <_free_r+0x42>
 8005530:	6811      	ldr	r1, [r2, #0]
 8005532:	1850      	adds	r0, r2, r1
 8005534:	42a0      	cmp	r0, r4
 8005536:	d10b      	bne.n	8005550 <_free_r+0x6c>
 8005538:	6820      	ldr	r0, [r4, #0]
 800553a:	4401      	add	r1, r0
 800553c:	1850      	adds	r0, r2, r1
 800553e:	4283      	cmp	r3, r0
 8005540:	6011      	str	r1, [r2, #0]
 8005542:	d1e0      	bne.n	8005506 <_free_r+0x22>
 8005544:	6818      	ldr	r0, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	6053      	str	r3, [r2, #4]
 800554a:	4408      	add	r0, r1
 800554c:	6010      	str	r0, [r2, #0]
 800554e:	e7da      	b.n	8005506 <_free_r+0x22>
 8005550:	d902      	bls.n	8005558 <_free_r+0x74>
 8005552:	230c      	movs	r3, #12
 8005554:	602b      	str	r3, [r5, #0]
 8005556:	e7d6      	b.n	8005506 <_free_r+0x22>
 8005558:	6820      	ldr	r0, [r4, #0]
 800555a:	1821      	adds	r1, r4, r0
 800555c:	428b      	cmp	r3, r1
 800555e:	bf04      	itt	eq
 8005560:	6819      	ldreq	r1, [r3, #0]
 8005562:	685b      	ldreq	r3, [r3, #4]
 8005564:	6063      	str	r3, [r4, #4]
 8005566:	bf04      	itt	eq
 8005568:	1809      	addeq	r1, r1, r0
 800556a:	6021      	streq	r1, [r4, #0]
 800556c:	6054      	str	r4, [r2, #4]
 800556e:	e7ca      	b.n	8005506 <_free_r+0x22>
 8005570:	bd38      	pop	{r3, r4, r5, pc}
 8005572:	bf00      	nop
 8005574:	240002d0 	.word	0x240002d0

08005578 <sbrk_aligned>:
 8005578:	b570      	push	{r4, r5, r6, lr}
 800557a:	4e0f      	ldr	r6, [pc, #60]	@ (80055b8 <sbrk_aligned+0x40>)
 800557c:	460c      	mov	r4, r1
 800557e:	6831      	ldr	r1, [r6, #0]
 8005580:	4605      	mov	r5, r0
 8005582:	b911      	cbnz	r1, 800558a <sbrk_aligned+0x12>
 8005584:	f000 fcb4 	bl	8005ef0 <_sbrk_r>
 8005588:	6030      	str	r0, [r6, #0]
 800558a:	4621      	mov	r1, r4
 800558c:	4628      	mov	r0, r5
 800558e:	f000 fcaf 	bl	8005ef0 <_sbrk_r>
 8005592:	1c43      	adds	r3, r0, #1
 8005594:	d103      	bne.n	800559e <sbrk_aligned+0x26>
 8005596:	f04f 34ff 	mov.w	r4, #4294967295
 800559a:	4620      	mov	r0, r4
 800559c:	bd70      	pop	{r4, r5, r6, pc}
 800559e:	1cc4      	adds	r4, r0, #3
 80055a0:	f024 0403 	bic.w	r4, r4, #3
 80055a4:	42a0      	cmp	r0, r4
 80055a6:	d0f8      	beq.n	800559a <sbrk_aligned+0x22>
 80055a8:	1a21      	subs	r1, r4, r0
 80055aa:	4628      	mov	r0, r5
 80055ac:	f000 fca0 	bl	8005ef0 <_sbrk_r>
 80055b0:	3001      	adds	r0, #1
 80055b2:	d1f2      	bne.n	800559a <sbrk_aligned+0x22>
 80055b4:	e7ef      	b.n	8005596 <sbrk_aligned+0x1e>
 80055b6:	bf00      	nop
 80055b8:	240002cc 	.word	0x240002cc

080055bc <_malloc_r>:
 80055bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055c0:	1ccd      	adds	r5, r1, #3
 80055c2:	f025 0503 	bic.w	r5, r5, #3
 80055c6:	3508      	adds	r5, #8
 80055c8:	2d0c      	cmp	r5, #12
 80055ca:	bf38      	it	cc
 80055cc:	250c      	movcc	r5, #12
 80055ce:	2d00      	cmp	r5, #0
 80055d0:	4606      	mov	r6, r0
 80055d2:	db01      	blt.n	80055d8 <_malloc_r+0x1c>
 80055d4:	42a9      	cmp	r1, r5
 80055d6:	d904      	bls.n	80055e2 <_malloc_r+0x26>
 80055d8:	230c      	movs	r3, #12
 80055da:	6033      	str	r3, [r6, #0]
 80055dc:	2000      	movs	r0, #0
 80055de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80055e2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80056b8 <_malloc_r+0xfc>
 80055e6:	f000 f869 	bl	80056bc <__malloc_lock>
 80055ea:	f8d8 3000 	ldr.w	r3, [r8]
 80055ee:	461c      	mov	r4, r3
 80055f0:	bb44      	cbnz	r4, 8005644 <_malloc_r+0x88>
 80055f2:	4629      	mov	r1, r5
 80055f4:	4630      	mov	r0, r6
 80055f6:	f7ff ffbf 	bl	8005578 <sbrk_aligned>
 80055fa:	1c43      	adds	r3, r0, #1
 80055fc:	4604      	mov	r4, r0
 80055fe:	d158      	bne.n	80056b2 <_malloc_r+0xf6>
 8005600:	f8d8 4000 	ldr.w	r4, [r8]
 8005604:	4627      	mov	r7, r4
 8005606:	2f00      	cmp	r7, #0
 8005608:	d143      	bne.n	8005692 <_malloc_r+0xd6>
 800560a:	2c00      	cmp	r4, #0
 800560c:	d04b      	beq.n	80056a6 <_malloc_r+0xea>
 800560e:	6823      	ldr	r3, [r4, #0]
 8005610:	4639      	mov	r1, r7
 8005612:	4630      	mov	r0, r6
 8005614:	eb04 0903 	add.w	r9, r4, r3
 8005618:	f000 fc6a 	bl	8005ef0 <_sbrk_r>
 800561c:	4581      	cmp	r9, r0
 800561e:	d142      	bne.n	80056a6 <_malloc_r+0xea>
 8005620:	6821      	ldr	r1, [r4, #0]
 8005622:	1a6d      	subs	r5, r5, r1
 8005624:	4629      	mov	r1, r5
 8005626:	4630      	mov	r0, r6
 8005628:	f7ff ffa6 	bl	8005578 <sbrk_aligned>
 800562c:	3001      	adds	r0, #1
 800562e:	d03a      	beq.n	80056a6 <_malloc_r+0xea>
 8005630:	6823      	ldr	r3, [r4, #0]
 8005632:	442b      	add	r3, r5
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	f8d8 3000 	ldr.w	r3, [r8]
 800563a:	685a      	ldr	r2, [r3, #4]
 800563c:	bb62      	cbnz	r2, 8005698 <_malloc_r+0xdc>
 800563e:	f8c8 7000 	str.w	r7, [r8]
 8005642:	e00f      	b.n	8005664 <_malloc_r+0xa8>
 8005644:	6822      	ldr	r2, [r4, #0]
 8005646:	1b52      	subs	r2, r2, r5
 8005648:	d420      	bmi.n	800568c <_malloc_r+0xd0>
 800564a:	2a0b      	cmp	r2, #11
 800564c:	d917      	bls.n	800567e <_malloc_r+0xc2>
 800564e:	1961      	adds	r1, r4, r5
 8005650:	42a3      	cmp	r3, r4
 8005652:	6025      	str	r5, [r4, #0]
 8005654:	bf18      	it	ne
 8005656:	6059      	strne	r1, [r3, #4]
 8005658:	6863      	ldr	r3, [r4, #4]
 800565a:	bf08      	it	eq
 800565c:	f8c8 1000 	streq.w	r1, [r8]
 8005660:	5162      	str	r2, [r4, r5]
 8005662:	604b      	str	r3, [r1, #4]
 8005664:	4630      	mov	r0, r6
 8005666:	f000 f82f 	bl	80056c8 <__malloc_unlock>
 800566a:	f104 000b 	add.w	r0, r4, #11
 800566e:	1d23      	adds	r3, r4, #4
 8005670:	f020 0007 	bic.w	r0, r0, #7
 8005674:	1ac2      	subs	r2, r0, r3
 8005676:	bf1c      	itt	ne
 8005678:	1a1b      	subne	r3, r3, r0
 800567a:	50a3      	strne	r3, [r4, r2]
 800567c:	e7af      	b.n	80055de <_malloc_r+0x22>
 800567e:	6862      	ldr	r2, [r4, #4]
 8005680:	42a3      	cmp	r3, r4
 8005682:	bf0c      	ite	eq
 8005684:	f8c8 2000 	streq.w	r2, [r8]
 8005688:	605a      	strne	r2, [r3, #4]
 800568a:	e7eb      	b.n	8005664 <_malloc_r+0xa8>
 800568c:	4623      	mov	r3, r4
 800568e:	6864      	ldr	r4, [r4, #4]
 8005690:	e7ae      	b.n	80055f0 <_malloc_r+0x34>
 8005692:	463c      	mov	r4, r7
 8005694:	687f      	ldr	r7, [r7, #4]
 8005696:	e7b6      	b.n	8005606 <_malloc_r+0x4a>
 8005698:	461a      	mov	r2, r3
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	42a3      	cmp	r3, r4
 800569e:	d1fb      	bne.n	8005698 <_malloc_r+0xdc>
 80056a0:	2300      	movs	r3, #0
 80056a2:	6053      	str	r3, [r2, #4]
 80056a4:	e7de      	b.n	8005664 <_malloc_r+0xa8>
 80056a6:	230c      	movs	r3, #12
 80056a8:	6033      	str	r3, [r6, #0]
 80056aa:	4630      	mov	r0, r6
 80056ac:	f000 f80c 	bl	80056c8 <__malloc_unlock>
 80056b0:	e794      	b.n	80055dc <_malloc_r+0x20>
 80056b2:	6005      	str	r5, [r0, #0]
 80056b4:	e7d6      	b.n	8005664 <_malloc_r+0xa8>
 80056b6:	bf00      	nop
 80056b8:	240002d0 	.word	0x240002d0

080056bc <__malloc_lock>:
 80056bc:	4801      	ldr	r0, [pc, #4]	@ (80056c4 <__malloc_lock+0x8>)
 80056be:	f7ff bf0e 	b.w	80054de <__retarget_lock_acquire_recursive>
 80056c2:	bf00      	nop
 80056c4:	240002c8 	.word	0x240002c8

080056c8 <__malloc_unlock>:
 80056c8:	4801      	ldr	r0, [pc, #4]	@ (80056d0 <__malloc_unlock+0x8>)
 80056ca:	f7ff bf09 	b.w	80054e0 <__retarget_lock_release_recursive>
 80056ce:	bf00      	nop
 80056d0:	240002c8 	.word	0x240002c8

080056d4 <__sfputc_r>:
 80056d4:	6893      	ldr	r3, [r2, #8]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	2b00      	cmp	r3, #0
 80056da:	b410      	push	{r4}
 80056dc:	6093      	str	r3, [r2, #8]
 80056de:	da08      	bge.n	80056f2 <__sfputc_r+0x1e>
 80056e0:	6994      	ldr	r4, [r2, #24]
 80056e2:	42a3      	cmp	r3, r4
 80056e4:	db01      	blt.n	80056ea <__sfputc_r+0x16>
 80056e6:	290a      	cmp	r1, #10
 80056e8:	d103      	bne.n	80056f2 <__sfputc_r+0x1e>
 80056ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80056ee:	f000 bb6b 	b.w	8005dc8 <__swbuf_r>
 80056f2:	6813      	ldr	r3, [r2, #0]
 80056f4:	1c58      	adds	r0, r3, #1
 80056f6:	6010      	str	r0, [r2, #0]
 80056f8:	7019      	strb	r1, [r3, #0]
 80056fa:	4608      	mov	r0, r1
 80056fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005700:	4770      	bx	lr

08005702 <__sfputs_r>:
 8005702:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005704:	4606      	mov	r6, r0
 8005706:	460f      	mov	r7, r1
 8005708:	4614      	mov	r4, r2
 800570a:	18d5      	adds	r5, r2, r3
 800570c:	42ac      	cmp	r4, r5
 800570e:	d101      	bne.n	8005714 <__sfputs_r+0x12>
 8005710:	2000      	movs	r0, #0
 8005712:	e007      	b.n	8005724 <__sfputs_r+0x22>
 8005714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005718:	463a      	mov	r2, r7
 800571a:	4630      	mov	r0, r6
 800571c:	f7ff ffda 	bl	80056d4 <__sfputc_r>
 8005720:	1c43      	adds	r3, r0, #1
 8005722:	d1f3      	bne.n	800570c <__sfputs_r+0xa>
 8005724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005728 <_vfiprintf_r>:
 8005728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572c:	460d      	mov	r5, r1
 800572e:	b09d      	sub	sp, #116	@ 0x74
 8005730:	4614      	mov	r4, r2
 8005732:	4698      	mov	r8, r3
 8005734:	4606      	mov	r6, r0
 8005736:	b118      	cbz	r0, 8005740 <_vfiprintf_r+0x18>
 8005738:	6a03      	ldr	r3, [r0, #32]
 800573a:	b90b      	cbnz	r3, 8005740 <_vfiprintf_r+0x18>
 800573c:	f7ff fdca 	bl	80052d4 <__sinit>
 8005740:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005742:	07d9      	lsls	r1, r3, #31
 8005744:	d405      	bmi.n	8005752 <_vfiprintf_r+0x2a>
 8005746:	89ab      	ldrh	r3, [r5, #12]
 8005748:	059a      	lsls	r2, r3, #22
 800574a:	d402      	bmi.n	8005752 <_vfiprintf_r+0x2a>
 800574c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800574e:	f7ff fec6 	bl	80054de <__retarget_lock_acquire_recursive>
 8005752:	89ab      	ldrh	r3, [r5, #12]
 8005754:	071b      	lsls	r3, r3, #28
 8005756:	d501      	bpl.n	800575c <_vfiprintf_r+0x34>
 8005758:	692b      	ldr	r3, [r5, #16]
 800575a:	b99b      	cbnz	r3, 8005784 <_vfiprintf_r+0x5c>
 800575c:	4629      	mov	r1, r5
 800575e:	4630      	mov	r0, r6
 8005760:	f000 fb70 	bl	8005e44 <__swsetup_r>
 8005764:	b170      	cbz	r0, 8005784 <_vfiprintf_r+0x5c>
 8005766:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005768:	07dc      	lsls	r4, r3, #31
 800576a:	d504      	bpl.n	8005776 <_vfiprintf_r+0x4e>
 800576c:	f04f 30ff 	mov.w	r0, #4294967295
 8005770:	b01d      	add	sp, #116	@ 0x74
 8005772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005776:	89ab      	ldrh	r3, [r5, #12]
 8005778:	0598      	lsls	r0, r3, #22
 800577a:	d4f7      	bmi.n	800576c <_vfiprintf_r+0x44>
 800577c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800577e:	f7ff feaf 	bl	80054e0 <__retarget_lock_release_recursive>
 8005782:	e7f3      	b.n	800576c <_vfiprintf_r+0x44>
 8005784:	2300      	movs	r3, #0
 8005786:	9309      	str	r3, [sp, #36]	@ 0x24
 8005788:	2320      	movs	r3, #32
 800578a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800578e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005792:	2330      	movs	r3, #48	@ 0x30
 8005794:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005944 <_vfiprintf_r+0x21c>
 8005798:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800579c:	f04f 0901 	mov.w	r9, #1
 80057a0:	4623      	mov	r3, r4
 80057a2:	469a      	mov	sl, r3
 80057a4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80057a8:	b10a      	cbz	r2, 80057ae <_vfiprintf_r+0x86>
 80057aa:	2a25      	cmp	r2, #37	@ 0x25
 80057ac:	d1f9      	bne.n	80057a2 <_vfiprintf_r+0x7a>
 80057ae:	ebba 0b04 	subs.w	fp, sl, r4
 80057b2:	d00b      	beq.n	80057cc <_vfiprintf_r+0xa4>
 80057b4:	465b      	mov	r3, fp
 80057b6:	4622      	mov	r2, r4
 80057b8:	4629      	mov	r1, r5
 80057ba:	4630      	mov	r0, r6
 80057bc:	f7ff ffa1 	bl	8005702 <__sfputs_r>
 80057c0:	3001      	adds	r0, #1
 80057c2:	f000 80a7 	beq.w	8005914 <_vfiprintf_r+0x1ec>
 80057c6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80057c8:	445a      	add	r2, fp
 80057ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80057cc:	f89a 3000 	ldrb.w	r3, [sl]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	f000 809f 	beq.w	8005914 <_vfiprintf_r+0x1ec>
 80057d6:	2300      	movs	r3, #0
 80057d8:	f04f 32ff 	mov.w	r2, #4294967295
 80057dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80057e0:	f10a 0a01 	add.w	sl, sl, #1
 80057e4:	9304      	str	r3, [sp, #16]
 80057e6:	9307      	str	r3, [sp, #28]
 80057e8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80057ec:	931a      	str	r3, [sp, #104]	@ 0x68
 80057ee:	4654      	mov	r4, sl
 80057f0:	2205      	movs	r2, #5
 80057f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057f6:	4853      	ldr	r0, [pc, #332]	@ (8005944 <_vfiprintf_r+0x21c>)
 80057f8:	f7fa fd72 	bl	80002e0 <memchr>
 80057fc:	9a04      	ldr	r2, [sp, #16]
 80057fe:	b9d8      	cbnz	r0, 8005838 <_vfiprintf_r+0x110>
 8005800:	06d1      	lsls	r1, r2, #27
 8005802:	bf44      	itt	mi
 8005804:	2320      	movmi	r3, #32
 8005806:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800580a:	0713      	lsls	r3, r2, #28
 800580c:	bf44      	itt	mi
 800580e:	232b      	movmi	r3, #43	@ 0x2b
 8005810:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005814:	f89a 3000 	ldrb.w	r3, [sl]
 8005818:	2b2a      	cmp	r3, #42	@ 0x2a
 800581a:	d015      	beq.n	8005848 <_vfiprintf_r+0x120>
 800581c:	9a07      	ldr	r2, [sp, #28]
 800581e:	4654      	mov	r4, sl
 8005820:	2000      	movs	r0, #0
 8005822:	f04f 0c0a 	mov.w	ip, #10
 8005826:	4621      	mov	r1, r4
 8005828:	f811 3b01 	ldrb.w	r3, [r1], #1
 800582c:	3b30      	subs	r3, #48	@ 0x30
 800582e:	2b09      	cmp	r3, #9
 8005830:	d94b      	bls.n	80058ca <_vfiprintf_r+0x1a2>
 8005832:	b1b0      	cbz	r0, 8005862 <_vfiprintf_r+0x13a>
 8005834:	9207      	str	r2, [sp, #28]
 8005836:	e014      	b.n	8005862 <_vfiprintf_r+0x13a>
 8005838:	eba0 0308 	sub.w	r3, r0, r8
 800583c:	fa09 f303 	lsl.w	r3, r9, r3
 8005840:	4313      	orrs	r3, r2
 8005842:	9304      	str	r3, [sp, #16]
 8005844:	46a2      	mov	sl, r4
 8005846:	e7d2      	b.n	80057ee <_vfiprintf_r+0xc6>
 8005848:	9b03      	ldr	r3, [sp, #12]
 800584a:	1d19      	adds	r1, r3, #4
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	9103      	str	r1, [sp, #12]
 8005850:	2b00      	cmp	r3, #0
 8005852:	bfbb      	ittet	lt
 8005854:	425b      	neglt	r3, r3
 8005856:	f042 0202 	orrlt.w	r2, r2, #2
 800585a:	9307      	strge	r3, [sp, #28]
 800585c:	9307      	strlt	r3, [sp, #28]
 800585e:	bfb8      	it	lt
 8005860:	9204      	strlt	r2, [sp, #16]
 8005862:	7823      	ldrb	r3, [r4, #0]
 8005864:	2b2e      	cmp	r3, #46	@ 0x2e
 8005866:	d10a      	bne.n	800587e <_vfiprintf_r+0x156>
 8005868:	7863      	ldrb	r3, [r4, #1]
 800586a:	2b2a      	cmp	r3, #42	@ 0x2a
 800586c:	d132      	bne.n	80058d4 <_vfiprintf_r+0x1ac>
 800586e:	9b03      	ldr	r3, [sp, #12]
 8005870:	1d1a      	adds	r2, r3, #4
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	9203      	str	r2, [sp, #12]
 8005876:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800587a:	3402      	adds	r4, #2
 800587c:	9305      	str	r3, [sp, #20]
 800587e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005954 <_vfiprintf_r+0x22c>
 8005882:	7821      	ldrb	r1, [r4, #0]
 8005884:	2203      	movs	r2, #3
 8005886:	4650      	mov	r0, sl
 8005888:	f7fa fd2a 	bl	80002e0 <memchr>
 800588c:	b138      	cbz	r0, 800589e <_vfiprintf_r+0x176>
 800588e:	9b04      	ldr	r3, [sp, #16]
 8005890:	eba0 000a 	sub.w	r0, r0, sl
 8005894:	2240      	movs	r2, #64	@ 0x40
 8005896:	4082      	lsls	r2, r0
 8005898:	4313      	orrs	r3, r2
 800589a:	3401      	adds	r4, #1
 800589c:	9304      	str	r3, [sp, #16]
 800589e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058a2:	4829      	ldr	r0, [pc, #164]	@ (8005948 <_vfiprintf_r+0x220>)
 80058a4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80058a8:	2206      	movs	r2, #6
 80058aa:	f7fa fd19 	bl	80002e0 <memchr>
 80058ae:	2800      	cmp	r0, #0
 80058b0:	d03f      	beq.n	8005932 <_vfiprintf_r+0x20a>
 80058b2:	4b26      	ldr	r3, [pc, #152]	@ (800594c <_vfiprintf_r+0x224>)
 80058b4:	bb1b      	cbnz	r3, 80058fe <_vfiprintf_r+0x1d6>
 80058b6:	9b03      	ldr	r3, [sp, #12]
 80058b8:	3307      	adds	r3, #7
 80058ba:	f023 0307 	bic.w	r3, r3, #7
 80058be:	3308      	adds	r3, #8
 80058c0:	9303      	str	r3, [sp, #12]
 80058c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80058c4:	443b      	add	r3, r7
 80058c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80058c8:	e76a      	b.n	80057a0 <_vfiprintf_r+0x78>
 80058ca:	fb0c 3202 	mla	r2, ip, r2, r3
 80058ce:	460c      	mov	r4, r1
 80058d0:	2001      	movs	r0, #1
 80058d2:	e7a8      	b.n	8005826 <_vfiprintf_r+0xfe>
 80058d4:	2300      	movs	r3, #0
 80058d6:	3401      	adds	r4, #1
 80058d8:	9305      	str	r3, [sp, #20]
 80058da:	4619      	mov	r1, r3
 80058dc:	f04f 0c0a 	mov.w	ip, #10
 80058e0:	4620      	mov	r0, r4
 80058e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80058e6:	3a30      	subs	r2, #48	@ 0x30
 80058e8:	2a09      	cmp	r2, #9
 80058ea:	d903      	bls.n	80058f4 <_vfiprintf_r+0x1cc>
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d0c6      	beq.n	800587e <_vfiprintf_r+0x156>
 80058f0:	9105      	str	r1, [sp, #20]
 80058f2:	e7c4      	b.n	800587e <_vfiprintf_r+0x156>
 80058f4:	fb0c 2101 	mla	r1, ip, r1, r2
 80058f8:	4604      	mov	r4, r0
 80058fa:	2301      	movs	r3, #1
 80058fc:	e7f0      	b.n	80058e0 <_vfiprintf_r+0x1b8>
 80058fe:	ab03      	add	r3, sp, #12
 8005900:	9300      	str	r3, [sp, #0]
 8005902:	462a      	mov	r2, r5
 8005904:	4b12      	ldr	r3, [pc, #72]	@ (8005950 <_vfiprintf_r+0x228>)
 8005906:	a904      	add	r1, sp, #16
 8005908:	4630      	mov	r0, r6
 800590a:	f3af 8000 	nop.w
 800590e:	4607      	mov	r7, r0
 8005910:	1c78      	adds	r0, r7, #1
 8005912:	d1d6      	bne.n	80058c2 <_vfiprintf_r+0x19a>
 8005914:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005916:	07d9      	lsls	r1, r3, #31
 8005918:	d405      	bmi.n	8005926 <_vfiprintf_r+0x1fe>
 800591a:	89ab      	ldrh	r3, [r5, #12]
 800591c:	059a      	lsls	r2, r3, #22
 800591e:	d402      	bmi.n	8005926 <_vfiprintf_r+0x1fe>
 8005920:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005922:	f7ff fddd 	bl	80054e0 <__retarget_lock_release_recursive>
 8005926:	89ab      	ldrh	r3, [r5, #12]
 8005928:	065b      	lsls	r3, r3, #25
 800592a:	f53f af1f 	bmi.w	800576c <_vfiprintf_r+0x44>
 800592e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005930:	e71e      	b.n	8005770 <_vfiprintf_r+0x48>
 8005932:	ab03      	add	r3, sp, #12
 8005934:	9300      	str	r3, [sp, #0]
 8005936:	462a      	mov	r2, r5
 8005938:	4b05      	ldr	r3, [pc, #20]	@ (8005950 <_vfiprintf_r+0x228>)
 800593a:	a904      	add	r1, sp, #16
 800593c:	4630      	mov	r0, r6
 800593e:	f000 f879 	bl	8005a34 <_printf_i>
 8005942:	e7e4      	b.n	800590e <_vfiprintf_r+0x1e6>
 8005944:	08006064 	.word	0x08006064
 8005948:	0800606e 	.word	0x0800606e
 800594c:	00000000 	.word	0x00000000
 8005950:	08005703 	.word	0x08005703
 8005954:	0800606a 	.word	0x0800606a

08005958 <_printf_common>:
 8005958:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800595c:	4616      	mov	r6, r2
 800595e:	4698      	mov	r8, r3
 8005960:	688a      	ldr	r2, [r1, #8]
 8005962:	690b      	ldr	r3, [r1, #16]
 8005964:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005968:	4293      	cmp	r3, r2
 800596a:	bfb8      	it	lt
 800596c:	4613      	movlt	r3, r2
 800596e:	6033      	str	r3, [r6, #0]
 8005970:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005974:	4607      	mov	r7, r0
 8005976:	460c      	mov	r4, r1
 8005978:	b10a      	cbz	r2, 800597e <_printf_common+0x26>
 800597a:	3301      	adds	r3, #1
 800597c:	6033      	str	r3, [r6, #0]
 800597e:	6823      	ldr	r3, [r4, #0]
 8005980:	0699      	lsls	r1, r3, #26
 8005982:	bf42      	ittt	mi
 8005984:	6833      	ldrmi	r3, [r6, #0]
 8005986:	3302      	addmi	r3, #2
 8005988:	6033      	strmi	r3, [r6, #0]
 800598a:	6825      	ldr	r5, [r4, #0]
 800598c:	f015 0506 	ands.w	r5, r5, #6
 8005990:	d106      	bne.n	80059a0 <_printf_common+0x48>
 8005992:	f104 0a19 	add.w	sl, r4, #25
 8005996:	68e3      	ldr	r3, [r4, #12]
 8005998:	6832      	ldr	r2, [r6, #0]
 800599a:	1a9b      	subs	r3, r3, r2
 800599c:	42ab      	cmp	r3, r5
 800599e:	dc26      	bgt.n	80059ee <_printf_common+0x96>
 80059a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059a4:	6822      	ldr	r2, [r4, #0]
 80059a6:	3b00      	subs	r3, #0
 80059a8:	bf18      	it	ne
 80059aa:	2301      	movne	r3, #1
 80059ac:	0692      	lsls	r2, r2, #26
 80059ae:	d42b      	bmi.n	8005a08 <_printf_common+0xb0>
 80059b0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80059b4:	4641      	mov	r1, r8
 80059b6:	4638      	mov	r0, r7
 80059b8:	47c8      	blx	r9
 80059ba:	3001      	adds	r0, #1
 80059bc:	d01e      	beq.n	80059fc <_printf_common+0xa4>
 80059be:	6823      	ldr	r3, [r4, #0]
 80059c0:	6922      	ldr	r2, [r4, #16]
 80059c2:	f003 0306 	and.w	r3, r3, #6
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	bf02      	ittt	eq
 80059ca:	68e5      	ldreq	r5, [r4, #12]
 80059cc:	6833      	ldreq	r3, [r6, #0]
 80059ce:	1aed      	subeq	r5, r5, r3
 80059d0:	68a3      	ldr	r3, [r4, #8]
 80059d2:	bf0c      	ite	eq
 80059d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059d8:	2500      	movne	r5, #0
 80059da:	4293      	cmp	r3, r2
 80059dc:	bfc4      	itt	gt
 80059de:	1a9b      	subgt	r3, r3, r2
 80059e0:	18ed      	addgt	r5, r5, r3
 80059e2:	2600      	movs	r6, #0
 80059e4:	341a      	adds	r4, #26
 80059e6:	42b5      	cmp	r5, r6
 80059e8:	d11a      	bne.n	8005a20 <_printf_common+0xc8>
 80059ea:	2000      	movs	r0, #0
 80059ec:	e008      	b.n	8005a00 <_printf_common+0xa8>
 80059ee:	2301      	movs	r3, #1
 80059f0:	4652      	mov	r2, sl
 80059f2:	4641      	mov	r1, r8
 80059f4:	4638      	mov	r0, r7
 80059f6:	47c8      	blx	r9
 80059f8:	3001      	adds	r0, #1
 80059fa:	d103      	bne.n	8005a04 <_printf_common+0xac>
 80059fc:	f04f 30ff 	mov.w	r0, #4294967295
 8005a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a04:	3501      	adds	r5, #1
 8005a06:	e7c6      	b.n	8005996 <_printf_common+0x3e>
 8005a08:	18e1      	adds	r1, r4, r3
 8005a0a:	1c5a      	adds	r2, r3, #1
 8005a0c:	2030      	movs	r0, #48	@ 0x30
 8005a0e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a12:	4422      	add	r2, r4
 8005a14:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a18:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a1c:	3302      	adds	r3, #2
 8005a1e:	e7c7      	b.n	80059b0 <_printf_common+0x58>
 8005a20:	2301      	movs	r3, #1
 8005a22:	4622      	mov	r2, r4
 8005a24:	4641      	mov	r1, r8
 8005a26:	4638      	mov	r0, r7
 8005a28:	47c8      	blx	r9
 8005a2a:	3001      	adds	r0, #1
 8005a2c:	d0e6      	beq.n	80059fc <_printf_common+0xa4>
 8005a2e:	3601      	adds	r6, #1
 8005a30:	e7d9      	b.n	80059e6 <_printf_common+0x8e>
	...

08005a34 <_printf_i>:
 8005a34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a38:	7e0f      	ldrb	r7, [r1, #24]
 8005a3a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a3c:	2f78      	cmp	r7, #120	@ 0x78
 8005a3e:	4691      	mov	r9, r2
 8005a40:	4680      	mov	r8, r0
 8005a42:	460c      	mov	r4, r1
 8005a44:	469a      	mov	sl, r3
 8005a46:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a4a:	d807      	bhi.n	8005a5c <_printf_i+0x28>
 8005a4c:	2f62      	cmp	r7, #98	@ 0x62
 8005a4e:	d80a      	bhi.n	8005a66 <_printf_i+0x32>
 8005a50:	2f00      	cmp	r7, #0
 8005a52:	f000 80d1 	beq.w	8005bf8 <_printf_i+0x1c4>
 8005a56:	2f58      	cmp	r7, #88	@ 0x58
 8005a58:	f000 80b8 	beq.w	8005bcc <_printf_i+0x198>
 8005a5c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a60:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a64:	e03a      	b.n	8005adc <_printf_i+0xa8>
 8005a66:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a6a:	2b15      	cmp	r3, #21
 8005a6c:	d8f6      	bhi.n	8005a5c <_printf_i+0x28>
 8005a6e:	a101      	add	r1, pc, #4	@ (adr r1, 8005a74 <_printf_i+0x40>)
 8005a70:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a74:	08005acd 	.word	0x08005acd
 8005a78:	08005ae1 	.word	0x08005ae1
 8005a7c:	08005a5d 	.word	0x08005a5d
 8005a80:	08005a5d 	.word	0x08005a5d
 8005a84:	08005a5d 	.word	0x08005a5d
 8005a88:	08005a5d 	.word	0x08005a5d
 8005a8c:	08005ae1 	.word	0x08005ae1
 8005a90:	08005a5d 	.word	0x08005a5d
 8005a94:	08005a5d 	.word	0x08005a5d
 8005a98:	08005a5d 	.word	0x08005a5d
 8005a9c:	08005a5d 	.word	0x08005a5d
 8005aa0:	08005bdf 	.word	0x08005bdf
 8005aa4:	08005b0b 	.word	0x08005b0b
 8005aa8:	08005b99 	.word	0x08005b99
 8005aac:	08005a5d 	.word	0x08005a5d
 8005ab0:	08005a5d 	.word	0x08005a5d
 8005ab4:	08005c01 	.word	0x08005c01
 8005ab8:	08005a5d 	.word	0x08005a5d
 8005abc:	08005b0b 	.word	0x08005b0b
 8005ac0:	08005a5d 	.word	0x08005a5d
 8005ac4:	08005a5d 	.word	0x08005a5d
 8005ac8:	08005ba1 	.word	0x08005ba1
 8005acc:	6833      	ldr	r3, [r6, #0]
 8005ace:	1d1a      	adds	r2, r3, #4
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	6032      	str	r2, [r6, #0]
 8005ad4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ad8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005adc:	2301      	movs	r3, #1
 8005ade:	e09c      	b.n	8005c1a <_printf_i+0x1e6>
 8005ae0:	6833      	ldr	r3, [r6, #0]
 8005ae2:	6820      	ldr	r0, [r4, #0]
 8005ae4:	1d19      	adds	r1, r3, #4
 8005ae6:	6031      	str	r1, [r6, #0]
 8005ae8:	0606      	lsls	r6, r0, #24
 8005aea:	d501      	bpl.n	8005af0 <_printf_i+0xbc>
 8005aec:	681d      	ldr	r5, [r3, #0]
 8005aee:	e003      	b.n	8005af8 <_printf_i+0xc4>
 8005af0:	0645      	lsls	r5, r0, #25
 8005af2:	d5fb      	bpl.n	8005aec <_printf_i+0xb8>
 8005af4:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005af8:	2d00      	cmp	r5, #0
 8005afa:	da03      	bge.n	8005b04 <_printf_i+0xd0>
 8005afc:	232d      	movs	r3, #45	@ 0x2d
 8005afe:	426d      	negs	r5, r5
 8005b00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b04:	4858      	ldr	r0, [pc, #352]	@ (8005c68 <_printf_i+0x234>)
 8005b06:	230a      	movs	r3, #10
 8005b08:	e011      	b.n	8005b2e <_printf_i+0xfa>
 8005b0a:	6821      	ldr	r1, [r4, #0]
 8005b0c:	6833      	ldr	r3, [r6, #0]
 8005b0e:	0608      	lsls	r0, r1, #24
 8005b10:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b14:	d402      	bmi.n	8005b1c <_printf_i+0xe8>
 8005b16:	0649      	lsls	r1, r1, #25
 8005b18:	bf48      	it	mi
 8005b1a:	b2ad      	uxthmi	r5, r5
 8005b1c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b1e:	4852      	ldr	r0, [pc, #328]	@ (8005c68 <_printf_i+0x234>)
 8005b20:	6033      	str	r3, [r6, #0]
 8005b22:	bf14      	ite	ne
 8005b24:	230a      	movne	r3, #10
 8005b26:	2308      	moveq	r3, #8
 8005b28:	2100      	movs	r1, #0
 8005b2a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b2e:	6866      	ldr	r6, [r4, #4]
 8005b30:	60a6      	str	r6, [r4, #8]
 8005b32:	2e00      	cmp	r6, #0
 8005b34:	db05      	blt.n	8005b42 <_printf_i+0x10e>
 8005b36:	6821      	ldr	r1, [r4, #0]
 8005b38:	432e      	orrs	r6, r5
 8005b3a:	f021 0104 	bic.w	r1, r1, #4
 8005b3e:	6021      	str	r1, [r4, #0]
 8005b40:	d04b      	beq.n	8005bda <_printf_i+0x1a6>
 8005b42:	4616      	mov	r6, r2
 8005b44:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b48:	fb03 5711 	mls	r7, r3, r1, r5
 8005b4c:	5dc7      	ldrb	r7, [r0, r7]
 8005b4e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b52:	462f      	mov	r7, r5
 8005b54:	42bb      	cmp	r3, r7
 8005b56:	460d      	mov	r5, r1
 8005b58:	d9f4      	bls.n	8005b44 <_printf_i+0x110>
 8005b5a:	2b08      	cmp	r3, #8
 8005b5c:	d10b      	bne.n	8005b76 <_printf_i+0x142>
 8005b5e:	6823      	ldr	r3, [r4, #0]
 8005b60:	07df      	lsls	r7, r3, #31
 8005b62:	d508      	bpl.n	8005b76 <_printf_i+0x142>
 8005b64:	6923      	ldr	r3, [r4, #16]
 8005b66:	6861      	ldr	r1, [r4, #4]
 8005b68:	4299      	cmp	r1, r3
 8005b6a:	bfde      	ittt	le
 8005b6c:	2330      	movle	r3, #48	@ 0x30
 8005b6e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b72:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b76:	1b92      	subs	r2, r2, r6
 8005b78:	6122      	str	r2, [r4, #16]
 8005b7a:	f8cd a000 	str.w	sl, [sp]
 8005b7e:	464b      	mov	r3, r9
 8005b80:	aa03      	add	r2, sp, #12
 8005b82:	4621      	mov	r1, r4
 8005b84:	4640      	mov	r0, r8
 8005b86:	f7ff fee7 	bl	8005958 <_printf_common>
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	d14a      	bne.n	8005c24 <_printf_i+0x1f0>
 8005b8e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b92:	b004      	add	sp, #16
 8005b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	f043 0320 	orr.w	r3, r3, #32
 8005b9e:	6023      	str	r3, [r4, #0]
 8005ba0:	4832      	ldr	r0, [pc, #200]	@ (8005c6c <_printf_i+0x238>)
 8005ba2:	2778      	movs	r7, #120	@ 0x78
 8005ba4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005ba8:	6823      	ldr	r3, [r4, #0]
 8005baa:	6831      	ldr	r1, [r6, #0]
 8005bac:	061f      	lsls	r7, r3, #24
 8005bae:	f851 5b04 	ldr.w	r5, [r1], #4
 8005bb2:	d402      	bmi.n	8005bba <_printf_i+0x186>
 8005bb4:	065f      	lsls	r7, r3, #25
 8005bb6:	bf48      	it	mi
 8005bb8:	b2ad      	uxthmi	r5, r5
 8005bba:	6031      	str	r1, [r6, #0]
 8005bbc:	07d9      	lsls	r1, r3, #31
 8005bbe:	bf44      	itt	mi
 8005bc0:	f043 0320 	orrmi.w	r3, r3, #32
 8005bc4:	6023      	strmi	r3, [r4, #0]
 8005bc6:	b11d      	cbz	r5, 8005bd0 <_printf_i+0x19c>
 8005bc8:	2310      	movs	r3, #16
 8005bca:	e7ad      	b.n	8005b28 <_printf_i+0xf4>
 8005bcc:	4826      	ldr	r0, [pc, #152]	@ (8005c68 <_printf_i+0x234>)
 8005bce:	e7e9      	b.n	8005ba4 <_printf_i+0x170>
 8005bd0:	6823      	ldr	r3, [r4, #0]
 8005bd2:	f023 0320 	bic.w	r3, r3, #32
 8005bd6:	6023      	str	r3, [r4, #0]
 8005bd8:	e7f6      	b.n	8005bc8 <_printf_i+0x194>
 8005bda:	4616      	mov	r6, r2
 8005bdc:	e7bd      	b.n	8005b5a <_printf_i+0x126>
 8005bde:	6833      	ldr	r3, [r6, #0]
 8005be0:	6825      	ldr	r5, [r4, #0]
 8005be2:	6961      	ldr	r1, [r4, #20]
 8005be4:	1d18      	adds	r0, r3, #4
 8005be6:	6030      	str	r0, [r6, #0]
 8005be8:	062e      	lsls	r6, r5, #24
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	d501      	bpl.n	8005bf2 <_printf_i+0x1be>
 8005bee:	6019      	str	r1, [r3, #0]
 8005bf0:	e002      	b.n	8005bf8 <_printf_i+0x1c4>
 8005bf2:	0668      	lsls	r0, r5, #25
 8005bf4:	d5fb      	bpl.n	8005bee <_printf_i+0x1ba>
 8005bf6:	8019      	strh	r1, [r3, #0]
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	6123      	str	r3, [r4, #16]
 8005bfc:	4616      	mov	r6, r2
 8005bfe:	e7bc      	b.n	8005b7a <_printf_i+0x146>
 8005c00:	6833      	ldr	r3, [r6, #0]
 8005c02:	1d1a      	adds	r2, r3, #4
 8005c04:	6032      	str	r2, [r6, #0]
 8005c06:	681e      	ldr	r6, [r3, #0]
 8005c08:	6862      	ldr	r2, [r4, #4]
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f7fa fb67 	bl	80002e0 <memchr>
 8005c12:	b108      	cbz	r0, 8005c18 <_printf_i+0x1e4>
 8005c14:	1b80      	subs	r0, r0, r6
 8005c16:	6060      	str	r0, [r4, #4]
 8005c18:	6863      	ldr	r3, [r4, #4]
 8005c1a:	6123      	str	r3, [r4, #16]
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c22:	e7aa      	b.n	8005b7a <_printf_i+0x146>
 8005c24:	6923      	ldr	r3, [r4, #16]
 8005c26:	4632      	mov	r2, r6
 8005c28:	4649      	mov	r1, r9
 8005c2a:	4640      	mov	r0, r8
 8005c2c:	47d0      	blx	sl
 8005c2e:	3001      	adds	r0, #1
 8005c30:	d0ad      	beq.n	8005b8e <_printf_i+0x15a>
 8005c32:	6823      	ldr	r3, [r4, #0]
 8005c34:	079b      	lsls	r3, r3, #30
 8005c36:	d413      	bmi.n	8005c60 <_printf_i+0x22c>
 8005c38:	68e0      	ldr	r0, [r4, #12]
 8005c3a:	9b03      	ldr	r3, [sp, #12]
 8005c3c:	4298      	cmp	r0, r3
 8005c3e:	bfb8      	it	lt
 8005c40:	4618      	movlt	r0, r3
 8005c42:	e7a6      	b.n	8005b92 <_printf_i+0x15e>
 8005c44:	2301      	movs	r3, #1
 8005c46:	4632      	mov	r2, r6
 8005c48:	4649      	mov	r1, r9
 8005c4a:	4640      	mov	r0, r8
 8005c4c:	47d0      	blx	sl
 8005c4e:	3001      	adds	r0, #1
 8005c50:	d09d      	beq.n	8005b8e <_printf_i+0x15a>
 8005c52:	3501      	adds	r5, #1
 8005c54:	68e3      	ldr	r3, [r4, #12]
 8005c56:	9903      	ldr	r1, [sp, #12]
 8005c58:	1a5b      	subs	r3, r3, r1
 8005c5a:	42ab      	cmp	r3, r5
 8005c5c:	dcf2      	bgt.n	8005c44 <_printf_i+0x210>
 8005c5e:	e7eb      	b.n	8005c38 <_printf_i+0x204>
 8005c60:	2500      	movs	r5, #0
 8005c62:	f104 0619 	add.w	r6, r4, #25
 8005c66:	e7f5      	b.n	8005c54 <_printf_i+0x220>
 8005c68:	08006075 	.word	0x08006075
 8005c6c:	08006086 	.word	0x08006086

08005c70 <__sflush_r>:
 8005c70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c78:	0716      	lsls	r6, r2, #28
 8005c7a:	4605      	mov	r5, r0
 8005c7c:	460c      	mov	r4, r1
 8005c7e:	d454      	bmi.n	8005d2a <__sflush_r+0xba>
 8005c80:	684b      	ldr	r3, [r1, #4]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	dc02      	bgt.n	8005c8c <__sflush_r+0x1c>
 8005c86:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	dd48      	ble.n	8005d1e <__sflush_r+0xae>
 8005c8c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005c8e:	2e00      	cmp	r6, #0
 8005c90:	d045      	beq.n	8005d1e <__sflush_r+0xae>
 8005c92:	2300      	movs	r3, #0
 8005c94:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005c98:	682f      	ldr	r7, [r5, #0]
 8005c9a:	6a21      	ldr	r1, [r4, #32]
 8005c9c:	602b      	str	r3, [r5, #0]
 8005c9e:	d030      	beq.n	8005d02 <__sflush_r+0x92>
 8005ca0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005ca2:	89a3      	ldrh	r3, [r4, #12]
 8005ca4:	0759      	lsls	r1, r3, #29
 8005ca6:	d505      	bpl.n	8005cb4 <__sflush_r+0x44>
 8005ca8:	6863      	ldr	r3, [r4, #4]
 8005caa:	1ad2      	subs	r2, r2, r3
 8005cac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005cae:	b10b      	cbz	r3, 8005cb4 <__sflush_r+0x44>
 8005cb0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005cb2:	1ad2      	subs	r2, r2, r3
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005cb8:	6a21      	ldr	r1, [r4, #32]
 8005cba:	4628      	mov	r0, r5
 8005cbc:	47b0      	blx	r6
 8005cbe:	1c43      	adds	r3, r0, #1
 8005cc0:	89a3      	ldrh	r3, [r4, #12]
 8005cc2:	d106      	bne.n	8005cd2 <__sflush_r+0x62>
 8005cc4:	6829      	ldr	r1, [r5, #0]
 8005cc6:	291d      	cmp	r1, #29
 8005cc8:	d82b      	bhi.n	8005d22 <__sflush_r+0xb2>
 8005cca:	4a2a      	ldr	r2, [pc, #168]	@ (8005d74 <__sflush_r+0x104>)
 8005ccc:	40ca      	lsrs	r2, r1
 8005cce:	07d6      	lsls	r6, r2, #31
 8005cd0:	d527      	bpl.n	8005d22 <__sflush_r+0xb2>
 8005cd2:	2200      	movs	r2, #0
 8005cd4:	6062      	str	r2, [r4, #4]
 8005cd6:	04d9      	lsls	r1, r3, #19
 8005cd8:	6922      	ldr	r2, [r4, #16]
 8005cda:	6022      	str	r2, [r4, #0]
 8005cdc:	d504      	bpl.n	8005ce8 <__sflush_r+0x78>
 8005cde:	1c42      	adds	r2, r0, #1
 8005ce0:	d101      	bne.n	8005ce6 <__sflush_r+0x76>
 8005ce2:	682b      	ldr	r3, [r5, #0]
 8005ce4:	b903      	cbnz	r3, 8005ce8 <__sflush_r+0x78>
 8005ce6:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ce8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005cea:	602f      	str	r7, [r5, #0]
 8005cec:	b1b9      	cbz	r1, 8005d1e <__sflush_r+0xae>
 8005cee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005cf2:	4299      	cmp	r1, r3
 8005cf4:	d002      	beq.n	8005cfc <__sflush_r+0x8c>
 8005cf6:	4628      	mov	r0, r5
 8005cf8:	f7ff fbf4 	bl	80054e4 <_free_r>
 8005cfc:	2300      	movs	r3, #0
 8005cfe:	6363      	str	r3, [r4, #52]	@ 0x34
 8005d00:	e00d      	b.n	8005d1e <__sflush_r+0xae>
 8005d02:	2301      	movs	r3, #1
 8005d04:	4628      	mov	r0, r5
 8005d06:	47b0      	blx	r6
 8005d08:	4602      	mov	r2, r0
 8005d0a:	1c50      	adds	r0, r2, #1
 8005d0c:	d1c9      	bne.n	8005ca2 <__sflush_r+0x32>
 8005d0e:	682b      	ldr	r3, [r5, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d0c6      	beq.n	8005ca2 <__sflush_r+0x32>
 8005d14:	2b1d      	cmp	r3, #29
 8005d16:	d001      	beq.n	8005d1c <__sflush_r+0xac>
 8005d18:	2b16      	cmp	r3, #22
 8005d1a:	d11e      	bne.n	8005d5a <__sflush_r+0xea>
 8005d1c:	602f      	str	r7, [r5, #0]
 8005d1e:	2000      	movs	r0, #0
 8005d20:	e022      	b.n	8005d68 <__sflush_r+0xf8>
 8005d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d26:	b21b      	sxth	r3, r3
 8005d28:	e01b      	b.n	8005d62 <__sflush_r+0xf2>
 8005d2a:	690f      	ldr	r7, [r1, #16]
 8005d2c:	2f00      	cmp	r7, #0
 8005d2e:	d0f6      	beq.n	8005d1e <__sflush_r+0xae>
 8005d30:	0793      	lsls	r3, r2, #30
 8005d32:	680e      	ldr	r6, [r1, #0]
 8005d34:	bf08      	it	eq
 8005d36:	694b      	ldreq	r3, [r1, #20]
 8005d38:	600f      	str	r7, [r1, #0]
 8005d3a:	bf18      	it	ne
 8005d3c:	2300      	movne	r3, #0
 8005d3e:	eba6 0807 	sub.w	r8, r6, r7
 8005d42:	608b      	str	r3, [r1, #8]
 8005d44:	f1b8 0f00 	cmp.w	r8, #0
 8005d48:	dde9      	ble.n	8005d1e <__sflush_r+0xae>
 8005d4a:	6a21      	ldr	r1, [r4, #32]
 8005d4c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005d4e:	4643      	mov	r3, r8
 8005d50:	463a      	mov	r2, r7
 8005d52:	4628      	mov	r0, r5
 8005d54:	47b0      	blx	r6
 8005d56:	2800      	cmp	r0, #0
 8005d58:	dc08      	bgt.n	8005d6c <__sflush_r+0xfc>
 8005d5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d5e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005d62:	81a3      	strh	r3, [r4, #12]
 8005d64:	f04f 30ff 	mov.w	r0, #4294967295
 8005d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005d6c:	4407      	add	r7, r0
 8005d6e:	eba8 0800 	sub.w	r8, r8, r0
 8005d72:	e7e7      	b.n	8005d44 <__sflush_r+0xd4>
 8005d74:	20400001 	.word	0x20400001

08005d78 <_fflush_r>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	690b      	ldr	r3, [r1, #16]
 8005d7c:	4605      	mov	r5, r0
 8005d7e:	460c      	mov	r4, r1
 8005d80:	b913      	cbnz	r3, 8005d88 <_fflush_r+0x10>
 8005d82:	2500      	movs	r5, #0
 8005d84:	4628      	mov	r0, r5
 8005d86:	bd38      	pop	{r3, r4, r5, pc}
 8005d88:	b118      	cbz	r0, 8005d92 <_fflush_r+0x1a>
 8005d8a:	6a03      	ldr	r3, [r0, #32]
 8005d8c:	b90b      	cbnz	r3, 8005d92 <_fflush_r+0x1a>
 8005d8e:	f7ff faa1 	bl	80052d4 <__sinit>
 8005d92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d0f3      	beq.n	8005d82 <_fflush_r+0xa>
 8005d9a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005d9c:	07d0      	lsls	r0, r2, #31
 8005d9e:	d404      	bmi.n	8005daa <_fflush_r+0x32>
 8005da0:	0599      	lsls	r1, r3, #22
 8005da2:	d402      	bmi.n	8005daa <_fflush_r+0x32>
 8005da4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005da6:	f7ff fb9a 	bl	80054de <__retarget_lock_acquire_recursive>
 8005daa:	4628      	mov	r0, r5
 8005dac:	4621      	mov	r1, r4
 8005dae:	f7ff ff5f 	bl	8005c70 <__sflush_r>
 8005db2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005db4:	07da      	lsls	r2, r3, #31
 8005db6:	4605      	mov	r5, r0
 8005db8:	d4e4      	bmi.n	8005d84 <_fflush_r+0xc>
 8005dba:	89a3      	ldrh	r3, [r4, #12]
 8005dbc:	059b      	lsls	r3, r3, #22
 8005dbe:	d4e1      	bmi.n	8005d84 <_fflush_r+0xc>
 8005dc0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005dc2:	f7ff fb8d 	bl	80054e0 <__retarget_lock_release_recursive>
 8005dc6:	e7dd      	b.n	8005d84 <_fflush_r+0xc>

08005dc8 <__swbuf_r>:
 8005dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dca:	460e      	mov	r6, r1
 8005dcc:	4614      	mov	r4, r2
 8005dce:	4605      	mov	r5, r0
 8005dd0:	b118      	cbz	r0, 8005dda <__swbuf_r+0x12>
 8005dd2:	6a03      	ldr	r3, [r0, #32]
 8005dd4:	b90b      	cbnz	r3, 8005dda <__swbuf_r+0x12>
 8005dd6:	f7ff fa7d 	bl	80052d4 <__sinit>
 8005dda:	69a3      	ldr	r3, [r4, #24]
 8005ddc:	60a3      	str	r3, [r4, #8]
 8005dde:	89a3      	ldrh	r3, [r4, #12]
 8005de0:	071a      	lsls	r2, r3, #28
 8005de2:	d501      	bpl.n	8005de8 <__swbuf_r+0x20>
 8005de4:	6923      	ldr	r3, [r4, #16]
 8005de6:	b943      	cbnz	r3, 8005dfa <__swbuf_r+0x32>
 8005de8:	4621      	mov	r1, r4
 8005dea:	4628      	mov	r0, r5
 8005dec:	f000 f82a 	bl	8005e44 <__swsetup_r>
 8005df0:	b118      	cbz	r0, 8005dfa <__swbuf_r+0x32>
 8005df2:	f04f 37ff 	mov.w	r7, #4294967295
 8005df6:	4638      	mov	r0, r7
 8005df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	6922      	ldr	r2, [r4, #16]
 8005dfe:	1a98      	subs	r0, r3, r2
 8005e00:	6963      	ldr	r3, [r4, #20]
 8005e02:	b2f6      	uxtb	r6, r6
 8005e04:	4283      	cmp	r3, r0
 8005e06:	4637      	mov	r7, r6
 8005e08:	dc05      	bgt.n	8005e16 <__swbuf_r+0x4e>
 8005e0a:	4621      	mov	r1, r4
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	f7ff ffb3 	bl	8005d78 <_fflush_r>
 8005e12:	2800      	cmp	r0, #0
 8005e14:	d1ed      	bne.n	8005df2 <__swbuf_r+0x2a>
 8005e16:	68a3      	ldr	r3, [r4, #8]
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	60a3      	str	r3, [r4, #8]
 8005e1c:	6823      	ldr	r3, [r4, #0]
 8005e1e:	1c5a      	adds	r2, r3, #1
 8005e20:	6022      	str	r2, [r4, #0]
 8005e22:	701e      	strb	r6, [r3, #0]
 8005e24:	6962      	ldr	r2, [r4, #20]
 8005e26:	1c43      	adds	r3, r0, #1
 8005e28:	429a      	cmp	r2, r3
 8005e2a:	d004      	beq.n	8005e36 <__swbuf_r+0x6e>
 8005e2c:	89a3      	ldrh	r3, [r4, #12]
 8005e2e:	07db      	lsls	r3, r3, #31
 8005e30:	d5e1      	bpl.n	8005df6 <__swbuf_r+0x2e>
 8005e32:	2e0a      	cmp	r6, #10
 8005e34:	d1df      	bne.n	8005df6 <__swbuf_r+0x2e>
 8005e36:	4621      	mov	r1, r4
 8005e38:	4628      	mov	r0, r5
 8005e3a:	f7ff ff9d 	bl	8005d78 <_fflush_r>
 8005e3e:	2800      	cmp	r0, #0
 8005e40:	d0d9      	beq.n	8005df6 <__swbuf_r+0x2e>
 8005e42:	e7d6      	b.n	8005df2 <__swbuf_r+0x2a>

08005e44 <__swsetup_r>:
 8005e44:	b538      	push	{r3, r4, r5, lr}
 8005e46:	4b29      	ldr	r3, [pc, #164]	@ (8005eec <__swsetup_r+0xa8>)
 8005e48:	4605      	mov	r5, r0
 8005e4a:	6818      	ldr	r0, [r3, #0]
 8005e4c:	460c      	mov	r4, r1
 8005e4e:	b118      	cbz	r0, 8005e58 <__swsetup_r+0x14>
 8005e50:	6a03      	ldr	r3, [r0, #32]
 8005e52:	b90b      	cbnz	r3, 8005e58 <__swsetup_r+0x14>
 8005e54:	f7ff fa3e 	bl	80052d4 <__sinit>
 8005e58:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005e5c:	0719      	lsls	r1, r3, #28
 8005e5e:	d422      	bmi.n	8005ea6 <__swsetup_r+0x62>
 8005e60:	06da      	lsls	r2, r3, #27
 8005e62:	d407      	bmi.n	8005e74 <__swsetup_r+0x30>
 8005e64:	2209      	movs	r2, #9
 8005e66:	602a      	str	r2, [r5, #0]
 8005e68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e6c:	81a3      	strh	r3, [r4, #12]
 8005e6e:	f04f 30ff 	mov.w	r0, #4294967295
 8005e72:	e033      	b.n	8005edc <__swsetup_r+0x98>
 8005e74:	0758      	lsls	r0, r3, #29
 8005e76:	d512      	bpl.n	8005e9e <__swsetup_r+0x5a>
 8005e78:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e7a:	b141      	cbz	r1, 8005e8e <__swsetup_r+0x4a>
 8005e7c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e80:	4299      	cmp	r1, r3
 8005e82:	d002      	beq.n	8005e8a <__swsetup_r+0x46>
 8005e84:	4628      	mov	r0, r5
 8005e86:	f7ff fb2d 	bl	80054e4 <_free_r>
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e8e:	89a3      	ldrh	r3, [r4, #12]
 8005e90:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005e94:	81a3      	strh	r3, [r4, #12]
 8005e96:	2300      	movs	r3, #0
 8005e98:	6063      	str	r3, [r4, #4]
 8005e9a:	6923      	ldr	r3, [r4, #16]
 8005e9c:	6023      	str	r3, [r4, #0]
 8005e9e:	89a3      	ldrh	r3, [r4, #12]
 8005ea0:	f043 0308 	orr.w	r3, r3, #8
 8005ea4:	81a3      	strh	r3, [r4, #12]
 8005ea6:	6923      	ldr	r3, [r4, #16]
 8005ea8:	b94b      	cbnz	r3, 8005ebe <__swsetup_r+0x7a>
 8005eaa:	89a3      	ldrh	r3, [r4, #12]
 8005eac:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005eb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005eb4:	d003      	beq.n	8005ebe <__swsetup_r+0x7a>
 8005eb6:	4621      	mov	r1, r4
 8005eb8:	4628      	mov	r0, r5
 8005eba:	f000 f84f 	bl	8005f5c <__smakebuf_r>
 8005ebe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ec2:	f013 0201 	ands.w	r2, r3, #1
 8005ec6:	d00a      	beq.n	8005ede <__swsetup_r+0x9a>
 8005ec8:	2200      	movs	r2, #0
 8005eca:	60a2      	str	r2, [r4, #8]
 8005ecc:	6962      	ldr	r2, [r4, #20]
 8005ece:	4252      	negs	r2, r2
 8005ed0:	61a2      	str	r2, [r4, #24]
 8005ed2:	6922      	ldr	r2, [r4, #16]
 8005ed4:	b942      	cbnz	r2, 8005ee8 <__swsetup_r+0xa4>
 8005ed6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005eda:	d1c5      	bne.n	8005e68 <__swsetup_r+0x24>
 8005edc:	bd38      	pop	{r3, r4, r5, pc}
 8005ede:	0799      	lsls	r1, r3, #30
 8005ee0:	bf58      	it	pl
 8005ee2:	6962      	ldrpl	r2, [r4, #20]
 8005ee4:	60a2      	str	r2, [r4, #8]
 8005ee6:	e7f4      	b.n	8005ed2 <__swsetup_r+0x8e>
 8005ee8:	2000      	movs	r0, #0
 8005eea:	e7f7      	b.n	8005edc <__swsetup_r+0x98>
 8005eec:	24000020 	.word	0x24000020

08005ef0 <_sbrk_r>:
 8005ef0:	b538      	push	{r3, r4, r5, lr}
 8005ef2:	4d06      	ldr	r5, [pc, #24]	@ (8005f0c <_sbrk_r+0x1c>)
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	4604      	mov	r4, r0
 8005ef8:	4608      	mov	r0, r1
 8005efa:	602b      	str	r3, [r5, #0]
 8005efc:	f7fa ffe8 	bl	8000ed0 <_sbrk>
 8005f00:	1c43      	adds	r3, r0, #1
 8005f02:	d102      	bne.n	8005f0a <_sbrk_r+0x1a>
 8005f04:	682b      	ldr	r3, [r5, #0]
 8005f06:	b103      	cbz	r3, 8005f0a <_sbrk_r+0x1a>
 8005f08:	6023      	str	r3, [r4, #0]
 8005f0a:	bd38      	pop	{r3, r4, r5, pc}
 8005f0c:	240002c4 	.word	0x240002c4

08005f10 <__swhatbuf_r>:
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	460c      	mov	r4, r1
 8005f14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f18:	2900      	cmp	r1, #0
 8005f1a:	b096      	sub	sp, #88	@ 0x58
 8005f1c:	4615      	mov	r5, r2
 8005f1e:	461e      	mov	r6, r3
 8005f20:	da0d      	bge.n	8005f3e <__swhatbuf_r+0x2e>
 8005f22:	89a3      	ldrh	r3, [r4, #12]
 8005f24:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005f28:	f04f 0100 	mov.w	r1, #0
 8005f2c:	bf14      	ite	ne
 8005f2e:	2340      	movne	r3, #64	@ 0x40
 8005f30:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005f34:	2000      	movs	r0, #0
 8005f36:	6031      	str	r1, [r6, #0]
 8005f38:	602b      	str	r3, [r5, #0]
 8005f3a:	b016      	add	sp, #88	@ 0x58
 8005f3c:	bd70      	pop	{r4, r5, r6, pc}
 8005f3e:	466a      	mov	r2, sp
 8005f40:	f000 f848 	bl	8005fd4 <_fstat_r>
 8005f44:	2800      	cmp	r0, #0
 8005f46:	dbec      	blt.n	8005f22 <__swhatbuf_r+0x12>
 8005f48:	9901      	ldr	r1, [sp, #4]
 8005f4a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005f4e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005f52:	4259      	negs	r1, r3
 8005f54:	4159      	adcs	r1, r3
 8005f56:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005f5a:	e7eb      	b.n	8005f34 <__swhatbuf_r+0x24>

08005f5c <__smakebuf_r>:
 8005f5c:	898b      	ldrh	r3, [r1, #12]
 8005f5e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f60:	079d      	lsls	r5, r3, #30
 8005f62:	4606      	mov	r6, r0
 8005f64:	460c      	mov	r4, r1
 8005f66:	d507      	bpl.n	8005f78 <__smakebuf_r+0x1c>
 8005f68:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005f6c:	6023      	str	r3, [r4, #0]
 8005f6e:	6123      	str	r3, [r4, #16]
 8005f70:	2301      	movs	r3, #1
 8005f72:	6163      	str	r3, [r4, #20]
 8005f74:	b003      	add	sp, #12
 8005f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f78:	ab01      	add	r3, sp, #4
 8005f7a:	466a      	mov	r2, sp
 8005f7c:	f7ff ffc8 	bl	8005f10 <__swhatbuf_r>
 8005f80:	9f00      	ldr	r7, [sp, #0]
 8005f82:	4605      	mov	r5, r0
 8005f84:	4639      	mov	r1, r7
 8005f86:	4630      	mov	r0, r6
 8005f88:	f7ff fb18 	bl	80055bc <_malloc_r>
 8005f8c:	b948      	cbnz	r0, 8005fa2 <__smakebuf_r+0x46>
 8005f8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f92:	059a      	lsls	r2, r3, #22
 8005f94:	d4ee      	bmi.n	8005f74 <__smakebuf_r+0x18>
 8005f96:	f023 0303 	bic.w	r3, r3, #3
 8005f9a:	f043 0302 	orr.w	r3, r3, #2
 8005f9e:	81a3      	strh	r3, [r4, #12]
 8005fa0:	e7e2      	b.n	8005f68 <__smakebuf_r+0xc>
 8005fa2:	89a3      	ldrh	r3, [r4, #12]
 8005fa4:	6020      	str	r0, [r4, #0]
 8005fa6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005faa:	81a3      	strh	r3, [r4, #12]
 8005fac:	9b01      	ldr	r3, [sp, #4]
 8005fae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005fb2:	b15b      	cbz	r3, 8005fcc <__smakebuf_r+0x70>
 8005fb4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005fb8:	4630      	mov	r0, r6
 8005fba:	f000 f81d 	bl	8005ff8 <_isatty_r>
 8005fbe:	b128      	cbz	r0, 8005fcc <__smakebuf_r+0x70>
 8005fc0:	89a3      	ldrh	r3, [r4, #12]
 8005fc2:	f023 0303 	bic.w	r3, r3, #3
 8005fc6:	f043 0301 	orr.w	r3, r3, #1
 8005fca:	81a3      	strh	r3, [r4, #12]
 8005fcc:	89a3      	ldrh	r3, [r4, #12]
 8005fce:	431d      	orrs	r5, r3
 8005fd0:	81a5      	strh	r5, [r4, #12]
 8005fd2:	e7cf      	b.n	8005f74 <__smakebuf_r+0x18>

08005fd4 <_fstat_r>:
 8005fd4:	b538      	push	{r3, r4, r5, lr}
 8005fd6:	4d07      	ldr	r5, [pc, #28]	@ (8005ff4 <_fstat_r+0x20>)
 8005fd8:	2300      	movs	r3, #0
 8005fda:	4604      	mov	r4, r0
 8005fdc:	4608      	mov	r0, r1
 8005fde:	4611      	mov	r1, r2
 8005fe0:	602b      	str	r3, [r5, #0]
 8005fe2:	f7fa ff4d 	bl	8000e80 <_fstat>
 8005fe6:	1c43      	adds	r3, r0, #1
 8005fe8:	d102      	bne.n	8005ff0 <_fstat_r+0x1c>
 8005fea:	682b      	ldr	r3, [r5, #0]
 8005fec:	b103      	cbz	r3, 8005ff0 <_fstat_r+0x1c>
 8005fee:	6023      	str	r3, [r4, #0]
 8005ff0:	bd38      	pop	{r3, r4, r5, pc}
 8005ff2:	bf00      	nop
 8005ff4:	240002c4 	.word	0x240002c4

08005ff8 <_isatty_r>:
 8005ff8:	b538      	push	{r3, r4, r5, lr}
 8005ffa:	4d06      	ldr	r5, [pc, #24]	@ (8006014 <_isatty_r+0x1c>)
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	4604      	mov	r4, r0
 8006000:	4608      	mov	r0, r1
 8006002:	602b      	str	r3, [r5, #0]
 8006004:	f7fa ff4c 	bl	8000ea0 <_isatty>
 8006008:	1c43      	adds	r3, r0, #1
 800600a:	d102      	bne.n	8006012 <_isatty_r+0x1a>
 800600c:	682b      	ldr	r3, [r5, #0]
 800600e:	b103      	cbz	r3, 8006012 <_isatty_r+0x1a>
 8006010:	6023      	str	r3, [r4, #0]
 8006012:	bd38      	pop	{r3, r4, r5, pc}
 8006014:	240002c4 	.word	0x240002c4

08006018 <_init>:
 8006018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800601a:	bf00      	nop
 800601c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601e:	bc08      	pop	{r3}
 8006020:	469e      	mov	lr, r3
 8006022:	4770      	bx	lr

08006024 <_fini>:
 8006024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006026:	bf00      	nop
 8006028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800602a:	bc08      	pop	{r3}
 800602c:	469e      	mov	lr, r3
 800602e:	4770      	bx	lr
