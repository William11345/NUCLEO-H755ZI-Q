
Timer_Test_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006338  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080065d8  080065d8  000075d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006640  08006640  00008070  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006640  08006640  00007640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006648  08006648  00008070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006648  08006648  00007648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800664c  0800664c  0000764c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000070  24000000  08006650  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002fc  24000070  080066c0  00008070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2400036c  080066c0  0000836c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00008070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000154ba  00000000  00000000  0000809e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002675  00000000  00000000  0001d558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001160  00000000  00000000  0001fbd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d89  00000000  00000000  00020d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003b9d6  00000000  00000000  00021ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015d5e  00000000  00000000  0005d48f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00189fe9  00000000  00000000  000731ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001fd1d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005118  00000000  00000000  001fd21c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00202334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000070 	.word	0x24000070
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080065c0 	.word	0x080065c0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000074 	.word	0x24000074
 80002dc:	080065c0 	.word	0x080065c0

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295
 8000390:	f04f 30ff 	movne.w	r0, #4294967295
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b0:	4b49      	ldr	r3, [pc, #292]	@ (80007d8 <SystemInit+0x12c>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006b6:	4a48      	ldr	r2, [pc, #288]	@ (80007d8 <SystemInit+0x12c>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006c0:	4b45      	ldr	r3, [pc, #276]	@ (80007d8 <SystemInit+0x12c>)
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	4a44      	ldr	r2, [pc, #272]	@ (80007d8 <SystemInit+0x12c>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006cc:	4b43      	ldr	r3, [pc, #268]	@ (80007dc <SystemInit+0x130>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	d807      	bhi.n	80006e8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d8:	4b40      	ldr	r3, [pc, #256]	@ (80007dc <SystemInit+0x130>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f023 030f 	bic.w	r3, r3, #15
 80006e0:	4a3e      	ldr	r2, [pc, #248]	@ (80007dc <SystemInit+0x130>)
 80006e2:	f043 0307 	orr.w	r3, r3, #7
 80006e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006e8:	4b3d      	ldr	r3, [pc, #244]	@ (80007e0 <SystemInit+0x134>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a3c      	ldr	r2, [pc, #240]	@ (80007e0 <SystemInit+0x134>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f4:	4b3a      	ldr	r3, [pc, #232]	@ (80007e0 <SystemInit+0x134>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006fa:	4b39      	ldr	r3, [pc, #228]	@ (80007e0 <SystemInit+0x134>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	4938      	ldr	r1, [pc, #224]	@ (80007e0 <SystemInit+0x134>)
 8000700:	4b38      	ldr	r3, [pc, #224]	@ (80007e4 <SystemInit+0x138>)
 8000702:	4013      	ands	r3, r2
 8000704:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000706:	4b35      	ldr	r3, [pc, #212]	@ (80007dc <SystemInit+0x130>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	2b00      	cmp	r3, #0
 8000710:	d007      	beq.n	8000722 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000712:	4b32      	ldr	r3, [pc, #200]	@ (80007dc <SystemInit+0x130>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f023 030f 	bic.w	r3, r3, #15
 800071a:	4a30      	ldr	r2, [pc, #192]	@ (80007dc <SystemInit+0x130>)
 800071c:	f043 0307 	orr.w	r3, r3, #7
 8000720:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000722:	4b2f      	ldr	r3, [pc, #188]	@ (80007e0 <SystemInit+0x134>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000728:	4b2d      	ldr	r3, [pc, #180]	@ (80007e0 <SystemInit+0x134>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800072e:	4b2c      	ldr	r3, [pc, #176]	@ (80007e0 <SystemInit+0x134>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000734:	4b2a      	ldr	r3, [pc, #168]	@ (80007e0 <SystemInit+0x134>)
 8000736:	4a2c      	ldr	r2, [pc, #176]	@ (80007e8 <SystemInit+0x13c>)
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800073a:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <SystemInit+0x134>)
 800073c:	4a2b      	ldr	r2, [pc, #172]	@ (80007ec <SystemInit+0x140>)
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000740:	4b27      	ldr	r3, [pc, #156]	@ (80007e0 <SystemInit+0x134>)
 8000742:	4a2b      	ldr	r2, [pc, #172]	@ (80007f0 <SystemInit+0x144>)
 8000744:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000746:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <SystemInit+0x134>)
 8000748:	2200      	movs	r2, #0
 800074a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800074c:	4b24      	ldr	r3, [pc, #144]	@ (80007e0 <SystemInit+0x134>)
 800074e:	4a28      	ldr	r2, [pc, #160]	@ (80007f0 <SystemInit+0x144>)
 8000750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000752:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <SystemInit+0x134>)
 8000754:	2200      	movs	r2, #0
 8000756:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000758:	4b21      	ldr	r3, [pc, #132]	@ (80007e0 <SystemInit+0x134>)
 800075a:	4a25      	ldr	r2, [pc, #148]	@ (80007f0 <SystemInit+0x144>)
 800075c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800075e:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <SystemInit+0x134>)
 8000760:	2200      	movs	r2, #0
 8000762:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000764:	4b1e      	ldr	r3, [pc, #120]	@ (80007e0 <SystemInit+0x134>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a1d      	ldr	r2, [pc, #116]	@ (80007e0 <SystemInit+0x134>)
 800076a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000770:	4b1b      	ldr	r3, [pc, #108]	@ (80007e0 <SystemInit+0x134>)
 8000772:	2200      	movs	r2, #0
 8000774:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000776:	4b1f      	ldr	r3, [pc, #124]	@ (80007f4 <SystemInit+0x148>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800077a:	4a1e      	ldr	r2, [pc, #120]	@ (80007f4 <SystemInit+0x148>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000780:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000782:	4b1d      	ldr	r3, [pc, #116]	@ (80007f8 <SystemInit+0x14c>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b1d      	ldr	r3, [pc, #116]	@ (80007fc <SystemInit+0x150>)
 8000788:	4013      	ands	r3, r2
 800078a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800078e:	d202      	bcs.n	8000796 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000790:	4b1b      	ldr	r3, [pc, #108]	@ (8000800 <SystemInit+0x154>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000796:	4b12      	ldr	r3, [pc, #72]	@ (80007e0 <SystemInit+0x134>)
 8000798:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800079c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d113      	bne.n	80007cc <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007a4:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <SystemInit+0x134>)
 80007a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007aa:	4a0d      	ldr	r2, [pc, #52]	@ (80007e0 <SystemInit+0x134>)
 80007ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80007b0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80007b4:	4b13      	ldr	r3, [pc, #76]	@ (8000804 <SystemInit+0x158>)
 80007b6:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80007ba:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 80007bc:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <SystemInit+0x134>)
 80007be:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80007c2:	4a07      	ldr	r2, [pc, #28]	@ (80007e0 <SystemInit+0x134>)
 80007c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007c8:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80007cc:	bf00      	nop
 80007ce:	46bd      	mov	sp, r7
 80007d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d4:	4770      	bx	lr
 80007d6:	bf00      	nop
 80007d8:	e000ed00 	.word	0xe000ed00
 80007dc:	52002000 	.word	0x52002000
 80007e0:	58024400 	.word	0x58024400
 80007e4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007e8:	02020200 	.word	0x02020200
 80007ec:	01ff0000 	.word	0x01ff0000
 80007f0:	01010280 	.word	0x01010280
 80007f4:	580000c0 	.word	0x580000c0
 80007f8:	5c001000 	.word	0x5c001000
 80007fc:	ffff0000 	.word	0xffff0000
 8000800:	51008108 	.word	0x51008108
 8000804:	52004000 	.word	0x52004000

08000808 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 800080c:	4b09      	ldr	r3, [pc, #36]	@ (8000834 <ExitRun0Mode+0x2c>)
 800080e:	68db      	ldr	r3, [r3, #12]
 8000810:	4a08      	ldr	r2, [pc, #32]	@ (8000834 <ExitRun0Mode+0x2c>)
 8000812:	f023 0302 	bic.w	r3, r3, #2
 8000816:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000818:	bf00      	nop
 800081a:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <ExitRun0Mode+0x2c>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0f9      	beq.n	800081a <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr
 8000832:	bf00      	nop
 8000834:	58024800 	.word	0x58024800

08000838 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800083e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000842:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000844:	bf00      	nop
 8000846:	4b3c      	ldr	r3, [pc, #240]	@ (8000938 <main+0x100>)
 8000848:	681b      	ldr	r3, [r3, #0]
 800084a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800084e:	2b00      	cmp	r3, #0
 8000850:	d004      	beq.n	800085c <main+0x24>
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	1e5a      	subs	r2, r3, #1
 8000856:	607a      	str	r2, [r7, #4]
 8000858:	2b00      	cmp	r3, #0
 800085a:	dcf4      	bgt.n	8000846 <main+0xe>
  if ( timeout < 0 )
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	2b00      	cmp	r3, #0
 8000860:	da01      	bge.n	8000866 <main+0x2e>
  {
  Error_Handler();
 8000862:	f000 fb4b 	bl	8000efc <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000866:	f000 fe13 	bl	8001490 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800086a:	f000 f873 	bl	8000954 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800086e:	4b32      	ldr	r3, [pc, #200]	@ (8000938 <main+0x100>)
 8000870:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000874:	4a30      	ldr	r2, [pc, #192]	@ (8000938 <main+0x100>)
 8000876:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800087a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800087e:	4b2e      	ldr	r3, [pc, #184]	@ (8000938 <main+0x100>)
 8000880:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000884:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000888:	603b      	str	r3, [r7, #0]
 800088a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800088c:	2000      	movs	r0, #0
 800088e:	f001 f989 	bl	8001ba4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000892:	2100      	movs	r1, #0
 8000894:	2000      	movs	r0, #0
 8000896:	f001 f99f 	bl	8001bd8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800089a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800089e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008a0:	bf00      	nop
 80008a2:	4b25      	ldr	r3, [pc, #148]	@ (8000938 <main+0x100>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d104      	bne.n	80008b8 <main+0x80>
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	1e5a      	subs	r2, r3, #1
 80008b2:	607a      	str	r2, [r7, #4]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	dcf4      	bgt.n	80008a2 <main+0x6a>
if ( timeout < 0 )
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	da01      	bge.n	80008c2 <main+0x8a>
{
Error_Handler();
 80008be:	f000 fb1d 	bl	8000efc <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008c2:	f000 fa8d 	bl	8000de0 <MX_GPIO_Init>
  MX_TIM1_Init();
 80008c6:	f000 f8c1 	bl	8000a4c <MX_TIM1_Init>
  MX_TIM2_Init();
 80008ca:	f000 f983 	bl	8000bd4 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008ce:	f000 f9f7 	bl	8000cc0 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <main+0x104>)
 80008d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008d8:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80008da:	4b18      	ldr	r3, [pc, #96]	@ (800093c <main+0x104>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80008e0:	4b16      	ldr	r3, [pc, #88]	@ (800093c <main+0x104>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80008e6:	4b15      	ldr	r3, [pc, #84]	@ (800093c <main+0x104>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80008ec:	4b13      	ldr	r3, [pc, #76]	@ (800093c <main+0x104>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80008f2:	4912      	ldr	r1, [pc, #72]	@ (800093c <main+0x104>)
 80008f4:	2000      	movs	r0, #0
 80008f6:	f000 fcf5 	bl	80012e4 <BSP_COM_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <main+0xcc>
  {
    Error_Handler();
 8000900:	f000 fafc 	bl	8000efc <Error_Handler>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


 // __HAL_TIM_SET_COUNTER(&htim1, 16); // 16 = bon delay
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000904:	2100      	movs	r1, #0
 8000906:	480e      	ldr	r0, [pc, #56]	@ (8000940 <main+0x108>)
 8000908:	f002 fd30 	bl	800336c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800090c:	2100      	movs	r1, #0
 800090e:	480d      	ldr	r0, [pc, #52]	@ (8000944 <main+0x10c>)
 8000910:	f002 fd2c 	bl	800336c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000914:	2100      	movs	r1, #0
 8000916:	480c      	ldr	r0, [pc, #48]	@ (8000948 <main+0x110>)
 8000918:	f002 fd28 	bl	800336c <HAL_TIM_PWM_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 800091c:	2101      	movs	r1, #1
 800091e:	480b      	ldr	r0, [pc, #44]	@ (800094c <main+0x114>)
 8000920:	f001 f925 	bl	8001b6e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000924:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000928:	f000 fe44 	bl	80015b4 <HAL_Delay>
	  printf("Hello_Word");
 800092c:	4808      	ldr	r0, [pc, #32]	@ (8000950 <main+0x118>)
 800092e:	f004 ffdb 	bl	80058e8 <iprintf>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000932:	bf00      	nop
 8000934:	e7f2      	b.n	800091c <main+0xe4>
 8000936:	bf00      	nop
 8000938:	58024400 	.word	0x58024400
 800093c:	2400008c 	.word	0x2400008c
 8000940:	2400009c 	.word	0x2400009c
 8000944:	24000134 	.word	0x24000134
 8000948:	240000e8 	.word	0x240000e8
 800094c:	58020400 	.word	0x58020400
 8000950:	080065d8 	.word	0x080065d8

08000954 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b09c      	sub	sp, #112	@ 0x70
 8000958:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800095a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800095e:	224c      	movs	r2, #76	@ 0x4c
 8000960:	2100      	movs	r1, #0
 8000962:	4618      	mov	r0, r3
 8000964:	f005 f815 	bl	8005992 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000968:	1d3b      	adds	r3, r7, #4
 800096a:	2220      	movs	r2, #32
 800096c:	2100      	movs	r1, #0
 800096e:	4618      	mov	r0, r3
 8000970:	f005 f80f 	bl	8005992 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000974:	2004      	movs	r0, #4
 8000976:	f001 f943 	bl	8001c00 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800097a:	2300      	movs	r3, #0
 800097c:	603b      	str	r3, [r7, #0]
 800097e:	4b31      	ldr	r3, [pc, #196]	@ (8000a44 <SystemClock_Config+0xf0>)
 8000980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000982:	4a30      	ldr	r2, [pc, #192]	@ (8000a44 <SystemClock_Config+0xf0>)
 8000984:	f023 0301 	bic.w	r3, r3, #1
 8000988:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800098a:	4b2e      	ldr	r3, [pc, #184]	@ (8000a44 <SystemClock_Config+0xf0>)
 800098c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	603b      	str	r3, [r7, #0]
 8000994:	4b2c      	ldr	r3, [pc, #176]	@ (8000a48 <SystemClock_Config+0xf4>)
 8000996:	699b      	ldr	r3, [r3, #24]
 8000998:	4a2b      	ldr	r2, [pc, #172]	@ (8000a48 <SystemClock_Config+0xf4>)
 800099a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800099e:	6193      	str	r3, [r2, #24]
 80009a0:	4b29      	ldr	r3, [pc, #164]	@ (8000a48 <SystemClock_Config+0xf4>)
 80009a2:	699b      	ldr	r3, [r3, #24]
 80009a4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009a8:	603b      	str	r3, [r7, #0]
 80009aa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009ac:	bf00      	nop
 80009ae:	4b26      	ldr	r3, [pc, #152]	@ (8000a48 <SystemClock_Config+0xf4>)
 80009b0:	699b      	ldr	r3, [r3, #24]
 80009b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80009b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80009ba:	d1f8      	bne.n	80009ae <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009bc:	2302      	movs	r3, #2
 80009be:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009c0:	2301      	movs	r3, #1
 80009c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c4:	2340      	movs	r3, #64	@ 0x40
 80009c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009c8:	2302      	movs	r3, #2
 80009ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009cc:	2300      	movs	r3, #0
 80009ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009d0:	2304      	movs	r3, #4
 80009d2:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 80009d4:	2332      	movs	r3, #50	@ 0x32
 80009d6:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009d8:	2302      	movs	r3, #2
 80009da:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80009dc:	2305      	movs	r3, #5
 80009de:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009e0:	2302      	movs	r3, #2
 80009e2:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80009e4:	230c      	movs	r3, #12
 80009e6:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009f0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f4:	4618      	mov	r0, r3
 80009f6:	f001 f95d 	bl	8001cb4 <HAL_RCC_OscConfig>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000a00:	f000 fa7c 	bl	8000efc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a04:	233f      	movs	r3, #63	@ 0x3f
 8000a06:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a08:	2303      	movs	r3, #3
 8000a0a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a10:	2308      	movs	r3, #8
 8000a12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a14:	2340      	movs	r3, #64	@ 0x40
 8000a16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a18:	2340      	movs	r3, #64	@ 0x40
 8000a1a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a1c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a20:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a22:	2340      	movs	r3, #64	@ 0x40
 8000a24:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2102      	movs	r1, #2
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f001 fd9c 	bl	8002568 <HAL_RCC_ClockConfig>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8000a36:	f000 fa61 	bl	8000efc <Error_Handler>
  }
}
 8000a3a:	bf00      	nop
 8000a3c:	3770      	adds	r7, #112	@ 0x70
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	58000400 	.word	0x58000400
 8000a48:	58024800 	.word	0x58024800

08000a4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b09e      	sub	sp, #120	@ 0x78
 8000a50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a52:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000a60:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a70:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000a74:	2200      	movs	r2, #0
 8000a76:	601a      	str	r2, [r3, #0]
 8000a78:	605a      	str	r2, [r3, #4]
 8000a7a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a7c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a80:	2200      	movs	r2, #0
 8000a82:	601a      	str	r2, [r3, #0]
 8000a84:	605a      	str	r2, [r3, #4]
 8000a86:	609a      	str	r2, [r3, #8]
 8000a88:	60da      	str	r2, [r3, #12]
 8000a8a:	611a      	str	r2, [r3, #16]
 8000a8c:	615a      	str	r2, [r3, #20]
 8000a8e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a90:	463b      	mov	r3, r7
 8000a92:	222c      	movs	r2, #44	@ 0x2c
 8000a94:	2100      	movs	r1, #0
 8000a96:	4618      	mov	r0, r3
 8000a98:	f004 ff7b 	bl	8005992 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a9c:	4b4b      	ldr	r3, [pc, #300]	@ (8000bcc <MX_TIM1_Init+0x180>)
 8000a9e:	4a4c      	ldr	r2, [pc, #304]	@ (8000bd0 <MX_TIM1_Init+0x184>)
 8000aa0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 200;
 8000aa2:	4b4a      	ldr	r3, [pc, #296]	@ (8000bcc <MX_TIM1_Init+0x180>)
 8000aa4:	22c8      	movs	r2, #200	@ 0xc8
 8000aa6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aa8:	4b48      	ldr	r3, [pc, #288]	@ (8000bcc <MX_TIM1_Init+0x180>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 7350;
 8000aae:	4b47      	ldr	r3, [pc, #284]	@ (8000bcc <MX_TIM1_Init+0x180>)
 8000ab0:	f641 42b6 	movw	r2, #7350	@ 0x1cb6
 8000ab4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ab6:	4b45      	ldr	r3, [pc, #276]	@ (8000bcc <MX_TIM1_Init+0x180>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000abc:	4b43      	ldr	r3, [pc, #268]	@ (8000bcc <MX_TIM1_Init+0x180>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac2:	4b42      	ldr	r3, [pc, #264]	@ (8000bcc <MX_TIM1_Init+0x180>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ac8:	4840      	ldr	r0, [pc, #256]	@ (8000bcc <MX_TIM1_Init+0x180>)
 8000aca:	f002 fb97 	bl	80031fc <HAL_TIM_Base_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 8000ad4:	f000 fa12 	bl	8000efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000adc:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ade:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8000ae2:	4619      	mov	r1, r3
 8000ae4:	4839      	ldr	r0, [pc, #228]	@ (8000bcc <MX_TIM1_Init+0x180>)
 8000ae6:	f002 fe63 	bl	80037b0 <HAL_TIM_ConfigClockSource>
 8000aea:	4603      	mov	r3, r0
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 8000af0:	f000 fa04 	bl	8000efc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000af4:	4835      	ldr	r0, [pc, #212]	@ (8000bcc <MX_TIM1_Init+0x180>)
 8000af6:	f002 fbd8 	bl	80032aa <HAL_TIM_PWM_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_TIM1_Init+0xb8>
  {
    Error_Handler();
 8000b00:	f000 f9fc 	bl	8000efc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000b04:	2306      	movs	r3, #6
 8000b06:	657b      	str	r3, [r7, #84]	@ 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000b08:	2310      	movs	r3, #16
 8000b0a:	65bb      	str	r3, [r7, #88]	@ 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000b0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000b10:	4619      	mov	r1, r3
 8000b12:	482e      	ldr	r0, [pc, #184]	@ (8000bcc <MX_TIM1_Init+0x180>)
 8000b14:	f002 ff44 	bl	80039a0 <HAL_TIM_SlaveConfigSynchro>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8000b1e:	f000 f9ed 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b22:	2300      	movs	r3, #0
 8000b24:	64bb      	str	r3, [r7, #72]	@ 0x48
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000b26:	2300      	movs	r3, #0
 8000b28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b2e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000b32:	4619      	mov	r1, r3
 8000b34:	4825      	ldr	r0, [pc, #148]	@ (8000bcc <MX_TIM1_Init+0x180>)
 8000b36:	f003 fc99 	bl	800446c <HAL_TIMEx_MasterConfigSynchronization>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8000b40:	f000 f9dc 	bl	8000efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b44:	2360      	movs	r3, #96	@ 0x60
 8000b46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.Pulse = 10;
 8000b48:	230a      	movs	r3, #10
 8000b4a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b50:	2300      	movs	r3, #0
 8000b52:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b60:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b64:	2200      	movs	r2, #0
 8000b66:	4619      	mov	r1, r3
 8000b68:	4818      	ldr	r0, [pc, #96]	@ (8000bcc <MX_TIM1_Init+0x180>)
 8000b6a:	f002 fd0d 	bl	8003588 <HAL_TIM_PWM_ConfigChannel>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <MX_TIM1_Init+0x12c>
  {
    Error_Handler();
 8000b74:	f000 f9c2 	bl	8000efc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b84:	2300      	movs	r3, #0
 8000b86:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b88:	2300      	movs	r3, #0
 8000b8a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b90:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000b9a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000b9e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ba8:	463b      	mov	r3, r7
 8000baa:	4619      	mov	r1, r3
 8000bac:	4807      	ldr	r0, [pc, #28]	@ (8000bcc <MX_TIM1_Init+0x180>)
 8000bae:	f003 fceb 	bl	8004588 <HAL_TIMEx_ConfigBreakDeadTime>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM1_Init+0x170>
  {
    Error_Handler();
 8000bb8:	f000 f9a0 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */
  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000bbc:	4803      	ldr	r0, [pc, #12]	@ (8000bcc <MX_TIM1_Init+0x180>)
 8000bbe:	f000 fa0b 	bl	8000fd8 <HAL_TIM_MspPostInit>

}
 8000bc2:	bf00      	nop
 8000bc4:	3778      	adds	r7, #120	@ 0x78
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	2400009c 	.word	0x2400009c
 8000bd0:	40010000 	.word	0x40010000

08000bd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b08e      	sub	sp, #56	@ 0x38
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bda:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000bde:	2200      	movs	r2, #0
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	605a      	str	r2, [r3, #4]
 8000be4:	609a      	str	r2, [r3, #8]
 8000be6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000be8:	f107 031c 	add.w	r3, r7, #28
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000bf4:	463b      	mov	r3, r7
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]
 8000c02:	615a      	str	r2, [r3, #20]
 8000c04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c06:	4b2d      	ldr	r3, [pc, #180]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000c08:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000c0e:	4b2b      	ldr	r3, [pc, #172]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c14:	4b29      	ldr	r3, [pc, #164]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99;
 8000c1a:	4b28      	ldr	r3, [pc, #160]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000c1c:	2263      	movs	r2, #99	@ 0x63
 8000c1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c20:	4b26      	ldr	r3, [pc, #152]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c26:	4b25      	ldr	r3, [pc, #148]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c2c:	4823      	ldr	r0, [pc, #140]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000c2e:	f002 fae5 	bl	80031fc <HAL_TIM_Base_Init>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000c38:	f000 f960 	bl	8000efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c3c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c40:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c42:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000c46:	4619      	mov	r1, r3
 8000c48:	481c      	ldr	r0, [pc, #112]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000c4a:	f002 fdb1 	bl	80037b0 <HAL_TIM_ConfigClockSource>
 8000c4e:	4603      	mov	r3, r0
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d001      	beq.n	8000c58 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000c54:	f000 f952 	bl	8000efc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c58:	4818      	ldr	r0, [pc, #96]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000c5a:	f002 fb26 	bl	80032aa <HAL_TIM_PWM_Init>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000c64:	f000 f94a 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000c68:	2320      	movs	r3, #32
 8000c6a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c70:	f107 031c 	add.w	r3, r7, #28
 8000c74:	4619      	mov	r1, r3
 8000c76:	4811      	ldr	r0, [pc, #68]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000c78:	f003 fbf8 	bl	800446c <HAL_TIMEx_MasterConfigSynchronization>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d001      	beq.n	8000c86 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000c82:	f000 f93b 	bl	8000efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000c86:	2360      	movs	r3, #96	@ 0x60
 8000c88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50;
 8000c8a:	2332      	movs	r3, #50	@ 0x32
 8000c8c:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000c8e:	2302      	movs	r3, #2
 8000c90:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c92:	2300      	movs	r3, #0
 8000c94:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000c96:	463b      	mov	r3, r7
 8000c98:	2200      	movs	r2, #0
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4807      	ldr	r0, [pc, #28]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000c9e:	f002 fc73 	bl	8003588 <HAL_TIM_PWM_ConfigChannel>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	d001      	beq.n	8000cac <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000ca8:	f000 f928 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cac:	4803      	ldr	r0, [pc, #12]	@ (8000cbc <MX_TIM2_Init+0xe8>)
 8000cae:	f000 f993 	bl	8000fd8 <HAL_TIM_MspPostInit>

}
 8000cb2:	bf00      	nop
 8000cb4:	3738      	adds	r7, #56	@ 0x38
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	240000e8 	.word	0x240000e8

08000cc0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b094      	sub	sp, #80	@ 0x50
 8000cc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cc6:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000cca:	2200      	movs	r2, #0
 8000ccc:	601a      	str	r2, [r3, #0]
 8000cce:	605a      	str	r2, [r3, #4]
 8000cd0:	609a      	str	r2, [r3, #8]
 8000cd2:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce4:	f107 0320 	add.w	r3, r7, #32
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf0:	1d3b      	adds	r3, r7, #4
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	601a      	str	r2, [r3, #0]
 8000cf6:	605a      	str	r2, [r3, #4]
 8000cf8:	609a      	str	r2, [r3, #8]
 8000cfa:	60da      	str	r2, [r3, #12]
 8000cfc:	611a      	str	r2, [r3, #16]
 8000cfe:	615a      	str	r2, [r3, #20]
 8000d00:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d02:	4b35      	ldr	r3, [pc, #212]	@ (8000dd8 <MX_TIM3_Init+0x118>)
 8000d04:	4a35      	ldr	r2, [pc, #212]	@ (8000ddc <MX_TIM3_Init+0x11c>)
 8000d06:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000d08:	4b33      	ldr	r3, [pc, #204]	@ (8000dd8 <MX_TIM3_Init+0x118>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d0e:	4b32      	ldr	r3, [pc, #200]	@ (8000dd8 <MX_TIM3_Init+0x118>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1999;
 8000d14:	4b30      	ldr	r3, [pc, #192]	@ (8000dd8 <MX_TIM3_Init+0x118>)
 8000d16:	f240 72cf 	movw	r2, #1999	@ 0x7cf
 8000d1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d1c:	4b2e      	ldr	r3, [pc, #184]	@ (8000dd8 <MX_TIM3_Init+0x118>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d22:	4b2d      	ldr	r3, [pc, #180]	@ (8000dd8 <MX_TIM3_Init+0x118>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d28:	482b      	ldr	r0, [pc, #172]	@ (8000dd8 <MX_TIM3_Init+0x118>)
 8000d2a:	f002 fa67 	bl	80031fc <HAL_TIM_Base_Init>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d001      	beq.n	8000d38 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 8000d34:	f000 f8e2 	bl	8000efc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d3c:	643b      	str	r3, [r7, #64]	@ 0x40
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d3e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000d42:	4619      	mov	r1, r3
 8000d44:	4824      	ldr	r0, [pc, #144]	@ (8000dd8 <MX_TIM3_Init+0x118>)
 8000d46:	f002 fd33 	bl	80037b0 <HAL_TIM_ConfigClockSource>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000d50:	f000 f8d4 	bl	8000efc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d54:	4820      	ldr	r0, [pc, #128]	@ (8000dd8 <MX_TIM3_Init+0x118>)
 8000d56:	f002 faa8 	bl	80032aa <HAL_TIM_PWM_Init>
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d001      	beq.n	8000d64 <MX_TIM3_Init+0xa4>
  {
    Error_Handler();
 8000d60:	f000 f8cc 	bl	8000efc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000d64:	2306      	movs	r3, #6
 8000d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000d68:	2310      	movs	r3, #16
 8000d6a:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000d6c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000d70:	4619      	mov	r1, r3
 8000d72:	4819      	ldr	r0, [pc, #100]	@ (8000dd8 <MX_TIM3_Init+0x118>)
 8000d74:	f002 fe14 	bl	80039a0 <HAL_TIM_SlaveConfigSynchro>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM3_Init+0xc2>
  {
    Error_Handler();
 8000d7e:	f000 f8bd 	bl	8000efc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d82:	2300      	movs	r3, #0
 8000d84:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d86:	2300      	movs	r3, #0
 8000d88:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d8a:	f107 0320 	add.w	r3, r7, #32
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4811      	ldr	r0, [pc, #68]	@ (8000dd8 <MX_TIM3_Init+0x118>)
 8000d92:	f003 fb6b 	bl	800446c <HAL_TIMEx_MasterConfigSynchronization>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8000d9c:	f000 f8ae 	bl	8000efc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000da0:	2360      	movs	r3, #96	@ 0x60
 8000da2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 899;
 8000da4:	f240 3383 	movw	r3, #899	@ 0x383
 8000da8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000db2:	1d3b      	adds	r3, r7, #4
 8000db4:	2200      	movs	r2, #0
 8000db6:	4619      	mov	r1, r3
 8000db8:	4807      	ldr	r0, [pc, #28]	@ (8000dd8 <MX_TIM3_Init+0x118>)
 8000dba:	f002 fbe5 	bl	8003588 <HAL_TIM_PWM_ConfigChannel>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <MX_TIM3_Init+0x108>
  {
    Error_Handler();
 8000dc4:	f000 f89a 	bl	8000efc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dc8:	4803      	ldr	r0, [pc, #12]	@ (8000dd8 <MX_TIM3_Init+0x118>)
 8000dca:	f000 f905 	bl	8000fd8 <HAL_TIM_MspPostInit>

}
 8000dce:	bf00      	nop
 8000dd0:	3750      	adds	r7, #80	@ 0x50
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
 8000dd6:	bf00      	nop
 8000dd8:	24000134 	.word	0x24000134
 8000ddc:	40000400 	.word	0x40000400

08000de0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b08a      	sub	sp, #40	@ 0x28
 8000de4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de6:	f107 0314 	add.w	r3, r7, #20
 8000dea:	2200      	movs	r2, #0
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	605a      	str	r2, [r3, #4]
 8000df0:	609a      	str	r2, [r3, #8]
 8000df2:	60da      	str	r2, [r3, #12]
 8000df4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000df6:	4b3d      	ldr	r3, [pc, #244]	@ (8000eec <MX_GPIO_Init+0x10c>)
 8000df8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000dfc:	4a3b      	ldr	r2, [pc, #236]	@ (8000eec <MX_GPIO_Init+0x10c>)
 8000dfe:	f043 0304 	orr.w	r3, r3, #4
 8000e02:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e06:	4b39      	ldr	r3, [pc, #228]	@ (8000eec <MX_GPIO_Init+0x10c>)
 8000e08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e0c:	f003 0304 	and.w	r3, r3, #4
 8000e10:	613b      	str	r3, [r7, #16]
 8000e12:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e14:	4b35      	ldr	r3, [pc, #212]	@ (8000eec <MX_GPIO_Init+0x10c>)
 8000e16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e1a:	4a34      	ldr	r2, [pc, #208]	@ (8000eec <MX_GPIO_Init+0x10c>)
 8000e1c:	f043 0301 	orr.w	r3, r3, #1
 8000e20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e24:	4b31      	ldr	r3, [pc, #196]	@ (8000eec <MX_GPIO_Init+0x10c>)
 8000e26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e32:	4b2e      	ldr	r3, [pc, #184]	@ (8000eec <MX_GPIO_Init+0x10c>)
 8000e34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e38:	4a2c      	ldr	r2, [pc, #176]	@ (8000eec <MX_GPIO_Init+0x10c>)
 8000e3a:	f043 0302 	orr.w	r3, r3, #2
 8000e3e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e42:	4b2a      	ldr	r3, [pc, #168]	@ (8000eec <MX_GPIO_Init+0x10c>)
 8000e44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e48:	f003 0302 	and.w	r3, r3, #2
 8000e4c:	60bb      	str	r3, [r7, #8]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e50:	4b26      	ldr	r3, [pc, #152]	@ (8000eec <MX_GPIO_Init+0x10c>)
 8000e52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e56:	4a25      	ldr	r2, [pc, #148]	@ (8000eec <MX_GPIO_Init+0x10c>)
 8000e58:	f043 0310 	orr.w	r3, r3, #16
 8000e5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000e60:	4b22      	ldr	r3, [pc, #136]	@ (8000eec <MX_GPIO_Init+0x10c>)
 8000e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000e66:	f003 0310 	and.w	r3, r3, #16
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e74:	481e      	ldr	r0, [pc, #120]	@ (8000ef0 <MX_GPIO_Init+0x110>)
 8000e76:	f000 fe61 	bl	8001b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8000e7a:	2200      	movs	r2, #0
 8000e7c:	2101      	movs	r1, #1
 8000e7e:	481d      	ldr	r0, [pc, #116]	@ (8000ef4 <MX_GPIO_Init+0x114>)
 8000e80:	f000 fe5c 	bl	8001b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_1, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	2102      	movs	r1, #2
 8000e88:	481b      	ldr	r0, [pc, #108]	@ (8000ef8 <MX_GPIO_Init+0x118>)
 8000e8a:	f000 fe57 	bl	8001b3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e8e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4812      	ldr	r0, [pc, #72]	@ (8000ef0 <MX_GPIO_Init+0x110>)
 8000ea8:	f000 fc98 	bl	80017dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eac:	2301      	movs	r3, #1
 8000eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480c      	ldr	r0, [pc, #48]	@ (8000ef4 <MX_GPIO_Init+0x114>)
 8000ec4:	f000 fc8a 	bl	80017dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PE1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000ed8:	f107 0314 	add.w	r3, r7, #20
 8000edc:	4619      	mov	r1, r3
 8000ede:	4806      	ldr	r0, [pc, #24]	@ (8000ef8 <MX_GPIO_Init+0x118>)
 8000ee0:	f000 fc7c 	bl	80017dc <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ee4:	bf00      	nop
 8000ee6:	3728      	adds	r7, #40	@ 0x28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	58024400 	.word	0x58024400
 8000ef0:	58020800 	.word	0x58020800
 8000ef4:	58020400 	.word	0x58020400
 8000ef8:	58021000 	.word	0x58021000

08000efc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f00:	b672      	cpsid	i
}
 8000f02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f04:	bf00      	nop
 8000f06:	e7fd      	b.n	8000f04 <Error_Handler+0x8>

08000f08 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b083      	sub	sp, #12
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f0e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f38 <HAL_MspInit+0x30>)
 8000f10:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f14:	4a08      	ldr	r2, [pc, #32]	@ (8000f38 <HAL_MspInit+0x30>)
 8000f16:	f043 0302 	orr.w	r3, r3, #2
 8000f1a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000f1e:	4b06      	ldr	r3, [pc, #24]	@ (8000f38 <HAL_MspInit+0x30>)
 8000f20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000f24:	f003 0302 	and.w	r3, r3, #2
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f2c:	bf00      	nop
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	58024400 	.word	0x58024400

08000f3c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b087      	sub	sp, #28
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a20      	ldr	r2, [pc, #128]	@ (8000fcc <HAL_TIM_Base_MspInit+0x90>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d10f      	bne.n	8000f6e <HAL_TIM_Base_MspInit+0x32>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f4e:	4b20      	ldr	r3, [pc, #128]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x94>)
 8000f50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f54:	4a1e      	ldr	r2, [pc, #120]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x94>)
 8000f56:	f043 0301 	orr.w	r3, r3, #1
 8000f5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x94>)
 8000f60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000f64:	f003 0301 	and.w	r3, r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM3_MspInit 1 */

    /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f6c:	e028      	b.n	8000fc0 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM2)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000f76:	d10f      	bne.n	8000f98 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f78:	4b15      	ldr	r3, [pc, #84]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x94>)
 8000f7a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f7e:	4a14      	ldr	r2, [pc, #80]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x94>)
 8000f80:	f043 0301 	orr.w	r3, r3, #1
 8000f84:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000f88:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x94>)
 8000f8a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
}
 8000f96:	e013      	b.n	8000fc0 <HAL_TIM_Base_MspInit+0x84>
  else if(htim_base->Instance==TIM3)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000fd4 <HAL_TIM_Base_MspInit+0x98>)
 8000f9e:	4293      	cmp	r3, r2
 8000fa0:	d10e      	bne.n	8000fc0 <HAL_TIM_Base_MspInit+0x84>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fa2:	4b0b      	ldr	r3, [pc, #44]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x94>)
 8000fa4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fa8:	4a09      	ldr	r2, [pc, #36]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x94>)
 8000faa:	f043 0302 	orr.w	r3, r3, #2
 8000fae:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8000fb2:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <HAL_TIM_Base_MspInit+0x94>)
 8000fb4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8000fb8:	f003 0302 	and.w	r3, r3, #2
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	bf00      	nop
 8000fc2:	371c      	adds	r7, #28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr
 8000fcc:	40010000 	.word	0x40010000
 8000fd0:	58024400 	.word	0x58024400
 8000fd4:	40000400 	.word	0x40000400

08000fd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08a      	sub	sp, #40	@ 0x28
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe0:	f107 0314 	add.w	r3, r7, #20
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a38      	ldr	r2, [pc, #224]	@ (80010d8 <HAL_TIM_MspPostInit+0x100>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d120      	bne.n	800103c <HAL_TIM_MspPostInit+0x64>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	4b38      	ldr	r3, [pc, #224]	@ (80010dc <HAL_TIM_MspPostInit+0x104>)
 8000ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001000:	4a36      	ldr	r2, [pc, #216]	@ (80010dc <HAL_TIM_MspPostInit+0x104>)
 8001002:	f043 0301 	orr.w	r3, r3, #1
 8001006:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800100a:	4b34      	ldr	r3, [pc, #208]	@ (80010dc <HAL_TIM_MspPostInit+0x104>)
 800100c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001010:	f003 0301 	and.w	r3, r3, #1
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001018:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800101c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101e:	2302      	movs	r3, #2
 8001020:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001022:	2300      	movs	r3, #0
 8001024:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001026:	2300      	movs	r3, #0
 8001028:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800102a:	2301      	movs	r3, #1
 800102c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102e:	f107 0314 	add.w	r3, r7, #20
 8001032:	4619      	mov	r1, r3
 8001034:	482a      	ldr	r0, [pc, #168]	@ (80010e0 <HAL_TIM_MspPostInit+0x108>)
 8001036:	f000 fbd1 	bl	80017dc <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM3_MspPostInit 1 */

    /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800103a:	e048      	b.n	80010ce <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM2)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001044:	d11f      	bne.n	8001086 <HAL_TIM_MspPostInit+0xae>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	4b25      	ldr	r3, [pc, #148]	@ (80010dc <HAL_TIM_MspPostInit+0x104>)
 8001048:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800104c:	4a23      	ldr	r2, [pc, #140]	@ (80010dc <HAL_TIM_MspPostInit+0x104>)
 800104e:	f043 0301 	orr.w	r3, r3, #1
 8001052:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001056:	4b21      	ldr	r3, [pc, #132]	@ (80010dc <HAL_TIM_MspPostInit+0x104>)
 8001058:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800105c:	f003 0301 	and.w	r3, r3, #1
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001064:	2301      	movs	r3, #1
 8001066:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001068:	2302      	movs	r3, #2
 800106a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800106c:	2300      	movs	r3, #0
 800106e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001070:	2300      	movs	r3, #0
 8001072:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001074:	2301      	movs	r3, #1
 8001076:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	4619      	mov	r1, r3
 800107e:	4818      	ldr	r0, [pc, #96]	@ (80010e0 <HAL_TIM_MspPostInit+0x108>)
 8001080:	f000 fbac 	bl	80017dc <HAL_GPIO_Init>
}
 8001084:	e023      	b.n	80010ce <HAL_TIM_MspPostInit+0xf6>
  else if(htim->Instance==TIM3)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a16      	ldr	r2, [pc, #88]	@ (80010e4 <HAL_TIM_MspPostInit+0x10c>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d11e      	bne.n	80010ce <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <HAL_TIM_MspPostInit+0x104>)
 8001092:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001096:	4a11      	ldr	r2, [pc, #68]	@ (80010dc <HAL_TIM_MspPostInit+0x104>)
 8001098:	f043 0301 	orr.w	r3, r3, #1
 800109c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010a0:	4b0e      	ldr	r3, [pc, #56]	@ (80010dc <HAL_TIM_MspPostInit+0x104>)
 80010a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60bb      	str	r3, [r7, #8]
 80010ac:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80010ae:	2340      	movs	r3, #64	@ 0x40
 80010b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b2:	2302      	movs	r3, #2
 80010b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010b6:	2300      	movs	r3, #0
 80010b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ba:	2300      	movs	r3, #0
 80010bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80010be:	2302      	movs	r3, #2
 80010c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010c2:	f107 0314 	add.w	r3, r7, #20
 80010c6:	4619      	mov	r1, r3
 80010c8:	4805      	ldr	r0, [pc, #20]	@ (80010e0 <HAL_TIM_MspPostInit+0x108>)
 80010ca:	f000 fb87 	bl	80017dc <HAL_GPIO_Init>
}
 80010ce:	bf00      	nop
 80010d0:	3728      	adds	r7, #40	@ 0x28
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	40010000 	.word	0x40010000
 80010dc:	58024400 	.word	0x58024400
 80010e0:	58020000 	.word	0x58020000
 80010e4:	40000400 	.word	0x40000400

080010e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <NMI_Handler+0x4>

080010f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010f4:	bf00      	nop
 80010f6:	e7fd      	b.n	80010f4 <HardFault_Handler+0x4>

080010f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010fc:	bf00      	nop
 80010fe:	e7fd      	b.n	80010fc <MemManage_Handler+0x4>

08001100 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <BusFault_Handler+0x4>

08001108 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800110c:	bf00      	nop
 800110e:	e7fd      	b.n	800110c <UsageFault_Handler+0x4>

08001110 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800113a:	b580      	push	{r7, lr}
 800113c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800113e:	f000 fa19 	bl	8001574 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001142:	bf00      	nop
 8001144:	bd80      	pop	{r7, pc}

08001146 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001146:	b580      	push	{r7, lr}
 8001148:	b086      	sub	sp, #24
 800114a:	af00      	add	r7, sp, #0
 800114c:	60f8      	str	r0, [r7, #12]
 800114e:	60b9      	str	r1, [r7, #8]
 8001150:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
 8001156:	e00a      	b.n	800116e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001158:	f3af 8000 	nop.w
 800115c:	4601      	mov	r1, r0
 800115e:	68bb      	ldr	r3, [r7, #8]
 8001160:	1c5a      	adds	r2, r3, #1
 8001162:	60ba      	str	r2, [r7, #8]
 8001164:	b2ca      	uxtb	r2, r1
 8001166:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	3301      	adds	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	697a      	ldr	r2, [r7, #20]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	429a      	cmp	r2, r3
 8001174:	dbf0      	blt.n	8001158 <_read+0x12>
  }

  return len;
 8001176:	687b      	ldr	r3, [r7, #4]
}
 8001178:	4618      	mov	r0, r3
 800117a:	3718      	adds	r7, #24
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}

08001180 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b086      	sub	sp, #24
 8001184:	af00      	add	r7, sp, #0
 8001186:	60f8      	str	r0, [r7, #12]
 8001188:	60b9      	str	r1, [r7, #8]
 800118a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800118c:	2300      	movs	r3, #0
 800118e:	617b      	str	r3, [r7, #20]
 8001190:	e009      	b.n	80011a6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	1c5a      	adds	r2, r3, #1
 8001196:	60ba      	str	r2, [r7, #8]
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	4618      	mov	r0, r3
 800119c:	f000 f904 	bl	80013a8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a0:	697b      	ldr	r3, [r7, #20]
 80011a2:	3301      	adds	r3, #1
 80011a4:	617b      	str	r3, [r7, #20]
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	429a      	cmp	r2, r3
 80011ac:	dbf1      	blt.n	8001192 <_write+0x12>
  }
  return len;
 80011ae:	687b      	ldr	r3, [r7, #4]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	3718      	adds	r7, #24
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <_close>:

int _close(int file)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80011c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr

080011d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
 80011d8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80011e0:	605a      	str	r2, [r3, #4]
  return 0;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <_isatty>:

int _isatty(int file)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b083      	sub	sp, #12
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80011f8:	2301      	movs	r3, #1
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr

08001206 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001206:	b480      	push	{r7}
 8001208:	b085      	sub	sp, #20
 800120a:	af00      	add	r7, sp, #0
 800120c:	60f8      	str	r0, [r7, #12]
 800120e:	60b9      	str	r1, [r7, #8]
 8001210:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001212:	2300      	movs	r3, #0
}
 8001214:	4618      	mov	r0, r3
 8001216:	3714      	adds	r7, #20
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr

08001220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001228:	4a14      	ldr	r2, [pc, #80]	@ (800127c <_sbrk+0x5c>)
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <_sbrk+0x60>)
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001234:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <_sbrk+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800123c:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <_sbrk+0x64>)
 800123e:	4a12      	ldr	r2, [pc, #72]	@ (8001288 <_sbrk+0x68>)
 8001240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	429a      	cmp	r2, r3
 800124e:	d207      	bcs.n	8001260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001250:	f004 fbee 	bl	8005a30 <__errno>
 8001254:	4603      	mov	r3, r0
 8001256:	220c      	movs	r2, #12
 8001258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	e009      	b.n	8001274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001260:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001266:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <_sbrk+0x64>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	4a05      	ldr	r2, [pc, #20]	@ (8001284 <_sbrk+0x64>)
 8001270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001272:	68fb      	ldr	r3, [r7, #12]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	24080000 	.word	0x24080000
 8001280:	00000400 	.word	0x00000400
 8001284:	24000180 	.word	0x24000180
 8001288:	24000370 	.word	0x24000370

0800128c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800128c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 80012c8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8001290:	f7ff faba 	bl	8000808 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8001294:	f7ff fa0a 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001298:	480c      	ldr	r0, [pc, #48]	@ (80012cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800129a:	490d      	ldr	r1, [pc, #52]	@ (80012d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800129c:	4a0d      	ldr	r2, [pc, #52]	@ (80012d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800129e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012a0:	e002      	b.n	80012a8 <LoopCopyDataInit>

080012a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012a6:	3304      	adds	r3, #4

080012a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012ac:	d3f9      	bcc.n	80012a2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ae:	4a0a      	ldr	r2, [pc, #40]	@ (80012d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80012b0:	4c0a      	ldr	r4, [pc, #40]	@ (80012dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80012b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012b4:	e001      	b.n	80012ba <LoopFillZerobss>

080012b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012b8:	3204      	adds	r2, #4

080012ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012bc:	d3fb      	bcc.n	80012b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012be:	f004 fbbd 	bl	8005a3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012c2:	f7ff fab9 	bl	8000838 <main>
  bx  lr
 80012c6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012c8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80012cc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80012d0:	24000070 	.word	0x24000070
  ldr r2, =_sidata
 80012d4:	08006650 	.word	0x08006650
  ldr r2, =_sbss
 80012d8:	24000070 	.word	0x24000070
  ldr r4, =_ebss
 80012dc:	2400036c 	.word	0x2400036c

080012e0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012e0:	e7fe      	b.n	80012e0 <ADC3_IRQHandler>
	...

080012e4 <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	60fb      	str	r3, [r7, #12]

  if(COM >= COMn)
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d003      	beq.n	8001302 <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80012fa:	f06f 0301 	mvn.w	r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	e018      	b.n	8001334 <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	2294      	movs	r2, #148	@ 0x94
 8001306:	fb02 f303 	mul.w	r3, r2, r3
 800130a:	4a0d      	ldr	r2, [pc, #52]	@ (8001340 <BSP_COM_Init+0x5c>)
 800130c:	4413      	add	r3, r2
 800130e:	4618      	mov	r0, r3
 8001310:	f000 f866 	bl	80013e0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_USART3_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	2294      	movs	r2, #148	@ 0x94
 8001318:	fb02 f303 	mul.w	r3, r2, r3
 800131c:	4a08      	ldr	r2, [pc, #32]	@ (8001340 <BSP_COM_Init+0x5c>)
 800131e:	4413      	add	r3, r2
 8001320:	6839      	ldr	r1, [r7, #0]
 8001322:	4618      	mov	r0, r3
 8001324:	f000 f80e 	bl	8001344 <MX_USART3_Init>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <BSP_COM_Init+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800132e:	f06f 0303 	mvn.w	r3, #3
 8001332:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8001334:	68fb      	ldr	r3, [r7, #12]
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	24000184 	.word	0x24000184

08001344 <MX_USART3_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_USART3_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 800134e:	4b15      	ldr	r3, [pc, #84]	@ (80013a4 <MX_USART3_Init+0x60>)
 8001350:	681a      	ldr	r2, [r3, #0]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	220c      	movs	r2, #12
 8001362:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	895b      	ldrh	r3, [r3, #10]
 8001368:	461a      	mov	r2, r3
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = (uint32_t)COM_Init->WordLength;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685a      	ldr	r2, [r3, #4]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	891b      	ldrh	r3, [r3, #8]
 800137a:	461a      	mov	r2, r3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	899b      	ldrh	r3, [r3, #12]
 8001384:	461a      	mov	r2, r3
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001390:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f003 f976 	bl	8004684 <HAL_UART_Init>
 8001398:	4603      	mov	r3, r0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	bf00      	nop
 80013a4:	24000008 	.word	0x24000008

080013a8 <__io_putchar>:
 #ifdef __GNUC__
 int __io_putchar (int ch)
 #else
 int fputc (int ch, FILE *f)
 #endif /* __GNUC__ */
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit (&hcom_uart [COM_ActiveLogPort], (uint8_t *) &ch, 1, COM_POLL_TIMEOUT);
 80013b0:	4b09      	ldr	r3, [pc, #36]	@ (80013d8 <__io_putchar+0x30>)
 80013b2:	781b      	ldrb	r3, [r3, #0]
 80013b4:	461a      	mov	r2, r3
 80013b6:	2394      	movs	r3, #148	@ 0x94
 80013b8:	fb02 f303 	mul.w	r3, r2, r3
 80013bc:	4a07      	ldr	r2, [pc, #28]	@ (80013dc <__io_putchar+0x34>)
 80013be:	1898      	adds	r0, r3, r2
 80013c0:	1d39      	adds	r1, r7, #4
 80013c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013c6:	2201      	movs	r2, #1
 80013c8:	f003 f9b6 	bl	8004738 <HAL_UART_Transmit>
  return ch;
 80013cc:	687b      	ldr	r3, [r7, #4]
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	24000218 	.word	0x24000218
 80013dc:	24000184 	.word	0x24000184

080013e0 <COM1_MspInit>:
  * @brief  Initializes UART MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	@ 0x28
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80013e8:	4b27      	ldr	r3, [pc, #156]	@ (8001488 <COM1_MspInit+0xa8>)
 80013ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013ee:	4a26      	ldr	r2, [pc, #152]	@ (8001488 <COM1_MspInit+0xa8>)
 80013f0:	f043 0308 	orr.w	r3, r3, #8
 80013f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80013f8:	4b23      	ldr	r3, [pc, #140]	@ (8001488 <COM1_MspInit+0xa8>)
 80013fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fe:	f003 0308 	and.w	r3, r3, #8
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 8001406:	4b20      	ldr	r3, [pc, #128]	@ (8001488 <COM1_MspInit+0xa8>)
 8001408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800140c:	4a1e      	ldr	r2, [pc, #120]	@ (8001488 <COM1_MspInit+0xa8>)
 800140e:	f043 0308 	orr.w	r3, r3, #8
 8001412:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001416:	4b1c      	ldr	r3, [pc, #112]	@ (8001488 <COM1_MspInit+0xa8>)
 8001418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800141c:	f003 0308 	and.w	r3, r3, #8
 8001420:	60fb      	str	r3, [r7, #12]
 8001422:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 8001424:	4b18      	ldr	r3, [pc, #96]	@ (8001488 <COM1_MspInit+0xa8>)
 8001426:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800142a:	4a17      	ldr	r2, [pc, #92]	@ (8001488 <COM1_MspInit+0xa8>)
 800142c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001430:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001434:	4b14      	ldr	r3, [pc, #80]	@ (8001488 <COM1_MspInit+0xa8>)
 8001436:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800143a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin = COM1_TX_PIN;
 8001442:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001446:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001448:	2302      	movs	r3, #2
 800144a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800144c:	2302      	movs	r3, #2
 800144e:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull = GPIO_PULLUP;
 8001450:	2301      	movs	r3, #1
 8001452:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001454:	2307      	movs	r3, #7
 8001456:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4619      	mov	r1, r3
 800145e:	480b      	ldr	r0, [pc, #44]	@ (800148c <COM1_MspInit+0xac>)
 8001460:	f000 f9bc 	bl	80017dc <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001464:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001468:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800146a:	2302      	movs	r3, #2
 800146c:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800146e:	2307      	movs	r3, #7
 8001470:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 8001472:	f107 0314 	add.w	r3, r7, #20
 8001476:	4619      	mov	r1, r3
 8001478:	4804      	ldr	r0, [pc, #16]	@ (800148c <COM1_MspInit+0xac>)
 800147a:	f000 f9af 	bl	80017dc <HAL_GPIO_Init>
}
 800147e:	bf00      	nop
 8001480:	3728      	adds	r7, #40	@ 0x28
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	58024400 	.word	0x58024400
 800148c:	58020c00 	.word	0x58020c00

08001490 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b082      	sub	sp, #8
 8001494:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001496:	2003      	movs	r0, #3
 8001498:	f000 f96e 	bl	8001778 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800149c:	f001 fa1a 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 80014a0:	4602      	mov	r2, r0
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <HAL_Init+0x68>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	0a1b      	lsrs	r3, r3, #8
 80014a8:	f003 030f 	and.w	r3, r3, #15
 80014ac:	4913      	ldr	r1, [pc, #76]	@ (80014fc <HAL_Init+0x6c>)
 80014ae:	5ccb      	ldrb	r3, [r1, r3]
 80014b0:	f003 031f 	and.w	r3, r3, #31
 80014b4:	fa22 f303 	lsr.w	r3, r2, r3
 80014b8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80014ba:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <HAL_Init+0x68>)
 80014bc:	699b      	ldr	r3, [r3, #24]
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	4a0e      	ldr	r2, [pc, #56]	@ (80014fc <HAL_Init+0x6c>)
 80014c4:	5cd3      	ldrb	r3, [r2, r3]
 80014c6:	f003 031f 	and.w	r3, r3, #31
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	fa22 f303 	lsr.w	r3, r2, r3
 80014d0:	4a0b      	ldr	r2, [pc, #44]	@ (8001500 <HAL_Init+0x70>)
 80014d2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80014d4:	4a0b      	ldr	r2, [pc, #44]	@ (8001504 <HAL_Init+0x74>)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80014da:	2000      	movs	r0, #0
 80014dc:	f000 f814 	bl	8001508 <HAL_InitTick>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e002      	b.n	80014f0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80014ea:	f7ff fd0d 	bl	8000f08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80014ee:	2300      	movs	r3, #0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	3708      	adds	r7, #8
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	58024400 	.word	0x58024400
 80014fc:	080065e4 	.word	0x080065e4
 8001500:	24000004 	.word	0x24000004
 8001504:	24000000 	.word	0x24000000

08001508 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001510:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <HAL_InitTick+0x60>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d101      	bne.n	800151c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e021      	b.n	8001560 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800151c:	4b13      	ldr	r3, [pc, #76]	@ (800156c <HAL_InitTick+0x64>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <HAL_InitTick+0x60>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	4619      	mov	r1, r3
 8001526:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800152a:	fbb3 f3f1 	udiv	r3, r3, r1
 800152e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f945 	bl	80017c2 <HAL_SYSTICK_Config>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800153e:	2301      	movs	r3, #1
 8001540:	e00e      	b.n	8001560 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	2b0f      	cmp	r3, #15
 8001546:	d80a      	bhi.n	800155e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001548:	2200      	movs	r2, #0
 800154a:	6879      	ldr	r1, [r7, #4]
 800154c:	f04f 30ff 	mov.w	r0, #4294967295
 8001550:	f000 f91d 	bl	800178e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001554:	4a06      	ldr	r2, [pc, #24]	@ (8001570 <HAL_InitTick+0x68>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800155a:	2300      	movs	r3, #0
 800155c:	e000      	b.n	8001560 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
}
 8001560:	4618      	mov	r0, r3
 8001562:	3708      	adds	r7, #8
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	24000010 	.word	0x24000010
 800156c:	24000000 	.word	0x24000000
 8001570:	2400000c 	.word	0x2400000c

08001574 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001578:	4b06      	ldr	r3, [pc, #24]	@ (8001594 <HAL_IncTick+0x20>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	461a      	mov	r2, r3
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_IncTick+0x24>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4413      	add	r3, r2
 8001584:	4a04      	ldr	r2, [pc, #16]	@ (8001598 <HAL_IncTick+0x24>)
 8001586:	6013      	str	r3, [r2, #0]
}
 8001588:	bf00      	nop
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	24000010 	.word	0x24000010
 8001598:	2400021c 	.word	0x2400021c

0800159c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return uwTick;
 80015a0:	4b03      	ldr	r3, [pc, #12]	@ (80015b0 <HAL_GetTick+0x14>)
 80015a2:	681b      	ldr	r3, [r3, #0]
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	2400021c 	.word	0x2400021c

080015b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015bc:	f7ff ffee 	bl	800159c <HAL_GetTick>
 80015c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015cc:	d005      	beq.n	80015da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015ce:	4b0a      	ldr	r3, [pc, #40]	@ (80015f8 <HAL_Delay+0x44>)
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	461a      	mov	r2, r3
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4413      	add	r3, r2
 80015d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80015da:	bf00      	nop
 80015dc:	f7ff ffde 	bl	800159c <HAL_GetTick>
 80015e0:	4602      	mov	r2, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1ad3      	subs	r3, r2, r3
 80015e6:	68fa      	ldr	r2, [r7, #12]
 80015e8:	429a      	cmp	r2, r3
 80015ea:	d8f7      	bhi.n	80015dc <HAL_Delay+0x28>
  {
  }
}
 80015ec:	bf00      	nop
 80015ee:	bf00      	nop
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	24000010 	.word	0x24000010

080015fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001600:	4b03      	ldr	r3, [pc, #12]	@ (8001610 <HAL_GetREVID+0x14>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	0c1b      	lsrs	r3, r3, #16
}
 8001606:	4618      	mov	r0, r3
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr
 8001610:	5c001000 	.word	0x5c001000

08001614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b480      	push	{r7}
 8001616:	b085      	sub	sp, #20
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	f003 0307 	and.w	r3, r3, #7
 8001622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001624:	4b0b      	ldr	r3, [pc, #44]	@ (8001654 <__NVIC_SetPriorityGrouping+0x40>)
 8001626:	68db      	ldr	r3, [r3, #12]
 8001628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001630:	4013      	ands	r3, r2
 8001632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800163c:	4b06      	ldr	r3, [pc, #24]	@ (8001658 <__NVIC_SetPriorityGrouping+0x44>)
 800163e:	4313      	orrs	r3, r2
 8001640:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001642:	4a04      	ldr	r2, [pc, #16]	@ (8001654 <__NVIC_SetPriorityGrouping+0x40>)
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	60d3      	str	r3, [r2, #12]
}
 8001648:	bf00      	nop
 800164a:	3714      	adds	r7, #20
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	e000ed00 	.word	0xe000ed00
 8001658:	05fa0000 	.word	0x05fa0000

0800165c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001660:	4b04      	ldr	r3, [pc, #16]	@ (8001674 <__NVIC_GetPriorityGrouping+0x18>)
 8001662:	68db      	ldr	r3, [r3, #12]
 8001664:	0a1b      	lsrs	r3, r3, #8
 8001666:	f003 0307 	and.w	r3, r3, #7
}
 800166a:	4618      	mov	r0, r3
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000ed00 	.word	0xe000ed00

08001678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001678:	b480      	push	{r7}
 800167a:	b083      	sub	sp, #12
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	6039      	str	r1, [r7, #0]
 8001682:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001684:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001688:	2b00      	cmp	r3, #0
 800168a:	db0a      	blt.n	80016a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	b2da      	uxtb	r2, r3
 8001690:	490c      	ldr	r1, [pc, #48]	@ (80016c4 <__NVIC_SetPriority+0x4c>)
 8001692:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001696:	0112      	lsls	r2, r2, #4
 8001698:	b2d2      	uxtb	r2, r2
 800169a:	440b      	add	r3, r1
 800169c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80016a0:	e00a      	b.n	80016b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4908      	ldr	r1, [pc, #32]	@ (80016c8 <__NVIC_SetPriority+0x50>)
 80016a8:	88fb      	ldrh	r3, [r7, #6]
 80016aa:	f003 030f 	and.w	r3, r3, #15
 80016ae:	3b04      	subs	r3, #4
 80016b0:	0112      	lsls	r2, r2, #4
 80016b2:	b2d2      	uxtb	r2, r2
 80016b4:	440b      	add	r3, r1
 80016b6:	761a      	strb	r2, [r3, #24]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr
 80016c4:	e000e100 	.word	0xe000e100
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b089      	sub	sp, #36	@ 0x24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	60f8      	str	r0, [r7, #12]
 80016d4:	60b9      	str	r1, [r7, #8]
 80016d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f003 0307 	and.w	r3, r3, #7
 80016de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	f1c3 0307 	rsb	r3, r3, #7
 80016e6:	2b04      	cmp	r3, #4
 80016e8:	bf28      	it	cs
 80016ea:	2304      	movcs	r3, #4
 80016ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ee:	69fb      	ldr	r3, [r7, #28]
 80016f0:	3304      	adds	r3, #4
 80016f2:	2b06      	cmp	r3, #6
 80016f4:	d902      	bls.n	80016fc <NVIC_EncodePriority+0x30>
 80016f6:	69fb      	ldr	r3, [r7, #28]
 80016f8:	3b03      	subs	r3, #3
 80016fa:	e000      	b.n	80016fe <NVIC_EncodePriority+0x32>
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001700:	f04f 32ff 	mov.w	r2, #4294967295
 8001704:	69bb      	ldr	r3, [r7, #24]
 8001706:	fa02 f303 	lsl.w	r3, r2, r3
 800170a:	43da      	mvns	r2, r3
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	401a      	ands	r2, r3
 8001710:	697b      	ldr	r3, [r7, #20]
 8001712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001714:	f04f 31ff 	mov.w	r1, #4294967295
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	fa01 f303 	lsl.w	r3, r1, r3
 800171e:	43d9      	mvns	r1, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001724:	4313      	orrs	r3, r2
         );
}
 8001726:	4618      	mov	r0, r3
 8001728:	3724      	adds	r7, #36	@ 0x24
 800172a:	46bd      	mov	sp, r7
 800172c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001730:	4770      	bx	lr
	...

08001734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	3b01      	subs	r3, #1
 8001740:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001744:	d301      	bcc.n	800174a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001746:	2301      	movs	r3, #1
 8001748:	e00f      	b.n	800176a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800174a:	4a0a      	ldr	r2, [pc, #40]	@ (8001774 <SysTick_Config+0x40>)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	3b01      	subs	r3, #1
 8001750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001752:	210f      	movs	r1, #15
 8001754:	f04f 30ff 	mov.w	r0, #4294967295
 8001758:	f7ff ff8e 	bl	8001678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800175c:	4b05      	ldr	r3, [pc, #20]	@ (8001774 <SysTick_Config+0x40>)
 800175e:	2200      	movs	r2, #0
 8001760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001762:	4b04      	ldr	r3, [pc, #16]	@ (8001774 <SysTick_Config+0x40>)
 8001764:	2207      	movs	r2, #7
 8001766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001768:	2300      	movs	r3, #0
}
 800176a:	4618      	mov	r0, r3
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	e000e010 	.word	0xe000e010

08001778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b082      	sub	sp, #8
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ff47 	bl	8001614 <__NVIC_SetPriorityGrouping>
}
 8001786:	bf00      	nop
 8001788:	3708      	adds	r7, #8
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800178e:	b580      	push	{r7, lr}
 8001790:	b086      	sub	sp, #24
 8001792:	af00      	add	r7, sp, #0
 8001794:	4603      	mov	r3, r0
 8001796:	60b9      	str	r1, [r7, #8]
 8001798:	607a      	str	r2, [r7, #4]
 800179a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800179c:	f7ff ff5e 	bl	800165c <__NVIC_GetPriorityGrouping>
 80017a0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	68b9      	ldr	r1, [r7, #8]
 80017a6:	6978      	ldr	r0, [r7, #20]
 80017a8:	f7ff ff90 	bl	80016cc <NVIC_EncodePriority>
 80017ac:	4602      	mov	r2, r0
 80017ae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80017b2:	4611      	mov	r1, r2
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff ff5f 	bl	8001678 <__NVIC_SetPriority>
}
 80017ba:	bf00      	nop
 80017bc:	3718      	adds	r7, #24
 80017be:	46bd      	mov	sp, r7
 80017c0:	bd80      	pop	{r7, pc}

080017c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017c2:	b580      	push	{r7, lr}
 80017c4:	b082      	sub	sp, #8
 80017c6:	af00      	add	r7, sp, #0
 80017c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f7ff ffb2 	bl	8001734 <SysTick_Config>
 80017d0:	4603      	mov	r3, r0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80017dc:	b480      	push	{r7}
 80017de:	b089      	sub	sp, #36	@ 0x24
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
 80017e4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80017e6:	2300      	movs	r3, #0
 80017e8:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 80017ea:	4b89      	ldr	r3, [pc, #548]	@ (8001a10 <HAL_GPIO_Init+0x234>)
 80017ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80017ee:	e194      	b.n	8001b1a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80017f0:	683b      	ldr	r3, [r7, #0]
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	2101      	movs	r1, #1
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	fa01 f303 	lsl.w	r3, r1, r3
 80017fc:	4013      	ands	r3, r2
 80017fe:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	2b00      	cmp	r3, #0
 8001804:	f000 8186 	beq.w	8001b14 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f003 0303 	and.w	r3, r3, #3
 8001810:	2b01      	cmp	r3, #1
 8001812:	d005      	beq.n	8001820 <HAL_GPIO_Init+0x44>
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d130      	bne.n	8001882 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	2203      	movs	r2, #3
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	68da      	ldr	r2, [r3, #12]
 800183c:	69fb      	ldr	r3, [r7, #28]
 800183e:	005b      	lsls	r3, r3, #1
 8001840:	fa02 f303 	lsl.w	r3, r2, r3
 8001844:	69ba      	ldr	r2, [r7, #24]
 8001846:	4313      	orrs	r3, r2
 8001848:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001856:	2201      	movs	r2, #1
 8001858:	69fb      	ldr	r3, [r7, #28]
 800185a:	fa02 f303 	lsl.w	r3, r2, r3
 800185e:	43db      	mvns	r3, r3
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	4013      	ands	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685b      	ldr	r3, [r3, #4]
 800186a:	091b      	lsrs	r3, r3, #4
 800186c:	f003 0201 	and.w	r2, r3, #1
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4313      	orrs	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	69ba      	ldr	r2, [r7, #24]
 8001880:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001882:	683b      	ldr	r3, [r7, #0]
 8001884:	685b      	ldr	r3, [r3, #4]
 8001886:	f003 0303 	and.w	r3, r3, #3
 800188a:	2b03      	cmp	r3, #3
 800188c:	d017      	beq.n	80018be <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	005b      	lsls	r3, r3, #1
 8001898:	2203      	movs	r2, #3
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	69ba      	ldr	r2, [r7, #24]
 80018a2:	4013      	ands	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	69fb      	ldr	r3, [r7, #28]
 80018ac:	005b      	lsls	r3, r3, #1
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	69ba      	ldr	r2, [r7, #24]
 80018b4:	4313      	orrs	r3, r2
 80018b6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	685b      	ldr	r3, [r3, #4]
 80018c2:	f003 0303 	and.w	r3, r3, #3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d123      	bne.n	8001912 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018ca:	69fb      	ldr	r3, [r7, #28]
 80018cc:	08da      	lsrs	r2, r3, #3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	3208      	adds	r2, #8
 80018d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	220f      	movs	r2, #15
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	43db      	mvns	r3, r3
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	4013      	ands	r3, r2
 80018ec:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80018ee:	683b      	ldr	r3, [r7, #0]
 80018f0:	691a      	ldr	r2, [r3, #16]
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	f003 0307 	and.w	r3, r3, #7
 80018f8:	009b      	lsls	r3, r3, #2
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4313      	orrs	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	08da      	lsrs	r2, r3, #3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3208      	adds	r2, #8
 800190c:	69b9      	ldr	r1, [r7, #24]
 800190e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001918:	69fb      	ldr	r3, [r7, #28]
 800191a:	005b      	lsls	r3, r3, #1
 800191c:	2203      	movs	r2, #3
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	43db      	mvns	r3, r3
 8001924:	69ba      	ldr	r2, [r7, #24]
 8001926:	4013      	ands	r3, r2
 8001928:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f003 0203 	and.w	r2, r3, #3
 8001932:	69fb      	ldr	r3, [r7, #28]
 8001934:	005b      	lsls	r3, r3, #1
 8001936:	fa02 f303 	lsl.w	r3, r2, r3
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 80e0 	beq.w	8001b14 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001954:	4b2f      	ldr	r3, [pc, #188]	@ (8001a14 <HAL_GPIO_Init+0x238>)
 8001956:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800195a:	4a2e      	ldr	r2, [pc, #184]	@ (8001a14 <HAL_GPIO_Init+0x238>)
 800195c:	f043 0302 	orr.w	r3, r3, #2
 8001960:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001964:	4b2b      	ldr	r3, [pc, #172]	@ (8001a14 <HAL_GPIO_Init+0x238>)
 8001966:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800196a:	f003 0302 	and.w	r3, r3, #2
 800196e:	60fb      	str	r3, [r7, #12]
 8001970:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001972:	4a29      	ldr	r2, [pc, #164]	@ (8001a18 <HAL_GPIO_Init+0x23c>)
 8001974:	69fb      	ldr	r3, [r7, #28]
 8001976:	089b      	lsrs	r3, r3, #2
 8001978:	3302      	adds	r3, #2
 800197a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800197e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	f003 0303 	and.w	r3, r3, #3
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	220f      	movs	r2, #15
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	4013      	ands	r3, r2
 8001994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a20      	ldr	r2, [pc, #128]	@ (8001a1c <HAL_GPIO_Init+0x240>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d052      	beq.n	8001a44 <HAL_GPIO_Init+0x268>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001a20 <HAL_GPIO_Init+0x244>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d031      	beq.n	8001a0a <HAL_GPIO_Init+0x22e>
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	4a1e      	ldr	r2, [pc, #120]	@ (8001a24 <HAL_GPIO_Init+0x248>)
 80019aa:	4293      	cmp	r3, r2
 80019ac:	d02b      	beq.n	8001a06 <HAL_GPIO_Init+0x22a>
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a28 <HAL_GPIO_Init+0x24c>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d025      	beq.n	8001a02 <HAL_GPIO_Init+0x226>
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	4a1c      	ldr	r2, [pc, #112]	@ (8001a2c <HAL_GPIO_Init+0x250>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d01f      	beq.n	80019fe <HAL_GPIO_Init+0x222>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001a30 <HAL_GPIO_Init+0x254>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d019      	beq.n	80019fa <HAL_GPIO_Init+0x21e>
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	4a1a      	ldr	r2, [pc, #104]	@ (8001a34 <HAL_GPIO_Init+0x258>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d013      	beq.n	80019f6 <HAL_GPIO_Init+0x21a>
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4a19      	ldr	r2, [pc, #100]	@ (8001a38 <HAL_GPIO_Init+0x25c>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d00d      	beq.n	80019f2 <HAL_GPIO_Init+0x216>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	4a18      	ldr	r2, [pc, #96]	@ (8001a3c <HAL_GPIO_Init+0x260>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d007      	beq.n	80019ee <HAL_GPIO_Init+0x212>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	4a17      	ldr	r2, [pc, #92]	@ (8001a40 <HAL_GPIO_Init+0x264>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d101      	bne.n	80019ea <HAL_GPIO_Init+0x20e>
 80019e6:	2309      	movs	r3, #9
 80019e8:	e02d      	b.n	8001a46 <HAL_GPIO_Init+0x26a>
 80019ea:	230a      	movs	r3, #10
 80019ec:	e02b      	b.n	8001a46 <HAL_GPIO_Init+0x26a>
 80019ee:	2308      	movs	r3, #8
 80019f0:	e029      	b.n	8001a46 <HAL_GPIO_Init+0x26a>
 80019f2:	2307      	movs	r3, #7
 80019f4:	e027      	b.n	8001a46 <HAL_GPIO_Init+0x26a>
 80019f6:	2306      	movs	r3, #6
 80019f8:	e025      	b.n	8001a46 <HAL_GPIO_Init+0x26a>
 80019fa:	2305      	movs	r3, #5
 80019fc:	e023      	b.n	8001a46 <HAL_GPIO_Init+0x26a>
 80019fe:	2304      	movs	r3, #4
 8001a00:	e021      	b.n	8001a46 <HAL_GPIO_Init+0x26a>
 8001a02:	2303      	movs	r3, #3
 8001a04:	e01f      	b.n	8001a46 <HAL_GPIO_Init+0x26a>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e01d      	b.n	8001a46 <HAL_GPIO_Init+0x26a>
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e01b      	b.n	8001a46 <HAL_GPIO_Init+0x26a>
 8001a0e:	bf00      	nop
 8001a10:	58000080 	.word	0x58000080
 8001a14:	58024400 	.word	0x58024400
 8001a18:	58000400 	.word	0x58000400
 8001a1c:	58020000 	.word	0x58020000
 8001a20:	58020400 	.word	0x58020400
 8001a24:	58020800 	.word	0x58020800
 8001a28:	58020c00 	.word	0x58020c00
 8001a2c:	58021000 	.word	0x58021000
 8001a30:	58021400 	.word	0x58021400
 8001a34:	58021800 	.word	0x58021800
 8001a38:	58021c00 	.word	0x58021c00
 8001a3c:	58022000 	.word	0x58022000
 8001a40:	58022400 	.word	0x58022400
 8001a44:	2300      	movs	r3, #0
 8001a46:	69fa      	ldr	r2, [r7, #28]
 8001a48:	f002 0203 	and.w	r2, r2, #3
 8001a4c:	0092      	lsls	r2, r2, #2
 8001a4e:	4093      	lsls	r3, r2
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001a56:	4938      	ldr	r1, [pc, #224]	@ (8001b38 <HAL_GPIO_Init+0x35c>)
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	089b      	lsrs	r3, r3, #2
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	69ba      	ldr	r2, [r7, #24]
 8001a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001a64:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	43db      	mvns	r3, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4013      	ands	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d003      	beq.n	8001a8a <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4313      	orrs	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001a8a:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001a8e:	69bb      	ldr	r3, [r7, #24]
 8001a90:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001a92:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d003      	beq.n	8001ab8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ab0:	69ba      	ldr	r2, [r7, #24]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001ab8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001abc:	69bb      	ldr	r3, [r7, #24]
 8001abe:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	43db      	mvns	r3, r3
 8001aca:	69ba      	ldr	r2, [r7, #24]
 8001acc:	4013      	ands	r3, r2
 8001ace:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d003      	beq.n	8001ae4 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001aea:	697b      	ldr	r3, [r7, #20]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	43db      	mvns	r3, r3
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4013      	ands	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d003      	beq.n	8001b0e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001b06:	69ba      	ldr	r2, [r7, #24]
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	3301      	adds	r3, #1
 8001b18:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	681a      	ldr	r2, [r3, #0]
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	fa22 f303 	lsr.w	r3, r2, r3
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f47f ae63 	bne.w	80017f0 <HAL_GPIO_Init+0x14>
  }
}
 8001b2a:	bf00      	nop
 8001b2c:	bf00      	nop
 8001b2e:	3724      	adds	r7, #36	@ 0x24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	58000400 	.word	0x58000400

08001b3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	460b      	mov	r3, r1
 8001b46:	807b      	strh	r3, [r7, #2]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001b4c:	787b      	ldrb	r3, [r7, #1]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001b52:	887a      	ldrh	r2, [r7, #2]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8001b58:	e003      	b.n	8001b62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001b5a:	887b      	ldrh	r3, [r7, #2]
 8001b5c:	041a      	lsls	r2, r3, #16
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	619a      	str	r2, [r3, #24]
}
 8001b62:	bf00      	nop
 8001b64:	370c      	adds	r7, #12
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001b6e:	b480      	push	{r7}
 8001b70:	b085      	sub	sp, #20
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	460b      	mov	r3, r1
 8001b78:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b80:	887a      	ldrh	r2, [r7, #2]
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	4013      	ands	r3, r2
 8001b86:	041a      	lsls	r2, r3, #16
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	43d9      	mvns	r1, r3
 8001b8c:	887b      	ldrh	r3, [r7, #2]
 8001b8e:	400b      	ands	r3, r1
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	619a      	str	r2, [r3, #24]
}
 8001b96:	bf00      	nop
 8001b98:	3714      	adds	r7, #20
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
	...

08001ba4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001bac:	4a08      	ldr	r2, [pc, #32]	@ (8001bd0 <HAL_HSEM_FastTake+0x2c>)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	3320      	adds	r3, #32
 8001bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb6:	4a07      	ldr	r2, [pc, #28]	@ (8001bd4 <HAL_HSEM_FastTake+0x30>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d101      	bne.n	8001bc0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	e000      	b.n	8001bc2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	370c      	adds	r7, #12
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr
 8001bce:	bf00      	nop
 8001bd0:	58026400 	.word	0x58026400
 8001bd4:	80000300 	.word	0x80000300

08001bd8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001be2:	4906      	ldr	r1, [pc, #24]	@ (8001bfc <HAL_HSEM_Release+0x24>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001bf0:	bf00      	nop
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr
 8001bfc:	58026400 	.word	0x58026400

08001c00 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b084      	sub	sp, #16
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8001c08:	4b29      	ldr	r3, [pc, #164]	@ (8001cb0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	f003 0307 	and.w	r3, r3, #7
 8001c10:	2b06      	cmp	r3, #6
 8001c12:	d00a      	beq.n	8001c2a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001c14:	4b26      	ldr	r3, [pc, #152]	@ (8001cb0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c16:	68db      	ldr	r3, [r3, #12]
 8001c18:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	d001      	beq.n	8001c26 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001c22:	2301      	movs	r3, #1
 8001c24:	e040      	b.n	8001ca8 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001c26:	2300      	movs	r3, #0
 8001c28:	e03e      	b.n	8001ca8 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8001c2a:	4b21      	ldr	r3, [pc, #132]	@ (8001cb0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 8001c32:	491f      	ldr	r1, [pc, #124]	@ (8001cb0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8001c3a:	f7ff fcaf 	bl	800159c <HAL_GetTick>
 8001c3e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c40:	e009      	b.n	8001c56 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c42:	f7ff fcab 	bl	800159c <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c50:	d901      	bls.n	8001c56 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e028      	b.n	8001ca8 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001c56:	4b16      	ldr	r3, [pc, #88]	@ (8001cb0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001c62:	d1ee      	bne.n	8001c42 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b1e      	cmp	r3, #30
 8001c68:	d008      	beq.n	8001c7c <HAL_PWREx_ConfigSupply+0x7c>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001c6e:	d005      	beq.n	8001c7c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b1d      	cmp	r3, #29
 8001c74:	d002      	beq.n	8001c7c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b2d      	cmp	r3, #45	@ 0x2d
 8001c7a:	d114      	bne.n	8001ca6 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8001c7c:	f7ff fc8e 	bl	800159c <HAL_GetTick>
 8001c80:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001c82:	e009      	b.n	8001c98 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001c84:	f7ff fc8a 	bl	800159c <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001c92:	d901      	bls.n	8001c98 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e007      	b.n	8001ca8 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001c98:	4b05      	ldr	r3, [pc, #20]	@ (8001cb0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001c9a:	68db      	ldr	r3, [r3, #12]
 8001c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ca4:	d1ee      	bne.n	8001c84 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	58024800 	.word	0x58024800

08001cb4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b08c      	sub	sp, #48	@ 0x30
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d102      	bne.n	8001cc8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f000 bc48 	b.w	8002558 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 8088 	beq.w	8001de6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd6:	4b99      	ldr	r3, [pc, #612]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001cde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001ce0:	4b96      	ldr	r3, [pc, #600]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ce4:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8001ce6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001ce8:	2b10      	cmp	r3, #16
 8001cea:	d007      	beq.n	8001cfc <HAL_RCC_OscConfig+0x48>
 8001cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001cee:	2b18      	cmp	r3, #24
 8001cf0:	d111      	bne.n	8001d16 <HAL_RCC_OscConfig+0x62>
 8001cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001cf4:	f003 0303 	and.w	r3, r3, #3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d10c      	bne.n	8001d16 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cfc:	4b8f      	ldr	r3, [pc, #572]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d06d      	beq.n	8001de4 <HAL_RCC_OscConfig+0x130>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d169      	bne.n	8001de4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	f000 bc21 	b.w	8002558 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d1e:	d106      	bne.n	8001d2e <HAL_RCC_OscConfig+0x7a>
 8001d20:	4b86      	ldr	r3, [pc, #536]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a85      	ldr	r2, [pc, #532]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d26:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d2a:	6013      	str	r3, [r2, #0]
 8001d2c:	e02e      	b.n	8001d8c <HAL_RCC_OscConfig+0xd8>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d10c      	bne.n	8001d50 <HAL_RCC_OscConfig+0x9c>
 8001d36:	4b81      	ldr	r3, [pc, #516]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a80      	ldr	r2, [pc, #512]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d40:	6013      	str	r3, [r2, #0]
 8001d42:	4b7e      	ldr	r3, [pc, #504]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a7d      	ldr	r2, [pc, #500]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d48:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d4c:	6013      	str	r3, [r2, #0]
 8001d4e:	e01d      	b.n	8001d8c <HAL_RCC_OscConfig+0xd8>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001d58:	d10c      	bne.n	8001d74 <HAL_RCC_OscConfig+0xc0>
 8001d5a:	4b78      	ldr	r3, [pc, #480]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	4a77      	ldr	r2, [pc, #476]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d64:	6013      	str	r3, [r2, #0]
 8001d66:	4b75      	ldr	r3, [pc, #468]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	4a74      	ldr	r2, [pc, #464]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d70:	6013      	str	r3, [r2, #0]
 8001d72:	e00b      	b.n	8001d8c <HAL_RCC_OscConfig+0xd8>
 8001d74:	4b71      	ldr	r3, [pc, #452]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a70      	ldr	r2, [pc, #448]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001d7e:	6013      	str	r3, [r2, #0]
 8001d80:	4b6e      	ldr	r3, [pc, #440]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a6d      	ldr	r2, [pc, #436]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001d86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d013      	beq.n	8001dbc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d94:	f7ff fc02 	bl	800159c <HAL_GetTick>
 8001d98:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001d9a:	e008      	b.n	8001dae <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d9c:	f7ff fbfe 	bl	800159c <HAL_GetTick>
 8001da0:	4602      	mov	r2, r0
 8001da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da4:	1ad3      	subs	r3, r2, r3
 8001da6:	2b64      	cmp	r3, #100	@ 0x64
 8001da8:	d901      	bls.n	8001dae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001daa:	2303      	movs	r3, #3
 8001dac:	e3d4      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001dae:	4b63      	ldr	r3, [pc, #396]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d0f0      	beq.n	8001d9c <HAL_RCC_OscConfig+0xe8>
 8001dba:	e014      	b.n	8001de6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dbc:	f7ff fbee 	bl	800159c <HAL_GetTick>
 8001dc0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001dc2:	e008      	b.n	8001dd6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dc4:	f7ff fbea 	bl	800159c <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b64      	cmp	r3, #100	@ 0x64
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e3c0      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001dd6:	4b59      	ldr	r3, [pc, #356]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d1f0      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x110>
 8001de2:	e000      	b.n	8001de6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0302 	and.w	r3, r3, #2
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	f000 80ca 	beq.w	8001f88 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001df4:	4b51      	ldr	r3, [pc, #324]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001df6:	691b      	ldr	r3, [r3, #16]
 8001df8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001dfc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001dfe:	4b4f      	ldr	r3, [pc, #316]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e02:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8001e04:	6a3b      	ldr	r3, [r7, #32]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d007      	beq.n	8001e1a <HAL_RCC_OscConfig+0x166>
 8001e0a:	6a3b      	ldr	r3, [r7, #32]
 8001e0c:	2b18      	cmp	r3, #24
 8001e0e:	d156      	bne.n	8001ebe <HAL_RCC_OscConfig+0x20a>
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f003 0303 	and.w	r3, r3, #3
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d151      	bne.n	8001ebe <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e1a:	4b48      	ldr	r3, [pc, #288]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0304 	and.w	r3, r3, #4
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d005      	beq.n	8001e32 <HAL_RCC_OscConfig+0x17e>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	68db      	ldr	r3, [r3, #12]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d101      	bne.n	8001e32 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e392      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001e32:	4b42      	ldr	r3, [pc, #264]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f023 0219 	bic.w	r2, r3, #25
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	68db      	ldr	r3, [r3, #12]
 8001e3e:	493f      	ldr	r1, [pc, #252]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e44:	f7ff fbaa 	bl	800159c <HAL_GetTick>
 8001e48:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e4a:	e008      	b.n	8001e5e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e4c:	f7ff fba6 	bl	800159c <HAL_GetTick>
 8001e50:	4602      	mov	r2, r0
 8001e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e54:	1ad3      	subs	r3, r2, r3
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d901      	bls.n	8001e5e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8001e5a:	2303      	movs	r3, #3
 8001e5c:	e37c      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001e5e:	4b37      	ldr	r3, [pc, #220]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d0f0      	beq.n	8001e4c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e6a:	f7ff fbc7 	bl	80015fc <HAL_GetREVID>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d817      	bhi.n	8001ea8 <HAL_RCC_OscConfig+0x1f4>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	2b40      	cmp	r3, #64	@ 0x40
 8001e7e:	d108      	bne.n	8001e92 <HAL_RCC_OscConfig+0x1de>
 8001e80:	4b2e      	ldr	r3, [pc, #184]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001e88:	4a2c      	ldr	r2, [pc, #176]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e8e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e90:	e07a      	b.n	8001f88 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e92:	4b2a      	ldr	r3, [pc, #168]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	031b      	lsls	r3, r3, #12
 8001ea0:	4926      	ldr	r1, [pc, #152]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001ea2:	4313      	orrs	r3, r2
 8001ea4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ea6:	e06f      	b.n	8001f88 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea8:	4b24      	ldr	r3, [pc, #144]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	691b      	ldr	r3, [r3, #16]
 8001eb4:	061b      	lsls	r3, r3, #24
 8001eb6:	4921      	ldr	r1, [pc, #132]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ebc:	e064      	b.n	8001f88 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d047      	beq.n	8001f56 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f023 0219 	bic.w	r2, r3, #25
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	491a      	ldr	r1, [pc, #104]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed8:	f7ff fb60 	bl	800159c <HAL_GetTick>
 8001edc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ede:	e008      	b.n	8001ef2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ee0:	f7ff fb5c 	bl	800159c <HAL_GetTick>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ee8:	1ad3      	subs	r3, r2, r3
 8001eea:	2b02      	cmp	r3, #2
 8001eec:	d901      	bls.n	8001ef2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	e332      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ef2:	4b12      	ldr	r3, [pc, #72]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d0f0      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001efe:	f7ff fb7d 	bl	80015fc <HAL_GetREVID>
 8001f02:	4603      	mov	r3, r0
 8001f04:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d819      	bhi.n	8001f40 <HAL_RCC_OscConfig+0x28c>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	691b      	ldr	r3, [r3, #16]
 8001f10:	2b40      	cmp	r3, #64	@ 0x40
 8001f12:	d108      	bne.n	8001f26 <HAL_RCC_OscConfig+0x272>
 8001f14:	4b09      	ldr	r3, [pc, #36]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001f1c:	4a07      	ldr	r2, [pc, #28]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001f1e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f22:	6053      	str	r3, [r2, #4]
 8001f24:	e030      	b.n	8001f88 <HAL_RCC_OscConfig+0x2d4>
 8001f26:	4b05      	ldr	r3, [pc, #20]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	031b      	lsls	r3, r3, #12
 8001f34:	4901      	ldr	r1, [pc, #4]	@ (8001f3c <HAL_RCC_OscConfig+0x288>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	604b      	str	r3, [r1, #4]
 8001f3a:	e025      	b.n	8001f88 <HAL_RCC_OscConfig+0x2d4>
 8001f3c:	58024400 	.word	0x58024400
 8001f40:	4b9a      	ldr	r3, [pc, #616]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	061b      	lsls	r3, r3, #24
 8001f4e:	4997      	ldr	r1, [pc, #604]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	604b      	str	r3, [r1, #4]
 8001f54:	e018      	b.n	8001f88 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f56:	4b95      	ldr	r3, [pc, #596]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a94      	ldr	r2, [pc, #592]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001f5c:	f023 0301 	bic.w	r3, r3, #1
 8001f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f62:	f7ff fb1b 	bl	800159c <HAL_GetTick>
 8001f66:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f68:	e008      	b.n	8001f7c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f6a:	f7ff fb17 	bl	800159c <HAL_GetTick>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f72:	1ad3      	subs	r3, r2, r3
 8001f74:	2b02      	cmp	r3, #2
 8001f76:	d901      	bls.n	8001f7c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001f78:	2303      	movs	r3, #3
 8001f7a:	e2ed      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001f7c:	4b8b      	ldr	r3, [pc, #556]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0304 	and.w	r3, r3, #4
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d1f0      	bne.n	8001f6a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f003 0310 	and.w	r3, r3, #16
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f000 80a9 	beq.w	80020e8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f96:	4b85      	ldr	r3, [pc, #532]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001f98:	691b      	ldr	r3, [r3, #16]
 8001f9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001f9e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001fa0:	4b82      	ldr	r3, [pc, #520]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001fa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fa4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001fa6:	69bb      	ldr	r3, [r7, #24]
 8001fa8:	2b08      	cmp	r3, #8
 8001faa:	d007      	beq.n	8001fbc <HAL_RCC_OscConfig+0x308>
 8001fac:	69bb      	ldr	r3, [r7, #24]
 8001fae:	2b18      	cmp	r3, #24
 8001fb0:	d13a      	bne.n	8002028 <HAL_RCC_OscConfig+0x374>
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	f003 0303 	and.w	r3, r3, #3
 8001fb8:	2b01      	cmp	r3, #1
 8001fba:	d135      	bne.n	8002028 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001fbc:	4b7b      	ldr	r3, [pc, #492]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d005      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x320>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69db      	ldr	r3, [r3, #28]
 8001fcc:	2b80      	cmp	r3, #128	@ 0x80
 8001fce:	d001      	beq.n	8001fd4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001fd0:	2301      	movs	r3, #1
 8001fd2:	e2c1      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001fd4:	f7ff fb12 	bl	80015fc <HAL_GetREVID>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d817      	bhi.n	8002012 <HAL_RCC_OscConfig+0x35e>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6a1b      	ldr	r3, [r3, #32]
 8001fe6:	2b20      	cmp	r3, #32
 8001fe8:	d108      	bne.n	8001ffc <HAL_RCC_OscConfig+0x348>
 8001fea:	4b70      	ldr	r3, [pc, #448]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8001ff2:	4a6e      	ldr	r2, [pc, #440]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001ff4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001ff8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ffa:	e075      	b.n	80020e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ffc:	4b6b      	ldr	r3, [pc, #428]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6a1b      	ldr	r3, [r3, #32]
 8002008:	069b      	lsls	r3, r3, #26
 800200a:	4968      	ldr	r1, [pc, #416]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002010:	e06a      	b.n	80020e8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002012:	4b66      	ldr	r3, [pc, #408]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002014:	68db      	ldr	r3, [r3, #12]
 8002016:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	061b      	lsls	r3, r3, #24
 8002020:	4962      	ldr	r1, [pc, #392]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002022:	4313      	orrs	r3, r2
 8002024:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002026:	e05f      	b.n	80020e8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	69db      	ldr	r3, [r3, #28]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d042      	beq.n	80020b6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002030:	4b5e      	ldr	r3, [pc, #376]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4a5d      	ldr	r2, [pc, #372]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002036:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800203a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800203c:	f7ff faae 	bl	800159c <HAL_GetTick>
 8002040:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002042:	e008      	b.n	8002056 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002044:	f7ff faaa 	bl	800159c <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	2b02      	cmp	r3, #2
 8002050:	d901      	bls.n	8002056 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002052:	2303      	movs	r3, #3
 8002054:	e280      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002056:	4b55      	ldr	r3, [pc, #340]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800205e:	2b00      	cmp	r3, #0
 8002060:	d0f0      	beq.n	8002044 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002062:	f7ff facb 	bl	80015fc <HAL_GetREVID>
 8002066:	4603      	mov	r3, r0
 8002068:	f241 0203 	movw	r2, #4099	@ 0x1003
 800206c:	4293      	cmp	r3, r2
 800206e:	d817      	bhi.n	80020a0 <HAL_RCC_OscConfig+0x3ec>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	2b20      	cmp	r3, #32
 8002076:	d108      	bne.n	800208a <HAL_RCC_OscConfig+0x3d6>
 8002078:	4b4c      	ldr	r3, [pc, #304]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8002080:	4a4a      	ldr	r2, [pc, #296]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002082:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8002086:	6053      	str	r3, [r2, #4]
 8002088:	e02e      	b.n	80020e8 <HAL_RCC_OscConfig+0x434>
 800208a:	4b48      	ldr	r3, [pc, #288]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 800208c:	685b      	ldr	r3, [r3, #4]
 800208e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	069b      	lsls	r3, r3, #26
 8002098:	4944      	ldr	r1, [pc, #272]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 800209a:	4313      	orrs	r3, r2
 800209c:	604b      	str	r3, [r1, #4]
 800209e:	e023      	b.n	80020e8 <HAL_RCC_OscConfig+0x434>
 80020a0:	4b42      	ldr	r3, [pc, #264]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6a1b      	ldr	r3, [r3, #32]
 80020ac:	061b      	lsls	r3, r3, #24
 80020ae:	493f      	ldr	r1, [pc, #252]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 80020b0:	4313      	orrs	r3, r2
 80020b2:	60cb      	str	r3, [r1, #12]
 80020b4:	e018      	b.n	80020e8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80020b6:	4b3d      	ldr	r3, [pc, #244]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a3c      	ldr	r2, [pc, #240]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 80020bc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80020c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c2:	f7ff fa6b 	bl	800159c <HAL_GetTick>
 80020c6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020c8:	e008      	b.n	80020dc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80020ca:	f7ff fa67 	bl	800159c <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d901      	bls.n	80020dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e23d      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80020dc:	4b33      	ldr	r3, [pc, #204]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d1f0      	bne.n	80020ca <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f003 0308 	and.w	r3, r3, #8
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d036      	beq.n	8002162 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	695b      	ldr	r3, [r3, #20]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d019      	beq.n	8002130 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020fc:	4b2b      	ldr	r3, [pc, #172]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 80020fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002100:	4a2a      	ldr	r2, [pc, #168]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002102:	f043 0301 	orr.w	r3, r3, #1
 8002106:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002108:	f7ff fa48 	bl	800159c <HAL_GetTick>
 800210c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800210e:	e008      	b.n	8002122 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002110:	f7ff fa44 	bl	800159c <HAL_GetTick>
 8002114:	4602      	mov	r2, r0
 8002116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002118:	1ad3      	subs	r3, r2, r3
 800211a:	2b02      	cmp	r3, #2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e21a      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002122:	4b22      	ldr	r3, [pc, #136]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002124:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0f0      	beq.n	8002110 <HAL_RCC_OscConfig+0x45c>
 800212e:	e018      	b.n	8002162 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002130:	4b1e      	ldr	r3, [pc, #120]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002132:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002134:	4a1d      	ldr	r2, [pc, #116]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002136:	f023 0301 	bic.w	r3, r3, #1
 800213a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800213c:	f7ff fa2e 	bl	800159c <HAL_GetTick>
 8002140:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002144:	f7ff fa2a 	bl	800159c <HAL_GetTick>
 8002148:	4602      	mov	r2, r0
 800214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e200      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002156:	4b15      	ldr	r3, [pc, #84]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002158:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0320 	and.w	r3, r3, #32
 800216a:	2b00      	cmp	r3, #0
 800216c:	d039      	beq.n	80021e2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d01c      	beq.n	80021b0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002176:	4b0d      	ldr	r3, [pc, #52]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a0c      	ldr	r2, [pc, #48]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 800217c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002180:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002182:	f7ff fa0b 	bl	800159c <HAL_GetTick>
 8002186:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002188:	e008      	b.n	800219c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800218a:	f7ff fa07 	bl	800159c <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b02      	cmp	r3, #2
 8002196:	d901      	bls.n	800219c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e1dd      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800219c:	4b03      	ldr	r3, [pc, #12]	@ (80021ac <HAL_RCC_OscConfig+0x4f8>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCC_OscConfig+0x4d6>
 80021a8:	e01b      	b.n	80021e2 <HAL_RCC_OscConfig+0x52e>
 80021aa:	bf00      	nop
 80021ac:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021b0:	4b9b      	ldr	r3, [pc, #620]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a9a      	ldr	r2, [pc, #616]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80021b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80021ba:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80021bc:	f7ff f9ee 	bl	800159c <HAL_GetTick>
 80021c0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021c4:	f7ff f9ea 	bl	800159c <HAL_GetTick>
 80021c8:	4602      	mov	r2, r0
 80021ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e1c0      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80021d6:	4b92      	ldr	r3, [pc, #584]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 0304 	and.w	r3, r3, #4
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	f000 8081 	beq.w	80022f2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80021f0:	4b8c      	ldr	r3, [pc, #560]	@ (8002424 <HAL_RCC_OscConfig+0x770>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a8b      	ldr	r2, [pc, #556]	@ (8002424 <HAL_RCC_OscConfig+0x770>)
 80021f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021fa:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80021fc:	f7ff f9ce 	bl	800159c <HAL_GetTick>
 8002200:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002202:	e008      	b.n	8002216 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002204:	f7ff f9ca 	bl	800159c <HAL_GetTick>
 8002208:	4602      	mov	r2, r0
 800220a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220c:	1ad3      	subs	r3, r2, r3
 800220e:	2b64      	cmp	r3, #100	@ 0x64
 8002210:	d901      	bls.n	8002216 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002212:	2303      	movs	r3, #3
 8002214:	e1a0      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002216:	4b83      	ldr	r3, [pc, #524]	@ (8002424 <HAL_RCC_OscConfig+0x770>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800221e:	2b00      	cmp	r3, #0
 8002220:	d0f0      	beq.n	8002204 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d106      	bne.n	8002238 <HAL_RCC_OscConfig+0x584>
 800222a:	4b7d      	ldr	r3, [pc, #500]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800222c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800222e:	4a7c      	ldr	r2, [pc, #496]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002230:	f043 0301 	orr.w	r3, r3, #1
 8002234:	6713      	str	r3, [r2, #112]	@ 0x70
 8002236:	e02d      	b.n	8002294 <HAL_RCC_OscConfig+0x5e0>
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d10c      	bne.n	800225a <HAL_RCC_OscConfig+0x5a6>
 8002240:	4b77      	ldr	r3, [pc, #476]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002244:	4a76      	ldr	r2, [pc, #472]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002246:	f023 0301 	bic.w	r3, r3, #1
 800224a:	6713      	str	r3, [r2, #112]	@ 0x70
 800224c:	4b74      	ldr	r3, [pc, #464]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800224e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002250:	4a73      	ldr	r2, [pc, #460]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002252:	f023 0304 	bic.w	r3, r3, #4
 8002256:	6713      	str	r3, [r2, #112]	@ 0x70
 8002258:	e01c      	b.n	8002294 <HAL_RCC_OscConfig+0x5e0>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	2b05      	cmp	r3, #5
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0x5c8>
 8002262:	4b6f      	ldr	r3, [pc, #444]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002266:	4a6e      	ldr	r2, [pc, #440]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002268:	f043 0304 	orr.w	r3, r3, #4
 800226c:	6713      	str	r3, [r2, #112]	@ 0x70
 800226e:	4b6c      	ldr	r3, [pc, #432]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002270:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002272:	4a6b      	ldr	r2, [pc, #428]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002274:	f043 0301 	orr.w	r3, r3, #1
 8002278:	6713      	str	r3, [r2, #112]	@ 0x70
 800227a:	e00b      	b.n	8002294 <HAL_RCC_OscConfig+0x5e0>
 800227c:	4b68      	ldr	r3, [pc, #416]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800227e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002280:	4a67      	ldr	r2, [pc, #412]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002282:	f023 0301 	bic.w	r3, r3, #1
 8002286:	6713      	str	r3, [r2, #112]	@ 0x70
 8002288:	4b65      	ldr	r3, [pc, #404]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800228a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800228c:	4a64      	ldr	r2, [pc, #400]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800228e:	f023 0304 	bic.w	r3, r3, #4
 8002292:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	689b      	ldr	r3, [r3, #8]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d015      	beq.n	80022c8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800229c:	f7ff f97e 	bl	800159c <HAL_GetTick>
 80022a0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022a2:	e00a      	b.n	80022ba <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022a4:	f7ff f97a 	bl	800159c <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e14e      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80022ba:	4b59      	ldr	r3, [pc, #356]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80022bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022be:	f003 0302 	and.w	r3, r3, #2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0ee      	beq.n	80022a4 <HAL_RCC_OscConfig+0x5f0>
 80022c6:	e014      	b.n	80022f2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c8:	f7ff f968 	bl	800159c <HAL_GetTick>
 80022cc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022ce:	e00a      	b.n	80022e6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022d0:	f7ff f964 	bl	800159c <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022de:	4293      	cmp	r3, r2
 80022e0:	d901      	bls.n	80022e6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80022e2:	2303      	movs	r3, #3
 80022e4:	e138      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80022e6:	4b4e      	ldr	r3, [pc, #312]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d1ee      	bne.n	80022d0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 812d 	beq.w	8002556 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80022fc:	4b48      	ldr	r3, [pc, #288]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80022fe:	691b      	ldr	r3, [r3, #16]
 8002300:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002304:	2b18      	cmp	r3, #24
 8002306:	f000 80bd 	beq.w	8002484 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800230e:	2b02      	cmp	r3, #2
 8002310:	f040 809e 	bne.w	8002450 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002314:	4b42      	ldr	r3, [pc, #264]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a41      	ldr	r2, [pc, #260]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800231a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800231e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002320:	f7ff f93c 	bl	800159c <HAL_GetTick>
 8002324:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002328:	f7ff f938 	bl	800159c <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e10e      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800233a:	4b39      	ldr	r3, [pc, #228]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d1f0      	bne.n	8002328 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002346:	4b36      	ldr	r3, [pc, #216]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002348:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800234a:	4b37      	ldr	r3, [pc, #220]	@ (8002428 <HAL_RCC_OscConfig+0x774>)
 800234c:	4013      	ands	r3, r2
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002356:	0112      	lsls	r2, r2, #4
 8002358:	430a      	orrs	r2, r1
 800235a:	4931      	ldr	r1, [pc, #196]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800235c:	4313      	orrs	r3, r2
 800235e:	628b      	str	r3, [r1, #40]	@ 0x28
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002364:	3b01      	subs	r3, #1
 8002366:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800236e:	3b01      	subs	r3, #1
 8002370:	025b      	lsls	r3, r3, #9
 8002372:	b29b      	uxth	r3, r3
 8002374:	431a      	orrs	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800237a:	3b01      	subs	r3, #1
 800237c:	041b      	lsls	r3, r3, #16
 800237e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002388:	3b01      	subs	r3, #1
 800238a:	061b      	lsls	r3, r3, #24
 800238c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8002390:	4923      	ldr	r1, [pc, #140]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002392:	4313      	orrs	r3, r2
 8002394:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002396:	4b22      	ldr	r3, [pc, #136]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002398:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800239a:	4a21      	ldr	r2, [pc, #132]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800239c:	f023 0301 	bic.w	r3, r3, #1
 80023a0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80023a2:	4b1f      	ldr	r3, [pc, #124]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80023a6:	4b21      	ldr	r3, [pc, #132]	@ (800242c <HAL_RCC_OscConfig+0x778>)
 80023a8:	4013      	ands	r3, r2
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80023ae:	00d2      	lsls	r2, r2, #3
 80023b0:	491b      	ldr	r1, [pc, #108]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80023b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ba:	f023 020c 	bic.w	r2, r3, #12
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023c2:	4917      	ldr	r1, [pc, #92]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80023c8:	4b15      	ldr	r3, [pc, #84]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023cc:	f023 0202 	bic.w	r2, r3, #2
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023d4:	4912      	ldr	r1, [pc, #72]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80023da:	4b11      	ldr	r3, [pc, #68]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023de:	4a10      	ldr	r2, [pc, #64]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023e4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80023e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023ea:	4a0d      	ldr	r2, [pc, #52]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80023f0:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80023f2:	4b0b      	ldr	r3, [pc, #44]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80023f6:	4a0a      	ldr	r2, [pc, #40]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 80023f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80023fc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80023fe:	4b08      	ldr	r3, [pc, #32]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002400:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002402:	4a07      	ldr	r2, [pc, #28]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002404:	f043 0301 	orr.w	r3, r3, #1
 8002408:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800240a:	4b05      	ldr	r3, [pc, #20]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a04      	ldr	r2, [pc, #16]	@ (8002420 <HAL_RCC_OscConfig+0x76c>)
 8002410:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002414:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002416:	f7ff f8c1 	bl	800159c <HAL_GetTick>
 800241a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800241c:	e011      	b.n	8002442 <HAL_RCC_OscConfig+0x78e>
 800241e:	bf00      	nop
 8002420:	58024400 	.word	0x58024400
 8002424:	58024800 	.word	0x58024800
 8002428:	fffffc0c 	.word	0xfffffc0c
 800242c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002430:	f7ff f8b4 	bl	800159c <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	2b02      	cmp	r3, #2
 800243c:	d901      	bls.n	8002442 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800243e:	2303      	movs	r3, #3
 8002440:	e08a      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002442:	4b47      	ldr	r3, [pc, #284]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d0f0      	beq.n	8002430 <HAL_RCC_OscConfig+0x77c>
 800244e:	e082      	b.n	8002556 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002450:	4b43      	ldr	r3, [pc, #268]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a42      	ldr	r2, [pc, #264]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002456:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800245a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800245c:	f7ff f89e 	bl	800159c <HAL_GetTick>
 8002460:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002464:	f7ff f89a 	bl	800159c <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e070      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002476:	4b3a      	ldr	r3, [pc, #232]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x7b0>
 8002482:	e068      	b.n	8002556 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002484:	4b36      	ldr	r3, [pc, #216]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002488:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800248a:	4b35      	ldr	r3, [pc, #212]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 800248c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002494:	2b01      	cmp	r3, #1
 8002496:	d031      	beq.n	80024fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	f003 0203 	and.w	r2, r3, #3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024a2:	429a      	cmp	r2, r3
 80024a4:	d12a      	bne.n	80024fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	091b      	lsrs	r3, r3, #4
 80024aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024b2:	429a      	cmp	r2, r3
 80024b4:	d122      	bne.n	80024fc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80024c2:	429a      	cmp	r2, r3
 80024c4:	d11a      	bne.n	80024fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	0a5b      	lsrs	r3, r3, #9
 80024ca:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80024d2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80024d4:	429a      	cmp	r2, r3
 80024d6:	d111      	bne.n	80024fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	0c1b      	lsrs	r3, r3, #16
 80024dc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80024e4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d108      	bne.n	80024fc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	0e1b      	lsrs	r3, r3, #24
 80024ee:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024f6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80024f8:	429a      	cmp	r2, r3
 80024fa:	d001      	beq.n	8002500 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80024fc:	2301      	movs	r3, #1
 80024fe:	e02b      	b.n	8002558 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002500:	4b17      	ldr	r3, [pc, #92]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002504:	08db      	lsrs	r3, r3, #3
 8002506:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800250a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002510:	693a      	ldr	r2, [r7, #16]
 8002512:	429a      	cmp	r2, r3
 8002514:	d01f      	beq.n	8002556 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002516:	4b12      	ldr	r3, [pc, #72]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251a:	4a11      	ldr	r2, [pc, #68]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 800251c:	f023 0301 	bic.w	r3, r3, #1
 8002520:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002522:	f7ff f83b 	bl	800159c <HAL_GetTick>
 8002526:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002528:	bf00      	nop
 800252a:	f7ff f837 	bl	800159c <HAL_GetTick>
 800252e:	4602      	mov	r2, r0
 8002530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002532:	4293      	cmp	r3, r2
 8002534:	d0f9      	beq.n	800252a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002536:	4b0a      	ldr	r3, [pc, #40]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002538:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800253a:	4b0a      	ldr	r3, [pc, #40]	@ (8002564 <HAL_RCC_OscConfig+0x8b0>)
 800253c:	4013      	ands	r3, r2
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002542:	00d2      	lsls	r2, r2, #3
 8002544:	4906      	ldr	r1, [pc, #24]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002546:	4313      	orrs	r3, r2
 8002548:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800254a:	4b05      	ldr	r3, [pc, #20]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 800254c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254e:	4a04      	ldr	r2, [pc, #16]	@ (8002560 <HAL_RCC_OscConfig+0x8ac>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002556:	2300      	movs	r3, #0
}
 8002558:	4618      	mov	r0, r3
 800255a:	3730      	adds	r7, #48	@ 0x30
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	58024400 	.word	0x58024400
 8002564:	ffff0007 	.word	0xffff0007

08002568 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d101      	bne.n	800257c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002578:	2301      	movs	r3, #1
 800257a:	e19c      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800257c:	4b8a      	ldr	r3, [pc, #552]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 030f 	and.w	r3, r3, #15
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	429a      	cmp	r2, r3
 8002588:	d910      	bls.n	80025ac <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800258a:	4b87      	ldr	r3, [pc, #540]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f023 020f 	bic.w	r2, r3, #15
 8002592:	4985      	ldr	r1, [pc, #532]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	4313      	orrs	r3, r2
 8002598:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800259a:	4b83      	ldr	r3, [pc, #524]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 030f 	and.w	r3, r3, #15
 80025a2:	683a      	ldr	r2, [r7, #0]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d001      	beq.n	80025ac <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e184      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d010      	beq.n	80025da <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	691a      	ldr	r2, [r3, #16]
 80025bc:	4b7b      	ldr	r3, [pc, #492]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d908      	bls.n	80025da <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80025c8:	4b78      	ldr	r3, [pc, #480]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80025ca:	699b      	ldr	r3, [r3, #24]
 80025cc:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	691b      	ldr	r3, [r3, #16]
 80025d4:	4975      	ldr	r1, [pc, #468]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80025d6:	4313      	orrs	r3, r2
 80025d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d010      	beq.n	8002608 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	4b70      	ldr	r3, [pc, #448]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80025ec:	69db      	ldr	r3, [r3, #28]
 80025ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d908      	bls.n	8002608 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80025f6:	4b6d      	ldr	r3, [pc, #436]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	496a      	ldr	r1, [pc, #424]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002604:	4313      	orrs	r3, r2
 8002606:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f003 0310 	and.w	r3, r3, #16
 8002610:	2b00      	cmp	r3, #0
 8002612:	d010      	beq.n	8002636 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	699a      	ldr	r2, [r3, #24]
 8002618:	4b64      	ldr	r3, [pc, #400]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 800261a:	69db      	ldr	r3, [r3, #28]
 800261c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002620:	429a      	cmp	r2, r3
 8002622:	d908      	bls.n	8002636 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002624:	4b61      	ldr	r3, [pc, #388]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002626:	69db      	ldr	r3, [r3, #28]
 8002628:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	699b      	ldr	r3, [r3, #24]
 8002630:	495e      	ldr	r1, [pc, #376]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002632:	4313      	orrs	r3, r2
 8002634:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0320 	and.w	r3, r3, #32
 800263e:	2b00      	cmp	r3, #0
 8002640:	d010      	beq.n	8002664 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69da      	ldr	r2, [r3, #28]
 8002646:	4b59      	ldr	r3, [pc, #356]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002648:	6a1b      	ldr	r3, [r3, #32]
 800264a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800264e:	429a      	cmp	r2, r3
 8002650:	d908      	bls.n	8002664 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002652:	4b56      	ldr	r3, [pc, #344]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002654:	6a1b      	ldr	r3, [r3, #32]
 8002656:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	4953      	ldr	r1, [pc, #332]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002660:	4313      	orrs	r3, r2
 8002662:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d010      	beq.n	8002692 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	4b4d      	ldr	r3, [pc, #308]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002676:	699b      	ldr	r3, [r3, #24]
 8002678:	f003 030f 	and.w	r3, r3, #15
 800267c:	429a      	cmp	r2, r3
 800267e:	d908      	bls.n	8002692 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002680:	4b4a      	ldr	r3, [pc, #296]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	f023 020f 	bic.w	r2, r3, #15
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	68db      	ldr	r3, [r3, #12]
 800268c:	4947      	ldr	r1, [pc, #284]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 800268e:	4313      	orrs	r3, r2
 8002690:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f003 0301 	and.w	r3, r3, #1
 800269a:	2b00      	cmp	r3, #0
 800269c:	d055      	beq.n	800274a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800269e:	4b43      	ldr	r3, [pc, #268]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	4940      	ldr	r1, [pc, #256]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80026ac:	4313      	orrs	r3, r2
 80026ae:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	d107      	bne.n	80026c8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80026b8:	4b3c      	ldr	r3, [pc, #240]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d121      	bne.n	8002708 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e0f6      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	685b      	ldr	r3, [r3, #4]
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d107      	bne.n	80026e0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80026d0:	4b36      	ldr	r3, [pc, #216]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d115      	bne.n	8002708 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026dc:	2301      	movs	r3, #1
 80026de:	e0ea      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d107      	bne.n	80026f8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80026e8:	4b30      	ldr	r3, [pc, #192]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d109      	bne.n	8002708 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80026f4:	2301      	movs	r3, #1
 80026f6:	e0de      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026f8:	4b2c      	ldr	r3, [pc, #176]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0304 	and.w	r3, r3, #4
 8002700:	2b00      	cmp	r3, #0
 8002702:	d101      	bne.n	8002708 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002704:	2301      	movs	r3, #1
 8002706:	e0d6      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002708:	4b28      	ldr	r3, [pc, #160]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 800270a:	691b      	ldr	r3, [r3, #16]
 800270c:	f023 0207 	bic.w	r2, r3, #7
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	4925      	ldr	r1, [pc, #148]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002716:	4313      	orrs	r3, r2
 8002718:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800271a:	f7fe ff3f 	bl	800159c <HAL_GetTick>
 800271e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002720:	e00a      	b.n	8002738 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002722:	f7fe ff3b 	bl	800159c <HAL_GetTick>
 8002726:	4602      	mov	r2, r0
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	1ad3      	subs	r3, r2, r3
 800272c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002730:	4293      	cmp	r3, r2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e0be      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002738:	4b1c      	ldr	r3, [pc, #112]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 800273a:	691b      	ldr	r3, [r3, #16]
 800273c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	429a      	cmp	r2, r3
 8002748:	d1eb      	bne.n	8002722 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0302 	and.w	r3, r3, #2
 8002752:	2b00      	cmp	r3, #0
 8002754:	d010      	beq.n	8002778 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	4b14      	ldr	r3, [pc, #80]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 800275c:	699b      	ldr	r3, [r3, #24]
 800275e:	f003 030f 	and.w	r3, r3, #15
 8002762:	429a      	cmp	r2, r3
 8002764:	d208      	bcs.n	8002778 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002766:	4b11      	ldr	r3, [pc, #68]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002768:	699b      	ldr	r3, [r3, #24]
 800276a:	f023 020f 	bic.w	r2, r3, #15
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	490e      	ldr	r1, [pc, #56]	@ (80027ac <HAL_RCC_ClockConfig+0x244>)
 8002774:	4313      	orrs	r3, r2
 8002776:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002778:	4b0b      	ldr	r3, [pc, #44]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 030f 	and.w	r3, r3, #15
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d214      	bcs.n	80027b0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002786:	4b08      	ldr	r3, [pc, #32]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f023 020f 	bic.w	r2, r3, #15
 800278e:	4906      	ldr	r1, [pc, #24]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	4313      	orrs	r3, r2
 8002794:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002796:	4b04      	ldr	r3, [pc, #16]	@ (80027a8 <HAL_RCC_ClockConfig+0x240>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f003 030f 	and.w	r3, r3, #15
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d005      	beq.n	80027b0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e086      	b.n	80028b6 <HAL_RCC_ClockConfig+0x34e>
 80027a8:	52002000 	.word	0x52002000
 80027ac:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d010      	beq.n	80027de <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	691a      	ldr	r2, [r3, #16]
 80027c0:	4b3f      	ldr	r3, [pc, #252]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d208      	bcs.n	80027de <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80027cc:	4b3c      	ldr	r3, [pc, #240]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 80027ce:	699b      	ldr	r3, [r3, #24]
 80027d0:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	4939      	ldr	r1, [pc, #228]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 80027da:	4313      	orrs	r3, r2
 80027dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0308 	and.w	r3, r3, #8
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d010      	beq.n	800280c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	695a      	ldr	r2, [r3, #20]
 80027ee:	4b34      	ldr	r3, [pc, #208]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 80027f0:	69db      	ldr	r3, [r3, #28]
 80027f2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80027f6:	429a      	cmp	r2, r3
 80027f8:	d208      	bcs.n	800280c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80027fa:	4b31      	ldr	r3, [pc, #196]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	695b      	ldr	r3, [r3, #20]
 8002806:	492e      	ldr	r1, [pc, #184]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 8002808:	4313      	orrs	r3, r2
 800280a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0310 	and.w	r3, r3, #16
 8002814:	2b00      	cmp	r3, #0
 8002816:	d010      	beq.n	800283a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	699a      	ldr	r2, [r3, #24]
 800281c:	4b28      	ldr	r3, [pc, #160]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 800281e:	69db      	ldr	r3, [r3, #28]
 8002820:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8002824:	429a      	cmp	r2, r3
 8002826:	d208      	bcs.n	800283a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002828:	4b25      	ldr	r3, [pc, #148]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 800282a:	69db      	ldr	r3, [r3, #28]
 800282c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	699b      	ldr	r3, [r3, #24]
 8002834:	4922      	ldr	r1, [pc, #136]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 8002836:	4313      	orrs	r3, r2
 8002838:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f003 0320 	and.w	r3, r3, #32
 8002842:	2b00      	cmp	r3, #0
 8002844:	d010      	beq.n	8002868 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	69da      	ldr	r2, [r3, #28]
 800284a:	4b1d      	ldr	r3, [pc, #116]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002852:	429a      	cmp	r2, r3
 8002854:	d208      	bcs.n	8002868 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002856:	4b1a      	ldr	r3, [pc, #104]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	4917      	ldr	r1, [pc, #92]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 8002864:	4313      	orrs	r3, r2
 8002866:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002868:	f000 f834 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 800286c:	4602      	mov	r2, r0
 800286e:	4b14      	ldr	r3, [pc, #80]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 8002870:	699b      	ldr	r3, [r3, #24]
 8002872:	0a1b      	lsrs	r3, r3, #8
 8002874:	f003 030f 	and.w	r3, r3, #15
 8002878:	4912      	ldr	r1, [pc, #72]	@ (80028c4 <HAL_RCC_ClockConfig+0x35c>)
 800287a:	5ccb      	ldrb	r3, [r1, r3]
 800287c:	f003 031f 	and.w	r3, r3, #31
 8002880:	fa22 f303 	lsr.w	r3, r2, r3
 8002884:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002886:	4b0e      	ldr	r3, [pc, #56]	@ (80028c0 <HAL_RCC_ClockConfig+0x358>)
 8002888:	699b      	ldr	r3, [r3, #24]
 800288a:	f003 030f 	and.w	r3, r3, #15
 800288e:	4a0d      	ldr	r2, [pc, #52]	@ (80028c4 <HAL_RCC_ClockConfig+0x35c>)
 8002890:	5cd3      	ldrb	r3, [r2, r3]
 8002892:	f003 031f 	and.w	r3, r3, #31
 8002896:	693a      	ldr	r2, [r7, #16]
 8002898:	fa22 f303 	lsr.w	r3, r2, r3
 800289c:	4a0a      	ldr	r2, [pc, #40]	@ (80028c8 <HAL_RCC_ClockConfig+0x360>)
 800289e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80028a0:	4a0a      	ldr	r2, [pc, #40]	@ (80028cc <HAL_RCC_ClockConfig+0x364>)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80028a6:	4b0a      	ldr	r3, [pc, #40]	@ (80028d0 <HAL_RCC_ClockConfig+0x368>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4618      	mov	r0, r3
 80028ac:	f7fe fe2c 	bl	8001508 <HAL_InitTick>
 80028b0:	4603      	mov	r3, r0
 80028b2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3718      	adds	r7, #24
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	58024400 	.word	0x58024400
 80028c4:	080065e4 	.word	0x080065e4
 80028c8:	24000004 	.word	0x24000004
 80028cc:	24000000 	.word	0x24000000
 80028d0:	2400000c 	.word	0x2400000c

080028d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b089      	sub	sp, #36	@ 0x24
 80028d8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028da:	4bb3      	ldr	r3, [pc, #716]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80028e2:	2b18      	cmp	r3, #24
 80028e4:	f200 8155 	bhi.w	8002b92 <HAL_RCC_GetSysClockFreq+0x2be>
 80028e8:	a201      	add	r2, pc, #4	@ (adr r2, 80028f0 <HAL_RCC_GetSysClockFreq+0x1c>)
 80028ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ee:	bf00      	nop
 80028f0:	08002955 	.word	0x08002955
 80028f4:	08002b93 	.word	0x08002b93
 80028f8:	08002b93 	.word	0x08002b93
 80028fc:	08002b93 	.word	0x08002b93
 8002900:	08002b93 	.word	0x08002b93
 8002904:	08002b93 	.word	0x08002b93
 8002908:	08002b93 	.word	0x08002b93
 800290c:	08002b93 	.word	0x08002b93
 8002910:	0800297b 	.word	0x0800297b
 8002914:	08002b93 	.word	0x08002b93
 8002918:	08002b93 	.word	0x08002b93
 800291c:	08002b93 	.word	0x08002b93
 8002920:	08002b93 	.word	0x08002b93
 8002924:	08002b93 	.word	0x08002b93
 8002928:	08002b93 	.word	0x08002b93
 800292c:	08002b93 	.word	0x08002b93
 8002930:	08002981 	.word	0x08002981
 8002934:	08002b93 	.word	0x08002b93
 8002938:	08002b93 	.word	0x08002b93
 800293c:	08002b93 	.word	0x08002b93
 8002940:	08002b93 	.word	0x08002b93
 8002944:	08002b93 	.word	0x08002b93
 8002948:	08002b93 	.word	0x08002b93
 800294c:	08002b93 	.word	0x08002b93
 8002950:	08002987 	.word	0x08002987
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002954:	4b94      	ldr	r3, [pc, #592]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0320 	and.w	r3, r3, #32
 800295c:	2b00      	cmp	r3, #0
 800295e:	d009      	beq.n	8002974 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002960:	4b91      	ldr	r3, [pc, #580]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	08db      	lsrs	r3, r3, #3
 8002966:	f003 0303 	and.w	r3, r3, #3
 800296a:	4a90      	ldr	r2, [pc, #576]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x2d8>)
 800296c:	fa22 f303 	lsr.w	r3, r2, r3
 8002970:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002972:	e111      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002974:	4b8d      	ldr	r3, [pc, #564]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002976:	61bb      	str	r3, [r7, #24]
      break;
 8002978:	e10e      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800297a:	4b8d      	ldr	r3, [pc, #564]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800297c:	61bb      	str	r3, [r7, #24]
      break;
 800297e:	e10b      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002980:	4b8c      	ldr	r3, [pc, #560]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002982:	61bb      	str	r3, [r7, #24]
      break;
 8002984:	e108      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002986:	4b88      	ldr	r3, [pc, #544]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800298a:	f003 0303 	and.w	r3, r3, #3
 800298e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002990:	4b85      	ldr	r3, [pc, #532]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002994:	091b      	lsrs	r3, r3, #4
 8002996:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800299a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800299c:	4b82      	ldr	r3, [pc, #520]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800299e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029a0:	f003 0301 	and.w	r3, r3, #1
 80029a4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80029a6:	4b80      	ldr	r3, [pc, #512]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029aa:	08db      	lsrs	r3, r3, #3
 80029ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	ee07 3a90 	vmov	s15, r3
 80029ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80029be:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 80e1 	beq.w	8002b8c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	f000 8083 	beq.w	8002ad8 <HAL_RCC_GetSysClockFreq+0x204>
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	f200 80a1 	bhi.w	8002b1c <HAL_RCC_GetSysClockFreq+0x248>
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d003      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x114>
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d056      	beq.n	8002a94 <HAL_RCC_GetSysClockFreq+0x1c0>
 80029e6:	e099      	b.n	8002b1c <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80029e8:	4b6f      	ldr	r3, [pc, #444]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f003 0320 	and.w	r3, r3, #32
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d02d      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80029f4:	4b6c      	ldr	r3, [pc, #432]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	08db      	lsrs	r3, r3, #3
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	4a6b      	ldr	r2, [pc, #428]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002a00:	fa22 f303 	lsr.w	r3, r2, r3
 8002a04:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	ee07 3a90 	vmov	s15, r3
 8002a0c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	ee07 3a90 	vmov	s15, r3
 8002a16:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a1a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a1e:	4b62      	ldr	r3, [pc, #392]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a22:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a26:	ee07 3a90 	vmov	s15, r3
 8002a2a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a2e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a32:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a36:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a3a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a3e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a42:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a4a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002a4e:	e087      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	ee07 3a90 	vmov	s15, r3
 8002a56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a5a:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002bbc <HAL_RCC_GetSysClockFreq+0x2e8>
 8002a5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002a62:	4b51      	ldr	r3, [pc, #324]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002a64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a6a:	ee07 3a90 	vmov	s15, r3
 8002a6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002a72:	ed97 6a02 	vldr	s12, [r7, #8]
 8002a76:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002a7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002a7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002a82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002a86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002a8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a8e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002a92:	e065      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	ee07 3a90 	vmov	s15, r3
 8002a9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002a9e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002bc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002aa2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aa6:	4b40      	ldr	r3, [pc, #256]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aaa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002aae:	ee07 3a90 	vmov	s15, r3
 8002ab2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002ab6:	ed97 6a02 	vldr	s12, [r7, #8]
 8002aba:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002abe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002ac2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002ac6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002aca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ace:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ad2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ad6:	e043      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	ee07 3a90 	vmov	s15, r3
 8002ade:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ae2:	eddf 6a38 	vldr	s13, [pc, #224]	@ 8002bc4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8002ae6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002aea:	4b2f      	ldr	r3, [pc, #188]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002af2:	ee07 3a90 	vmov	s15, r3
 8002af6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002afa:	ed97 6a02 	vldr	s12, [r7, #8]
 8002afe:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b16:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b1a:	e021      	b.n	8002b60 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002b1c:	693b      	ldr	r3, [r7, #16]
 8002b1e:	ee07 3a90 	vmov	s15, r3
 8002b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002b26:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002bc0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002b2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002b2e:	4b1e      	ldr	r3, [pc, #120]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b36:	ee07 3a90 	vmov	s15, r3
 8002b3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002b3e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002b42:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002bb8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002b46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002b4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002b4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002b52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002b56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b5a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002b5e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002b60:	4b11      	ldr	r3, [pc, #68]	@ (8002ba8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b64:	0a5b      	lsrs	r3, r3, #9
 8002b66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b6a:	3301      	adds	r3, #1
 8002b6c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	ee07 3a90 	vmov	s15, r3
 8002b74:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002b78:	edd7 6a07 	vldr	s13, [r7, #28]
 8002b7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b80:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b84:	ee17 3a90 	vmov	r3, s15
 8002b88:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8002b8a:	e005      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	61bb      	str	r3, [r7, #24]
      break;
 8002b90:	e002      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002b92:	4b07      	ldr	r3, [pc, #28]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002b94:	61bb      	str	r3, [r7, #24]
      break;
 8002b96:	bf00      	nop
  }

  return sysclockfreq;
 8002b98:	69bb      	ldr	r3, [r7, #24]
}
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	3724      	adds	r7, #36	@ 0x24
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	58024400 	.word	0x58024400
 8002bac:	03d09000 	.word	0x03d09000
 8002bb0:	003d0900 	.word	0x003d0900
 8002bb4:	017d7840 	.word	0x017d7840
 8002bb8:	46000000 	.word	0x46000000
 8002bbc:	4c742400 	.word	0x4c742400
 8002bc0:	4a742400 	.word	0x4a742400
 8002bc4:	4bbebc20 	.word	0x4bbebc20

08002bc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b082      	sub	sp, #8
 8002bcc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002bce:	f7ff fe81 	bl	80028d4 <HAL_RCC_GetSysClockFreq>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	4b10      	ldr	r3, [pc, #64]	@ (8002c18 <HAL_RCC_GetHCLKFreq+0x50>)
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	0a1b      	lsrs	r3, r3, #8
 8002bda:	f003 030f 	and.w	r3, r3, #15
 8002bde:	490f      	ldr	r1, [pc, #60]	@ (8002c1c <HAL_RCC_GetHCLKFreq+0x54>)
 8002be0:	5ccb      	ldrb	r3, [r1, r3]
 8002be2:	f003 031f 	and.w	r3, r3, #31
 8002be6:	fa22 f303 	lsr.w	r3, r2, r3
 8002bea:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002bec:	4b0a      	ldr	r3, [pc, #40]	@ (8002c18 <HAL_RCC_GetHCLKFreq+0x50>)
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	f003 030f 	and.w	r3, r3, #15
 8002bf4:	4a09      	ldr	r2, [pc, #36]	@ (8002c1c <HAL_RCC_GetHCLKFreq+0x54>)
 8002bf6:	5cd3      	ldrb	r3, [r2, r3]
 8002bf8:	f003 031f 	and.w	r3, r3, #31
 8002bfc:	687a      	ldr	r2, [r7, #4]
 8002bfe:	fa22 f303 	lsr.w	r3, r2, r3
 8002c02:	4a07      	ldr	r2, [pc, #28]	@ (8002c20 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c04:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002c06:	4a07      	ldr	r2, [pc, #28]	@ (8002c24 <HAL_RCC_GetHCLKFreq+0x5c>)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002c0c:	4b04      	ldr	r3, [pc, #16]	@ (8002c20 <HAL_RCC_GetHCLKFreq+0x58>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	58024400 	.word	0x58024400
 8002c1c:	080065e4 	.word	0x080065e4
 8002c20:	24000004 	.word	0x24000004
 8002c24:	24000000 	.word	0x24000000

08002c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002c2c:	f7ff ffcc 	bl	8002bc8 <HAL_RCC_GetHCLKFreq>
 8002c30:	4602      	mov	r2, r0
 8002c32:	4b06      	ldr	r3, [pc, #24]	@ (8002c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c34:	69db      	ldr	r3, [r3, #28]
 8002c36:	091b      	lsrs	r3, r3, #4
 8002c38:	f003 0307 	and.w	r3, r3, #7
 8002c3c:	4904      	ldr	r1, [pc, #16]	@ (8002c50 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002c3e:	5ccb      	ldrb	r3, [r1, r3]
 8002c40:	f003 031f 	and.w	r3, r3, #31
 8002c44:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	58024400 	.word	0x58024400
 8002c50:	080065e4 	.word	0x080065e4

08002c54 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8002c58:	f7ff ffb6 	bl	8002bc8 <HAL_RCC_GetHCLKFreq>
 8002c5c:	4602      	mov	r2, r0
 8002c5e:	4b06      	ldr	r3, [pc, #24]	@ (8002c78 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c60:	69db      	ldr	r3, [r3, #28]
 8002c62:	0a1b      	lsrs	r3, r3, #8
 8002c64:	f003 0307 	and.w	r3, r3, #7
 8002c68:	4904      	ldr	r1, [pc, #16]	@ (8002c7c <HAL_RCC_GetPCLK2Freq+0x28>)
 8002c6a:	5ccb      	ldrb	r3, [r1, r3]
 8002c6c:	f003 031f 	and.w	r3, r3, #31
 8002c70:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	58024400 	.word	0x58024400
 8002c7c:	080065e4 	.word	0x080065e4

08002c80 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8002c84:	f7ff ffa0 	bl	8002bc8 <HAL_RCC_GetHCLKFreq>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	4b06      	ldr	r3, [pc, #24]	@ (8002ca4 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	091b      	lsrs	r3, r3, #4
 8002c90:	f003 0307 	and.w	r3, r3, #7
 8002c94:	4904      	ldr	r1, [pc, #16]	@ (8002ca8 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8002c96:	5ccb      	ldrb	r3, [r1, r3]
 8002c98:	f003 031f 	and.w	r3, r3, #31
 8002c9c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	58024400 	.word	0x58024400
 8002ca8:	080065e4 	.word	0x080065e4

08002cac <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8002cac:	b480      	push	{r7}
 8002cae:	b089      	sub	sp, #36	@ 0x24
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002cb4:	4ba1      	ldr	r3, [pc, #644]	@ (8002f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cb8:	f003 0303 	and.w	r3, r3, #3
 8002cbc:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8002cbe:	4b9f      	ldr	r3, [pc, #636]	@ (8002f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc2:	0b1b      	lsrs	r3, r3, #12
 8002cc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cc8:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8002cca:	4b9c      	ldr	r3, [pc, #624]	@ (8002f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cce:	091b      	lsrs	r3, r3, #4
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8002cd6:	4b99      	ldr	r3, [pc, #612]	@ (8002f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cda:	08db      	lsrs	r3, r3, #3
 8002cdc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ce0:	693a      	ldr	r2, [r7, #16]
 8002ce2:	fb02 f303 	mul.w	r3, r2, r3
 8002ce6:	ee07 3a90 	vmov	s15, r3
 8002cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002cee:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 8111 	beq.w	8002f1c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	f000 8083 	beq.w	8002e08 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	2b02      	cmp	r3, #2
 8002d06:	f200 80a1 	bhi.w	8002e4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8002d0a:	69bb      	ldr	r3, [r7, #24]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8002d10:	69bb      	ldr	r3, [r7, #24]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d056      	beq.n	8002dc4 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8002d16:	e099      	b.n	8002e4c <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002d18:	4b88      	ldr	r3, [pc, #544]	@ (8002f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0320 	and.w	r3, r3, #32
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d02d      	beq.n	8002d80 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002d24:	4b85      	ldr	r3, [pc, #532]	@ (8002f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	08db      	lsrs	r3, r3, #3
 8002d2a:	f003 0303 	and.w	r3, r3, #3
 8002d2e:	4a84      	ldr	r2, [pc, #528]	@ (8002f40 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8002d30:	fa22 f303 	lsr.w	r3, r2, r3
 8002d34:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	ee07 3a90 	vmov	s15, r3
 8002d3c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	ee07 3a90 	vmov	s15, r3
 8002d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d4a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d4e:	4b7b      	ldr	r3, [pc, #492]	@ (8002f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d52:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d56:	ee07 3a90 	vmov	s15, r3
 8002d5a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002d5e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002d62:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8002f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002d66:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002d6a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002d6e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002d72:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002d76:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d7a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8002d7e:	e087      	b.n	8002e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	ee07 3a90 	vmov	s15, r3
 8002d86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d8a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8002f48 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8002d8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002d92:	4b6a      	ldr	r3, [pc, #424]	@ (8002f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002d94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d9a:	ee07 3a90 	vmov	s15, r3
 8002d9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002da2:	ed97 6a03 	vldr	s12, [r7, #12]
 8002da6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8002f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002daa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002dae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002db2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002db6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dbe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002dc2:	e065      	b.n	8002e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	ee07 3a90 	vmov	s15, r3
 8002dca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dce:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8002f4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002dd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002dd6:	4b59      	ldr	r3, [pc, #356]	@ (8002f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002dd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002dde:	ee07 3a90 	vmov	s15, r3
 8002de2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002de6:	ed97 6a03 	vldr	s12, [r7, #12]
 8002dea:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8002f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002dee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002df2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002df6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002dfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e06:	e043      	b.n	8002e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	ee07 3a90 	vmov	s15, r3
 8002e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e12:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8002f50 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8002e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e1a:	4b48      	ldr	r3, [pc, #288]	@ (8002f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002e1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e22:	ee07 3a90 	vmov	s15, r3
 8002e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e2e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8002f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e4a:	e021      	b.n	8002e90 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	ee07 3a90 	vmov	s15, r3
 8002e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e56:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8002f4c <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8002e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002e5e:	4b37      	ldr	r3, [pc, #220]	@ (8002f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e66:	ee07 3a90 	vmov	s15, r3
 8002e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8002e72:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8002f44 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8002e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002e7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8002e8e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8002e90:	4b2a      	ldr	r3, [pc, #168]	@ (8002f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002e92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e94:	0a5b      	lsrs	r3, r3, #9
 8002e96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e9a:	ee07 3a90 	vmov	s15, r3
 8002e9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ea2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ea6:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002eaa:	edd7 6a07 	vldr	s13, [r7, #28]
 8002eae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002eb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002eb6:	ee17 2a90 	vmov	r2, s15
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8002ebe:	4b1f      	ldr	r3, [pc, #124]	@ (8002f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002ec0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec2:	0c1b      	lsrs	r3, r3, #16
 8002ec4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ec8:	ee07 3a90 	vmov	s15, r3
 8002ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ed0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002ed4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002ed8:	edd7 6a07 	vldr	s13, [r7, #28]
 8002edc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ee0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ee4:	ee17 2a90 	vmov	r2, s15
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8002eec:	4b13      	ldr	r3, [pc, #76]	@ (8002f3c <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8002eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef0:	0e1b      	lsrs	r3, r3, #24
 8002ef2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ef6:	ee07 3a90 	vmov	s15, r3
 8002efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002efe:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002f02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002f06:	edd7 6a07 	vldr	s13, [r7, #28]
 8002f0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002f12:	ee17 2a90 	vmov	r2, s15
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8002f1a:	e008      	b.n	8002f2e <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	2200      	movs	r2, #0
 8002f26:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	609a      	str	r2, [r3, #8]
}
 8002f2e:	bf00      	nop
 8002f30:	3724      	adds	r7, #36	@ 0x24
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	58024400 	.word	0x58024400
 8002f40:	03d09000 	.word	0x03d09000
 8002f44:	46000000 	.word	0x46000000
 8002f48:	4c742400 	.word	0x4c742400
 8002f4c:	4a742400 	.word	0x4a742400
 8002f50:	4bbebc20 	.word	0x4bbebc20

08002f54 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b089      	sub	sp, #36	@ 0x24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002f5c:	4ba1      	ldr	r3, [pc, #644]	@ (80031e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f60:	f003 0303 	and.w	r3, r3, #3
 8002f64:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8002f66:	4b9f      	ldr	r3, [pc, #636]	@ (80031e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f6a:	0d1b      	lsrs	r3, r3, #20
 8002f6c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002f70:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8002f72:	4b9c      	ldr	r3, [pc, #624]	@ (80031e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f76:	0a1b      	lsrs	r3, r3, #8
 8002f78:	f003 0301 	and.w	r3, r3, #1
 8002f7c:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8002f7e:	4b99      	ldr	r3, [pc, #612]	@ (80031e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002f80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f82:	08db      	lsrs	r3, r3, #3
 8002f84:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f88:	693a      	ldr	r2, [r7, #16]
 8002f8a:	fb02 f303 	mul.w	r3, r2, r3
 8002f8e:	ee07 3a90 	vmov	s15, r3
 8002f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f96:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	f000 8111 	beq.w	80031c4 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8002fa2:	69bb      	ldr	r3, [r7, #24]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	f000 8083 	beq.w	80030b0 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	f200 80a1 	bhi.w	80030f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8002fb8:	69bb      	ldr	r3, [r7, #24]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d056      	beq.n	800306c <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8002fbe:	e099      	b.n	80030f4 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002fc0:	4b88      	ldr	r3, [pc, #544]	@ (80031e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f003 0320 	and.w	r3, r3, #32
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d02d      	beq.n	8003028 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002fcc:	4b85      	ldr	r3, [pc, #532]	@ (80031e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	08db      	lsrs	r3, r3, #3
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	4a84      	ldr	r2, [pc, #528]	@ (80031e8 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8002fd8:	fa22 f303 	lsr.w	r3, r2, r3
 8002fdc:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	ee07 3a90 	vmov	s15, r3
 8002fe4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	ee07 3a90 	vmov	s15, r3
 8002fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ff2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ff6:	4b7b      	ldr	r3, [pc, #492]	@ (80031e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8002ff8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ffa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ffe:	ee07 3a90 	vmov	s15, r3
 8003002:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003006:	ed97 6a03 	vldr	s12, [r7, #12]
 800300a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 80031ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800300e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003012:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003016:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800301a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800301e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003022:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003026:	e087      	b.n	8003138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003028:	697b      	ldr	r3, [r7, #20]
 800302a:	ee07 3a90 	vmov	s15, r3
 800302e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003032:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 80031f0 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003036:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800303a:	4b6a      	ldr	r3, [pc, #424]	@ (80031e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003042:	ee07 3a90 	vmov	s15, r3
 8003046:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800304a:	ed97 6a03 	vldr	s12, [r7, #12]
 800304e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 80031ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003052:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003056:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800305a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800305e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003066:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800306a:	e065      	b.n	8003138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800306c:	697b      	ldr	r3, [r7, #20]
 800306e:	ee07 3a90 	vmov	s15, r3
 8003072:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003076:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 80031f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800307a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800307e:	4b59      	ldr	r3, [pc, #356]	@ (80031e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003082:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003086:	ee07 3a90 	vmov	s15, r3
 800308a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800308e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003092:	eddf 5a56 	vldr	s11, [pc, #344]	@ 80031ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003096:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800309a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800309e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030aa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80030ae:	e043      	b.n	8003138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	ee07 3a90 	vmov	s15, r3
 80030b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030ba:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 80031f8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80030be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80030c2:	4b48      	ldr	r3, [pc, #288]	@ (80031e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030ca:	ee07 3a90 	vmov	s15, r3
 80030ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80030d6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 80031ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80030da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80030e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80030f2:	e021      	b.n	8003138 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	ee07 3a90 	vmov	s15, r3
 80030fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80030fe:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80031f4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003106:	4b37      	ldr	r3, [pc, #220]	@ (80031e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800310a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800310e:	ee07 3a90 	vmov	s15, r3
 8003112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003116:	ed97 6a03 	vldr	s12, [r7, #12]
 800311a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80031ec <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800311e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003126:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800312a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800312e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003132:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003136:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003138:	4b2a      	ldr	r3, [pc, #168]	@ (80031e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800313a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800313c:	0a5b      	lsrs	r3, r3, #9
 800313e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003142:	ee07 3a90 	vmov	s15, r3
 8003146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800314a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800314e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003152:	edd7 6a07 	vldr	s13, [r7, #28]
 8003156:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800315a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800315e:	ee17 2a90 	vmov	r2, s15
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003166:	4b1f      	ldr	r3, [pc, #124]	@ (80031e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316a:	0c1b      	lsrs	r3, r3, #16
 800316c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003170:	ee07 3a90 	vmov	s15, r3
 8003174:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003178:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800317c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003180:	edd7 6a07 	vldr	s13, [r7, #28]
 8003184:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003188:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800318c:	ee17 2a90 	vmov	r2, s15
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003194:	4b13      	ldr	r3, [pc, #76]	@ (80031e4 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003198:	0e1b      	lsrs	r3, r3, #24
 800319a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800319e:	ee07 3a90 	vmov	s15, r3
 80031a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031a6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80031aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80031ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80031b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80031b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80031ba:	ee17 2a90 	vmov	r2, s15
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80031c2:	e008      	b.n	80031d6 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2200      	movs	r2, #0
 80031d4:	609a      	str	r2, [r3, #8]
}
 80031d6:	bf00      	nop
 80031d8:	3724      	adds	r7, #36	@ 0x24
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	58024400 	.word	0x58024400
 80031e8:	03d09000 	.word	0x03d09000
 80031ec:	46000000 	.word	0x46000000
 80031f0:	4c742400 	.word	0x4c742400
 80031f4:	4a742400 	.word	0x4a742400
 80031f8:	4bbebc20 	.word	0x4bbebc20

080031fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2b00      	cmp	r3, #0
 8003208:	d101      	bne.n	800320e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800320a:	2301      	movs	r3, #1
 800320c:	e049      	b.n	80032a2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003214:	b2db      	uxtb	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d106      	bne.n	8003228 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7fd fe8a 	bl	8000f3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2202      	movs	r2, #2
 800322c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	3304      	adds	r3, #4
 8003238:	4619      	mov	r1, r3
 800323a:	4610      	mov	r0, r2
 800323c:	f000 fbf2 	bl	8003a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}

080032aa <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80032aa:	b580      	push	{r7, lr}
 80032ac:	b082      	sub	sp, #8
 80032ae:	af00      	add	r7, sp, #0
 80032b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d101      	bne.n	80032bc <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e049      	b.n	8003350 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032c2:	b2db      	uxtb	r3, r3
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d106      	bne.n	80032d6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2200      	movs	r2, #0
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f000 f841 	bl	8003358 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2202      	movs	r2, #2
 80032da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	3304      	adds	r3, #4
 80032e6:	4619      	mov	r1, r3
 80032e8:	4610      	mov	r0, r2
 80032ea:	f000 fb9b 	bl	8003a24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2201      	movs	r2, #1
 80032f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2201      	movs	r2, #1
 80032fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2201      	movs	r2, #1
 800330a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2201      	movs	r2, #1
 800331a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2201      	movs	r2, #1
 8003322:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2201      	movs	r2, #1
 800332a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2201      	movs	r2, #1
 8003332:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	2201      	movs	r2, #1
 8003342:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2201      	movs	r2, #1
 800334a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800334e:	2300      	movs	r3, #0
}
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003358:	b480      	push	{r7}
 800335a:	b083      	sub	sp, #12
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003360:	bf00      	nop
 8003362:	370c      	adds	r7, #12
 8003364:	46bd      	mov	sp, r7
 8003366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336a:	4770      	bx	lr

0800336c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
 8003374:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d109      	bne.n	8003390 <HAL_TIM_PWM_Start+0x24>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003382:	b2db      	uxtb	r3, r3
 8003384:	2b01      	cmp	r3, #1
 8003386:	bf14      	ite	ne
 8003388:	2301      	movne	r3, #1
 800338a:	2300      	moveq	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	e03c      	b.n	800340a <HAL_TIM_PWM_Start+0x9e>
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	2b04      	cmp	r3, #4
 8003394:	d109      	bne.n	80033aa <HAL_TIM_PWM_Start+0x3e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800339c:	b2db      	uxtb	r3, r3
 800339e:	2b01      	cmp	r3, #1
 80033a0:	bf14      	ite	ne
 80033a2:	2301      	movne	r3, #1
 80033a4:	2300      	moveq	r3, #0
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	e02f      	b.n	800340a <HAL_TIM_PWM_Start+0x9e>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	2b08      	cmp	r3, #8
 80033ae:	d109      	bne.n	80033c4 <HAL_TIM_PWM_Start+0x58>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	bf14      	ite	ne
 80033bc:	2301      	movne	r3, #1
 80033be:	2300      	moveq	r3, #0
 80033c0:	b2db      	uxtb	r3, r3
 80033c2:	e022      	b.n	800340a <HAL_TIM_PWM_Start+0x9e>
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	2b0c      	cmp	r3, #12
 80033c8:	d109      	bne.n	80033de <HAL_TIM_PWM_Start+0x72>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	bf14      	ite	ne
 80033d6:	2301      	movne	r3, #1
 80033d8:	2300      	moveq	r3, #0
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	e015      	b.n	800340a <HAL_TIM_PWM_Start+0x9e>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	2b10      	cmp	r3, #16
 80033e2:	d109      	bne.n	80033f8 <HAL_TIM_PWM_Start+0x8c>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	bf14      	ite	ne
 80033f0:	2301      	movne	r3, #1
 80033f2:	2300      	moveq	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	e008      	b.n	800340a <HAL_TIM_PWM_Start+0x9e>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	2b01      	cmp	r3, #1
 8003402:	bf14      	ite	ne
 8003404:	2301      	movne	r3, #1
 8003406:	2300      	moveq	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e0a1      	b.n	8003556 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d104      	bne.n	8003422 <HAL_TIM_PWM_Start+0xb6>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003420:	e023      	b.n	800346a <HAL_TIM_PWM_Start+0xfe>
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	2b04      	cmp	r3, #4
 8003426:	d104      	bne.n	8003432 <HAL_TIM_PWM_Start+0xc6>
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003430:	e01b      	b.n	800346a <HAL_TIM_PWM_Start+0xfe>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	2b08      	cmp	r3, #8
 8003436:	d104      	bne.n	8003442 <HAL_TIM_PWM_Start+0xd6>
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2202      	movs	r2, #2
 800343c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003440:	e013      	b.n	800346a <HAL_TIM_PWM_Start+0xfe>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	2b0c      	cmp	r3, #12
 8003446:	d104      	bne.n	8003452 <HAL_TIM_PWM_Start+0xe6>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2202      	movs	r2, #2
 800344c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003450:	e00b      	b.n	800346a <HAL_TIM_PWM_Start+0xfe>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	2b10      	cmp	r3, #16
 8003456:	d104      	bne.n	8003462 <HAL_TIM_PWM_Start+0xf6>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2202      	movs	r2, #2
 800345c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003460:	e003      	b.n	800346a <HAL_TIM_PWM_Start+0xfe>
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2202      	movs	r2, #2
 8003466:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2201      	movs	r2, #1
 8003470:	6839      	ldr	r1, [r7, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f000 ffd4 	bl	8004420 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a38      	ldr	r2, [pc, #224]	@ (8003560 <HAL_TIM_PWM_Start+0x1f4>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d013      	beq.n	80034aa <HAL_TIM_PWM_Start+0x13e>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	4a37      	ldr	r2, [pc, #220]	@ (8003564 <HAL_TIM_PWM_Start+0x1f8>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00e      	beq.n	80034aa <HAL_TIM_PWM_Start+0x13e>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4a35      	ldr	r2, [pc, #212]	@ (8003568 <HAL_TIM_PWM_Start+0x1fc>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d009      	beq.n	80034aa <HAL_TIM_PWM_Start+0x13e>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a34      	ldr	r2, [pc, #208]	@ (800356c <HAL_TIM_PWM_Start+0x200>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d004      	beq.n	80034aa <HAL_TIM_PWM_Start+0x13e>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	4a32      	ldr	r2, [pc, #200]	@ (8003570 <HAL_TIM_PWM_Start+0x204>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d101      	bne.n	80034ae <HAL_TIM_PWM_Start+0x142>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <HAL_TIM_PWM_Start+0x144>
 80034ae:	2300      	movs	r3, #0
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d007      	beq.n	80034c4 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80034c2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a25      	ldr	r2, [pc, #148]	@ (8003560 <HAL_TIM_PWM_Start+0x1f4>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d022      	beq.n	8003514 <HAL_TIM_PWM_Start+0x1a8>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80034d6:	d01d      	beq.n	8003514 <HAL_TIM_PWM_Start+0x1a8>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a25      	ldr	r2, [pc, #148]	@ (8003574 <HAL_TIM_PWM_Start+0x208>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d018      	beq.n	8003514 <HAL_TIM_PWM_Start+0x1a8>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a24      	ldr	r2, [pc, #144]	@ (8003578 <HAL_TIM_PWM_Start+0x20c>)
 80034e8:	4293      	cmp	r3, r2
 80034ea:	d013      	beq.n	8003514 <HAL_TIM_PWM_Start+0x1a8>
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a22      	ldr	r2, [pc, #136]	@ (800357c <HAL_TIM_PWM_Start+0x210>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d00e      	beq.n	8003514 <HAL_TIM_PWM_Start+0x1a8>
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4a1a      	ldr	r2, [pc, #104]	@ (8003564 <HAL_TIM_PWM_Start+0x1f8>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d009      	beq.n	8003514 <HAL_TIM_PWM_Start+0x1a8>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	4a1e      	ldr	r2, [pc, #120]	@ (8003580 <HAL_TIM_PWM_Start+0x214>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d004      	beq.n	8003514 <HAL_TIM_PWM_Start+0x1a8>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	4a16      	ldr	r2, [pc, #88]	@ (8003568 <HAL_TIM_PWM_Start+0x1fc>)
 8003510:	4293      	cmp	r3, r2
 8003512:	d115      	bne.n	8003540 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689a      	ldr	r2, [r3, #8]
 800351a:	4b1a      	ldr	r3, [pc, #104]	@ (8003584 <HAL_TIM_PWM_Start+0x218>)
 800351c:	4013      	ands	r3, r2
 800351e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2b06      	cmp	r3, #6
 8003524:	d015      	beq.n	8003552 <HAL_TIM_PWM_Start+0x1e6>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800352c:	d011      	beq.n	8003552 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f042 0201 	orr.w	r2, r2, #1
 800353c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800353e:	e008      	b.n	8003552 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0201 	orr.w	r2, r2, #1
 800354e:	601a      	str	r2, [r3, #0]
 8003550:	e000      	b.n	8003554 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003552:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003554:	2300      	movs	r3, #0
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
 800355e:	bf00      	nop
 8003560:	40010000 	.word	0x40010000
 8003564:	40010400 	.word	0x40010400
 8003568:	40014000 	.word	0x40014000
 800356c:	40014400 	.word	0x40014400
 8003570:	40014800 	.word	0x40014800
 8003574:	40000400 	.word	0x40000400
 8003578:	40000800 	.word	0x40000800
 800357c:	40000c00 	.word	0x40000c00
 8003580:	40001800 	.word	0x40001800
 8003584:	00010007 	.word	0x00010007

08003588 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003588:	b580      	push	{r7, lr}
 800358a:	b086      	sub	sp, #24
 800358c:	af00      	add	r7, sp, #0
 800358e:	60f8      	str	r0, [r7, #12]
 8003590:	60b9      	str	r1, [r7, #8]
 8003592:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003594:	2300      	movs	r3, #0
 8003596:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800359e:	2b01      	cmp	r3, #1
 80035a0:	d101      	bne.n	80035a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035a2:	2302      	movs	r3, #2
 80035a4:	e0ff      	b.n	80037a6 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2201      	movs	r2, #1
 80035aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2b14      	cmp	r3, #20
 80035b2:	f200 80f0 	bhi.w	8003796 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80035b6:	a201      	add	r2, pc, #4	@ (adr r2, 80035bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80035b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035bc:	08003611 	.word	0x08003611
 80035c0:	08003797 	.word	0x08003797
 80035c4:	08003797 	.word	0x08003797
 80035c8:	08003797 	.word	0x08003797
 80035cc:	08003651 	.word	0x08003651
 80035d0:	08003797 	.word	0x08003797
 80035d4:	08003797 	.word	0x08003797
 80035d8:	08003797 	.word	0x08003797
 80035dc:	08003693 	.word	0x08003693
 80035e0:	08003797 	.word	0x08003797
 80035e4:	08003797 	.word	0x08003797
 80035e8:	08003797 	.word	0x08003797
 80035ec:	080036d3 	.word	0x080036d3
 80035f0:	08003797 	.word	0x08003797
 80035f4:	08003797 	.word	0x08003797
 80035f8:	08003797 	.word	0x08003797
 80035fc:	08003715 	.word	0x08003715
 8003600:	08003797 	.word	0x08003797
 8003604:	08003797 	.word	0x08003797
 8003608:	08003797 	.word	0x08003797
 800360c:	08003755 	.word	0x08003755
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68b9      	ldr	r1, [r7, #8]
 8003616:	4618      	mov	r0, r3
 8003618:	f000 faa4 	bl	8003b64 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699a      	ldr	r2, [r3, #24]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f042 0208 	orr.w	r2, r2, #8
 800362a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699a      	ldr	r2, [r3, #24]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f022 0204 	bic.w	r2, r2, #4
 800363a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	6999      	ldr	r1, [r3, #24]
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	691a      	ldr	r2, [r3, #16]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	430a      	orrs	r2, r1
 800364c:	619a      	str	r2, [r3, #24]
      break;
 800364e:	e0a5      	b.n	800379c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	4618      	mov	r0, r3
 8003658:	f000 fb14 	bl	8003c84 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	699a      	ldr	r2, [r3, #24]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800366a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699a      	ldr	r2, [r3, #24]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800367a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	6999      	ldr	r1, [r3, #24]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	021a      	lsls	r2, r3, #8
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	430a      	orrs	r2, r1
 800368e:	619a      	str	r2, [r3, #24]
      break;
 8003690:	e084      	b.n	800379c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	68b9      	ldr	r1, [r7, #8]
 8003698:	4618      	mov	r0, r3
 800369a:	f000 fb7d 	bl	8003d98 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	69da      	ldr	r2, [r3, #28]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f042 0208 	orr.w	r2, r2, #8
 80036ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	69da      	ldr	r2, [r3, #28]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0204 	bic.w	r2, r2, #4
 80036bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	69d9      	ldr	r1, [r3, #28]
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	691a      	ldr	r2, [r3, #16]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	430a      	orrs	r2, r1
 80036ce:	61da      	str	r2, [r3, #28]
      break;
 80036d0:	e064      	b.n	800379c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68b9      	ldr	r1, [r7, #8]
 80036d8:	4618      	mov	r0, r3
 80036da:	f000 fbe5 	bl	8003ea8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	69da      	ldr	r2, [r3, #28]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80036ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	69da      	ldr	r2, [r3, #28]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	69d9      	ldr	r1, [r3, #28]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	021a      	lsls	r2, r3, #8
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	430a      	orrs	r2, r1
 8003710:	61da      	str	r2, [r3, #28]
      break;
 8003712:	e043      	b.n	800379c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	68b9      	ldr	r1, [r7, #8]
 800371a:	4618      	mov	r0, r3
 800371c:	f000 fc2e 	bl	8003f7c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0208 	orr.w	r2, r2, #8
 800372e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f022 0204 	bic.w	r2, r2, #4
 800373e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	691a      	ldr	r2, [r3, #16]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	430a      	orrs	r2, r1
 8003750:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003752:	e023      	b.n	800379c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	4618      	mov	r0, r3
 800375c:	f000 fc72 	bl	8004044 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800376e:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800377e:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	691b      	ldr	r3, [r3, #16]
 800378a:	021a      	lsls	r2, r3, #8
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	430a      	orrs	r2, r1
 8003792:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8003794:	e002      	b.n	800379c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	75fb      	strb	r3, [r7, #23]
      break;
 800379a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3718      	adds	r7, #24
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop

080037b0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80037ba:	2300      	movs	r3, #0
 80037bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d101      	bne.n	80037cc <HAL_TIM_ConfigClockSource+0x1c>
 80037c8:	2302      	movs	r3, #2
 80037ca:	e0dc      	b.n	8003986 <HAL_TIM_ConfigClockSource+0x1d6>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2202      	movs	r2, #2
 80037d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	4b6a      	ldr	r3, [pc, #424]	@ (8003990 <HAL_TIM_ConfigClockSource+0x1e0>)
 80037e8:	4013      	ands	r3, r2
 80037ea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80037f2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	68ba      	ldr	r2, [r7, #8]
 80037fa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a64      	ldr	r2, [pc, #400]	@ (8003994 <HAL_TIM_ConfigClockSource+0x1e4>)
 8003802:	4293      	cmp	r3, r2
 8003804:	f000 80a9 	beq.w	800395a <HAL_TIM_ConfigClockSource+0x1aa>
 8003808:	4a62      	ldr	r2, [pc, #392]	@ (8003994 <HAL_TIM_ConfigClockSource+0x1e4>)
 800380a:	4293      	cmp	r3, r2
 800380c:	f200 80ae 	bhi.w	800396c <HAL_TIM_ConfigClockSource+0x1bc>
 8003810:	4a61      	ldr	r2, [pc, #388]	@ (8003998 <HAL_TIM_ConfigClockSource+0x1e8>)
 8003812:	4293      	cmp	r3, r2
 8003814:	f000 80a1 	beq.w	800395a <HAL_TIM_ConfigClockSource+0x1aa>
 8003818:	4a5f      	ldr	r2, [pc, #380]	@ (8003998 <HAL_TIM_ConfigClockSource+0x1e8>)
 800381a:	4293      	cmp	r3, r2
 800381c:	f200 80a6 	bhi.w	800396c <HAL_TIM_ConfigClockSource+0x1bc>
 8003820:	4a5e      	ldr	r2, [pc, #376]	@ (800399c <HAL_TIM_ConfigClockSource+0x1ec>)
 8003822:	4293      	cmp	r3, r2
 8003824:	f000 8099 	beq.w	800395a <HAL_TIM_ConfigClockSource+0x1aa>
 8003828:	4a5c      	ldr	r2, [pc, #368]	@ (800399c <HAL_TIM_ConfigClockSource+0x1ec>)
 800382a:	4293      	cmp	r3, r2
 800382c:	f200 809e 	bhi.w	800396c <HAL_TIM_ConfigClockSource+0x1bc>
 8003830:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8003834:	f000 8091 	beq.w	800395a <HAL_TIM_ConfigClockSource+0x1aa>
 8003838:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 800383c:	f200 8096 	bhi.w	800396c <HAL_TIM_ConfigClockSource+0x1bc>
 8003840:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003844:	f000 8089 	beq.w	800395a <HAL_TIM_ConfigClockSource+0x1aa>
 8003848:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800384c:	f200 808e 	bhi.w	800396c <HAL_TIM_ConfigClockSource+0x1bc>
 8003850:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003854:	d03e      	beq.n	80038d4 <HAL_TIM_ConfigClockSource+0x124>
 8003856:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800385a:	f200 8087 	bhi.w	800396c <HAL_TIM_ConfigClockSource+0x1bc>
 800385e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003862:	f000 8086 	beq.w	8003972 <HAL_TIM_ConfigClockSource+0x1c2>
 8003866:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800386a:	d87f      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x1bc>
 800386c:	2b70      	cmp	r3, #112	@ 0x70
 800386e:	d01a      	beq.n	80038a6 <HAL_TIM_ConfigClockSource+0xf6>
 8003870:	2b70      	cmp	r3, #112	@ 0x70
 8003872:	d87b      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x1bc>
 8003874:	2b60      	cmp	r3, #96	@ 0x60
 8003876:	d050      	beq.n	800391a <HAL_TIM_ConfigClockSource+0x16a>
 8003878:	2b60      	cmp	r3, #96	@ 0x60
 800387a:	d877      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x1bc>
 800387c:	2b50      	cmp	r3, #80	@ 0x50
 800387e:	d03c      	beq.n	80038fa <HAL_TIM_ConfigClockSource+0x14a>
 8003880:	2b50      	cmp	r3, #80	@ 0x50
 8003882:	d873      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x1bc>
 8003884:	2b40      	cmp	r3, #64	@ 0x40
 8003886:	d058      	beq.n	800393a <HAL_TIM_ConfigClockSource+0x18a>
 8003888:	2b40      	cmp	r3, #64	@ 0x40
 800388a:	d86f      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x1bc>
 800388c:	2b30      	cmp	r3, #48	@ 0x30
 800388e:	d064      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x1aa>
 8003890:	2b30      	cmp	r3, #48	@ 0x30
 8003892:	d86b      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x1bc>
 8003894:	2b20      	cmp	r3, #32
 8003896:	d060      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x1aa>
 8003898:	2b20      	cmp	r3, #32
 800389a:	d867      	bhi.n	800396c <HAL_TIM_ConfigClockSource+0x1bc>
 800389c:	2b00      	cmp	r3, #0
 800389e:	d05c      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x1aa>
 80038a0:	2b10      	cmp	r3, #16
 80038a2:	d05a      	beq.n	800395a <HAL_TIM_ConfigClockSource+0x1aa>
 80038a4:	e062      	b.n	800396c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038b6:	f000 fd93 	bl	80043e0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80038c8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	68ba      	ldr	r2, [r7, #8]
 80038d0:	609a      	str	r2, [r3, #8]
      break;
 80038d2:	e04f      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038e4:	f000 fd7c 	bl	80043e0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038f6:	609a      	str	r2, [r3, #8]
      break;
 80038f8:	e03c      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003906:	461a      	mov	r2, r3
 8003908:	f000 fcec 	bl	80042e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2150      	movs	r1, #80	@ 0x50
 8003912:	4618      	mov	r0, r3
 8003914:	f000 fd46 	bl	80043a4 <TIM_ITRx_SetConfig>
      break;
 8003918:	e02c      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003926:	461a      	mov	r2, r3
 8003928:	f000 fd0b 	bl	8004342 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2160      	movs	r1, #96	@ 0x60
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fd36 	bl	80043a4 <TIM_ITRx_SetConfig>
      break;
 8003938:	e01c      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003946:	461a      	mov	r2, r3
 8003948:	f000 fccc 	bl	80042e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2140      	movs	r1, #64	@ 0x40
 8003952:	4618      	mov	r0, r3
 8003954:	f000 fd26 	bl	80043a4 <TIM_ITRx_SetConfig>
      break;
 8003958:	e00c      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4619      	mov	r1, r3
 8003964:	4610      	mov	r0, r2
 8003966:	f000 fd1d 	bl	80043a4 <TIM_ITRx_SetConfig>
      break;
 800396a:	e003      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800396c:	2301      	movs	r3, #1
 800396e:	73fb      	strb	r3, [r7, #15]
      break;
 8003970:	e000      	b.n	8003974 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 8003972:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003984:	7bfb      	ldrb	r3, [r7, #15]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3710      	adds	r7, #16
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	ffceff88 	.word	0xffceff88
 8003994:	00100040 	.word	0x00100040
 8003998:	00100030 	.word	0x00100030
 800399c:	00100020 	.word	0x00100020

080039a0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e031      	b.n	8003a1c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80039c8:	6839      	ldr	r1, [r7, #0]
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f000 fba0 	bl	8004110 <TIM_SlaveTimer_SetConfig>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d009      	beq.n	80039ea <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e018      	b.n	8003a1c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	68da      	ldr	r2, [r3, #12]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039f8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	68da      	ldr	r2, [r3, #12]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003a08:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2200      	movs	r2, #0
 8003a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003a1a:	2300      	movs	r3, #0
}
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	3708      	adds	r7, #8
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a24:	b480      	push	{r7}
 8003a26:	b085      	sub	sp, #20
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a43      	ldr	r2, [pc, #268]	@ (8003b44 <TIM_Base_SetConfig+0x120>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d013      	beq.n	8003a64 <TIM_Base_SetConfig+0x40>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a42:	d00f      	beq.n	8003a64 <TIM_Base_SetConfig+0x40>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a40      	ldr	r2, [pc, #256]	@ (8003b48 <TIM_Base_SetConfig+0x124>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d00b      	beq.n	8003a64 <TIM_Base_SetConfig+0x40>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a3f      	ldr	r2, [pc, #252]	@ (8003b4c <TIM_Base_SetConfig+0x128>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d007      	beq.n	8003a64 <TIM_Base_SetConfig+0x40>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a3e      	ldr	r2, [pc, #248]	@ (8003b50 <TIM_Base_SetConfig+0x12c>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d003      	beq.n	8003a64 <TIM_Base_SetConfig+0x40>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a3d      	ldr	r2, [pc, #244]	@ (8003b54 <TIM_Base_SetConfig+0x130>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d108      	bne.n	8003a76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	4313      	orrs	r3, r2
 8003a74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a32      	ldr	r2, [pc, #200]	@ (8003b44 <TIM_Base_SetConfig+0x120>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d01f      	beq.n	8003abe <TIM_Base_SetConfig+0x9a>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a84:	d01b      	beq.n	8003abe <TIM_Base_SetConfig+0x9a>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a2f      	ldr	r2, [pc, #188]	@ (8003b48 <TIM_Base_SetConfig+0x124>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d017      	beq.n	8003abe <TIM_Base_SetConfig+0x9a>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a2e      	ldr	r2, [pc, #184]	@ (8003b4c <TIM_Base_SetConfig+0x128>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d013      	beq.n	8003abe <TIM_Base_SetConfig+0x9a>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a2d      	ldr	r2, [pc, #180]	@ (8003b50 <TIM_Base_SetConfig+0x12c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d00f      	beq.n	8003abe <TIM_Base_SetConfig+0x9a>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a2c      	ldr	r2, [pc, #176]	@ (8003b54 <TIM_Base_SetConfig+0x130>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d00b      	beq.n	8003abe <TIM_Base_SetConfig+0x9a>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a2b      	ldr	r2, [pc, #172]	@ (8003b58 <TIM_Base_SetConfig+0x134>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d007      	beq.n	8003abe <TIM_Base_SetConfig+0x9a>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a2a      	ldr	r2, [pc, #168]	@ (8003b5c <TIM_Base_SetConfig+0x138>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d003      	beq.n	8003abe <TIM_Base_SetConfig+0x9a>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a29      	ldr	r2, [pc, #164]	@ (8003b60 <TIM_Base_SetConfig+0x13c>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d108      	bne.n	8003ad0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ac4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ac6:	683b      	ldr	r3, [r7, #0]
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	68fa      	ldr	r2, [r7, #12]
 8003acc:	4313      	orrs	r3, r2
 8003ace:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	689a      	ldr	r2, [r3, #8]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	681a      	ldr	r2, [r3, #0]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a14      	ldr	r2, [pc, #80]	@ (8003b44 <TIM_Base_SetConfig+0x120>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00f      	beq.n	8003b16 <TIM_Base_SetConfig+0xf2>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a16      	ldr	r2, [pc, #88]	@ (8003b54 <TIM_Base_SetConfig+0x130>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d00b      	beq.n	8003b16 <TIM_Base_SetConfig+0xf2>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a15      	ldr	r2, [pc, #84]	@ (8003b58 <TIM_Base_SetConfig+0x134>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d007      	beq.n	8003b16 <TIM_Base_SetConfig+0xf2>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	4a14      	ldr	r2, [pc, #80]	@ (8003b5c <TIM_Base_SetConfig+0x138>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d003      	beq.n	8003b16 <TIM_Base_SetConfig+0xf2>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	4a13      	ldr	r2, [pc, #76]	@ (8003b60 <TIM_Base_SetConfig+0x13c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d103      	bne.n	8003b1e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	691a      	ldr	r2, [r3, #16]
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f043 0204 	orr.w	r2, r3, #4
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	601a      	str	r2, [r3, #0]
}
 8003b36:	bf00      	nop
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	40010000 	.word	0x40010000
 8003b48:	40000400 	.word	0x40000400
 8003b4c:	40000800 	.word	0x40000800
 8003b50:	40000c00 	.word	0x40000c00
 8003b54:	40010400 	.word	0x40010400
 8003b58:	40014000 	.word	0x40014000
 8003b5c:	40014400 	.word	0x40014400
 8003b60:	40014800 	.word	0x40014800

08003b64 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b087      	sub	sp, #28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6a1b      	ldr	r3, [r3, #32]
 8003b78:	f023 0201 	bic.w	r2, r3, #1
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	699b      	ldr	r3, [r3, #24]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	4b37      	ldr	r3, [pc, #220]	@ (8003c6c <TIM_OC1_SetConfig+0x108>)
 8003b90:	4013      	ands	r3, r2
 8003b92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0303 	bic.w	r3, r3, #3
 8003b9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68fa      	ldr	r2, [r7, #12]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	f023 0302 	bic.w	r3, r3, #2
 8003bac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	697a      	ldr	r2, [r7, #20]
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a2d      	ldr	r2, [pc, #180]	@ (8003c70 <TIM_OC1_SetConfig+0x10c>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d00f      	beq.n	8003be0 <TIM_OC1_SetConfig+0x7c>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	4a2c      	ldr	r2, [pc, #176]	@ (8003c74 <TIM_OC1_SetConfig+0x110>)
 8003bc4:	4293      	cmp	r3, r2
 8003bc6:	d00b      	beq.n	8003be0 <TIM_OC1_SetConfig+0x7c>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a2b      	ldr	r2, [pc, #172]	@ (8003c78 <TIM_OC1_SetConfig+0x114>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d007      	beq.n	8003be0 <TIM_OC1_SetConfig+0x7c>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a2a      	ldr	r2, [pc, #168]	@ (8003c7c <TIM_OC1_SetConfig+0x118>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d003      	beq.n	8003be0 <TIM_OC1_SetConfig+0x7c>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a29      	ldr	r2, [pc, #164]	@ (8003c80 <TIM_OC1_SetConfig+0x11c>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d10c      	bne.n	8003bfa <TIM_OC1_SetConfig+0x96>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f023 0308 	bic.w	r3, r3, #8
 8003be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	697a      	ldr	r2, [r7, #20]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	f023 0304 	bic.w	r3, r3, #4
 8003bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a1c      	ldr	r2, [pc, #112]	@ (8003c70 <TIM_OC1_SetConfig+0x10c>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d00f      	beq.n	8003c22 <TIM_OC1_SetConfig+0xbe>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a1b      	ldr	r2, [pc, #108]	@ (8003c74 <TIM_OC1_SetConfig+0x110>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d00b      	beq.n	8003c22 <TIM_OC1_SetConfig+0xbe>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a1a      	ldr	r2, [pc, #104]	@ (8003c78 <TIM_OC1_SetConfig+0x114>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d007      	beq.n	8003c22 <TIM_OC1_SetConfig+0xbe>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a19      	ldr	r2, [pc, #100]	@ (8003c7c <TIM_OC1_SetConfig+0x118>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d003      	beq.n	8003c22 <TIM_OC1_SetConfig+0xbe>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a18      	ldr	r2, [pc, #96]	@ (8003c80 <TIM_OC1_SetConfig+0x11c>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d111      	bne.n	8003c46 <TIM_OC1_SetConfig+0xe2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c22:	693b      	ldr	r3, [r7, #16]
 8003c24:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	695b      	ldr	r3, [r3, #20]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	693a      	ldr	r2, [r7, #16]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	68fa      	ldr	r2, [r7, #12]
 8003c50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	685a      	ldr	r2, [r3, #4]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	621a      	str	r2, [r3, #32]
}
 8003c60:	bf00      	nop
 8003c62:	371c      	adds	r7, #28
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr
 8003c6c:	fffeff8f 	.word	0xfffeff8f
 8003c70:	40010000 	.word	0x40010000
 8003c74:	40010400 	.word	0x40010400
 8003c78:	40014000 	.word	0x40014000
 8003c7c:	40014400 	.word	0x40014400
 8003c80:	40014800 	.word	0x40014800

08003c84 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c84:	b480      	push	{r7}
 8003c86:	b087      	sub	sp, #28
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a1b      	ldr	r3, [r3, #32]
 8003c92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	6a1b      	ldr	r3, [r3, #32]
 8003c98:	f023 0210 	bic.w	r2, r3, #16
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	699b      	ldr	r3, [r3, #24]
 8003caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	4b34      	ldr	r3, [pc, #208]	@ (8003d80 <TIM_OC2_SetConfig+0xfc>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	021b      	lsls	r3, r3, #8
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cc8:	697b      	ldr	r3, [r7, #20]
 8003cca:	f023 0320 	bic.w	r3, r3, #32
 8003cce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	697a      	ldr	r2, [r7, #20]
 8003cd8:	4313      	orrs	r3, r2
 8003cda:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a29      	ldr	r2, [pc, #164]	@ (8003d84 <TIM_OC2_SetConfig+0x100>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d003      	beq.n	8003cec <TIM_OC2_SetConfig+0x68>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a28      	ldr	r2, [pc, #160]	@ (8003d88 <TIM_OC2_SetConfig+0x104>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d10d      	bne.n	8003d08 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cec:	697b      	ldr	r3, [r7, #20]
 8003cee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cf2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	697a      	ldr	r2, [r7, #20]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d00:	697b      	ldr	r3, [r7, #20]
 8003d02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003d06:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a1e      	ldr	r2, [pc, #120]	@ (8003d84 <TIM_OC2_SetConfig+0x100>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d00f      	beq.n	8003d30 <TIM_OC2_SetConfig+0xac>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a1d      	ldr	r2, [pc, #116]	@ (8003d88 <TIM_OC2_SetConfig+0x104>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00b      	beq.n	8003d30 <TIM_OC2_SetConfig+0xac>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a1c      	ldr	r2, [pc, #112]	@ (8003d8c <TIM_OC2_SetConfig+0x108>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d007      	beq.n	8003d30 <TIM_OC2_SetConfig+0xac>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a1b      	ldr	r2, [pc, #108]	@ (8003d90 <TIM_OC2_SetConfig+0x10c>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d003      	beq.n	8003d30 <TIM_OC2_SetConfig+0xac>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	4a1a      	ldr	r2, [pc, #104]	@ (8003d94 <TIM_OC2_SetConfig+0x110>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d113      	bne.n	8003d58 <TIM_OC2_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003d36:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d38:	693b      	ldr	r3, [r7, #16]
 8003d3a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003d3e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	695b      	ldr	r3, [r3, #20]
 8003d44:	009b      	lsls	r3, r3, #2
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	699b      	ldr	r3, [r3, #24]
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	693a      	ldr	r2, [r7, #16]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	697a      	ldr	r2, [r7, #20]
 8003d70:	621a      	str	r2, [r3, #32]
}
 8003d72:	bf00      	nop
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	feff8fff 	.word	0xfeff8fff
 8003d84:	40010000 	.word	0x40010000
 8003d88:	40010400 	.word	0x40010400
 8003d8c:	40014000 	.word	0x40014000
 8003d90:	40014400 	.word	0x40014400
 8003d94:	40014800 	.word	0x40014800

08003d98 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	b087      	sub	sp, #28
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6a1b      	ldr	r3, [r3, #32]
 8003da6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a1b      	ldr	r3, [r3, #32]
 8003dac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	685b      	ldr	r3, [r3, #4]
 8003db8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	69db      	ldr	r3, [r3, #28]
 8003dbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dc0:	68fa      	ldr	r2, [r7, #12]
 8003dc2:	4b33      	ldr	r3, [pc, #204]	@ (8003e90 <TIM_OC3_SetConfig+0xf8>)
 8003dc4:	4013      	ands	r3, r2
 8003dc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	f023 0303 	bic.w	r3, r3, #3
 8003dce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	68fa      	ldr	r2, [r7, #12]
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003dda:	697b      	ldr	r3, [r7, #20]
 8003ddc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003de0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	689b      	ldr	r3, [r3, #8]
 8003de6:	021b      	lsls	r3, r3, #8
 8003de8:	697a      	ldr	r2, [r7, #20]
 8003dea:	4313      	orrs	r3, r2
 8003dec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4a28      	ldr	r2, [pc, #160]	@ (8003e94 <TIM_OC3_SetConfig+0xfc>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d003      	beq.n	8003dfe <TIM_OC3_SetConfig+0x66>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a27      	ldr	r2, [pc, #156]	@ (8003e98 <TIM_OC3_SetConfig+0x100>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d10d      	bne.n	8003e1a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a1d      	ldr	r2, [pc, #116]	@ (8003e94 <TIM_OC3_SetConfig+0xfc>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00f      	beq.n	8003e42 <TIM_OC3_SetConfig+0xaa>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a1c      	ldr	r2, [pc, #112]	@ (8003e98 <TIM_OC3_SetConfig+0x100>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d00b      	beq.n	8003e42 <TIM_OC3_SetConfig+0xaa>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a1b      	ldr	r2, [pc, #108]	@ (8003e9c <TIM_OC3_SetConfig+0x104>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d007      	beq.n	8003e42 <TIM_OC3_SetConfig+0xaa>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a1a      	ldr	r2, [pc, #104]	@ (8003ea0 <TIM_OC3_SetConfig+0x108>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d003      	beq.n	8003e42 <TIM_OC3_SetConfig+0xaa>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	4a19      	ldr	r2, [pc, #100]	@ (8003ea4 <TIM_OC3_SetConfig+0x10c>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d113      	bne.n	8003e6a <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003e48:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003e50:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	695b      	ldr	r3, [r3, #20]
 8003e56:	011b      	lsls	r3, r3, #4
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	4313      	orrs	r3, r2
 8003e5c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	699b      	ldr	r3, [r3, #24]
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4313      	orrs	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	693a      	ldr	r2, [r7, #16]
 8003e6e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	68fa      	ldr	r2, [r7, #12]
 8003e74:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	685a      	ldr	r2, [r3, #4]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	621a      	str	r2, [r3, #32]
}
 8003e84:	bf00      	nop
 8003e86:	371c      	adds	r7, #28
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr
 8003e90:	fffeff8f 	.word	0xfffeff8f
 8003e94:	40010000 	.word	0x40010000
 8003e98:	40010400 	.word	0x40010400
 8003e9c:	40014000 	.word	0x40014000
 8003ea0:	40014400 	.word	0x40014400
 8003ea4:	40014800 	.word	0x40014800

08003ea8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b087      	sub	sp, #28
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
 8003eb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a1b      	ldr	r3, [r3, #32]
 8003eb6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	6a1b      	ldr	r3, [r3, #32]
 8003ebc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	69db      	ldr	r3, [r3, #28]
 8003ece:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ed0:	68fa      	ldr	r2, [r7, #12]
 8003ed2:	4b24      	ldr	r3, [pc, #144]	@ (8003f64 <TIM_OC4_SetConfig+0xbc>)
 8003ed4:	4013      	ands	r3, r2
 8003ed6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ede:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	021b      	lsls	r3, r3, #8
 8003ee6:	68fa      	ldr	r2, [r7, #12]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ef2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	689b      	ldr	r3, [r3, #8]
 8003ef8:	031b      	lsls	r3, r3, #12
 8003efa:	693a      	ldr	r2, [r7, #16]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	4a19      	ldr	r2, [pc, #100]	@ (8003f68 <TIM_OC4_SetConfig+0xc0>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d00f      	beq.n	8003f28 <TIM_OC4_SetConfig+0x80>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a18      	ldr	r2, [pc, #96]	@ (8003f6c <TIM_OC4_SetConfig+0xc4>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00b      	beq.n	8003f28 <TIM_OC4_SetConfig+0x80>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a17      	ldr	r2, [pc, #92]	@ (8003f70 <TIM_OC4_SetConfig+0xc8>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d007      	beq.n	8003f28 <TIM_OC4_SetConfig+0x80>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a16      	ldr	r2, [pc, #88]	@ (8003f74 <TIM_OC4_SetConfig+0xcc>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d003      	beq.n	8003f28 <TIM_OC4_SetConfig+0x80>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a15      	ldr	r2, [pc, #84]	@ (8003f78 <TIM_OC4_SetConfig+0xd0>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d109      	bne.n	8003f3c <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003f2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	019b      	lsls	r3, r3, #6
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	bf00      	nop
 8003f58:	371c      	adds	r7, #28
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr
 8003f62:	bf00      	nop
 8003f64:	feff8fff 	.word	0xfeff8fff
 8003f68:	40010000 	.word	0x40010000
 8003f6c:	40010400 	.word	0x40010400
 8003f70:	40014000 	.word	0x40014000
 8003f74:	40014400 	.word	0x40014400
 8003f78:	40014800 	.word	0x40014800

08003f7c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f7c:	b480      	push	{r7}
 8003f7e:	b087      	sub	sp, #28
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6a1b      	ldr	r3, [r3, #32]
 8003f8a:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a1b      	ldr	r3, [r3, #32]
 8003f90:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fa2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003fa4:	68fa      	ldr	r2, [r7, #12]
 8003fa6:	4b21      	ldr	r3, [pc, #132]	@ (800402c <TIM_OC5_SetConfig+0xb0>)
 8003fa8:	4013      	ands	r3, r2
 8003faa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68fa      	ldr	r2, [r7, #12]
 8003fb2:	4313      	orrs	r3, r2
 8003fb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8003fbc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	041b      	lsls	r3, r3, #16
 8003fc4:	693a      	ldr	r2, [r7, #16]
 8003fc6:	4313      	orrs	r3, r2
 8003fc8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	4a18      	ldr	r2, [pc, #96]	@ (8004030 <TIM_OC5_SetConfig+0xb4>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d00f      	beq.n	8003ff2 <TIM_OC5_SetConfig+0x76>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a17      	ldr	r2, [pc, #92]	@ (8004034 <TIM_OC5_SetConfig+0xb8>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00b      	beq.n	8003ff2 <TIM_OC5_SetConfig+0x76>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a16      	ldr	r2, [pc, #88]	@ (8004038 <TIM_OC5_SetConfig+0xbc>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d007      	beq.n	8003ff2 <TIM_OC5_SetConfig+0x76>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a15      	ldr	r2, [pc, #84]	@ (800403c <TIM_OC5_SetConfig+0xc0>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d003      	beq.n	8003ff2 <TIM_OC5_SetConfig+0x76>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a14      	ldr	r2, [pc, #80]	@ (8004040 <TIM_OC5_SetConfig+0xc4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d109      	bne.n	8004006 <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	021b      	lsls	r3, r3, #8
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	621a      	str	r2, [r3, #32]
}
 8004020:	bf00      	nop
 8004022:	371c      	adds	r7, #28
 8004024:	46bd      	mov	sp, r7
 8004026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402a:	4770      	bx	lr
 800402c:	fffeff8f 	.word	0xfffeff8f
 8004030:	40010000 	.word	0x40010000
 8004034:	40010400 	.word	0x40010400
 8004038:	40014000 	.word	0x40014000
 800403c:	40014400 	.word	0x40014400
 8004040:	40014800 	.word	0x40014800

08004044 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004044:	b480      	push	{r7}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800406a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800406c:	68fa      	ldr	r2, [r7, #12]
 800406e:	4b22      	ldr	r3, [pc, #136]	@ (80040f8 <TIM_OC6_SetConfig+0xb4>)
 8004070:	4013      	ands	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	021b      	lsls	r3, r3, #8
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4313      	orrs	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	051b      	lsls	r3, r3, #20
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a19      	ldr	r2, [pc, #100]	@ (80040fc <TIM_OC6_SetConfig+0xb8>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00f      	beq.n	80040bc <TIM_OC6_SetConfig+0x78>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a18      	ldr	r2, [pc, #96]	@ (8004100 <TIM_OC6_SetConfig+0xbc>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d00b      	beq.n	80040bc <TIM_OC6_SetConfig+0x78>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a17      	ldr	r2, [pc, #92]	@ (8004104 <TIM_OC6_SetConfig+0xc0>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d007      	beq.n	80040bc <TIM_OC6_SetConfig+0x78>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a16      	ldr	r2, [pc, #88]	@ (8004108 <TIM_OC6_SetConfig+0xc4>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d003      	beq.n	80040bc <TIM_OC6_SetConfig+0x78>
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a15      	ldr	r2, [pc, #84]	@ (800410c <TIM_OC6_SetConfig+0xc8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d109      	bne.n	80040d0 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80040c2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	029b      	lsls	r3, r3, #10
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	68fa      	ldr	r2, [r7, #12]
 80040da:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685a      	ldr	r2, [r3, #4]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	693a      	ldr	r2, [r7, #16]
 80040e8:	621a      	str	r2, [r3, #32]
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f4:	4770      	bx	lr
 80040f6:	bf00      	nop
 80040f8:	feff8fff 	.word	0xfeff8fff
 80040fc:	40010000 	.word	0x40010000
 8004100:	40010400 	.word	0x40010400
 8004104:	40014000 	.word	0x40014000
 8004108:	40014400 	.word	0x40014400
 800410c:	40014800 	.word	0x40014800

08004110 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
 8004118:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004126:	693a      	ldr	r2, [r7, #16]
 8004128:	4b65      	ldr	r3, [pc, #404]	@ (80042c0 <TIM_SlaveTimer_SetConfig+0x1b0>)
 800412a:	4013      	ands	r3, r2
 800412c:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	693a      	ldr	r2, [r7, #16]
 8004134:	4313      	orrs	r3, r2
 8004136:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8004138:	693a      	ldr	r2, [r7, #16]
 800413a:	4b62      	ldr	r3, [pc, #392]	@ (80042c4 <TIM_SlaveTimer_SetConfig+0x1b4>)
 800413c:	4013      	ands	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	693a      	ldr	r2, [r7, #16]
 8004150:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	685b      	ldr	r3, [r3, #4]
 8004156:	4a5c      	ldr	r2, [pc, #368]	@ (80042c8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	f000 80ab 	beq.w	80042b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800415e:	4a5a      	ldr	r2, [pc, #360]	@ (80042c8 <TIM_SlaveTimer_SetConfig+0x1b8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	f200 80a4 	bhi.w	80042ae <TIM_SlaveTimer_SetConfig+0x19e>
 8004166:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800416a:	f000 80a3 	beq.w	80042b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800416e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004172:	f200 809c 	bhi.w	80042ae <TIM_SlaveTimer_SetConfig+0x19e>
 8004176:	4a55      	ldr	r2, [pc, #340]	@ (80042cc <TIM_SlaveTimer_SetConfig+0x1bc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	f000 809b 	beq.w	80042b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800417e:	4a53      	ldr	r2, [pc, #332]	@ (80042cc <TIM_SlaveTimer_SetConfig+0x1bc>)
 8004180:	4293      	cmp	r3, r2
 8004182:	f200 8094 	bhi.w	80042ae <TIM_SlaveTimer_SetConfig+0x19e>
 8004186:	4a52      	ldr	r2, [pc, #328]	@ (80042d0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8004188:	4293      	cmp	r3, r2
 800418a:	f000 8093 	beq.w	80042b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800418e:	4a50      	ldr	r2, [pc, #320]	@ (80042d0 <TIM_SlaveTimer_SetConfig+0x1c0>)
 8004190:	4293      	cmp	r3, r2
 8004192:	f200 808c 	bhi.w	80042ae <TIM_SlaveTimer_SetConfig+0x19e>
 8004196:	4a4f      	ldr	r2, [pc, #316]	@ (80042d4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 8004198:	4293      	cmp	r3, r2
 800419a:	f000 808b 	beq.w	80042b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800419e:	4a4d      	ldr	r2, [pc, #308]	@ (80042d4 <TIM_SlaveTimer_SetConfig+0x1c4>)
 80041a0:	4293      	cmp	r3, r2
 80041a2:	f200 8084 	bhi.w	80042ae <TIM_SlaveTimer_SetConfig+0x19e>
 80041a6:	4a4c      	ldr	r2, [pc, #304]	@ (80042d8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 80041a8:	4293      	cmp	r3, r2
 80041aa:	f000 8083 	beq.w	80042b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80041ae:	4a4a      	ldr	r2, [pc, #296]	@ (80042d8 <TIM_SlaveTimer_SetConfig+0x1c8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d87c      	bhi.n	80042ae <TIM_SlaveTimer_SetConfig+0x19e>
 80041b4:	4a49      	ldr	r2, [pc, #292]	@ (80042dc <TIM_SlaveTimer_SetConfig+0x1cc>)
 80041b6:	4293      	cmp	r3, r2
 80041b8:	d07c      	beq.n	80042b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80041ba:	4a48      	ldr	r2, [pc, #288]	@ (80042dc <TIM_SlaveTimer_SetConfig+0x1cc>)
 80041bc:	4293      	cmp	r3, r2
 80041be:	d876      	bhi.n	80042ae <TIM_SlaveTimer_SetConfig+0x19e>
 80041c0:	4a47      	ldr	r2, [pc, #284]	@ (80042e0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 80041c2:	4293      	cmp	r3, r2
 80041c4:	d076      	beq.n	80042b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80041c6:	4a46      	ldr	r2, [pc, #280]	@ (80042e0 <TIM_SlaveTimer_SetConfig+0x1d0>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d870      	bhi.n	80042ae <TIM_SlaveTimer_SetConfig+0x19e>
 80041cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80041d0:	d070      	beq.n	80042b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80041d2:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80041d6:	d86a      	bhi.n	80042ae <TIM_SlaveTimer_SetConfig+0x19e>
 80041d8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041dc:	d06a      	beq.n	80042b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 80041de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041e2:	d864      	bhi.n	80042ae <TIM_SlaveTimer_SetConfig+0x19e>
 80041e4:	2b70      	cmp	r3, #112	@ 0x70
 80041e6:	d01a      	beq.n	800421e <TIM_SlaveTimer_SetConfig+0x10e>
 80041e8:	2b70      	cmp	r3, #112	@ 0x70
 80041ea:	d860      	bhi.n	80042ae <TIM_SlaveTimer_SetConfig+0x19e>
 80041ec:	2b60      	cmp	r3, #96	@ 0x60
 80041ee:	d054      	beq.n	800429a <TIM_SlaveTimer_SetConfig+0x18a>
 80041f0:	2b60      	cmp	r3, #96	@ 0x60
 80041f2:	d85c      	bhi.n	80042ae <TIM_SlaveTimer_SetConfig+0x19e>
 80041f4:	2b50      	cmp	r3, #80	@ 0x50
 80041f6:	d046      	beq.n	8004286 <TIM_SlaveTimer_SetConfig+0x176>
 80041f8:	2b50      	cmp	r3, #80	@ 0x50
 80041fa:	d858      	bhi.n	80042ae <TIM_SlaveTimer_SetConfig+0x19e>
 80041fc:	2b40      	cmp	r3, #64	@ 0x40
 80041fe:	d019      	beq.n	8004234 <TIM_SlaveTimer_SetConfig+0x124>
 8004200:	2b40      	cmp	r3, #64	@ 0x40
 8004202:	d854      	bhi.n	80042ae <TIM_SlaveTimer_SetConfig+0x19e>
 8004204:	2b30      	cmp	r3, #48	@ 0x30
 8004206:	d055      	beq.n	80042b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8004208:	2b30      	cmp	r3, #48	@ 0x30
 800420a:	d850      	bhi.n	80042ae <TIM_SlaveTimer_SetConfig+0x19e>
 800420c:	2b20      	cmp	r3, #32
 800420e:	d051      	beq.n	80042b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8004210:	2b20      	cmp	r3, #32
 8004212:	d84c      	bhi.n	80042ae <TIM_SlaveTimer_SetConfig+0x19e>
 8004214:	2b00      	cmp	r3, #0
 8004216:	d04d      	beq.n	80042b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 8004218:	2b10      	cmp	r3, #16
 800421a:	d04b      	beq.n	80042b4 <TIM_SlaveTimer_SetConfig+0x1a4>
 800421c:	e047      	b.n	80042ae <TIM_SlaveTimer_SetConfig+0x19e>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8004222:	683b      	ldr	r3, [r7, #0]
 8004224:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8004226:	683b      	ldr	r3, [r7, #0]
 8004228:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 800422a:	683b      	ldr	r3, [r7, #0]
 800422c:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 800422e:	f000 f8d7 	bl	80043e0 <TIM_ETR_SetConfig>
      break;
 8004232:	e040      	b.n	80042b6 <TIM_SlaveTimer_SetConfig+0x1a6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b05      	cmp	r3, #5
 800423a:	d101      	bne.n	8004240 <TIM_SlaveTimer_SetConfig+0x130>
      {
        return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e03b      	b.n	80042b8 <TIM_SlaveTimer_SetConfig+0x1a8>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6a1a      	ldr	r2, [r3, #32]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f022 0201 	bic.w	r2, r2, #1
 8004256:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004266:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8004268:	683b      	ldr	r3, [r7, #0]
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	68ba      	ldr	r2, [r7, #8]
 8004270:	4313      	orrs	r3, r2
 8004272:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	68fa      	ldr	r2, [r7, #12]
 8004282:	621a      	str	r2, [r3, #32]
      break;
 8004284:	e017      	b.n	80042b6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004292:	461a      	mov	r2, r3
 8004294:	f000 f826 	bl	80042e4 <TIM_TI1_ConfigInputStage>
      break;
 8004298:	e00d      	b.n	80042b6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80042a6:	461a      	mov	r2, r3
 80042a8:	f000 f84b 	bl	8004342 <TIM_TI2_ConfigInputStage>
      break;
 80042ac:	e003      	b.n	80042b6 <TIM_SlaveTimer_SetConfig+0x1a6>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80042ae:	2301      	movs	r3, #1
 80042b0:	75fb      	strb	r3, [r7, #23]
      break;
 80042b2:	e000      	b.n	80042b6 <TIM_SlaveTimer_SetConfig+0x1a6>
      break;
 80042b4:	bf00      	nop
  }

  return status;
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	ffcfff8f 	.word	0xffcfff8f
 80042c4:	fffefff8 	.word	0xfffefff8
 80042c8:	00200010 	.word	0x00200010
 80042cc:	00100070 	.word	0x00100070
 80042d0:	00100060 	.word	0x00100060
 80042d4:	00100050 	.word	0x00100050
 80042d8:	00100040 	.word	0x00100040
 80042dc:	00100030 	.word	0x00100030
 80042e0:	00100020 	.word	0x00100020

080042e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b087      	sub	sp, #28
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	60f8      	str	r0, [r7, #12]
 80042ec:	60b9      	str	r1, [r7, #8]
 80042ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	6a1b      	ldr	r3, [r3, #32]
 80042f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	f023 0201 	bic.w	r2, r3, #1
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800430e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	011b      	lsls	r3, r3, #4
 8004314:	693a      	ldr	r2, [r7, #16]
 8004316:	4313      	orrs	r3, r2
 8004318:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f023 030a 	bic.w	r3, r3, #10
 8004320:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004322:	697a      	ldr	r2, [r7, #20]
 8004324:	68bb      	ldr	r3, [r7, #8]
 8004326:	4313      	orrs	r3, r2
 8004328:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	697a      	ldr	r2, [r7, #20]
 8004334:	621a      	str	r2, [r3, #32]
}
 8004336:	bf00      	nop
 8004338:	371c      	adds	r7, #28
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr

08004342 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004342:	b480      	push	{r7}
 8004344:	b087      	sub	sp, #28
 8004346:	af00      	add	r7, sp, #0
 8004348:	60f8      	str	r0, [r7, #12]
 800434a:	60b9      	str	r1, [r7, #8]
 800434c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a1b      	ldr	r3, [r3, #32]
 8004352:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	f023 0210 	bic.w	r2, r3, #16
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	699b      	ldr	r3, [r3, #24]
 8004364:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800436c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	031b      	lsls	r3, r3, #12
 8004372:	693a      	ldr	r2, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800437e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	011b      	lsls	r3, r3, #4
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	4313      	orrs	r3, r2
 8004388:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	621a      	str	r2, [r3, #32]
}
 8004396:	bf00      	nop
 8004398:	371c      	adds	r7, #28
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
	...

080043a4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043a4:	b480      	push	{r7}
 80043a6:	b085      	sub	sp, #20
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	689b      	ldr	r3, [r3, #8]
 80043b2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043b4:	68fa      	ldr	r2, [r7, #12]
 80043b6:	4b09      	ldr	r3, [pc, #36]	@ (80043dc <TIM_ITRx_SetConfig+0x38>)
 80043b8:	4013      	ands	r3, r2
 80043ba:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80043bc:	683a      	ldr	r2, [r7, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	f043 0307 	orr.w	r3, r3, #7
 80043c6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	68fa      	ldr	r2, [r7, #12]
 80043cc:	609a      	str	r2, [r3, #8]
}
 80043ce:	bf00      	nop
 80043d0:	3714      	adds	r7, #20
 80043d2:	46bd      	mov	sp, r7
 80043d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d8:	4770      	bx	lr
 80043da:	bf00      	nop
 80043dc:	ffcfff8f 	.word	0xffcfff8f

080043e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b087      	sub	sp, #28
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	60f8      	str	r0, [r7, #12]
 80043e8:	60b9      	str	r1, [r7, #8]
 80043ea:	607a      	str	r2, [r7, #4]
 80043ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	689b      	ldr	r3, [r3, #8]
 80043f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80043fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	021a      	lsls	r2, r3, #8
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	431a      	orrs	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4313      	orrs	r3, r2
 8004408:	697a      	ldr	r2, [r7, #20]
 800440a:	4313      	orrs	r3, r2
 800440c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	609a      	str	r2, [r3, #8]
}
 8004414:	bf00      	nop
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	f003 031f 	and.w	r3, r3, #31
 8004432:	2201      	movs	r2, #1
 8004434:	fa02 f303 	lsl.w	r3, r2, r3
 8004438:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	6a1a      	ldr	r2, [r3, #32]
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	43db      	mvns	r3, r3
 8004442:	401a      	ands	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6a1a      	ldr	r2, [r3, #32]
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	f003 031f 	and.w	r3, r3, #31
 8004452:	6879      	ldr	r1, [r7, #4]
 8004454:	fa01 f303 	lsl.w	r3, r1, r3
 8004458:	431a      	orrs	r2, r3
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	621a      	str	r2, [r3, #32]
}
 800445e:	bf00      	nop
 8004460:	371c      	adds	r7, #28
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
	...

0800446c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800446c:	b480      	push	{r7}
 800446e:	b085      	sub	sp, #20
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
 8004474:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800447c:	2b01      	cmp	r3, #1
 800447e:	d101      	bne.n	8004484 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004480:	2302      	movs	r3, #2
 8004482:	e06d      	b.n	8004560 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2201      	movs	r2, #1
 8004488:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a30      	ldr	r2, [pc, #192]	@ (800456c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d004      	beq.n	80044b8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a2f      	ldr	r2, [pc, #188]	@ (8004570 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d108      	bne.n	80044ca <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80044be:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	68fa      	ldr	r2, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044d0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	4313      	orrs	r3, r2
 80044da:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68fa      	ldr	r2, [r7, #12]
 80044e2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	4a20      	ldr	r2, [pc, #128]	@ (800456c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d022      	beq.n	8004534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044f6:	d01d      	beq.n	8004534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a1d      	ldr	r2, [pc, #116]	@ (8004574 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d018      	beq.n	8004534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4a1c      	ldr	r2, [pc, #112]	@ (8004578 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d013      	beq.n	8004534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a1a      	ldr	r2, [pc, #104]	@ (800457c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d00e      	beq.n	8004534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a15      	ldr	r2, [pc, #84]	@ (8004570 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800451c:	4293      	cmp	r3, r2
 800451e:	d009      	beq.n	8004534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4a16      	ldr	r2, [pc, #88]	@ (8004580 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d004      	beq.n	8004534 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	4a15      	ldr	r2, [pc, #84]	@ (8004584 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d10c      	bne.n	800454e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800453a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	68ba      	ldr	r2, [r7, #8]
 8004542:	4313      	orrs	r3, r2
 8004544:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68ba      	ldr	r2, [r7, #8]
 800454c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2201      	movs	r2, #1
 8004552:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800455e:	2300      	movs	r3, #0
}
 8004560:	4618      	mov	r0, r3
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	40010000 	.word	0x40010000
 8004570:	40010400 	.word	0x40010400
 8004574:	40000400 	.word	0x40000400
 8004578:	40000800 	.word	0x40000800
 800457c:	40000c00 	.word	0x40000c00
 8004580:	40001800 	.word	0x40001800
 8004584:	40014000 	.word	0x40014000

08004588 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004592:	2300      	movs	r3, #0
 8004594:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));
#endif /* TIM_BDTR_BKBID */

  /* Check input state */
  __HAL_LOCK(htim);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800459c:	2b01      	cmp	r3, #1
 800459e:	d101      	bne.n	80045a4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80045a0:	2302      	movs	r3, #2
 80045a2:	e065      	b.n	8004670 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	4313      	orrs	r3, r2
 80045b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4313      	orrs	r3, r2
 80045e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80045ea:	683b      	ldr	r3, [r7, #0]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	4313      	orrs	r3, r2
 80045f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	695b      	ldr	r3, [r3, #20]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800460a:	4313      	orrs	r3, r2
 800460c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	041b      	lsls	r3, r3, #16
 800461a:	4313      	orrs	r3, r2
 800461c:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
#endif /* TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a16      	ldr	r2, [pc, #88]	@ (800467c <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d004      	beq.n	8004632 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	4a14      	ldr	r2, [pc, #80]	@ (8004680 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d115      	bne.n	800465e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));
#endif /* TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800463c:	051b      	lsls	r3, r3, #20
 800463e:	4313      	orrs	r3, r2
 8004640:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	4313      	orrs	r3, r2
 800464e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	6a1b      	ldr	r3, [r3, #32]
 800465a:	4313      	orrs	r3, r2
 800465c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
#endif /* TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800466e:	2300      	movs	r3, #0
}
 8004670:	4618      	mov	r0, r3
 8004672:	3714      	adds	r7, #20
 8004674:	46bd      	mov	sp, r7
 8004676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467a:	4770      	bx	lr
 800467c:	40010000 	.word	0x40010000
 8004680:	40010400 	.word	0x40010400

08004684 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b082      	sub	sp, #8
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d101      	bne.n	8004696 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e042      	b.n	800471c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800469c:	2b00      	cmp	r3, #0
 800469e:	d106      	bne.n	80046ae <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80046a8:	6878      	ldr	r0, [r7, #4]
 80046aa:	f000 f83b 	bl	8004724 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2224      	movs	r2, #36	@ 0x24
 80046b2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	681a      	ldr	r2, [r3, #0]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f022 0201 	bic.w	r2, r2, #1
 80046c4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d002      	beq.n	80046d4 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fe28 	bl	8005324 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80046d4:	6878      	ldr	r0, [r7, #4]
 80046d6:	f000 f8bd 	bl	8004854 <UART_SetConfig>
 80046da:	4603      	mov	r3, r0
 80046dc:	2b01      	cmp	r3, #1
 80046de:	d101      	bne.n	80046e4 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80046e0:	2301      	movs	r3, #1
 80046e2:	e01b      	b.n	800471c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	685a      	ldr	r2, [r3, #4]
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046f2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	689a      	ldr	r2, [r3, #8]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004702:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	681a      	ldr	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f042 0201 	orr.w	r2, r2, #1
 8004712:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 fea7 	bl	8005468 <UART_CheckIdleState>
 800471a:	4603      	mov	r3, r0
}
 800471c:	4618      	mov	r0, r3
 800471e:	3708      	adds	r7, #8
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}

08004724 <HAL_UART_MspInit>:
  * @brief Initialize the UART MSP.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_MspInit can be implemented in the user file
   */
}
 800472c:	bf00      	nop
 800472e:	370c      	adds	r7, #12
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b08a      	sub	sp, #40	@ 0x28
 800473c:	af02      	add	r7, sp, #8
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	603b      	str	r3, [r7, #0]
 8004744:	4613      	mov	r3, r2
 8004746:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800474e:	2b20      	cmp	r3, #32
 8004750:	d17b      	bne.n	800484a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d002      	beq.n	800475e <HAL_UART_Transmit+0x26>
 8004758:	88fb      	ldrh	r3, [r7, #6]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e074      	b.n	800484c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2221      	movs	r2, #33	@ 0x21
 800476e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004772:	f7fc ff13 	bl	800159c <HAL_GetTick>
 8004776:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	88fa      	ldrh	r2, [r7, #6]
 800477c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	88fa      	ldrh	r2, [r7, #6]
 8004784:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	689b      	ldr	r3, [r3, #8]
 800478c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004790:	d108      	bne.n	80047a4 <HAL_UART_Transmit+0x6c>
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	691b      	ldr	r3, [r3, #16]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d104      	bne.n	80047a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800479a:	2300      	movs	r3, #0
 800479c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	61bb      	str	r3, [r7, #24]
 80047a2:	e003      	b.n	80047ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80047a8:	2300      	movs	r3, #0
 80047aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80047ac:	e030      	b.n	8004810 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	9300      	str	r3, [sp, #0]
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2200      	movs	r2, #0
 80047b6:	2180      	movs	r1, #128	@ 0x80
 80047b8:	68f8      	ldr	r0, [r7, #12]
 80047ba:	f000 feff 	bl	80055bc <UART_WaitOnFlagUntilTimeout>
 80047be:	4603      	mov	r3, r0
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d005      	beq.n	80047d0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	e03d      	b.n	800484c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d10b      	bne.n	80047ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80047d6:	69bb      	ldr	r3, [r7, #24]
 80047d8:	881b      	ldrh	r3, [r3, #0]
 80047da:	461a      	mov	r2, r3
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80047e4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	3302      	adds	r3, #2
 80047ea:	61bb      	str	r3, [r7, #24]
 80047ec:	e007      	b.n	80047fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	781a      	ldrb	r2, [r3, #0]
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	3301      	adds	r3, #1
 80047fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004804:	b29b      	uxth	r3, r3
 8004806:	3b01      	subs	r3, #1
 8004808:	b29a      	uxth	r2, r3
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8004816:	b29b      	uxth	r3, r3
 8004818:	2b00      	cmp	r3, #0
 800481a:	d1c8      	bne.n	80047ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	2200      	movs	r2, #0
 8004824:	2140      	movs	r1, #64	@ 0x40
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f000 fec8 	bl	80055bc <UART_WaitOnFlagUntilTimeout>
 800482c:	4603      	mov	r3, r0
 800482e:	2b00      	cmp	r3, #0
 8004830:	d005      	beq.n	800483e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2220      	movs	r2, #32
 8004836:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800483a:	2303      	movs	r3, #3
 800483c:	e006      	b.n	800484c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2220      	movs	r2, #32
 8004842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004846:	2300      	movs	r3, #0
 8004848:	e000      	b.n	800484c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800484a:	2302      	movs	r3, #2
  }
}
 800484c:	4618      	mov	r0, r3
 800484e:	3720      	adds	r7, #32
 8004850:	46bd      	mov	sp, r7
 8004852:	bd80      	pop	{r7, pc}

08004854 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004854:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004858:	b092      	sub	sp, #72	@ 0x48
 800485a:	af00      	add	r7, sp, #0
 800485c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800485e:	2300      	movs	r3, #0
 8004860:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	689a      	ldr	r2, [r3, #8]
 8004868:	697b      	ldr	r3, [r7, #20]
 800486a:	691b      	ldr	r3, [r3, #16]
 800486c:	431a      	orrs	r2, r3
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	695b      	ldr	r3, [r3, #20]
 8004872:	431a      	orrs	r2, r3
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	69db      	ldr	r3, [r3, #28]
 8004878:	4313      	orrs	r3, r2
 800487a:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	4bbe      	ldr	r3, [pc, #760]	@ (8004b7c <UART_SetConfig+0x328>)
 8004884:	4013      	ands	r3, r2
 8004886:	697a      	ldr	r2, [r7, #20]
 8004888:	6812      	ldr	r2, [r2, #0]
 800488a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800488c:	430b      	orrs	r3, r1
 800488e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	697b      	ldr	r3, [r7, #20]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80048a6:	697b      	ldr	r3, [r7, #20]
 80048a8:	699b      	ldr	r3, [r3, #24]
 80048aa:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	4ab3      	ldr	r2, [pc, #716]	@ (8004b80 <UART_SetConfig+0x32c>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d004      	beq.n	80048c0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80048bc:	4313      	orrs	r3, r2
 80048be:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	689a      	ldr	r2, [r3, #8]
 80048c6:	4baf      	ldr	r3, [pc, #700]	@ (8004b84 <UART_SetConfig+0x330>)
 80048c8:	4013      	ands	r3, r2
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	6812      	ldr	r2, [r2, #0]
 80048ce:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80048d0:	430b      	orrs	r3, r1
 80048d2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048da:	f023 010f 	bic.w	r1, r3, #15
 80048de:	697b      	ldr	r3, [r7, #20]
 80048e0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	430a      	orrs	r2, r1
 80048e8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4aa6      	ldr	r2, [pc, #664]	@ (8004b88 <UART_SetConfig+0x334>)
 80048f0:	4293      	cmp	r3, r2
 80048f2:	d177      	bne.n	80049e4 <UART_SetConfig+0x190>
 80048f4:	4ba5      	ldr	r3, [pc, #660]	@ (8004b8c <UART_SetConfig+0x338>)
 80048f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048f8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80048fc:	2b28      	cmp	r3, #40	@ 0x28
 80048fe:	d86d      	bhi.n	80049dc <UART_SetConfig+0x188>
 8004900:	a201      	add	r2, pc, #4	@ (adr r2, 8004908 <UART_SetConfig+0xb4>)
 8004902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004906:	bf00      	nop
 8004908:	080049ad 	.word	0x080049ad
 800490c:	080049dd 	.word	0x080049dd
 8004910:	080049dd 	.word	0x080049dd
 8004914:	080049dd 	.word	0x080049dd
 8004918:	080049dd 	.word	0x080049dd
 800491c:	080049dd 	.word	0x080049dd
 8004920:	080049dd 	.word	0x080049dd
 8004924:	080049dd 	.word	0x080049dd
 8004928:	080049b5 	.word	0x080049b5
 800492c:	080049dd 	.word	0x080049dd
 8004930:	080049dd 	.word	0x080049dd
 8004934:	080049dd 	.word	0x080049dd
 8004938:	080049dd 	.word	0x080049dd
 800493c:	080049dd 	.word	0x080049dd
 8004940:	080049dd 	.word	0x080049dd
 8004944:	080049dd 	.word	0x080049dd
 8004948:	080049bd 	.word	0x080049bd
 800494c:	080049dd 	.word	0x080049dd
 8004950:	080049dd 	.word	0x080049dd
 8004954:	080049dd 	.word	0x080049dd
 8004958:	080049dd 	.word	0x080049dd
 800495c:	080049dd 	.word	0x080049dd
 8004960:	080049dd 	.word	0x080049dd
 8004964:	080049dd 	.word	0x080049dd
 8004968:	080049c5 	.word	0x080049c5
 800496c:	080049dd 	.word	0x080049dd
 8004970:	080049dd 	.word	0x080049dd
 8004974:	080049dd 	.word	0x080049dd
 8004978:	080049dd 	.word	0x080049dd
 800497c:	080049dd 	.word	0x080049dd
 8004980:	080049dd 	.word	0x080049dd
 8004984:	080049dd 	.word	0x080049dd
 8004988:	080049cd 	.word	0x080049cd
 800498c:	080049dd 	.word	0x080049dd
 8004990:	080049dd 	.word	0x080049dd
 8004994:	080049dd 	.word	0x080049dd
 8004998:	080049dd 	.word	0x080049dd
 800499c:	080049dd 	.word	0x080049dd
 80049a0:	080049dd 	.word	0x080049dd
 80049a4:	080049dd 	.word	0x080049dd
 80049a8:	080049d5 	.word	0x080049d5
 80049ac:	2301      	movs	r3, #1
 80049ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049b2:	e222      	b.n	8004dfa <UART_SetConfig+0x5a6>
 80049b4:	2304      	movs	r3, #4
 80049b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ba:	e21e      	b.n	8004dfa <UART_SetConfig+0x5a6>
 80049bc:	2308      	movs	r3, #8
 80049be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049c2:	e21a      	b.n	8004dfa <UART_SetConfig+0x5a6>
 80049c4:	2310      	movs	r3, #16
 80049c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ca:	e216      	b.n	8004dfa <UART_SetConfig+0x5a6>
 80049cc:	2320      	movs	r3, #32
 80049ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049d2:	e212      	b.n	8004dfa <UART_SetConfig+0x5a6>
 80049d4:	2340      	movs	r3, #64	@ 0x40
 80049d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049da:	e20e      	b.n	8004dfa <UART_SetConfig+0x5a6>
 80049dc:	2380      	movs	r3, #128	@ 0x80
 80049de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049e2:	e20a      	b.n	8004dfa <UART_SetConfig+0x5a6>
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	4a69      	ldr	r2, [pc, #420]	@ (8004b90 <UART_SetConfig+0x33c>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d130      	bne.n	8004a50 <UART_SetConfig+0x1fc>
 80049ee:	4b67      	ldr	r3, [pc, #412]	@ (8004b8c <UART_SetConfig+0x338>)
 80049f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80049f2:	f003 0307 	and.w	r3, r3, #7
 80049f6:	2b05      	cmp	r3, #5
 80049f8:	d826      	bhi.n	8004a48 <UART_SetConfig+0x1f4>
 80049fa:	a201      	add	r2, pc, #4	@ (adr r2, 8004a00 <UART_SetConfig+0x1ac>)
 80049fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a00:	08004a19 	.word	0x08004a19
 8004a04:	08004a21 	.word	0x08004a21
 8004a08:	08004a29 	.word	0x08004a29
 8004a0c:	08004a31 	.word	0x08004a31
 8004a10:	08004a39 	.word	0x08004a39
 8004a14:	08004a41 	.word	0x08004a41
 8004a18:	2300      	movs	r3, #0
 8004a1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a1e:	e1ec      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004a20:	2304      	movs	r3, #4
 8004a22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a26:	e1e8      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004a28:	2308      	movs	r3, #8
 8004a2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a2e:	e1e4      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004a30:	2310      	movs	r3, #16
 8004a32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a36:	e1e0      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004a38:	2320      	movs	r3, #32
 8004a3a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a3e:	e1dc      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004a40:	2340      	movs	r3, #64	@ 0x40
 8004a42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a46:	e1d8      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004a48:	2380      	movs	r3, #128	@ 0x80
 8004a4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a4e:	e1d4      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a4f      	ldr	r2, [pc, #316]	@ (8004b94 <UART_SetConfig+0x340>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d130      	bne.n	8004abc <UART_SetConfig+0x268>
 8004a5a:	4b4c      	ldr	r3, [pc, #304]	@ (8004b8c <UART_SetConfig+0x338>)
 8004a5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	2b05      	cmp	r3, #5
 8004a64:	d826      	bhi.n	8004ab4 <UART_SetConfig+0x260>
 8004a66:	a201      	add	r2, pc, #4	@ (adr r2, 8004a6c <UART_SetConfig+0x218>)
 8004a68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a6c:	08004a85 	.word	0x08004a85
 8004a70:	08004a8d 	.word	0x08004a8d
 8004a74:	08004a95 	.word	0x08004a95
 8004a78:	08004a9d 	.word	0x08004a9d
 8004a7c:	08004aa5 	.word	0x08004aa5
 8004a80:	08004aad 	.word	0x08004aad
 8004a84:	2300      	movs	r3, #0
 8004a86:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a8a:	e1b6      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004a8c:	2304      	movs	r3, #4
 8004a8e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a92:	e1b2      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004a94:	2308      	movs	r3, #8
 8004a96:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a9a:	e1ae      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004a9c:	2310      	movs	r3, #16
 8004a9e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aa2:	e1aa      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004aa4:	2320      	movs	r3, #32
 8004aa6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aaa:	e1a6      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004aac:	2340      	movs	r3, #64	@ 0x40
 8004aae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ab2:	e1a2      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004ab4:	2380      	movs	r3, #128	@ 0x80
 8004ab6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004aba:	e19e      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a35      	ldr	r2, [pc, #212]	@ (8004b98 <UART_SetConfig+0x344>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d130      	bne.n	8004b28 <UART_SetConfig+0x2d4>
 8004ac6:	4b31      	ldr	r3, [pc, #196]	@ (8004b8c <UART_SetConfig+0x338>)
 8004ac8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004aca:	f003 0307 	and.w	r3, r3, #7
 8004ace:	2b05      	cmp	r3, #5
 8004ad0:	d826      	bhi.n	8004b20 <UART_SetConfig+0x2cc>
 8004ad2:	a201      	add	r2, pc, #4	@ (adr r2, 8004ad8 <UART_SetConfig+0x284>)
 8004ad4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ad8:	08004af1 	.word	0x08004af1
 8004adc:	08004af9 	.word	0x08004af9
 8004ae0:	08004b01 	.word	0x08004b01
 8004ae4:	08004b09 	.word	0x08004b09
 8004ae8:	08004b11 	.word	0x08004b11
 8004aec:	08004b19 	.word	0x08004b19
 8004af0:	2300      	movs	r3, #0
 8004af2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004af6:	e180      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004af8:	2304      	movs	r3, #4
 8004afa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004afe:	e17c      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004b00:	2308      	movs	r3, #8
 8004b02:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b06:	e178      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004b08:	2310      	movs	r3, #16
 8004b0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b0e:	e174      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004b10:	2320      	movs	r3, #32
 8004b12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b16:	e170      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004b18:	2340      	movs	r3, #64	@ 0x40
 8004b1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b1e:	e16c      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004b20:	2380      	movs	r3, #128	@ 0x80
 8004b22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b26:	e168      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004b28:	697b      	ldr	r3, [r7, #20]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8004b9c <UART_SetConfig+0x348>)
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d142      	bne.n	8004bb8 <UART_SetConfig+0x364>
 8004b32:	4b16      	ldr	r3, [pc, #88]	@ (8004b8c <UART_SetConfig+0x338>)
 8004b34:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004b36:	f003 0307 	and.w	r3, r3, #7
 8004b3a:	2b05      	cmp	r3, #5
 8004b3c:	d838      	bhi.n	8004bb0 <UART_SetConfig+0x35c>
 8004b3e:	a201      	add	r2, pc, #4	@ (adr r2, 8004b44 <UART_SetConfig+0x2f0>)
 8004b40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b44:	08004b5d 	.word	0x08004b5d
 8004b48:	08004b65 	.word	0x08004b65
 8004b4c:	08004b6d 	.word	0x08004b6d
 8004b50:	08004b75 	.word	0x08004b75
 8004b54:	08004ba1 	.word	0x08004ba1
 8004b58:	08004ba9 	.word	0x08004ba9
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b62:	e14a      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004b64:	2304      	movs	r3, #4
 8004b66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b6a:	e146      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004b6c:	2308      	movs	r3, #8
 8004b6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b72:	e142      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004b74:	2310      	movs	r3, #16
 8004b76:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004b7a:	e13e      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004b7c:	cfff69f3 	.word	0xcfff69f3
 8004b80:	58000c00 	.word	0x58000c00
 8004b84:	11fff4ff 	.word	0x11fff4ff
 8004b88:	40011000 	.word	0x40011000
 8004b8c:	58024400 	.word	0x58024400
 8004b90:	40004400 	.word	0x40004400
 8004b94:	40004800 	.word	0x40004800
 8004b98:	40004c00 	.word	0x40004c00
 8004b9c:	40005000 	.word	0x40005000
 8004ba0:	2320      	movs	r3, #32
 8004ba2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ba6:	e128      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004ba8:	2340      	movs	r3, #64	@ 0x40
 8004baa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bae:	e124      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004bb0:	2380      	movs	r3, #128	@ 0x80
 8004bb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004bb6:	e120      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	4acb      	ldr	r2, [pc, #812]	@ (8004eec <UART_SetConfig+0x698>)
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d176      	bne.n	8004cb0 <UART_SetConfig+0x45c>
 8004bc2:	4bcb      	ldr	r3, [pc, #812]	@ (8004ef0 <UART_SetConfig+0x69c>)
 8004bc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004bc6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004bca:	2b28      	cmp	r3, #40	@ 0x28
 8004bcc:	d86c      	bhi.n	8004ca8 <UART_SetConfig+0x454>
 8004bce:	a201      	add	r2, pc, #4	@ (adr r2, 8004bd4 <UART_SetConfig+0x380>)
 8004bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bd4:	08004c79 	.word	0x08004c79
 8004bd8:	08004ca9 	.word	0x08004ca9
 8004bdc:	08004ca9 	.word	0x08004ca9
 8004be0:	08004ca9 	.word	0x08004ca9
 8004be4:	08004ca9 	.word	0x08004ca9
 8004be8:	08004ca9 	.word	0x08004ca9
 8004bec:	08004ca9 	.word	0x08004ca9
 8004bf0:	08004ca9 	.word	0x08004ca9
 8004bf4:	08004c81 	.word	0x08004c81
 8004bf8:	08004ca9 	.word	0x08004ca9
 8004bfc:	08004ca9 	.word	0x08004ca9
 8004c00:	08004ca9 	.word	0x08004ca9
 8004c04:	08004ca9 	.word	0x08004ca9
 8004c08:	08004ca9 	.word	0x08004ca9
 8004c0c:	08004ca9 	.word	0x08004ca9
 8004c10:	08004ca9 	.word	0x08004ca9
 8004c14:	08004c89 	.word	0x08004c89
 8004c18:	08004ca9 	.word	0x08004ca9
 8004c1c:	08004ca9 	.word	0x08004ca9
 8004c20:	08004ca9 	.word	0x08004ca9
 8004c24:	08004ca9 	.word	0x08004ca9
 8004c28:	08004ca9 	.word	0x08004ca9
 8004c2c:	08004ca9 	.word	0x08004ca9
 8004c30:	08004ca9 	.word	0x08004ca9
 8004c34:	08004c91 	.word	0x08004c91
 8004c38:	08004ca9 	.word	0x08004ca9
 8004c3c:	08004ca9 	.word	0x08004ca9
 8004c40:	08004ca9 	.word	0x08004ca9
 8004c44:	08004ca9 	.word	0x08004ca9
 8004c48:	08004ca9 	.word	0x08004ca9
 8004c4c:	08004ca9 	.word	0x08004ca9
 8004c50:	08004ca9 	.word	0x08004ca9
 8004c54:	08004c99 	.word	0x08004c99
 8004c58:	08004ca9 	.word	0x08004ca9
 8004c5c:	08004ca9 	.word	0x08004ca9
 8004c60:	08004ca9 	.word	0x08004ca9
 8004c64:	08004ca9 	.word	0x08004ca9
 8004c68:	08004ca9 	.word	0x08004ca9
 8004c6c:	08004ca9 	.word	0x08004ca9
 8004c70:	08004ca9 	.word	0x08004ca9
 8004c74:	08004ca1 	.word	0x08004ca1
 8004c78:	2301      	movs	r3, #1
 8004c7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c7e:	e0bc      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004c80:	2304      	movs	r3, #4
 8004c82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c86:	e0b8      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004c88:	2308      	movs	r3, #8
 8004c8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c8e:	e0b4      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004c90:	2310      	movs	r3, #16
 8004c92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c96:	e0b0      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004c98:	2320      	movs	r3, #32
 8004c9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004c9e:	e0ac      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004ca0:	2340      	movs	r3, #64	@ 0x40
 8004ca2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004ca6:	e0a8      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004ca8:	2380      	movs	r3, #128	@ 0x80
 8004caa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cae:	e0a4      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a8f      	ldr	r2, [pc, #572]	@ (8004ef4 <UART_SetConfig+0x6a0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d130      	bne.n	8004d1c <UART_SetConfig+0x4c8>
 8004cba:	4b8d      	ldr	r3, [pc, #564]	@ (8004ef0 <UART_SetConfig+0x69c>)
 8004cbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004cbe:	f003 0307 	and.w	r3, r3, #7
 8004cc2:	2b05      	cmp	r3, #5
 8004cc4:	d826      	bhi.n	8004d14 <UART_SetConfig+0x4c0>
 8004cc6:	a201      	add	r2, pc, #4	@ (adr r2, 8004ccc <UART_SetConfig+0x478>)
 8004cc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ccc:	08004ce5 	.word	0x08004ce5
 8004cd0:	08004ced 	.word	0x08004ced
 8004cd4:	08004cf5 	.word	0x08004cf5
 8004cd8:	08004cfd 	.word	0x08004cfd
 8004cdc:	08004d05 	.word	0x08004d05
 8004ce0:	08004d0d 	.word	0x08004d0d
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cea:	e086      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004cec:	2304      	movs	r3, #4
 8004cee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cf2:	e082      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004cf4:	2308      	movs	r3, #8
 8004cf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004cfa:	e07e      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004cfc:	2310      	movs	r3, #16
 8004cfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d02:	e07a      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004d04:	2320      	movs	r3, #32
 8004d06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d0a:	e076      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004d0c:	2340      	movs	r3, #64	@ 0x40
 8004d0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d12:	e072      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004d14:	2380      	movs	r3, #128	@ 0x80
 8004d16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d1a:	e06e      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004d1c:	697b      	ldr	r3, [r7, #20]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a75      	ldr	r2, [pc, #468]	@ (8004ef8 <UART_SetConfig+0x6a4>)
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d130      	bne.n	8004d88 <UART_SetConfig+0x534>
 8004d26:	4b72      	ldr	r3, [pc, #456]	@ (8004ef0 <UART_SetConfig+0x69c>)
 8004d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004d2a:	f003 0307 	and.w	r3, r3, #7
 8004d2e:	2b05      	cmp	r3, #5
 8004d30:	d826      	bhi.n	8004d80 <UART_SetConfig+0x52c>
 8004d32:	a201      	add	r2, pc, #4	@ (adr r2, 8004d38 <UART_SetConfig+0x4e4>)
 8004d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d38:	08004d51 	.word	0x08004d51
 8004d3c:	08004d59 	.word	0x08004d59
 8004d40:	08004d61 	.word	0x08004d61
 8004d44:	08004d69 	.word	0x08004d69
 8004d48:	08004d71 	.word	0x08004d71
 8004d4c:	08004d79 	.word	0x08004d79
 8004d50:	2300      	movs	r3, #0
 8004d52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d56:	e050      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004d58:	2304      	movs	r3, #4
 8004d5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d5e:	e04c      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004d60:	2308      	movs	r3, #8
 8004d62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d66:	e048      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004d68:	2310      	movs	r3, #16
 8004d6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d6e:	e044      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004d70:	2320      	movs	r3, #32
 8004d72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d76:	e040      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004d78:	2340      	movs	r3, #64	@ 0x40
 8004d7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d7e:	e03c      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004d80:	2380      	movs	r3, #128	@ 0x80
 8004d82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004d86:	e038      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	4a5b      	ldr	r2, [pc, #364]	@ (8004efc <UART_SetConfig+0x6a8>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d130      	bne.n	8004df4 <UART_SetConfig+0x5a0>
 8004d92:	4b57      	ldr	r3, [pc, #348]	@ (8004ef0 <UART_SetConfig+0x69c>)
 8004d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	2b05      	cmp	r3, #5
 8004d9c:	d826      	bhi.n	8004dec <UART_SetConfig+0x598>
 8004d9e:	a201      	add	r2, pc, #4	@ (adr r2, 8004da4 <UART_SetConfig+0x550>)
 8004da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da4:	08004dbd 	.word	0x08004dbd
 8004da8:	08004dc5 	.word	0x08004dc5
 8004dac:	08004dcd 	.word	0x08004dcd
 8004db0:	08004dd5 	.word	0x08004dd5
 8004db4:	08004ddd 	.word	0x08004ddd
 8004db8:	08004de5 	.word	0x08004de5
 8004dbc:	2302      	movs	r3, #2
 8004dbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dc2:	e01a      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004dc4:	2304      	movs	r3, #4
 8004dc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dca:	e016      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004dcc:	2308      	movs	r3, #8
 8004dce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dd2:	e012      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004dd4:	2310      	movs	r3, #16
 8004dd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dda:	e00e      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004ddc:	2320      	movs	r3, #32
 8004dde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004de2:	e00a      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004de4:	2340      	movs	r3, #64	@ 0x40
 8004de6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004dea:	e006      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004dec:	2380      	movs	r3, #128	@ 0x80
 8004dee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004df2:	e002      	b.n	8004dfa <UART_SetConfig+0x5a6>
 8004df4:	2380      	movs	r3, #128	@ 0x80
 8004df6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004dfa:	697b      	ldr	r3, [r7, #20]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a3f      	ldr	r2, [pc, #252]	@ (8004efc <UART_SetConfig+0x6a8>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	f040 80f8 	bne.w	8004ff6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004e06:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004e0a:	2b20      	cmp	r3, #32
 8004e0c:	dc46      	bgt.n	8004e9c <UART_SetConfig+0x648>
 8004e0e:	2b02      	cmp	r3, #2
 8004e10:	f2c0 8082 	blt.w	8004f18 <UART_SetConfig+0x6c4>
 8004e14:	3b02      	subs	r3, #2
 8004e16:	2b1e      	cmp	r3, #30
 8004e18:	d87e      	bhi.n	8004f18 <UART_SetConfig+0x6c4>
 8004e1a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e20 <UART_SetConfig+0x5cc>)
 8004e1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e20:	08004ea3 	.word	0x08004ea3
 8004e24:	08004f19 	.word	0x08004f19
 8004e28:	08004eab 	.word	0x08004eab
 8004e2c:	08004f19 	.word	0x08004f19
 8004e30:	08004f19 	.word	0x08004f19
 8004e34:	08004f19 	.word	0x08004f19
 8004e38:	08004ebb 	.word	0x08004ebb
 8004e3c:	08004f19 	.word	0x08004f19
 8004e40:	08004f19 	.word	0x08004f19
 8004e44:	08004f19 	.word	0x08004f19
 8004e48:	08004f19 	.word	0x08004f19
 8004e4c:	08004f19 	.word	0x08004f19
 8004e50:	08004f19 	.word	0x08004f19
 8004e54:	08004f19 	.word	0x08004f19
 8004e58:	08004ecb 	.word	0x08004ecb
 8004e5c:	08004f19 	.word	0x08004f19
 8004e60:	08004f19 	.word	0x08004f19
 8004e64:	08004f19 	.word	0x08004f19
 8004e68:	08004f19 	.word	0x08004f19
 8004e6c:	08004f19 	.word	0x08004f19
 8004e70:	08004f19 	.word	0x08004f19
 8004e74:	08004f19 	.word	0x08004f19
 8004e78:	08004f19 	.word	0x08004f19
 8004e7c:	08004f19 	.word	0x08004f19
 8004e80:	08004f19 	.word	0x08004f19
 8004e84:	08004f19 	.word	0x08004f19
 8004e88:	08004f19 	.word	0x08004f19
 8004e8c:	08004f19 	.word	0x08004f19
 8004e90:	08004f19 	.word	0x08004f19
 8004e94:	08004f19 	.word	0x08004f19
 8004e98:	08004f0b 	.word	0x08004f0b
 8004e9c:	2b40      	cmp	r3, #64	@ 0x40
 8004e9e:	d037      	beq.n	8004f10 <UART_SetConfig+0x6bc>
 8004ea0:	e03a      	b.n	8004f18 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004ea2:	f7fd feed 	bl	8002c80 <HAL_RCCEx_GetD3PCLK1Freq>
 8004ea6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004ea8:	e03c      	b.n	8004f24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004eaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fd fefc 	bl	8002cac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004eb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004eb8:	e034      	b.n	8004f24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004eba:	f107 0318 	add.w	r3, r7, #24
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fe f848 	bl	8002f54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004ec4:	69fb      	ldr	r3, [r7, #28]
 8004ec6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ec8:	e02c      	b.n	8004f24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004eca:	4b09      	ldr	r3, [pc, #36]	@ (8004ef0 <UART_SetConfig+0x69c>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d016      	beq.n	8004f04 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004ed6:	4b06      	ldr	r3, [pc, #24]	@ (8004ef0 <UART_SetConfig+0x69c>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	08db      	lsrs	r3, r3, #3
 8004edc:	f003 0303 	and.w	r3, r3, #3
 8004ee0:	4a07      	ldr	r2, [pc, #28]	@ (8004f00 <UART_SetConfig+0x6ac>)
 8004ee2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004ee8:	e01c      	b.n	8004f24 <UART_SetConfig+0x6d0>
 8004eea:	bf00      	nop
 8004eec:	40011400 	.word	0x40011400
 8004ef0:	58024400 	.word	0x58024400
 8004ef4:	40007800 	.word	0x40007800
 8004ef8:	40007c00 	.word	0x40007c00
 8004efc:	58000c00 	.word	0x58000c00
 8004f00:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004f04:	4b9d      	ldr	r3, [pc, #628]	@ (800517c <UART_SetConfig+0x928>)
 8004f06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f08:	e00c      	b.n	8004f24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f0a:	4b9d      	ldr	r3, [pc, #628]	@ (8005180 <UART_SetConfig+0x92c>)
 8004f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f0e:	e009      	b.n	8004f24 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f10:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004f16:	e005      	b.n	8004f24 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004f22:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	f000 81de 	beq.w	80052e8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f30:	4a94      	ldr	r2, [pc, #592]	@ (8005184 <UART_SetConfig+0x930>)
 8004f32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f36:	461a      	mov	r2, r3
 8004f38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f3e:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	685a      	ldr	r2, [r3, #4]
 8004f44:	4613      	mov	r3, r2
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	4413      	add	r3, r2
 8004f4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d305      	bcc.n	8004f5c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004f56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f58:	429a      	cmp	r2, r3
 8004f5a:	d903      	bls.n	8004f64 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004f62:	e1c1      	b.n	80052e8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f66:	2200      	movs	r2, #0
 8004f68:	60bb      	str	r3, [r7, #8]
 8004f6a:	60fa      	str	r2, [r7, #12]
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f70:	4a84      	ldr	r2, [pc, #528]	@ (8005184 <UART_SetConfig+0x930>)
 8004f72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	2200      	movs	r2, #0
 8004f7a:	603b      	str	r3, [r7, #0]
 8004f7c:	607a      	str	r2, [r7, #4]
 8004f7e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004f86:	f7fb f9fb 	bl	8000380 <__aeabi_uldivmod>
 8004f8a:	4602      	mov	r2, r0
 8004f8c:	460b      	mov	r3, r1
 8004f8e:	4610      	mov	r0, r2
 8004f90:	4619      	mov	r1, r3
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	f04f 0300 	mov.w	r3, #0
 8004f9a:	020b      	lsls	r3, r1, #8
 8004f9c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004fa0:	0202      	lsls	r2, r0, #8
 8004fa2:	6979      	ldr	r1, [r7, #20]
 8004fa4:	6849      	ldr	r1, [r1, #4]
 8004fa6:	0849      	lsrs	r1, r1, #1
 8004fa8:	2000      	movs	r0, #0
 8004faa:	460c      	mov	r4, r1
 8004fac:	4605      	mov	r5, r0
 8004fae:	eb12 0804 	adds.w	r8, r2, r4
 8004fb2:	eb43 0905 	adc.w	r9, r3, r5
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	2200      	movs	r2, #0
 8004fbc:	469a      	mov	sl, r3
 8004fbe:	4693      	mov	fp, r2
 8004fc0:	4652      	mov	r2, sl
 8004fc2:	465b      	mov	r3, fp
 8004fc4:	4640      	mov	r0, r8
 8004fc6:	4649      	mov	r1, r9
 8004fc8:	f7fb f9da 	bl	8000380 <__aeabi_uldivmod>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004fd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fd6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004fda:	d308      	bcc.n	8004fee <UART_SetConfig+0x79a>
 8004fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fde:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004fe2:	d204      	bcs.n	8004fee <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004fea:	60da      	str	r2, [r3, #12]
 8004fec:	e17c      	b.n	80052e8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004ff4:	e178      	b.n	80052e8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ff6:	697b      	ldr	r3, [r7, #20]
 8004ff8:	69db      	ldr	r3, [r3, #28]
 8004ffa:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ffe:	f040 80c5 	bne.w	800518c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8005002:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005006:	2b20      	cmp	r3, #32
 8005008:	dc48      	bgt.n	800509c <UART_SetConfig+0x848>
 800500a:	2b00      	cmp	r3, #0
 800500c:	db7b      	blt.n	8005106 <UART_SetConfig+0x8b2>
 800500e:	2b20      	cmp	r3, #32
 8005010:	d879      	bhi.n	8005106 <UART_SetConfig+0x8b2>
 8005012:	a201      	add	r2, pc, #4	@ (adr r2, 8005018 <UART_SetConfig+0x7c4>)
 8005014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005018:	080050a3 	.word	0x080050a3
 800501c:	080050ab 	.word	0x080050ab
 8005020:	08005107 	.word	0x08005107
 8005024:	08005107 	.word	0x08005107
 8005028:	080050b3 	.word	0x080050b3
 800502c:	08005107 	.word	0x08005107
 8005030:	08005107 	.word	0x08005107
 8005034:	08005107 	.word	0x08005107
 8005038:	080050c3 	.word	0x080050c3
 800503c:	08005107 	.word	0x08005107
 8005040:	08005107 	.word	0x08005107
 8005044:	08005107 	.word	0x08005107
 8005048:	08005107 	.word	0x08005107
 800504c:	08005107 	.word	0x08005107
 8005050:	08005107 	.word	0x08005107
 8005054:	08005107 	.word	0x08005107
 8005058:	080050d3 	.word	0x080050d3
 800505c:	08005107 	.word	0x08005107
 8005060:	08005107 	.word	0x08005107
 8005064:	08005107 	.word	0x08005107
 8005068:	08005107 	.word	0x08005107
 800506c:	08005107 	.word	0x08005107
 8005070:	08005107 	.word	0x08005107
 8005074:	08005107 	.word	0x08005107
 8005078:	08005107 	.word	0x08005107
 800507c:	08005107 	.word	0x08005107
 8005080:	08005107 	.word	0x08005107
 8005084:	08005107 	.word	0x08005107
 8005088:	08005107 	.word	0x08005107
 800508c:	08005107 	.word	0x08005107
 8005090:	08005107 	.word	0x08005107
 8005094:	08005107 	.word	0x08005107
 8005098:	080050f9 	.word	0x080050f9
 800509c:	2b40      	cmp	r3, #64	@ 0x40
 800509e:	d02e      	beq.n	80050fe <UART_SetConfig+0x8aa>
 80050a0:	e031      	b.n	8005106 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80050a2:	f7fd fdc1 	bl	8002c28 <HAL_RCC_GetPCLK1Freq>
 80050a6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80050a8:	e033      	b.n	8005112 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80050aa:	f7fd fdd3 	bl	8002c54 <HAL_RCC_GetPCLK2Freq>
 80050ae:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80050b0:	e02f      	b.n	8005112 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80050b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80050b6:	4618      	mov	r0, r3
 80050b8:	f7fd fdf8 	bl	8002cac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80050bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050c0:	e027      	b.n	8005112 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80050c2:	f107 0318 	add.w	r3, r7, #24
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7fd ff44 	bl	8002f54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050d0:	e01f      	b.n	8005112 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80050d2:	4b2d      	ldr	r3, [pc, #180]	@ (8005188 <UART_SetConfig+0x934>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 0320 	and.w	r3, r3, #32
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d009      	beq.n	80050f2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80050de:	4b2a      	ldr	r3, [pc, #168]	@ (8005188 <UART_SetConfig+0x934>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	08db      	lsrs	r3, r3, #3
 80050e4:	f003 0303 	and.w	r3, r3, #3
 80050e8:	4a24      	ldr	r2, [pc, #144]	@ (800517c <UART_SetConfig+0x928>)
 80050ea:	fa22 f303 	lsr.w	r3, r2, r3
 80050ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80050f0:	e00f      	b.n	8005112 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80050f2:	4b22      	ldr	r3, [pc, #136]	@ (800517c <UART_SetConfig+0x928>)
 80050f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050f6:	e00c      	b.n	8005112 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80050f8:	4b21      	ldr	r3, [pc, #132]	@ (8005180 <UART_SetConfig+0x92c>)
 80050fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80050fc:	e009      	b.n	8005112 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80050fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005102:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005104:	e005      	b.n	8005112 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8005110:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005112:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005114:	2b00      	cmp	r3, #0
 8005116:	f000 80e7 	beq.w	80052e8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800511e:	4a19      	ldr	r2, [pc, #100]	@ (8005184 <UART_SetConfig+0x930>)
 8005120:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005124:	461a      	mov	r2, r3
 8005126:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005128:	fbb3 f3f2 	udiv	r3, r3, r2
 800512c:	005a      	lsls	r2, r3, #1
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	085b      	lsrs	r3, r3, #1
 8005134:	441a      	add	r2, r3
 8005136:	697b      	ldr	r3, [r7, #20]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	fbb2 f3f3 	udiv	r3, r2, r3
 800513e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005140:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005142:	2b0f      	cmp	r3, #15
 8005144:	d916      	bls.n	8005174 <UART_SetConfig+0x920>
 8005146:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005148:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800514c:	d212      	bcs.n	8005174 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800514e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005150:	b29b      	uxth	r3, r3
 8005152:	f023 030f 	bic.w	r3, r3, #15
 8005156:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005158:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800515a:	085b      	lsrs	r3, r3, #1
 800515c:	b29b      	uxth	r3, r3
 800515e:	f003 0307 	and.w	r3, r3, #7
 8005162:	b29a      	uxth	r2, r3
 8005164:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8005166:	4313      	orrs	r3, r2
 8005168:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8005170:	60da      	str	r2, [r3, #12]
 8005172:	e0b9      	b.n	80052e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800517a:	e0b5      	b.n	80052e8 <UART_SetConfig+0xa94>
 800517c:	03d09000 	.word	0x03d09000
 8005180:	003d0900 	.word	0x003d0900
 8005184:	080065f4 	.word	0x080065f4
 8005188:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800518c:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8005190:	2b20      	cmp	r3, #32
 8005192:	dc49      	bgt.n	8005228 <UART_SetConfig+0x9d4>
 8005194:	2b00      	cmp	r3, #0
 8005196:	db7c      	blt.n	8005292 <UART_SetConfig+0xa3e>
 8005198:	2b20      	cmp	r3, #32
 800519a:	d87a      	bhi.n	8005292 <UART_SetConfig+0xa3e>
 800519c:	a201      	add	r2, pc, #4	@ (adr r2, 80051a4 <UART_SetConfig+0x950>)
 800519e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a2:	bf00      	nop
 80051a4:	0800522f 	.word	0x0800522f
 80051a8:	08005237 	.word	0x08005237
 80051ac:	08005293 	.word	0x08005293
 80051b0:	08005293 	.word	0x08005293
 80051b4:	0800523f 	.word	0x0800523f
 80051b8:	08005293 	.word	0x08005293
 80051bc:	08005293 	.word	0x08005293
 80051c0:	08005293 	.word	0x08005293
 80051c4:	0800524f 	.word	0x0800524f
 80051c8:	08005293 	.word	0x08005293
 80051cc:	08005293 	.word	0x08005293
 80051d0:	08005293 	.word	0x08005293
 80051d4:	08005293 	.word	0x08005293
 80051d8:	08005293 	.word	0x08005293
 80051dc:	08005293 	.word	0x08005293
 80051e0:	08005293 	.word	0x08005293
 80051e4:	0800525f 	.word	0x0800525f
 80051e8:	08005293 	.word	0x08005293
 80051ec:	08005293 	.word	0x08005293
 80051f0:	08005293 	.word	0x08005293
 80051f4:	08005293 	.word	0x08005293
 80051f8:	08005293 	.word	0x08005293
 80051fc:	08005293 	.word	0x08005293
 8005200:	08005293 	.word	0x08005293
 8005204:	08005293 	.word	0x08005293
 8005208:	08005293 	.word	0x08005293
 800520c:	08005293 	.word	0x08005293
 8005210:	08005293 	.word	0x08005293
 8005214:	08005293 	.word	0x08005293
 8005218:	08005293 	.word	0x08005293
 800521c:	08005293 	.word	0x08005293
 8005220:	08005293 	.word	0x08005293
 8005224:	08005285 	.word	0x08005285
 8005228:	2b40      	cmp	r3, #64	@ 0x40
 800522a:	d02e      	beq.n	800528a <UART_SetConfig+0xa36>
 800522c:	e031      	b.n	8005292 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800522e:	f7fd fcfb 	bl	8002c28 <HAL_RCC_GetPCLK1Freq>
 8005232:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8005234:	e033      	b.n	800529e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005236:	f7fd fd0d 	bl	8002c54 <HAL_RCC_GetPCLK2Freq>
 800523a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800523c:	e02f      	b.n	800529e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800523e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8005242:	4618      	mov	r0, r3
 8005244:	f7fd fd32 	bl	8002cac <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005248:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800524a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800524c:	e027      	b.n	800529e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800524e:	f107 0318 	add.w	r3, r7, #24
 8005252:	4618      	mov	r0, r3
 8005254:	f7fd fe7e 	bl	8002f54 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005258:	69fb      	ldr	r3, [r7, #28]
 800525a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800525c:	e01f      	b.n	800529e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800525e:	4b2d      	ldr	r3, [pc, #180]	@ (8005314 <UART_SetConfig+0xac0>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0320 	and.w	r3, r3, #32
 8005266:	2b00      	cmp	r3, #0
 8005268:	d009      	beq.n	800527e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800526a:	4b2a      	ldr	r3, [pc, #168]	@ (8005314 <UART_SetConfig+0xac0>)
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	08db      	lsrs	r3, r3, #3
 8005270:	f003 0303 	and.w	r3, r3, #3
 8005274:	4a28      	ldr	r2, [pc, #160]	@ (8005318 <UART_SetConfig+0xac4>)
 8005276:	fa22 f303 	lsr.w	r3, r2, r3
 800527a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800527c:	e00f      	b.n	800529e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800527e:	4b26      	ldr	r3, [pc, #152]	@ (8005318 <UART_SetConfig+0xac4>)
 8005280:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005282:	e00c      	b.n	800529e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005284:	4b25      	ldr	r3, [pc, #148]	@ (800531c <UART_SetConfig+0xac8>)
 8005286:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005288:	e009      	b.n	800529e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800528a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800528e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8005290:	e005      	b.n	800529e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8005296:	2301      	movs	r3, #1
 8005298:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800529c:	bf00      	nop
    }

    if (pclk != 0U)
 800529e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d021      	beq.n	80052e8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052a8:	4a1d      	ldr	r2, [pc, #116]	@ (8005320 <UART_SetConfig+0xacc>)
 80052aa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80052ae:	461a      	mov	r2, r3
 80052b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80052b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	685b      	ldr	r3, [r3, #4]
 80052ba:	085b      	lsrs	r3, r3, #1
 80052bc:	441a      	add	r2, r3
 80052be:	697b      	ldr	r3, [r7, #20]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052ca:	2b0f      	cmp	r3, #15
 80052cc:	d909      	bls.n	80052e2 <UART_SetConfig+0xa8e>
 80052ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052d4:	d205      	bcs.n	80052e2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80052d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052d8:	b29a      	uxth	r2, r3
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	60da      	str	r2, [r3, #12]
 80052e0:	e002      	b.n	80052e8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2200      	movs	r2, #0
 80052fc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2200      	movs	r2, #0
 8005302:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8005304:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8005308:	4618      	mov	r0, r3
 800530a:	3748      	adds	r7, #72	@ 0x48
 800530c:	46bd      	mov	sp, r7
 800530e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005312:	bf00      	nop
 8005314:	58024400 	.word	0x58024400
 8005318:	03d09000 	.word	0x03d09000
 800531c:	003d0900 	.word	0x003d0900
 8005320:	080065f4 	.word	0x080065f4

08005324 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005324:	b480      	push	{r7}
 8005326:	b083      	sub	sp, #12
 8005328:	af00      	add	r7, sp, #0
 800532a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005330:	f003 0308 	and.w	r3, r3, #8
 8005334:	2b00      	cmp	r3, #0
 8005336:	d00a      	beq.n	800534e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	685b      	ldr	r3, [r3, #4]
 800533e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	430a      	orrs	r2, r1
 800534c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005352:	f003 0301 	and.w	r3, r3, #1
 8005356:	2b00      	cmp	r3, #0
 8005358:	d00a      	beq.n	8005370 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005374:	f003 0302 	and.w	r3, r3, #2
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00a      	beq.n	8005392 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	430a      	orrs	r2, r1
 8005390:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005396:	f003 0304 	and.w	r3, r3, #4
 800539a:	2b00      	cmp	r3, #0
 800539c:	d00a      	beq.n	80053b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	430a      	orrs	r2, r1
 80053b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053b8:	f003 0310 	and.w	r3, r3, #16
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d00a      	beq.n	80053d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053da:	f003 0320 	and.w	r3, r3, #32
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d00a      	beq.n	80053f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	430a      	orrs	r2, r1
 80053f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005400:	2b00      	cmp	r3, #0
 8005402:	d01a      	beq.n	800543a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	430a      	orrs	r2, r1
 8005418:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800541e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005422:	d10a      	bne.n	800543a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	430a      	orrs	r2, r1
 8005438:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800543e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00a      	beq.n	800545c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	430a      	orrs	r2, r1
 800545a:	605a      	str	r2, [r3, #4]
  }
}
 800545c:	bf00      	nop
 800545e:	370c      	adds	r7, #12
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b098      	sub	sp, #96	@ 0x60
 800546c:	af02      	add	r7, sp, #8
 800546e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005478:	f7fc f890 	bl	800159c <HAL_GetTick>
 800547c:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0308 	and.w	r3, r3, #8
 8005488:	2b08      	cmp	r3, #8
 800548a:	d12f      	bne.n	80054ec <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800548c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005490:	9300      	str	r3, [sp, #0]
 8005492:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005494:	2200      	movs	r2, #0
 8005496:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800549a:	6878      	ldr	r0, [r7, #4]
 800549c:	f000 f88e 	bl	80055bc <UART_WaitOnFlagUntilTimeout>
 80054a0:	4603      	mov	r3, r0
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d022      	beq.n	80054ec <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054ae:	e853 3f00 	ldrex	r3, [r3]
 80054b2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80054b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054b6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80054ba:	653b      	str	r3, [r7, #80]	@ 0x50
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	461a      	mov	r2, r3
 80054c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80054c6:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054c8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80054ca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80054cc:	e841 2300 	strex	r3, r2, [r1]
 80054d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80054d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d1e6      	bne.n	80054a6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2220      	movs	r2, #32
 80054dc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2200      	movs	r2, #0
 80054e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80054e8:	2303      	movs	r3, #3
 80054ea:	e063      	b.n	80055b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f003 0304 	and.w	r3, r3, #4
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d149      	bne.n	800558e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80054fa:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80054fe:	9300      	str	r3, [sp, #0]
 8005500:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005502:	2200      	movs	r2, #0
 8005504:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f000 f857 	bl	80055bc <UART_WaitOnFlagUntilTimeout>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d03c      	beq.n	800558e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800551a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800551c:	e853 3f00 	ldrex	r3, [r3]
 8005520:	623b      	str	r3, [r7, #32]
   return(result);
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005528:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	461a      	mov	r2, r3
 8005530:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005532:	633b      	str	r3, [r7, #48]	@ 0x30
 8005534:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e6      	bne.n	8005514 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	3308      	adds	r3, #8
 800554c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554e:	693b      	ldr	r3, [r7, #16]
 8005550:	e853 3f00 	ldrex	r3, [r3]
 8005554:	60fb      	str	r3, [r7, #12]
   return(result);
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f023 0301 	bic.w	r3, r3, #1
 800555c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	3308      	adds	r3, #8
 8005564:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005566:	61fa      	str	r2, [r7, #28]
 8005568:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	69b9      	ldr	r1, [r7, #24]
 800556c:	69fa      	ldr	r2, [r7, #28]
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	617b      	str	r3, [r7, #20]
   return(result);
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e5      	bne.n	8005546 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2220      	movs	r2, #32
 800557e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e012      	b.n	80055b4 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2220      	movs	r2, #32
 8005592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2220      	movs	r2, #32
 800559a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2200      	movs	r2, #0
 80055a2:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2200      	movs	r2, #0
 80055a8:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2200      	movs	r2, #0
 80055ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80055b2:	2300      	movs	r3, #0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3758      	adds	r7, #88	@ 0x58
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	603b      	str	r3, [r7, #0]
 80055c8:	4613      	mov	r3, r2
 80055ca:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80055cc:	e04f      	b.n	800566e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055ce:	69bb      	ldr	r3, [r7, #24]
 80055d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d4:	d04b      	beq.n	800566e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d6:	f7fb ffe1 	bl	800159c <HAL_GetTick>
 80055da:	4602      	mov	r2, r0
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	1ad3      	subs	r3, r2, r3
 80055e0:	69ba      	ldr	r2, [r7, #24]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d302      	bcc.n	80055ec <UART_WaitOnFlagUntilTimeout+0x30>
 80055e6:	69bb      	ldr	r3, [r7, #24]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d101      	bne.n	80055f0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80055ec:	2303      	movs	r3, #3
 80055ee:	e04e      	b.n	800568e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0304 	and.w	r3, r3, #4
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d037      	beq.n	800566e <UART_WaitOnFlagUntilTimeout+0xb2>
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2b80      	cmp	r3, #128	@ 0x80
 8005602:	d034      	beq.n	800566e <UART_WaitOnFlagUntilTimeout+0xb2>
 8005604:	68bb      	ldr	r3, [r7, #8]
 8005606:	2b40      	cmp	r3, #64	@ 0x40
 8005608:	d031      	beq.n	800566e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	f003 0308 	and.w	r3, r3, #8
 8005614:	2b08      	cmp	r3, #8
 8005616:	d110      	bne.n	800563a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	2208      	movs	r2, #8
 800561e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005620:	68f8      	ldr	r0, [r7, #12]
 8005622:	f000 f839 	bl	8005698 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2208      	movs	r2, #8
 800562a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e029      	b.n	800568e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	69db      	ldr	r3, [r3, #28]
 8005640:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005644:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005648:	d111      	bne.n	800566e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005652:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005654:	68f8      	ldr	r0, [r7, #12]
 8005656:	f000 f81f 	bl	8005698 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2220      	movs	r2, #32
 800565e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800566a:	2303      	movs	r3, #3
 800566c:	e00f      	b.n	800568e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69da      	ldr	r2, [r3, #28]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	4013      	ands	r3, r2
 8005678:	68ba      	ldr	r2, [r7, #8]
 800567a:	429a      	cmp	r2, r3
 800567c:	bf0c      	ite	eq
 800567e:	2301      	moveq	r3, #1
 8005680:	2300      	movne	r3, #0
 8005682:	b2db      	uxtb	r3, r3
 8005684:	461a      	mov	r2, r3
 8005686:	79fb      	ldrb	r3, [r7, #7]
 8005688:	429a      	cmp	r2, r3
 800568a:	d0a0      	beq.n	80055ce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3710      	adds	r7, #16
 8005692:	46bd      	mov	sp, r7
 8005694:	bd80      	pop	{r7, pc}
	...

08005698 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005698:	b480      	push	{r7}
 800569a:	b095      	sub	sp, #84	@ 0x54
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80056ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80056b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	461a      	mov	r2, r3
 80056bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056be:	643b      	str	r3, [r7, #64]	@ 0x40
 80056c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80056c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80056c6:	e841 2300 	strex	r3, r2, [r1]
 80056ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80056cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1e6      	bne.n	80056a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	3308      	adds	r3, #8
 80056d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056da:	6a3b      	ldr	r3, [r7, #32]
 80056dc:	e853 3f00 	ldrex	r3, [r3]
 80056e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80056e2:	69fa      	ldr	r2, [r7, #28]
 80056e4:	4b1e      	ldr	r3, [pc, #120]	@ (8005760 <UART_EndRxTransfer+0xc8>)
 80056e6:	4013      	ands	r3, r2
 80056e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3308      	adds	r3, #8
 80056f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80056f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80056f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056fa:	e841 2300 	strex	r3, r2, [r1]
 80056fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005702:	2b00      	cmp	r3, #0
 8005704:	d1e5      	bne.n	80056d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800570a:	2b01      	cmp	r3, #1
 800570c:	d118      	bne.n	8005740 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	e853 3f00 	ldrex	r3, [r3]
 800571a:	60bb      	str	r3, [r7, #8]
   return(result);
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	f023 0310 	bic.w	r3, r3, #16
 8005722:	647b      	str	r3, [r7, #68]	@ 0x44
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	461a      	mov	r2, r3
 800572a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800572c:	61bb      	str	r3, [r7, #24]
 800572e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005730:	6979      	ldr	r1, [r7, #20]
 8005732:	69ba      	ldr	r2, [r7, #24]
 8005734:	e841 2300 	strex	r3, r2, [r1]
 8005738:	613b      	str	r3, [r7, #16]
   return(result);
 800573a:	693b      	ldr	r3, [r7, #16]
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1e6      	bne.n	800570e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2220      	movs	r2, #32
 8005744:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	2200      	movs	r2, #0
 800574c:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005754:	bf00      	nop
 8005756:	3754      	adds	r7, #84	@ 0x54
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr
 8005760:	effffffe 	.word	0xeffffffe

08005764 <std>:
 8005764:	2300      	movs	r3, #0
 8005766:	b510      	push	{r4, lr}
 8005768:	4604      	mov	r4, r0
 800576a:	e9c0 3300 	strd	r3, r3, [r0]
 800576e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005772:	6083      	str	r3, [r0, #8]
 8005774:	8181      	strh	r1, [r0, #12]
 8005776:	6643      	str	r3, [r0, #100]	@ 0x64
 8005778:	81c2      	strh	r2, [r0, #14]
 800577a:	6183      	str	r3, [r0, #24]
 800577c:	4619      	mov	r1, r3
 800577e:	2208      	movs	r2, #8
 8005780:	305c      	adds	r0, #92	@ 0x5c
 8005782:	f000 f906 	bl	8005992 <memset>
 8005786:	4b0d      	ldr	r3, [pc, #52]	@ (80057bc <std+0x58>)
 8005788:	6263      	str	r3, [r4, #36]	@ 0x24
 800578a:	4b0d      	ldr	r3, [pc, #52]	@ (80057c0 <std+0x5c>)
 800578c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800578e:	4b0d      	ldr	r3, [pc, #52]	@ (80057c4 <std+0x60>)
 8005790:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005792:	4b0d      	ldr	r3, [pc, #52]	@ (80057c8 <std+0x64>)
 8005794:	6323      	str	r3, [r4, #48]	@ 0x30
 8005796:	4b0d      	ldr	r3, [pc, #52]	@ (80057cc <std+0x68>)
 8005798:	6224      	str	r4, [r4, #32]
 800579a:	429c      	cmp	r4, r3
 800579c:	d006      	beq.n	80057ac <std+0x48>
 800579e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80057a2:	4294      	cmp	r4, r2
 80057a4:	d002      	beq.n	80057ac <std+0x48>
 80057a6:	33d0      	adds	r3, #208	@ 0xd0
 80057a8:	429c      	cmp	r4, r3
 80057aa:	d105      	bne.n	80057b8 <std+0x54>
 80057ac:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80057b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80057b4:	f000 b966 	b.w	8005a84 <__retarget_lock_init_recursive>
 80057b8:	bd10      	pop	{r4, pc}
 80057ba:	bf00      	nop
 80057bc:	0800590d 	.word	0x0800590d
 80057c0:	0800592f 	.word	0x0800592f
 80057c4:	08005967 	.word	0x08005967
 80057c8:	0800598b 	.word	0x0800598b
 80057cc:	24000220 	.word	0x24000220

080057d0 <stdio_exit_handler>:
 80057d0:	4a02      	ldr	r2, [pc, #8]	@ (80057dc <stdio_exit_handler+0xc>)
 80057d2:	4903      	ldr	r1, [pc, #12]	@ (80057e0 <stdio_exit_handler+0x10>)
 80057d4:	4803      	ldr	r0, [pc, #12]	@ (80057e4 <stdio_exit_handler+0x14>)
 80057d6:	f000 b869 	b.w	80058ac <_fwalk_sglue>
 80057da:	bf00      	nop
 80057dc:	24000014 	.word	0x24000014
 80057e0:	08006321 	.word	0x08006321
 80057e4:	24000024 	.word	0x24000024

080057e8 <cleanup_stdio>:
 80057e8:	6841      	ldr	r1, [r0, #4]
 80057ea:	4b0c      	ldr	r3, [pc, #48]	@ (800581c <cleanup_stdio+0x34>)
 80057ec:	4299      	cmp	r1, r3
 80057ee:	b510      	push	{r4, lr}
 80057f0:	4604      	mov	r4, r0
 80057f2:	d001      	beq.n	80057f8 <cleanup_stdio+0x10>
 80057f4:	f000 fd94 	bl	8006320 <_fflush_r>
 80057f8:	68a1      	ldr	r1, [r4, #8]
 80057fa:	4b09      	ldr	r3, [pc, #36]	@ (8005820 <cleanup_stdio+0x38>)
 80057fc:	4299      	cmp	r1, r3
 80057fe:	d002      	beq.n	8005806 <cleanup_stdio+0x1e>
 8005800:	4620      	mov	r0, r4
 8005802:	f000 fd8d 	bl	8006320 <_fflush_r>
 8005806:	68e1      	ldr	r1, [r4, #12]
 8005808:	4b06      	ldr	r3, [pc, #24]	@ (8005824 <cleanup_stdio+0x3c>)
 800580a:	4299      	cmp	r1, r3
 800580c:	d004      	beq.n	8005818 <cleanup_stdio+0x30>
 800580e:	4620      	mov	r0, r4
 8005810:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005814:	f000 bd84 	b.w	8006320 <_fflush_r>
 8005818:	bd10      	pop	{r4, pc}
 800581a:	bf00      	nop
 800581c:	24000220 	.word	0x24000220
 8005820:	24000288 	.word	0x24000288
 8005824:	240002f0 	.word	0x240002f0

08005828 <global_stdio_init.part.0>:
 8005828:	b510      	push	{r4, lr}
 800582a:	4b0b      	ldr	r3, [pc, #44]	@ (8005858 <global_stdio_init.part.0+0x30>)
 800582c:	4c0b      	ldr	r4, [pc, #44]	@ (800585c <global_stdio_init.part.0+0x34>)
 800582e:	4a0c      	ldr	r2, [pc, #48]	@ (8005860 <global_stdio_init.part.0+0x38>)
 8005830:	601a      	str	r2, [r3, #0]
 8005832:	4620      	mov	r0, r4
 8005834:	2200      	movs	r2, #0
 8005836:	2104      	movs	r1, #4
 8005838:	f7ff ff94 	bl	8005764 <std>
 800583c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005840:	2201      	movs	r2, #1
 8005842:	2109      	movs	r1, #9
 8005844:	f7ff ff8e 	bl	8005764 <std>
 8005848:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800584c:	2202      	movs	r2, #2
 800584e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005852:	2112      	movs	r1, #18
 8005854:	f7ff bf86 	b.w	8005764 <std>
 8005858:	24000358 	.word	0x24000358
 800585c:	24000220 	.word	0x24000220
 8005860:	080057d1 	.word	0x080057d1

08005864 <__sfp_lock_acquire>:
 8005864:	4801      	ldr	r0, [pc, #4]	@ (800586c <__sfp_lock_acquire+0x8>)
 8005866:	f000 b90e 	b.w	8005a86 <__retarget_lock_acquire_recursive>
 800586a:	bf00      	nop
 800586c:	24000361 	.word	0x24000361

08005870 <__sfp_lock_release>:
 8005870:	4801      	ldr	r0, [pc, #4]	@ (8005878 <__sfp_lock_release+0x8>)
 8005872:	f000 b909 	b.w	8005a88 <__retarget_lock_release_recursive>
 8005876:	bf00      	nop
 8005878:	24000361 	.word	0x24000361

0800587c <__sinit>:
 800587c:	b510      	push	{r4, lr}
 800587e:	4604      	mov	r4, r0
 8005880:	f7ff fff0 	bl	8005864 <__sfp_lock_acquire>
 8005884:	6a23      	ldr	r3, [r4, #32]
 8005886:	b11b      	cbz	r3, 8005890 <__sinit+0x14>
 8005888:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800588c:	f7ff bff0 	b.w	8005870 <__sfp_lock_release>
 8005890:	4b04      	ldr	r3, [pc, #16]	@ (80058a4 <__sinit+0x28>)
 8005892:	6223      	str	r3, [r4, #32]
 8005894:	4b04      	ldr	r3, [pc, #16]	@ (80058a8 <__sinit+0x2c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d1f5      	bne.n	8005888 <__sinit+0xc>
 800589c:	f7ff ffc4 	bl	8005828 <global_stdio_init.part.0>
 80058a0:	e7f2      	b.n	8005888 <__sinit+0xc>
 80058a2:	bf00      	nop
 80058a4:	080057e9 	.word	0x080057e9
 80058a8:	24000358 	.word	0x24000358

080058ac <_fwalk_sglue>:
 80058ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058b0:	4607      	mov	r7, r0
 80058b2:	4688      	mov	r8, r1
 80058b4:	4614      	mov	r4, r2
 80058b6:	2600      	movs	r6, #0
 80058b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80058bc:	f1b9 0901 	subs.w	r9, r9, #1
 80058c0:	d505      	bpl.n	80058ce <_fwalk_sglue+0x22>
 80058c2:	6824      	ldr	r4, [r4, #0]
 80058c4:	2c00      	cmp	r4, #0
 80058c6:	d1f7      	bne.n	80058b8 <_fwalk_sglue+0xc>
 80058c8:	4630      	mov	r0, r6
 80058ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058ce:	89ab      	ldrh	r3, [r5, #12]
 80058d0:	2b01      	cmp	r3, #1
 80058d2:	d907      	bls.n	80058e4 <_fwalk_sglue+0x38>
 80058d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80058d8:	3301      	adds	r3, #1
 80058da:	d003      	beq.n	80058e4 <_fwalk_sglue+0x38>
 80058dc:	4629      	mov	r1, r5
 80058de:	4638      	mov	r0, r7
 80058e0:	47c0      	blx	r8
 80058e2:	4306      	orrs	r6, r0
 80058e4:	3568      	adds	r5, #104	@ 0x68
 80058e6:	e7e9      	b.n	80058bc <_fwalk_sglue+0x10>

080058e8 <iprintf>:
 80058e8:	b40f      	push	{r0, r1, r2, r3}
 80058ea:	b507      	push	{r0, r1, r2, lr}
 80058ec:	4906      	ldr	r1, [pc, #24]	@ (8005908 <iprintf+0x20>)
 80058ee:	ab04      	add	r3, sp, #16
 80058f0:	6808      	ldr	r0, [r1, #0]
 80058f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80058f6:	6881      	ldr	r1, [r0, #8]
 80058f8:	9301      	str	r3, [sp, #4]
 80058fa:	f000 f9e9 	bl	8005cd0 <_vfiprintf_r>
 80058fe:	b003      	add	sp, #12
 8005900:	f85d eb04 	ldr.w	lr, [sp], #4
 8005904:	b004      	add	sp, #16
 8005906:	4770      	bx	lr
 8005908:	24000020 	.word	0x24000020

0800590c <__sread>:
 800590c:	b510      	push	{r4, lr}
 800590e:	460c      	mov	r4, r1
 8005910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005914:	f000 f868 	bl	80059e8 <_read_r>
 8005918:	2800      	cmp	r0, #0
 800591a:	bfab      	itete	ge
 800591c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800591e:	89a3      	ldrhlt	r3, [r4, #12]
 8005920:	181b      	addge	r3, r3, r0
 8005922:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005926:	bfac      	ite	ge
 8005928:	6563      	strge	r3, [r4, #84]	@ 0x54
 800592a:	81a3      	strhlt	r3, [r4, #12]
 800592c:	bd10      	pop	{r4, pc}

0800592e <__swrite>:
 800592e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005932:	461f      	mov	r7, r3
 8005934:	898b      	ldrh	r3, [r1, #12]
 8005936:	05db      	lsls	r3, r3, #23
 8005938:	4605      	mov	r5, r0
 800593a:	460c      	mov	r4, r1
 800593c:	4616      	mov	r6, r2
 800593e:	d505      	bpl.n	800594c <__swrite+0x1e>
 8005940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005944:	2302      	movs	r3, #2
 8005946:	2200      	movs	r2, #0
 8005948:	f000 f83c 	bl	80059c4 <_lseek_r>
 800594c:	89a3      	ldrh	r3, [r4, #12]
 800594e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005952:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005956:	81a3      	strh	r3, [r4, #12]
 8005958:	4632      	mov	r2, r6
 800595a:	463b      	mov	r3, r7
 800595c:	4628      	mov	r0, r5
 800595e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005962:	f000 b853 	b.w	8005a0c <_write_r>

08005966 <__sseek>:
 8005966:	b510      	push	{r4, lr}
 8005968:	460c      	mov	r4, r1
 800596a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800596e:	f000 f829 	bl	80059c4 <_lseek_r>
 8005972:	1c43      	adds	r3, r0, #1
 8005974:	89a3      	ldrh	r3, [r4, #12]
 8005976:	bf15      	itete	ne
 8005978:	6560      	strne	r0, [r4, #84]	@ 0x54
 800597a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800597e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005982:	81a3      	strheq	r3, [r4, #12]
 8005984:	bf18      	it	ne
 8005986:	81a3      	strhne	r3, [r4, #12]
 8005988:	bd10      	pop	{r4, pc}

0800598a <__sclose>:
 800598a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800598e:	f000 b809 	b.w	80059a4 <_close_r>

08005992 <memset>:
 8005992:	4402      	add	r2, r0
 8005994:	4603      	mov	r3, r0
 8005996:	4293      	cmp	r3, r2
 8005998:	d100      	bne.n	800599c <memset+0xa>
 800599a:	4770      	bx	lr
 800599c:	f803 1b01 	strb.w	r1, [r3], #1
 80059a0:	e7f9      	b.n	8005996 <memset+0x4>
	...

080059a4 <_close_r>:
 80059a4:	b538      	push	{r3, r4, r5, lr}
 80059a6:	4d06      	ldr	r5, [pc, #24]	@ (80059c0 <_close_r+0x1c>)
 80059a8:	2300      	movs	r3, #0
 80059aa:	4604      	mov	r4, r0
 80059ac:	4608      	mov	r0, r1
 80059ae:	602b      	str	r3, [r5, #0]
 80059b0:	f7fb fc02 	bl	80011b8 <_close>
 80059b4:	1c43      	adds	r3, r0, #1
 80059b6:	d102      	bne.n	80059be <_close_r+0x1a>
 80059b8:	682b      	ldr	r3, [r5, #0]
 80059ba:	b103      	cbz	r3, 80059be <_close_r+0x1a>
 80059bc:	6023      	str	r3, [r4, #0]
 80059be:	bd38      	pop	{r3, r4, r5, pc}
 80059c0:	2400035c 	.word	0x2400035c

080059c4 <_lseek_r>:
 80059c4:	b538      	push	{r3, r4, r5, lr}
 80059c6:	4d07      	ldr	r5, [pc, #28]	@ (80059e4 <_lseek_r+0x20>)
 80059c8:	4604      	mov	r4, r0
 80059ca:	4608      	mov	r0, r1
 80059cc:	4611      	mov	r1, r2
 80059ce:	2200      	movs	r2, #0
 80059d0:	602a      	str	r2, [r5, #0]
 80059d2:	461a      	mov	r2, r3
 80059d4:	f7fb fc17 	bl	8001206 <_lseek>
 80059d8:	1c43      	adds	r3, r0, #1
 80059da:	d102      	bne.n	80059e2 <_lseek_r+0x1e>
 80059dc:	682b      	ldr	r3, [r5, #0]
 80059de:	b103      	cbz	r3, 80059e2 <_lseek_r+0x1e>
 80059e0:	6023      	str	r3, [r4, #0]
 80059e2:	bd38      	pop	{r3, r4, r5, pc}
 80059e4:	2400035c 	.word	0x2400035c

080059e8 <_read_r>:
 80059e8:	b538      	push	{r3, r4, r5, lr}
 80059ea:	4d07      	ldr	r5, [pc, #28]	@ (8005a08 <_read_r+0x20>)
 80059ec:	4604      	mov	r4, r0
 80059ee:	4608      	mov	r0, r1
 80059f0:	4611      	mov	r1, r2
 80059f2:	2200      	movs	r2, #0
 80059f4:	602a      	str	r2, [r5, #0]
 80059f6:	461a      	mov	r2, r3
 80059f8:	f7fb fba5 	bl	8001146 <_read>
 80059fc:	1c43      	adds	r3, r0, #1
 80059fe:	d102      	bne.n	8005a06 <_read_r+0x1e>
 8005a00:	682b      	ldr	r3, [r5, #0]
 8005a02:	b103      	cbz	r3, 8005a06 <_read_r+0x1e>
 8005a04:	6023      	str	r3, [r4, #0]
 8005a06:	bd38      	pop	{r3, r4, r5, pc}
 8005a08:	2400035c 	.word	0x2400035c

08005a0c <_write_r>:
 8005a0c:	b538      	push	{r3, r4, r5, lr}
 8005a0e:	4d07      	ldr	r5, [pc, #28]	@ (8005a2c <_write_r+0x20>)
 8005a10:	4604      	mov	r4, r0
 8005a12:	4608      	mov	r0, r1
 8005a14:	4611      	mov	r1, r2
 8005a16:	2200      	movs	r2, #0
 8005a18:	602a      	str	r2, [r5, #0]
 8005a1a:	461a      	mov	r2, r3
 8005a1c:	f7fb fbb0 	bl	8001180 <_write>
 8005a20:	1c43      	adds	r3, r0, #1
 8005a22:	d102      	bne.n	8005a2a <_write_r+0x1e>
 8005a24:	682b      	ldr	r3, [r5, #0]
 8005a26:	b103      	cbz	r3, 8005a2a <_write_r+0x1e>
 8005a28:	6023      	str	r3, [r4, #0]
 8005a2a:	bd38      	pop	{r3, r4, r5, pc}
 8005a2c:	2400035c 	.word	0x2400035c

08005a30 <__errno>:
 8005a30:	4b01      	ldr	r3, [pc, #4]	@ (8005a38 <__errno+0x8>)
 8005a32:	6818      	ldr	r0, [r3, #0]
 8005a34:	4770      	bx	lr
 8005a36:	bf00      	nop
 8005a38:	24000020 	.word	0x24000020

08005a3c <__libc_init_array>:
 8005a3c:	b570      	push	{r4, r5, r6, lr}
 8005a3e:	4d0d      	ldr	r5, [pc, #52]	@ (8005a74 <__libc_init_array+0x38>)
 8005a40:	4c0d      	ldr	r4, [pc, #52]	@ (8005a78 <__libc_init_array+0x3c>)
 8005a42:	1b64      	subs	r4, r4, r5
 8005a44:	10a4      	asrs	r4, r4, #2
 8005a46:	2600      	movs	r6, #0
 8005a48:	42a6      	cmp	r6, r4
 8005a4a:	d109      	bne.n	8005a60 <__libc_init_array+0x24>
 8005a4c:	4d0b      	ldr	r5, [pc, #44]	@ (8005a7c <__libc_init_array+0x40>)
 8005a4e:	4c0c      	ldr	r4, [pc, #48]	@ (8005a80 <__libc_init_array+0x44>)
 8005a50:	f000 fdb6 	bl	80065c0 <_init>
 8005a54:	1b64      	subs	r4, r4, r5
 8005a56:	10a4      	asrs	r4, r4, #2
 8005a58:	2600      	movs	r6, #0
 8005a5a:	42a6      	cmp	r6, r4
 8005a5c:	d105      	bne.n	8005a6a <__libc_init_array+0x2e>
 8005a5e:	bd70      	pop	{r4, r5, r6, pc}
 8005a60:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a64:	4798      	blx	r3
 8005a66:	3601      	adds	r6, #1
 8005a68:	e7ee      	b.n	8005a48 <__libc_init_array+0xc>
 8005a6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a6e:	4798      	blx	r3
 8005a70:	3601      	adds	r6, #1
 8005a72:	e7f2      	b.n	8005a5a <__libc_init_array+0x1e>
 8005a74:	08006648 	.word	0x08006648
 8005a78:	08006648 	.word	0x08006648
 8005a7c:	08006648 	.word	0x08006648
 8005a80:	0800664c 	.word	0x0800664c

08005a84 <__retarget_lock_init_recursive>:
 8005a84:	4770      	bx	lr

08005a86 <__retarget_lock_acquire_recursive>:
 8005a86:	4770      	bx	lr

08005a88 <__retarget_lock_release_recursive>:
 8005a88:	4770      	bx	lr
	...

08005a8c <_free_r>:
 8005a8c:	b538      	push	{r3, r4, r5, lr}
 8005a8e:	4605      	mov	r5, r0
 8005a90:	2900      	cmp	r1, #0
 8005a92:	d041      	beq.n	8005b18 <_free_r+0x8c>
 8005a94:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005a98:	1f0c      	subs	r4, r1, #4
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	bfb8      	it	lt
 8005a9e:	18e4      	addlt	r4, r4, r3
 8005aa0:	f000 f8e0 	bl	8005c64 <__malloc_lock>
 8005aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8005b1c <_free_r+0x90>)
 8005aa6:	6813      	ldr	r3, [r2, #0]
 8005aa8:	b933      	cbnz	r3, 8005ab8 <_free_r+0x2c>
 8005aaa:	6063      	str	r3, [r4, #4]
 8005aac:	6014      	str	r4, [r2, #0]
 8005aae:	4628      	mov	r0, r5
 8005ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ab4:	f000 b8dc 	b.w	8005c70 <__malloc_unlock>
 8005ab8:	42a3      	cmp	r3, r4
 8005aba:	d908      	bls.n	8005ace <_free_r+0x42>
 8005abc:	6820      	ldr	r0, [r4, #0]
 8005abe:	1821      	adds	r1, r4, r0
 8005ac0:	428b      	cmp	r3, r1
 8005ac2:	bf01      	itttt	eq
 8005ac4:	6819      	ldreq	r1, [r3, #0]
 8005ac6:	685b      	ldreq	r3, [r3, #4]
 8005ac8:	1809      	addeq	r1, r1, r0
 8005aca:	6021      	streq	r1, [r4, #0]
 8005acc:	e7ed      	b.n	8005aaa <_free_r+0x1e>
 8005ace:	461a      	mov	r2, r3
 8005ad0:	685b      	ldr	r3, [r3, #4]
 8005ad2:	b10b      	cbz	r3, 8005ad8 <_free_r+0x4c>
 8005ad4:	42a3      	cmp	r3, r4
 8005ad6:	d9fa      	bls.n	8005ace <_free_r+0x42>
 8005ad8:	6811      	ldr	r1, [r2, #0]
 8005ada:	1850      	adds	r0, r2, r1
 8005adc:	42a0      	cmp	r0, r4
 8005ade:	d10b      	bne.n	8005af8 <_free_r+0x6c>
 8005ae0:	6820      	ldr	r0, [r4, #0]
 8005ae2:	4401      	add	r1, r0
 8005ae4:	1850      	adds	r0, r2, r1
 8005ae6:	4283      	cmp	r3, r0
 8005ae8:	6011      	str	r1, [r2, #0]
 8005aea:	d1e0      	bne.n	8005aae <_free_r+0x22>
 8005aec:	6818      	ldr	r0, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	6053      	str	r3, [r2, #4]
 8005af2:	4408      	add	r0, r1
 8005af4:	6010      	str	r0, [r2, #0]
 8005af6:	e7da      	b.n	8005aae <_free_r+0x22>
 8005af8:	d902      	bls.n	8005b00 <_free_r+0x74>
 8005afa:	230c      	movs	r3, #12
 8005afc:	602b      	str	r3, [r5, #0]
 8005afe:	e7d6      	b.n	8005aae <_free_r+0x22>
 8005b00:	6820      	ldr	r0, [r4, #0]
 8005b02:	1821      	adds	r1, r4, r0
 8005b04:	428b      	cmp	r3, r1
 8005b06:	bf04      	itt	eq
 8005b08:	6819      	ldreq	r1, [r3, #0]
 8005b0a:	685b      	ldreq	r3, [r3, #4]
 8005b0c:	6063      	str	r3, [r4, #4]
 8005b0e:	bf04      	itt	eq
 8005b10:	1809      	addeq	r1, r1, r0
 8005b12:	6021      	streq	r1, [r4, #0]
 8005b14:	6054      	str	r4, [r2, #4]
 8005b16:	e7ca      	b.n	8005aae <_free_r+0x22>
 8005b18:	bd38      	pop	{r3, r4, r5, pc}
 8005b1a:	bf00      	nop
 8005b1c:	24000368 	.word	0x24000368

08005b20 <sbrk_aligned>:
 8005b20:	b570      	push	{r4, r5, r6, lr}
 8005b22:	4e0f      	ldr	r6, [pc, #60]	@ (8005b60 <sbrk_aligned+0x40>)
 8005b24:	460c      	mov	r4, r1
 8005b26:	6831      	ldr	r1, [r6, #0]
 8005b28:	4605      	mov	r5, r0
 8005b2a:	b911      	cbnz	r1, 8005b32 <sbrk_aligned+0x12>
 8005b2c:	f000 fcb4 	bl	8006498 <_sbrk_r>
 8005b30:	6030      	str	r0, [r6, #0]
 8005b32:	4621      	mov	r1, r4
 8005b34:	4628      	mov	r0, r5
 8005b36:	f000 fcaf 	bl	8006498 <_sbrk_r>
 8005b3a:	1c43      	adds	r3, r0, #1
 8005b3c:	d103      	bne.n	8005b46 <sbrk_aligned+0x26>
 8005b3e:	f04f 34ff 	mov.w	r4, #4294967295
 8005b42:	4620      	mov	r0, r4
 8005b44:	bd70      	pop	{r4, r5, r6, pc}
 8005b46:	1cc4      	adds	r4, r0, #3
 8005b48:	f024 0403 	bic.w	r4, r4, #3
 8005b4c:	42a0      	cmp	r0, r4
 8005b4e:	d0f8      	beq.n	8005b42 <sbrk_aligned+0x22>
 8005b50:	1a21      	subs	r1, r4, r0
 8005b52:	4628      	mov	r0, r5
 8005b54:	f000 fca0 	bl	8006498 <_sbrk_r>
 8005b58:	3001      	adds	r0, #1
 8005b5a:	d1f2      	bne.n	8005b42 <sbrk_aligned+0x22>
 8005b5c:	e7ef      	b.n	8005b3e <sbrk_aligned+0x1e>
 8005b5e:	bf00      	nop
 8005b60:	24000364 	.word	0x24000364

08005b64 <_malloc_r>:
 8005b64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b68:	1ccd      	adds	r5, r1, #3
 8005b6a:	f025 0503 	bic.w	r5, r5, #3
 8005b6e:	3508      	adds	r5, #8
 8005b70:	2d0c      	cmp	r5, #12
 8005b72:	bf38      	it	cc
 8005b74:	250c      	movcc	r5, #12
 8005b76:	2d00      	cmp	r5, #0
 8005b78:	4606      	mov	r6, r0
 8005b7a:	db01      	blt.n	8005b80 <_malloc_r+0x1c>
 8005b7c:	42a9      	cmp	r1, r5
 8005b7e:	d904      	bls.n	8005b8a <_malloc_r+0x26>
 8005b80:	230c      	movs	r3, #12
 8005b82:	6033      	str	r3, [r6, #0]
 8005b84:	2000      	movs	r0, #0
 8005b86:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b8a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c60 <_malloc_r+0xfc>
 8005b8e:	f000 f869 	bl	8005c64 <__malloc_lock>
 8005b92:	f8d8 3000 	ldr.w	r3, [r8]
 8005b96:	461c      	mov	r4, r3
 8005b98:	bb44      	cbnz	r4, 8005bec <_malloc_r+0x88>
 8005b9a:	4629      	mov	r1, r5
 8005b9c:	4630      	mov	r0, r6
 8005b9e:	f7ff ffbf 	bl	8005b20 <sbrk_aligned>
 8005ba2:	1c43      	adds	r3, r0, #1
 8005ba4:	4604      	mov	r4, r0
 8005ba6:	d158      	bne.n	8005c5a <_malloc_r+0xf6>
 8005ba8:	f8d8 4000 	ldr.w	r4, [r8]
 8005bac:	4627      	mov	r7, r4
 8005bae:	2f00      	cmp	r7, #0
 8005bb0:	d143      	bne.n	8005c3a <_malloc_r+0xd6>
 8005bb2:	2c00      	cmp	r4, #0
 8005bb4:	d04b      	beq.n	8005c4e <_malloc_r+0xea>
 8005bb6:	6823      	ldr	r3, [r4, #0]
 8005bb8:	4639      	mov	r1, r7
 8005bba:	4630      	mov	r0, r6
 8005bbc:	eb04 0903 	add.w	r9, r4, r3
 8005bc0:	f000 fc6a 	bl	8006498 <_sbrk_r>
 8005bc4:	4581      	cmp	r9, r0
 8005bc6:	d142      	bne.n	8005c4e <_malloc_r+0xea>
 8005bc8:	6821      	ldr	r1, [r4, #0]
 8005bca:	1a6d      	subs	r5, r5, r1
 8005bcc:	4629      	mov	r1, r5
 8005bce:	4630      	mov	r0, r6
 8005bd0:	f7ff ffa6 	bl	8005b20 <sbrk_aligned>
 8005bd4:	3001      	adds	r0, #1
 8005bd6:	d03a      	beq.n	8005c4e <_malloc_r+0xea>
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	442b      	add	r3, r5
 8005bdc:	6023      	str	r3, [r4, #0]
 8005bde:	f8d8 3000 	ldr.w	r3, [r8]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	bb62      	cbnz	r2, 8005c40 <_malloc_r+0xdc>
 8005be6:	f8c8 7000 	str.w	r7, [r8]
 8005bea:	e00f      	b.n	8005c0c <_malloc_r+0xa8>
 8005bec:	6822      	ldr	r2, [r4, #0]
 8005bee:	1b52      	subs	r2, r2, r5
 8005bf0:	d420      	bmi.n	8005c34 <_malloc_r+0xd0>
 8005bf2:	2a0b      	cmp	r2, #11
 8005bf4:	d917      	bls.n	8005c26 <_malloc_r+0xc2>
 8005bf6:	1961      	adds	r1, r4, r5
 8005bf8:	42a3      	cmp	r3, r4
 8005bfa:	6025      	str	r5, [r4, #0]
 8005bfc:	bf18      	it	ne
 8005bfe:	6059      	strne	r1, [r3, #4]
 8005c00:	6863      	ldr	r3, [r4, #4]
 8005c02:	bf08      	it	eq
 8005c04:	f8c8 1000 	streq.w	r1, [r8]
 8005c08:	5162      	str	r2, [r4, r5]
 8005c0a:	604b      	str	r3, [r1, #4]
 8005c0c:	4630      	mov	r0, r6
 8005c0e:	f000 f82f 	bl	8005c70 <__malloc_unlock>
 8005c12:	f104 000b 	add.w	r0, r4, #11
 8005c16:	1d23      	adds	r3, r4, #4
 8005c18:	f020 0007 	bic.w	r0, r0, #7
 8005c1c:	1ac2      	subs	r2, r0, r3
 8005c1e:	bf1c      	itt	ne
 8005c20:	1a1b      	subne	r3, r3, r0
 8005c22:	50a3      	strne	r3, [r4, r2]
 8005c24:	e7af      	b.n	8005b86 <_malloc_r+0x22>
 8005c26:	6862      	ldr	r2, [r4, #4]
 8005c28:	42a3      	cmp	r3, r4
 8005c2a:	bf0c      	ite	eq
 8005c2c:	f8c8 2000 	streq.w	r2, [r8]
 8005c30:	605a      	strne	r2, [r3, #4]
 8005c32:	e7eb      	b.n	8005c0c <_malloc_r+0xa8>
 8005c34:	4623      	mov	r3, r4
 8005c36:	6864      	ldr	r4, [r4, #4]
 8005c38:	e7ae      	b.n	8005b98 <_malloc_r+0x34>
 8005c3a:	463c      	mov	r4, r7
 8005c3c:	687f      	ldr	r7, [r7, #4]
 8005c3e:	e7b6      	b.n	8005bae <_malloc_r+0x4a>
 8005c40:	461a      	mov	r2, r3
 8005c42:	685b      	ldr	r3, [r3, #4]
 8005c44:	42a3      	cmp	r3, r4
 8005c46:	d1fb      	bne.n	8005c40 <_malloc_r+0xdc>
 8005c48:	2300      	movs	r3, #0
 8005c4a:	6053      	str	r3, [r2, #4]
 8005c4c:	e7de      	b.n	8005c0c <_malloc_r+0xa8>
 8005c4e:	230c      	movs	r3, #12
 8005c50:	6033      	str	r3, [r6, #0]
 8005c52:	4630      	mov	r0, r6
 8005c54:	f000 f80c 	bl	8005c70 <__malloc_unlock>
 8005c58:	e794      	b.n	8005b84 <_malloc_r+0x20>
 8005c5a:	6005      	str	r5, [r0, #0]
 8005c5c:	e7d6      	b.n	8005c0c <_malloc_r+0xa8>
 8005c5e:	bf00      	nop
 8005c60:	24000368 	.word	0x24000368

08005c64 <__malloc_lock>:
 8005c64:	4801      	ldr	r0, [pc, #4]	@ (8005c6c <__malloc_lock+0x8>)
 8005c66:	f7ff bf0e 	b.w	8005a86 <__retarget_lock_acquire_recursive>
 8005c6a:	bf00      	nop
 8005c6c:	24000360 	.word	0x24000360

08005c70 <__malloc_unlock>:
 8005c70:	4801      	ldr	r0, [pc, #4]	@ (8005c78 <__malloc_unlock+0x8>)
 8005c72:	f7ff bf09 	b.w	8005a88 <__retarget_lock_release_recursive>
 8005c76:	bf00      	nop
 8005c78:	24000360 	.word	0x24000360

08005c7c <__sfputc_r>:
 8005c7c:	6893      	ldr	r3, [r2, #8]
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	b410      	push	{r4}
 8005c84:	6093      	str	r3, [r2, #8]
 8005c86:	da08      	bge.n	8005c9a <__sfputc_r+0x1e>
 8005c88:	6994      	ldr	r4, [r2, #24]
 8005c8a:	42a3      	cmp	r3, r4
 8005c8c:	db01      	blt.n	8005c92 <__sfputc_r+0x16>
 8005c8e:	290a      	cmp	r1, #10
 8005c90:	d103      	bne.n	8005c9a <__sfputc_r+0x1e>
 8005c92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c96:	f000 bb6b 	b.w	8006370 <__swbuf_r>
 8005c9a:	6813      	ldr	r3, [r2, #0]
 8005c9c:	1c58      	adds	r0, r3, #1
 8005c9e:	6010      	str	r0, [r2, #0]
 8005ca0:	7019      	strb	r1, [r3, #0]
 8005ca2:	4608      	mov	r0, r1
 8005ca4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005ca8:	4770      	bx	lr

08005caa <__sfputs_r>:
 8005caa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cac:	4606      	mov	r6, r0
 8005cae:	460f      	mov	r7, r1
 8005cb0:	4614      	mov	r4, r2
 8005cb2:	18d5      	adds	r5, r2, r3
 8005cb4:	42ac      	cmp	r4, r5
 8005cb6:	d101      	bne.n	8005cbc <__sfputs_r+0x12>
 8005cb8:	2000      	movs	r0, #0
 8005cba:	e007      	b.n	8005ccc <__sfputs_r+0x22>
 8005cbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cc0:	463a      	mov	r2, r7
 8005cc2:	4630      	mov	r0, r6
 8005cc4:	f7ff ffda 	bl	8005c7c <__sfputc_r>
 8005cc8:	1c43      	adds	r3, r0, #1
 8005cca:	d1f3      	bne.n	8005cb4 <__sfputs_r+0xa>
 8005ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005cd0 <_vfiprintf_r>:
 8005cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cd4:	460d      	mov	r5, r1
 8005cd6:	b09d      	sub	sp, #116	@ 0x74
 8005cd8:	4614      	mov	r4, r2
 8005cda:	4698      	mov	r8, r3
 8005cdc:	4606      	mov	r6, r0
 8005cde:	b118      	cbz	r0, 8005ce8 <_vfiprintf_r+0x18>
 8005ce0:	6a03      	ldr	r3, [r0, #32]
 8005ce2:	b90b      	cbnz	r3, 8005ce8 <_vfiprintf_r+0x18>
 8005ce4:	f7ff fdca 	bl	800587c <__sinit>
 8005ce8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005cea:	07d9      	lsls	r1, r3, #31
 8005cec:	d405      	bmi.n	8005cfa <_vfiprintf_r+0x2a>
 8005cee:	89ab      	ldrh	r3, [r5, #12]
 8005cf0:	059a      	lsls	r2, r3, #22
 8005cf2:	d402      	bmi.n	8005cfa <_vfiprintf_r+0x2a>
 8005cf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005cf6:	f7ff fec6 	bl	8005a86 <__retarget_lock_acquire_recursive>
 8005cfa:	89ab      	ldrh	r3, [r5, #12]
 8005cfc:	071b      	lsls	r3, r3, #28
 8005cfe:	d501      	bpl.n	8005d04 <_vfiprintf_r+0x34>
 8005d00:	692b      	ldr	r3, [r5, #16]
 8005d02:	b99b      	cbnz	r3, 8005d2c <_vfiprintf_r+0x5c>
 8005d04:	4629      	mov	r1, r5
 8005d06:	4630      	mov	r0, r6
 8005d08:	f000 fb70 	bl	80063ec <__swsetup_r>
 8005d0c:	b170      	cbz	r0, 8005d2c <_vfiprintf_r+0x5c>
 8005d0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005d10:	07dc      	lsls	r4, r3, #31
 8005d12:	d504      	bpl.n	8005d1e <_vfiprintf_r+0x4e>
 8005d14:	f04f 30ff 	mov.w	r0, #4294967295
 8005d18:	b01d      	add	sp, #116	@ 0x74
 8005d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d1e:	89ab      	ldrh	r3, [r5, #12]
 8005d20:	0598      	lsls	r0, r3, #22
 8005d22:	d4f7      	bmi.n	8005d14 <_vfiprintf_r+0x44>
 8005d24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005d26:	f7ff feaf 	bl	8005a88 <__retarget_lock_release_recursive>
 8005d2a:	e7f3      	b.n	8005d14 <_vfiprintf_r+0x44>
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005d30:	2320      	movs	r3, #32
 8005d32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005d36:	f8cd 800c 	str.w	r8, [sp, #12]
 8005d3a:	2330      	movs	r3, #48	@ 0x30
 8005d3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005eec <_vfiprintf_r+0x21c>
 8005d40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005d44:	f04f 0901 	mov.w	r9, #1
 8005d48:	4623      	mov	r3, r4
 8005d4a:	469a      	mov	sl, r3
 8005d4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005d50:	b10a      	cbz	r2, 8005d56 <_vfiprintf_r+0x86>
 8005d52:	2a25      	cmp	r2, #37	@ 0x25
 8005d54:	d1f9      	bne.n	8005d4a <_vfiprintf_r+0x7a>
 8005d56:	ebba 0b04 	subs.w	fp, sl, r4
 8005d5a:	d00b      	beq.n	8005d74 <_vfiprintf_r+0xa4>
 8005d5c:	465b      	mov	r3, fp
 8005d5e:	4622      	mov	r2, r4
 8005d60:	4629      	mov	r1, r5
 8005d62:	4630      	mov	r0, r6
 8005d64:	f7ff ffa1 	bl	8005caa <__sfputs_r>
 8005d68:	3001      	adds	r0, #1
 8005d6a:	f000 80a7 	beq.w	8005ebc <_vfiprintf_r+0x1ec>
 8005d6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005d70:	445a      	add	r2, fp
 8005d72:	9209      	str	r2, [sp, #36]	@ 0x24
 8005d74:	f89a 3000 	ldrb.w	r3, [sl]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	f000 809f 	beq.w	8005ebc <_vfiprintf_r+0x1ec>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	f04f 32ff 	mov.w	r2, #4294967295
 8005d84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005d88:	f10a 0a01 	add.w	sl, sl, #1
 8005d8c:	9304      	str	r3, [sp, #16]
 8005d8e:	9307      	str	r3, [sp, #28]
 8005d90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005d94:	931a      	str	r3, [sp, #104]	@ 0x68
 8005d96:	4654      	mov	r4, sl
 8005d98:	2205      	movs	r2, #5
 8005d9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d9e:	4853      	ldr	r0, [pc, #332]	@ (8005eec <_vfiprintf_r+0x21c>)
 8005da0:	f7fa fa9e 	bl	80002e0 <memchr>
 8005da4:	9a04      	ldr	r2, [sp, #16]
 8005da6:	b9d8      	cbnz	r0, 8005de0 <_vfiprintf_r+0x110>
 8005da8:	06d1      	lsls	r1, r2, #27
 8005daa:	bf44      	itt	mi
 8005dac:	2320      	movmi	r3, #32
 8005dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005db2:	0713      	lsls	r3, r2, #28
 8005db4:	bf44      	itt	mi
 8005db6:	232b      	movmi	r3, #43	@ 0x2b
 8005db8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005dbc:	f89a 3000 	ldrb.w	r3, [sl]
 8005dc0:	2b2a      	cmp	r3, #42	@ 0x2a
 8005dc2:	d015      	beq.n	8005df0 <_vfiprintf_r+0x120>
 8005dc4:	9a07      	ldr	r2, [sp, #28]
 8005dc6:	4654      	mov	r4, sl
 8005dc8:	2000      	movs	r0, #0
 8005dca:	f04f 0c0a 	mov.w	ip, #10
 8005dce:	4621      	mov	r1, r4
 8005dd0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005dd4:	3b30      	subs	r3, #48	@ 0x30
 8005dd6:	2b09      	cmp	r3, #9
 8005dd8:	d94b      	bls.n	8005e72 <_vfiprintf_r+0x1a2>
 8005dda:	b1b0      	cbz	r0, 8005e0a <_vfiprintf_r+0x13a>
 8005ddc:	9207      	str	r2, [sp, #28]
 8005dde:	e014      	b.n	8005e0a <_vfiprintf_r+0x13a>
 8005de0:	eba0 0308 	sub.w	r3, r0, r8
 8005de4:	fa09 f303 	lsl.w	r3, r9, r3
 8005de8:	4313      	orrs	r3, r2
 8005dea:	9304      	str	r3, [sp, #16]
 8005dec:	46a2      	mov	sl, r4
 8005dee:	e7d2      	b.n	8005d96 <_vfiprintf_r+0xc6>
 8005df0:	9b03      	ldr	r3, [sp, #12]
 8005df2:	1d19      	adds	r1, r3, #4
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	9103      	str	r1, [sp, #12]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	bfbb      	ittet	lt
 8005dfc:	425b      	neglt	r3, r3
 8005dfe:	f042 0202 	orrlt.w	r2, r2, #2
 8005e02:	9307      	strge	r3, [sp, #28]
 8005e04:	9307      	strlt	r3, [sp, #28]
 8005e06:	bfb8      	it	lt
 8005e08:	9204      	strlt	r2, [sp, #16]
 8005e0a:	7823      	ldrb	r3, [r4, #0]
 8005e0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005e0e:	d10a      	bne.n	8005e26 <_vfiprintf_r+0x156>
 8005e10:	7863      	ldrb	r3, [r4, #1]
 8005e12:	2b2a      	cmp	r3, #42	@ 0x2a
 8005e14:	d132      	bne.n	8005e7c <_vfiprintf_r+0x1ac>
 8005e16:	9b03      	ldr	r3, [sp, #12]
 8005e18:	1d1a      	adds	r2, r3, #4
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	9203      	str	r2, [sp, #12]
 8005e1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005e22:	3402      	adds	r4, #2
 8005e24:	9305      	str	r3, [sp, #20]
 8005e26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005efc <_vfiprintf_r+0x22c>
 8005e2a:	7821      	ldrb	r1, [r4, #0]
 8005e2c:	2203      	movs	r2, #3
 8005e2e:	4650      	mov	r0, sl
 8005e30:	f7fa fa56 	bl	80002e0 <memchr>
 8005e34:	b138      	cbz	r0, 8005e46 <_vfiprintf_r+0x176>
 8005e36:	9b04      	ldr	r3, [sp, #16]
 8005e38:	eba0 000a 	sub.w	r0, r0, sl
 8005e3c:	2240      	movs	r2, #64	@ 0x40
 8005e3e:	4082      	lsls	r2, r0
 8005e40:	4313      	orrs	r3, r2
 8005e42:	3401      	adds	r4, #1
 8005e44:	9304      	str	r3, [sp, #16]
 8005e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e4a:	4829      	ldr	r0, [pc, #164]	@ (8005ef0 <_vfiprintf_r+0x220>)
 8005e4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005e50:	2206      	movs	r2, #6
 8005e52:	f7fa fa45 	bl	80002e0 <memchr>
 8005e56:	2800      	cmp	r0, #0
 8005e58:	d03f      	beq.n	8005eda <_vfiprintf_r+0x20a>
 8005e5a:	4b26      	ldr	r3, [pc, #152]	@ (8005ef4 <_vfiprintf_r+0x224>)
 8005e5c:	bb1b      	cbnz	r3, 8005ea6 <_vfiprintf_r+0x1d6>
 8005e5e:	9b03      	ldr	r3, [sp, #12]
 8005e60:	3307      	adds	r3, #7
 8005e62:	f023 0307 	bic.w	r3, r3, #7
 8005e66:	3308      	adds	r3, #8
 8005e68:	9303      	str	r3, [sp, #12]
 8005e6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e6c:	443b      	add	r3, r7
 8005e6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005e70:	e76a      	b.n	8005d48 <_vfiprintf_r+0x78>
 8005e72:	fb0c 3202 	mla	r2, ip, r2, r3
 8005e76:	460c      	mov	r4, r1
 8005e78:	2001      	movs	r0, #1
 8005e7a:	e7a8      	b.n	8005dce <_vfiprintf_r+0xfe>
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	3401      	adds	r4, #1
 8005e80:	9305      	str	r3, [sp, #20]
 8005e82:	4619      	mov	r1, r3
 8005e84:	f04f 0c0a 	mov.w	ip, #10
 8005e88:	4620      	mov	r0, r4
 8005e8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005e8e:	3a30      	subs	r2, #48	@ 0x30
 8005e90:	2a09      	cmp	r2, #9
 8005e92:	d903      	bls.n	8005e9c <_vfiprintf_r+0x1cc>
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0c6      	beq.n	8005e26 <_vfiprintf_r+0x156>
 8005e98:	9105      	str	r1, [sp, #20]
 8005e9a:	e7c4      	b.n	8005e26 <_vfiprintf_r+0x156>
 8005e9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005ea0:	4604      	mov	r4, r0
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e7f0      	b.n	8005e88 <_vfiprintf_r+0x1b8>
 8005ea6:	ab03      	add	r3, sp, #12
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	462a      	mov	r2, r5
 8005eac:	4b12      	ldr	r3, [pc, #72]	@ (8005ef8 <_vfiprintf_r+0x228>)
 8005eae:	a904      	add	r1, sp, #16
 8005eb0:	4630      	mov	r0, r6
 8005eb2:	f3af 8000 	nop.w
 8005eb6:	4607      	mov	r7, r0
 8005eb8:	1c78      	adds	r0, r7, #1
 8005eba:	d1d6      	bne.n	8005e6a <_vfiprintf_r+0x19a>
 8005ebc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005ebe:	07d9      	lsls	r1, r3, #31
 8005ec0:	d405      	bmi.n	8005ece <_vfiprintf_r+0x1fe>
 8005ec2:	89ab      	ldrh	r3, [r5, #12]
 8005ec4:	059a      	lsls	r2, r3, #22
 8005ec6:	d402      	bmi.n	8005ece <_vfiprintf_r+0x1fe>
 8005ec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005eca:	f7ff fddd 	bl	8005a88 <__retarget_lock_release_recursive>
 8005ece:	89ab      	ldrh	r3, [r5, #12]
 8005ed0:	065b      	lsls	r3, r3, #25
 8005ed2:	f53f af1f 	bmi.w	8005d14 <_vfiprintf_r+0x44>
 8005ed6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ed8:	e71e      	b.n	8005d18 <_vfiprintf_r+0x48>
 8005eda:	ab03      	add	r3, sp, #12
 8005edc:	9300      	str	r3, [sp, #0]
 8005ede:	462a      	mov	r2, r5
 8005ee0:	4b05      	ldr	r3, [pc, #20]	@ (8005ef8 <_vfiprintf_r+0x228>)
 8005ee2:	a904      	add	r1, sp, #16
 8005ee4:	4630      	mov	r0, r6
 8005ee6:	f000 f879 	bl	8005fdc <_printf_i>
 8005eea:	e7e4      	b.n	8005eb6 <_vfiprintf_r+0x1e6>
 8005eec:	0800660c 	.word	0x0800660c
 8005ef0:	08006616 	.word	0x08006616
 8005ef4:	00000000 	.word	0x00000000
 8005ef8:	08005cab 	.word	0x08005cab
 8005efc:	08006612 	.word	0x08006612

08005f00 <_printf_common>:
 8005f00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f04:	4616      	mov	r6, r2
 8005f06:	4698      	mov	r8, r3
 8005f08:	688a      	ldr	r2, [r1, #8]
 8005f0a:	690b      	ldr	r3, [r1, #16]
 8005f0c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005f10:	4293      	cmp	r3, r2
 8005f12:	bfb8      	it	lt
 8005f14:	4613      	movlt	r3, r2
 8005f16:	6033      	str	r3, [r6, #0]
 8005f18:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005f1c:	4607      	mov	r7, r0
 8005f1e:	460c      	mov	r4, r1
 8005f20:	b10a      	cbz	r2, 8005f26 <_printf_common+0x26>
 8005f22:	3301      	adds	r3, #1
 8005f24:	6033      	str	r3, [r6, #0]
 8005f26:	6823      	ldr	r3, [r4, #0]
 8005f28:	0699      	lsls	r1, r3, #26
 8005f2a:	bf42      	ittt	mi
 8005f2c:	6833      	ldrmi	r3, [r6, #0]
 8005f2e:	3302      	addmi	r3, #2
 8005f30:	6033      	strmi	r3, [r6, #0]
 8005f32:	6825      	ldr	r5, [r4, #0]
 8005f34:	f015 0506 	ands.w	r5, r5, #6
 8005f38:	d106      	bne.n	8005f48 <_printf_common+0x48>
 8005f3a:	f104 0a19 	add.w	sl, r4, #25
 8005f3e:	68e3      	ldr	r3, [r4, #12]
 8005f40:	6832      	ldr	r2, [r6, #0]
 8005f42:	1a9b      	subs	r3, r3, r2
 8005f44:	42ab      	cmp	r3, r5
 8005f46:	dc26      	bgt.n	8005f96 <_printf_common+0x96>
 8005f48:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005f4c:	6822      	ldr	r2, [r4, #0]
 8005f4e:	3b00      	subs	r3, #0
 8005f50:	bf18      	it	ne
 8005f52:	2301      	movne	r3, #1
 8005f54:	0692      	lsls	r2, r2, #26
 8005f56:	d42b      	bmi.n	8005fb0 <_printf_common+0xb0>
 8005f58:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f5c:	4641      	mov	r1, r8
 8005f5e:	4638      	mov	r0, r7
 8005f60:	47c8      	blx	r9
 8005f62:	3001      	adds	r0, #1
 8005f64:	d01e      	beq.n	8005fa4 <_printf_common+0xa4>
 8005f66:	6823      	ldr	r3, [r4, #0]
 8005f68:	6922      	ldr	r2, [r4, #16]
 8005f6a:	f003 0306 	and.w	r3, r3, #6
 8005f6e:	2b04      	cmp	r3, #4
 8005f70:	bf02      	ittt	eq
 8005f72:	68e5      	ldreq	r5, [r4, #12]
 8005f74:	6833      	ldreq	r3, [r6, #0]
 8005f76:	1aed      	subeq	r5, r5, r3
 8005f78:	68a3      	ldr	r3, [r4, #8]
 8005f7a:	bf0c      	ite	eq
 8005f7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f80:	2500      	movne	r5, #0
 8005f82:	4293      	cmp	r3, r2
 8005f84:	bfc4      	itt	gt
 8005f86:	1a9b      	subgt	r3, r3, r2
 8005f88:	18ed      	addgt	r5, r5, r3
 8005f8a:	2600      	movs	r6, #0
 8005f8c:	341a      	adds	r4, #26
 8005f8e:	42b5      	cmp	r5, r6
 8005f90:	d11a      	bne.n	8005fc8 <_printf_common+0xc8>
 8005f92:	2000      	movs	r0, #0
 8005f94:	e008      	b.n	8005fa8 <_printf_common+0xa8>
 8005f96:	2301      	movs	r3, #1
 8005f98:	4652      	mov	r2, sl
 8005f9a:	4641      	mov	r1, r8
 8005f9c:	4638      	mov	r0, r7
 8005f9e:	47c8      	blx	r9
 8005fa0:	3001      	adds	r0, #1
 8005fa2:	d103      	bne.n	8005fac <_printf_common+0xac>
 8005fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8005fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fac:	3501      	adds	r5, #1
 8005fae:	e7c6      	b.n	8005f3e <_printf_common+0x3e>
 8005fb0:	18e1      	adds	r1, r4, r3
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	2030      	movs	r0, #48	@ 0x30
 8005fb6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005fba:	4422      	add	r2, r4
 8005fbc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005fc0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005fc4:	3302      	adds	r3, #2
 8005fc6:	e7c7      	b.n	8005f58 <_printf_common+0x58>
 8005fc8:	2301      	movs	r3, #1
 8005fca:	4622      	mov	r2, r4
 8005fcc:	4641      	mov	r1, r8
 8005fce:	4638      	mov	r0, r7
 8005fd0:	47c8      	blx	r9
 8005fd2:	3001      	adds	r0, #1
 8005fd4:	d0e6      	beq.n	8005fa4 <_printf_common+0xa4>
 8005fd6:	3601      	adds	r6, #1
 8005fd8:	e7d9      	b.n	8005f8e <_printf_common+0x8e>
	...

08005fdc <_printf_i>:
 8005fdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005fe0:	7e0f      	ldrb	r7, [r1, #24]
 8005fe2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005fe4:	2f78      	cmp	r7, #120	@ 0x78
 8005fe6:	4691      	mov	r9, r2
 8005fe8:	4680      	mov	r8, r0
 8005fea:	460c      	mov	r4, r1
 8005fec:	469a      	mov	sl, r3
 8005fee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005ff2:	d807      	bhi.n	8006004 <_printf_i+0x28>
 8005ff4:	2f62      	cmp	r7, #98	@ 0x62
 8005ff6:	d80a      	bhi.n	800600e <_printf_i+0x32>
 8005ff8:	2f00      	cmp	r7, #0
 8005ffa:	f000 80d1 	beq.w	80061a0 <_printf_i+0x1c4>
 8005ffe:	2f58      	cmp	r7, #88	@ 0x58
 8006000:	f000 80b8 	beq.w	8006174 <_printf_i+0x198>
 8006004:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006008:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800600c:	e03a      	b.n	8006084 <_printf_i+0xa8>
 800600e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006012:	2b15      	cmp	r3, #21
 8006014:	d8f6      	bhi.n	8006004 <_printf_i+0x28>
 8006016:	a101      	add	r1, pc, #4	@ (adr r1, 800601c <_printf_i+0x40>)
 8006018:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800601c:	08006075 	.word	0x08006075
 8006020:	08006089 	.word	0x08006089
 8006024:	08006005 	.word	0x08006005
 8006028:	08006005 	.word	0x08006005
 800602c:	08006005 	.word	0x08006005
 8006030:	08006005 	.word	0x08006005
 8006034:	08006089 	.word	0x08006089
 8006038:	08006005 	.word	0x08006005
 800603c:	08006005 	.word	0x08006005
 8006040:	08006005 	.word	0x08006005
 8006044:	08006005 	.word	0x08006005
 8006048:	08006187 	.word	0x08006187
 800604c:	080060b3 	.word	0x080060b3
 8006050:	08006141 	.word	0x08006141
 8006054:	08006005 	.word	0x08006005
 8006058:	08006005 	.word	0x08006005
 800605c:	080061a9 	.word	0x080061a9
 8006060:	08006005 	.word	0x08006005
 8006064:	080060b3 	.word	0x080060b3
 8006068:	08006005 	.word	0x08006005
 800606c:	08006005 	.word	0x08006005
 8006070:	08006149 	.word	0x08006149
 8006074:	6833      	ldr	r3, [r6, #0]
 8006076:	1d1a      	adds	r2, r3, #4
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6032      	str	r2, [r6, #0]
 800607c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006080:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006084:	2301      	movs	r3, #1
 8006086:	e09c      	b.n	80061c2 <_printf_i+0x1e6>
 8006088:	6833      	ldr	r3, [r6, #0]
 800608a:	6820      	ldr	r0, [r4, #0]
 800608c:	1d19      	adds	r1, r3, #4
 800608e:	6031      	str	r1, [r6, #0]
 8006090:	0606      	lsls	r6, r0, #24
 8006092:	d501      	bpl.n	8006098 <_printf_i+0xbc>
 8006094:	681d      	ldr	r5, [r3, #0]
 8006096:	e003      	b.n	80060a0 <_printf_i+0xc4>
 8006098:	0645      	lsls	r5, r0, #25
 800609a:	d5fb      	bpl.n	8006094 <_printf_i+0xb8>
 800609c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80060a0:	2d00      	cmp	r5, #0
 80060a2:	da03      	bge.n	80060ac <_printf_i+0xd0>
 80060a4:	232d      	movs	r3, #45	@ 0x2d
 80060a6:	426d      	negs	r5, r5
 80060a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80060ac:	4858      	ldr	r0, [pc, #352]	@ (8006210 <_printf_i+0x234>)
 80060ae:	230a      	movs	r3, #10
 80060b0:	e011      	b.n	80060d6 <_printf_i+0xfa>
 80060b2:	6821      	ldr	r1, [r4, #0]
 80060b4:	6833      	ldr	r3, [r6, #0]
 80060b6:	0608      	lsls	r0, r1, #24
 80060b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80060bc:	d402      	bmi.n	80060c4 <_printf_i+0xe8>
 80060be:	0649      	lsls	r1, r1, #25
 80060c0:	bf48      	it	mi
 80060c2:	b2ad      	uxthmi	r5, r5
 80060c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80060c6:	4852      	ldr	r0, [pc, #328]	@ (8006210 <_printf_i+0x234>)
 80060c8:	6033      	str	r3, [r6, #0]
 80060ca:	bf14      	ite	ne
 80060cc:	230a      	movne	r3, #10
 80060ce:	2308      	moveq	r3, #8
 80060d0:	2100      	movs	r1, #0
 80060d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80060d6:	6866      	ldr	r6, [r4, #4]
 80060d8:	60a6      	str	r6, [r4, #8]
 80060da:	2e00      	cmp	r6, #0
 80060dc:	db05      	blt.n	80060ea <_printf_i+0x10e>
 80060de:	6821      	ldr	r1, [r4, #0]
 80060e0:	432e      	orrs	r6, r5
 80060e2:	f021 0104 	bic.w	r1, r1, #4
 80060e6:	6021      	str	r1, [r4, #0]
 80060e8:	d04b      	beq.n	8006182 <_printf_i+0x1a6>
 80060ea:	4616      	mov	r6, r2
 80060ec:	fbb5 f1f3 	udiv	r1, r5, r3
 80060f0:	fb03 5711 	mls	r7, r3, r1, r5
 80060f4:	5dc7      	ldrb	r7, [r0, r7]
 80060f6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060fa:	462f      	mov	r7, r5
 80060fc:	42bb      	cmp	r3, r7
 80060fe:	460d      	mov	r5, r1
 8006100:	d9f4      	bls.n	80060ec <_printf_i+0x110>
 8006102:	2b08      	cmp	r3, #8
 8006104:	d10b      	bne.n	800611e <_printf_i+0x142>
 8006106:	6823      	ldr	r3, [r4, #0]
 8006108:	07df      	lsls	r7, r3, #31
 800610a:	d508      	bpl.n	800611e <_printf_i+0x142>
 800610c:	6923      	ldr	r3, [r4, #16]
 800610e:	6861      	ldr	r1, [r4, #4]
 8006110:	4299      	cmp	r1, r3
 8006112:	bfde      	ittt	le
 8006114:	2330      	movle	r3, #48	@ 0x30
 8006116:	f806 3c01 	strble.w	r3, [r6, #-1]
 800611a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800611e:	1b92      	subs	r2, r2, r6
 8006120:	6122      	str	r2, [r4, #16]
 8006122:	f8cd a000 	str.w	sl, [sp]
 8006126:	464b      	mov	r3, r9
 8006128:	aa03      	add	r2, sp, #12
 800612a:	4621      	mov	r1, r4
 800612c:	4640      	mov	r0, r8
 800612e:	f7ff fee7 	bl	8005f00 <_printf_common>
 8006132:	3001      	adds	r0, #1
 8006134:	d14a      	bne.n	80061cc <_printf_i+0x1f0>
 8006136:	f04f 30ff 	mov.w	r0, #4294967295
 800613a:	b004      	add	sp, #16
 800613c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006140:	6823      	ldr	r3, [r4, #0]
 8006142:	f043 0320 	orr.w	r3, r3, #32
 8006146:	6023      	str	r3, [r4, #0]
 8006148:	4832      	ldr	r0, [pc, #200]	@ (8006214 <_printf_i+0x238>)
 800614a:	2778      	movs	r7, #120	@ 0x78
 800614c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	6831      	ldr	r1, [r6, #0]
 8006154:	061f      	lsls	r7, r3, #24
 8006156:	f851 5b04 	ldr.w	r5, [r1], #4
 800615a:	d402      	bmi.n	8006162 <_printf_i+0x186>
 800615c:	065f      	lsls	r7, r3, #25
 800615e:	bf48      	it	mi
 8006160:	b2ad      	uxthmi	r5, r5
 8006162:	6031      	str	r1, [r6, #0]
 8006164:	07d9      	lsls	r1, r3, #31
 8006166:	bf44      	itt	mi
 8006168:	f043 0320 	orrmi.w	r3, r3, #32
 800616c:	6023      	strmi	r3, [r4, #0]
 800616e:	b11d      	cbz	r5, 8006178 <_printf_i+0x19c>
 8006170:	2310      	movs	r3, #16
 8006172:	e7ad      	b.n	80060d0 <_printf_i+0xf4>
 8006174:	4826      	ldr	r0, [pc, #152]	@ (8006210 <_printf_i+0x234>)
 8006176:	e7e9      	b.n	800614c <_printf_i+0x170>
 8006178:	6823      	ldr	r3, [r4, #0]
 800617a:	f023 0320 	bic.w	r3, r3, #32
 800617e:	6023      	str	r3, [r4, #0]
 8006180:	e7f6      	b.n	8006170 <_printf_i+0x194>
 8006182:	4616      	mov	r6, r2
 8006184:	e7bd      	b.n	8006102 <_printf_i+0x126>
 8006186:	6833      	ldr	r3, [r6, #0]
 8006188:	6825      	ldr	r5, [r4, #0]
 800618a:	6961      	ldr	r1, [r4, #20]
 800618c:	1d18      	adds	r0, r3, #4
 800618e:	6030      	str	r0, [r6, #0]
 8006190:	062e      	lsls	r6, r5, #24
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	d501      	bpl.n	800619a <_printf_i+0x1be>
 8006196:	6019      	str	r1, [r3, #0]
 8006198:	e002      	b.n	80061a0 <_printf_i+0x1c4>
 800619a:	0668      	lsls	r0, r5, #25
 800619c:	d5fb      	bpl.n	8006196 <_printf_i+0x1ba>
 800619e:	8019      	strh	r1, [r3, #0]
 80061a0:	2300      	movs	r3, #0
 80061a2:	6123      	str	r3, [r4, #16]
 80061a4:	4616      	mov	r6, r2
 80061a6:	e7bc      	b.n	8006122 <_printf_i+0x146>
 80061a8:	6833      	ldr	r3, [r6, #0]
 80061aa:	1d1a      	adds	r2, r3, #4
 80061ac:	6032      	str	r2, [r6, #0]
 80061ae:	681e      	ldr	r6, [r3, #0]
 80061b0:	6862      	ldr	r2, [r4, #4]
 80061b2:	2100      	movs	r1, #0
 80061b4:	4630      	mov	r0, r6
 80061b6:	f7fa f893 	bl	80002e0 <memchr>
 80061ba:	b108      	cbz	r0, 80061c0 <_printf_i+0x1e4>
 80061bc:	1b80      	subs	r0, r0, r6
 80061be:	6060      	str	r0, [r4, #4]
 80061c0:	6863      	ldr	r3, [r4, #4]
 80061c2:	6123      	str	r3, [r4, #16]
 80061c4:	2300      	movs	r3, #0
 80061c6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80061ca:	e7aa      	b.n	8006122 <_printf_i+0x146>
 80061cc:	6923      	ldr	r3, [r4, #16]
 80061ce:	4632      	mov	r2, r6
 80061d0:	4649      	mov	r1, r9
 80061d2:	4640      	mov	r0, r8
 80061d4:	47d0      	blx	sl
 80061d6:	3001      	adds	r0, #1
 80061d8:	d0ad      	beq.n	8006136 <_printf_i+0x15a>
 80061da:	6823      	ldr	r3, [r4, #0]
 80061dc:	079b      	lsls	r3, r3, #30
 80061de:	d413      	bmi.n	8006208 <_printf_i+0x22c>
 80061e0:	68e0      	ldr	r0, [r4, #12]
 80061e2:	9b03      	ldr	r3, [sp, #12]
 80061e4:	4298      	cmp	r0, r3
 80061e6:	bfb8      	it	lt
 80061e8:	4618      	movlt	r0, r3
 80061ea:	e7a6      	b.n	800613a <_printf_i+0x15e>
 80061ec:	2301      	movs	r3, #1
 80061ee:	4632      	mov	r2, r6
 80061f0:	4649      	mov	r1, r9
 80061f2:	4640      	mov	r0, r8
 80061f4:	47d0      	blx	sl
 80061f6:	3001      	adds	r0, #1
 80061f8:	d09d      	beq.n	8006136 <_printf_i+0x15a>
 80061fa:	3501      	adds	r5, #1
 80061fc:	68e3      	ldr	r3, [r4, #12]
 80061fe:	9903      	ldr	r1, [sp, #12]
 8006200:	1a5b      	subs	r3, r3, r1
 8006202:	42ab      	cmp	r3, r5
 8006204:	dcf2      	bgt.n	80061ec <_printf_i+0x210>
 8006206:	e7eb      	b.n	80061e0 <_printf_i+0x204>
 8006208:	2500      	movs	r5, #0
 800620a:	f104 0619 	add.w	r6, r4, #25
 800620e:	e7f5      	b.n	80061fc <_printf_i+0x220>
 8006210:	0800661d 	.word	0x0800661d
 8006214:	0800662e 	.word	0x0800662e

08006218 <__sflush_r>:
 8006218:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800621c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006220:	0716      	lsls	r6, r2, #28
 8006222:	4605      	mov	r5, r0
 8006224:	460c      	mov	r4, r1
 8006226:	d454      	bmi.n	80062d2 <__sflush_r+0xba>
 8006228:	684b      	ldr	r3, [r1, #4]
 800622a:	2b00      	cmp	r3, #0
 800622c:	dc02      	bgt.n	8006234 <__sflush_r+0x1c>
 800622e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006230:	2b00      	cmp	r3, #0
 8006232:	dd48      	ble.n	80062c6 <__sflush_r+0xae>
 8006234:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006236:	2e00      	cmp	r6, #0
 8006238:	d045      	beq.n	80062c6 <__sflush_r+0xae>
 800623a:	2300      	movs	r3, #0
 800623c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006240:	682f      	ldr	r7, [r5, #0]
 8006242:	6a21      	ldr	r1, [r4, #32]
 8006244:	602b      	str	r3, [r5, #0]
 8006246:	d030      	beq.n	80062aa <__sflush_r+0x92>
 8006248:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800624a:	89a3      	ldrh	r3, [r4, #12]
 800624c:	0759      	lsls	r1, r3, #29
 800624e:	d505      	bpl.n	800625c <__sflush_r+0x44>
 8006250:	6863      	ldr	r3, [r4, #4]
 8006252:	1ad2      	subs	r2, r2, r3
 8006254:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006256:	b10b      	cbz	r3, 800625c <__sflush_r+0x44>
 8006258:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800625a:	1ad2      	subs	r2, r2, r3
 800625c:	2300      	movs	r3, #0
 800625e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006260:	6a21      	ldr	r1, [r4, #32]
 8006262:	4628      	mov	r0, r5
 8006264:	47b0      	blx	r6
 8006266:	1c43      	adds	r3, r0, #1
 8006268:	89a3      	ldrh	r3, [r4, #12]
 800626a:	d106      	bne.n	800627a <__sflush_r+0x62>
 800626c:	6829      	ldr	r1, [r5, #0]
 800626e:	291d      	cmp	r1, #29
 8006270:	d82b      	bhi.n	80062ca <__sflush_r+0xb2>
 8006272:	4a2a      	ldr	r2, [pc, #168]	@ (800631c <__sflush_r+0x104>)
 8006274:	40ca      	lsrs	r2, r1
 8006276:	07d6      	lsls	r6, r2, #31
 8006278:	d527      	bpl.n	80062ca <__sflush_r+0xb2>
 800627a:	2200      	movs	r2, #0
 800627c:	6062      	str	r2, [r4, #4]
 800627e:	04d9      	lsls	r1, r3, #19
 8006280:	6922      	ldr	r2, [r4, #16]
 8006282:	6022      	str	r2, [r4, #0]
 8006284:	d504      	bpl.n	8006290 <__sflush_r+0x78>
 8006286:	1c42      	adds	r2, r0, #1
 8006288:	d101      	bne.n	800628e <__sflush_r+0x76>
 800628a:	682b      	ldr	r3, [r5, #0]
 800628c:	b903      	cbnz	r3, 8006290 <__sflush_r+0x78>
 800628e:	6560      	str	r0, [r4, #84]	@ 0x54
 8006290:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006292:	602f      	str	r7, [r5, #0]
 8006294:	b1b9      	cbz	r1, 80062c6 <__sflush_r+0xae>
 8006296:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800629a:	4299      	cmp	r1, r3
 800629c:	d002      	beq.n	80062a4 <__sflush_r+0x8c>
 800629e:	4628      	mov	r0, r5
 80062a0:	f7ff fbf4 	bl	8005a8c <_free_r>
 80062a4:	2300      	movs	r3, #0
 80062a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80062a8:	e00d      	b.n	80062c6 <__sflush_r+0xae>
 80062aa:	2301      	movs	r3, #1
 80062ac:	4628      	mov	r0, r5
 80062ae:	47b0      	blx	r6
 80062b0:	4602      	mov	r2, r0
 80062b2:	1c50      	adds	r0, r2, #1
 80062b4:	d1c9      	bne.n	800624a <__sflush_r+0x32>
 80062b6:	682b      	ldr	r3, [r5, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d0c6      	beq.n	800624a <__sflush_r+0x32>
 80062bc:	2b1d      	cmp	r3, #29
 80062be:	d001      	beq.n	80062c4 <__sflush_r+0xac>
 80062c0:	2b16      	cmp	r3, #22
 80062c2:	d11e      	bne.n	8006302 <__sflush_r+0xea>
 80062c4:	602f      	str	r7, [r5, #0]
 80062c6:	2000      	movs	r0, #0
 80062c8:	e022      	b.n	8006310 <__sflush_r+0xf8>
 80062ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80062ce:	b21b      	sxth	r3, r3
 80062d0:	e01b      	b.n	800630a <__sflush_r+0xf2>
 80062d2:	690f      	ldr	r7, [r1, #16]
 80062d4:	2f00      	cmp	r7, #0
 80062d6:	d0f6      	beq.n	80062c6 <__sflush_r+0xae>
 80062d8:	0793      	lsls	r3, r2, #30
 80062da:	680e      	ldr	r6, [r1, #0]
 80062dc:	bf08      	it	eq
 80062de:	694b      	ldreq	r3, [r1, #20]
 80062e0:	600f      	str	r7, [r1, #0]
 80062e2:	bf18      	it	ne
 80062e4:	2300      	movne	r3, #0
 80062e6:	eba6 0807 	sub.w	r8, r6, r7
 80062ea:	608b      	str	r3, [r1, #8]
 80062ec:	f1b8 0f00 	cmp.w	r8, #0
 80062f0:	dde9      	ble.n	80062c6 <__sflush_r+0xae>
 80062f2:	6a21      	ldr	r1, [r4, #32]
 80062f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80062f6:	4643      	mov	r3, r8
 80062f8:	463a      	mov	r2, r7
 80062fa:	4628      	mov	r0, r5
 80062fc:	47b0      	blx	r6
 80062fe:	2800      	cmp	r0, #0
 8006300:	dc08      	bgt.n	8006314 <__sflush_r+0xfc>
 8006302:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800630a:	81a3      	strh	r3, [r4, #12]
 800630c:	f04f 30ff 	mov.w	r0, #4294967295
 8006310:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006314:	4407      	add	r7, r0
 8006316:	eba8 0800 	sub.w	r8, r8, r0
 800631a:	e7e7      	b.n	80062ec <__sflush_r+0xd4>
 800631c:	20400001 	.word	0x20400001

08006320 <_fflush_r>:
 8006320:	b538      	push	{r3, r4, r5, lr}
 8006322:	690b      	ldr	r3, [r1, #16]
 8006324:	4605      	mov	r5, r0
 8006326:	460c      	mov	r4, r1
 8006328:	b913      	cbnz	r3, 8006330 <_fflush_r+0x10>
 800632a:	2500      	movs	r5, #0
 800632c:	4628      	mov	r0, r5
 800632e:	bd38      	pop	{r3, r4, r5, pc}
 8006330:	b118      	cbz	r0, 800633a <_fflush_r+0x1a>
 8006332:	6a03      	ldr	r3, [r0, #32]
 8006334:	b90b      	cbnz	r3, 800633a <_fflush_r+0x1a>
 8006336:	f7ff faa1 	bl	800587c <__sinit>
 800633a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d0f3      	beq.n	800632a <_fflush_r+0xa>
 8006342:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8006344:	07d0      	lsls	r0, r2, #31
 8006346:	d404      	bmi.n	8006352 <_fflush_r+0x32>
 8006348:	0599      	lsls	r1, r3, #22
 800634a:	d402      	bmi.n	8006352 <_fflush_r+0x32>
 800634c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800634e:	f7ff fb9a 	bl	8005a86 <__retarget_lock_acquire_recursive>
 8006352:	4628      	mov	r0, r5
 8006354:	4621      	mov	r1, r4
 8006356:	f7ff ff5f 	bl	8006218 <__sflush_r>
 800635a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800635c:	07da      	lsls	r2, r3, #31
 800635e:	4605      	mov	r5, r0
 8006360:	d4e4      	bmi.n	800632c <_fflush_r+0xc>
 8006362:	89a3      	ldrh	r3, [r4, #12]
 8006364:	059b      	lsls	r3, r3, #22
 8006366:	d4e1      	bmi.n	800632c <_fflush_r+0xc>
 8006368:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800636a:	f7ff fb8d 	bl	8005a88 <__retarget_lock_release_recursive>
 800636e:	e7dd      	b.n	800632c <_fflush_r+0xc>

08006370 <__swbuf_r>:
 8006370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006372:	460e      	mov	r6, r1
 8006374:	4614      	mov	r4, r2
 8006376:	4605      	mov	r5, r0
 8006378:	b118      	cbz	r0, 8006382 <__swbuf_r+0x12>
 800637a:	6a03      	ldr	r3, [r0, #32]
 800637c:	b90b      	cbnz	r3, 8006382 <__swbuf_r+0x12>
 800637e:	f7ff fa7d 	bl	800587c <__sinit>
 8006382:	69a3      	ldr	r3, [r4, #24]
 8006384:	60a3      	str	r3, [r4, #8]
 8006386:	89a3      	ldrh	r3, [r4, #12]
 8006388:	071a      	lsls	r2, r3, #28
 800638a:	d501      	bpl.n	8006390 <__swbuf_r+0x20>
 800638c:	6923      	ldr	r3, [r4, #16]
 800638e:	b943      	cbnz	r3, 80063a2 <__swbuf_r+0x32>
 8006390:	4621      	mov	r1, r4
 8006392:	4628      	mov	r0, r5
 8006394:	f000 f82a 	bl	80063ec <__swsetup_r>
 8006398:	b118      	cbz	r0, 80063a2 <__swbuf_r+0x32>
 800639a:	f04f 37ff 	mov.w	r7, #4294967295
 800639e:	4638      	mov	r0, r7
 80063a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80063a2:	6823      	ldr	r3, [r4, #0]
 80063a4:	6922      	ldr	r2, [r4, #16]
 80063a6:	1a98      	subs	r0, r3, r2
 80063a8:	6963      	ldr	r3, [r4, #20]
 80063aa:	b2f6      	uxtb	r6, r6
 80063ac:	4283      	cmp	r3, r0
 80063ae:	4637      	mov	r7, r6
 80063b0:	dc05      	bgt.n	80063be <__swbuf_r+0x4e>
 80063b2:	4621      	mov	r1, r4
 80063b4:	4628      	mov	r0, r5
 80063b6:	f7ff ffb3 	bl	8006320 <_fflush_r>
 80063ba:	2800      	cmp	r0, #0
 80063bc:	d1ed      	bne.n	800639a <__swbuf_r+0x2a>
 80063be:	68a3      	ldr	r3, [r4, #8]
 80063c0:	3b01      	subs	r3, #1
 80063c2:	60a3      	str	r3, [r4, #8]
 80063c4:	6823      	ldr	r3, [r4, #0]
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	6022      	str	r2, [r4, #0]
 80063ca:	701e      	strb	r6, [r3, #0]
 80063cc:	6962      	ldr	r2, [r4, #20]
 80063ce:	1c43      	adds	r3, r0, #1
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d004      	beq.n	80063de <__swbuf_r+0x6e>
 80063d4:	89a3      	ldrh	r3, [r4, #12]
 80063d6:	07db      	lsls	r3, r3, #31
 80063d8:	d5e1      	bpl.n	800639e <__swbuf_r+0x2e>
 80063da:	2e0a      	cmp	r6, #10
 80063dc:	d1df      	bne.n	800639e <__swbuf_r+0x2e>
 80063de:	4621      	mov	r1, r4
 80063e0:	4628      	mov	r0, r5
 80063e2:	f7ff ff9d 	bl	8006320 <_fflush_r>
 80063e6:	2800      	cmp	r0, #0
 80063e8:	d0d9      	beq.n	800639e <__swbuf_r+0x2e>
 80063ea:	e7d6      	b.n	800639a <__swbuf_r+0x2a>

080063ec <__swsetup_r>:
 80063ec:	b538      	push	{r3, r4, r5, lr}
 80063ee:	4b29      	ldr	r3, [pc, #164]	@ (8006494 <__swsetup_r+0xa8>)
 80063f0:	4605      	mov	r5, r0
 80063f2:	6818      	ldr	r0, [r3, #0]
 80063f4:	460c      	mov	r4, r1
 80063f6:	b118      	cbz	r0, 8006400 <__swsetup_r+0x14>
 80063f8:	6a03      	ldr	r3, [r0, #32]
 80063fa:	b90b      	cbnz	r3, 8006400 <__swsetup_r+0x14>
 80063fc:	f7ff fa3e 	bl	800587c <__sinit>
 8006400:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006404:	0719      	lsls	r1, r3, #28
 8006406:	d422      	bmi.n	800644e <__swsetup_r+0x62>
 8006408:	06da      	lsls	r2, r3, #27
 800640a:	d407      	bmi.n	800641c <__swsetup_r+0x30>
 800640c:	2209      	movs	r2, #9
 800640e:	602a      	str	r2, [r5, #0]
 8006410:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006414:	81a3      	strh	r3, [r4, #12]
 8006416:	f04f 30ff 	mov.w	r0, #4294967295
 800641a:	e033      	b.n	8006484 <__swsetup_r+0x98>
 800641c:	0758      	lsls	r0, r3, #29
 800641e:	d512      	bpl.n	8006446 <__swsetup_r+0x5a>
 8006420:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006422:	b141      	cbz	r1, 8006436 <__swsetup_r+0x4a>
 8006424:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006428:	4299      	cmp	r1, r3
 800642a:	d002      	beq.n	8006432 <__swsetup_r+0x46>
 800642c:	4628      	mov	r0, r5
 800642e:	f7ff fb2d 	bl	8005a8c <_free_r>
 8006432:	2300      	movs	r3, #0
 8006434:	6363      	str	r3, [r4, #52]	@ 0x34
 8006436:	89a3      	ldrh	r3, [r4, #12]
 8006438:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800643c:	81a3      	strh	r3, [r4, #12]
 800643e:	2300      	movs	r3, #0
 8006440:	6063      	str	r3, [r4, #4]
 8006442:	6923      	ldr	r3, [r4, #16]
 8006444:	6023      	str	r3, [r4, #0]
 8006446:	89a3      	ldrh	r3, [r4, #12]
 8006448:	f043 0308 	orr.w	r3, r3, #8
 800644c:	81a3      	strh	r3, [r4, #12]
 800644e:	6923      	ldr	r3, [r4, #16]
 8006450:	b94b      	cbnz	r3, 8006466 <__swsetup_r+0x7a>
 8006452:	89a3      	ldrh	r3, [r4, #12]
 8006454:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006458:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800645c:	d003      	beq.n	8006466 <__swsetup_r+0x7a>
 800645e:	4621      	mov	r1, r4
 8006460:	4628      	mov	r0, r5
 8006462:	f000 f84f 	bl	8006504 <__smakebuf_r>
 8006466:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800646a:	f013 0201 	ands.w	r2, r3, #1
 800646e:	d00a      	beq.n	8006486 <__swsetup_r+0x9a>
 8006470:	2200      	movs	r2, #0
 8006472:	60a2      	str	r2, [r4, #8]
 8006474:	6962      	ldr	r2, [r4, #20]
 8006476:	4252      	negs	r2, r2
 8006478:	61a2      	str	r2, [r4, #24]
 800647a:	6922      	ldr	r2, [r4, #16]
 800647c:	b942      	cbnz	r2, 8006490 <__swsetup_r+0xa4>
 800647e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006482:	d1c5      	bne.n	8006410 <__swsetup_r+0x24>
 8006484:	bd38      	pop	{r3, r4, r5, pc}
 8006486:	0799      	lsls	r1, r3, #30
 8006488:	bf58      	it	pl
 800648a:	6962      	ldrpl	r2, [r4, #20]
 800648c:	60a2      	str	r2, [r4, #8]
 800648e:	e7f4      	b.n	800647a <__swsetup_r+0x8e>
 8006490:	2000      	movs	r0, #0
 8006492:	e7f7      	b.n	8006484 <__swsetup_r+0x98>
 8006494:	24000020 	.word	0x24000020

08006498 <_sbrk_r>:
 8006498:	b538      	push	{r3, r4, r5, lr}
 800649a:	4d06      	ldr	r5, [pc, #24]	@ (80064b4 <_sbrk_r+0x1c>)
 800649c:	2300      	movs	r3, #0
 800649e:	4604      	mov	r4, r0
 80064a0:	4608      	mov	r0, r1
 80064a2:	602b      	str	r3, [r5, #0]
 80064a4:	f7fa febc 	bl	8001220 <_sbrk>
 80064a8:	1c43      	adds	r3, r0, #1
 80064aa:	d102      	bne.n	80064b2 <_sbrk_r+0x1a>
 80064ac:	682b      	ldr	r3, [r5, #0]
 80064ae:	b103      	cbz	r3, 80064b2 <_sbrk_r+0x1a>
 80064b0:	6023      	str	r3, [r4, #0]
 80064b2:	bd38      	pop	{r3, r4, r5, pc}
 80064b4:	2400035c 	.word	0x2400035c

080064b8 <__swhatbuf_r>:
 80064b8:	b570      	push	{r4, r5, r6, lr}
 80064ba:	460c      	mov	r4, r1
 80064bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80064c0:	2900      	cmp	r1, #0
 80064c2:	b096      	sub	sp, #88	@ 0x58
 80064c4:	4615      	mov	r5, r2
 80064c6:	461e      	mov	r6, r3
 80064c8:	da0d      	bge.n	80064e6 <__swhatbuf_r+0x2e>
 80064ca:	89a3      	ldrh	r3, [r4, #12]
 80064cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80064d0:	f04f 0100 	mov.w	r1, #0
 80064d4:	bf14      	ite	ne
 80064d6:	2340      	movne	r3, #64	@ 0x40
 80064d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80064dc:	2000      	movs	r0, #0
 80064de:	6031      	str	r1, [r6, #0]
 80064e0:	602b      	str	r3, [r5, #0]
 80064e2:	b016      	add	sp, #88	@ 0x58
 80064e4:	bd70      	pop	{r4, r5, r6, pc}
 80064e6:	466a      	mov	r2, sp
 80064e8:	f000 f848 	bl	800657c <_fstat_r>
 80064ec:	2800      	cmp	r0, #0
 80064ee:	dbec      	blt.n	80064ca <__swhatbuf_r+0x12>
 80064f0:	9901      	ldr	r1, [sp, #4]
 80064f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80064f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80064fa:	4259      	negs	r1, r3
 80064fc:	4159      	adcs	r1, r3
 80064fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006502:	e7eb      	b.n	80064dc <__swhatbuf_r+0x24>

08006504 <__smakebuf_r>:
 8006504:	898b      	ldrh	r3, [r1, #12]
 8006506:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006508:	079d      	lsls	r5, r3, #30
 800650a:	4606      	mov	r6, r0
 800650c:	460c      	mov	r4, r1
 800650e:	d507      	bpl.n	8006520 <__smakebuf_r+0x1c>
 8006510:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	6123      	str	r3, [r4, #16]
 8006518:	2301      	movs	r3, #1
 800651a:	6163      	str	r3, [r4, #20]
 800651c:	b003      	add	sp, #12
 800651e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006520:	ab01      	add	r3, sp, #4
 8006522:	466a      	mov	r2, sp
 8006524:	f7ff ffc8 	bl	80064b8 <__swhatbuf_r>
 8006528:	9f00      	ldr	r7, [sp, #0]
 800652a:	4605      	mov	r5, r0
 800652c:	4639      	mov	r1, r7
 800652e:	4630      	mov	r0, r6
 8006530:	f7ff fb18 	bl	8005b64 <_malloc_r>
 8006534:	b948      	cbnz	r0, 800654a <__smakebuf_r+0x46>
 8006536:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800653a:	059a      	lsls	r2, r3, #22
 800653c:	d4ee      	bmi.n	800651c <__smakebuf_r+0x18>
 800653e:	f023 0303 	bic.w	r3, r3, #3
 8006542:	f043 0302 	orr.w	r3, r3, #2
 8006546:	81a3      	strh	r3, [r4, #12]
 8006548:	e7e2      	b.n	8006510 <__smakebuf_r+0xc>
 800654a:	89a3      	ldrh	r3, [r4, #12]
 800654c:	6020      	str	r0, [r4, #0]
 800654e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006552:	81a3      	strh	r3, [r4, #12]
 8006554:	9b01      	ldr	r3, [sp, #4]
 8006556:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800655a:	b15b      	cbz	r3, 8006574 <__smakebuf_r+0x70>
 800655c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006560:	4630      	mov	r0, r6
 8006562:	f000 f81d 	bl	80065a0 <_isatty_r>
 8006566:	b128      	cbz	r0, 8006574 <__smakebuf_r+0x70>
 8006568:	89a3      	ldrh	r3, [r4, #12]
 800656a:	f023 0303 	bic.w	r3, r3, #3
 800656e:	f043 0301 	orr.w	r3, r3, #1
 8006572:	81a3      	strh	r3, [r4, #12]
 8006574:	89a3      	ldrh	r3, [r4, #12]
 8006576:	431d      	orrs	r5, r3
 8006578:	81a5      	strh	r5, [r4, #12]
 800657a:	e7cf      	b.n	800651c <__smakebuf_r+0x18>

0800657c <_fstat_r>:
 800657c:	b538      	push	{r3, r4, r5, lr}
 800657e:	4d07      	ldr	r5, [pc, #28]	@ (800659c <_fstat_r+0x20>)
 8006580:	2300      	movs	r3, #0
 8006582:	4604      	mov	r4, r0
 8006584:	4608      	mov	r0, r1
 8006586:	4611      	mov	r1, r2
 8006588:	602b      	str	r3, [r5, #0]
 800658a:	f7fa fe21 	bl	80011d0 <_fstat>
 800658e:	1c43      	adds	r3, r0, #1
 8006590:	d102      	bne.n	8006598 <_fstat_r+0x1c>
 8006592:	682b      	ldr	r3, [r5, #0]
 8006594:	b103      	cbz	r3, 8006598 <_fstat_r+0x1c>
 8006596:	6023      	str	r3, [r4, #0]
 8006598:	bd38      	pop	{r3, r4, r5, pc}
 800659a:	bf00      	nop
 800659c:	2400035c 	.word	0x2400035c

080065a0 <_isatty_r>:
 80065a0:	b538      	push	{r3, r4, r5, lr}
 80065a2:	4d06      	ldr	r5, [pc, #24]	@ (80065bc <_isatty_r+0x1c>)
 80065a4:	2300      	movs	r3, #0
 80065a6:	4604      	mov	r4, r0
 80065a8:	4608      	mov	r0, r1
 80065aa:	602b      	str	r3, [r5, #0]
 80065ac:	f7fa fe20 	bl	80011f0 <_isatty>
 80065b0:	1c43      	adds	r3, r0, #1
 80065b2:	d102      	bne.n	80065ba <_isatty_r+0x1a>
 80065b4:	682b      	ldr	r3, [r5, #0]
 80065b6:	b103      	cbz	r3, 80065ba <_isatty_r+0x1a>
 80065b8:	6023      	str	r3, [r4, #0]
 80065ba:	bd38      	pop	{r3, r4, r5, pc}
 80065bc:	2400035c 	.word	0x2400035c

080065c0 <_init>:
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	bf00      	nop
 80065c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065c6:	bc08      	pop	{r3}
 80065c8:	469e      	mov	lr, r3
 80065ca:	4770      	bx	lr

080065cc <_fini>:
 80065cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065ce:	bf00      	nop
 80065d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80065d2:	bc08      	pop	{r3}
 80065d4:	469e      	mov	lr, r3
 80065d6:	4770      	bx	lr
