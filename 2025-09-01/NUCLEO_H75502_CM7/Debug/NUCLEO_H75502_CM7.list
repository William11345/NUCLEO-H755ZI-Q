
NUCLEO_H75502_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000111f8  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000029cc  08011498  08011498  00012498  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08013e64  08013e64  00018300  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08013e64  08013e64  00014e64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08013e6c  08013e6c  00018300  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08013e6c  08013e6c  00014e6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08013e70  08013e70  00014e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f8  24000000  08013e74  00015000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ram_d2_data  00000404  240001f8  0801406c  000151f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000430  240005fc  08014470  000165fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  24000a2c  08014470  00016a2c  2**0
                  ALLOC
 12 .itcm_code    00000018  00000000  08014470  00016000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .dtcm_data    00000200  20000000  08014488  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 14 .dtcm_bss     00000100  20000200  08014688  00017200  2**2
                  ALLOC
 15 .ram_d3_data  00000300  38000000  08014688  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 16 .ram_d3_bss   00000004  38000300  08014988  00018300  2**0
                  ALLOC
 17 .ARM.attributes 0000002e  00000000  00000000  00018300  2**0
                  CONTENTS, READONLY
 18 .debug_info   00017e3d  00000000  00000000  0001832e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 00002c3a  00000000  00000000  0003016b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_aranges 00001138  00000000  00000000  00032da8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_rnglists 00000d33  00000000  00000000  00033ee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_macro  0003cecd  00000000  00000000  00034c13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line   00017787  00000000  00000000  00071ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_str    00193f80  00000000  00000000  00089267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .comment      00000043  00000000  00000000  0021d1e7  2**0
                  CONTENTS, READONLY
 26 .debug_frame  00005f10  00000000  00000000  0021d22c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_line_str 0000006f  00000000  00000000  0022313c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240005fc 	.word	0x240005fc
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08011480 	.word	0x08011480

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000600 	.word	0x24000600
 80002dc:	08011480 	.word	0x08011480

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <strlen>:
 80003a0:	4603      	mov	r3, r0
 80003a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003a6:	2a00      	cmp	r2, #0
 80003a8:	d1fb      	bne.n	80003a2 <strlen+0x2>
 80003aa:	1a18      	subs	r0, r3, r0
 80003ac:	3801      	subs	r0, #1
 80003ae:	4770      	bx	lr

080003b0 <__aeabi_drsub>:
 80003b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003b4:	e002      	b.n	80003bc <__adddf3>
 80003b6:	bf00      	nop

080003b8 <__aeabi_dsub>:
 80003b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003bc <__adddf3>:
 80003bc:	b530      	push	{r4, r5, lr}
 80003be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003c6:	ea94 0f05 	teq	r4, r5
 80003ca:	bf08      	it	eq
 80003cc:	ea90 0f02 	teqeq	r0, r2
 80003d0:	bf1f      	itttt	ne
 80003d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e2:	f000 80e2 	beq.w	80005aa <__adddf3+0x1ee>
 80003e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ee:	bfb8      	it	lt
 80003f0:	426d      	neglt	r5, r5
 80003f2:	dd0c      	ble.n	800040e <__adddf3+0x52>
 80003f4:	442c      	add	r4, r5
 80003f6:	ea80 0202 	eor.w	r2, r0, r2
 80003fa:	ea81 0303 	eor.w	r3, r1, r3
 80003fe:	ea82 0000 	eor.w	r0, r2, r0
 8000402:	ea83 0101 	eor.w	r1, r3, r1
 8000406:	ea80 0202 	eor.w	r2, r0, r2
 800040a:	ea81 0303 	eor.w	r3, r1, r3
 800040e:	2d36      	cmp	r5, #54	@ 0x36
 8000410:	bf88      	it	hi
 8000412:	bd30      	pophi	{r4, r5, pc}
 8000414:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000418:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800041c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000420:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000424:	d002      	beq.n	800042c <__adddf3+0x70>
 8000426:	4240      	negs	r0, r0
 8000428:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800042c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000430:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000434:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000438:	d002      	beq.n	8000440 <__adddf3+0x84>
 800043a:	4252      	negs	r2, r2
 800043c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000440:	ea94 0f05 	teq	r4, r5
 8000444:	f000 80a7 	beq.w	8000596 <__adddf3+0x1da>
 8000448:	f1a4 0401 	sub.w	r4, r4, #1
 800044c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000450:	db0d      	blt.n	800046e <__adddf3+0xb2>
 8000452:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000456:	fa22 f205 	lsr.w	r2, r2, r5
 800045a:	1880      	adds	r0, r0, r2
 800045c:	f141 0100 	adc.w	r1, r1, #0
 8000460:	fa03 f20e 	lsl.w	r2, r3, lr
 8000464:	1880      	adds	r0, r0, r2
 8000466:	fa43 f305 	asr.w	r3, r3, r5
 800046a:	4159      	adcs	r1, r3
 800046c:	e00e      	b.n	800048c <__adddf3+0xd0>
 800046e:	f1a5 0520 	sub.w	r5, r5, #32
 8000472:	f10e 0e20 	add.w	lr, lr, #32
 8000476:	2a01      	cmp	r2, #1
 8000478:	fa03 fc0e 	lsl.w	ip, r3, lr
 800047c:	bf28      	it	cs
 800047e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000482:	fa43 f305 	asr.w	r3, r3, r5
 8000486:	18c0      	adds	r0, r0, r3
 8000488:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000490:	d507      	bpl.n	80004a2 <__adddf3+0xe6>
 8000492:	f04f 0e00 	mov.w	lr, #0
 8000496:	f1dc 0c00 	rsbs	ip, ip, #0
 800049a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800049e:	eb6e 0101 	sbc.w	r1, lr, r1
 80004a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80004a6:	d31b      	bcc.n	80004e0 <__adddf3+0x124>
 80004a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004ac:	d30c      	bcc.n	80004c8 <__adddf3+0x10c>
 80004ae:	0849      	lsrs	r1, r1, #1
 80004b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004b8:	f104 0401 	add.w	r4, r4, #1
 80004bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004c4:	f080 809a 	bcs.w	80005fc <__adddf3+0x240>
 80004c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004cc:	bf08      	it	eq
 80004ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004d2:	f150 0000 	adcs.w	r0, r0, #0
 80004d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004da:	ea41 0105 	orr.w	r1, r1, r5
 80004de:	bd30      	pop	{r4, r5, pc}
 80004e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004e4:	4140      	adcs	r0, r0
 80004e6:	eb41 0101 	adc.w	r1, r1, r1
 80004ea:	3c01      	subs	r4, #1
 80004ec:	bf28      	it	cs
 80004ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004f2:	d2e9      	bcs.n	80004c8 <__adddf3+0x10c>
 80004f4:	f091 0f00 	teq	r1, #0
 80004f8:	bf04      	itt	eq
 80004fa:	4601      	moveq	r1, r0
 80004fc:	2000      	moveq	r0, #0
 80004fe:	fab1 f381 	clz	r3, r1
 8000502:	bf08      	it	eq
 8000504:	3320      	addeq	r3, #32
 8000506:	f1a3 030b 	sub.w	r3, r3, #11
 800050a:	f1b3 0220 	subs.w	r2, r3, #32
 800050e:	da0c      	bge.n	800052a <__adddf3+0x16e>
 8000510:	320c      	adds	r2, #12
 8000512:	dd08      	ble.n	8000526 <__adddf3+0x16a>
 8000514:	f102 0c14 	add.w	ip, r2, #20
 8000518:	f1c2 020c 	rsb	r2, r2, #12
 800051c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000520:	fa21 f102 	lsr.w	r1, r1, r2
 8000524:	e00c      	b.n	8000540 <__adddf3+0x184>
 8000526:	f102 0214 	add.w	r2, r2, #20
 800052a:	bfd8      	it	le
 800052c:	f1c2 0c20 	rsble	ip, r2, #32
 8000530:	fa01 f102 	lsl.w	r1, r1, r2
 8000534:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000538:	bfdc      	itt	le
 800053a:	ea41 010c 	orrle.w	r1, r1, ip
 800053e:	4090      	lslle	r0, r2
 8000540:	1ae4      	subs	r4, r4, r3
 8000542:	bfa2      	ittt	ge
 8000544:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000548:	4329      	orrge	r1, r5
 800054a:	bd30      	popge	{r4, r5, pc}
 800054c:	ea6f 0404 	mvn.w	r4, r4
 8000550:	3c1f      	subs	r4, #31
 8000552:	da1c      	bge.n	800058e <__adddf3+0x1d2>
 8000554:	340c      	adds	r4, #12
 8000556:	dc0e      	bgt.n	8000576 <__adddf3+0x1ba>
 8000558:	f104 0414 	add.w	r4, r4, #20
 800055c:	f1c4 0220 	rsb	r2, r4, #32
 8000560:	fa20 f004 	lsr.w	r0, r0, r4
 8000564:	fa01 f302 	lsl.w	r3, r1, r2
 8000568:	ea40 0003 	orr.w	r0, r0, r3
 800056c:	fa21 f304 	lsr.w	r3, r1, r4
 8000570:	ea45 0103 	orr.w	r1, r5, r3
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f1c4 040c 	rsb	r4, r4, #12
 800057a:	f1c4 0220 	rsb	r2, r4, #32
 800057e:	fa20 f002 	lsr.w	r0, r0, r2
 8000582:	fa01 f304 	lsl.w	r3, r1, r4
 8000586:	ea40 0003 	orr.w	r0, r0, r3
 800058a:	4629      	mov	r1, r5
 800058c:	bd30      	pop	{r4, r5, pc}
 800058e:	fa21 f004 	lsr.w	r0, r1, r4
 8000592:	4629      	mov	r1, r5
 8000594:	bd30      	pop	{r4, r5, pc}
 8000596:	f094 0f00 	teq	r4, #0
 800059a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800059e:	bf06      	itte	eq
 80005a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80005a4:	3401      	addeq	r4, #1
 80005a6:	3d01      	subne	r5, #1
 80005a8:	e74e      	b.n	8000448 <__adddf3+0x8c>
 80005aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ae:	bf18      	it	ne
 80005b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005b4:	d029      	beq.n	800060a <__adddf3+0x24e>
 80005b6:	ea94 0f05 	teq	r4, r5
 80005ba:	bf08      	it	eq
 80005bc:	ea90 0f02 	teqeq	r0, r2
 80005c0:	d005      	beq.n	80005ce <__adddf3+0x212>
 80005c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005c6:	bf04      	itt	eq
 80005c8:	4619      	moveq	r1, r3
 80005ca:	4610      	moveq	r0, r2
 80005cc:	bd30      	pop	{r4, r5, pc}
 80005ce:	ea91 0f03 	teq	r1, r3
 80005d2:	bf1e      	ittt	ne
 80005d4:	2100      	movne	r1, #0
 80005d6:	2000      	movne	r0, #0
 80005d8:	bd30      	popne	{r4, r5, pc}
 80005da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005de:	d105      	bne.n	80005ec <__adddf3+0x230>
 80005e0:	0040      	lsls	r0, r0, #1
 80005e2:	4149      	adcs	r1, r1
 80005e4:	bf28      	it	cs
 80005e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ea:	bd30      	pop	{r4, r5, pc}
 80005ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005f0:	bf3c      	itt	cc
 80005f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005f6:	bd30      	popcc	{r4, r5, pc}
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000600:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000604:	f04f 0000 	mov.w	r0, #0
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800060e:	bf1a      	itte	ne
 8000610:	4619      	movne	r1, r3
 8000612:	4610      	movne	r0, r2
 8000614:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000618:	bf1c      	itt	ne
 800061a:	460b      	movne	r3, r1
 800061c:	4602      	movne	r2, r0
 800061e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000622:	bf06      	itte	eq
 8000624:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000628:	ea91 0f03 	teqeq	r1, r3
 800062c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000630:	bd30      	pop	{r4, r5, pc}
 8000632:	bf00      	nop

08000634 <__aeabi_ui2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f04f 0500 	mov.w	r5, #0
 800064c:	f04f 0100 	mov.w	r1, #0
 8000650:	e750      	b.n	80004f4 <__adddf3+0x138>
 8000652:	bf00      	nop

08000654 <__aeabi_i2d>:
 8000654:	f090 0f00 	teq	r0, #0
 8000658:	bf04      	itt	eq
 800065a:	2100      	moveq	r1, #0
 800065c:	4770      	bxeq	lr
 800065e:	b530      	push	{r4, r5, lr}
 8000660:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000664:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000668:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800066c:	bf48      	it	mi
 800066e:	4240      	negmi	r0, r0
 8000670:	f04f 0100 	mov.w	r1, #0
 8000674:	e73e      	b.n	80004f4 <__adddf3+0x138>
 8000676:	bf00      	nop

08000678 <__aeabi_f2d>:
 8000678:	0042      	lsls	r2, r0, #1
 800067a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800067e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000682:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000686:	bf1f      	itttt	ne
 8000688:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800068c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000690:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000694:	4770      	bxne	lr
 8000696:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800069a:	bf08      	it	eq
 800069c:	4770      	bxeq	lr
 800069e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80006a2:	bf04      	itt	eq
 80006a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006b8:	e71c      	b.n	80004f4 <__adddf3+0x138>
 80006ba:	bf00      	nop

080006bc <__aeabi_ul2d>:
 80006bc:	ea50 0201 	orrs.w	r2, r0, r1
 80006c0:	bf08      	it	eq
 80006c2:	4770      	bxeq	lr
 80006c4:	b530      	push	{r4, r5, lr}
 80006c6:	f04f 0500 	mov.w	r5, #0
 80006ca:	e00a      	b.n	80006e2 <__aeabi_l2d+0x16>

080006cc <__aeabi_l2d>:
 80006cc:	ea50 0201 	orrs.w	r2, r0, r1
 80006d0:	bf08      	it	eq
 80006d2:	4770      	bxeq	lr
 80006d4:	b530      	push	{r4, r5, lr}
 80006d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006da:	d502      	bpl.n	80006e2 <__aeabi_l2d+0x16>
 80006dc:	4240      	negs	r0, r0
 80006de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ee:	f43f aed8 	beq.w	80004a2 <__adddf3+0xe6>
 80006f2:	f04f 0203 	mov.w	r2, #3
 80006f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006fa:	bf18      	it	ne
 80006fc:	3203      	addne	r2, #3
 80006fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000702:	bf18      	it	ne
 8000704:	3203      	addne	r2, #3
 8000706:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800070a:	f1c2 0320 	rsb	r3, r2, #32
 800070e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000712:	fa20 f002 	lsr.w	r0, r0, r2
 8000716:	fa01 fe03 	lsl.w	lr, r1, r3
 800071a:	ea40 000e 	orr.w	r0, r0, lr
 800071e:	fa21 f102 	lsr.w	r1, r1, r2
 8000722:	4414      	add	r4, r2
 8000724:	e6bd      	b.n	80004a2 <__adddf3+0xe6>
 8000726:	bf00      	nop

08000728 <__aeabi_uldivmod>:
 8000728:	b953      	cbnz	r3, 8000740 <__aeabi_uldivmod+0x18>
 800072a:	b94a      	cbnz	r2, 8000740 <__aeabi_uldivmod+0x18>
 800072c:	2900      	cmp	r1, #0
 800072e:	bf08      	it	eq
 8000730:	2800      	cmpeq	r0, #0
 8000732:	bf1c      	itt	ne
 8000734:	f04f 31ff 	movne.w	r1, #4294967295
 8000738:	f04f 30ff 	movne.w	r0, #4294967295
 800073c:	f000 b988 	b.w	8000a50 <__aeabi_idiv0>
 8000740:	f1ad 0c08 	sub.w	ip, sp, #8
 8000744:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000748:	f000 f806 	bl	8000758 <__udivmoddi4>
 800074c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000750:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000754:	b004      	add	sp, #16
 8000756:	4770      	bx	lr

08000758 <__udivmoddi4>:
 8000758:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800075c:	9d08      	ldr	r5, [sp, #32]
 800075e:	468e      	mov	lr, r1
 8000760:	4604      	mov	r4, r0
 8000762:	4688      	mov	r8, r1
 8000764:	2b00      	cmp	r3, #0
 8000766:	d14a      	bne.n	80007fe <__udivmoddi4+0xa6>
 8000768:	428a      	cmp	r2, r1
 800076a:	4617      	mov	r7, r2
 800076c:	d962      	bls.n	8000834 <__udivmoddi4+0xdc>
 800076e:	fab2 f682 	clz	r6, r2
 8000772:	b14e      	cbz	r6, 8000788 <__udivmoddi4+0x30>
 8000774:	f1c6 0320 	rsb	r3, r6, #32
 8000778:	fa01 f806 	lsl.w	r8, r1, r6
 800077c:	fa20 f303 	lsr.w	r3, r0, r3
 8000780:	40b7      	lsls	r7, r6
 8000782:	ea43 0808 	orr.w	r8, r3, r8
 8000786:	40b4      	lsls	r4, r6
 8000788:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800078c:	fa1f fc87 	uxth.w	ip, r7
 8000790:	fbb8 f1fe 	udiv	r1, r8, lr
 8000794:	0c23      	lsrs	r3, r4, #16
 8000796:	fb0e 8811 	mls	r8, lr, r1, r8
 800079a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800079e:	fb01 f20c 	mul.w	r2, r1, ip
 80007a2:	429a      	cmp	r2, r3
 80007a4:	d909      	bls.n	80007ba <__udivmoddi4+0x62>
 80007a6:	18fb      	adds	r3, r7, r3
 80007a8:	f101 30ff 	add.w	r0, r1, #4294967295
 80007ac:	f080 80ea 	bcs.w	8000984 <__udivmoddi4+0x22c>
 80007b0:	429a      	cmp	r2, r3
 80007b2:	f240 80e7 	bls.w	8000984 <__udivmoddi4+0x22c>
 80007b6:	3902      	subs	r1, #2
 80007b8:	443b      	add	r3, r7
 80007ba:	1a9a      	subs	r2, r3, r2
 80007bc:	b2a3      	uxth	r3, r4
 80007be:	fbb2 f0fe 	udiv	r0, r2, lr
 80007c2:	fb0e 2210 	mls	r2, lr, r0, r2
 80007c6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80007ca:	fb00 fc0c 	mul.w	ip, r0, ip
 80007ce:	459c      	cmp	ip, r3
 80007d0:	d909      	bls.n	80007e6 <__udivmoddi4+0x8e>
 80007d2:	18fb      	adds	r3, r7, r3
 80007d4:	f100 32ff 	add.w	r2, r0, #4294967295
 80007d8:	f080 80d6 	bcs.w	8000988 <__udivmoddi4+0x230>
 80007dc:	459c      	cmp	ip, r3
 80007de:	f240 80d3 	bls.w	8000988 <__udivmoddi4+0x230>
 80007e2:	443b      	add	r3, r7
 80007e4:	3802      	subs	r0, #2
 80007e6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80007ea:	eba3 030c 	sub.w	r3, r3, ip
 80007ee:	2100      	movs	r1, #0
 80007f0:	b11d      	cbz	r5, 80007fa <__udivmoddi4+0xa2>
 80007f2:	40f3      	lsrs	r3, r6
 80007f4:	2200      	movs	r2, #0
 80007f6:	e9c5 3200 	strd	r3, r2, [r5]
 80007fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007fe:	428b      	cmp	r3, r1
 8000800:	d905      	bls.n	800080e <__udivmoddi4+0xb6>
 8000802:	b10d      	cbz	r5, 8000808 <__udivmoddi4+0xb0>
 8000804:	e9c5 0100 	strd	r0, r1, [r5]
 8000808:	2100      	movs	r1, #0
 800080a:	4608      	mov	r0, r1
 800080c:	e7f5      	b.n	80007fa <__udivmoddi4+0xa2>
 800080e:	fab3 f183 	clz	r1, r3
 8000812:	2900      	cmp	r1, #0
 8000814:	d146      	bne.n	80008a4 <__udivmoddi4+0x14c>
 8000816:	4573      	cmp	r3, lr
 8000818:	d302      	bcc.n	8000820 <__udivmoddi4+0xc8>
 800081a:	4282      	cmp	r2, r0
 800081c:	f200 8105 	bhi.w	8000a2a <__udivmoddi4+0x2d2>
 8000820:	1a84      	subs	r4, r0, r2
 8000822:	eb6e 0203 	sbc.w	r2, lr, r3
 8000826:	2001      	movs	r0, #1
 8000828:	4690      	mov	r8, r2
 800082a:	2d00      	cmp	r5, #0
 800082c:	d0e5      	beq.n	80007fa <__udivmoddi4+0xa2>
 800082e:	e9c5 4800 	strd	r4, r8, [r5]
 8000832:	e7e2      	b.n	80007fa <__udivmoddi4+0xa2>
 8000834:	2a00      	cmp	r2, #0
 8000836:	f000 8090 	beq.w	800095a <__udivmoddi4+0x202>
 800083a:	fab2 f682 	clz	r6, r2
 800083e:	2e00      	cmp	r6, #0
 8000840:	f040 80a4 	bne.w	800098c <__udivmoddi4+0x234>
 8000844:	1a8a      	subs	r2, r1, r2
 8000846:	0c03      	lsrs	r3, r0, #16
 8000848:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800084c:	b280      	uxth	r0, r0
 800084e:	b2bc      	uxth	r4, r7
 8000850:	2101      	movs	r1, #1
 8000852:	fbb2 fcfe 	udiv	ip, r2, lr
 8000856:	fb0e 221c 	mls	r2, lr, ip, r2
 800085a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800085e:	fb04 f20c 	mul.w	r2, r4, ip
 8000862:	429a      	cmp	r2, r3
 8000864:	d907      	bls.n	8000876 <__udivmoddi4+0x11e>
 8000866:	18fb      	adds	r3, r7, r3
 8000868:	f10c 38ff 	add.w	r8, ip, #4294967295
 800086c:	d202      	bcs.n	8000874 <__udivmoddi4+0x11c>
 800086e:	429a      	cmp	r2, r3
 8000870:	f200 80e0 	bhi.w	8000a34 <__udivmoddi4+0x2dc>
 8000874:	46c4      	mov	ip, r8
 8000876:	1a9b      	subs	r3, r3, r2
 8000878:	fbb3 f2fe 	udiv	r2, r3, lr
 800087c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000880:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000884:	fb02 f404 	mul.w	r4, r2, r4
 8000888:	429c      	cmp	r4, r3
 800088a:	d907      	bls.n	800089c <__udivmoddi4+0x144>
 800088c:	18fb      	adds	r3, r7, r3
 800088e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000892:	d202      	bcs.n	800089a <__udivmoddi4+0x142>
 8000894:	429c      	cmp	r4, r3
 8000896:	f200 80ca 	bhi.w	8000a2e <__udivmoddi4+0x2d6>
 800089a:	4602      	mov	r2, r0
 800089c:	1b1b      	subs	r3, r3, r4
 800089e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008a2:	e7a5      	b.n	80007f0 <__udivmoddi4+0x98>
 80008a4:	f1c1 0620 	rsb	r6, r1, #32
 80008a8:	408b      	lsls	r3, r1
 80008aa:	fa22 f706 	lsr.w	r7, r2, r6
 80008ae:	431f      	orrs	r7, r3
 80008b0:	fa0e f401 	lsl.w	r4, lr, r1
 80008b4:	fa20 f306 	lsr.w	r3, r0, r6
 80008b8:	fa2e fe06 	lsr.w	lr, lr, r6
 80008bc:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80008c0:	4323      	orrs	r3, r4
 80008c2:	fa00 f801 	lsl.w	r8, r0, r1
 80008c6:	fa1f fc87 	uxth.w	ip, r7
 80008ca:	fbbe f0f9 	udiv	r0, lr, r9
 80008ce:	0c1c      	lsrs	r4, r3, #16
 80008d0:	fb09 ee10 	mls	lr, r9, r0, lr
 80008d4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80008d8:	fb00 fe0c 	mul.w	lr, r0, ip
 80008dc:	45a6      	cmp	lr, r4
 80008de:	fa02 f201 	lsl.w	r2, r2, r1
 80008e2:	d909      	bls.n	80008f8 <__udivmoddi4+0x1a0>
 80008e4:	193c      	adds	r4, r7, r4
 80008e6:	f100 3aff 	add.w	sl, r0, #4294967295
 80008ea:	f080 809c 	bcs.w	8000a26 <__udivmoddi4+0x2ce>
 80008ee:	45a6      	cmp	lr, r4
 80008f0:	f240 8099 	bls.w	8000a26 <__udivmoddi4+0x2ce>
 80008f4:	3802      	subs	r0, #2
 80008f6:	443c      	add	r4, r7
 80008f8:	eba4 040e 	sub.w	r4, r4, lr
 80008fc:	fa1f fe83 	uxth.w	lr, r3
 8000900:	fbb4 f3f9 	udiv	r3, r4, r9
 8000904:	fb09 4413 	mls	r4, r9, r3, r4
 8000908:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 800090c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000910:	45a4      	cmp	ip, r4
 8000912:	d908      	bls.n	8000926 <__udivmoddi4+0x1ce>
 8000914:	193c      	adds	r4, r7, r4
 8000916:	f103 3eff 	add.w	lr, r3, #4294967295
 800091a:	f080 8082 	bcs.w	8000a22 <__udivmoddi4+0x2ca>
 800091e:	45a4      	cmp	ip, r4
 8000920:	d97f      	bls.n	8000a22 <__udivmoddi4+0x2ca>
 8000922:	3b02      	subs	r3, #2
 8000924:	443c      	add	r4, r7
 8000926:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800092a:	eba4 040c 	sub.w	r4, r4, ip
 800092e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000932:	4564      	cmp	r4, ip
 8000934:	4673      	mov	r3, lr
 8000936:	46e1      	mov	r9, ip
 8000938:	d362      	bcc.n	8000a00 <__udivmoddi4+0x2a8>
 800093a:	d05f      	beq.n	80009fc <__udivmoddi4+0x2a4>
 800093c:	b15d      	cbz	r5, 8000956 <__udivmoddi4+0x1fe>
 800093e:	ebb8 0203 	subs.w	r2, r8, r3
 8000942:	eb64 0409 	sbc.w	r4, r4, r9
 8000946:	fa04 f606 	lsl.w	r6, r4, r6
 800094a:	fa22 f301 	lsr.w	r3, r2, r1
 800094e:	431e      	orrs	r6, r3
 8000950:	40cc      	lsrs	r4, r1
 8000952:	e9c5 6400 	strd	r6, r4, [r5]
 8000956:	2100      	movs	r1, #0
 8000958:	e74f      	b.n	80007fa <__udivmoddi4+0xa2>
 800095a:	fbb1 fcf2 	udiv	ip, r1, r2
 800095e:	0c01      	lsrs	r1, r0, #16
 8000960:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000964:	b280      	uxth	r0, r0
 8000966:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800096a:	463b      	mov	r3, r7
 800096c:	4638      	mov	r0, r7
 800096e:	463c      	mov	r4, r7
 8000970:	46b8      	mov	r8, r7
 8000972:	46be      	mov	lr, r7
 8000974:	2620      	movs	r6, #32
 8000976:	fbb1 f1f7 	udiv	r1, r1, r7
 800097a:	eba2 0208 	sub.w	r2, r2, r8
 800097e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000982:	e766      	b.n	8000852 <__udivmoddi4+0xfa>
 8000984:	4601      	mov	r1, r0
 8000986:	e718      	b.n	80007ba <__udivmoddi4+0x62>
 8000988:	4610      	mov	r0, r2
 800098a:	e72c      	b.n	80007e6 <__udivmoddi4+0x8e>
 800098c:	f1c6 0220 	rsb	r2, r6, #32
 8000990:	fa2e f302 	lsr.w	r3, lr, r2
 8000994:	40b7      	lsls	r7, r6
 8000996:	40b1      	lsls	r1, r6
 8000998:	fa20 f202 	lsr.w	r2, r0, r2
 800099c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009a0:	430a      	orrs	r2, r1
 80009a2:	fbb3 f8fe 	udiv	r8, r3, lr
 80009a6:	b2bc      	uxth	r4, r7
 80009a8:	fb0e 3318 	mls	r3, lr, r8, r3
 80009ac:	0c11      	lsrs	r1, r2, #16
 80009ae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80009b2:	fb08 f904 	mul.w	r9, r8, r4
 80009b6:	40b0      	lsls	r0, r6
 80009b8:	4589      	cmp	r9, r1
 80009ba:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80009be:	b280      	uxth	r0, r0
 80009c0:	d93e      	bls.n	8000a40 <__udivmoddi4+0x2e8>
 80009c2:	1879      	adds	r1, r7, r1
 80009c4:	f108 3cff 	add.w	ip, r8, #4294967295
 80009c8:	d201      	bcs.n	80009ce <__udivmoddi4+0x276>
 80009ca:	4589      	cmp	r9, r1
 80009cc:	d81f      	bhi.n	8000a0e <__udivmoddi4+0x2b6>
 80009ce:	eba1 0109 	sub.w	r1, r1, r9
 80009d2:	fbb1 f9fe 	udiv	r9, r1, lr
 80009d6:	fb09 f804 	mul.w	r8, r9, r4
 80009da:	fb0e 1119 	mls	r1, lr, r9, r1
 80009de:	b292      	uxth	r2, r2
 80009e0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80009e4:	4542      	cmp	r2, r8
 80009e6:	d229      	bcs.n	8000a3c <__udivmoddi4+0x2e4>
 80009e8:	18ba      	adds	r2, r7, r2
 80009ea:	f109 31ff 	add.w	r1, r9, #4294967295
 80009ee:	d2c4      	bcs.n	800097a <__udivmoddi4+0x222>
 80009f0:	4542      	cmp	r2, r8
 80009f2:	d2c2      	bcs.n	800097a <__udivmoddi4+0x222>
 80009f4:	f1a9 0102 	sub.w	r1, r9, #2
 80009f8:	443a      	add	r2, r7
 80009fa:	e7be      	b.n	800097a <__udivmoddi4+0x222>
 80009fc:	45f0      	cmp	r8, lr
 80009fe:	d29d      	bcs.n	800093c <__udivmoddi4+0x1e4>
 8000a00:	ebbe 0302 	subs.w	r3, lr, r2
 8000a04:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a08:	3801      	subs	r0, #1
 8000a0a:	46e1      	mov	r9, ip
 8000a0c:	e796      	b.n	800093c <__udivmoddi4+0x1e4>
 8000a0e:	eba7 0909 	sub.w	r9, r7, r9
 8000a12:	4449      	add	r1, r9
 8000a14:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a18:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a1c:	fb09 f804 	mul.w	r8, r9, r4
 8000a20:	e7db      	b.n	80009da <__udivmoddi4+0x282>
 8000a22:	4673      	mov	r3, lr
 8000a24:	e77f      	b.n	8000926 <__udivmoddi4+0x1ce>
 8000a26:	4650      	mov	r0, sl
 8000a28:	e766      	b.n	80008f8 <__udivmoddi4+0x1a0>
 8000a2a:	4608      	mov	r0, r1
 8000a2c:	e6fd      	b.n	800082a <__udivmoddi4+0xd2>
 8000a2e:	443b      	add	r3, r7
 8000a30:	3a02      	subs	r2, #2
 8000a32:	e733      	b.n	800089c <__udivmoddi4+0x144>
 8000a34:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a38:	443b      	add	r3, r7
 8000a3a:	e71c      	b.n	8000876 <__udivmoddi4+0x11e>
 8000a3c:	4649      	mov	r1, r9
 8000a3e:	e79c      	b.n	800097a <__udivmoddi4+0x222>
 8000a40:	eba1 0109 	sub.w	r1, r1, r9
 8000a44:	46c4      	mov	ip, r8
 8000a46:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a4a:	fb09 f804 	mul.w	r8, r9, r4
 8000a4e:	e7c4      	b.n	80009da <__udivmoddi4+0x282>

08000a50 <__aeabi_idiv0>:
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop

08000a54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000a58:	4b49      	ldr	r3, [pc, #292]	@ (8000b80 <SystemInit+0x12c>)
 8000a5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000a5e:	4a48      	ldr	r2, [pc, #288]	@ (8000b80 <SystemInit+0x12c>)
 8000a60:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000a64:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000a68:	4b45      	ldr	r3, [pc, #276]	@ (8000b80 <SystemInit+0x12c>)
 8000a6a:	691b      	ldr	r3, [r3, #16]
 8000a6c:	4a44      	ldr	r2, [pc, #272]	@ (8000b80 <SystemInit+0x12c>)
 8000a6e:	f043 0310 	orr.w	r3, r3, #16
 8000a72:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a74:	4b43      	ldr	r3, [pc, #268]	@ (8000b84 <SystemInit+0x130>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	f003 030f 	and.w	r3, r3, #15
 8000a7c:	2b06      	cmp	r3, #6
 8000a7e:	d807      	bhi.n	8000a90 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a80:	4b40      	ldr	r3, [pc, #256]	@ (8000b84 <SystemInit+0x130>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f023 030f 	bic.w	r3, r3, #15
 8000a88:	4a3e      	ldr	r2, [pc, #248]	@ (8000b84 <SystemInit+0x130>)
 8000a8a:	f043 0307 	orr.w	r3, r3, #7
 8000a8e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000a90:	4b3d      	ldr	r3, [pc, #244]	@ (8000b88 <SystemInit+0x134>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a3c      	ldr	r2, [pc, #240]	@ (8000b88 <SystemInit+0x134>)
 8000a96:	f043 0301 	orr.w	r3, r3, #1
 8000a9a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a9c:	4b3a      	ldr	r3, [pc, #232]	@ (8000b88 <SystemInit+0x134>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000aa2:	4b39      	ldr	r3, [pc, #228]	@ (8000b88 <SystemInit+0x134>)
 8000aa4:	681a      	ldr	r2, [r3, #0]
 8000aa6:	4938      	ldr	r1, [pc, #224]	@ (8000b88 <SystemInit+0x134>)
 8000aa8:	4b38      	ldr	r3, [pc, #224]	@ (8000b8c <SystemInit+0x138>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000aae:	4b35      	ldr	r3, [pc, #212]	@ (8000b84 <SystemInit+0x130>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f003 0308 	and.w	r3, r3, #8
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d007      	beq.n	8000aca <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000aba:	4b32      	ldr	r3, [pc, #200]	@ (8000b84 <SystemInit+0x130>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	f023 030f 	bic.w	r3, r3, #15
 8000ac2:	4a30      	ldr	r2, [pc, #192]	@ (8000b84 <SystemInit+0x130>)
 8000ac4:	f043 0307 	orr.w	r3, r3, #7
 8000ac8:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000aca:	4b2f      	ldr	r3, [pc, #188]	@ (8000b88 <SystemInit+0x134>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000ad0:	4b2d      	ldr	r3, [pc, #180]	@ (8000b88 <SystemInit+0x134>)
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ad6:	4b2c      	ldr	r3, [pc, #176]	@ (8000b88 <SystemInit+0x134>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000adc:	4b2a      	ldr	r3, [pc, #168]	@ (8000b88 <SystemInit+0x134>)
 8000ade:	4a2c      	ldr	r2, [pc, #176]	@ (8000b90 <SystemInit+0x13c>)
 8000ae0:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000ae2:	4b29      	ldr	r3, [pc, #164]	@ (8000b88 <SystemInit+0x134>)
 8000ae4:	4a2b      	ldr	r2, [pc, #172]	@ (8000b94 <SystemInit+0x140>)
 8000ae6:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000ae8:	4b27      	ldr	r3, [pc, #156]	@ (8000b88 <SystemInit+0x134>)
 8000aea:	4a2b      	ldr	r2, [pc, #172]	@ (8000b98 <SystemInit+0x144>)
 8000aec:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000aee:	4b26      	ldr	r3, [pc, #152]	@ (8000b88 <SystemInit+0x134>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000af4:	4b24      	ldr	r3, [pc, #144]	@ (8000b88 <SystemInit+0x134>)
 8000af6:	4a28      	ldr	r2, [pc, #160]	@ (8000b98 <SystemInit+0x144>)
 8000af8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000afa:	4b23      	ldr	r3, [pc, #140]	@ (8000b88 <SystemInit+0x134>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000b00:	4b21      	ldr	r3, [pc, #132]	@ (8000b88 <SystemInit+0x134>)
 8000b02:	4a25      	ldr	r2, [pc, #148]	@ (8000b98 <SystemInit+0x144>)
 8000b04:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000b06:	4b20      	ldr	r3, [pc, #128]	@ (8000b88 <SystemInit+0x134>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000b0c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b88 <SystemInit+0x134>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a1d      	ldr	r2, [pc, #116]	@ (8000b88 <SystemInit+0x134>)
 8000b12:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000b16:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000b18:	4b1b      	ldr	r3, [pc, #108]	@ (8000b88 <SystemInit+0x134>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000b1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000b9c <SystemInit+0x148>)
 8000b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000b22:	4a1e      	ldr	r2, [pc, #120]	@ (8000b9c <SystemInit+0x148>)
 8000b24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b28:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000b2a:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba0 <SystemInit+0x14c>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <SystemInit+0x150>)
 8000b30:	4013      	ands	r3, r2
 8000b32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8000b36:	d202      	bcs.n	8000b3e <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000b38:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba8 <SystemInit+0x154>)
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D2 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#elif defined(CORE_CM7)
  if(READ_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN) == 0U)
 8000b3e:	4b12      	ldr	r3, [pc, #72]	@ (8000b88 <SystemInit+0x134>)
 8000b40:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b44:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d113      	bne.n	8000b74 <SystemInit+0x120>
  {
    /* Enable the FMC interface clock */
    SET_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000b4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <SystemInit+0x134>)
 8000b4e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b52:	4a0d      	ldr	r2, [pc, #52]	@ (8000b88 <SystemInit+0x134>)
 8000b54:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b58:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
    /*
     * Disable the FMC bank1 (enabled after reset).
     * This, prevents CPU speculation access on this bank which blocks the use of FMC during
     * 24us. During this time the others FMC master (such as LTDC) cannot use it!
     */
    FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000b5c:	4b13      	ldr	r3, [pc, #76]	@ (8000bac <SystemInit+0x158>)
 8000b5e:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000b62:	601a      	str	r2, [r3, #0]

    /* Disable the FMC interface clock */
    CLEAR_BIT(RCC->AHB3ENR, RCC_AHB3ENR_FMCEN);
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <SystemInit+0x134>)
 8000b66:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8000b6a:	4a07      	ldr	r2, [pc, #28]	@ (8000b88 <SystemInit+0x134>)
 8000b6c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000b70:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8000b74:	bf00      	nop
 8000b76:	46bd      	mov	sp, r7
 8000b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop
 8000b80:	e000ed00 	.word	0xe000ed00
 8000b84:	52002000 	.word	0x52002000
 8000b88:	58024400 	.word	0x58024400
 8000b8c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000b90:	02020200 	.word	0x02020200
 8000b94:	01ff0000 	.word	0x01ff0000
 8000b98:	01010280 	.word	0x01010280
 8000b9c:	580000c0 	.word	0x580000c0
 8000ba0:	5c001000 	.word	0x5c001000
 8000ba4:	ffff0000 	.word	0xffff0000
 8000ba8:	51008108 	.word	0x51008108
 8000bac:	52004000 	.word	0x52004000

08000bb0 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 8000bb4:	4b09      	ldr	r3, [pc, #36]	@ (8000bdc <ExitRun0Mode+0x2c>)
 8000bb6:	68db      	ldr	r3, [r3, #12]
 8000bb8:	4a08      	ldr	r2, [pc, #32]	@ (8000bdc <ExitRun0Mode+0x2c>)
 8000bba:	f023 0302 	bic.w	r3, r3, #2
 8000bbe:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 8000bc0:	bf00      	nop
 8000bc2:	4b06      	ldr	r3, [pc, #24]	@ (8000bdc <ExitRun0Mode+0x2c>)
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d0f9      	beq.n	8000bc2 <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 8000bce:	bf00      	nop
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	58024800 	.word	0x58024800

08000be0 <additionner_deux_nombres>:
 */


#include "utility.h"

int32_t additionner_deux_nombres(int32_t a, int32_t b) {
 8000be0:	b480      	push	{r7}
 8000be2:	b083      	sub	sp, #12
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
 8000be8:	6039      	str	r1, [r7, #0]
    return a + b;
 8000bea:	687a      	ldr	r2, [r7, #4]
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	4413      	add	r3, r2
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	0000      	movs	r0, r0
	...

08000c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b0d0      	sub	sp, #320	@ 0x140
 8000c04:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c06:	4b36      	ldr	r3, [pc, #216]	@ (8000ce0 <main+0xe0>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d11b      	bne.n	8000c4a <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c12:	f3bf 8f4f 	dsb	sy
}
 8000c16:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c18:	f3bf 8f6f 	isb	sy
}
 8000c1c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000c1e:	4b30      	ldr	r3, [pc, #192]	@ (8000ce0 <main+0xe0>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000c26:	f3bf 8f4f 	dsb	sy
}
 8000c2a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c2c:	f3bf 8f6f 	isb	sy
}
 8000c30:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000c32:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce0 <main+0xe0>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	4a2a      	ldr	r2, [pc, #168]	@ (8000ce0 <main+0xe0>)
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c3c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c3e:	f3bf 8f4f 	dsb	sy
}
 8000c42:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c44:	f3bf 8f6f 	isb	sy
}
 8000c48:	e000      	b.n	8000c4c <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c4a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c4c:	4b24      	ldr	r3, [pc, #144]	@ (8000ce0 <main+0xe0>)
 8000c4e:	695b      	ldr	r3, [r3, #20]
 8000c50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d145      	bne.n	8000ce4 <main+0xe4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000c58:	4b21      	ldr	r3, [pc, #132]	@ (8000ce0 <main+0xe0>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000c60:	f3bf 8f4f 	dsb	sy
}
 8000c64:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000c66:	4b1e      	ldr	r3, [pc, #120]	@ (8000ce0 <main+0xe0>)
 8000c68:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000c6c:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000c70:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000c74:	0b5b      	lsrs	r3, r3, #13
 8000c76:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000c7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8000c82:	08db      	lsrs	r3, r3, #3
 8000c84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c88:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c8c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000c90:	015a      	lsls	r2, r3, #5
 8000c92:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000c96:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000c98:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8000c9c:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c9e:	4910      	ldr	r1, [pc, #64]	@ (8000ce0 <main+0xe0>)
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000ca6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8000caa:	1e5a      	subs	r2, r3, #1
 8000cac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d1eb      	bne.n	8000c8c <main+0x8c>
    } while(sets-- != 0U);
 8000cb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8000cb8:	1e5a      	subs	r2, r3, #1
 8000cba:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d1dd      	bne.n	8000c7e <main+0x7e>
  __ASM volatile ("dsb 0xF":::"memory");
 8000cc2:	f3bf 8f4f 	dsb	sy
}
 8000cc6:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000cc8:	4b05      	ldr	r3, [pc, #20]	@ (8000ce0 <main+0xe0>)
 8000cca:	695b      	ldr	r3, [r3, #20]
 8000ccc:	4a04      	ldr	r2, [pc, #16]	@ (8000ce0 <main+0xe0>)
 8000cce:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000cd2:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000cd4:	f3bf 8f4f 	dsb	sy
}
 8000cd8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000cda:	f3bf 8f6f 	isb	sy
}
 8000cde:	e002      	b.n	8000ce6 <main+0xe6>
 8000ce0:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ce4:	bf00      	nop
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000ce6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cea:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000cee:	bf00      	nop
 8000cf0:	4bbf      	ldr	r3, [pc, #764]	@ (8000ff0 <main+0x3f0>)
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d006      	beq.n	8000d0a <main+0x10a>
 8000cfc:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000d00:	1e5a      	subs	r2, r3, #1
 8000d02:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	dcf2      	bgt.n	8000cf0 <main+0xf0>
  if ( timeout < 0 )
 8000d0a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	da01      	bge.n	8000d16 <main+0x116>
  {
  Error_Handler();
 8000d12:	f001 fa07 	bl	8002124 <Error_Handler>
#endif /* DUAL_CORE_BOOT_SYNC_SEQUENCE */
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d16:	f001 fc83 	bl	8002620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d1a:	f000 fe43 	bl	80019a4 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
#if defined(DUAL_CORE_BOOT_SYNC_SEQUENCE)
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000d1e:	4bb4      	ldr	r3, [pc, #720]	@ (8000ff0 <main+0x3f0>)
 8000d20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d24:	4ab2      	ldr	r2, [pc, #712]	@ (8000ff0 <main+0x3f0>)
 8000d26:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000d2a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000d2e:	4bb0      	ldr	r3, [pc, #704]	@ (8000ff0 <main+0x3f0>)
 8000d30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000d34:	f003 7200 	and.w	r2, r3, #33554432	@ 0x2000000
 8000d38:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000d3c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8000d46:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8000d4a:	681b      	ldr	r3, [r3, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000d4c:	2000      	movs	r0, #0
 8000d4e:	f006 fced 	bl	800772c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000d52:	2100      	movs	r1, #0
 8000d54:	2000      	movs	r0, #0
 8000d56:	f006 fd03 	bl	8007760 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000d5a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d5e:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000d62:	bf00      	nop
 8000d64:	4ba2      	ldr	r3, [pc, #648]	@ (8000ff0 <main+0x3f0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d106      	bne.n	8000d7e <main+0x17e>
 8000d70:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000d74:	1e5a      	subs	r2, r3, #1
 8000d76:	f8c7 213c 	str.w	r2, [r7, #316]	@ 0x13c
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	dcf2      	bgt.n	8000d64 <main+0x164>
if ( timeout < 0 )
 8000d7e:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	da01      	bge.n	8000d8a <main+0x18a>
{
Error_Handler();
 8000d86:	f001 f9cd 	bl	8002124 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d8a:	f000 ff8d 	bl	8001ca8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d8e:	f000 ff6b 	bl	8001c68 <MX_DMA_Init>
  MX_BDMA_Init();
 8000d92:	f000 ff49 	bl	8001c28 <MX_BDMA_Init>
  MX_USART3_UART_Init();
 8000d96:	f000 fefb 	bl	8001b90 <MX_USART3_UART_Init>
  MX_ADC3_Init();
 8000d9a:	f000 fe7f 	bl	8001a9c <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  printf("INITIAL_START \r\n");
 8000d9e:	4895      	ldr	r0, [pc, #596]	@ (8000ff4 <main+0x3f4>)
 8000da0:	f00e fcde 	bl	800f760 <puts>
  printf("%c\r\n", ACK);			//%c pour dire que char sera afficher version caractere
 8000da4:	232a      	movs	r3, #42	@ 0x2a
 8000da6:	4619      	mov	r1, r3
 8000da8:	4893      	ldr	r0, [pc, #588]	@ (8000ff8 <main+0x3f8>)
 8000daa:	f00e fc71 	bl	800f690 <iprintf>
  printf("%d\r\n", NAK);			//%d pour dire que char sera afficher version codu numerique
 8000dae:	2323      	movs	r3, #35	@ 0x23
 8000db0:	4619      	mov	r1, r3
 8000db2:	4892      	ldr	r0, [pc, #584]	@ (8000ffc <main+0x3fc>)
 8000db4:	f00e fc6c 	bl	800f690 <iprintf>





  i8  = -42;
 8000db8:	4b91      	ldr	r3, [pc, #580]	@ (8001000 <main+0x400>)
 8000dba:	22d6      	movs	r2, #214	@ 0xd6
 8000dbc:	701a      	strb	r2, [r3, #0]
  u8  = 200;
 8000dbe:	4b91      	ldr	r3, [pc, #580]	@ (8001004 <main+0x404>)
 8000dc0:	22c8      	movs	r2, #200	@ 0xc8
 8000dc2:	701a      	strb	r2, [r3, #0]
  volatile char     c   = 'A';
 8000dc4:	2341      	movs	r3, #65	@ 0x41
 8000dc6:	f887 30c3 	strb.w	r3, [r7, #195]	@ 0xc3

  f32 = 3.14159f;
 8000dca:	4b8f      	ldr	r3, [pc, #572]	@ (8001008 <main+0x408>)
 8000dcc:	4a8f      	ldr	r2, [pc, #572]	@ (800100c <main+0x40c>)
 8000dce:	601a      	str	r2, [r3, #0]
  f64 = 2.718281828459045;
 8000dd0:	498f      	ldr	r1, [pc, #572]	@ (8001010 <main+0x410>)
 8000dd2:	a385      	add	r3, pc, #532	@ (adr r3, 8000fe8 <main+0x3e8>)
 8000dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000dd8:	e9c1 2300 	strd	r2, r3, [r1]

  printf("// ─────────────── entiers signés 8 bits ───────────────\r\n");
 8000ddc:	488d      	ldr	r0, [pc, #564]	@ (8001014 <main+0x414>)
 8000dde:	f00e fcbf 	bl	800f760 <puts>
  printf("int8_t %%d   -> %d\r\n",   i8);	// -42 signé (promu en int)
 8000de2:	4b87      	ldr	r3, [pc, #540]	@ (8001000 <main+0x400>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	b25b      	sxtb	r3, r3
 8000de8:	4619      	mov	r1, r3
 8000dea:	488b      	ldr	r0, [pc, #556]	@ (8001018 <main+0x418>)
 8000dec:	f00e fc50 	bl	800f690 <iprintf>
  printf("int8_t %%i   -> %i\r\n",   i8);	// -42 idem que %d
 8000df0:	4b83      	ldr	r3, [pc, #524]	@ (8001000 <main+0x400>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	4619      	mov	r1, r3
 8000df8:	4888      	ldr	r0, [pc, #544]	@ (800101c <main+0x41c>)
 8000dfa:	f00e fc49 	bl	800f690 <iprintf>
  //printf("int8_t %%hhd -> %hhd\r\n", i8); // format strict signed char
  printf("int8_t %%x   -> %x\r\n",   i8);	// ffffffd6  hexadécimal
 8000dfe:	4b80      	ldr	r3, [pc, #512]	@ (8001000 <main+0x400>)
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	b25b      	sxtb	r3, r3
 8000e04:	4619      	mov	r1, r3
 8000e06:	4886      	ldr	r0, [pc, #536]	@ (8001020 <main+0x420>)
 8000e08:	f00e fc42 	bl	800f690 <iprintf>
  printf("int8_t %%X   -> %X\r\n",   i8);	// FFFFFFD6  hexadécimal majuscules
 8000e0c:	4b7c      	ldr	r3, [pc, #496]	@ (8001000 <main+0x400>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	b25b      	sxtb	r3, r3
 8000e12:	4619      	mov	r1, r3
 8000e14:	4883      	ldr	r0, [pc, #524]	@ (8001024 <main+0x424>)
 8000e16:	f00e fc3b 	bl	800f690 <iprintf>
  printf("int8_t %%o   -> %o\r\n",   i8);	// 37777777726 octal
 8000e1a:	4b79      	ldr	r3, [pc, #484]	@ (8001000 <main+0x400>)
 8000e1c:	781b      	ldrb	r3, [r3, #0]
 8000e1e:	b25b      	sxtb	r3, r3
 8000e20:	4619      	mov	r1, r3
 8000e22:	4881      	ldr	r0, [pc, #516]	@ (8001028 <main+0x428>)
 8000e24:	f00e fc34 	bl	800f690 <iprintf>
  printf("int8_t %%c   -> %c\r\n",   i8);	// ��erreur �� interprété comme ASCII
 8000e28:	4b75      	ldr	r3, [pc, #468]	@ (8001000 <main+0x400>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	b25b      	sxtb	r3, r3
 8000e2e:	4619      	mov	r1, r3
 8000e30:	487e      	ldr	r0, [pc, #504]	@ (800102c <main+0x42c>)
 8000e32:	f00e fc2d 	bl	800f690 <iprintf>

  printf("// ─────────────── entiers non signés 8 bits ───────────────\r\n");
 8000e36:	487e      	ldr	r0, [pc, #504]	@ (8001030 <main+0x430>)
 8000e38:	f00e fc92 	bl	800f760 <puts>
  printf("uint8_t %%u   -> %u\r\n",   u8);	// 200 non signé
 8000e3c:	4b71      	ldr	r3, [pc, #452]	@ (8001004 <main+0x404>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	4619      	mov	r1, r3
 8000e44:	487b      	ldr	r0, [pc, #492]	@ (8001034 <main+0x434>)
 8000e46:	f00e fc23 	bl	800f690 <iprintf>
  //printf("uint8_t %%hhu -> %hhu\r\n", u8);// format strict unsigned char
  printf("uint8_t %%x   -> %x\r\n",   u8);	// c8 hexadécimal
 8000e4a:	4b6e      	ldr	r3, [pc, #440]	@ (8001004 <main+0x404>)
 8000e4c:	781b      	ldrb	r3, [r3, #0]
 8000e4e:	b2db      	uxtb	r3, r3
 8000e50:	4619      	mov	r1, r3
 8000e52:	4879      	ldr	r0, [pc, #484]	@ (8001038 <main+0x438>)
 8000e54:	f00e fc1c 	bl	800f690 <iprintf>
  printf("uint8_t %%X   -> %X\r\n",   u8);	// C8 hexadécimal majuscules
 8000e58:	4b6a      	ldr	r3, [pc, #424]	@ (8001004 <main+0x404>)
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	b2db      	uxtb	r3, r3
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4876      	ldr	r0, [pc, #472]	@ (800103c <main+0x43c>)
 8000e62:	f00e fc15 	bl	800f690 <iprintf>
  printf("uint8_t %%o   -> %o\r\n",   u8);	// 31 octal
 8000e66:	4b67      	ldr	r3, [pc, #412]	@ (8001004 <main+0x404>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	b2db      	uxtb	r3, r3
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4874      	ldr	r0, [pc, #464]	@ (8001040 <main+0x440>)
 8000e70:	f00e fc0e 	bl	800f690 <iprintf>
  printf("uint8_t %%c   -> %c\r\n",   u8);	// ��erreur �� ASCII
 8000e74:	4b63      	ldr	r3, [pc, #396]	@ (8001004 <main+0x404>)
 8000e76:	781b      	ldrb	r3, [r3, #0]
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	4619      	mov	r1, r3
 8000e7c:	4871      	ldr	r0, [pc, #452]	@ (8001044 <main+0x444>)
 8000e7e:	f00e fc07 	bl	800f690 <iprintf>

  printf("// ─────────────── char ───────────────\r\n");
 8000e82:	4871      	ldr	r0, [pc, #452]	@ (8001048 <main+0x448>)
 8000e84:	f00e fc6c 	bl	800f760 <puts>
  printf("char %%c -> %c\r\n", c);			// A caractère
 8000e88:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8000e8c:	b2db      	uxtb	r3, r3
 8000e8e:	4619      	mov	r1, r3
 8000e90:	486e      	ldr	r0, [pc, #440]	@ (800104c <main+0x44c>)
 8000e92:	f00e fbfd 	bl	800f690 <iprintf>
  printf("char %%d -> %d\r\n", c);			// 65 valeur numérique ASCII
 8000e96:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	486c      	ldr	r0, [pc, #432]	@ (8001050 <main+0x450>)
 8000ea0:	f00e fbf6 	bl	800f690 <iprintf>
  printf("char %%x -> %x\r\n", c);			// 41 valeur ASCII en hex
 8000ea4:	f897 30c3 	ldrb.w	r3, [r7, #195]	@ 0xc3
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	4619      	mov	r1, r3
 8000eac:	4869      	ldr	r0, [pc, #420]	@ (8001054 <main+0x454>)
 8000eae:	f00e fbef 	bl	800f690 <iprintf>

  printf("// ─────────────── flottants ───────────────\r\n");
 8000eb2:	4869      	ldr	r0, [pc, #420]	@ (8001058 <main+0x458>)
 8000eb4:	f00e fc54 	bl	800f760 <puts>
  // ⚠️ nécessite l’option : -u _printf_float
  printf("float  %%f -> %f\r\n", f32);		// 3.141590 	notation décimale
 8000eb8:	4b53      	ldr	r3, [pc, #332]	@ (8001008 <main+0x408>)
 8000eba:	edd3 7a00 	vldr	s15, [r3]
 8000ebe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ec2:	ec53 2b17 	vmov	r2, r3, d7
 8000ec6:	4865      	ldr	r0, [pc, #404]	@ (800105c <main+0x45c>)
 8000ec8:	f00e fbe2 	bl	800f690 <iprintf>
  printf("float  %%e -> %e\r\n", f32);		// 3.141590e+00 notation scientifique
 8000ecc:	4b4e      	ldr	r3, [pc, #312]	@ (8001008 <main+0x408>)
 8000ece:	edd3 7a00 	vldr	s15, [r3]
 8000ed2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ed6:	ec53 2b17 	vmov	r2, r3, d7
 8000eda:	4861      	ldr	r0, [pc, #388]	@ (8001060 <main+0x460>)
 8000edc:	f00e fbd8 	bl	800f690 <iprintf>
  printf("float  %%g -> %g\r\n", f32);		// 3.1415		 auto (f ou e)
 8000ee0:	4b49      	ldr	r3, [pc, #292]	@ (8001008 <main+0x408>)
 8000ee2:	edd3 7a00 	vldr	s15, [r3]
 8000ee6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000eea:	ec53 2b17 	vmov	r2, r3, d7
 8000eee:	485d      	ldr	r0, [pc, #372]	@ (8001064 <main+0x464>)
 8000ef0:	f00e fbce 	bl	800f690 <iprintf>

  printf("double %%f -> %f\r\n", f64);		// 2.718282
 8000ef4:	4b46      	ldr	r3, [pc, #280]	@ (8001010 <main+0x410>)
 8000ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000efa:	485b      	ldr	r0, [pc, #364]	@ (8001068 <main+0x468>)
 8000efc:	f00e fbc8 	bl	800f690 <iprintf>
  printf("double %%e -> %e\r\n", f64);		// 2.718282e+00
 8000f00:	4b43      	ldr	r3, [pc, #268]	@ (8001010 <main+0x410>)
 8000f02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f06:	4859      	ldr	r0, [pc, #356]	@ (800106c <main+0x46c>)
 8000f08:	f00e fbc2 	bl	800f690 <iprintf>
  printf("double %%g -> %g\r\n", f64);		// 2.71828
 8000f0c:	4b40      	ldr	r3, [pc, #256]	@ (8001010 <main+0x410>)
 8000f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f12:	4857      	ldr	r0, [pc, #348]	@ (8001070 <main+0x470>)
 8000f14:	f00e fbbc 	bl	800f690 <iprintf>


  printf("%10.3e\r\n", f64);
 8000f18:	4b3d      	ldr	r3, [pc, #244]	@ (8001010 <main+0x410>)
 8000f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1e:	4855      	ldr	r0, [pc, #340]	@ (8001074 <main+0x474>)
 8000f20:	f00e fbb6 	bl	800f690 <iprintf>
  printf("%10.3g\r\n", f64);
 8000f24:	4b3a      	ldr	r3, [pc, #232]	@ (8001010 <main+0x410>)
 8000f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f2a:	4853      	ldr	r0, [pc, #332]	@ (8001078 <main+0x478>)
 8000f2c:	f00e fbb0 	bl	800f690 <iprintf>
  printf("%10.3f\r\n", f64);
 8000f30:	4b37      	ldr	r3, [pc, #220]	@ (8001010 <main+0x410>)
 8000f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f36:	4851      	ldr	r0, [pc, #324]	@ (800107c <main+0x47c>)
 8000f38:	f00e fbaa 	bl	800f690 <iprintf>
  printf("x apres .: %.15f\r\n", f64);		//2.718281828459045 float avec x chiffre afficher
 8000f3c:	4b34      	ldr	r3, [pc, #208]	@ (8001010 <main+0x410>)
 8000f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f42:	484f      	ldr	r0, [pc, #316]	@ (8001080 <main+0x480>)
 8000f44:	f00e fba4 	bl	800f690 <iprintf>

  printf("sizeof(char)     = %d\r\n", sizeof(char)); //1
 8000f48:	2101      	movs	r1, #1
 8000f4a:	484e      	ldr	r0, [pc, #312]	@ (8001084 <main+0x484>)
 8000f4c:	f00e fba0 	bl	800f690 <iprintf>
  printf("sizeof(short int)    = %d\r\n", sizeof(short int)); //2
 8000f50:	2102      	movs	r1, #2
 8000f52:	484d      	ldr	r0, [pc, #308]	@ (8001088 <main+0x488>)
 8000f54:	f00e fb9c 	bl	800f690 <iprintf>
  printf("sizeof(int)      = %d\r\n", sizeof(int)); //4
 8000f58:	2104      	movs	r1, #4
 8000f5a:	484c      	ldr	r0, [pc, #304]	@ (800108c <main+0x48c>)
 8000f5c:	f00e fb98 	bl	800f690 <iprintf>
  printf("sizeof(long int)     = %d\r\n", sizeof(long int)); //4
 8000f60:	2104      	movs	r1, #4
 8000f62:	484b      	ldr	r0, [pc, #300]	@ (8001090 <main+0x490>)
 8000f64:	f00e fb94 	bl	800f690 <iprintf>
  printf("sizeof(long long int)= %d\r\n", sizeof(long long int)); //8
 8000f68:	2108      	movs	r1, #8
 8000f6a:	484a      	ldr	r0, [pc, #296]	@ (8001094 <main+0x494>)
 8000f6c:	f00e fb90 	bl	800f690 <iprintf>
  printf("sizeof(float)    = %d\r\n", sizeof(float)); //4
 8000f70:	2104      	movs	r1, #4
 8000f72:	4849      	ldr	r0, [pc, #292]	@ (8001098 <main+0x498>)
 8000f74:	f00e fb8c 	bl	800f690 <iprintf>
  printf("sizeof(double)   = %d\r\n", sizeof(double)); //8
 8000f78:	2108      	movs	r1, #8
 8000f7a:	4848      	ldr	r0, [pc, #288]	@ (800109c <main+0x49c>)
 8000f7c:	f00e fb88 	bl	800f690 <iprintf>
  printf("sizeof(long double) = %d\r\n", sizeof(long double)); //1
 8000f80:	2108      	movs	r1, #8
 8000f82:	4847      	ldr	r0, [pc, #284]	@ (80010a0 <main+0x4a0>)
 8000f84:	f00e fb84 	bl	800f690 <iprintf>
  printf("sizeof(uint8_t)  = %d\r\n", sizeof(uint8_t)); //1
 8000f88:	2101      	movs	r1, #1
 8000f8a:	4846      	ldr	r0, [pc, #280]	@ (80010a4 <main+0x4a4>)
 8000f8c:	f00e fb80 	bl	800f690 <iprintf>
  printf("sizeof(uint16_t) = %d\r\n", sizeof(uint16_t)); //2
 8000f90:	2102      	movs	r1, #2
 8000f92:	4845      	ldr	r0, [pc, #276]	@ (80010a8 <main+0x4a8>)
 8000f94:	f00e fb7c 	bl	800f690 <iprintf>
  printf("sizeof(uint32_t) = %d\r\n", sizeof(uint32_t)); //4
 8000f98:	2104      	movs	r1, #4
 8000f9a:	4844      	ldr	r0, [pc, #272]	@ (80010ac <main+0x4ac>)
 8000f9c:	f00e fb78 	bl	800f690 <iprintf>
  printf("sizeof(uint64_t) = %d\r\n", sizeof(uint64_t)); //8
 8000fa0:	2108      	movs	r1, #8
 8000fa2:	4843      	ldr	r0, [pc, #268]	@ (80010b0 <main+0x4b0>)
 8000fa4:	f00e fb74 	bl	800f690 <iprintf>
  printf("sizeof(void *)   = %d\r\n", sizeof(void *)); //4
 8000fa8:	2104      	movs	r1, #4
 8000faa:	4842      	ldr	r0, [pc, #264]	@ (80010b4 <main+0x4b4>)
 8000fac:	f00e fb70 	bl	800f690 <iprintf>

  s_struct s = {10, 10, 0};
 8000fb0:	4a41      	ldr	r2, [pc, #260]	@ (80010b8 <main+0x4b8>)
 8000fb2:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000fb6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  printf("before sum1: a = %d b = %d c = %d\r\n", s.a, s.b, s.c);	//before sum1: a = 10 b = 10 c = 0
 8000fbc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8000fc0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8000fc4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8000fc8:	483c      	ldr	r0, [pc, #240]	@ (80010bc <main+0x4bc>)
 8000fca:	f00e fb61 	bl	800f690 <iprintf>
  sum1(&s);
 8000fce:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 ff06 	bl	8001de4 <sum1>
  printf("after sum1: a = %d b = %d c = %d\r\n", s.a, s.b, s.c);	//after sum1: a = 10 b = 10 c = 20
 8000fd8:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8000fdc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8000fe0:	e06e      	b.n	80010c0 <main+0x4c0>
 8000fe2:	bf00      	nop
 8000fe4:	f3af 8000 	nop.w
 8000fe8:	8b145769 	.word	0x8b145769
 8000fec:	4005bf0a 	.word	0x4005bf0a
 8000ff0:	58024400 	.word	0x58024400
 8000ff4:	08011498 	.word	0x08011498
 8000ff8:	080114a8 	.word	0x080114a8
 8000ffc:	080114b0 	.word	0x080114b0
 8001000:	24000800 	.word	0x24000800
 8001004:	24000801 	.word	0x24000801
 8001008:	24000008 	.word	0x24000008
 800100c:	40490fd0 	.word	0x40490fd0
 8001010:	24000010 	.word	0x24000010
 8001014:	080114b8 	.word	0x080114b8
 8001018:	08011530 	.word	0x08011530
 800101c:	08011548 	.word	0x08011548
 8001020:	08011560 	.word	0x08011560
 8001024:	08011578 	.word	0x08011578
 8001028:	08011590 	.word	0x08011590
 800102c:	080115a8 	.word	0x080115a8
 8001030:	080115c0 	.word	0x080115c0
 8001034:	0801163c 	.word	0x0801163c
 8001038:	08011654 	.word	0x08011654
 800103c:	0801166c 	.word	0x0801166c
 8001040:	08011684 	.word	0x08011684
 8001044:	0801169c 	.word	0x0801169c
 8001048:	080116b4 	.word	0x080116b4
 800104c:	0801171c 	.word	0x0801171c
 8001050:	08011730 	.word	0x08011730
 8001054:	08011744 	.word	0x08011744
 8001058:	08011758 	.word	0x08011758
 800105c:	080117c4 	.word	0x080117c4
 8001060:	080117d8 	.word	0x080117d8
 8001064:	080117ec 	.word	0x080117ec
 8001068:	08011800 	.word	0x08011800
 800106c:	08011814 	.word	0x08011814
 8001070:	08011828 	.word	0x08011828
 8001074:	0801183c 	.word	0x0801183c
 8001078:	08011848 	.word	0x08011848
 800107c:	08011854 	.word	0x08011854
 8001080:	08011860 	.word	0x08011860
 8001084:	08011874 	.word	0x08011874
 8001088:	0801188c 	.word	0x0801188c
 800108c:	080118a8 	.word	0x080118a8
 8001090:	080118c0 	.word	0x080118c0
 8001094:	080118dc 	.word	0x080118dc
 8001098:	080118f8 	.word	0x080118f8
 800109c:	08011910 	.word	0x08011910
 80010a0:	08011928 	.word	0x08011928
 80010a4:	08011944 	.word	0x08011944
 80010a8:	0801195c 	.word	0x0801195c
 80010ac:	08011974 	.word	0x08011974
 80010b0:	0801198c 	.word	0x0801198c
 80010b4:	080119a4 	.word	0x080119a4
 80010b8:	08011c44 	.word	0x08011c44
 80010bc:	080119bc 	.word	0x080119bc
 80010c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80010c4:	4822      	ldr	r0, [pc, #136]	@ (8001150 <main+0x550>)
 80010c6:	f00e fae3 	bl	800f690 <iprintf>


  //cycle trough an arry from a pointers

  uint16_t a[] = {
 80010ca:	4a22      	ldr	r2, [pc, #136]	@ (8001154 <main+0x554>)
 80010cc:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 80010d0:	ca07      	ldmia	r2, {r0, r1, r2}
 80010d2:	c303      	stmia	r3!, {r0, r1}
 80010d4:	801a      	strh	r2, [r3, #0]
		  4,
		  5
  };


  for (int n= 0; n < sizeof(a) / sizeof(a[0]); ++n) {
 80010d6:	2300      	movs	r3, #0
 80010d8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80010dc:	e012      	b.n	8001104 <main+0x504>
	  printf("a[%d] = %d\r\n", n, a[n]);
 80010de:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80010e2:	005b      	lsls	r3, r3, #1
 80010e4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 80010e8:	443b      	add	r3, r7
 80010ea:	f833 3c98 	ldrh.w	r3, [r3, #-152]
 80010ee:	461a      	mov	r2, r3
 80010f0:	f8d7 1138 	ldr.w	r1, [r7, #312]	@ 0x138
 80010f4:	4818      	ldr	r0, [pc, #96]	@ (8001158 <main+0x558>)
 80010f6:	f00e facb 	bl	800f690 <iprintf>
  for (int n= 0; n < sizeof(a) / sizeof(a[0]); ++n) {
 80010fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80010fe:	3301      	adds	r3, #1
 8001100:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 8001104:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 8001108:	2b04      	cmp	r3, #4
 800110a:	d9e8      	bls.n	80010de <main+0x4de>
  }

  //uint16_t *ap = &a[0];
  uint16_t *ap = a;
 800110c:	f107 03a8 	add.w	r3, r7, #168	@ 0xa8
 8001110:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  for (int n = 0; n < sizeof(a) / sizeof(a[0]); ++n) {
 8001114:	2300      	movs	r3, #0
 8001116:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 800111a:	e011      	b.n	8001140 <main+0x540>
	  printf("a[%d] = %d\r\n", n, ap[n]);
 800111c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001120:	005b      	lsls	r3, r3, #1
 8001122:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8001126:	4413      	add	r3, r2
 8001128:	881b      	ldrh	r3, [r3, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8001130:	4809      	ldr	r0, [pc, #36]	@ (8001158 <main+0x558>)
 8001132:	f00e faad 	bl	800f690 <iprintf>
  for (int n = 0; n < sizeof(a) / sizeof(a[0]); ++n) {
 8001136:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800113a:	3301      	adds	r3, #1
 800113c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
 8001140:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001144:	2b04      	cmp	r3, #4
 8001146:	d9e9      	bls.n	800111c <main+0x51c>
  }

  for (int n = 0; n < sizeof(a) / sizeof(a[0]); ++n) {
 8001148:	2300      	movs	r3, #0
 800114a:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 800114e:	e018      	b.n	8001182 <main+0x582>
 8001150:	080119e0 	.word	0x080119e0
 8001154:	08011c50 	.word	0x08011c50
 8001158:	08011a04 	.word	0x08011a04
	  printf("a[%d] = %d\r\n", n, *ap);
 800115c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001160:	881b      	ldrh	r3, [r3, #0]
 8001162:	461a      	mov	r2, r3
 8001164:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8001168:	48de      	ldr	r0, [pc, #888]	@ (80014e4 <main+0x8e4>)
 800116a:	f00e fa91 	bl	800f690 <iprintf>
	  ++ap; //ap += 1;
 800116e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001172:	3302      	adds	r3, #2
 8001174:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
  for (int n = 0; n < sizeof(a) / sizeof(a[0]); ++n) {
 8001178:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800117c:	3301      	adds	r3, #1
 800117e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
 8001182:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001186:	2b04      	cmp	r3, #4
 8001188:	d9e8      	bls.n	800115c <main+0x55c>
   *
   */



  char sbuf[128] = {0};
 800118a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800118e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001192:	4618      	mov	r0, r3
 8001194:	2380      	movs	r3, #128	@ 0x80
 8001196:	461a      	mov	r2, r3
 8001198:	2100      	movs	r1, #0
 800119a:	f00e fbc1 	bl	800f920 <memset>
  printf("Length of sbuf = %d\r\n", sizeof(sbuf));	//Length of sbuf = 128
 800119e:	2180      	movs	r1, #128	@ 0x80
 80011a0:	48d1      	ldr	r0, [pc, #836]	@ (80014e8 <main+0x8e8>)
 80011a2:	f00e fa75 	bl	800f690 <iprintf>


  char cstr1[] = "This is";
 80011a6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80011aa:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80011ae:	4acf      	ldr	r2, [pc, #828]	@ (80014ec <main+0x8ec>)
 80011b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80011b4:	e883 0003 	stmia.w	r3, {r0, r1}
  char cstr2[] = "a string";
 80011b8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80011bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80011c0:	4acb      	ldr	r2, [pc, #812]	@ (80014f0 <main+0x8f0>)
 80011c2:	ca07      	ldmia	r2, {r0, r1, r2}
 80011c4:	c303      	stmia	r3!, {r0, r1}
 80011c6:	701a      	strb	r2, [r3, #0]

  printf("cstr1 len = %d: %s\r\n", strlen(cstr1), cstr1);	//cstr1 len = 7: This is
 80011c8:	f107 0320 	add.w	r3, r7, #32
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff f8e7 	bl	80003a0 <strlen>
 80011d2:	4601      	mov	r1, r0
 80011d4:	f107 0320 	add.w	r3, r7, #32
 80011d8:	461a      	mov	r2, r3
 80011da:	48c6      	ldr	r0, [pc, #792]	@ (80014f4 <main+0x8f4>)
 80011dc:	f00e fa58 	bl	800f690 <iprintf>
  printf("cstr2 len = %d: %s\r\n", strlen(cstr2), cstr2);	//cstr2 len = 8: a string
 80011e0:	f107 0314 	add.w	r3, r7, #20
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff f8db 	bl	80003a0 <strlen>
 80011ea:	4601      	mov	r1, r0
 80011ec:	f107 0314 	add.w	r3, r7, #20
 80011f0:	461a      	mov	r2, r3
 80011f2:	48c1      	ldr	r0, [pc, #772]	@ (80014f8 <main+0x8f8>)
 80011f4:	f00e fa4c 	bl	800f690 <iprintf>

  //strcpy(sbuf, cstr1);
  //strcat(sbuf, " ");
  //strcat(sbuf, cstr2);

  strncpy(sbuf, cstr1, sizeof(sbuf) - strlen(sbuf) - 1);
 80011f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff f8cf 	bl	80003a0 <strlen>
 8001202:	4603      	mov	r3, r0
 8001204:	f1c3 027f 	rsb	r2, r3, #127	@ 0x7f
 8001208:	f107 0120 	add.w	r1, r7, #32
 800120c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001210:	4618      	mov	r0, r3
 8001212:	f00e fba0 	bl	800f956 <strncpy>
  strncat(sbuf, " ", sizeof(sbuf) - strlen(sbuf) - 1);
 8001216:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800121a:	4618      	mov	r0, r3
 800121c:	f7ff f8c0 	bl	80003a0 <strlen>
 8001220:	4603      	mov	r3, r0
 8001222:	f1c3 027f 	rsb	r2, r3, #127	@ 0x7f
 8001226:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800122a:	49b4      	ldr	r1, [pc, #720]	@ (80014fc <main+0x8fc>)
 800122c:	4618      	mov	r0, r3
 800122e:	f00e fb7f 	bl	800f930 <strncat>
  strncat(sbuf, cstr2, sizeof(sbuf) - strlen(sbuf) - 1);
 8001232:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff f8b2 	bl	80003a0 <strlen>
 800123c:	4603      	mov	r3, r0
 800123e:	f1c3 027f 	rsb	r2, r3, #127	@ 0x7f
 8001242:	f107 0114 	add.w	r1, r7, #20
 8001246:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800124a:	4618      	mov	r0, r3
 800124c:	f00e fb70 	bl	800f930 <strncat>

  printf("sbuf = %s\r\n", sbuf);	//sbuf = This is a string
 8001250:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001254:	4619      	mov	r1, r3
 8001256:	48aa      	ldr	r0, [pc, #680]	@ (8001500 <main+0x900>)
 8001258:	f00e fa1a 	bl	800f690 <iprintf>

  char *sbuf2;
  //éviter malloc, privilégier buffers statique
  sbuf2 = malloc(128);
 800125c:	2080      	movs	r0, #128	@ 0x80
 800125e:	f00d fc63 	bl	800eb28 <malloc>
 8001262:	4603      	mov	r3, r0
 8001264:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128

  if (sbuf2) {
 8001268:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800126c:	2b00      	cmp	r3, #0
 800126e:	d015      	beq.n	800129c <main+0x69c>
	  strcpy(sbuf2, sbuf);
 8001270:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001274:	4619      	mov	r1, r3
 8001276:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 800127a:	f00e fc1c 	bl	800fab6 <strcpy>

	  printf("sbuf2 len = %d: %s\r\n", strlen(sbuf2), sbuf2);	//sbuf2 len = 16: This is a string
 800127e:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8001282:	f7ff f88d 	bl	80003a0 <strlen>
 8001286:	4603      	mov	r3, r0
 8001288:	f8d7 2128 	ldr.w	r2, [r7, #296]	@ 0x128
 800128c:	4619      	mov	r1, r3
 800128e:	489d      	ldr	r0, [pc, #628]	@ (8001504 <main+0x904>)
 8001290:	f00e f9fe 	bl	800f690 <iprintf>

	  free(sbuf2);
 8001294:	f8d7 0128 	ldr.w	r0, [r7, #296]	@ 0x128
 8001298:	f00d fc4e 	bl	800eb38 <free>

  }

  char cstr3[] = "a string";
 800129c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80012a0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80012a4:	4a92      	ldr	r2, [pc, #584]	@ (80014f0 <main+0x8f0>)
 80012a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80012a8:	c303      	stmia	r3!, {r0, r1}
 80012aa:	701a      	strb	r2, [r3, #0]


  //fonction cstr2 = cstr3 donc si faux sera print
  if(strcmp(cstr1, cstr3)) printf("cstr1 does not match cstr3\r\n"); //cstr1 does not match cstr3
 80012ac:	f107 0208 	add.w	r2, r7, #8
 80012b0:	f107 0320 	add.w	r3, r7, #32
 80012b4:	4611      	mov	r1, r2
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff f812 	bl	80002e0 <strcmp>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d002      	beq.n	80012c8 <main+0x6c8>
 80012c2:	4891      	ldr	r0, [pc, #580]	@ (8001508 <main+0x908>)
 80012c4:	f00e fa4c 	bl	800f760 <puts>

  if(strcmp(cstr2, cstr3)) printf("cstr2 does not match cstr3\r\n");
 80012c8:	f107 0208 	add.w	r2, r7, #8
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	4611      	mov	r1, r2
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff f804 	bl	80002e0 <strcmp>
 80012d8:	4603      	mov	r3, r0
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d002      	beq.n	80012e4 <main+0x6e4>
 80012de:	488b      	ldr	r0, [pc, #556]	@ (800150c <main+0x90c>)
 80012e0:	f00e fa3e 	bl	800f760 <puts>

  char *loc = strstr(sbuf, "a s");
 80012e4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012e8:	4989      	ldr	r1, [pc, #548]	@ (8001510 <main+0x910>)
 80012ea:	4618      	mov	r0, r3
 80012ec:	f00e fb46 	bl	800f97c <strstr>
 80012f0:	f8c7 0124 	str.w	r0, [r7, #292]	@ 0x124
  printf("location = %d: %s\r\n", loc - sbuf, loc);	//location = 8: a string
 80012f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012f8:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80012fc:	1ad3      	subs	r3, r2, r3
 80012fe:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001302:	4619      	mov	r1, r3
 8001304:	4883      	ldr	r0, [pc, #524]	@ (8001514 <main+0x914>)
 8001306:	f00e f9c3 	bl	800f690 <iprintf>



  uint8_t opp_t1 = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123

  opp_t1 = opp_t1 + 2;
 8001310:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8001314:	3302      	adds	r3, #2
 8001316:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
  printf(" 2 %u\r\n", opp_t1);
 800131a:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 800131e:	4619      	mov	r1, r3
 8001320:	487d      	ldr	r0, [pc, #500]	@ (8001518 <main+0x918>)
 8001322:	f00e f9b5 	bl	800f690 <iprintf>
  //meme chose que

  opp_t1 = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
  opp_t1 += 2;
 800132c:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8001330:	3302      	adds	r3, #2
 8001332:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
  printf("+= 2 %u\r\n", opp_t1);
 8001336:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 800133a:	4619      	mov	r1, r3
 800133c:	4877      	ldr	r0, [pc, #476]	@ (800151c <main+0x91c>)
 800133e:	f00e f9a7 	bl	800f690 <iprintf>


  opp_t1 -= 1;
 8001342:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8001346:	3b01      	subs	r3, #1
 8001348:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
  printf("-= 1 %u\r\n", opp_t1);
 800134c:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8001350:	4619      	mov	r1, r3
 8001352:	4873      	ldr	r0, [pc, #460]	@ (8001520 <main+0x920>)
 8001354:	f00e f99c 	bl	800f690 <iprintf>

  opp_t1 *= 2;
 8001358:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
  printf("*= 2 %u\r\n", opp_t1);
 8001362:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8001366:	4619      	mov	r1, r3
 8001368:	486e      	ldr	r0, [pc, #440]	@ (8001524 <main+0x924>)
 800136a:	f00e f991 	bl	800f690 <iprintf>

  opp_t1 /= 1;
  printf("/= 1 %u  -D 2\r\n", opp_t1);
 800136e:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8001372:	4619      	mov	r1, r3
 8001374:	486c      	ldr	r0, [pc, #432]	@ (8001528 <main+0x928>)
 8001376:	f00e f98b 	bl	800f690 <iprintf>

  opp_t1 = 4%3;
 800137a:	2301      	movs	r3, #1
 800137c:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
  printf("4%%3 %u\r\n", opp_t1);
 8001380:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8001384:	4619      	mov	r1, r3
 8001386:	4869      	ldr	r0, [pc, #420]	@ (800152c <main+0x92c>)
 8001388:	f00e f982 	bl	800f690 <iprintf>
  //i += (j+=k)




  opp_t1 = 55;
 800138c:	2337      	movs	r3, #55	@ 0x37
 800138e:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
  printf(" %5u\r\n", opp_t1);
 8001392:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8001396:	4619      	mov	r1, r3
 8001398:	4865      	ldr	r0, [pc, #404]	@ (8001530 <main+0x930>)
 800139a:	f00e f979 	bl	800f690 <iprintf>
  printf(" %-5u\r\n", opp_t1);
 800139e:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 80013a2:	4619      	mov	r1, r3
 80013a4:	4863      	ldr	r0, [pc, #396]	@ (8001534 <main+0x934>)
 80013a6:	f00e f973 	bl	800f690 <iprintf>

  uint16_t opp_t3 = 14555;
 80013aa:	f643 03db 	movw	r3, #14555	@ 0x38db
 80013ae:	f8a7 3120 	strh.w	r3, [r7, #288]	@ 0x120
  printf(" %8u\r\n", opp_t3);
 80013b2:	f8b7 3120 	ldrh.w	r3, [r7, #288]	@ 0x120
 80013b6:	4619      	mov	r1, r3
 80013b8:	485f      	ldr	r0, [pc, #380]	@ (8001538 <main+0x938>)
 80013ba:	f00e f969 	bl	800f690 <iprintf>
  printf(" %-8u\r\n", opp_t3);
 80013be:	f8b7 3120 	ldrh.w	r3, [r7, #288]	@ 0x120
 80013c2:	4619      	mov	r1, r3
 80013c4:	485d      	ldr	r0, [pc, #372]	@ (800153c <main+0x93c>)
 80013c6:	f00e f963 	bl	800f690 <iprintf>

  printf("x %u\r\n", opp_t1);
 80013ca:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 80013ce:	4619      	mov	r1, r3
 80013d0:	485b      	ldr	r0, [pc, #364]	@ (8001540 <main+0x940>)
 80013d2:	f00e f95d 	bl	800f690 <iprintf>
  printf("++x %u\r\n", ++opp_t1);
 80013d6:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 80013da:	3301      	adds	r3, #1
 80013dc:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
 80013e0:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 80013e4:	4619      	mov	r1, r3
 80013e6:	4857      	ldr	r0, [pc, #348]	@ (8001544 <main+0x944>)
 80013e8:	f00e f952 	bl	800f690 <iprintf>
  printf("x %u\r\n", opp_t1);
 80013ec:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 80013f0:	4619      	mov	r1, r3
 80013f2:	4853      	ldr	r0, [pc, #332]	@ (8001540 <main+0x940>)
 80013f4:	f00e f94c 	bl	800f690 <iprintf>

  opp_t1 = 55;
 80013f8:	2337      	movs	r3, #55	@ 0x37
 80013fa:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
  printf("x %u\r\n", opp_t1);
 80013fe:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8001402:	4619      	mov	r1, r3
 8001404:	484e      	ldr	r0, [pc, #312]	@ (8001540 <main+0x940>)
 8001406:	f00e f943 	bl	800f690 <iprintf>
  printf("x++ %u\r\n", opp_t1++);
 800140a:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 800140e:	1c5a      	adds	r2, r3, #1
 8001410:	f887 2123 	strb.w	r2, [r7, #291]	@ 0x123
 8001414:	4619      	mov	r1, r3
 8001416:	484c      	ldr	r0, [pc, #304]	@ (8001548 <main+0x948>)
 8001418:	f00e f93a 	bl	800f690 <iprintf>
  printf("x %u\r\n", opp_t1);
 800141c:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8001420:	4619      	mov	r1, r3
 8001422:	4847      	ldr	r0, [pc, #284]	@ (8001540 <main+0x940>)
 8001424:	f00e f934 	bl	800f690 <iprintf>

  opp_t1 = 55;
 8001428:	2337      	movs	r3, #55	@ 0x37
 800142a:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
  printf("x %u\r\n", opp_t1);
 800142e:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8001432:	4619      	mov	r1, r3
 8001434:	4842      	ldr	r0, [pc, #264]	@ (8001540 <main+0x940>)
 8001436:	f00e f92b 	bl	800f690 <iprintf>
  printf("--x %u\r\n", --opp_t1);
 800143a:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 800143e:	3b01      	subs	r3, #1
 8001440:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
 8001444:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8001448:	4619      	mov	r1, r3
 800144a:	4840      	ldr	r0, [pc, #256]	@ (800154c <main+0x94c>)
 800144c:	f00e f920 	bl	800f690 <iprintf>
  printf("x %u\r\n", opp_t1);
 8001450:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8001454:	4619      	mov	r1, r3
 8001456:	483a      	ldr	r0, [pc, #232]	@ (8001540 <main+0x940>)
 8001458:	f00e f91a 	bl	800f690 <iprintf>

  opp_t1 = 55;
 800145c:	2337      	movs	r3, #55	@ 0x37
 800145e:	f887 3123 	strb.w	r3, [r7, #291]	@ 0x123
  printf("x %u\r\n", opp_t1);
 8001462:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8001466:	4619      	mov	r1, r3
 8001468:	4835      	ldr	r0, [pc, #212]	@ (8001540 <main+0x940>)
 800146a:	f00e f911 	bl	800f690 <iprintf>
  printf("x-- %u\r\n", opp_t1--);
 800146e:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8001472:	1e5a      	subs	r2, r3, #1
 8001474:	f887 2123 	strb.w	r2, [r7, #291]	@ 0x123
 8001478:	4619      	mov	r1, r3
 800147a:	4835      	ldr	r0, [pc, #212]	@ (8001550 <main+0x950>)
 800147c:	f00e f908 	bl	800f690 <iprintf>
  printf("x %u\r\n", opp_t1);
 8001480:	f897 3123 	ldrb.w	r3, [r7, #291]	@ 0x123
 8001484:	4619      	mov	r1, r3
 8001486:	482e      	ldr	r0, [pc, #184]	@ (8001540 <main+0x940>)
 8001488:	f00e f902 	bl	800f690 <iprintf>

  // i = i + 1
  //k = i + j
  //j = j + 1

  double math_t1 = 0;
 800148c:	f04f 0200 	mov.w	r2, #0
 8001490:	f04f 0300 	mov.w	r3, #0
 8001494:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
  double math_t2 = 2;
 8001498:	f04f 0200 	mov.w	r2, #0
 800149c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014a0:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
  double math_t3 = 3;
 80014a4:	f04f 0200 	mov.w	r2, #0
 80014a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001554 <main+0x954>)
 80014aa:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108


  math_t1 = pow(math_t2, math_t3);
 80014ae:	ed97 1b42 	vldr	d1, [r7, #264]	@ 0x108
 80014b2:	ed97 0b44 	vldr	d0, [r7, #272]	@ 0x110
 80014b6:	f00b ffa3 	bl	800d400 <pow>
 80014ba:	ed87 0b46 	vstr	d0, [r7, #280]	@ 0x118
  printf("math_t1 -> %f\r\n", math_t1); //8
 80014be:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80014c2:	4825      	ldr	r0, [pc, #148]	@ (8001558 <main+0x958>)
 80014c4:	f00e f8e4 	bl	800f690 <iprintf>


  float  f_a = 2.0f, f_b = 3.0f, f_res;
 80014c8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014cc:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80014d0:	4b22      	ldr	r3, [pc, #136]	@ (800155c <main+0x95c>)
 80014d2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
  double d_a = 2.0 , d_b = 3.0 , d_res;
 80014d6:	f04f 0200 	mov.w	r2, #0
 80014da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80014de:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
 80014e2:	e03d      	b.n	8001560 <main+0x960>
 80014e4:	08011a04 	.word	0x08011a04
 80014e8:	08011a14 	.word	0x08011a14
 80014ec:	08011c5c 	.word	0x08011c5c
 80014f0:	08011c64 	.word	0x08011c64
 80014f4:	08011a2c 	.word	0x08011a2c
 80014f8:	08011a44 	.word	0x08011a44
 80014fc:	08011a5c 	.word	0x08011a5c
 8001500:	08011a60 	.word	0x08011a60
 8001504:	08011a6c 	.word	0x08011a6c
 8001508:	08011a84 	.word	0x08011a84
 800150c:	08011aa0 	.word	0x08011aa0
 8001510:	08011abc 	.word	0x08011abc
 8001514:	08011ac0 	.word	0x08011ac0
 8001518:	08011ad4 	.word	0x08011ad4
 800151c:	08011adc 	.word	0x08011adc
 8001520:	08011ae8 	.word	0x08011ae8
 8001524:	08011af4 	.word	0x08011af4
 8001528:	08011b00 	.word	0x08011b00
 800152c:	08011b10 	.word	0x08011b10
 8001530:	08011b1c 	.word	0x08011b1c
 8001534:	08011b24 	.word	0x08011b24
 8001538:	08011b2c 	.word	0x08011b2c
 800153c:	08011b34 	.word	0x08011b34
 8001540:	08011b3c 	.word	0x08011b3c
 8001544:	08011b44 	.word	0x08011b44
 8001548:	08011b50 	.word	0x08011b50
 800154c:	08011b5c 	.word	0x08011b5c
 8001550:	08011b68 	.word	0x08011b68
 8001554:	40080000 	.word	0x40080000
 8001558:	08011b74 	.word	0x08011b74
 800155c:	40400000 	.word	0x40400000
 8001560:	f04f 0200 	mov.w	r2, #0
 8001564:	4b81      	ldr	r3, [pc, #516]	@ (800176c <main+0xb6c>)
 8001566:	e9c7 233c 	strd	r2, r3, [r7, #240]	@ 0xf0

  // pow
  f_res = powf(f_a, f_b);
 800156a:	edd7 0a40 	vldr	s1, [r7, #256]	@ 0x100
 800156e:	ed97 0a41 	vldr	s0, [r7, #260]	@ 0x104
 8001572:	f00c f9ad 	bl	800d8d0 <powf>
 8001576:	ed87 0a3b 	vstr	s0, [r7, #236]	@ 0xec
  d_res = pow(d_a, d_b);
 800157a:	ed97 1b3c 	vldr	d1, [r7, #240]	@ 0xf0
 800157e:	ed97 0b3e 	vldr	d0, [r7, #248]	@ 0xf8
 8001582:	f00b ff3d 	bl	800d400 <pow>
 8001586:	ed87 0b38 	vstr	d0, [r7, #224]	@ 0xe0
  printf("powf(float)  = %.7f\r\n", f_res);
 800158a:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 800158e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001592:	ec53 2b17 	vmov	r2, r3, d7
 8001596:	4876      	ldr	r0, [pc, #472]	@ (8001770 <main+0xb70>)
 8001598:	f00e f87a 	bl	800f690 <iprintf>
  printf("pow(double) = %.15f\r\n", d_res);
 800159c:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 80015a0:	4874      	ldr	r0, [pc, #464]	@ (8001774 <main+0xb74>)
 80015a2:	f00e f875 	bl	800f690 <iprintf>

  // sqrt
  f_res = sqrtf(f_a);
 80015a6:	ed97 0a41 	vldr	s0, [r7, #260]	@ 0x104
 80015aa:	f00b fed5 	bl	800d358 <sqrtf>
 80015ae:	ed87 0a3b 	vstr	s0, [r7, #236]	@ 0xec
  d_res = sqrt(d_a);
 80015b2:	ed97 0b3e 	vldr	d0, [r7, #248]	@ 0xf8
 80015b6:	f00b fe17 	bl	800d1e8 <sqrt>
 80015ba:	ed87 0b38 	vstr	d0, [r7, #224]	@ 0xe0
  printf("sqrtf(float)  = %.7f\r\n", f_res);
 80015be:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 80015c2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80015c6:	ec53 2b17 	vmov	r2, r3, d7
 80015ca:	486b      	ldr	r0, [pc, #428]	@ (8001778 <main+0xb78>)
 80015cc:	f00e f860 	bl	800f690 <iprintf>
  printf("sqrt(double) = %.15f\r\n", d_res);
 80015d0:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 80015d4:	4869      	ldr	r0, [pc, #420]	@ (800177c <main+0xb7c>)
 80015d6:	f00e f85b 	bl	800f690 <iprintf>

  // sin
  f_a = 2.0f;
 80015da:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015de:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  d_a = 2.0;
 80015e2:	f04f 0200 	mov.w	r2, #0
 80015e6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80015ea:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
  f_res = sinf(f_a);
 80015ee:	ed97 0a41 	vldr	s0, [r7, #260]	@ 0x104
 80015f2:	f00c faf9 	bl	800dbe8 <sinf>
 80015f6:	ed87 0a3b 	vstr	s0, [r7, #236]	@ 0xec
  d_res = sin(d_a);
 80015fa:	ed97 0b3e 	vldr	d0, [r7, #248]	@ 0xf8
 80015fe:	f00b fe5f 	bl	800d2c0 <sin>
 8001602:	ed87 0b38 	vstr	d0, [r7, #224]	@ 0xe0
  printf("sinf(float)  = %.7f\r\n", f_res);
 8001606:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 800160a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800160e:	ec53 2b17 	vmov	r2, r3, d7
 8001612:	485b      	ldr	r0, [pc, #364]	@ (8001780 <main+0xb80>)
 8001614:	f00e f83c 	bl	800f690 <iprintf>
  printf("sin(double) = %.15f\r\n", d_res);
 8001618:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 800161c:	4859      	ldr	r0, [pc, #356]	@ (8001784 <main+0xb84>)
 800161e:	f00e f837 	bl	800f690 <iprintf>

  // cos
  f_a = 2.0f;
 8001622:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001626:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
  d_a = 2.0;
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001632:	e9c7 233e 	strd	r2, r3, [r7, #248]	@ 0xf8
  f_res = cosf(f_a);
 8001636:	ed97 0a41 	vldr	s0, [r7, #260]	@ 0x104
 800163a:	f00c fb99 	bl	800dd70 <cosf>
 800163e:	ed87 0a3b 	vstr	s0, [r7, #236]	@ 0xec
  d_res = cos(d_a);
 8001642:	ed97 0b3e 	vldr	d0, [r7, #248]	@ 0xf8
 8001646:	f00b fdef 	bl	800d228 <cos>
 800164a:	ed87 0b38 	vstr	d0, [r7, #224]	@ 0xe0
  printf("cosf(float)  = %.7f\r\n", f_res);
 800164e:	edd7 7a3b 	vldr	s15, [r7, #236]	@ 0xec
 8001652:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8001656:	ec53 2b17 	vmov	r2, r3, d7
 800165a:	484b      	ldr	r0, [pc, #300]	@ (8001788 <main+0xb88>)
 800165c:	f00e f818 	bl	800f690 <iprintf>
  printf("cos(double) = %.15f\r\n", d_res);
 8001660:	e9d7 2338 	ldrd	r2, r3, [r7, #224]	@ 0xe0
 8001664:	4849      	ldr	r0, [pc, #292]	@ (800178c <main+0xb8c>)
 8001666:	f00e f813 	bl	800f690 <iprintf>





  HAL_UARTEx_ReceiveToIdle_DMA(&huart3, RxBuf, RxBuf_SIZE);
 800166a:	220a      	movs	r2, #10
 800166c:	4948      	ldr	r1, [pc, #288]	@ (8001790 <main+0xb90>)
 800166e:	4849      	ldr	r0, [pc, #292]	@ (8001794 <main+0xb94>)
 8001670:	f00b fd17 	bl	800d0a2 <HAL_UARTEx_ReceiveToIdle_DMA>


  HAL_ADCEx_Calibration_Start(&hadc3,ADC_CALIB_OFFSET_LINEARITY,ADC_SINGLE_ENDED);
 8001674:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8001678:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800167c:	4846      	ldr	r0, [pc, #280]	@ (8001798 <main+0xb98>)
 800167e:	f002 fe75 	bl	800436c <HAL_ADCEx_Calibration_Start>


  HAL_ADC_Start_DMA(&hadc3, (uint32_t *)adcBuf, ADCBUFSIZE);
 8001682:	2280      	movs	r2, #128	@ 0x80
 8001684:	4945      	ldr	r1, [pc, #276]	@ (800179c <main+0xb9c>)
 8001686:	4844      	ldr	r0, [pc, #272]	@ (8001798 <main+0xb98>)
 8001688:	f001 fc8a 	bl	8002fa0 <HAL_ADC_Start_DMA>



  resultat = additionner_deux_nombres(10, 5);
 800168c:	2105      	movs	r1, #5
 800168e:	200a      	movs	r0, #10
 8001690:	f7ff faa6 	bl	8000be0 <additionner_deux_nombres>
 8001694:	4603      	mov	r3, r0
 8001696:	4a42      	ldr	r2, [pc, #264]	@ (80017a0 <main+0xba0>)
 8001698:	6013      	str	r3, [r2, #0]

  memset (TxBuf, 0x1, 1024);
 800169a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800169e:	2101      	movs	r1, #1
 80016a0:	4840      	ldr	r0, [pc, #256]	@ (80017a4 <main+0xba4>)
 80016a2:	f00e f93d 	bl	800f920 <memset>
  while (1)
  {



	  now = HAL_GetTick();
 80016a6:	f000 fcd9 	bl	800205c <HAL_GetTick>
 80016aa:	4603      	mov	r3, r0
 80016ac:	4a3e      	ldr	r2, [pc, #248]	@ (80017a8 <main+0xba8>)
 80016ae:	6013      	str	r3, [r2, #0]
	  if (now >= next_blink)
 80016b0:	4b3d      	ldr	r3, [pc, #244]	@ (80017a8 <main+0xba8>)
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	4b3d      	ldr	r3, [pc, #244]	@ (80017ac <main+0xbac>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d30f      	bcc.n	80016dc <main+0xadc>
	  {
		  //printf("Toggling GREEN LED \r\n");
		  HAL_GPIO_TogglePin(LDG_GPIO_Port, LDG_Pin);
 80016bc:	2101      	movs	r1, #1
 80016be:	483c      	ldr	r0, [pc, #240]	@ (80017b0 <main+0xbb0>)
 80016c0:	f005 ffff 	bl	80076c2 <HAL_GPIO_TogglePin>

		  next_blink = now + blink_delays[blink_delay];
 80016c4:	4b3b      	ldr	r3, [pc, #236]	@ (80017b4 <main+0xbb4>)
 80016c6:	781b      	ldrb	r3, [r3, #0]
 80016c8:	461a      	mov	r2, r3
 80016ca:	4b3b      	ldr	r3, [pc, #236]	@ (80017b8 <main+0xbb8>)
 80016cc:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80016d0:	461a      	mov	r2, r3
 80016d2:	4b35      	ldr	r3, [pc, #212]	@ (80017a8 <main+0xba8>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4413      	add	r3, r2
 80016d8:	4a34      	ldr	r2, [pc, #208]	@ (80017ac <main+0xbac>)
 80016da:	6013      	str	r3, [r2, #0]
	  }

	  if (now >= next_tick)
 80016dc:	4b32      	ldr	r3, [pc, #200]	@ (80017a8 <main+0xba8>)
 80016de:	681a      	ldr	r2, [r3, #0]
 80016e0:	4b36      	ldr	r3, [pc, #216]	@ (80017bc <main+0xbbc>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	f0c0 811e 	bcc.w	8001926 <main+0xd26>
	  {
		  //C/C++ Build > Settings > Tool Settings > MCU GCC Linker > Miscellaneous  -u _printf_float
		  //printf("Tick %lu (loop count = %lu cb = %lu)  vdda = %0.2f temp = %0.2f \r\n", now / 1000, loop_cnt, cb, vdda, temp); pas bon

		  //printf("Tick %lu (loop count = %lu\r\n", now / 1000, loop_cnt);
		  if (adcFlag!=RESET)
 80016ea:	4b35      	ldr	r3, [pc, #212]	@ (80017c0 <main+0xbc0>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	f000 8110 	beq.w	8001914 <main+0xd14>
		  {
			  adcFlag = RESET;
 80016f4:	4b32      	ldr	r3, [pc, #200]	@ (80017c0 <main+0xbc0>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	601a      	str	r2, [r3, #0]

	  		  HAL_ADC_Stop_DMA(&hadc3);
 80016fa:	4827      	ldr	r0, [pc, #156]	@ (8001798 <main+0xb98>)
 80016fc:	f001 fd14 	bl	8003128 <HAL_ADC_Stop_DMA>

	  		  /* InterQuartile Mean */

	  		  for(k=0;k<CHNB;k++)
 8001700:	4b30      	ldr	r3, [pc, #192]	@ (80017c4 <main+0xbc4>)
 8001702:	2200      	movs	r2, #0
 8001704:	801a      	strh	r2, [r3, #0]
 8001706:	e098      	b.n	800183a <main+0xc3a>

	  		  {

	  		    j = 0; adcChAvg[k] = 0;
 8001708:	4b2f      	ldr	r3, [pc, #188]	@ (80017c8 <main+0xbc8>)
 800170a:	2200      	movs	r2, #0
 800170c:	801a      	strh	r2, [r3, #0]
 800170e:	4b2d      	ldr	r3, [pc, #180]	@ (80017c4 <main+0xbc4>)
 8001710:	881b      	ldrh	r3, [r3, #0]
 8001712:	4619      	mov	r1, r3
 8001714:	4b2d      	ldr	r3, [pc, #180]	@ (80017cc <main+0xbcc>)
 8001716:	2200      	movs	r2, #0
 8001718:	f843 2021 	str.w	r2, [r3, r1, lsl #2]

	  		    for(i=k;i<ADCBUFSIZE;i+=CHNB)
 800171c:	4b29      	ldr	r3, [pc, #164]	@ (80017c4 <main+0xbc4>)
 800171e:	881a      	ldrh	r2, [r3, #0]
 8001720:	4b2b      	ldr	r3, [pc, #172]	@ (80017d0 <main+0xbd0>)
 8001722:	801a      	strh	r2, [r3, #0]
 8001724:	e016      	b.n	8001754 <main+0xb54>

	  		    {

	  		      adcChBuf[j++] = adcBuf[i];
 8001726:	4b2a      	ldr	r3, [pc, #168]	@ (80017d0 <main+0xbd0>)
 8001728:	881b      	ldrh	r3, [r3, #0]
 800172a:	4619      	mov	r1, r3
 800172c:	4b26      	ldr	r3, [pc, #152]	@ (80017c8 <main+0xbc8>)
 800172e:	881b      	ldrh	r3, [r3, #0]
 8001730:	1c5a      	adds	r2, r3, #1
 8001732:	b290      	uxth	r0, r2
 8001734:	4a24      	ldr	r2, [pc, #144]	@ (80017c8 <main+0xbc8>)
 8001736:	8010      	strh	r0, [r2, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b18      	ldr	r3, [pc, #96]	@ (800179c <main+0xb9c>)
 800173c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001740:	b299      	uxth	r1, r3
 8001742:	4b24      	ldr	r3, [pc, #144]	@ (80017d4 <main+0xbd4>)
 8001744:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  		    for(i=k;i<ADCBUFSIZE;i+=CHNB)
 8001748:	4b21      	ldr	r3, [pc, #132]	@ (80017d0 <main+0xbd0>)
 800174a:	881b      	ldrh	r3, [r3, #0]
 800174c:	3302      	adds	r3, #2
 800174e:	b29a      	uxth	r2, r3
 8001750:	4b1f      	ldr	r3, [pc, #124]	@ (80017d0 <main+0xbd0>)
 8001752:	801a      	strh	r2, [r3, #0]
 8001754:	4b1e      	ldr	r3, [pc, #120]	@ (80017d0 <main+0xbd0>)
 8001756:	881b      	ldrh	r3, [r3, #0]
 8001758:	2b7f      	cmp	r3, #127	@ 0x7f
 800175a:	d9e4      	bls.n	8001726 <main+0xb26>

	  		    }

	  		    bubblesort(adcChBuf,BUFSIZE);
 800175c:	2140      	movs	r1, #64	@ 0x40
 800175e:	481d      	ldr	r0, [pc, #116]	@ (80017d4 <main+0xbd4>)
 8001760:	f000 fc88 	bl	8002074 <bubblesort>

	  		    for (i=QBUFSIZE;i<(BUFSIZE-QBUFSIZE);i++)
 8001764:	4b1a      	ldr	r3, [pc, #104]	@ (80017d0 <main+0xbd0>)
 8001766:	2210      	movs	r2, #16
 8001768:	801a      	strh	r2, [r3, #0]
 800176a:	e04f      	b.n	800180c <main+0xc0c>
 800176c:	40080000 	.word	0x40080000
 8001770:	08011b84 	.word	0x08011b84
 8001774:	08011b9c 	.word	0x08011b9c
 8001778:	08011bb4 	.word	0x08011bb4
 800177c:	08011bcc 	.word	0x08011bcc
 8001780:	08011be4 	.word	0x08011be4
 8001784:	08011bfc 	.word	0x08011bfc
 8001788:	08011c14 	.word	0x08011c14
 800178c:	08011c2c 	.word	0x08011c2c
 8001790:	24000804 	.word	0x24000804
 8001794:	240006f4 	.word	0x240006f4
 8001798:	24000618 	.word	0x24000618
 800179c:	38000200 	.word	0x38000200
 80017a0:	240008d4 	.word	0x240008d4
 80017a4:	240001fc 	.word	0x240001fc
 80017a8:	24000830 	.word	0x24000830
 80017ac:	24000020 	.word	0x24000020
 80017b0:	58020400 	.word	0x58020400
 80017b4:	2400082c 	.word	0x2400082c
 80017b8:	24000018 	.word	0x24000018
 80017bc:	24000024 	.word	0x24000024
 80017c0:	240008c4 	.word	0x240008c4
 80017c4:	240008d0 	.word	0x240008d0
 80017c8:	240008ce 	.word	0x240008ce
 80017cc:	240008bc 	.word	0x240008bc
 80017d0:	240008cc 	.word	0x240008cc
 80017d4:	2400083c 	.word	0x2400083c

	  		    {

	  		      adcChAvg[k] += adcChBuf[i];
 80017d8:	4b60      	ldr	r3, [pc, #384]	@ (800195c <main+0xd5c>)
 80017da:	881b      	ldrh	r3, [r3, #0]
 80017dc:	461a      	mov	r2, r3
 80017de:	4b60      	ldr	r3, [pc, #384]	@ (8001960 <main+0xd60>)
 80017e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e4:	4a5f      	ldr	r2, [pc, #380]	@ (8001964 <main+0xd64>)
 80017e6:	8812      	ldrh	r2, [r2, #0]
 80017e8:	4611      	mov	r1, r2
 80017ea:	4a5f      	ldr	r2, [pc, #380]	@ (8001968 <main+0xd68>)
 80017ec:	f832 2011 	ldrh.w	r2, [r2, r1, lsl #1]
 80017f0:	4610      	mov	r0, r2
 80017f2:	4a5a      	ldr	r2, [pc, #360]	@ (800195c <main+0xd5c>)
 80017f4:	8812      	ldrh	r2, [r2, #0]
 80017f6:	4611      	mov	r1, r2
 80017f8:	4403      	add	r3, r0
 80017fa:	4a59      	ldr	r2, [pc, #356]	@ (8001960 <main+0xd60>)
 80017fc:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  		    for (i=QBUFSIZE;i<(BUFSIZE-QBUFSIZE);i++)
 8001800:	4b58      	ldr	r3, [pc, #352]	@ (8001964 <main+0xd64>)
 8001802:	881b      	ldrh	r3, [r3, #0]
 8001804:	3301      	adds	r3, #1
 8001806:	b29a      	uxth	r2, r3
 8001808:	4b56      	ldr	r3, [pc, #344]	@ (8001964 <main+0xd64>)
 800180a:	801a      	strh	r2, [r3, #0]
 800180c:	4b55      	ldr	r3, [pc, #340]	@ (8001964 <main+0xd64>)
 800180e:	881b      	ldrh	r3, [r3, #0]
 8001810:	2b2f      	cmp	r3, #47	@ 0x2f
 8001812:	d9e1      	bls.n	80017d8 <main+0xbd8>

	  		    }

	  		    adcChAvg[k] = adcChAvg[k] / HBUFSIZE;
 8001814:	4b51      	ldr	r3, [pc, #324]	@ (800195c <main+0xd5c>)
 8001816:	881b      	ldrh	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	4b51      	ldr	r3, [pc, #324]	@ (8001960 <main+0xd60>)
 800181c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001820:	4a4e      	ldr	r2, [pc, #312]	@ (800195c <main+0xd5c>)
 8001822:	8812      	ldrh	r2, [r2, #0]
 8001824:	4611      	mov	r1, r2
 8001826:	095b      	lsrs	r3, r3, #5
 8001828:	4a4d      	ldr	r2, [pc, #308]	@ (8001960 <main+0xd60>)
 800182a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
	  		  for(k=0;k<CHNB;k++)
 800182e:	4b4b      	ldr	r3, [pc, #300]	@ (800195c <main+0xd5c>)
 8001830:	881b      	ldrh	r3, [r3, #0]
 8001832:	3301      	adds	r3, #1
 8001834:	b29a      	uxth	r2, r3
 8001836:	4b49      	ldr	r3, [pc, #292]	@ (800195c <main+0xd5c>)
 8001838:	801a      	strh	r2, [r3, #0]
 800183a:	4b48      	ldr	r3, [pc, #288]	@ (800195c <main+0xd5c>)
 800183c:	881b      	ldrh	r3, [r3, #0]
 800183e:	2b01      	cmp	r3, #1
 8001840:	f67f af62 	bls.w	8001708 <main+0xb08>
 8001844:	4b49      	ldr	r3, [pc, #292]	@ (800196c <main+0xd6c>)
 8001846:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800184a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800184e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8001852:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001856:	2b00      	cmp	r3, #0
 8001858:	dd28      	ble.n	80018ac <main+0xcac>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800185a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800185e:	f003 021f 	and.w	r2, r3, #31
 8001862:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8001866:	4413      	add	r3, r2
 8001868:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800186c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8001870:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  __ASM volatile ("dsb 0xF":::"memory");
 8001874:	f3bf 8f4f 	dsb	sy
}
 8001878:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800187a:	4a3d      	ldr	r2, [pc, #244]	@ (8001970 <main+0xd70>)
 800187c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001880:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8001884:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8001888:	3320      	adds	r3, #32
 800188a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800188e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8001892:	3b20      	subs	r3, #32
 8001894:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
      } while ( op_size > 0 );
 8001898:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800189c:	2b00      	cmp	r3, #0
 800189e:	dcec      	bgt.n	800187a <main+0xc7a>
  __ASM volatile ("dsb 0xF":::"memory");
 80018a0:	f3bf 8f4f 	dsb	sy
}
 80018a4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80018a6:	f3bf 8f6f 	isb	sy
}
 80018aa:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80018ac:	bf00      	nop
	  		  }


	  		  SCB_InvalidateDCache_by_Addr((uint32_t*)adcBuf, sizeof(adcBuf));

	  		  vDDA = __LL_ADC_CALC_VREFANALOG_VOLTAGE(adcChAvg[0],LL_ADC_RESOLUTION_16B);
 80018ae:	4b31      	ldr	r3, [pc, #196]	@ (8001974 <main+0xd74>)
 80018b0:	881b      	ldrh	r3, [r3, #0]
 80018b2:	461a      	mov	r2, r3
 80018b4:	f640 43e4 	movw	r3, #3300	@ 0xce4
 80018b8:	fb03 f202 	mul.w	r2, r3, r2
 80018bc:	4b28      	ldr	r3, [pc, #160]	@ (8001960 <main+0xd60>)
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80018c4:	b29a      	uxth	r2, r3
 80018c6:	4b2c      	ldr	r3, [pc, #176]	@ (8001978 <main+0xd78>)
 80018c8:	801a      	strh	r2, [r3, #0]

	  		  temperatureDegC =   __LL_ADC_CALC_TEMPERATURE(vDDA,adcChAvg[1],LL_ADC_RESOLUTION_16B);
 80018ca:	4b25      	ldr	r3, [pc, #148]	@ (8001960 <main+0xd60>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	4a2a      	ldr	r2, [pc, #168]	@ (8001978 <main+0xd78>)
 80018d0:	8812      	ldrh	r2, [r2, #0]
 80018d2:	fb02 f303 	mul.w	r3, r2, r3
 80018d6:	089b      	lsrs	r3, r3, #2
 80018d8:	4a28      	ldr	r2, [pc, #160]	@ (800197c <main+0xd7c>)
 80018da:	fba2 2303 	umull	r2, r3, r2, r3
 80018de:	095b      	lsrs	r3, r3, #5
 80018e0:	461a      	mov	r2, r3
 80018e2:	4b27      	ldr	r3, [pc, #156]	@ (8001980 <main+0xd80>)
 80018e4:	881b      	ldrh	r3, [r3, #0]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2264      	movs	r2, #100	@ 0x64
 80018ea:	fb03 f202 	mul.w	r2, r3, r2
 80018ee:	4b25      	ldr	r3, [pc, #148]	@ (8001984 <main+0xd84>)
 80018f0:	881b      	ldrh	r3, [r3, #0]
 80018f2:	4619      	mov	r1, r3
 80018f4:	4b22      	ldr	r3, [pc, #136]	@ (8001980 <main+0xd80>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	1acb      	subs	r3, r1, r3
 80018fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80018fe:	b29b      	uxth	r3, r3
 8001900:	331e      	adds	r3, #30
 8001902:	b29b      	uxth	r3, r3
 8001904:	b21a      	sxth	r2, r3
 8001906:	4b20      	ldr	r3, [pc, #128]	@ (8001988 <main+0xd88>)
 8001908:	801a      	strh	r2, [r3, #0]

	  		  //printf("%dmV | %dDegC\r\n",(int)vDDA,(int)temperatureDegC);

	  		  HAL_ADC_Start_DMA(&hadc3,(uint32_t*)adcBuf,ADCBUFSIZE);
 800190a:	2280      	movs	r2, #128	@ 0x80
 800190c:	4917      	ldr	r1, [pc, #92]	@ (800196c <main+0xd6c>)
 800190e:	481f      	ldr	r0, [pc, #124]	@ (800198c <main+0xd8c>)
 8001910:	f001 fb46 	bl	8002fa0 <HAL_ADC_Start_DMA>

	  		}

	  		  loop_cnt = 0;
 8001914:	4b1e      	ldr	r3, [pc, #120]	@ (8001990 <main+0xd90>)
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
	  		  next_tick = now + 1000;
 800191a:	4b1e      	ldr	r3, [pc, #120]	@ (8001994 <main+0xd94>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001922:	4a1d      	ldr	r2, [pc, #116]	@ (8001998 <main+0xd98>)
 8001924:	6013      	str	r3, [r2, #0]


	  	  }
	  	  if (ButtonState)
 8001926:	4b1d      	ldr	r3, [pc, #116]	@ (800199c <main+0xd9c>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d00f      	beq.n	800194e <main+0xd4e>
	  	  {
	  		  //printf("Button Press \r\n");

	  		  ++blink_delay;
 800192e:	4b1c      	ldr	r3, [pc, #112]	@ (80019a0 <main+0xda0>)
 8001930:	781b      	ldrb	r3, [r3, #0]
 8001932:	3301      	adds	r3, #1
 8001934:	b2da      	uxtb	r2, r3
 8001936:	4b1a      	ldr	r3, [pc, #104]	@ (80019a0 <main+0xda0>)
 8001938:	701a      	strb	r2, [r3, #0]

	  		  if(blink_delay >= sizeof(blink_delays) / sizeof(blink_delays[0]))
 800193a:	4b19      	ldr	r3, [pc, #100]	@ (80019a0 <main+0xda0>)
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	2b02      	cmp	r3, #2
 8001940:	d902      	bls.n	8001948 <main+0xd48>
	  		  {
	  			  blink_delay = 0;
 8001942:	4b17      	ldr	r3, [pc, #92]	@ (80019a0 <main+0xda0>)
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
	  		  }
	  		  ButtonState = BUTTON_RELEASED;
 8001948:	4b14      	ldr	r3, [pc, #80]	@ (800199c <main+0xd9c>)
 800194a:	2200      	movs	r2, #0
 800194c:	601a      	str	r2, [r3, #0]
	  	  }

	  	  ++loop_cnt;
 800194e:	4b10      	ldr	r3, [pc, #64]	@ (8001990 <main+0xd90>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	3301      	adds	r3, #1
 8001954:	4a0e      	ldr	r2, [pc, #56]	@ (8001990 <main+0xd90>)
 8001956:	6013      	str	r3, [r2, #0]
	  now = HAL_GetTick();
 8001958:	e6a5      	b.n	80016a6 <main+0xaa6>
 800195a:	bf00      	nop
 800195c:	240008d0 	.word	0x240008d0
 8001960:	240008bc 	.word	0x240008bc
 8001964:	240008cc 	.word	0x240008cc
 8001968:	2400083c 	.word	0x2400083c
 800196c:	38000200 	.word	0x38000200
 8001970:	e000ed00 	.word	0xe000ed00
 8001974:	1ff1e860 	.word	0x1ff1e860
 8001978:	240008c8 	.word	0x240008c8
 800197c:	09ee009f 	.word	0x09ee009f
 8001980:	1ff1e820 	.word	0x1ff1e820
 8001984:	1ff1e840 	.word	0x1ff1e840
 8001988:	240008ca 	.word	0x240008ca
 800198c:	24000618 	.word	0x24000618
 8001990:	24000834 	.word	0x24000834
 8001994:	24000830 	.word	0x24000830
 8001998:	24000024 	.word	0x24000024
 800199c:	24000838 	.word	0x24000838
 80019a0:	2400082c 	.word	0x2400082c

080019a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b09c      	sub	sp, #112	@ 0x70
 80019a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ae:	224c      	movs	r2, #76	@ 0x4c
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f00d ffb4 	bl	800f920 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	2220      	movs	r2, #32
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f00d ffae 	bl	800f920 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80019c4:	2004      	movs	r0, #4
 80019c6:	f005 fedf 	bl	8007788 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019ca:	2300      	movs	r3, #0
 80019cc:	603b      	str	r3, [r7, #0]
 80019ce:	4b31      	ldr	r3, [pc, #196]	@ (8001a94 <SystemClock_Config+0xf0>)
 80019d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d2:	4a30      	ldr	r2, [pc, #192]	@ (8001a94 <SystemClock_Config+0xf0>)
 80019d4:	f023 0301 	bic.w	r3, r3, #1
 80019d8:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80019da:	4b2e      	ldr	r3, [pc, #184]	@ (8001a94 <SystemClock_Config+0xf0>)
 80019dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019de:	f003 0301 	and.w	r3, r3, #1
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	4b2c      	ldr	r3, [pc, #176]	@ (8001a98 <SystemClock_Config+0xf4>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a2b      	ldr	r2, [pc, #172]	@ (8001a98 <SystemClock_Config+0xf4>)
 80019ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b29      	ldr	r3, [pc, #164]	@ (8001a98 <SystemClock_Config+0xf4>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80019fc:	bf00      	nop
 80019fe:	4b26      	ldr	r3, [pc, #152]	@ (8001a98 <SystemClock_Config+0xf4>)
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a06:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a0a:	d1f8      	bne.n	80019fe <SystemClock_Config+0x5a>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a0c:	2302      	movs	r3, #2
 8001a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8001a10:	2301      	movs	r3, #1
 8001a12:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a14:	2340      	movs	r3, #64	@ 0x40
 8001a16:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a20:	2304      	movs	r3, #4
 8001a22:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001a24:	2332      	movs	r3, #50	@ 0x32
 8001a26:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8001a2c:	2305      	movs	r3, #5
 8001a2e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001a30:	2302      	movs	r3, #2
 8001a32:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8001a34:	230c      	movs	r3, #12
 8001a36:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a40:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a44:	4618      	mov	r0, r3
 8001a46:	f005 fef9 	bl	800783c <HAL_RCC_OscConfig>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d001      	beq.n	8001a54 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8001a50:	f000 fb68 	bl	8002124 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a54:	233f      	movs	r3, #63	@ 0x3f
 8001a56:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8001a60:	2308      	movs	r3, #8
 8001a62:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8001a64:	2340      	movs	r3, #64	@ 0x40
 8001a66:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8001a68:	2340      	movs	r3, #64	@ 0x40
 8001a6a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8001a6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a70:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8001a72:	2340      	movs	r3, #64	@ 0x40
 8001a74:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	2102      	movs	r1, #2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f006 fb38 	bl	80080f0 <HAL_RCC_ClockConfig>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001a86:	f000 fb4d 	bl	8002124 <Error_Handler>
  }
}
 8001a8a:	bf00      	nop
 8001a8c:	3770      	adds	r7, #112	@ 0x70
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	58000400 	.word	0x58000400
 8001a98:	58024800 	.word	0x58024800

08001a9c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b088      	sub	sp, #32
 8001aa0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001aa2:	1d3b      	adds	r3, r7, #4
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	601a      	str	r2, [r3, #0]
 8001aa8:	605a      	str	r2, [r3, #4]
 8001aaa:	609a      	str	r2, [r3, #8]
 8001aac:	60da      	str	r2, [r3, #12]
 8001aae:	611a      	str	r2, [r3, #16]
 8001ab0:	615a      	str	r2, [r3, #20]
 8001ab2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8001ab4:	4b32      	ldr	r3, [pc, #200]	@ (8001b80 <MX_ADC3_Init+0xe4>)
 8001ab6:	4a33      	ldr	r2, [pc, #204]	@ (8001b84 <MX_ADC3_Init+0xe8>)
 8001ab8:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV256;
 8001aba:	4b31      	ldr	r3, [pc, #196]	@ (8001b80 <MX_ADC3_Init+0xe4>)
 8001abc:	f44f 1230 	mov.w	r2, #2883584	@ 0x2c0000
 8001ac0:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8001ac2:	4b2f      	ldr	r3, [pc, #188]	@ (8001b80 <MX_ADC3_Init+0xe4>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8001ac8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b80 <MX_ADC3_Init+0xe4>)
 8001aca:	2201      	movs	r2, #1
 8001acc:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ace:	4b2c      	ldr	r3, [pc, #176]	@ (8001b80 <MX_ADC3_Init+0xe4>)
 8001ad0:	2204      	movs	r2, #4
 8001ad2:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8001ad4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b80 <MX_ADC3_Init+0xe4>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001ada:	4b29      	ldr	r3, [pc, #164]	@ (8001b80 <MX_ADC3_Init+0xe4>)
 8001adc:	2201      	movs	r2, #1
 8001ade:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 2;
 8001ae0:	4b27      	ldr	r3, [pc, #156]	@ (8001b80 <MX_ADC3_Init+0xe4>)
 8001ae2:	2202      	movs	r2, #2
 8001ae4:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001ae6:	4b26      	ldr	r3, [pc, #152]	@ (8001b80 <MX_ADC3_Init+0xe4>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001aec:	4b24      	ldr	r3, [pc, #144]	@ (8001b80 <MX_ADC3_Init+0xe4>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001af2:	4b23      	ldr	r3, [pc, #140]	@ (8001b80 <MX_ADC3_Init+0xe4>)
 8001af4:	2200      	movs	r2, #0
 8001af6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DMA_CIRCULAR;
 8001af8:	4b21      	ldr	r3, [pc, #132]	@ (8001b80 <MX_ADC3_Init+0xe4>)
 8001afa:	2203      	movs	r2, #3
 8001afc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001afe:	4b20      	ldr	r3, [pc, #128]	@ (8001b80 <MX_ADC3_Init+0xe4>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001b04:	4b1e      	ldr	r3, [pc, #120]	@ (8001b80 <MX_ADC3_Init+0xe4>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001b0a:	4b1d      	ldr	r3, [pc, #116]	@ (8001b80 <MX_ADC3_Init+0xe4>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc3.Init.Oversampling.Ratio = 1;
 8001b12:	4b1b      	ldr	r3, [pc, #108]	@ (8001b80 <MX_ADC3_Init+0xe4>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001b18:	4819      	ldr	r0, [pc, #100]	@ (8001b80 <MX_ADC3_Init+0xe4>)
 8001b1a:	f001 f89f 	bl	8002c5c <HAL_ADC_Init>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d001      	beq.n	8001b28 <MX_ADC3_Init+0x8c>
  {
    Error_Handler();
 8001b24:	f000 fafe 	bl	8002124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001b28:	4b17      	ldr	r3, [pc, #92]	@ (8001b88 <MX_ADC3_Init+0xec>)
 8001b2a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001b2c:	2306      	movs	r3, #6
 8001b2e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_810CYCLES_5;
 8001b30:	2307      	movs	r3, #7
 8001b32:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001b34:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8001b38:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001b3a:	2304      	movs	r3, #4
 8001b3c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001b42:	2300      	movs	r3, #0
 8001b44:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	4619      	mov	r1, r3
 8001b4a:	480d      	ldr	r0, [pc, #52]	@ (8001b80 <MX_ADC3_Init+0xe4>)
 8001b4c:	f001 fda6 	bl	800369c <HAL_ADC_ConfigChannel>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_ADC3_Init+0xbe>
  {
    Error_Handler();
 8001b56:	f000 fae5 	bl	8002124 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001b8c <MX_ADC3_Init+0xf0>)
 8001b5c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001b5e:	230c      	movs	r3, #12
 8001b60:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001b62:	1d3b      	adds	r3, r7, #4
 8001b64:	4619      	mov	r1, r3
 8001b66:	4806      	ldr	r0, [pc, #24]	@ (8001b80 <MX_ADC3_Init+0xe4>)
 8001b68:	f001 fd98 	bl	800369c <HAL_ADC_ConfigChannel>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_ADC3_Init+0xda>
  {
    Error_Handler();
 8001b72:	f000 fad7 	bl	8002124 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	3720      	adds	r7, #32
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	24000618 	.word	0x24000618
 8001b84:	58026000 	.word	0x58026000
 8001b88:	cfb80000 	.word	0xcfb80000
 8001b8c:	cb840000 	.word	0xcb840000

08001b90 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b94:	4b22      	ldr	r3, [pc, #136]	@ (8001c20 <MX_USART3_UART_Init+0x90>)
 8001b96:	4a23      	ldr	r2, [pc, #140]	@ (8001c24 <MX_USART3_UART_Init+0x94>)
 8001b98:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b9a:	4b21      	ldr	r3, [pc, #132]	@ (8001c20 <MX_USART3_UART_Init+0x90>)
 8001b9c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ba0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba2:	4b1f      	ldr	r3, [pc, #124]	@ (8001c20 <MX_USART3_UART_Init+0x90>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8001c20 <MX_USART3_UART_Init+0x90>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001bae:	4b1c      	ldr	r3, [pc, #112]	@ (8001c20 <MX_USART3_UART_Init+0x90>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001bb4:	4b1a      	ldr	r3, [pc, #104]	@ (8001c20 <MX_USART3_UART_Init+0x90>)
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bba:	4b19      	ldr	r3, [pc, #100]	@ (8001c20 <MX_USART3_UART_Init+0x90>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc0:	4b17      	ldr	r3, [pc, #92]	@ (8001c20 <MX_USART3_UART_Init+0x90>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bc6:	4b16      	ldr	r3, [pc, #88]	@ (8001c20 <MX_USART3_UART_Init+0x90>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001bcc:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <MX_USART3_UART_Init+0x90>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bd2:	4b13      	ldr	r3, [pc, #76]	@ (8001c20 <MX_USART3_UART_Init+0x90>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bd8:	4811      	ldr	r0, [pc, #68]	@ (8001c20 <MX_USART3_UART_Init+0x90>)
 8001bda:	f009 fb13 	bl	800b204 <HAL_UART_Init>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d001      	beq.n	8001be8 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001be4:	f000 fa9e 	bl	8002124 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001be8:	2100      	movs	r1, #0
 8001bea:	480d      	ldr	r0, [pc, #52]	@ (8001c20 <MX_USART3_UART_Init+0x90>)
 8001bec:	f00b f9dd 	bl	800cfaa <HAL_UARTEx_SetTxFifoThreshold>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d001      	beq.n	8001bfa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001bf6:	f000 fa95 	bl	8002124 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4808      	ldr	r0, [pc, #32]	@ (8001c20 <MX_USART3_UART_Init+0x90>)
 8001bfe:	f00b fa12 	bl	800d026 <HAL_UARTEx_SetRxFifoThreshold>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001c08:	f000 fa8c 	bl	8002124 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001c0c:	4804      	ldr	r0, [pc, #16]	@ (8001c20 <MX_USART3_UART_Init+0x90>)
 8001c0e:	f00b f993 	bl	800cf38 <HAL_UARTEx_DisableFifoMode>
 8001c12:	4603      	mov	r3, r0
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d001      	beq.n	8001c1c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001c18:	f000 fa84 	bl	8002124 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c1c:	bf00      	nop
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	240006f4 	.word	0x240006f4
 8001c24:	40004800 	.word	0x40004800

08001c28 <MX_BDMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_BDMA_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_BDMA_CLK_ENABLE();
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	@ (8001c64 <MX_BDMA_Init+0x3c>)
 8001c30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c34:	4a0b      	ldr	r2, [pc, #44]	@ (8001c64 <MX_BDMA_Init+0x3c>)
 8001c36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001c3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c3e:	4b09      	ldr	r3, [pc, #36]	@ (8001c64 <MX_BDMA_Init+0x3c>)
 8001c40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* BDMA_Channel0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BDMA_Channel0_IRQn, 0, 0);
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	2100      	movs	r1, #0
 8001c50:	2081      	movs	r0, #129	@ 0x81
 8001c52:	f002 fcfc 	bl	800464e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(BDMA_Channel0_IRQn);
 8001c56:	2081      	movs	r0, #129	@ 0x81
 8001c58:	f002 fd13 	bl	8004682 <HAL_NVIC_EnableIRQ>

}
 8001c5c:	bf00      	nop
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	58024400 	.word	0x58024400

08001c68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ca4 <MX_DMA_Init+0x3c>)
 8001c70:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001c74:	4a0b      	ldr	r2, [pc, #44]	@ (8001ca4 <MX_DMA_Init+0x3c>)
 8001c76:	f043 0301 	orr.w	r3, r3, #1
 8001c7a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001c7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <MX_DMA_Init+0x3c>)
 8001c80:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001c84:	f003 0301 	and.w	r3, r3, #1
 8001c88:	607b      	str	r3, [r7, #4]
 8001c8a:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	2100      	movs	r1, #0
 8001c90:	200b      	movs	r0, #11
 8001c92:	f002 fcdc 	bl	800464e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c96:	200b      	movs	r0, #11
 8001c98:	f002 fcf3 	bl	8004682 <HAL_NVIC_EnableIRQ>

}
 8001c9c:	bf00      	nop
 8001c9e:	3708      	adds	r7, #8
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	bd80      	pop	{r7, pc}
 8001ca4:	58024400 	.word	0x58024400

08001ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b08a      	sub	sp, #40	@ 0x28
 8001cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cae:	f107 0314 	add.w	r3, r7, #20
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	605a      	str	r2, [r3, #4]
 8001cb8:	609a      	str	r2, [r3, #8]
 8001cba:	60da      	str	r2, [r3, #12]
 8001cbc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cbe:	4b45      	ldr	r3, [pc, #276]	@ (8001dd4 <MX_GPIO_Init+0x12c>)
 8001cc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cc4:	4a43      	ldr	r2, [pc, #268]	@ (8001dd4 <MX_GPIO_Init+0x12c>)
 8001cc6:	f043 0304 	orr.w	r3, r3, #4
 8001cca:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cce:	4b41      	ldr	r3, [pc, #260]	@ (8001dd4 <MX_GPIO_Init+0x12c>)
 8001cd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cd4:	f003 0304 	and.w	r3, r3, #4
 8001cd8:	613b      	str	r3, [r7, #16]
 8001cda:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cdc:	4b3d      	ldr	r3, [pc, #244]	@ (8001dd4 <MX_GPIO_Init+0x12c>)
 8001cde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ce2:	4a3c      	ldr	r2, [pc, #240]	@ (8001dd4 <MX_GPIO_Init+0x12c>)
 8001ce4:	f043 0302 	orr.w	r3, r3, #2
 8001ce8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cec:	4b39      	ldr	r3, [pc, #228]	@ (8001dd4 <MX_GPIO_Init+0x12c>)
 8001cee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001cfa:	4b36      	ldr	r3, [pc, #216]	@ (8001dd4 <MX_GPIO_Init+0x12c>)
 8001cfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d00:	4a34      	ldr	r2, [pc, #208]	@ (8001dd4 <MX_GPIO_Init+0x12c>)
 8001d02:	f043 0308 	orr.w	r3, r3, #8
 8001d06:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d0a:	4b32      	ldr	r3, [pc, #200]	@ (8001dd4 <MX_GPIO_Init+0x12c>)
 8001d0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d10:	f003 0308 	and.w	r3, r3, #8
 8001d14:	60bb      	str	r3, [r7, #8]
 8001d16:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d18:	4b2e      	ldr	r3, [pc, #184]	@ (8001dd4 <MX_GPIO_Init+0x12c>)
 8001d1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d1e:	4a2d      	ldr	r2, [pc, #180]	@ (8001dd4 <MX_GPIO_Init+0x12c>)
 8001d20:	f043 0301 	orr.w	r3, r3, #1
 8001d24:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d28:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd4 <MX_GPIO_Init+0x12c>)
 8001d2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	607b      	str	r3, [r7, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001d36:	4b27      	ldr	r3, [pc, #156]	@ (8001dd4 <MX_GPIO_Init+0x12c>)
 8001d38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d3c:	4a25      	ldr	r2, [pc, #148]	@ (8001dd4 <MX_GPIO_Init+0x12c>)
 8001d3e:	f043 0310 	orr.w	r3, r3, #16
 8001d42:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001d46:	4b23      	ldr	r3, [pc, #140]	@ (8001dd4 <MX_GPIO_Init+0x12c>)
 8001d48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001d4c:	f003 0310 	and.w	r3, r3, #16
 8001d50:	603b      	str	r3, [r7, #0]
 8001d52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDG_GPIO_Port, LDG_Pin, GPIO_PIN_RESET);
 8001d54:	2200      	movs	r2, #0
 8001d56:	2101      	movs	r1, #1
 8001d58:	481f      	ldr	r0, [pc, #124]	@ (8001dd8 <MX_GPIO_Init+0x130>)
 8001d5a:	f005 fc99 	bl	8007690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LDY_GPIO_Port, LDY_Pin, GPIO_PIN_RESET);
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2102      	movs	r1, #2
 8001d62:	481e      	ldr	r0, [pc, #120]	@ (8001ddc <MX_GPIO_Init+0x134>)
 8001d64:	f005 fc94 	bl	8007690 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_BTN_Pin */
  GPIO_InitStruct.Pin = USER_BTN_Pin;
 8001d68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d6e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USER_BTN_GPIO_Port, &GPIO_InitStruct);
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4818      	ldr	r0, [pc, #96]	@ (8001de0 <MX_GPIO_Init+0x138>)
 8001d80:	f005 fad6 	bl	8007330 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDG_Pin */
  GPIO_InitStruct.Pin = LDG_Pin;
 8001d84:	2301      	movs	r3, #1
 8001d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LDG_GPIO_Port, &GPIO_InitStruct);
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480f      	ldr	r0, [pc, #60]	@ (8001dd8 <MX_GPIO_Init+0x130>)
 8001d9c:	f005 fac8 	bl	8007330 <HAL_GPIO_Init>

  /*Configure GPIO pin : LDY_Pin */
  GPIO_InitStruct.Pin = LDY_Pin;
 8001da0:	2302      	movs	r3, #2
 8001da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da4:	2301      	movs	r3, #1
 8001da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da8:	2300      	movs	r3, #0
 8001daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dac:	2300      	movs	r3, #0
 8001dae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LDY_GPIO_Port, &GPIO_InitStruct);
 8001db0:	f107 0314 	add.w	r3, r7, #20
 8001db4:	4619      	mov	r1, r3
 8001db6:	4809      	ldr	r0, [pc, #36]	@ (8001ddc <MX_GPIO_Init+0x134>)
 8001db8:	f005 faba 	bl	8007330 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(USER_BTN_EXTI_IRQn, 0, 0);
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	2100      	movs	r1, #0
 8001dc0:	2028      	movs	r0, #40	@ 0x28
 8001dc2:	f002 fc44 	bl	800464e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USER_BTN_EXTI_IRQn);
 8001dc6:	2028      	movs	r0, #40	@ 0x28
 8001dc8:	f002 fc5b 	bl	8004682 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001dcc:	bf00      	nop
 8001dce:	3728      	adds	r7, #40	@ 0x28
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	58024400 	.word	0x58024400
 8001dd8:	58020400 	.word	0x58020400
 8001ddc:	58021000 	.word	0x58021000
 8001de0:	58020800 	.word	0x58020800

08001de4 <sum1>:
	int result;
	result = x + y;
	return result;
}

void sum1(s_struct *s) {
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
	s->c = s->a + s->b;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	441a      	add	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	609a      	str	r2, [r3, #8]
}
 8001dfa:	bf00      	nop
 8001dfc:	370c      	adds	r7, #12
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
	...

08001e08 <_write>:



//relier usart3 a printf
int _write(int file, char *ptr, int len)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	60f8      	str	r0, [r7, #12]
 8001e10:	60b9      	str	r1, [r7, #8]
 8001e12:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	b29a      	uxth	r2, r3
 8001e18:	f04f 33ff 	mov.w	r3, #4294967295
 8001e1c:	68b9      	ldr	r1, [r7, #8]
 8001e1e:	4804      	ldr	r0, [pc, #16]	@ (8001e30 <_write+0x28>)
 8001e20:	f009 fa40 	bl	800b2a4 <HAL_UART_Transmit>
	return len;
 8001e24:	687b      	ldr	r3, [r7, #4]
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3710      	adds	r7, #16
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}
 8001e2e:	bf00      	nop
 8001e30:	240006f4 	.word	0x240006f4

08001e34 <HAL_UARTEx_RxEventCallback>:
//usart 3 reception de données
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	460b      	mov	r3, r1
 8001e3e:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a63      	ldr	r2, [pc, #396]	@ (8001fd4 <HAL_UARTEx_RxEventCallback+0x1a0>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	f040 80a5 	bne.w	8001f96 <HAL_UARTEx_RxEventCallback+0x162>
	{
		oldPos = newPos;	// Update the last position before copying new data
 8001e4c:	4b62      	ldr	r3, [pc, #392]	@ (8001fd8 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8001e4e:	881a      	ldrh	r2, [r3, #0]
 8001e50:	4b62      	ldr	r3, [pc, #392]	@ (8001fdc <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001e52:	801a      	strh	r2, [r3, #0]

		/* If the data in large and is about to exceed the buffer size, we have to route it to the start of the buffer		 *
		 * This is to maintain the circular buffer
		 * The old data in the main buffer will be overlapped
		 */
		if (oldPos+Size > MainBuf_SIZE)	// If the current position + new data size is greater then the main buffer
 8001e54:	4b61      	ldr	r3, [pc, #388]	@ (8001fdc <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001e56:	881b      	ldrh	r3, [r3, #0]
 8001e58:	461a      	mov	r2, r3
 8001e5a:	887b      	ldrh	r3, [r7, #2]
 8001e5c:	4413      	add	r3, r2
 8001e5e:	2b14      	cmp	r3, #20
 8001e60:	dd22      	ble.n	8001ea8 <HAL_UARTEx_RxEventCallback+0x74>
		{
			uint16_t datatocopy = MainBuf_SIZE-oldPos;	// Find out how much space is left in the main buffer
 8001e62:	4b5e      	ldr	r3, [pc, #376]	@ (8001fdc <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001e64:	881b      	ldrh	r3, [r3, #0]
 8001e66:	f1c3 0314 	rsb	r3, r3, #20
 8001e6a:	817b      	strh	r3, [r7, #10]
			memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, datatocopy);	// Copy data in that remaining space
 8001e6c:	4b5b      	ldr	r3, [pc, #364]	@ (8001fdc <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	4b5b      	ldr	r3, [pc, #364]	@ (8001fe0 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8001e74:	4413      	add	r3, r2
 8001e76:	897a      	ldrh	r2, [r7, #10]
 8001e78:	495a      	ldr	r1, [pc, #360]	@ (8001fe4 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f00d fe23 	bl	800fac6 <memcpy>

			oldPos = 0;	// Point to the start of the buffer
 8001e80:	4b56      	ldr	r3, [pc, #344]	@ (8001fdc <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	801a      	strh	r2, [r3, #0]
			memcpy ((uint8_t *)MainBuf, (uint8_t *)RxBuf+datatocopy, (Size-datatocopy));	// Copy the remaining data
 8001e86:	897b      	ldrh	r3, [r7, #10]
 8001e88:	4a56      	ldr	r2, [pc, #344]	@ (8001fe4 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8001e8a:	1899      	adds	r1, r3, r2
 8001e8c:	887a      	ldrh	r2, [r7, #2]
 8001e8e:	897b      	ldrh	r3, [r7, #10]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	461a      	mov	r2, r3
 8001e94:	4852      	ldr	r0, [pc, #328]	@ (8001fe0 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8001e96:	f00d fe16 	bl	800fac6 <memcpy>
			newPos = (Size-datatocopy);	// Update de position
 8001e9a:	887a      	ldrh	r2, [r7, #2]
 8001e9c:	897b      	ldrh	r3, [r7, #10]
 8001e9e:	1ad3      	subs	r3, r2, r3
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	4b4d      	ldr	r3, [pc, #308]	@ (8001fd8 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8001ea4:	801a      	strh	r2, [r3, #0]
 8001ea6:	e010      	b.n	8001eca <HAL_UARTEx_RxEventCallback+0x96>
		/* If theb current position + new data size is less than the main buffer
		 * We will simply copy the data into the buffer and update the position
		 */
		else
		{
			memcpy ((uint8_t *)MainBuf+oldPos, RxBuf, Size);
 8001ea8:	4b4c      	ldr	r3, [pc, #304]	@ (8001fdc <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001eaa:	881b      	ldrh	r3, [r3, #0]
 8001eac:	461a      	mov	r2, r3
 8001eae:	4b4c      	ldr	r3, [pc, #304]	@ (8001fe0 <HAL_UARTEx_RxEventCallback+0x1ac>)
 8001eb0:	4413      	add	r3, r2
 8001eb2:	887a      	ldrh	r2, [r7, #2]
 8001eb4:	494b      	ldr	r1, [pc, #300]	@ (8001fe4 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f00d fe05 	bl	800fac6 <memcpy>
			newPos = Size+oldPos;
 8001ebc:	4b47      	ldr	r3, [pc, #284]	@ (8001fdc <HAL_UARTEx_RxEventCallback+0x1a8>)
 8001ebe:	881a      	ldrh	r2, [r3, #0]
 8001ec0:	887b      	ldrh	r3, [r7, #2]
 8001ec2:	4413      	add	r3, r2
 8001ec4:	b29a      	uxth	r2, r3
 8001ec6:	4b44      	ldr	r3, [pc, #272]	@ (8001fd8 <HAL_UARTEx_RxEventCallback+0x1a4>)
 8001ec8:	801a      	strh	r2, [r3, #0]
		}

		/* Stat the DMA again */

		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, RxBuf, RxBuf_SIZE);
 8001eca:	220a      	movs	r2, #10
 8001ecc:	4945      	ldr	r1, [pc, #276]	@ (8001fe4 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8001ece:	4846      	ldr	r0, [pc, #280]	@ (8001fe8 <HAL_UARTEx_RxEventCallback+0x1b4>)
 8001ed0:	f00b f8e7 	bl	800d0a2 <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8001ed4:	4b45      	ldr	r3, [pc, #276]	@ (8001fec <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a45      	ldr	r2, [pc, #276]	@ (8001ff0 <HAL_UARTEx_RxEventCallback+0x1bc>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d04a      	beq.n	8001f74 <HAL_UARTEx_RxEventCallback+0x140>
 8001ede:	4b43      	ldr	r3, [pc, #268]	@ (8001fec <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a44      	ldr	r2, [pc, #272]	@ (8001ff4 <HAL_UARTEx_RxEventCallback+0x1c0>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d045      	beq.n	8001f74 <HAL_UARTEx_RxEventCallback+0x140>
 8001ee8:	4b40      	ldr	r3, [pc, #256]	@ (8001fec <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a42      	ldr	r2, [pc, #264]	@ (8001ff8 <HAL_UARTEx_RxEventCallback+0x1c4>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d040      	beq.n	8001f74 <HAL_UARTEx_RxEventCallback+0x140>
 8001ef2:	4b3e      	ldr	r3, [pc, #248]	@ (8001fec <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a41      	ldr	r2, [pc, #260]	@ (8001ffc <HAL_UARTEx_RxEventCallback+0x1c8>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d03b      	beq.n	8001f74 <HAL_UARTEx_RxEventCallback+0x140>
 8001efc:	4b3b      	ldr	r3, [pc, #236]	@ (8001fec <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a3f      	ldr	r2, [pc, #252]	@ (8002000 <HAL_UARTEx_RxEventCallback+0x1cc>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d036      	beq.n	8001f74 <HAL_UARTEx_RxEventCallback+0x140>
 8001f06:	4b39      	ldr	r3, [pc, #228]	@ (8001fec <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a3e      	ldr	r2, [pc, #248]	@ (8002004 <HAL_UARTEx_RxEventCallback+0x1d0>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d031      	beq.n	8001f74 <HAL_UARTEx_RxEventCallback+0x140>
 8001f10:	4b36      	ldr	r3, [pc, #216]	@ (8001fec <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a3c      	ldr	r2, [pc, #240]	@ (8002008 <HAL_UARTEx_RxEventCallback+0x1d4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d02c      	beq.n	8001f74 <HAL_UARTEx_RxEventCallback+0x140>
 8001f1a:	4b34      	ldr	r3, [pc, #208]	@ (8001fec <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a3b      	ldr	r2, [pc, #236]	@ (800200c <HAL_UARTEx_RxEventCallback+0x1d8>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d027      	beq.n	8001f74 <HAL_UARTEx_RxEventCallback+0x140>
 8001f24:	4b31      	ldr	r3, [pc, #196]	@ (8001fec <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a39      	ldr	r2, [pc, #228]	@ (8002010 <HAL_UARTEx_RxEventCallback+0x1dc>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d022      	beq.n	8001f74 <HAL_UARTEx_RxEventCallback+0x140>
 8001f2e:	4b2f      	ldr	r3, [pc, #188]	@ (8001fec <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a38      	ldr	r2, [pc, #224]	@ (8002014 <HAL_UARTEx_RxEventCallback+0x1e0>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d01d      	beq.n	8001f74 <HAL_UARTEx_RxEventCallback+0x140>
 8001f38:	4b2c      	ldr	r3, [pc, #176]	@ (8001fec <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a36      	ldr	r2, [pc, #216]	@ (8002018 <HAL_UARTEx_RxEventCallback+0x1e4>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d018      	beq.n	8001f74 <HAL_UARTEx_RxEventCallback+0x140>
 8001f42:	4b2a      	ldr	r3, [pc, #168]	@ (8001fec <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a35      	ldr	r2, [pc, #212]	@ (800201c <HAL_UARTEx_RxEventCallback+0x1e8>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d013      	beq.n	8001f74 <HAL_UARTEx_RxEventCallback+0x140>
 8001f4c:	4b27      	ldr	r3, [pc, #156]	@ (8001fec <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a33      	ldr	r2, [pc, #204]	@ (8002020 <HAL_UARTEx_RxEventCallback+0x1ec>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00e      	beq.n	8001f74 <HAL_UARTEx_RxEventCallback+0x140>
 8001f56:	4b25      	ldr	r3, [pc, #148]	@ (8001fec <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a32      	ldr	r2, [pc, #200]	@ (8002024 <HAL_UARTEx_RxEventCallback+0x1f0>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d009      	beq.n	8001f74 <HAL_UARTEx_RxEventCallback+0x140>
 8001f60:	4b22      	ldr	r3, [pc, #136]	@ (8001fec <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a30      	ldr	r2, [pc, #192]	@ (8002028 <HAL_UARTEx_RxEventCallback+0x1f4>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d004      	beq.n	8001f74 <HAL_UARTEx_RxEventCallback+0x140>
 8001f6a:	4b20      	ldr	r3, [pc, #128]	@ (8001fec <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a2f      	ldr	r2, [pc, #188]	@ (800202c <HAL_UARTEx_RxEventCallback+0x1f8>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d108      	bne.n	8001f86 <HAL_UARTEx_RxEventCallback+0x152>
 8001f74:	4b1d      	ldr	r3, [pc, #116]	@ (8001fec <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	4b1c      	ldr	r3, [pc, #112]	@ (8001fec <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0208 	bic.w	r2, r2, #8
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	e007      	b.n	8001f96 <HAL_UARTEx_RxEventCallback+0x162>
 8001f86:	4b19      	ldr	r3, [pc, #100]	@ (8001fec <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	4b17      	ldr	r3, [pc, #92]	@ (8001fec <HAL_UARTEx_RxEventCallback+0x1b8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0204 	bic.w	r2, r2, #4
 8001f94:	601a      	str	r2, [r3, #0]

	/***************************	PROCESS (LITTLE) THE DATA HERE	***************************/

	/* Let's say we want to check for the keyword "OK" within our incoming data */

	for(int i=0; i<Size-1; i++)
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	e011      	b.n	8001fc0 <HAL_UARTEx_RxEventCallback+0x18c>
	{
		if ((RxBuf[i] == 'O') && (RxBuf[i+1] == 'K'))
 8001f9c:	4a11      	ldr	r2, [pc, #68]	@ (8001fe4 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b4f      	cmp	r3, #79	@ 0x4f
 8001fa6:	d108      	bne.n	8001fba <HAL_UARTEx_RxEventCallback+0x186>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	3301      	adds	r3, #1
 8001fac:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe4 <HAL_UARTEx_RxEventCallback+0x1b0>)
 8001fae:	5cd3      	ldrb	r3, [r2, r3]
 8001fb0:	2b4b      	cmp	r3, #75	@ 0x4b
 8001fb2:	d102      	bne.n	8001fba <HAL_UARTEx_RxEventCallback+0x186>
		{
		isOK = 1;
 8001fb4:	4b1e      	ldr	r3, [pc, #120]	@ (8002030 <HAL_UARTEx_RxEventCallback+0x1fc>)
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	601a      	str	r2, [r3, #0]
	for(int i=0; i<Size-1; i++)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	887b      	ldrh	r3, [r7, #2]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	dbe8      	blt.n	8001f9c <HAL_UARTEx_RxEventCallback+0x168>
		}
	}
}
 8001fca:	bf00      	nop
 8001fcc:	bf00      	nop
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40004800 	.word	0x40004800
 8001fd8:	24000826 	.word	0x24000826
 8001fdc:	24000824 	.word	0x24000824
 8001fe0:	24000810 	.word	0x24000810
 8001fe4:	24000804 	.word	0x24000804
 8001fe8:	240006f4 	.word	0x240006f4
 8001fec:	24000788 	.word	0x24000788
 8001ff0:	40020010 	.word	0x40020010
 8001ff4:	40020028 	.word	0x40020028
 8001ff8:	40020040 	.word	0x40020040
 8001ffc:	40020058 	.word	0x40020058
 8002000:	40020070 	.word	0x40020070
 8002004:	40020088 	.word	0x40020088
 8002008:	400200a0 	.word	0x400200a0
 800200c:	400200b8 	.word	0x400200b8
 8002010:	40020410 	.word	0x40020410
 8002014:	40020428 	.word	0x40020428
 8002018:	40020440 	.word	0x40020440
 800201c:	40020458 	.word	0x40020458
 8002020:	40020470 	.word	0x40020470
 8002024:	40020488 	.word	0x40020488
 8002028:	400204a0 	.word	0x400204a0
 800202c:	400204b8 	.word	0x400204b8
 8002030:	24000828 	.word	0x24000828

08002034 <HAL_GPIO_EXTI_Callback>:

//interupt bouton
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8002034:	b480      	push	{r7}
 8002036:	b083      	sub	sp, #12
 8002038:	af00      	add	r7, sp, #0
 800203a:	4603      	mov	r3, r0
 800203c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == USER_BTN_Pin) {
 800203e:	88fb      	ldrh	r3, [r7, #6]
 8002040:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002044:	d102      	bne.n	800204c <HAL_GPIO_EXTI_Callback+0x18>
    // Bouton pressé
	  ButtonState = BUTTON_PRESSED;
 8002046:	4b04      	ldr	r3, [pc, #16]	@ (8002058 <HAL_GPIO_EXTI_Callback+0x24>)
 8002048:	2201      	movs	r2, #1
 800204a:	601a      	str	r2, [r3, #0]
  }
}
 800204c:	bf00      	nop
 800204e:	370c      	adds	r7, #12
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	24000838 	.word	0x24000838

0800205c <HAL_GetTick>:

//optimization de timer HAL_GetTick();
inline uint32_t HAL_GetTick(void)
{
 800205c:	b480      	push	{r7}
 800205e:	af00      	add	r7, sp, #0
  return uwTick;
 8002060:	4b03      	ldr	r3, [pc, #12]	@ (8002070 <HAL_GetTick+0x14>)
 8002062:	681b      	ldr	r3, [r3, #0]
}
 8002064:	4618      	mov	r0, r3
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	240008dc 	.word	0x240008dc

08002074 <bubblesort>:

void bubblesort(uint16_t *array, uint16_t length)
{
 8002074:	b480      	push	{r7}
 8002076:	b085      	sub	sp, #20
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	807b      	strh	r3, [r7, #2]
   uint16_t i, j,tmp;

   for (i = 1; i < length ; i++)
 8002080:	2301      	movs	r3, #1
 8002082:	81fb      	strh	r3, [r7, #14]
 8002084:	e033      	b.n	80020ee <bubblesort+0x7a>
   {
      for (j = 0; j < length - i ; j++)
 8002086:	2300      	movs	r3, #0
 8002088:	81bb      	strh	r3, [r7, #12]
 800208a:	e027      	b.n	80020dc <bubblesort+0x68>
      {
          if (array[j] > array[j+1])
 800208c:	89bb      	ldrh	r3, [r7, #12]
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	4413      	add	r3, r2
 8002094:	881a      	ldrh	r2, [r3, #0]
 8002096:	89bb      	ldrh	r3, [r7, #12]
 8002098:	3301      	adds	r3, #1
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	6879      	ldr	r1, [r7, #4]
 800209e:	440b      	add	r3, r1
 80020a0:	881b      	ldrh	r3, [r3, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d917      	bls.n	80020d6 <bubblesort+0x62>
          {
              tmp = array[j];
 80020a6:	89bb      	ldrh	r3, [r7, #12]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	4413      	add	r3, r2
 80020ae:	881b      	ldrh	r3, [r3, #0]
 80020b0:	817b      	strh	r3, [r7, #10]
              array[j] = array[j+1];
 80020b2:	89bb      	ldrh	r3, [r7, #12]
 80020b4:	3301      	adds	r3, #1
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	687a      	ldr	r2, [r7, #4]
 80020ba:	441a      	add	r2, r3
 80020bc:	89bb      	ldrh	r3, [r7, #12]
 80020be:	005b      	lsls	r3, r3, #1
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	440b      	add	r3, r1
 80020c4:	8812      	ldrh	r2, [r2, #0]
 80020c6:	801a      	strh	r2, [r3, #0]
              array[j+1] = tmp;
 80020c8:	89bb      	ldrh	r3, [r7, #12]
 80020ca:	3301      	adds	r3, #1
 80020cc:	005b      	lsls	r3, r3, #1
 80020ce:	687a      	ldr	r2, [r7, #4]
 80020d0:	4413      	add	r3, r2
 80020d2:	897a      	ldrh	r2, [r7, #10]
 80020d4:	801a      	strh	r2, [r3, #0]
      for (j = 0; j < length - i ; j++)
 80020d6:	89bb      	ldrh	r3, [r7, #12]
 80020d8:	3301      	adds	r3, #1
 80020da:	81bb      	strh	r3, [r7, #12]
 80020dc:	89ba      	ldrh	r2, [r7, #12]
 80020de:	8879      	ldrh	r1, [r7, #2]
 80020e0:	89fb      	ldrh	r3, [r7, #14]
 80020e2:	1acb      	subs	r3, r1, r3
 80020e4:	429a      	cmp	r2, r3
 80020e6:	dbd1      	blt.n	800208c <bubblesort+0x18>
   for (i = 1; i < length ; i++)
 80020e8:	89fb      	ldrh	r3, [r7, #14]
 80020ea:	3301      	adds	r3, #1
 80020ec:	81fb      	strh	r3, [r7, #14]
 80020ee:	89fa      	ldrh	r2, [r7, #14]
 80020f0:	887b      	ldrh	r3, [r7, #2]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d3c7      	bcc.n	8002086 <bubblesort+0x12>
          }
      }
   }
}
 80020f6:	bf00      	nop
 80020f8:	bf00      	nop
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]

	adcFlag = SET;
 800210c:	4b04      	ldr	r3, [pc, #16]	@ (8002120 <HAL_ADC_ConvCpltCallback+0x1c>)
 800210e:	2201      	movs	r2, #1
 8002110:	601a      	str	r2, [r3, #0]
//	SCB_InvalidateDCache_by_Addr((uint32_t*)ADC_VAL, sizeof(ADC_VAL));
//	vDDA = __LL_ADC_CALC_VREFANALOG_VOLTAGE(ADC_VAL[0],LL_ADC_RESOLUTION_16B);
//	temperatureDegC =   __LL_ADC_CALC_TEMPERATURE(vDDA,ADC_VAL[1],LL_ADC_RESOLUTION_16B);
}
 8002112:	bf00      	nop
 8002114:	370c      	adds	r7, #12
 8002116:	46bd      	mov	sp, r7
 8002118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211c:	4770      	bx	lr
 800211e:	bf00      	nop
 8002120:	240008c4 	.word	0x240008c4

08002124 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002124:	b480      	push	{r7}
 8002126:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8002128:	b672      	cpsid	i
}
 800212a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800212c:	bf00      	nop
 800212e:	e7fd      	b.n	800212c <Error_Handler+0x8>

08002130 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002136:	4b0a      	ldr	r3, [pc, #40]	@ (8002160 <HAL_MspInit+0x30>)
 8002138:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800213c:	4a08      	ldr	r2, [pc, #32]	@ (8002160 <HAL_MspInit+0x30>)
 800213e:	f043 0302 	orr.w	r3, r3, #2
 8002142:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002146:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <HAL_MspInit+0x30>)
 8002148:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	607b      	str	r3, [r7, #4]
 8002152:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002154:	bf00      	nop
 8002156:	370c      	adds	r7, #12
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	58024400 	.word	0x58024400

08002164 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b0b4      	sub	sp, #208	@ 0xd0
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800216c:	f107 0310 	add.w	r3, r7, #16
 8002170:	22c0      	movs	r2, #192	@ 0xc0
 8002172:	2100      	movs	r1, #0
 8002174:	4618      	mov	r0, r3
 8002176:	f00d fbd3 	bl	800f920 <memset>
  if(hadc->Instance==ADC3)
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a37      	ldr	r2, [pc, #220]	@ (800225c <HAL_ADC_MspInit+0xf8>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d166      	bne.n	8002252 <HAL_ADC_MspInit+0xee>

    /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002184:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8002188:	f04f 0300 	mov.w	r3, #0
 800218c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8002190:	2304      	movs	r3, #4
 8002192:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 25;
 8002194:	2319      	movs	r3, #25
 8002196:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 8002198:	2304      	movs	r3, #4
 800219a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 4;
 800219c:	2304      	movs	r3, #4
 800219e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80021a0:	2302      	movs	r3, #2
 80021a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80021a4:	23c0      	movs	r3, #192	@ 0xc0
 80021a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 80021a8:	2300      	movs	r3, #0
 80021aa:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80021b0:	2300      	movs	r3, #0
 80021b2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021b6:	f107 0310 	add.w	r3, r7, #16
 80021ba:	4618      	mov	r0, r3
 80021bc:	f006 fb24 	bl	8008808 <HAL_RCCEx_PeriphCLKConfig>
 80021c0:	4603      	mov	r3, r0
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 80021c6:	f7ff ffad 	bl	8002124 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80021ca:	4b25      	ldr	r3, [pc, #148]	@ (8002260 <HAL_ADC_MspInit+0xfc>)
 80021cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021d0:	4a23      	ldr	r2, [pc, #140]	@ (8002260 <HAL_ADC_MspInit+0xfc>)
 80021d2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80021da:	4b21      	ldr	r3, [pc, #132]	@ (8002260 <HAL_ADC_MspInit+0xfc>)
 80021dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80021e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80021e4:	60fb      	str	r3, [r7, #12]
 80021e6:	68fb      	ldr	r3, [r7, #12]

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = BDMA_Channel0;
 80021e8:	4b1e      	ldr	r3, [pc, #120]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 80021ea:	4a1f      	ldr	r2, [pc, #124]	@ (8002268 <HAL_ADC_MspInit+0x104>)
 80021ec:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Request = BDMA_REQUEST_ADC3;
 80021ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 80021f0:	2211      	movs	r2, #17
 80021f2:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80021f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 80021f6:	2200      	movs	r2, #0
 80021f8:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 80021fa:	4b1a      	ldr	r3, [pc, #104]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8002200:	4b18      	ldr	r3, [pc, #96]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 8002202:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002206:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002208:	4b16      	ldr	r3, [pc, #88]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 800220a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800220e:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002210:	4b14      	ldr	r3, [pc, #80]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 8002212:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002216:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8002218:	4b12      	ldr	r3, [pc, #72]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 800221a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800221e:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8002220:	4b10      	ldr	r3, [pc, #64]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 8002222:	2200      	movs	r2, #0
 8002224:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8002226:	480f      	ldr	r0, [pc, #60]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 8002228:	f002 fa46 	bl	80046b8 <HAL_DMA_Init>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <HAL_ADC_MspInit+0xd2>
    {
      Error_Handler();
 8002232:	f7ff ff77 	bl	8002124 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a0a      	ldr	r2, [pc, #40]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 800223a:	64da      	str	r2, [r3, #76]	@ 0x4c
 800223c:	4a09      	ldr	r2, [pc, #36]	@ (8002264 <HAL_ADC_MspInit+0x100>)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6393      	str	r3, [r2, #56]	@ 0x38

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8002242:	2200      	movs	r2, #0
 8002244:	2100      	movs	r1, #0
 8002246:	207f      	movs	r0, #127	@ 0x7f
 8002248:	f002 fa01 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800224c:	207f      	movs	r0, #127	@ 0x7f
 800224e:	f002 fa18 	bl	8004682 <HAL_NVIC_EnableIRQ>

    /* USER CODE END ADC3_MspInit 1 */

  }

}
 8002252:	bf00      	nop
 8002254:	37d0      	adds	r7, #208	@ 0xd0
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	58026000 	.word	0x58026000
 8002260:	58024400 	.word	0x58024400
 8002264:	2400067c 	.word	0x2400067c
 8002268:	58025408 	.word	0x58025408

0800226c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b0ba      	sub	sp, #232	@ 0xe8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002274:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]
 8002280:	60da      	str	r2, [r3, #12]
 8002282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002284:	f107 0310 	add.w	r3, r7, #16
 8002288:	22c0      	movs	r2, #192	@ 0xc0
 800228a:	2100      	movs	r1, #0
 800228c:	4618      	mov	r0, r3
 800228e:	f00d fb47 	bl	800f920 <memset>
  if(huart->Instance==USART3)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	4a42      	ldr	r2, [pc, #264]	@ (80023a0 <HAL_UART_MspInit+0x134>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d17c      	bne.n	8002396 <HAL_UART_MspInit+0x12a>

    /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800229c:	f04f 0202 	mov.w	r2, #2
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80022a8:	2300      	movs	r3, #0
 80022aa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80022ae:	f107 0310 	add.w	r3, r7, #16
 80022b2:	4618      	mov	r0, r3
 80022b4:	f006 faa8 	bl	8008808 <HAL_RCCEx_PeriphCLKConfig>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d001      	beq.n	80022c2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80022be:	f7ff ff31 	bl	8002124 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80022c2:	4b38      	ldr	r3, [pc, #224]	@ (80023a4 <HAL_UART_MspInit+0x138>)
 80022c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022c8:	4a36      	ldr	r2, [pc, #216]	@ (80023a4 <HAL_UART_MspInit+0x138>)
 80022ca:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80022ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80022d2:	4b34      	ldr	r3, [pc, #208]	@ (80023a4 <HAL_UART_MspInit+0x138>)
 80022d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80022d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80022dc:	60fb      	str	r3, [r7, #12]
 80022de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022e0:	4b30      	ldr	r3, [pc, #192]	@ (80023a4 <HAL_UART_MspInit+0x138>)
 80022e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022e6:	4a2f      	ldr	r2, [pc, #188]	@ (80023a4 <HAL_UART_MspInit+0x138>)
 80022e8:	f043 0308 	orr.w	r3, r3, #8
 80022ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80022f0:	4b2c      	ldr	r3, [pc, #176]	@ (80023a4 <HAL_UART_MspInit+0x138>)
 80022f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80022f6:	f003 0308 	and.w	r3, r3, #8
 80022fa:	60bb      	str	r3, [r7, #8]
 80022fc:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80022fe:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002302:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002306:	2302      	movs	r3, #2
 8002308:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230c:	2300      	movs	r3, #0
 800230e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002312:	2300      	movs	r3, #0
 8002314:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002318:	2307      	movs	r3, #7
 800231a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800231e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8002322:	4619      	mov	r1, r3
 8002324:	4820      	ldr	r0, [pc, #128]	@ (80023a8 <HAL_UART_MspInit+0x13c>)
 8002326:	f005 f803 	bl	8007330 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream0;
 800232a:	4b20      	ldr	r3, [pc, #128]	@ (80023ac <HAL_UART_MspInit+0x140>)
 800232c:	4a20      	ldr	r2, [pc, #128]	@ (80023b0 <HAL_UART_MspInit+0x144>)
 800232e:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Request = DMA_REQUEST_USART3_RX;
 8002330:	4b1e      	ldr	r3, [pc, #120]	@ (80023ac <HAL_UART_MspInit+0x140>)
 8002332:	222d      	movs	r2, #45	@ 0x2d
 8002334:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002336:	4b1d      	ldr	r3, [pc, #116]	@ (80023ac <HAL_UART_MspInit+0x140>)
 8002338:	2200      	movs	r2, #0
 800233a:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800233c:	4b1b      	ldr	r3, [pc, #108]	@ (80023ac <HAL_UART_MspInit+0x140>)
 800233e:	2200      	movs	r2, #0
 8002340:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002342:	4b1a      	ldr	r3, [pc, #104]	@ (80023ac <HAL_UART_MspInit+0x140>)
 8002344:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002348:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800234a:	4b18      	ldr	r3, [pc, #96]	@ (80023ac <HAL_UART_MspInit+0x140>)
 800234c:	2200      	movs	r2, #0
 800234e:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002350:	4b16      	ldr	r3, [pc, #88]	@ (80023ac <HAL_UART_MspInit+0x140>)
 8002352:	2200      	movs	r2, #0
 8002354:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8002356:	4b15      	ldr	r3, [pc, #84]	@ (80023ac <HAL_UART_MspInit+0x140>)
 8002358:	2200      	movs	r2, #0
 800235a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800235c:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <HAL_UART_MspInit+0x140>)
 800235e:	2200      	movs	r2, #0
 8002360:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002362:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <HAL_UART_MspInit+0x140>)
 8002364:	2200      	movs	r2, #0
 8002366:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8002368:	4810      	ldr	r0, [pc, #64]	@ (80023ac <HAL_UART_MspInit+0x140>)
 800236a:	f002 f9a5 	bl	80046b8 <HAL_DMA_Init>
 800236e:	4603      	mov	r3, r0
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <HAL_UART_MspInit+0x10c>
    {
      Error_Handler();
 8002374:	f7ff fed6 	bl	8002124 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	4a0c      	ldr	r2, [pc, #48]	@ (80023ac <HAL_UART_MspInit+0x140>)
 800237c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002380:	4a0a      	ldr	r2, [pc, #40]	@ (80023ac <HAL_UART_MspInit+0x140>)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002386:	2200      	movs	r2, #0
 8002388:	2100      	movs	r1, #0
 800238a:	2027      	movs	r0, #39	@ 0x27
 800238c:	f002 f95f 	bl	800464e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002390:	2027      	movs	r0, #39	@ 0x27
 8002392:	f002 f976 	bl	8004682 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART3_MspInit 1 */

  }

}
 8002396:	bf00      	nop
 8002398:	37e8      	adds	r7, #232	@ 0xe8
 800239a:	46bd      	mov	sp, r7
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	40004800 	.word	0x40004800
 80023a4:	58024400 	.word	0x58024400
 80023a8:	58020c00 	.word	0x58020c00
 80023ac:	24000788 	.word	0x24000788
 80023b0:	40020010 	.word	0x40020010

080023b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023b4:	b480      	push	{r7}
 80023b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80023b8:	bf00      	nop
 80023ba:	e7fd      	b.n	80023b8 <NMI_Handler+0x4>

080023bc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023c0:	bf00      	nop
 80023c2:	e7fd      	b.n	80023c0 <HardFault_Handler+0x4>

080023c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023c8:	bf00      	nop
 80023ca:	e7fd      	b.n	80023c8 <MemManage_Handler+0x4>

080023cc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023cc:	b480      	push	{r7}
 80023ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023d0:	bf00      	nop
 80023d2:	e7fd      	b.n	80023d0 <BusFault_Handler+0x4>

080023d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023d8:	bf00      	nop
 80023da:	e7fd      	b.n	80023d8 <UsageFault_Handler+0x4>

080023dc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023e0:	bf00      	nop
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr

080023ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002406:	b580      	push	{r7, lr}
 8002408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800240a:	f000 f97b 	bl	8002704 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800240e:	bf00      	nop
 8002410:	bd80      	pop	{r7, pc}
	...

08002414 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 8002418:	4802      	ldr	r0, [pc, #8]	@ (8002424 <DMA1_Stream0_IRQHandler+0x10>)
 800241a:	f003 fc77 	bl	8005d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800241e:	bf00      	nop
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	24000788 	.word	0x24000788

08002428 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800242c:	4802      	ldr	r0, [pc, #8]	@ (8002438 <USART3_IRQHandler+0x10>)
 800242e:	f008 ffc7 	bl	800b3c0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8002432:	bf00      	nop
 8002434:	bd80      	pop	{r7, pc}
 8002436:	bf00      	nop
 8002438:	240006f4 	.word	0x240006f4

0800243c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_BTN_Pin);
 8002440:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8002444:	f005 f957 	bl	80076f6 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002448:	bf00      	nop
 800244a:	bd80      	pop	{r7, pc}

0800244c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002450:	4802      	ldr	r0, [pc, #8]	@ (800245c <ADC3_IRQHandler+0x10>)
 8002452:	f000 fecb 	bl	80031ec <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	24000618 	.word	0x24000618

08002460 <BDMA_Channel0_IRQHandler>:

/**
  * @brief This function handles BDMA channel0 global interrupt.
  */
void BDMA_Channel0_IRQHandler(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BDMA_Channel0_IRQn 0 */

  /* USER CODE END BDMA_Channel0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8002464:	4802      	ldr	r0, [pc, #8]	@ (8002470 <BDMA_Channel0_IRQHandler+0x10>)
 8002466:	f003 fc51 	bl	8005d0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN BDMA_Channel0_IRQn 1 */

  /* USER CODE END BDMA_Channel0_IRQn 1 */
}
 800246a:	bf00      	nop
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	2400067c 	.word	0x2400067c

08002474 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002474:	b480      	push	{r7}
 8002476:	af00      	add	r7, sp, #0
  return 1;
 8002478:	2301      	movs	r3, #1
}
 800247a:	4618      	mov	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <_kill>:

int _kill(int pid, int sig)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800248e:	f00d fae5 	bl	800fa5c <__errno>
 8002492:	4603      	mov	r3, r0
 8002494:	2216      	movs	r2, #22
 8002496:	601a      	str	r2, [r3, #0]
  return -1;
 8002498:	f04f 33ff 	mov.w	r3, #4294967295
}
 800249c:	4618      	mov	r0, r3
 800249e:	3708      	adds	r7, #8
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <_exit>:

void _exit (int status)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80024ac:	f04f 31ff 	mov.w	r1, #4294967295
 80024b0:	6878      	ldr	r0, [r7, #4]
 80024b2:	f7ff ffe7 	bl	8002484 <_kill>
  while (1) {}    /* Make sure we hang here */
 80024b6:	bf00      	nop
 80024b8:	e7fd      	b.n	80024b6 <_exit+0x12>

080024ba <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	b086      	sub	sp, #24
 80024be:	af00      	add	r7, sp, #0
 80024c0:	60f8      	str	r0, [r7, #12]
 80024c2:	60b9      	str	r1, [r7, #8]
 80024c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c6:	2300      	movs	r3, #0
 80024c8:	617b      	str	r3, [r7, #20]
 80024ca:	e00a      	b.n	80024e2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80024cc:	f3af 8000 	nop.w
 80024d0:	4601      	mov	r1, r0
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	1c5a      	adds	r2, r3, #1
 80024d6:	60ba      	str	r2, [r7, #8]
 80024d8:	b2ca      	uxtb	r2, r1
 80024da:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	3301      	adds	r3, #1
 80024e0:	617b      	str	r3, [r7, #20]
 80024e2:	697a      	ldr	r2, [r7, #20]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	429a      	cmp	r2, r3
 80024e8:	dbf0      	blt.n	80024cc <_read+0x12>
  }

  return len;
 80024ea:	687b      	ldr	r3, [r7, #4]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3718      	adds	r7, #24
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}

080024f4 <_close>:
  }
  return len;
}

int _close(int file)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80024fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800251c:	605a      	str	r2, [r3, #4]
  return 0;
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <_isatty>:

int _isatty(int file)
{
 800252c:	b480      	push	{r7}
 800252e:	b083      	sub	sp, #12
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002534:	2301      	movs	r3, #1
}
 8002536:	4618      	mov	r0, r3
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002540:	4770      	bx	lr

08002542 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002542:	b480      	push	{r7}
 8002544:	b085      	sub	sp, #20
 8002546:	af00      	add	r7, sp, #0
 8002548:	60f8      	str	r0, [r7, #12]
 800254a:	60b9      	str	r1, [r7, #8]
 800254c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800254e:	2300      	movs	r3, #0
}
 8002550:	4618      	mov	r0, r3
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr

0800255c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b086      	sub	sp, #24
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002564:	4a14      	ldr	r2, [pc, #80]	@ (80025b8 <_sbrk+0x5c>)
 8002566:	4b15      	ldr	r3, [pc, #84]	@ (80025bc <_sbrk+0x60>)
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002570:	4b13      	ldr	r3, [pc, #76]	@ (80025c0 <_sbrk+0x64>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d102      	bne.n	800257e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002578:	4b11      	ldr	r3, [pc, #68]	@ (80025c0 <_sbrk+0x64>)
 800257a:	4a12      	ldr	r2, [pc, #72]	@ (80025c4 <_sbrk+0x68>)
 800257c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800257e:	4b10      	ldr	r3, [pc, #64]	@ (80025c0 <_sbrk+0x64>)
 8002580:	681a      	ldr	r2, [r3, #0]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4413      	add	r3, r2
 8002586:	693a      	ldr	r2, [r7, #16]
 8002588:	429a      	cmp	r2, r3
 800258a:	d207      	bcs.n	800259c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800258c:	f00d fa66 	bl	800fa5c <__errno>
 8002590:	4603      	mov	r3, r0
 8002592:	220c      	movs	r2, #12
 8002594:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002596:	f04f 33ff 	mov.w	r3, #4294967295
 800259a:	e009      	b.n	80025b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800259c:	4b08      	ldr	r3, [pc, #32]	@ (80025c0 <_sbrk+0x64>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025a2:	4b07      	ldr	r3, [pc, #28]	@ (80025c0 <_sbrk+0x64>)
 80025a4:	681a      	ldr	r2, [r3, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4413      	add	r3, r2
 80025aa:	4a05      	ldr	r2, [pc, #20]	@ (80025c0 <_sbrk+0x64>)
 80025ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025ae:	68fb      	ldr	r3, [r7, #12]
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	24080000 	.word	0x24080000
 80025bc:	00000400 	.word	0x00000400
 80025c0:	240008d8 	.word	0x240008d8
 80025c4:	24000a30 	.word	0x24000a30

080025c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80025c8:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8002604 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 80025cc:	f7fe faf0 	bl	8000bb0 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 80025d0:	f7fe fa40 	bl	8000a54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025d4:	480c      	ldr	r0, [pc, #48]	@ (8002608 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80025d6:	490d      	ldr	r1, [pc, #52]	@ (800260c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80025d8:	4a0d      	ldr	r2, [pc, #52]	@ (8002610 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80025da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025dc:	e002      	b.n	80025e4 <LoopCopyDataInit>

080025de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025e2:	3304      	adds	r3, #4

080025e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025e8:	d3f9      	bcc.n	80025de <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ea:	4a0a      	ldr	r2, [pc, #40]	@ (8002614 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80025ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002618 <LoopFillZerobss+0x22>)
  movs r3, #0
 80025ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025f0:	e001      	b.n	80025f6 <LoopFillZerobss>

080025f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f4:	3204      	adds	r2, #4

080025f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025f8:	d3fb      	bcc.n	80025f2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025fa:	f00d fa35 	bl	800fa68 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025fe:	f7fe faff 	bl	8000c00 <main>
  bx  lr
 8002602:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002604:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002608:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800260c:	240001f8 	.word	0x240001f8
  ldr r2, =_sidata
 8002610:	08013e74 	.word	0x08013e74
  ldr r2, =_sbss
 8002614:	240005fc 	.word	0x240005fc
  ldr r4, =_ebss
 8002618:	24000a2c 	.word	0x24000a2c

0800261c <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800261c:	e7fe      	b.n	800261c <ADC_IRQHandler>
	...

08002620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	b082      	sub	sp, #8
 8002624:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002626:	2003      	movs	r0, #3
 8002628:	f002 f806 	bl	8004638 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800262c:	f005 ff16 	bl	800845c <HAL_RCC_GetSysClockFreq>
 8002630:	4602      	mov	r2, r0
 8002632:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <HAL_Init+0x68>)
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	0a1b      	lsrs	r3, r3, #8
 8002638:	f003 030f 	and.w	r3, r3, #15
 800263c:	4913      	ldr	r1, [pc, #76]	@ (800268c <HAL_Init+0x6c>)
 800263e:	5ccb      	ldrb	r3, [r1, r3]
 8002640:	f003 031f 	and.w	r3, r3, #31
 8002644:	fa22 f303 	lsr.w	r3, r2, r3
 8002648:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800264a:	4b0f      	ldr	r3, [pc, #60]	@ (8002688 <HAL_Init+0x68>)
 800264c:	699b      	ldr	r3, [r3, #24]
 800264e:	f003 030f 	and.w	r3, r3, #15
 8002652:	4a0e      	ldr	r2, [pc, #56]	@ (800268c <HAL_Init+0x6c>)
 8002654:	5cd3      	ldrb	r3, [r2, r3]
 8002656:	f003 031f 	and.w	r3, r3, #31
 800265a:	687a      	ldr	r2, [r7, #4]
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
 8002660:	4a0b      	ldr	r2, [pc, #44]	@ (8002690 <HAL_Init+0x70>)
 8002662:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002664:	4a0b      	ldr	r2, [pc, #44]	@ (8002694 <HAL_Init+0x74>)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800266a:	2000      	movs	r0, #0
 800266c:	f000 f814 	bl	8002698 <HAL_InitTick>
 8002670:	4603      	mov	r3, r0
 8002672:	2b00      	cmp	r3, #0
 8002674:	d001      	beq.n	800267a <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002676:	2301      	movs	r3, #1
 8002678:	e002      	b.n	8002680 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800267a:	f7ff fd59 	bl	8002130 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800267e:	2300      	movs	r3, #0
}
 8002680:	4618      	mov	r0, r3
 8002682:	3708      	adds	r7, #8
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}
 8002688:	58024400 	.word	0x58024400
 800268c:	08011c70 	.word	0x08011c70
 8002690:	24000004 	.word	0x24000004
 8002694:	24000000 	.word	0x24000000

08002698 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80026a0:	4b15      	ldr	r3, [pc, #84]	@ (80026f8 <HAL_InitTick+0x60>)
 80026a2:	781b      	ldrb	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d101      	bne.n	80026ac <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80026a8:	2301      	movs	r3, #1
 80026aa:	e021      	b.n	80026f0 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80026ac:	4b13      	ldr	r3, [pc, #76]	@ (80026fc <HAL_InitTick+0x64>)
 80026ae:	681a      	ldr	r2, [r3, #0]
 80026b0:	4b11      	ldr	r3, [pc, #68]	@ (80026f8 <HAL_InitTick+0x60>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	4619      	mov	r1, r3
 80026b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80026ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80026be:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c2:	4618      	mov	r0, r3
 80026c4:	f001 ffeb 	bl	800469e <HAL_SYSTICK_Config>
 80026c8:	4603      	mov	r3, r0
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d001      	beq.n	80026d2 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 80026ce:	2301      	movs	r3, #1
 80026d0:	e00e      	b.n	80026f0 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2b0f      	cmp	r3, #15
 80026d6:	d80a      	bhi.n	80026ee <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026d8:	2200      	movs	r2, #0
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	f04f 30ff 	mov.w	r0, #4294967295
 80026e0:	f001 ffb5 	bl	800464e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80026e4:	4a06      	ldr	r2, [pc, #24]	@ (8002700 <HAL_InitTick+0x68>)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
 80026ec:	e000      	b.n	80026f0 <HAL_InitTick+0x58>
    return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	2400002c 	.word	0x2400002c
 80026fc:	24000000 	.word	0x24000000
 8002700:	24000028 	.word	0x24000028

08002704 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002708:	4b06      	ldr	r3, [pc, #24]	@ (8002724 <HAL_IncTick+0x20>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	461a      	mov	r2, r3
 800270e:	4b06      	ldr	r3, [pc, #24]	@ (8002728 <HAL_IncTick+0x24>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4413      	add	r3, r2
 8002714:	4a04      	ldr	r2, [pc, #16]	@ (8002728 <HAL_IncTick+0x24>)
 8002716:	6013      	str	r3, [r2, #0]
}
 8002718:	bf00      	nop
 800271a:	46bd      	mov	sp, r7
 800271c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002720:	4770      	bx	lr
 8002722:	bf00      	nop
 8002724:	2400002c 	.word	0x2400002c
 8002728:	240008dc 	.word	0x240008dc

0800272c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002730:	4b03      	ldr	r3, [pc, #12]	@ (8002740 <HAL_GetREVID+0x14>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	0c1b      	lsrs	r3, r3, #16
}
 8002736:	4618      	mov	r0, r3
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr
 8002740:	5c001000 	.word	0x5c001000

08002744 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	431a      	orrs	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	609a      	str	r2, [r3, #8]
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
 8002772:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	431a      	orrs	r2, r3
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	609a      	str	r2, [r3, #8]
}
 8002784:	bf00      	nop
 8002786:	370c      	adds	r7, #12
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <LL_ADC_SetChannelPreselection>:
  *         @arg @ref LL_ADC_CHANNEL_18
  *         @arg @ref LL_ADC_CHANNEL_19
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelPreselection(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b087      	sub	sp, #28
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	6039      	str	r1, [r7, #0]
      /* ADC channels preselection */
      ADCx->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    ADCx->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB(Channel) & 0x1FUL));
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d107      	bne.n	80027d0 <LL_ADC_SetChannelPreselection+0x24>
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	0e9b      	lsrs	r3, r3, #26
 80027c4:	f003 031f 	and.w	r3, r3, #31
 80027c8:	2201      	movs	r2, #1
 80027ca:	fa02 f303 	lsl.w	r3, r2, r3
 80027ce:	e015      	b.n	80027fc <LL_ADC_SetChannelPreselection+0x50>
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	fa93 f3a3 	rbit	r3, r3
 80027da:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <LL_ADC_SetChannelPreselection+0x3e>
  {
    return 32U;
 80027e6:	2320      	movs	r3, #32
 80027e8:	e003      	b.n	80027f2 <LL_ADC_SetChannelPreselection+0x46>
  }
  return __builtin_clz(value);
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	f003 031f 	and.w	r3, r3, #31
 80027f6:	2201      	movs	r2, #1
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	69d2      	ldr	r2, [r2, #28]
 8002800:	431a      	orrs	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	61da      	str	r2, [r3, #28]
#endif /* ADC_VER_V5_V90 */
}
 8002806:	bf00      	nop
 8002808:	371c      	adds	r7, #28
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr

08002812 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002812:	b480      	push	{r7}
 8002814:	b087      	sub	sp, #28
 8002816:	af00      	add	r7, sp, #0
 8002818:	60f8      	str	r0, [r7, #12]
 800281a:	60b9      	str	r1, [r7, #8]
 800281c:	607a      	str	r2, [r7, #4]
 800281e:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	3360      	adds	r3, #96	@ 0x60
 8002824:	461a      	mov	r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f003 41f8 	and.w	r1, r3, #2080374784	@ 0x7c000000
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	430b      	orrs	r3, r1
 8002840:	431a      	orrs	r2, r3
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002846:	bf00      	nop
 8002848:	371c      	adds	r7, #28
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002852:	b480      	push	{r7}
 8002854:	b085      	sub	sp, #20
 8002856:	af00      	add	r7, sp, #0
 8002858:	60f8      	str	r0, [r7, #12]
 800285a:	60b9      	str	r1, [r7, #8]
 800285c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	691b      	ldr	r3, [r3, #16]
 8002862:	f423 42f0 	bic.w	r2, r3, #30720	@ 0x7800
 8002866:	68bb      	ldr	r3, [r7, #8]
 8002868:	f003 031f 	and.w	r3, r3, #31
 800286c:	6879      	ldr	r1, [r7, #4]
 800286e:	fa01 f303 	lsl.w	r3, r1, r3
 8002872:	431a      	orrs	r2, r3
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	611a      	str	r2, [r3, #16]
}
 8002878:	bf00      	nop
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002884:	b480      	push	{r7}
 8002886:	b087      	sub	sp, #28
 8002888:	af00      	add	r7, sp, #0
 800288a:	60f8      	str	r0, [r7, #12]
 800288c:	60b9      	str	r1, [r7, #8]
 800288e:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	3360      	adds	r3, #96	@ 0x60
 8002894:	461a      	mov	r2, r3
 8002896:	68bb      	ldr	r3, [r7, #8]
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4413      	add	r3, r2
 800289c:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	431a      	orrs	r2, r3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	601a      	str	r2, [r3, #0]
  }
}
 80028ae:	bf00      	nop
 80028b0:	371c      	adds	r7, #28
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d101      	bne.n	80028d2 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80028ce:	2301      	movs	r3, #1
 80028d0:	e000      	b.n	80028d4 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	3330      	adds	r3, #48	@ 0x30
 80028f0:	461a      	mov	r2, r3
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	0a1b      	lsrs	r3, r3, #8
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	f003 030c 	and.w	r3, r3, #12
 80028fc:	4413      	add	r3, r2
 80028fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	f003 031f 	and.w	r3, r3, #31
 800290a:	211f      	movs	r1, #31
 800290c:	fa01 f303 	lsl.w	r3, r1, r3
 8002910:	43db      	mvns	r3, r3
 8002912:	401a      	ands	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	0e9b      	lsrs	r3, r3, #26
 8002918:	f003 011f 	and.w	r1, r3, #31
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	f003 031f 	and.w	r3, r3, #31
 8002922:	fa01 f303 	lsl.w	r3, r1, r3
 8002926:	431a      	orrs	r2, r3
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800292c:	bf00      	nop
 800292e:	371c      	adds	r7, #28
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <LL_ADC_REG_SetDataTransferMode>:
  * @param  ADCx ADC instance
  * @param  DataTransferMode Select Data Management configuration
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetDataTransferMode(ADC_TypeDef *ADCx, uint32_t DataTransferMode)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR, ADC_CFGR_DMNGT, DataTransferMode);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	68db      	ldr	r3, [r3, #12]
 8002946:	f023 0203 	bic.w	r2, r3, #3
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	431a      	orrs	r2, r3
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	60da      	str	r2, [r3, #12]
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800296a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002972:	2301      	movs	r3, #1
 8002974:	e000      	b.n	8002978 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8002976:	2300      	movs	r3, #0
}
 8002978:	4618      	mov	r0, r3
 800297a:	370c      	adds	r7, #12
 800297c:	46bd      	mov	sp, r7
 800297e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002982:	4770      	bx	lr

08002984 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	60b9      	str	r1, [r7, #8]
 800298e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	3314      	adds	r3, #20
 8002994:	461a      	mov	r2, r3
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	0e5b      	lsrs	r3, r3, #25
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	f003 0304 	and.w	r3, r3, #4
 80029a0:	4413      	add	r3, r2
 80029a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	681a      	ldr	r2, [r3, #0]
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	0d1b      	lsrs	r3, r3, #20
 80029ac:	f003 031f 	and.w	r3, r3, #31
 80029b0:	2107      	movs	r1, #7
 80029b2:	fa01 f303 	lsl.w	r3, r1, r3
 80029b6:	43db      	mvns	r3, r3
 80029b8:	401a      	ands	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	0d1b      	lsrs	r3, r3, #20
 80029be:	f003 031f 	and.w	r3, r3, #31
 80029c2:	6879      	ldr	r1, [r7, #4]
 80029c4:	fa01 f303 	lsl.w	r3, r1, r3
 80029c8:	431a      	orrs	r2, r3
 80029ca:	697b      	ldr	r3, [r7, #20]
 80029cc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029ce:	bf00      	nop
 80029d0:	371c      	adds	r7, #28
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
	...

080029dc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029dc:	b480      	push	{r7}
 80029de:	b085      	sub	sp, #20
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	60f8      	str	r0, [r7, #12]
 80029e4:	60b9      	str	r1, [r7, #8]
 80029e6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	@ 0xc0
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80029f4:	43db      	mvns	r3, r3
 80029f6:	401a      	ands	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	f003 0318 	and.w	r3, r3, #24
 80029fe:	4908      	ldr	r1, [pc, #32]	@ (8002a20 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a00:	40d9      	lsrs	r1, r3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	400b      	ands	r3, r1
 8002a06:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002a0a:	431a      	orrs	r2, r3
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8002a12:	bf00      	nop
 8002a14:	3714      	adds	r7, #20
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr
 8002a1e:	bf00      	nop
 8002a20:	000fffff 	.word	0x000fffff

08002a24 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f003 031f 	and.w	r3, r3, #31
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b083      	sub	sp, #12
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689a      	ldr	r2, [r3, #8]
 8002a68:	4b04      	ldr	r3, [pc, #16]	@ (8002a7c <LL_ADC_DisableDeepPowerDown+0x20>)
 8002a6a:	4013      	ands	r3, r2
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	6093      	str	r3, [r2, #8]
}
 8002a70:	bf00      	nop
 8002a72:	370c      	adds	r7, #12
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	5fffffc0 	.word	0x5fffffc0

08002a80 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a94:	d101      	bne.n	8002a9a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	370c      	adds	r7, #12
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b083      	sub	sp, #12
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	689a      	ldr	r2, [r3, #8]
 8002ab4:	4b05      	ldr	r3, [pc, #20]	@ (8002acc <LL_ADC_EnableInternalRegulator+0x24>)
 8002ab6:	4013      	ands	r3, r2
 8002ab8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ac0:	bf00      	nop
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	6fffffc0 	.word	0x6fffffc0

08002ad0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ae0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002ae4:	d101      	bne.n	8002aea <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	e000      	b.n	8002aec <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002aea:	2300      	movs	r3, #0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	689a      	ldr	r2, [r3, #8]
 8002b04:	4b05      	ldr	r3, [pc, #20]	@ (8002b1c <LL_ADC_Enable+0x24>)
 8002b06:	4013      	ands	r3, r2
 8002b08:	f043 0201 	orr.w	r2, r3, #1
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b10:	bf00      	nop
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr
 8002b1c:	7fffffc0 	.word	0x7fffffc0

08002b20 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	4b05      	ldr	r3, [pc, #20]	@ (8002b44 <LL_ADC_Disable+0x24>)
 8002b2e:	4013      	ands	r3, r2
 8002b30:	f043 0202 	orr.w	r2, r3, #2
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	7fffffc0 	.word	0x7fffffc0

08002b48 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	689b      	ldr	r3, [r3, #8]
 8002b54:	f003 0301 	and.w	r3, r3, #1
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d101      	bne.n	8002b60 <LL_ADC_IsEnabled+0x18>
 8002b5c:	2301      	movs	r3, #1
 8002b5e:	e000      	b.n	8002b62 <LL_ADC_IsEnabled+0x1a>
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	370c      	adds	r7, #12
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr

08002b6e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	b083      	sub	sp, #12
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b02      	cmp	r3, #2
 8002b80:	d101      	bne.n	8002b86 <LL_ADC_IsDisableOngoing+0x18>
 8002b82:	2301      	movs	r3, #1
 8002b84:	e000      	b.n	8002b88 <LL_ADC_IsDisableOngoing+0x1a>
 8002b86:	2300      	movs	r3, #0
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	370c      	adds	r7, #12
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b92:	4770      	bx	lr

08002b94 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <LL_ADC_REG_StartConversion+0x24>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	f043 0204 	orr.w	r2, r3, #4
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002bac:	bf00      	nop
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr
 8002bb8:	7fffffc0 	.word	0x7fffffc0

08002bbc <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	b083      	sub	sp, #12
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	4b05      	ldr	r3, [pc, #20]	@ (8002be0 <LL_ADC_REG_StopConversion+0x24>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	f043 0210 	orr.w	r2, r3, #16
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr
 8002be0:	7fffffc0 	.word	0x7fffffc0

08002be4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	689b      	ldr	r3, [r3, #8]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d101      	bne.n	8002bfc <LL_ADC_REG_IsConversionOngoing+0x18>
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e000      	b.n	8002bfe <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002bfc:	2300      	movs	r3, #0
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	370c      	adds	r7, #12
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b083      	sub	sp, #12
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	4b05      	ldr	r3, [pc, #20]	@ (8002c30 <LL_ADC_INJ_StopConversion+0x24>)
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	f043 0220 	orr.w	r2, r3, #32
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002c24:	bf00      	nop
 8002c26:	370c      	adds	r7, #12
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2e:	4770      	bx	lr
 8002c30:	7fffffc0 	.word	0x7fffffc0

08002c34 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	689b      	ldr	r3, [r3, #8]
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	2b08      	cmp	r3, #8
 8002c46:	d101      	bne.n	8002c4c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c48:	2301      	movs	r3, #1
 8002c4a:	e000      	b.n	8002c4e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c4c:	2300      	movs	r3, #0
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	370c      	adds	r7, #12
 8002c52:	46bd      	mov	sp, r7
 8002c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c58:	4770      	bx	lr
	...

08002c5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c5c:	b590      	push	{r4, r7, lr}
 8002c5e:	b089      	sub	sp, #36	@ 0x24
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c64:	2300      	movs	r3, #0
 8002c66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e18f      	b.n	8002f96 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d109      	bne.n	8002c98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff fa6d 	bl	8002164 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2200      	movs	r2, #0
 8002c94:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff feef 	bl	8002a80 <LL_ADC_IsDeepPowerDownEnabled>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d004      	beq.n	8002cb2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f7ff fed5 	bl	8002a5c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f7ff ff0a 	bl	8002ad0 <LL_ADC_IsInternalRegulatorEnabled>
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d114      	bne.n	8002cec <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f7ff feee 	bl	8002aa8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002ccc:	4b87      	ldr	r3, [pc, #540]	@ (8002eec <HAL_ADC_Init+0x290>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	099b      	lsrs	r3, r3, #6
 8002cd2:	4a87      	ldr	r2, [pc, #540]	@ (8002ef0 <HAL_ADC_Init+0x294>)
 8002cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cd8:	099b      	lsrs	r3, r3, #6
 8002cda:	3301      	adds	r3, #1
 8002cdc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002cde:	e002      	b.n	8002ce6 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	3b01      	subs	r3, #1
 8002ce4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d1f9      	bne.n	8002ce0 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	f7ff feed 	bl	8002ad0 <LL_ADC_IsInternalRegulatorEnabled>
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d10d      	bne.n	8002d18 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d00:	f043 0210 	orr.w	r2, r3, #16
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d0c:	f043 0201 	orr.w	r2, r3, #1
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f7ff ff61 	bl	8002be4 <LL_ADC_REG_IsConversionOngoing>
 8002d22:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d28:	f003 0310 	and.w	r3, r3, #16
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	f040 8129 	bne.w	8002f84 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f040 8125 	bne.w	8002f84 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d3e:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d42:	f043 0202 	orr.w	r2, r3, #2
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7ff fefa 	bl	8002b48 <LL_ADC_IsEnabled>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d136      	bne.n	8002dc8 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	4a65      	ldr	r2, [pc, #404]	@ (8002ef4 <HAL_ADC_Init+0x298>)
 8002d60:	4293      	cmp	r3, r2
 8002d62:	d004      	beq.n	8002d6e <HAL_ADC_Init+0x112>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a63      	ldr	r2, [pc, #396]	@ (8002ef8 <HAL_ADC_Init+0x29c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d10e      	bne.n	8002d8c <HAL_ADC_Init+0x130>
 8002d6e:	4861      	ldr	r0, [pc, #388]	@ (8002ef4 <HAL_ADC_Init+0x298>)
 8002d70:	f7ff feea 	bl	8002b48 <LL_ADC_IsEnabled>
 8002d74:	4604      	mov	r4, r0
 8002d76:	4860      	ldr	r0, [pc, #384]	@ (8002ef8 <HAL_ADC_Init+0x29c>)
 8002d78:	f7ff fee6 	bl	8002b48 <LL_ADC_IsEnabled>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	4323      	orrs	r3, r4
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	bf0c      	ite	eq
 8002d84:	2301      	moveq	r3, #1
 8002d86:	2300      	movne	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	e008      	b.n	8002d9e <HAL_ADC_Init+0x142>
 8002d8c:	485b      	ldr	r0, [pc, #364]	@ (8002efc <HAL_ADC_Init+0x2a0>)
 8002d8e:	f7ff fedb 	bl	8002b48 <LL_ADC_IsEnabled>
 8002d92:	4603      	mov	r3, r0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	bf0c      	ite	eq
 8002d98:	2301      	moveq	r3, #1
 8002d9a:	2300      	movne	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d012      	beq.n	8002dc8 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	4a53      	ldr	r2, [pc, #332]	@ (8002ef4 <HAL_ADC_Init+0x298>)
 8002da8:	4293      	cmp	r3, r2
 8002daa:	d004      	beq.n	8002db6 <HAL_ADC_Init+0x15a>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	4a51      	ldr	r2, [pc, #324]	@ (8002ef8 <HAL_ADC_Init+0x29c>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d101      	bne.n	8002dba <HAL_ADC_Init+0x15e>
 8002db6:	4a52      	ldr	r2, [pc, #328]	@ (8002f00 <HAL_ADC_Init+0x2a4>)
 8002db8:	e000      	b.n	8002dbc <HAL_ADC_Init+0x160>
 8002dba:	4a52      	ldr	r2, [pc, #328]	@ (8002f04 <HAL_ADC_Init+0x2a8>)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	4610      	mov	r0, r2
 8002dc4:	f7ff fcbe 	bl	8002744 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8002dc8:	f7ff fcb0 	bl	800272c <HAL_GetREVID>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	f241 0203 	movw	r2, #4099	@ 0x1003
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d914      	bls.n	8002e00 <HAL_ADC_Init+0x1a4>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	2b10      	cmp	r3, #16
 8002ddc:	d110      	bne.n	8002e00 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	7d5b      	ldrb	r3, [r3, #21]
 8002de2:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002de8:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002dee:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	7f1b      	ldrb	r3, [r3, #28]
 8002df4:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8002df6:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002df8:	f043 030c 	orr.w	r3, r3, #12
 8002dfc:	61bb      	str	r3, [r7, #24]
 8002dfe:	e00d      	b.n	8002e1c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	7d5b      	ldrb	r3, [r3, #21]
 8002e04:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e0a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8002e10:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	7f1b      	ldrb	r3, [r3, #28]
 8002e16:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	7f1b      	ldrb	r3, [r3, #28]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d106      	bne.n	8002e32 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6a1b      	ldr	r3, [r3, #32]
 8002e28:	3b01      	subs	r3, #1
 8002e2a:	045b      	lsls	r3, r3, #17
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e3e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e46:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	68da      	ldr	r2, [r3, #12]
 8002e54:	4b2c      	ldr	r3, [pc, #176]	@ (8002f08 <HAL_ADC_Init+0x2ac>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6812      	ldr	r2, [r2, #0]
 8002e5c:	69b9      	ldr	r1, [r7, #24]
 8002e5e:	430b      	orrs	r3, r1
 8002e60:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff febc 	bl	8002be4 <LL_ADC_REG_IsConversionOngoing>
 8002e6c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7ff fede 	bl	8002c34 <LL_ADC_INJ_IsConversionOngoing>
 8002e78:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e7a:	693b      	ldr	r3, [r7, #16]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d15f      	bne.n	8002f40 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d15c      	bne.n	8002f40 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	7d1b      	ldrb	r3, [r3, #20]
 8002e8a:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
      tmpCFGR = (
 8002e90:	4313      	orrs	r3, r2
 8002e92:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	68da      	ldr	r2, [r3, #12]
 8002e9a:	4b1c      	ldr	r3, [pc, #112]	@ (8002f0c <HAL_ADC_Init+0x2b0>)
 8002e9c:	4013      	ands	r3, r2
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6812      	ldr	r2, [r2, #0]
 8002ea2:	69b9      	ldr	r1, [r7, #24]
 8002ea4:	430b      	orrs	r3, r1
 8002ea6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002eae:	2b01      	cmp	r3, #1
 8002eb0:	d130      	bne.n	8002f14 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002eb6:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	691a      	ldr	r2, [r3, #16]
 8002ebe:	4b14      	ldr	r3, [pc, #80]	@ (8002f10 <HAL_ADC_Init+0x2b4>)
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ec6:	3a01      	subs	r2, #1
 8002ec8:	0411      	lsls	r1, r2, #16
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ece:	4311      	orrs	r1, r2
 8002ed0:	687a      	ldr	r2, [r7, #4]
 8002ed2:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8002ed4:	4311      	orrs	r1, r2
 8002ed6:	687a      	ldr	r2, [r7, #4]
 8002ed8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002eda:	430a      	orrs	r2, r1
 8002edc:	431a      	orrs	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f042 0201 	orr.w	r2, r2, #1
 8002ee6:	611a      	str	r2, [r3, #16]
 8002ee8:	e01c      	b.n	8002f24 <HAL_ADC_Init+0x2c8>
 8002eea:	bf00      	nop
 8002eec:	24000000 	.word	0x24000000
 8002ef0:	053e2d63 	.word	0x053e2d63
 8002ef4:	40022000 	.word	0x40022000
 8002ef8:	40022100 	.word	0x40022100
 8002efc:	58026000 	.word	0x58026000
 8002f00:	40022300 	.word	0x40022300
 8002f04:	58026300 	.word	0x58026300
 8002f08:	fff0c003 	.word	0xfff0c003
 8002f0c:	ffffbffc 	.word	0xffffbffc
 8002f10:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	691a      	ldr	r2, [r3, #16]
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0201 	bic.w	r2, r2, #1
 8002f22:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f023 4170 	bic.w	r1, r3, #4026531840	@ 0xf0000000
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	430a      	orrs	r2, r1
 8002f38:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f001 f8d8 	bl	80040f0 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	d10c      	bne.n	8002f62 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f4e:	f023 010f 	bic.w	r1, r3, #15
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	699b      	ldr	r3, [r3, #24]
 8002f56:	1e5a      	subs	r2, r3, #1
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	430a      	orrs	r2, r1
 8002f5e:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f60:	e007      	b.n	8002f72 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 020f 	bic.w	r2, r2, #15
 8002f70:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f76:	f023 0303 	bic.w	r3, r3, #3
 8002f7a:	f043 0201 	orr.w	r2, r3, #1
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	655a      	str	r2, [r3, #84]	@ 0x54
 8002f82:	e007      	b.n	8002f94 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002f88:	f043 0210 	orr.w	r2, r3, #16
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f94:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3724      	adds	r7, #36	@ 0x24
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd90      	pop	{r4, r7, pc}
 8002f9e:	bf00      	nop

08002fa0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b086      	sub	sp, #24
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	60f8      	str	r0, [r7, #12]
 8002fa8:	60b9      	str	r1, [r7, #8]
 8002faa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a55      	ldr	r2, [pc, #340]	@ (8003108 <HAL_ADC_Start_DMA+0x168>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d004      	beq.n	8002fc0 <HAL_ADC_Start_DMA+0x20>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a54      	ldr	r2, [pc, #336]	@ (800310c <HAL_ADC_Start_DMA+0x16c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d101      	bne.n	8002fc4 <HAL_ADC_Start_DMA+0x24>
 8002fc0:	4b53      	ldr	r3, [pc, #332]	@ (8003110 <HAL_ADC_Start_DMA+0x170>)
 8002fc2:	e000      	b.n	8002fc6 <HAL_ADC_Start_DMA+0x26>
 8002fc4:	4b53      	ldr	r3, [pc, #332]	@ (8003114 <HAL_ADC_Start_DMA+0x174>)
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff fd2c 	bl	8002a24 <LL_ADC_GetMultimode>
 8002fcc:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	f7ff fe06 	bl	8002be4 <LL_ADC_REG_IsConversionOngoing>
 8002fd8:	4603      	mov	r3, r0
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f040 808c 	bne.w	80030f8 <HAL_ADC_Start_DMA+0x158>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d101      	bne.n	8002fee <HAL_ADC_Start_DMA+0x4e>
 8002fea:	2302      	movs	r3, #2
 8002fec:	e087      	b.n	80030fe <HAL_ADC_Start_DMA+0x15e>
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d005      	beq.n	8003008 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	2b05      	cmp	r3, #5
 8003000:	d002      	beq.n	8003008 <HAL_ADC_Start_DMA+0x68>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	2b09      	cmp	r3, #9
 8003006:	d170      	bne.n	80030ea <HAL_ADC_Start_DMA+0x14a>
       )
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003008:	68f8      	ldr	r0, [r7, #12]
 800300a:	f000 fef3 	bl	8003df4 <ADC_Enable>
 800300e:	4603      	mov	r3, r0
 8003010:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003012:	7dfb      	ldrb	r3, [r7, #23]
 8003014:	2b00      	cmp	r3, #0
 8003016:	d163      	bne.n	80030e0 <HAL_ADC_Start_DMA+0x140>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800301c:	4b3e      	ldr	r3, [pc, #248]	@ (8003118 <HAL_ADC_Start_DMA+0x178>)
 800301e:	4013      	ands	r3, r2
 8003020:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_REG_BUSY);

        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a37      	ldr	r2, [pc, #220]	@ (800310c <HAL_ADC_Start_DMA+0x16c>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d002      	beq.n	8003038 <HAL_ADC_Start_DMA+0x98>
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	e000      	b.n	800303a <HAL_ADC_Start_DMA+0x9a>
 8003038:	4b33      	ldr	r3, [pc, #204]	@ (8003108 <HAL_ADC_Start_DMA+0x168>)
 800303a:	68fa      	ldr	r2, [r7, #12]
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	4293      	cmp	r3, r2
 8003040:	d002      	beq.n	8003048 <HAL_ADC_Start_DMA+0xa8>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d105      	bne.n	8003054 <HAL_ADC_Start_DMA+0xb4>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800304c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	655a      	str	r2, [r3, #84]	@ 0x54
        }

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003058:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800305c:	2b00      	cmp	r3, #0
 800305e:	d006      	beq.n	800306e <HAL_ADC_Start_DMA+0xce>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003064:	f023 0206 	bic.w	r2, r3, #6
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	659a      	str	r2, [r3, #88]	@ 0x58
 800306c:	e002      	b.n	8003074 <HAL_ADC_Start_DMA+0xd4>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2200      	movs	r2, #0
 8003072:	659a      	str	r2, [r3, #88]	@ 0x58
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003078:	4a28      	ldr	r2, [pc, #160]	@ (800311c <HAL_ADC_Start_DMA+0x17c>)
 800307a:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003080:	4a27      	ldr	r2, [pc, #156]	@ (8003120 <HAL_ADC_Start_DMA+0x180>)
 8003082:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003088:	4a26      	ldr	r2, [pc, #152]	@ (8003124 <HAL_ADC_Start_DMA+0x184>)
 800308a:	64da      	str	r2, [r3, #76]	@ 0x4c
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	221c      	movs	r2, #28
 8003092:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f042 0210 	orr.w	r2, r2, #16
 80030aa:	605a      	str	r2, [r3, #4]
        {
          LL_ADC_REG_SetDataTransferMode(hadc->Instance, ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
        }

#else
        LL_ADC_REG_SetDataTransferMode(hadc->Instance, (uint32_t)hadc->Init.ConversionDataManagement);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681a      	ldr	r2, [r3, #0]
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030b4:	4619      	mov	r1, r3
 80030b6:	4610      	mov	r0, r2
 80030b8:	f7ff fc3e 	bl	8002938 <LL_ADC_REG_SetDataTransferMode>
#endif


        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	3340      	adds	r3, #64	@ 0x40
 80030c6:	4619      	mov	r1, r3
 80030c8:	68ba      	ldr	r2, [r7, #8]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f001 fe50 	bl	8004d70 <HAL_DMA_Start_IT>
 80030d0:	4603      	mov	r3, r0
 80030d2:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7ff fd5b 	bl	8002b94 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80030de:	e00d      	b.n	80030fc <HAL_ADC_Start_DMA+0x15c>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
      if (tmp_hal_status == HAL_OK)
 80030e8:	e008      	b.n	80030fc <HAL_ADC_Start_DMA+0x15c>
      }

    }
    else
    {
      tmp_hal_status = HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80030f6:	e001      	b.n	80030fc <HAL_ADC_Start_DMA+0x15c>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030f8:	2302      	movs	r3, #2
 80030fa:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80030fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80030fe:	4618      	mov	r0, r3
 8003100:	3718      	adds	r7, #24
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
 8003106:	bf00      	nop
 8003108:	40022000 	.word	0x40022000
 800310c:	40022100 	.word	0x40022100
 8003110:	40022300 	.word	0x40022300
 8003114:	58026300 	.word	0x58026300
 8003118:	fffff0fe 	.word	0xfffff0fe
 800311c:	08003fc7 	.word	0x08003fc7
 8003120:	0800409f 	.word	0x0800409f
 8003124:	080040bb 	.word	0x080040bb

08003128 <HAL_ADC_Stop_DMA>:
  *         For multimode, the dedicated HAL_ADCEx_MultiModeStop_DMA() API must be used.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef *hadc)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003136:	2b01      	cmp	r3, #1
 8003138:	d101      	bne.n	800313e <HAL_ADC_Stop_DMA+0x16>
 800313a:	2302      	movs	r3, #2
 800313c:	e04f      	b.n	80031de <HAL_ADC_Stop_DMA+0xb6>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2201      	movs	r2, #1
 8003142:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* 1. Stop potential ADC group regular conversion on going */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8003146:	2103      	movs	r1, #3
 8003148:	6878      	ldr	r0, [r7, #4]
 800314a:	f000 fd97 	bl	8003c7c <ADC_ConversionStop>
 800314e:	4603      	mov	r3, r0
 8003150:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8003152:	7bfb      	ldrb	r3, [r7, #15]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d13d      	bne.n	80031d4 <HAL_ADC_Stop_DMA+0xac>
  {
    /* Disable ADC DMA (ADC DMA configuration of continuous requests is kept) */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1, 0UL);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f022 0203 	bic.w	r2, r2, #3
 8003166:	60da      	str	r2, [r3, #12]

    /* Disable the DMA channel (in case of DMA in circular mode or stop       */
    /* while DMA transfer is on going)                                        */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800316c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003170:	b2db      	uxtb	r3, r3
 8003172:	2b02      	cmp	r3, #2
 8003174:	d10f      	bne.n	8003196 <HAL_ADC_Stop_DMA+0x6e>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800317a:	4618      	mov	r0, r3
 800317c:	f002 f862 	bl	8005244 <HAL_DMA_Abort>
 8003180:	4603      	mov	r3, r0
 8003182:	73fb      	strb	r3, [r7, #15]

      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status != HAL_OK)
 8003184:	7bfb      	ldrb	r3, [r7, #15]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d005      	beq.n	8003196 <HAL_ADC_Stop_DMA+0x6e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800318e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }

    /* Disable ADC overrun interrupt */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 0210 	bic.w	r2, r2, #16
 80031a4:	605a      	str	r2, [r3, #4]

    /* 2. Disable the ADC peripheral */
    /* Update "tmp_hal_status" only if DMA channel disabling passed,          */
    /* to keep in memory a potential failing status.                          */
    if (tmp_hal_status == HAL_OK)
 80031a6:	7bfb      	ldrb	r3, [r7, #15]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d105      	bne.n	80031b8 <HAL_ADC_Stop_DMA+0x90>
    {
      tmp_hal_status = ADC_Disable(hadc);
 80031ac:	6878      	ldr	r0, [r7, #4]
 80031ae:	f000 feab 	bl	8003f08 <ADC_Disable>
 80031b2:	4603      	mov	r3, r0
 80031b4:	73fb      	strb	r3, [r7, #15]
 80031b6:	e002      	b.n	80031be <HAL_ADC_Stop_DMA+0x96>
    }
    else
    {
      (void)ADC_Disable(hadc);
 80031b8:	6878      	ldr	r0, [r7, #4]
 80031ba:	f000 fea5 	bl	8003f08 <ADC_Disable>
    }

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80031be:	7bfb      	ldrb	r3, [r7, #15]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d107      	bne.n	80031d4 <HAL_ADC_Stop_DMA+0xac>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80031c8:	4b07      	ldr	r3, [pc, #28]	@ (80031e8 <HAL_ADC_Stop_DMA+0xc0>)
 80031ca:	4013      	ands	r3, r2
 80031cc:	f043 0201 	orr.w	r2, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	655a      	str	r2, [r3, #84]	@ 0x54
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 80031dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031de:	4618      	mov	r0, r3
 80031e0:	3710      	adds	r7, #16
 80031e2:	46bd      	mov	sp, r7
 80031e4:	bd80      	pop	{r7, pc}
 80031e6:	bf00      	nop
 80031e8:	ffffeefe 	.word	0xffffeefe

080031ec <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b08a      	sub	sp, #40	@ 0x28
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80031f4:	2300      	movs	r3, #0
 80031f6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a87      	ldr	r2, [pc, #540]	@ (800342c <HAL_ADC_IRQHandler+0x240>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d004      	beq.n	800321c <HAL_ADC_IRQHandler+0x30>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a86      	ldr	r2, [pc, #536]	@ (8003430 <HAL_ADC_IRQHandler+0x244>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d101      	bne.n	8003220 <HAL_ADC_IRQHandler+0x34>
 800321c:	4b85      	ldr	r3, [pc, #532]	@ (8003434 <HAL_ADC_IRQHandler+0x248>)
 800321e:	e000      	b.n	8003222 <HAL_ADC_IRQHandler+0x36>
 8003220:	4b85      	ldr	r3, [pc, #532]	@ (8003438 <HAL_ADC_IRQHandler+0x24c>)
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fbfe 	bl	8002a24 <LL_ADC_GetMultimode>
 8003228:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800322a:	69fb      	ldr	r3, [r7, #28]
 800322c:	f003 0302 	and.w	r3, r3, #2
 8003230:	2b00      	cmp	r3, #0
 8003232:	d017      	beq.n	8003264 <HAL_ADC_IRQHandler+0x78>
 8003234:	69bb      	ldr	r3, [r7, #24]
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d012      	beq.n	8003264 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003242:	f003 0310 	and.w	r3, r3, #16
 8003246:	2b00      	cmp	r3, #0
 8003248:	d105      	bne.n	8003256 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800324e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	655a      	str	r2, [r3, #84]	@ 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f001 f914 	bl	8004484 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2202      	movs	r2, #2
 8003262:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003264:	69fb      	ldr	r3, [r7, #28]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b00      	cmp	r3, #0
 800326c:	d004      	beq.n	8003278 <HAL_ADC_IRQHandler+0x8c>
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	2b00      	cmp	r3, #0
 8003276:	d10a      	bne.n	800328e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800327e:	2b00      	cmp	r3, #0
 8003280:	f000 8083 	beq.w	800338a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	2b00      	cmp	r3, #0
 800328c:	d07d      	beq.n	800338a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	2b00      	cmp	r3, #0
 8003298:	d105      	bne.n	80032a6 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800329e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7ff fb05 	bl	80028ba <LL_ADC_REG_IsTriggerSourceSWStart>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d062      	beq.n	800337c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a5d      	ldr	r2, [pc, #372]	@ (8003430 <HAL_ADC_IRQHandler+0x244>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d002      	beq.n	80032c6 <HAL_ADC_IRQHandler+0xda>
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	e000      	b.n	80032c8 <HAL_ADC_IRQHandler+0xdc>
 80032c6:	4b59      	ldr	r3, [pc, #356]	@ (800342c <HAL_ADC_IRQHandler+0x240>)
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	6812      	ldr	r2, [r2, #0]
 80032cc:	4293      	cmp	r3, r2
 80032ce:	d008      	beq.n	80032e2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d005      	beq.n	80032e2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2b05      	cmp	r3, #5
 80032da:	d002      	beq.n	80032e2 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	2b09      	cmp	r3, #9
 80032e0:	d104      	bne.n	80032ec <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	623b      	str	r3, [r7, #32]
 80032ea:	e00c      	b.n	8003306 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a4f      	ldr	r2, [pc, #316]	@ (8003430 <HAL_ADC_IRQHandler+0x244>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d002      	beq.n	80032fc <HAL_ADC_IRQHandler+0x110>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	e000      	b.n	80032fe <HAL_ADC_IRQHandler+0x112>
 80032fc:	4b4b      	ldr	r3, [pc, #300]	@ (800342c <HAL_ADC_IRQHandler+0x240>)
 80032fe:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003300:	693b      	ldr	r3, [r7, #16]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800330c:	2b00      	cmp	r3, #0
 800330e:	d135      	bne.n	800337c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f003 0308 	and.w	r3, r3, #8
 800331a:	2b08      	cmp	r3, #8
 800331c:	d12e      	bne.n	800337c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff fc5e 	bl	8002be4 <LL_ADC_REG_IsConversionOngoing>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d11a      	bne.n	8003364 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 020c 	bic.w	r2, r2, #12
 800333c:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003342:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	655a      	str	r2, [r3, #84]	@ 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800334e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d112      	bne.n	800337c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800335a:	f043 0201 	orr.w	r2, r3, #1
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	655a      	str	r2, [r3, #84]	@ 0x54
 8003362:	e00b      	b.n	800337c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003368:	f043 0210 	orr.w	r2, r3, #16
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003374:	f043 0201 	orr.w	r2, r3, #1
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	659a      	str	r2, [r3, #88]	@ 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7fe fec1 	bl	8002104 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	220c      	movs	r2, #12
 8003388:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	f003 0320 	and.w	r3, r3, #32
 8003390:	2b00      	cmp	r3, #0
 8003392:	d004      	beq.n	800339e <HAL_ADC_IRQHandler+0x1b2>
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	f003 0320 	and.w	r3, r3, #32
 800339a:	2b00      	cmp	r3, #0
 800339c:	d10b      	bne.n	80033b6 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	f000 80a0 	beq.w	80034ea <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	f000 809a 	beq.w	80034ea <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ba:	f003 0310 	and.w	r3, r3, #16
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d105      	bne.n	80033ce <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033c6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	655a      	str	r2, [r3, #84]	@ 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fac3 	bl	800295e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80033d8:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff fa6b 	bl	80028ba <LL_ADC_REG_IsTriggerSourceSWStart>
 80033e4:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a11      	ldr	r2, [pc, #68]	@ (8003430 <HAL_ADC_IRQHandler+0x244>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d002      	beq.n	80033f6 <HAL_ADC_IRQHandler+0x20a>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	e000      	b.n	80033f8 <HAL_ADC_IRQHandler+0x20c>
 80033f6:	4b0d      	ldr	r3, [pc, #52]	@ (800342c <HAL_ADC_IRQHandler+0x240>)
 80033f8:	687a      	ldr	r2, [r7, #4]
 80033fa:	6812      	ldr	r2, [r2, #0]
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d008      	beq.n	8003412 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d005      	beq.n	8003412 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	2b06      	cmp	r3, #6
 800340a:	d002      	beq.n	8003412 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	2b07      	cmp	r3, #7
 8003410:	d104      	bne.n	800341c <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	68db      	ldr	r3, [r3, #12]
 8003418:	623b      	str	r3, [r7, #32]
 800341a:	e014      	b.n	8003446 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a03      	ldr	r2, [pc, #12]	@ (8003430 <HAL_ADC_IRQHandler+0x244>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00a      	beq.n	800343c <HAL_ADC_IRQHandler+0x250>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	e008      	b.n	800343e <HAL_ADC_IRQHandler+0x252>
 800342c:	40022000 	.word	0x40022000
 8003430:	40022100 	.word	0x40022100
 8003434:	40022300 	.word	0x40022300
 8003438:	58026300 	.word	0x58026300
 800343c:	4b84      	ldr	r3, [pc, #528]	@ (8003650 <HAL_ADC_IRQHandler+0x464>)
 800343e:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d047      	beq.n	80034dc <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800344c:	6a3b      	ldr	r3, [r7, #32]
 800344e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003452:	2b00      	cmp	r3, #0
 8003454:	d007      	beq.n	8003466 <HAL_ADC_IRQHandler+0x27a>
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d03f      	beq.n	80034dc <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800345c:	6a3b      	ldr	r3, [r7, #32]
 800345e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003462:	2b00      	cmp	r3, #0
 8003464:	d13a      	bne.n	80034dc <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003470:	2b40      	cmp	r3, #64	@ 0x40
 8003472:	d133      	bne.n	80034dc <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003474:	6a3b      	ldr	r3, [r7, #32]
 8003476:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800347a:	2b00      	cmp	r3, #0
 800347c:	d12e      	bne.n	80034dc <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7ff fbd6 	bl	8002c34 <LL_ADC_INJ_IsConversionOngoing>
 8003488:	4603      	mov	r3, r0
 800348a:	2b00      	cmp	r3, #0
 800348c:	d11a      	bne.n	80034c4 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	685a      	ldr	r2, [r3, #4]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800349c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034a2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	655a      	str	r2, [r3, #84]	@ 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d112      	bne.n	80034dc <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034ba:	f043 0201 	orr.w	r2, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	655a      	str	r2, [r3, #84]	@ 0x54
 80034c2:	e00b      	b.n	80034dc <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034c8:	f043 0210 	orr.w	r2, r3, #16
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	655a      	str	r2, [r3, #84]	@ 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d4:	f043 0201 	orr.w	r2, r3, #1
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	659a      	str	r2, [r3, #88]	@ 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 ffa9 	bl	8004434 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2260      	movs	r2, #96	@ 0x60
 80034e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d011      	beq.n	8003518 <HAL_ADC_IRQHandler+0x32c>
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d00c      	beq.n	8003518 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003502:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 f8b2 	bl	8003674 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2280      	movs	r2, #128	@ 0x80
 8003516:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003518:	69fb      	ldr	r3, [r7, #28]
 800351a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800351e:	2b00      	cmp	r3, #0
 8003520:	d012      	beq.n	8003548 <HAL_ADC_IRQHandler+0x35c>
 8003522:	69bb      	ldr	r3, [r7, #24]
 8003524:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00d      	beq.n	8003548 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003530:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 ff8f 	bl	800445c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003546:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003548:	69fb      	ldr	r3, [r7, #28]
 800354a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800354e:	2b00      	cmp	r3, #0
 8003550:	d012      	beq.n	8003578 <HAL_ADC_IRQHandler+0x38c>
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003558:	2b00      	cmp	r3, #0
 800355a:	d00d      	beq.n	8003578 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003560:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003568:	6878      	ldr	r0, [r7, #4]
 800356a:	f000 ff81 	bl	8004470 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003576:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003578:	69fb      	ldr	r3, [r7, #28]
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	2b00      	cmp	r3, #0
 8003580:	d043      	beq.n	800360a <HAL_ADC_IRQHandler+0x41e>
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	f003 0310 	and.w	r3, r3, #16
 8003588:	2b00      	cmp	r3, #0
 800358a:	d03e      	beq.n	800360a <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003590:	2b00      	cmp	r3, #0
 8003592:	d102      	bne.n	800359a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003594:	2301      	movs	r3, #1
 8003596:	627b      	str	r3, [r7, #36]	@ 0x24
 8003598:	e021      	b.n	80035de <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d015      	beq.n	80035cc <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a2a      	ldr	r2, [pc, #168]	@ (8003650 <HAL_ADC_IRQHandler+0x464>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d004      	beq.n	80035b4 <HAL_ADC_IRQHandler+0x3c8>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a29      	ldr	r2, [pc, #164]	@ (8003654 <HAL_ADC_IRQHandler+0x468>)
 80035b0:	4293      	cmp	r3, r2
 80035b2:	d101      	bne.n	80035b8 <HAL_ADC_IRQHandler+0x3cc>
 80035b4:	4b28      	ldr	r3, [pc, #160]	@ (8003658 <HAL_ADC_IRQHandler+0x46c>)
 80035b6:	e000      	b.n	80035ba <HAL_ADC_IRQHandler+0x3ce>
 80035b8:	4b28      	ldr	r3, [pc, #160]	@ (800365c <HAL_ADC_IRQHandler+0x470>)
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fa40 	bl	8002a40 <LL_ADC_GetMultiDMATransfer>
 80035c0:	4603      	mov	r3, r0
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00b      	beq.n	80035de <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80035c6:	2301      	movs	r3, #1
 80035c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80035ca:	e008      	b.n	80035de <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	68db      	ldr	r3, [r3, #12]
 80035d2:	f003 0303 	and.w	r3, r3, #3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 80035da:	2301      	movs	r3, #1
 80035dc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80035de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d10e      	bne.n	8003602 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035e8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035f4:	f043 0202 	orr.w	r2, r3, #2
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	659a      	str	r2, [r3, #88]	@ 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f843 	bl	8003688 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2210      	movs	r2, #16
 8003608:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 800360a:	69fb      	ldr	r3, [r7, #28]
 800360c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003610:	2b00      	cmp	r3, #0
 8003612:	d018      	beq.n	8003646 <HAL_ADC_IRQHandler+0x45a>
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800361a:	2b00      	cmp	r3, #0
 800361c:	d013      	beq.n	8003646 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003622:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800362e:	f043 0208 	orr.w	r2, r3, #8
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800363e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f000 ff01 	bl	8004448 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003646:	bf00      	nop
 8003648:	3728      	adds	r7, #40	@ 0x28
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40022000 	.word	0x40022000
 8003654:	40022100 	.word	0x40022100
 8003658:	40022300 	.word	0x40022300
 800365c:	58026300 	.word	0x58026300

08003660 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003660:	b480      	push	{r7}
 8003662:	b083      	sub	sp, #12
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003690:	bf00      	nop
 8003692:	370c      	adds	r7, #12
 8003694:	46bd      	mov	sp, r7
 8003696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369a:	4770      	bx	lr

0800369c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800369c:	b590      	push	{r4, r7, lr}
 800369e:	b08d      	sub	sp, #52	@ 0x34
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036a6:	2300      	movs	r3, #0
 80036a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	68db      	ldr	r3, [r3, #12]
 80036b4:	4a65      	ldr	r2, [pc, #404]	@ (800384c <HAL_ADC_ConfigChannel+0x1b0>)
 80036b6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036be:	2b01      	cmp	r3, #1
 80036c0:	d101      	bne.n	80036c6 <HAL_ADC_ConfigChannel+0x2a>
 80036c2:	2302      	movs	r3, #2
 80036c4:	e2c7      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x5ba>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2201      	movs	r2, #1
 80036ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7ff fa86 	bl	8002be4 <LL_ADC_REG_IsConversionOngoing>
 80036d8:	4603      	mov	r3, r0
 80036da:	2b00      	cmp	r3, #0
 80036dc:	f040 82ac 	bne.w	8003c38 <HAL_ADC_ConfigChannel+0x59c>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	db2c      	blt.n	8003742 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d108      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x6a>
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	0e9b      	lsrs	r3, r3, #26
 80036fa:	f003 031f 	and.w	r3, r3, #31
 80036fe:	2201      	movs	r2, #1
 8003700:	fa02 f303 	lsl.w	r3, r2, r3
 8003704:	e016      	b.n	8003734 <HAL_ADC_ConfigChannel+0x98>
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	fa93 f3a3 	rbit	r3, r3
 8003712:	613b      	str	r3, [r7, #16]
  return result;
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <HAL_ADC_ConfigChannel+0x86>
    return 32U;
 800371e:	2320      	movs	r3, #32
 8003720:	e003      	b.n	800372a <HAL_ADC_ConfigChannel+0x8e>
  return __builtin_clz(value);
 8003722:	69bb      	ldr	r3, [r7, #24]
 8003724:	fab3 f383 	clz	r3, r3
 8003728:	b2db      	uxtb	r3, r3
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	2201      	movs	r2, #1
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	6812      	ldr	r2, [r2, #0]
 8003738:	69d1      	ldr	r1, [r2, #28]
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6812      	ldr	r2, [r2, #0]
 800373e:	430b      	orrs	r3, r1
 8003740:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6818      	ldr	r0, [r3, #0]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	6859      	ldr	r1, [r3, #4]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	f7ff f8c6 	bl	80028e0 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4618      	mov	r0, r3
 800375a:	f7ff fa43 	bl	8002be4 <LL_ADC_REG_IsConversionOngoing>
 800375e:	62b8      	str	r0, [r7, #40]	@ 0x28
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fa65 	bl	8002c34 <LL_ADC_INJ_IsConversionOngoing>
 800376a:	6278      	str	r0, [r7, #36]	@ 0x24
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800376c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376e:	2b00      	cmp	r3, #0
 8003770:	f040 80b8 	bne.w	80038e4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003776:	2b00      	cmp	r3, #0
 8003778:	f040 80b4 	bne.w	80038e4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6818      	ldr	r0, [r3, #0]
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	6819      	ldr	r1, [r3, #0]
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	461a      	mov	r2, r3
 800378a:	f7ff f8fb 	bl	8002984 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800378e:	4b30      	ldr	r3, [pc, #192]	@ (8003850 <HAL_ADC_ConfigChannel+0x1b4>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8003796:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800379a:	d10b      	bne.n	80037b4 <HAL_ADC_ConfigChannel+0x118>
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	695a      	ldr	r2, [r3, #20]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	089b      	lsrs	r3, r3, #2
 80037a8:	f003 0307 	and.w	r3, r3, #7
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	fa02 f303 	lsl.w	r3, r2, r3
 80037b2:	e01d      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x154>
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	f003 0310 	and.w	r3, r3, #16
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10b      	bne.n	80037da <HAL_ADC_ConfigChannel+0x13e>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	695a      	ldr	r2, [r3, #20]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	089b      	lsrs	r3, r3, #2
 80037ce:	f003 0307 	and.w	r3, r3, #7
 80037d2:	005b      	lsls	r3, r3, #1
 80037d4:	fa02 f303 	lsl.w	r3, r2, r3
 80037d8:	e00a      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x154>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	695a      	ldr	r2, [r3, #20]
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	089b      	lsrs	r3, r3, #2
 80037e6:	f003 0304 	and.w	r3, r3, #4
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	623b      	str	r3, [r7, #32]
      }

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	691b      	ldr	r3, [r3, #16]
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d02c      	beq.n	8003854 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6818      	ldr	r0, [r3, #0]
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	6919      	ldr	r1, [r3, #16]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	6a3b      	ldr	r3, [r7, #32]
 8003808:	f7ff f803 	bl	8002812 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6818      	ldr	r0, [r3, #0]
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	6919      	ldr	r1, [r3, #16]
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	7e5b      	ldrb	r3, [r3, #25]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d102      	bne.n	8003822 <HAL_ADC_ConfigChannel+0x186>
 800381c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8003820:	e000      	b.n	8003824 <HAL_ADC_ConfigChannel+0x188>
 8003822:	2300      	movs	r3, #0
 8003824:	461a      	mov	r2, r3
 8003826:	f7ff f82d 	bl	8002884 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6818      	ldr	r0, [r3, #0]
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	6919      	ldr	r1, [r3, #16]
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	7e1b      	ldrb	r3, [r3, #24]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d102      	bne.n	8003840 <HAL_ADC_ConfigChannel+0x1a4>
 800383a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800383e:	e000      	b.n	8003842 <HAL_ADC_ConfigChannel+0x1a6>
 8003840:	2300      	movs	r3, #0
 8003842:	461a      	mov	r2, r3
 8003844:	f7ff f805 	bl	8002852 <LL_ADC_SetDataRightShift>
 8003848:	e04c      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x248>
 800384a:	bf00      	nop
 800384c:	47ff0000 	.word	0x47ff0000
 8003850:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800385a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	069b      	lsls	r3, r3, #26
 8003864:	429a      	cmp	r2, r3
 8003866:	d107      	bne.n	8003878 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8003876:	661a      	str	r2, [r3, #96]	@ 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800387e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	069b      	lsls	r3, r3, #26
 8003888:	429a      	cmp	r2, r3
 800388a:	d107      	bne.n	800389c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800389a:	665a      	str	r2, [r3, #100]	@ 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80038a2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	069b      	lsls	r3, r3, #26
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d107      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038be:	669a      	str	r2, [r3, #104]	@ 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80038c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	069b      	lsls	r3, r3, #26
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d107      	bne.n	80038e4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80038e2:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4618      	mov	r0, r3
 80038ea:	f7ff f92d 	bl	8002b48 <LL_ADC_IsEnabled>
 80038ee:	4603      	mov	r3, r0
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f040 81aa 	bne.w	8003c4a <HAL_ADC_ConfigChannel+0x5ae>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	6819      	ldr	r1, [r3, #0]
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
 8003902:	461a      	mov	r2, r3
 8003904:	f7ff f86a 	bl	80029dc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003908:	683b      	ldr	r3, [r7, #0]
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	4a87      	ldr	r2, [pc, #540]	@ (8003b2c <HAL_ADC_ConfigChannel+0x490>)
 800390e:	4293      	cmp	r3, r2
 8003910:	f040 809a 	bne.w	8003a48 <HAL_ADC_ConfigChannel+0x3ac>
      {
        /* Set ADC channel preselection of corresponding negative channel */
        LL_ADC_SetChannelPreselection(hadc->Instance, ADC_CHANNEL_DIFF_NEG_INPUT(hadc, sConfig->Channel));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4984      	ldr	r1, [pc, #528]	@ (8003b30 <HAL_ADC_ConfigChannel+0x494>)
 800391e:	428b      	cmp	r3, r1
 8003920:	d147      	bne.n	80039b2 <HAL_ADC_ConfigChannel+0x316>
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4983      	ldr	r1, [pc, #524]	@ (8003b34 <HAL_ADC_ConfigChannel+0x498>)
 8003928:	428b      	cmp	r3, r1
 800392a:	d040      	beq.n	80039ae <HAL_ADC_ConfigChannel+0x312>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4981      	ldr	r1, [pc, #516]	@ (8003b38 <HAL_ADC_ConfigChannel+0x49c>)
 8003932:	428b      	cmp	r3, r1
 8003934:	d039      	beq.n	80039aa <HAL_ADC_ConfigChannel+0x30e>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	4980      	ldr	r1, [pc, #512]	@ (8003b3c <HAL_ADC_ConfigChannel+0x4a0>)
 800393c:	428b      	cmp	r3, r1
 800393e:	d032      	beq.n	80039a6 <HAL_ADC_ConfigChannel+0x30a>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	497e      	ldr	r1, [pc, #504]	@ (8003b40 <HAL_ADC_ConfigChannel+0x4a4>)
 8003946:	428b      	cmp	r3, r1
 8003948:	d02b      	beq.n	80039a2 <HAL_ADC_ConfigChannel+0x306>
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	497d      	ldr	r1, [pc, #500]	@ (8003b44 <HAL_ADC_ConfigChannel+0x4a8>)
 8003950:	428b      	cmp	r3, r1
 8003952:	d024      	beq.n	800399e <HAL_ADC_ConfigChannel+0x302>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	497b      	ldr	r1, [pc, #492]	@ (8003b48 <HAL_ADC_ConfigChannel+0x4ac>)
 800395a:	428b      	cmp	r3, r1
 800395c:	d01d      	beq.n	800399a <HAL_ADC_ConfigChannel+0x2fe>
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	497a      	ldr	r1, [pc, #488]	@ (8003b4c <HAL_ADC_ConfigChannel+0x4b0>)
 8003964:	428b      	cmp	r3, r1
 8003966:	d016      	beq.n	8003996 <HAL_ADC_ConfigChannel+0x2fa>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4978      	ldr	r1, [pc, #480]	@ (8003b50 <HAL_ADC_ConfigChannel+0x4b4>)
 800396e:	428b      	cmp	r3, r1
 8003970:	d00f      	beq.n	8003992 <HAL_ADC_ConfigChannel+0x2f6>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4977      	ldr	r1, [pc, #476]	@ (8003b54 <HAL_ADC_ConfigChannel+0x4b8>)
 8003978:	428b      	cmp	r3, r1
 800397a:	d008      	beq.n	800398e <HAL_ADC_ConfigChannel+0x2f2>
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4975      	ldr	r1, [pc, #468]	@ (8003b58 <HAL_ADC_ConfigChannel+0x4bc>)
 8003982:	428b      	cmp	r3, r1
 8003984:	d101      	bne.n	800398a <HAL_ADC_ConfigChannel+0x2ee>
 8003986:	4b75      	ldr	r3, [pc, #468]	@ (8003b5c <HAL_ADC_ConfigChannel+0x4c0>)
 8003988:	e05a      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x3a4>
 800398a:	2300      	movs	r3, #0
 800398c:	e058      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x3a4>
 800398e:	4b74      	ldr	r3, [pc, #464]	@ (8003b60 <HAL_ADC_ConfigChannel+0x4c4>)
 8003990:	e056      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x3a4>
 8003992:	4b74      	ldr	r3, [pc, #464]	@ (8003b64 <HAL_ADC_ConfigChannel+0x4c8>)
 8003994:	e054      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x3a4>
 8003996:	4b6e      	ldr	r3, [pc, #440]	@ (8003b50 <HAL_ADC_ConfigChannel+0x4b4>)
 8003998:	e052      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x3a4>
 800399a:	4b6c      	ldr	r3, [pc, #432]	@ (8003b4c <HAL_ADC_ConfigChannel+0x4b0>)
 800399c:	e050      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x3a4>
 800399e:	4b72      	ldr	r3, [pc, #456]	@ (8003b68 <HAL_ADC_ConfigChannel+0x4cc>)
 80039a0:	e04e      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x3a4>
 80039a2:	4b72      	ldr	r3, [pc, #456]	@ (8003b6c <HAL_ADC_ConfigChannel+0x4d0>)
 80039a4:	e04c      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x3a4>
 80039a6:	4b72      	ldr	r3, [pc, #456]	@ (8003b70 <HAL_ADC_ConfigChannel+0x4d4>)
 80039a8:	e04a      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x3a4>
 80039aa:	4b72      	ldr	r3, [pc, #456]	@ (8003b74 <HAL_ADC_ConfigChannel+0x4d8>)
 80039ac:	e048      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x3a4>
 80039ae:	2301      	movs	r3, #1
 80039b0:	e046      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x3a4>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4970      	ldr	r1, [pc, #448]	@ (8003b78 <HAL_ADC_ConfigChannel+0x4dc>)
 80039b8:	428b      	cmp	r3, r1
 80039ba:	d140      	bne.n	8003a3e <HAL_ADC_ConfigChannel+0x3a2>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	495c      	ldr	r1, [pc, #368]	@ (8003b34 <HAL_ADC_ConfigChannel+0x498>)
 80039c2:	428b      	cmp	r3, r1
 80039c4:	d039      	beq.n	8003a3a <HAL_ADC_ConfigChannel+0x39e>
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	495b      	ldr	r1, [pc, #364]	@ (8003b38 <HAL_ADC_ConfigChannel+0x49c>)
 80039cc:	428b      	cmp	r3, r1
 80039ce:	d032      	beq.n	8003a36 <HAL_ADC_ConfigChannel+0x39a>
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4959      	ldr	r1, [pc, #356]	@ (8003b3c <HAL_ADC_ConfigChannel+0x4a0>)
 80039d6:	428b      	cmp	r3, r1
 80039d8:	d02b      	beq.n	8003a32 <HAL_ADC_ConfigChannel+0x396>
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	4958      	ldr	r1, [pc, #352]	@ (8003b40 <HAL_ADC_ConfigChannel+0x4a4>)
 80039e0:	428b      	cmp	r3, r1
 80039e2:	d024      	beq.n	8003a2e <HAL_ADC_ConfigChannel+0x392>
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4956      	ldr	r1, [pc, #344]	@ (8003b44 <HAL_ADC_ConfigChannel+0x4a8>)
 80039ea:	428b      	cmp	r3, r1
 80039ec:	d01d      	beq.n	8003a2a <HAL_ADC_ConfigChannel+0x38e>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4955      	ldr	r1, [pc, #340]	@ (8003b48 <HAL_ADC_ConfigChannel+0x4ac>)
 80039f4:	428b      	cmp	r3, r1
 80039f6:	d016      	beq.n	8003a26 <HAL_ADC_ConfigChannel+0x38a>
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	4953      	ldr	r1, [pc, #332]	@ (8003b4c <HAL_ADC_ConfigChannel+0x4b0>)
 80039fe:	428b      	cmp	r3, r1
 8003a00:	d00f      	beq.n	8003a22 <HAL_ADC_ConfigChannel+0x386>
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4952      	ldr	r1, [pc, #328]	@ (8003b50 <HAL_ADC_ConfigChannel+0x4b4>)
 8003a08:	428b      	cmp	r3, r1
 8003a0a:	d008      	beq.n	8003a1e <HAL_ADC_ConfigChannel+0x382>
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4951      	ldr	r1, [pc, #324]	@ (8003b58 <HAL_ADC_ConfigChannel+0x4bc>)
 8003a12:	428b      	cmp	r3, r1
 8003a14:	d101      	bne.n	8003a1a <HAL_ADC_ConfigChannel+0x37e>
 8003a16:	4b51      	ldr	r3, [pc, #324]	@ (8003b5c <HAL_ADC_ConfigChannel+0x4c0>)
 8003a18:	e012      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x3a4>
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	e010      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x3a4>
 8003a1e:	4b51      	ldr	r3, [pc, #324]	@ (8003b64 <HAL_ADC_ConfigChannel+0x4c8>)
 8003a20:	e00e      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x3a4>
 8003a22:	4b4b      	ldr	r3, [pc, #300]	@ (8003b50 <HAL_ADC_ConfigChannel+0x4b4>)
 8003a24:	e00c      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x3a4>
 8003a26:	4b49      	ldr	r3, [pc, #292]	@ (8003b4c <HAL_ADC_ConfigChannel+0x4b0>)
 8003a28:	e00a      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x3a4>
 8003a2a:	4b4f      	ldr	r3, [pc, #316]	@ (8003b68 <HAL_ADC_ConfigChannel+0x4cc>)
 8003a2c:	e008      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x3a4>
 8003a2e:	4b4f      	ldr	r3, [pc, #316]	@ (8003b6c <HAL_ADC_ConfigChannel+0x4d0>)
 8003a30:	e006      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x3a4>
 8003a32:	4b4f      	ldr	r3, [pc, #316]	@ (8003b70 <HAL_ADC_ConfigChannel+0x4d4>)
 8003a34:	e004      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x3a4>
 8003a36:	4b4f      	ldr	r3, [pc, #316]	@ (8003b74 <HAL_ADC_ConfigChannel+0x4d8>)
 8003a38:	e002      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x3a4>
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e000      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x3a4>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	4619      	mov	r1, r3
 8003a42:	4610      	mov	r0, r2
 8003a44:	f7fe feb2 	bl	80027ac <LL_ADC_SetChannelPreselection>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	f280 80fc 	bge.w	8003c4a <HAL_ADC_ConfigChannel+0x5ae>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a36      	ldr	r2, [pc, #216]	@ (8003b30 <HAL_ADC_ConfigChannel+0x494>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d004      	beq.n	8003a66 <HAL_ADC_ConfigChannel+0x3ca>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a45      	ldr	r2, [pc, #276]	@ (8003b78 <HAL_ADC_ConfigChannel+0x4dc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d101      	bne.n	8003a6a <HAL_ADC_ConfigChannel+0x3ce>
 8003a66:	4b45      	ldr	r3, [pc, #276]	@ (8003b7c <HAL_ADC_ConfigChannel+0x4e0>)
 8003a68:	e000      	b.n	8003a6c <HAL_ADC_ConfigChannel+0x3d0>
 8003a6a:	4b45      	ldr	r3, [pc, #276]	@ (8003b80 <HAL_ADC_ConfigChannel+0x4e4>)
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7fe fe8f 	bl	8002790 <LL_ADC_GetCommonPathInternalCh>
 8003a72:	61f8      	str	r0, [r7, #28]

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a2d      	ldr	r2, [pc, #180]	@ (8003b30 <HAL_ADC_ConfigChannel+0x494>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d004      	beq.n	8003a88 <HAL_ADC_ConfigChannel+0x3ec>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a3d      	ldr	r2, [pc, #244]	@ (8003b78 <HAL_ADC_ConfigChannel+0x4dc>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d10e      	bne.n	8003aa6 <HAL_ADC_ConfigChannel+0x40a>
 8003a88:	4829      	ldr	r0, [pc, #164]	@ (8003b30 <HAL_ADC_ConfigChannel+0x494>)
 8003a8a:	f7ff f85d 	bl	8002b48 <LL_ADC_IsEnabled>
 8003a8e:	4604      	mov	r4, r0
 8003a90:	4839      	ldr	r0, [pc, #228]	@ (8003b78 <HAL_ADC_ConfigChannel+0x4dc>)
 8003a92:	f7ff f859 	bl	8002b48 <LL_ADC_IsEnabled>
 8003a96:	4603      	mov	r3, r0
 8003a98:	4323      	orrs	r3, r4
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	bf0c      	ite	eq
 8003a9e:	2301      	moveq	r3, #1
 8003aa0:	2300      	movne	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	e008      	b.n	8003ab8 <HAL_ADC_ConfigChannel+0x41c>
 8003aa6:	4837      	ldr	r0, [pc, #220]	@ (8003b84 <HAL_ADC_ConfigChannel+0x4e8>)
 8003aa8:	f7ff f84e 	bl	8002b48 <LL_ADC_IsEnabled>
 8003aac:	4603      	mov	r3, r0
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	bf0c      	ite	eq
 8003ab2:	2301      	moveq	r3, #1
 8003ab4:	2300      	movne	r3, #0
 8003ab6:	b2db      	uxtb	r3, r3
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	f000 80b3 	beq.w	8003c24 <HAL_ADC_ConfigChannel+0x588>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a31      	ldr	r2, [pc, #196]	@ (8003b88 <HAL_ADC_ConfigChannel+0x4ec>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d165      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x4f8>
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d160      	bne.n	8003b94 <HAL_ADC_ConfigChannel+0x4f8>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a2b      	ldr	r2, [pc, #172]	@ (8003b84 <HAL_ADC_ConfigChannel+0x4e8>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	f040 80b6 	bne.w	8003c4a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	4a13      	ldr	r2, [pc, #76]	@ (8003b30 <HAL_ADC_ConfigChannel+0x494>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d004      	beq.n	8003af2 <HAL_ADC_ConfigChannel+0x456>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a22      	ldr	r2, [pc, #136]	@ (8003b78 <HAL_ADC_ConfigChannel+0x4dc>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d101      	bne.n	8003af6 <HAL_ADC_ConfigChannel+0x45a>
 8003af2:	4a22      	ldr	r2, [pc, #136]	@ (8003b7c <HAL_ADC_ConfigChannel+0x4e0>)
 8003af4:	e000      	b.n	8003af8 <HAL_ADC_ConfigChannel+0x45c>
 8003af6:	4a22      	ldr	r2, [pc, #136]	@ (8003b80 <HAL_ADC_ConfigChannel+0x4e4>)
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8003afe:	4619      	mov	r1, r3
 8003b00:	4610      	mov	r0, r2
 8003b02:	f7fe fe32 	bl	800276a <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003b06:	4b21      	ldr	r3, [pc, #132]	@ (8003b8c <HAL_ADC_ConfigChannel+0x4f0>)
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	099b      	lsrs	r3, r3, #6
 8003b0c:	4a20      	ldr	r2, [pc, #128]	@ (8003b90 <HAL_ADC_ConfigChannel+0x4f4>)
 8003b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8003b12:	099b      	lsrs	r3, r3, #6
 8003b14:	3301      	adds	r3, #1
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003b1a:	e002      	b.n	8003b22 <HAL_ADC_ConfigChannel+0x486>
              {
                wait_loop_index--;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	60fb      	str	r3, [r7, #12]
              while (wait_loop_index != 0UL)
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d1f9      	bne.n	8003b1c <HAL_ADC_ConfigChannel+0x480>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b28:	e08f      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x5ae>
 8003b2a:	bf00      	nop
 8003b2c:	47ff0000 	.word	0x47ff0000
 8003b30:	40022000 	.word	0x40022000
 8003b34:	04300002 	.word	0x04300002
 8003b38:	08600004 	.word	0x08600004
 8003b3c:	0c900008 	.word	0x0c900008
 8003b40:	10c00010 	.word	0x10c00010
 8003b44:	14f00020 	.word	0x14f00020
 8003b48:	2a000400 	.word	0x2a000400
 8003b4c:	2e300800 	.word	0x2e300800
 8003b50:	32601000 	.word	0x32601000
 8003b54:	43210000 	.word	0x43210000
 8003b58:	4b840000 	.word	0x4b840000
 8003b5c:	4fb80000 	.word	0x4fb80000
 8003b60:	47520000 	.word	0x47520000
 8003b64:	36902000 	.word	0x36902000
 8003b68:	25b00200 	.word	0x25b00200
 8003b6c:	21800100 	.word	0x21800100
 8003b70:	1d500080 	.word	0x1d500080
 8003b74:	19200040 	.word	0x19200040
 8003b78:	40022100 	.word	0x40022100
 8003b7c:	40022300 	.word	0x40022300
 8003b80:	58026300 	.word	0x58026300
 8003b84:	58026000 	.word	0x58026000
 8003b88:	cb840000 	.word	0xcb840000
 8003b8c:	24000000 	.word	0x24000000
 8003b90:	053e2d63 	.word	0x053e2d63
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a31      	ldr	r2, [pc, #196]	@ (8003c60 <HAL_ADC_ConfigChannel+0x5c4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d11e      	bne.n	8003bdc <HAL_ADC_ConfigChannel+0x540>
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d119      	bne.n	8003bdc <HAL_ADC_ConfigChannel+0x540>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a2d      	ldr	r2, [pc, #180]	@ (8003c64 <HAL_ADC_ConfigChannel+0x5c8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d14b      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a2c      	ldr	r2, [pc, #176]	@ (8003c68 <HAL_ADC_ConfigChannel+0x5cc>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d004      	beq.n	8003bc6 <HAL_ADC_ConfigChannel+0x52a>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a2a      	ldr	r2, [pc, #168]	@ (8003c6c <HAL_ADC_ConfigChannel+0x5d0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d101      	bne.n	8003bca <HAL_ADC_ConfigChannel+0x52e>
 8003bc6:	4a2a      	ldr	r2, [pc, #168]	@ (8003c70 <HAL_ADC_ConfigChannel+0x5d4>)
 8003bc8:	e000      	b.n	8003bcc <HAL_ADC_ConfigChannel+0x530>
 8003bca:	4a2a      	ldr	r2, [pc, #168]	@ (8003c74 <HAL_ADC_ConfigChannel+0x5d8>)
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	4610      	mov	r0, r2
 8003bd6:	f7fe fdc8 	bl	800276a <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003bda:	e036      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x5ae>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a25      	ldr	r2, [pc, #148]	@ (8003c78 <HAL_ADC_ConfigChannel+0x5dc>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d131      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0x5ae>
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d12c      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0x5ae>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	4a1b      	ldr	r2, [pc, #108]	@ (8003c64 <HAL_ADC_ConfigChannel+0x5c8>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d127      	bne.n	8003c4a <HAL_ADC_ConfigChannel+0x5ae>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4a1a      	ldr	r2, [pc, #104]	@ (8003c68 <HAL_ADC_ConfigChannel+0x5cc>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d004      	beq.n	8003c0e <HAL_ADC_ConfigChannel+0x572>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	4a18      	ldr	r2, [pc, #96]	@ (8003c6c <HAL_ADC_ConfigChannel+0x5d0>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d101      	bne.n	8003c12 <HAL_ADC_ConfigChannel+0x576>
 8003c0e:	4a18      	ldr	r2, [pc, #96]	@ (8003c70 <HAL_ADC_ConfigChannel+0x5d4>)
 8003c10:	e000      	b.n	8003c14 <HAL_ADC_ConfigChannel+0x578>
 8003c12:	4a18      	ldr	r2, [pc, #96]	@ (8003c74 <HAL_ADC_ConfigChannel+0x5d8>)
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	f7fe fda4 	bl	800276a <LL_ADC_SetCommonPathInternalCh>
 8003c22:	e012      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x5ae>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c28:	f043 0220 	orr.w	r2, r3, #32
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	655a      	str	r2, [r3, #84]	@ 0x54

          tmp_hal_status = HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8003c36:	e008      	b.n	8003c4a <HAL_ADC_ConfigChannel+0x5ae>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c3c:	f043 0220 	orr.w	r2, r3, #32
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	655a      	str	r2, [r3, #84]	@ 0x54

    tmp_hal_status = HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8003c52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	3734      	adds	r7, #52	@ 0x34
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd90      	pop	{r4, r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	c7520000 	.word	0xc7520000
 8003c64:	58026000 	.word	0x58026000
 8003c68:	40022000 	.word	0x40022000
 8003c6c:	40022100 	.word	0x40022100
 8003c70:	40022300 	.word	0x40022300
 8003c74:	58026300 	.word	0x58026300
 8003c78:	cfb80000 	.word	0xcfb80000

08003c7c <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b088      	sub	sp, #32
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fe ffa6 	bl	8002be4 <LL_ADC_REG_IsConversionOngoing>
 8003c98:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	f7fe ffc8 	bl	8002c34 <LL_ADC_INJ_IsConversionOngoing>
 8003ca4:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d103      	bne.n	8003cb4 <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	f000 8098 	beq.w	8003de4 <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68db      	ldr	r3, [r3, #12]
 8003cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d02a      	beq.n	8003d18 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	7d5b      	ldrb	r3, [r3, #21]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d126      	bne.n	8003d18 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	7d1b      	ldrb	r3, [r3, #20]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d122      	bne.n	8003d18 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003cd6:	e014      	b.n	8003d02 <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 8003cd8:	69fb      	ldr	r3, [r7, #28]
 8003cda:	4a45      	ldr	r2, [pc, #276]	@ (8003df0 <ADC_ConversionStop+0x174>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d90d      	bls.n	8003cfc <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ce4:	f043 0210 	orr.w	r2, r3, #16
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003cf0:	f043 0201 	orr.w	r2, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	e074      	b.n	8003de6 <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 8003cfc:	69fb      	ldr	r3, [r7, #28]
 8003cfe:	3301      	adds	r3, #1
 8003d00:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d0c:	2b40      	cmp	r3, #64	@ 0x40
 8003d0e:	d1e3      	bne.n	8003cd8 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2240      	movs	r2, #64	@ 0x40
 8003d16:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d014      	beq.n	8003d48 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7fe ff5e 	bl	8002be4 <LL_ADC_REG_IsConversionOngoing>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00c      	beq.n	8003d48 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fe ff1b 	bl	8002b6e <LL_ADC_IsDisableOngoing>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d104      	bne.n	8003d48 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4618      	mov	r0, r3
 8003d44:	f7fe ff3a 	bl	8002bbc <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d014      	beq.n	8003d78 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4618      	mov	r0, r3
 8003d54:	f7fe ff6e 	bl	8002c34 <LL_ADC_INJ_IsConversionOngoing>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d00c      	beq.n	8003d78 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fe ff03 	bl	8002b6e <LL_ADC_IsDisableOngoing>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d104      	bne.n	8003d78 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f7fe ff4a 	bl	8002c0c <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8003d78:	69bb      	ldr	r3, [r7, #24]
 8003d7a:	2b02      	cmp	r3, #2
 8003d7c:	d005      	beq.n	8003d8a <ADC_ConversionStop+0x10e>
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	2b03      	cmp	r3, #3
 8003d82:	d105      	bne.n	8003d90 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8003d84:	230c      	movs	r3, #12
 8003d86:	617b      	str	r3, [r7, #20]
        break;
 8003d88:	e005      	b.n	8003d96 <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8003d8a:	2308      	movs	r3, #8
 8003d8c:	617b      	str	r3, [r7, #20]
        break;
 8003d8e:	e002      	b.n	8003d96 <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8003d90:	2304      	movs	r3, #4
 8003d92:	617b      	str	r3, [r7, #20]
        break;
 8003d94:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8003d96:	f7fe f961 	bl	800205c <HAL_GetTick>
 8003d9a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003d9c:	e01b      	b.n	8003dd6 <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8003d9e:	f7fe f95d 	bl	800205c <HAL_GetTick>
 8003da2:	4602      	mov	r2, r0
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	1ad3      	subs	r3, r2, r3
 8003da8:	2b05      	cmp	r3, #5
 8003daa:	d914      	bls.n	8003dd6 <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	689a      	ldr	r2, [r3, #8]
 8003db2:	697b      	ldr	r3, [r7, #20]
 8003db4:	4013      	ands	r3, r2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00d      	beq.n	8003dd6 <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dbe:	f043 0210 	orr.w	r2, r3, #16
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003dca:	f043 0201 	orr.w	r2, r3, #1
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e007      	b.n	8003de6 <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	689a      	ldr	r2, [r3, #8]
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	4013      	ands	r3, r2
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1dc      	bne.n	8003d9e <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8003de4:	2300      	movs	r3, #0
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3720      	adds	r7, #32
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}
 8003dee:	bf00      	nop
 8003df0:	000cdbff 	.word	0x000cdbff

08003df4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b084      	sub	sp, #16
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7fe fea1 	bl	8002b48 <LL_ADC_IsEnabled>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d16e      	bne.n	8003eea <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	689a      	ldr	r2, [r3, #8]
 8003e12:	4b38      	ldr	r3, [pc, #224]	@ (8003ef4 <ADC_Enable+0x100>)
 8003e14:	4013      	ands	r3, r2
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00d      	beq.n	8003e36 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e1e:	f043 0210 	orr.w	r2, r3, #16
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e2a:	f043 0201 	orr.w	r2, r3, #1
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e05a      	b.n	8003eec <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fe fe5c 	bl	8002af8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003e40:	f7fe f90c 	bl	800205c <HAL_GetTick>
 8003e44:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	4a2b      	ldr	r2, [pc, #172]	@ (8003ef8 <ADC_Enable+0x104>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d004      	beq.n	8003e5a <ADC_Enable+0x66>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a29      	ldr	r2, [pc, #164]	@ (8003efc <ADC_Enable+0x108>)
 8003e56:	4293      	cmp	r3, r2
 8003e58:	d101      	bne.n	8003e5e <ADC_Enable+0x6a>
 8003e5a:	4b29      	ldr	r3, [pc, #164]	@ (8003f00 <ADC_Enable+0x10c>)
 8003e5c:	e000      	b.n	8003e60 <ADC_Enable+0x6c>
 8003e5e:	4b29      	ldr	r3, [pc, #164]	@ (8003f04 <ADC_Enable+0x110>)
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7fe fddf 	bl	8002a24 <LL_ADC_GetMultimode>
 8003e66:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a23      	ldr	r2, [pc, #140]	@ (8003efc <ADC_Enable+0x108>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d002      	beq.n	8003e78 <ADC_Enable+0x84>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	e000      	b.n	8003e7a <ADC_Enable+0x86>
 8003e78:	4b1f      	ldr	r3, [pc, #124]	@ (8003ef8 <ADC_Enable+0x104>)
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	6812      	ldr	r2, [r2, #0]
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d02c      	beq.n	8003edc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d130      	bne.n	8003eea <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003e88:	e028      	b.n	8003edc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f7fe fe5a 	bl	8002b48 <LL_ADC_IsEnabled>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d104      	bne.n	8003ea4 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f7fe fe2a 	bl	8002af8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003ea4:	f7fe f8da 	bl	800205c <HAL_GetTick>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	1ad3      	subs	r3, r2, r3
 8003eae:	2b02      	cmp	r3, #2
 8003eb0:	d914      	bls.n	8003edc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d00d      	beq.n	8003edc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ec4:	f043 0210 	orr.w	r2, r3, #16
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	655a      	str	r2, [r3, #84]	@ 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ed0:	f043 0201 	orr.w	r2, r3, #1
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	659a      	str	r2, [r3, #88]	@ 0x58

            return HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e007      	b.n	8003eec <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0301 	and.w	r3, r3, #1
 8003ee6:	2b01      	cmp	r3, #1
 8003ee8:	d1cf      	bne.n	8003e8a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003eea:	2300      	movs	r3, #0
}
 8003eec:	4618      	mov	r0, r3
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	8000003f 	.word	0x8000003f
 8003ef8:	40022000 	.word	0x40022000
 8003efc:	40022100 	.word	0x40022100
 8003f00:	40022300 	.word	0x40022300
 8003f04:	58026300 	.word	0x58026300

08003f08 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7fe fe2a 	bl	8002b6e <LL_ADC_IsDisableOngoing>
 8003f1a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fe fe11 	bl	8002b48 <LL_ADC_IsEnabled>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d047      	beq.n	8003fbc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d144      	bne.n	8003fbc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	689b      	ldr	r3, [r3, #8]
 8003f38:	f003 030d 	and.w	r3, r3, #13
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d10c      	bne.n	8003f5a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	4618      	mov	r0, r3
 8003f46:	f7fe fdeb 	bl	8002b20 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2203      	movs	r2, #3
 8003f50:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003f52:	f7fe f883 	bl	800205c <HAL_GetTick>
 8003f56:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f58:	e029      	b.n	8003fae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f5e:	f043 0210 	orr.w	r2, r3, #16
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	655a      	str	r2, [r3, #84]	@ 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f6a:	f043 0201 	orr.w	r2, r3, #1
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	659a      	str	r2, [r3, #88]	@ 0x58
      return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e023      	b.n	8003fbe <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003f76:	f7fe f871 	bl	800205c <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	2b02      	cmp	r3, #2
 8003f82:	d914      	bls.n	8003fae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00d      	beq.n	8003fae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f96:	f043 0210 	orr.w	r2, r3, #16
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fa2:	f043 0201 	orr.w	r2, r3, #1
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e007      	b.n	8003fbe <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f003 0301 	and.w	r3, r3, #1
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d1dc      	bne.n	8003f76 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3710      	adds	r7, #16
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b084      	sub	sp, #16
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d14b      	bne.n	8004078 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fe4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d021      	beq.n	800403e <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fe fc5b 	bl	80028ba <LL_ADC_REG_IsTriggerSourceSWStart>
 8004004:	4603      	mov	r3, r0
 8004006:	2b00      	cmp	r3, #0
 8004008:	d032      	beq.n	8004070 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004014:	2b00      	cmp	r3, #0
 8004016:	d12b      	bne.n	8004070 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800401c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	655a      	str	r2, [r3, #84]	@ 0x54
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004028:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d11f      	bne.n	8004070 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004034:	f043 0201 	orr.w	r2, r3, #1
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	655a      	str	r2, [r3, #84]	@ 0x54
 800403c:	e018      	b.n	8004070 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMNGT) == 0UL)
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0303 	and.w	r3, r3, #3
 8004048:	2b00      	cmp	r3, #0
 800404a:	d111      	bne.n	8004070 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004050:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	655a      	str	r2, [r3, #84]	@ 0x54
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800405c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d105      	bne.n	8004070 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004068:	f043 0201 	orr.w	r2, r3, #1
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004070:	68f8      	ldr	r0, [r7, #12]
 8004072:	f7fe f847 	bl	8002104 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004076:	e00e      	b.n	8004096 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b00      	cmp	r3, #0
 8004082:	d003      	beq.n	800408c <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f7ff faff 	bl	8003688 <HAL_ADC_ErrorCallback>
}
 800408a:	e004      	b.n	8004096 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	4798      	blx	r3
}
 8004096:	bf00      	nop
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040aa:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f7ff fad7 	bl	8003660 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040b2:	bf00      	nop
 80040b4:	3710      	adds	r7, #16
 80040b6:	46bd      	mov	sp, r7
 80040b8:	bd80      	pop	{r7, pc}

080040ba <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 80040ba:	b580      	push	{r7, lr}
 80040bc:	b084      	sub	sp, #16
 80040be:	af00      	add	r7, sp, #0
 80040c0:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040c6:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040cc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040d8:	f043 0204 	orr.w	r2, r3, #4
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80040e0:	68f8      	ldr	r0, [r7, #12]
 80040e2:	f7ff fad1 	bl	8003688 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80040e6:	bf00      	nop
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b084      	sub	sp, #16
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a7a      	ldr	r2, [pc, #488]	@ (80042e8 <ADC_ConfigureBoostMode+0x1f8>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d004      	beq.n	800410c <ADC_ConfigureBoostMode+0x1c>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	4a79      	ldr	r2, [pc, #484]	@ (80042ec <ADC_ConfigureBoostMode+0x1fc>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d109      	bne.n	8004120 <ADC_ConfigureBoostMode+0x30>
 800410c:	4b78      	ldr	r3, [pc, #480]	@ (80042f0 <ADC_ConfigureBoostMode+0x200>)
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004114:	2b00      	cmp	r3, #0
 8004116:	bf14      	ite	ne
 8004118:	2301      	movne	r3, #1
 800411a:	2300      	moveq	r3, #0
 800411c:	b2db      	uxtb	r3, r3
 800411e:	e008      	b.n	8004132 <ADC_ConfigureBoostMode+0x42>
 8004120:	4b74      	ldr	r3, [pc, #464]	@ (80042f4 <ADC_ConfigureBoostMode+0x204>)
 8004122:	689b      	ldr	r3, [r3, #8]
 8004124:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004128:	2b00      	cmp	r3, #0
 800412a:	bf14      	ite	ne
 800412c:	2301      	movne	r3, #1
 800412e:	2300      	moveq	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01c      	beq.n	8004170 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8004136:	f004 fb0b 	bl	8008750 <HAL_RCC_GetHCLKFreq>
 800413a:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004144:	d010      	beq.n	8004168 <ADC_ConfigureBoostMode+0x78>
 8004146:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800414a:	d873      	bhi.n	8004234 <ADC_ConfigureBoostMode+0x144>
 800414c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004150:	d002      	beq.n	8004158 <ADC_ConfigureBoostMode+0x68>
 8004152:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004156:	d16d      	bne.n	8004234 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	0c1b      	lsrs	r3, r3, #16
 800415e:	68fa      	ldr	r2, [r7, #12]
 8004160:	fbb2 f3f3 	udiv	r3, r2, r3
 8004164:	60fb      	str	r3, [r7, #12]
        break;
 8004166:	e068      	b.n	800423a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	089b      	lsrs	r3, r3, #2
 800416c:	60fb      	str	r3, [r7, #12]
        break;
 800416e:	e064      	b.n	800423a <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004170:	f44f 2000 	mov.w	r0, #524288	@ 0x80000
 8004174:	f04f 0100 	mov.w	r1, #0
 8004178:	f005 fd50 	bl	8009c1c <HAL_RCCEx_GetPeriphCLKFreq>
 800417c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8004186:	d051      	beq.n	800422c <ADC_ConfigureBoostMode+0x13c>
 8004188:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 800418c:	d854      	bhi.n	8004238 <ADC_ConfigureBoostMode+0x148>
 800418e:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004192:	d047      	beq.n	8004224 <ADC_ConfigureBoostMode+0x134>
 8004194:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8004198:	d84e      	bhi.n	8004238 <ADC_ConfigureBoostMode+0x148>
 800419a:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 800419e:	d03d      	beq.n	800421c <ADC_ConfigureBoostMode+0x12c>
 80041a0:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 80041a4:	d848      	bhi.n	8004238 <ADC_ConfigureBoostMode+0x148>
 80041a6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041aa:	d033      	beq.n	8004214 <ADC_ConfigureBoostMode+0x124>
 80041ac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80041b0:	d842      	bhi.n	8004238 <ADC_ConfigureBoostMode+0x148>
 80041b2:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80041b6:	d029      	beq.n	800420c <ADC_ConfigureBoostMode+0x11c>
 80041b8:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 80041bc:	d83c      	bhi.n	8004238 <ADC_ConfigureBoostMode+0x148>
 80041be:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80041c2:	d01a      	beq.n	80041fa <ADC_ConfigureBoostMode+0x10a>
 80041c4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 80041c8:	d836      	bhi.n	8004238 <ADC_ConfigureBoostMode+0x148>
 80041ca:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80041ce:	d014      	beq.n	80041fa <ADC_ConfigureBoostMode+0x10a>
 80041d0:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 80041d4:	d830      	bhi.n	8004238 <ADC_ConfigureBoostMode+0x148>
 80041d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041da:	d00e      	beq.n	80041fa <ADC_ConfigureBoostMode+0x10a>
 80041dc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80041e0:	d82a      	bhi.n	8004238 <ADC_ConfigureBoostMode+0x148>
 80041e2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80041e6:	d008      	beq.n	80041fa <ADC_ConfigureBoostMode+0x10a>
 80041e8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80041ec:	d824      	bhi.n	8004238 <ADC_ConfigureBoostMode+0x148>
 80041ee:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80041f2:	d002      	beq.n	80041fa <ADC_ConfigureBoostMode+0x10a>
 80041f4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80041f8:	d11e      	bne.n	8004238 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	685b      	ldr	r3, [r3, #4]
 80041fe:	0c9b      	lsrs	r3, r3, #18
 8004200:	005b      	lsls	r3, r3, #1
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	fbb2 f3f3 	udiv	r3, r2, r3
 8004208:	60fb      	str	r3, [r7, #12]
        break;
 800420a:	e016      	b.n	800423a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	091b      	lsrs	r3, r3, #4
 8004210:	60fb      	str	r3, [r7, #12]
        break;
 8004212:	e012      	b.n	800423a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	60fb      	str	r3, [r7, #12]
        break;
 800421a:	e00e      	b.n	800423a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	099b      	lsrs	r3, r3, #6
 8004220:	60fb      	str	r3, [r7, #12]
        break;
 8004222:	e00a      	b.n	800423a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	09db      	lsrs	r3, r3, #7
 8004228:	60fb      	str	r3, [r7, #12]
        break;
 800422a:	e006      	b.n	800423a <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	0a1b      	lsrs	r3, r3, #8
 8004230:	60fb      	str	r3, [r7, #12]
        break;
 8004232:	e002      	b.n	800423a <ADC_ConfigureBoostMode+0x14a>
        break;
 8004234:	bf00      	nop
 8004236:	e000      	b.n	800423a <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8004238:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800423a:	f7fe fa77 	bl	800272c <HAL_GetREVID>
 800423e:	4603      	mov	r3, r0
 8004240:	f241 0203 	movw	r2, #4099	@ 0x1003
 8004244:	4293      	cmp	r3, r2
 8004246:	d815      	bhi.n	8004274 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4a2b      	ldr	r2, [pc, #172]	@ (80042f8 <ADC_ConfigureBoostMode+0x208>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d908      	bls.n	8004262 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689a      	ldr	r2, [r3, #8]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800425e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004260:	e03e      	b.n	80042e0 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004270:	609a      	str	r2, [r3, #8]
}
 8004272:	e035      	b.n	80042e0 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	085b      	lsrs	r3, r3, #1
 8004278:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	4a1f      	ldr	r2, [pc, #124]	@ (80042fc <ADC_ConfigureBoostMode+0x20c>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d808      	bhi.n	8004294 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	689a      	ldr	r2, [r3, #8]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8004290:	609a      	str	r2, [r3, #8]
}
 8004292:	e025      	b.n	80042e0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	4a1a      	ldr	r2, [pc, #104]	@ (8004300 <ADC_ConfigureBoostMode+0x210>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d80a      	bhi.n	80042b2 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042ae:	609a      	str	r2, [r3, #8]
}
 80042b0:	e016      	b.n	80042e0 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4a13      	ldr	r2, [pc, #76]	@ (8004304 <ADC_ConfigureBoostMode+0x214>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d80a      	bhi.n	80042d0 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	689b      	ldr	r3, [r3, #8]
 80042c0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042cc:	609a      	str	r2, [r3, #8]
}
 80042ce:	e007      	b.n	80042e0 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	689a      	ldr	r2, [r3, #8]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 80042de:	609a      	str	r2, [r3, #8]
}
 80042e0:	bf00      	nop
 80042e2:	3710      	adds	r7, #16
 80042e4:	46bd      	mov	sp, r7
 80042e6:	bd80      	pop	{r7, pc}
 80042e8:	40022000 	.word	0x40022000
 80042ec:	40022100 	.word	0x40022100
 80042f0:	40022300 	.word	0x40022300
 80042f4:	58026300 	.word	0x58026300
 80042f8:	01312d00 	.word	0x01312d00
 80042fc:	005f5e10 	.word	0x005f5e10
 8004300:	00bebc20 	.word	0x00bebc20
 8004304:	017d7840 	.word	0x017d7840

08004308 <LL_ADC_StartCalibration>:
{
 8004308:	b480      	push	{r7}
 800430a:	b085      	sub	sp, #20
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	689a      	ldr	r2, [r3, #8]
 8004318:	4b09      	ldr	r3, [pc, #36]	@ (8004340 <LL_ADC_StartCalibration+0x38>)
 800431a:	4013      	ands	r3, r2
 800431c:	68ba      	ldr	r2, [r7, #8]
 800431e:	f402 3180 	and.w	r1, r2, #65536	@ 0x10000
 8004322:	687a      	ldr	r2, [r7, #4]
 8004324:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004328:	430a      	orrs	r2, r1
 800432a:	4313      	orrs	r3, r2
 800432c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	609a      	str	r2, [r3, #8]
}
 8004334:	bf00      	nop
 8004336:	3714      	adds	r7, #20
 8004338:	46bd      	mov	sp, r7
 800433a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433e:	4770      	bx	lr
 8004340:	3ffeffc0 	.word	0x3ffeffc0

08004344 <LL_ADC_IsCalibrationOnGoing>:
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004354:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004358:	d101      	bne.n	800435e <LL_ADC_IsCalibrationOnGoing+0x1a>
 800435a:	2301      	movs	r3, #1
 800435c:	e000      	b.n	8004360 <LL_ADC_IsCalibrationOnGoing+0x1c>
 800435e:	2300      	movs	r3, #0
}
 8004360:	4618      	mov	r0, r3
 8004362:	370c      	adds	r7, #12
 8004364:	46bd      	mov	sp, r7
 8004366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436a:	4770      	bx	lr

0800436c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004378:	2300      	movs	r3, #0
 800437a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004382:	2b01      	cmp	r3, #1
 8004384:	d101      	bne.n	800438a <HAL_ADCEx_Calibration_Start+0x1e>
 8004386:	2302      	movs	r3, #2
 8004388:	e04c      	b.n	8004424 <HAL_ADCEx_Calibration_Start+0xb8>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004392:	68f8      	ldr	r0, [r7, #12]
 8004394:	f7ff fdb8 	bl	8003f08 <ADC_Disable>
 8004398:	4603      	mov	r3, r0
 800439a:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800439c:	7dfb      	ldrb	r3, [r7, #23]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d135      	bne.n	800440e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80043a6:	4b21      	ldr	r3, [pc, #132]	@ (800442c <HAL_ADCEx_Calibration_Start+0xc0>)
 80043a8:	4013      	ands	r3, r2
 80043aa:	f043 0202 	orr.w	r2, r3, #2
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	655a      	str	r2, [r3, #84]	@ 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	68b9      	ldr	r1, [r7, #8]
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff ffa4 	bl	8004308 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80043c0:	e014      	b.n	80043ec <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	3301      	adds	r3, #1
 80043c6:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	4a19      	ldr	r2, [pc, #100]	@ (8004430 <HAL_ADCEx_Calibration_Start+0xc4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d30d      	bcc.n	80043ec <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80043d4:	f023 0312 	bic.w	r3, r3, #18
 80043d8:	f043 0210 	orr.w	r2, r3, #16
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	655a      	str	r2, [r3, #84]	@ 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e01b      	b.n	8004424 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4618      	mov	r0, r3
 80043f2:	f7ff ffa7 	bl	8004344 <LL_ADC_IsCalibrationOnGoing>
 80043f6:	4603      	mov	r3, r0
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d1e2      	bne.n	80043c2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004400:	f023 0303 	bic.w	r3, r3, #3
 8004404:	f043 0201 	orr.w	r2, r3, #1
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	655a      	str	r2, [r3, #84]	@ 0x54
 800440c:	e005      	b.n	800441a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004412:	f043 0210 	orr.w	r2, r3, #16
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	2200      	movs	r2, #0
 800441e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Return function status */
  return tmp_hal_status;
 8004422:	7dfb      	ldrb	r3, [r7, #23]
}
 8004424:	4618      	mov	r0, r3
 8004426:	3718      	adds	r7, #24
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}
 800442c:	ffffeefd 	.word	0xffffeefd
 8004430:	25c3f800 	.word	0x25c3f800

08004434 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004434:	b480      	push	{r7}
 8004436:	b083      	sub	sp, #12
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 800443c:	bf00      	nop
 800443e:	370c      	adds	r7, #12
 8004440:	46bd      	mov	sp, r7
 8004442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004446:	4770      	bx	lr

08004448 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445a:	4770      	bx	lr

0800445c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800445c:	b480      	push	{r7}
 800445e:	b083      	sub	sp, #12
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004464:	bf00      	nop
 8004466:	370c      	adds	r7, #12
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr

08004470 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8004470:	b480      	push	{r7}
 8004472:	b083      	sub	sp, #12
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004478:	bf00      	nop
 800447a:	370c      	adds	r7, #12
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr

08004484 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004496:	4770      	bx	lr

08004498 <__NVIC_SetPriorityGrouping>:
{
 8004498:	b480      	push	{r7}
 800449a:	b085      	sub	sp, #20
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f003 0307 	and.w	r3, r3, #7
 80044a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044a8:	4b0b      	ldr	r3, [pc, #44]	@ (80044d8 <__NVIC_SetPriorityGrouping+0x40>)
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80044ae:	68ba      	ldr	r2, [r7, #8]
 80044b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80044b4:	4013      	ands	r3, r2
 80044b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80044bc:	68bb      	ldr	r3, [r7, #8]
 80044be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80044c0:	4b06      	ldr	r3, [pc, #24]	@ (80044dc <__NVIC_SetPriorityGrouping+0x44>)
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80044c6:	4a04      	ldr	r2, [pc, #16]	@ (80044d8 <__NVIC_SetPriorityGrouping+0x40>)
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	60d3      	str	r3, [r2, #12]
}
 80044cc:	bf00      	nop
 80044ce:	3714      	adds	r7, #20
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr
 80044d8:	e000ed00 	.word	0xe000ed00
 80044dc:	05fa0000 	.word	0x05fa0000

080044e0 <__NVIC_GetPriorityGrouping>:
{
 80044e0:	b480      	push	{r7}
 80044e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80044e4:	4b04      	ldr	r3, [pc, #16]	@ (80044f8 <__NVIC_GetPriorityGrouping+0x18>)
 80044e6:	68db      	ldr	r3, [r3, #12]
 80044e8:	0a1b      	lsrs	r3, r3, #8
 80044ea:	f003 0307 	and.w	r3, r3, #7
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr
 80044f8:	e000ed00 	.word	0xe000ed00

080044fc <__NVIC_EnableIRQ>:
{
 80044fc:	b480      	push	{r7}
 80044fe:	b083      	sub	sp, #12
 8004500:	af00      	add	r7, sp, #0
 8004502:	4603      	mov	r3, r0
 8004504:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800450a:	2b00      	cmp	r3, #0
 800450c:	db0b      	blt.n	8004526 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800450e:	88fb      	ldrh	r3, [r7, #6]
 8004510:	f003 021f 	and.w	r2, r3, #31
 8004514:	4907      	ldr	r1, [pc, #28]	@ (8004534 <__NVIC_EnableIRQ+0x38>)
 8004516:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800451a:	095b      	lsrs	r3, r3, #5
 800451c:	2001      	movs	r0, #1
 800451e:	fa00 f202 	lsl.w	r2, r0, r2
 8004522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004526:	bf00      	nop
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr
 8004532:	bf00      	nop
 8004534:	e000e100 	.word	0xe000e100

08004538 <__NVIC_SetPriority>:
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	4603      	mov	r3, r0
 8004540:	6039      	str	r1, [r7, #0]
 8004542:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004544:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004548:	2b00      	cmp	r3, #0
 800454a:	db0a      	blt.n	8004562 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	b2da      	uxtb	r2, r3
 8004550:	490c      	ldr	r1, [pc, #48]	@ (8004584 <__NVIC_SetPriority+0x4c>)
 8004552:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004556:	0112      	lsls	r2, r2, #4
 8004558:	b2d2      	uxtb	r2, r2
 800455a:	440b      	add	r3, r1
 800455c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004560:	e00a      	b.n	8004578 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	b2da      	uxtb	r2, r3
 8004566:	4908      	ldr	r1, [pc, #32]	@ (8004588 <__NVIC_SetPriority+0x50>)
 8004568:	88fb      	ldrh	r3, [r7, #6]
 800456a:	f003 030f 	and.w	r3, r3, #15
 800456e:	3b04      	subs	r3, #4
 8004570:	0112      	lsls	r2, r2, #4
 8004572:	b2d2      	uxtb	r2, r2
 8004574:	440b      	add	r3, r1
 8004576:	761a      	strb	r2, [r3, #24]
}
 8004578:	bf00      	nop
 800457a:	370c      	adds	r7, #12
 800457c:	46bd      	mov	sp, r7
 800457e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004582:	4770      	bx	lr
 8004584:	e000e100 	.word	0xe000e100
 8004588:	e000ed00 	.word	0xe000ed00

0800458c <NVIC_EncodePriority>:
{
 800458c:	b480      	push	{r7}
 800458e:	b089      	sub	sp, #36	@ 0x24
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	f003 0307 	and.w	r3, r3, #7
 800459e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045a0:	69fb      	ldr	r3, [r7, #28]
 80045a2:	f1c3 0307 	rsb	r3, r3, #7
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	bf28      	it	cs
 80045aa:	2304      	movcs	r3, #4
 80045ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	3304      	adds	r3, #4
 80045b2:	2b06      	cmp	r3, #6
 80045b4:	d902      	bls.n	80045bc <NVIC_EncodePriority+0x30>
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	3b03      	subs	r3, #3
 80045ba:	e000      	b.n	80045be <NVIC_EncodePriority+0x32>
 80045bc:	2300      	movs	r3, #0
 80045be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045c0:	f04f 32ff 	mov.w	r2, #4294967295
 80045c4:	69bb      	ldr	r3, [r7, #24]
 80045c6:	fa02 f303 	lsl.w	r3, r2, r3
 80045ca:	43da      	mvns	r2, r3
 80045cc:	68bb      	ldr	r3, [r7, #8]
 80045ce:	401a      	ands	r2, r3
 80045d0:	697b      	ldr	r3, [r7, #20]
 80045d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80045d4:	f04f 31ff 	mov.w	r1, #4294967295
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	fa01 f303 	lsl.w	r3, r1, r3
 80045de:	43d9      	mvns	r1, r3
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80045e4:	4313      	orrs	r3, r2
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3724      	adds	r7, #36	@ 0x24
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr
	...

080045f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80045f4:	b580      	push	{r7, lr}
 80045f6:	b082      	sub	sp, #8
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	3b01      	subs	r3, #1
 8004600:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004604:	d301      	bcc.n	800460a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004606:	2301      	movs	r3, #1
 8004608:	e00f      	b.n	800462a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800460a:	4a0a      	ldr	r2, [pc, #40]	@ (8004634 <SysTick_Config+0x40>)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	3b01      	subs	r3, #1
 8004610:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004612:	210f      	movs	r1, #15
 8004614:	f04f 30ff 	mov.w	r0, #4294967295
 8004618:	f7ff ff8e 	bl	8004538 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800461c:	4b05      	ldr	r3, [pc, #20]	@ (8004634 <SysTick_Config+0x40>)
 800461e:	2200      	movs	r2, #0
 8004620:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004622:	4b04      	ldr	r3, [pc, #16]	@ (8004634 <SysTick_Config+0x40>)
 8004624:	2207      	movs	r2, #7
 8004626:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3708      	adds	r7, #8
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
 8004632:	bf00      	nop
 8004634:	e000e010 	.word	0xe000e010

08004638 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f7ff ff29 	bl	8004498 <__NVIC_SetPriorityGrouping>
}
 8004646:	bf00      	nop
 8004648:	3708      	adds	r7, #8
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}

0800464e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800464e:	b580      	push	{r7, lr}
 8004650:	b086      	sub	sp, #24
 8004652:	af00      	add	r7, sp, #0
 8004654:	4603      	mov	r3, r0
 8004656:	60b9      	str	r1, [r7, #8]
 8004658:	607a      	str	r2, [r7, #4]
 800465a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800465c:	f7ff ff40 	bl	80044e0 <__NVIC_GetPriorityGrouping>
 8004660:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	68b9      	ldr	r1, [r7, #8]
 8004666:	6978      	ldr	r0, [r7, #20]
 8004668:	f7ff ff90 	bl	800458c <NVIC_EncodePriority>
 800466c:	4602      	mov	r2, r0
 800466e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004672:	4611      	mov	r1, r2
 8004674:	4618      	mov	r0, r3
 8004676:	f7ff ff5f 	bl	8004538 <__NVIC_SetPriority>
}
 800467a:	bf00      	nop
 800467c:	3718      	adds	r7, #24
 800467e:	46bd      	mov	sp, r7
 8004680:	bd80      	pop	{r7, pc}

08004682 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004682:	b580      	push	{r7, lr}
 8004684:	b082      	sub	sp, #8
 8004686:	af00      	add	r7, sp, #0
 8004688:	4603      	mov	r3, r0
 800468a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800468c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004690:	4618      	mov	r0, r3
 8004692:	f7ff ff33 	bl	80044fc <__NVIC_EnableIRQ>
}
 8004696:	bf00      	nop
 8004698:	3708      	adds	r7, #8
 800469a:	46bd      	mov	sp, r7
 800469c:	bd80      	pop	{r7, pc}

0800469e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800469e:	b580      	push	{r7, lr}
 80046a0:	b082      	sub	sp, #8
 80046a2:	af00      	add	r7, sp, #0
 80046a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80046a6:	6878      	ldr	r0, [r7, #4]
 80046a8:	f7ff ffa4 	bl	80045f4 <SysTick_Config>
 80046ac:	4603      	mov	r3, r0
}
 80046ae:	4618      	mov	r0, r3
 80046b0:	3708      	adds	r7, #8
 80046b2:	46bd      	mov	sp, r7
 80046b4:	bd80      	pop	{r7, pc}
	...

080046b8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b086      	sub	sp, #24
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80046c0:	f7fd fccc 	bl	800205c <HAL_GetTick>
 80046c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d101      	bne.n	80046d0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e316      	b.n	8004cfe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a66      	ldr	r2, [pc, #408]	@ (8004870 <HAL_DMA_Init+0x1b8>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d04a      	beq.n	8004770 <HAL_DMA_Init+0xb8>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	4a65      	ldr	r2, [pc, #404]	@ (8004874 <HAL_DMA_Init+0x1bc>)
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d045      	beq.n	8004770 <HAL_DMA_Init+0xb8>
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a63      	ldr	r2, [pc, #396]	@ (8004878 <HAL_DMA_Init+0x1c0>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d040      	beq.n	8004770 <HAL_DMA_Init+0xb8>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a62      	ldr	r2, [pc, #392]	@ (800487c <HAL_DMA_Init+0x1c4>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d03b      	beq.n	8004770 <HAL_DMA_Init+0xb8>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a60      	ldr	r2, [pc, #384]	@ (8004880 <HAL_DMA_Init+0x1c8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d036      	beq.n	8004770 <HAL_DMA_Init+0xb8>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	4a5f      	ldr	r2, [pc, #380]	@ (8004884 <HAL_DMA_Init+0x1cc>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d031      	beq.n	8004770 <HAL_DMA_Init+0xb8>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a5d      	ldr	r2, [pc, #372]	@ (8004888 <HAL_DMA_Init+0x1d0>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d02c      	beq.n	8004770 <HAL_DMA_Init+0xb8>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a5c      	ldr	r2, [pc, #368]	@ (800488c <HAL_DMA_Init+0x1d4>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d027      	beq.n	8004770 <HAL_DMA_Init+0xb8>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	4a5a      	ldr	r2, [pc, #360]	@ (8004890 <HAL_DMA_Init+0x1d8>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d022      	beq.n	8004770 <HAL_DMA_Init+0xb8>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	4a59      	ldr	r2, [pc, #356]	@ (8004894 <HAL_DMA_Init+0x1dc>)
 8004730:	4293      	cmp	r3, r2
 8004732:	d01d      	beq.n	8004770 <HAL_DMA_Init+0xb8>
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a57      	ldr	r2, [pc, #348]	@ (8004898 <HAL_DMA_Init+0x1e0>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d018      	beq.n	8004770 <HAL_DMA_Init+0xb8>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	4a56      	ldr	r2, [pc, #344]	@ (800489c <HAL_DMA_Init+0x1e4>)
 8004744:	4293      	cmp	r3, r2
 8004746:	d013      	beq.n	8004770 <HAL_DMA_Init+0xb8>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a54      	ldr	r2, [pc, #336]	@ (80048a0 <HAL_DMA_Init+0x1e8>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d00e      	beq.n	8004770 <HAL_DMA_Init+0xb8>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a53      	ldr	r2, [pc, #332]	@ (80048a4 <HAL_DMA_Init+0x1ec>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d009      	beq.n	8004770 <HAL_DMA_Init+0xb8>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a51      	ldr	r2, [pc, #324]	@ (80048a8 <HAL_DMA_Init+0x1f0>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d004      	beq.n	8004770 <HAL_DMA_Init+0xb8>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a50      	ldr	r2, [pc, #320]	@ (80048ac <HAL_DMA_Init+0x1f4>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d101      	bne.n	8004774 <HAL_DMA_Init+0xbc>
 8004770:	2301      	movs	r3, #1
 8004772:	e000      	b.n	8004776 <HAL_DMA_Init+0xbe>
 8004774:	2300      	movs	r3, #0
 8004776:	2b00      	cmp	r3, #0
 8004778:	f000 813b 	beq.w	80049f2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	2202      	movs	r2, #2
 8004780:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a37      	ldr	r2, [pc, #220]	@ (8004870 <HAL_DMA_Init+0x1b8>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d04a      	beq.n	800482c <HAL_DMA_Init+0x174>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a36      	ldr	r2, [pc, #216]	@ (8004874 <HAL_DMA_Init+0x1bc>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d045      	beq.n	800482c <HAL_DMA_Init+0x174>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a34      	ldr	r2, [pc, #208]	@ (8004878 <HAL_DMA_Init+0x1c0>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d040      	beq.n	800482c <HAL_DMA_Init+0x174>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	4a33      	ldr	r2, [pc, #204]	@ (800487c <HAL_DMA_Init+0x1c4>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d03b      	beq.n	800482c <HAL_DMA_Init+0x174>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a31      	ldr	r2, [pc, #196]	@ (8004880 <HAL_DMA_Init+0x1c8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d036      	beq.n	800482c <HAL_DMA_Init+0x174>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	4a30      	ldr	r2, [pc, #192]	@ (8004884 <HAL_DMA_Init+0x1cc>)
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d031      	beq.n	800482c <HAL_DMA_Init+0x174>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	4a2e      	ldr	r2, [pc, #184]	@ (8004888 <HAL_DMA_Init+0x1d0>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d02c      	beq.n	800482c <HAL_DMA_Init+0x174>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	4a2d      	ldr	r2, [pc, #180]	@ (800488c <HAL_DMA_Init+0x1d4>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d027      	beq.n	800482c <HAL_DMA_Init+0x174>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a2b      	ldr	r2, [pc, #172]	@ (8004890 <HAL_DMA_Init+0x1d8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d022      	beq.n	800482c <HAL_DMA_Init+0x174>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	4a2a      	ldr	r2, [pc, #168]	@ (8004894 <HAL_DMA_Init+0x1dc>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d01d      	beq.n	800482c <HAL_DMA_Init+0x174>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	4a28      	ldr	r2, [pc, #160]	@ (8004898 <HAL_DMA_Init+0x1e0>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d018      	beq.n	800482c <HAL_DMA_Init+0x174>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	4a27      	ldr	r2, [pc, #156]	@ (800489c <HAL_DMA_Init+0x1e4>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d013      	beq.n	800482c <HAL_DMA_Init+0x174>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4a25      	ldr	r2, [pc, #148]	@ (80048a0 <HAL_DMA_Init+0x1e8>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d00e      	beq.n	800482c <HAL_DMA_Init+0x174>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a24      	ldr	r2, [pc, #144]	@ (80048a4 <HAL_DMA_Init+0x1ec>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d009      	beq.n	800482c <HAL_DMA_Init+0x174>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a22      	ldr	r2, [pc, #136]	@ (80048a8 <HAL_DMA_Init+0x1f0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d004      	beq.n	800482c <HAL_DMA_Init+0x174>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4a21      	ldr	r2, [pc, #132]	@ (80048ac <HAL_DMA_Init+0x1f4>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d108      	bne.n	800483e <HAL_DMA_Init+0x186>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0201 	bic.w	r2, r2, #1
 800483a:	601a      	str	r2, [r3, #0]
 800483c:	e007      	b.n	800484e <HAL_DMA_Init+0x196>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0201 	bic.w	r2, r2, #1
 800484c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800484e:	e02f      	b.n	80048b0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004850:	f7fd fc04 	bl	800205c <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b05      	cmp	r3, #5
 800485c:	d928      	bls.n	80048b0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2220      	movs	r2, #32
 8004862:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2203      	movs	r2, #3
 8004868:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 800486c:	2301      	movs	r3, #1
 800486e:	e246      	b.n	8004cfe <HAL_DMA_Init+0x646>
 8004870:	40020010 	.word	0x40020010
 8004874:	40020028 	.word	0x40020028
 8004878:	40020040 	.word	0x40020040
 800487c:	40020058 	.word	0x40020058
 8004880:	40020070 	.word	0x40020070
 8004884:	40020088 	.word	0x40020088
 8004888:	400200a0 	.word	0x400200a0
 800488c:	400200b8 	.word	0x400200b8
 8004890:	40020410 	.word	0x40020410
 8004894:	40020428 	.word	0x40020428
 8004898:	40020440 	.word	0x40020440
 800489c:	40020458 	.word	0x40020458
 80048a0:	40020470 	.word	0x40020470
 80048a4:	40020488 	.word	0x40020488
 80048a8:	400204a0 	.word	0x400204a0
 80048ac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f003 0301 	and.w	r3, r3, #1
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1c8      	bne.n	8004850 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80048c6:	697a      	ldr	r2, [r7, #20]
 80048c8:	4b83      	ldr	r3, [pc, #524]	@ (8004ad8 <HAL_DMA_Init+0x420>)
 80048ca:	4013      	ands	r3, r2
 80048cc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80048d6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	691b      	ldr	r3, [r3, #16]
 80048dc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80048e2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80048ee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80048f6:	697a      	ldr	r2, [r7, #20]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004900:	2b04      	cmp	r3, #4
 8004902:	d107      	bne.n	8004914 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800490c:	4313      	orrs	r3, r2
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	4313      	orrs	r3, r2
 8004912:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8004914:	4b71      	ldr	r3, [pc, #452]	@ (8004adc <HAL_DMA_Init+0x424>)
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	4b71      	ldr	r3, [pc, #452]	@ (8004ae0 <HAL_DMA_Init+0x428>)
 800491a:	4013      	ands	r3, r2
 800491c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004920:	d328      	bcc.n	8004974 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	2b28      	cmp	r3, #40	@ 0x28
 8004928:	d903      	bls.n	8004932 <HAL_DMA_Init+0x27a>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	2b2e      	cmp	r3, #46	@ 0x2e
 8004930:	d917      	bls.n	8004962 <HAL_DMA_Init+0x2aa>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	2b3e      	cmp	r3, #62	@ 0x3e
 8004938:	d903      	bls.n	8004942 <HAL_DMA_Init+0x28a>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	2b42      	cmp	r3, #66	@ 0x42
 8004940:	d90f      	bls.n	8004962 <HAL_DMA_Init+0x2aa>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	2b46      	cmp	r3, #70	@ 0x46
 8004948:	d903      	bls.n	8004952 <HAL_DMA_Init+0x29a>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	2b48      	cmp	r3, #72	@ 0x48
 8004950:	d907      	bls.n	8004962 <HAL_DMA_Init+0x2aa>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	2b4e      	cmp	r3, #78	@ 0x4e
 8004958:	d905      	bls.n	8004966 <HAL_DMA_Init+0x2ae>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b52      	cmp	r3, #82	@ 0x52
 8004960:	d801      	bhi.n	8004966 <HAL_DMA_Init+0x2ae>
 8004962:	2301      	movs	r3, #1
 8004964:	e000      	b.n	8004968 <HAL_DMA_Init+0x2b0>
 8004966:	2300      	movs	r3, #0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d003      	beq.n	8004974 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004972:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	697a      	ldr	r2, [r7, #20]
 800497a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	695b      	ldr	r3, [r3, #20]
 8004982:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004984:	697b      	ldr	r3, [r7, #20]
 8004986:	f023 0307 	bic.w	r3, r3, #7
 800498a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004990:	697a      	ldr	r2, [r7, #20]
 8004992:	4313      	orrs	r3, r2
 8004994:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800499a:	2b04      	cmp	r3, #4
 800499c:	d117      	bne.n	80049ce <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049a2:	697a      	ldr	r2, [r7, #20]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d00e      	beq.n	80049ce <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f002 fb33 	bl	800701c <DMA_CheckFifoParam>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d008      	beq.n	80049ce <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2240      	movs	r2, #64	@ 0x40
 80049c0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2201      	movs	r2, #1
 80049c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e197      	b.n	8004cfe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	697a      	ldr	r2, [r7, #20]
 80049d4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f002 fa6e 	bl	8006eb8 <DMA_CalcBaseAndBitshift>
 80049dc:	4603      	mov	r3, r0
 80049de:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049e4:	f003 031f 	and.w	r3, r3, #31
 80049e8:	223f      	movs	r2, #63	@ 0x3f
 80049ea:	409a      	lsls	r2, r3
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	609a      	str	r2, [r3, #8]
 80049f0:	e0cd      	b.n	8004b8e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a3b      	ldr	r2, [pc, #236]	@ (8004ae4 <HAL_DMA_Init+0x42c>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d022      	beq.n	8004a42 <HAL_DMA_Init+0x38a>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a39      	ldr	r2, [pc, #228]	@ (8004ae8 <HAL_DMA_Init+0x430>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d01d      	beq.n	8004a42 <HAL_DMA_Init+0x38a>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a38      	ldr	r2, [pc, #224]	@ (8004aec <HAL_DMA_Init+0x434>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d018      	beq.n	8004a42 <HAL_DMA_Init+0x38a>
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4a36      	ldr	r2, [pc, #216]	@ (8004af0 <HAL_DMA_Init+0x438>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d013      	beq.n	8004a42 <HAL_DMA_Init+0x38a>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a35      	ldr	r2, [pc, #212]	@ (8004af4 <HAL_DMA_Init+0x43c>)
 8004a20:	4293      	cmp	r3, r2
 8004a22:	d00e      	beq.n	8004a42 <HAL_DMA_Init+0x38a>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a33      	ldr	r2, [pc, #204]	@ (8004af8 <HAL_DMA_Init+0x440>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d009      	beq.n	8004a42 <HAL_DMA_Init+0x38a>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	4a32      	ldr	r2, [pc, #200]	@ (8004afc <HAL_DMA_Init+0x444>)
 8004a34:	4293      	cmp	r3, r2
 8004a36:	d004      	beq.n	8004a42 <HAL_DMA_Init+0x38a>
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4a30      	ldr	r2, [pc, #192]	@ (8004b00 <HAL_DMA_Init+0x448>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d101      	bne.n	8004a46 <HAL_DMA_Init+0x38e>
 8004a42:	2301      	movs	r3, #1
 8004a44:	e000      	b.n	8004a48 <HAL_DMA_Init+0x390>
 8004a46:	2300      	movs	r3, #0
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 8097 	beq.w	8004b7c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	4a24      	ldr	r2, [pc, #144]	@ (8004ae4 <HAL_DMA_Init+0x42c>)
 8004a54:	4293      	cmp	r3, r2
 8004a56:	d021      	beq.n	8004a9c <HAL_DMA_Init+0x3e4>
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a22      	ldr	r2, [pc, #136]	@ (8004ae8 <HAL_DMA_Init+0x430>)
 8004a5e:	4293      	cmp	r3, r2
 8004a60:	d01c      	beq.n	8004a9c <HAL_DMA_Init+0x3e4>
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	4a21      	ldr	r2, [pc, #132]	@ (8004aec <HAL_DMA_Init+0x434>)
 8004a68:	4293      	cmp	r3, r2
 8004a6a:	d017      	beq.n	8004a9c <HAL_DMA_Init+0x3e4>
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a1f      	ldr	r2, [pc, #124]	@ (8004af0 <HAL_DMA_Init+0x438>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d012      	beq.n	8004a9c <HAL_DMA_Init+0x3e4>
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a1e      	ldr	r2, [pc, #120]	@ (8004af4 <HAL_DMA_Init+0x43c>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d00d      	beq.n	8004a9c <HAL_DMA_Init+0x3e4>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a1c      	ldr	r2, [pc, #112]	@ (8004af8 <HAL_DMA_Init+0x440>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d008      	beq.n	8004a9c <HAL_DMA_Init+0x3e4>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a1b      	ldr	r2, [pc, #108]	@ (8004afc <HAL_DMA_Init+0x444>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d003      	beq.n	8004a9c <HAL_DMA_Init+0x3e4>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a19      	ldr	r2, [pc, #100]	@ (8004b00 <HAL_DMA_Init+0x448>)
 8004a9a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2202      	movs	r2, #2
 8004aa0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8004ab4:	697a      	ldr	r2, [r7, #20]
 8004ab6:	4b13      	ldr	r3, [pc, #76]	@ (8004b04 <HAL_DMA_Init+0x44c>)
 8004ab8:	4013      	ands	r3, r2
 8004aba:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	2b40      	cmp	r3, #64	@ 0x40
 8004ac2:	d021      	beq.n	8004b08 <HAL_DMA_Init+0x450>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	2b80      	cmp	r3, #128	@ 0x80
 8004aca:	d102      	bne.n	8004ad2 <HAL_DMA_Init+0x41a>
 8004acc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004ad0:	e01b      	b.n	8004b0a <HAL_DMA_Init+0x452>
 8004ad2:	2300      	movs	r3, #0
 8004ad4:	e019      	b.n	8004b0a <HAL_DMA_Init+0x452>
 8004ad6:	bf00      	nop
 8004ad8:	fe10803f 	.word	0xfe10803f
 8004adc:	5c001000 	.word	0x5c001000
 8004ae0:	ffff0000 	.word	0xffff0000
 8004ae4:	58025408 	.word	0x58025408
 8004ae8:	5802541c 	.word	0x5802541c
 8004aec:	58025430 	.word	0x58025430
 8004af0:	58025444 	.word	0x58025444
 8004af4:	58025458 	.word	0x58025458
 8004af8:	5802546c 	.word	0x5802546c
 8004afc:	58025480 	.word	0x58025480
 8004b00:	58025494 	.word	0x58025494
 8004b04:	fffe000f 	.word	0xfffe000f
 8004b08:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	68d2      	ldr	r2, [r2, #12]
 8004b0e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	691b      	ldr	r3, [r3, #16]
 8004b16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8004b18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695b      	ldr	r3, [r3, #20]
 8004b1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8004b20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8004b28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8004b30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8004b38:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	697a      	ldr	r2, [r7, #20]
 8004b46:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	461a      	mov	r2, r3
 8004b4e:	4b6e      	ldr	r3, [pc, #440]	@ (8004d08 <HAL_DMA_Init+0x650>)
 8004b50:	4413      	add	r3, r2
 8004b52:	4a6e      	ldr	r2, [pc, #440]	@ (8004d0c <HAL_DMA_Init+0x654>)
 8004b54:	fba2 2303 	umull	r2, r3, r2, r3
 8004b58:	091b      	lsrs	r3, r3, #4
 8004b5a:	009a      	lsls	r2, r3, #2
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	f002 f9a9 	bl	8006eb8 <DMA_CalcBaseAndBitshift>
 8004b66:	4603      	mov	r3, r0
 8004b68:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b6e:	f003 031f 	and.w	r3, r3, #31
 8004b72:	2201      	movs	r2, #1
 8004b74:	409a      	lsls	r2, r3
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	605a      	str	r2, [r3, #4]
 8004b7a:	e008      	b.n	8004b8e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2240      	movs	r2, #64	@ 0x40
 8004b80:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2203      	movs	r2, #3
 8004b86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e0b7      	b.n	8004cfe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a5f      	ldr	r2, [pc, #380]	@ (8004d10 <HAL_DMA_Init+0x658>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d072      	beq.n	8004c7e <HAL_DMA_Init+0x5c6>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a5d      	ldr	r2, [pc, #372]	@ (8004d14 <HAL_DMA_Init+0x65c>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d06d      	beq.n	8004c7e <HAL_DMA_Init+0x5c6>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a5c      	ldr	r2, [pc, #368]	@ (8004d18 <HAL_DMA_Init+0x660>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d068      	beq.n	8004c7e <HAL_DMA_Init+0x5c6>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a5a      	ldr	r2, [pc, #360]	@ (8004d1c <HAL_DMA_Init+0x664>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d063      	beq.n	8004c7e <HAL_DMA_Init+0x5c6>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a59      	ldr	r2, [pc, #356]	@ (8004d20 <HAL_DMA_Init+0x668>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d05e      	beq.n	8004c7e <HAL_DMA_Init+0x5c6>
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a57      	ldr	r2, [pc, #348]	@ (8004d24 <HAL_DMA_Init+0x66c>)
 8004bc6:	4293      	cmp	r3, r2
 8004bc8:	d059      	beq.n	8004c7e <HAL_DMA_Init+0x5c6>
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a56      	ldr	r2, [pc, #344]	@ (8004d28 <HAL_DMA_Init+0x670>)
 8004bd0:	4293      	cmp	r3, r2
 8004bd2:	d054      	beq.n	8004c7e <HAL_DMA_Init+0x5c6>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	4a54      	ldr	r2, [pc, #336]	@ (8004d2c <HAL_DMA_Init+0x674>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d04f      	beq.n	8004c7e <HAL_DMA_Init+0x5c6>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4a53      	ldr	r2, [pc, #332]	@ (8004d30 <HAL_DMA_Init+0x678>)
 8004be4:	4293      	cmp	r3, r2
 8004be6:	d04a      	beq.n	8004c7e <HAL_DMA_Init+0x5c6>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a51      	ldr	r2, [pc, #324]	@ (8004d34 <HAL_DMA_Init+0x67c>)
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d045      	beq.n	8004c7e <HAL_DMA_Init+0x5c6>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a50      	ldr	r2, [pc, #320]	@ (8004d38 <HAL_DMA_Init+0x680>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d040      	beq.n	8004c7e <HAL_DMA_Init+0x5c6>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	4a4e      	ldr	r2, [pc, #312]	@ (8004d3c <HAL_DMA_Init+0x684>)
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d03b      	beq.n	8004c7e <HAL_DMA_Init+0x5c6>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a4d      	ldr	r2, [pc, #308]	@ (8004d40 <HAL_DMA_Init+0x688>)
 8004c0c:	4293      	cmp	r3, r2
 8004c0e:	d036      	beq.n	8004c7e <HAL_DMA_Init+0x5c6>
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4a4b      	ldr	r2, [pc, #300]	@ (8004d44 <HAL_DMA_Init+0x68c>)
 8004c16:	4293      	cmp	r3, r2
 8004c18:	d031      	beq.n	8004c7e <HAL_DMA_Init+0x5c6>
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a4a      	ldr	r2, [pc, #296]	@ (8004d48 <HAL_DMA_Init+0x690>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d02c      	beq.n	8004c7e <HAL_DMA_Init+0x5c6>
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a48      	ldr	r2, [pc, #288]	@ (8004d4c <HAL_DMA_Init+0x694>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d027      	beq.n	8004c7e <HAL_DMA_Init+0x5c6>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4a47      	ldr	r2, [pc, #284]	@ (8004d50 <HAL_DMA_Init+0x698>)
 8004c34:	4293      	cmp	r3, r2
 8004c36:	d022      	beq.n	8004c7e <HAL_DMA_Init+0x5c6>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a45      	ldr	r2, [pc, #276]	@ (8004d54 <HAL_DMA_Init+0x69c>)
 8004c3e:	4293      	cmp	r3, r2
 8004c40:	d01d      	beq.n	8004c7e <HAL_DMA_Init+0x5c6>
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	4a44      	ldr	r2, [pc, #272]	@ (8004d58 <HAL_DMA_Init+0x6a0>)
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	d018      	beq.n	8004c7e <HAL_DMA_Init+0x5c6>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4a42      	ldr	r2, [pc, #264]	@ (8004d5c <HAL_DMA_Init+0x6a4>)
 8004c52:	4293      	cmp	r3, r2
 8004c54:	d013      	beq.n	8004c7e <HAL_DMA_Init+0x5c6>
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4a41      	ldr	r2, [pc, #260]	@ (8004d60 <HAL_DMA_Init+0x6a8>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d00e      	beq.n	8004c7e <HAL_DMA_Init+0x5c6>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	4a3f      	ldr	r2, [pc, #252]	@ (8004d64 <HAL_DMA_Init+0x6ac>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d009      	beq.n	8004c7e <HAL_DMA_Init+0x5c6>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	4a3e      	ldr	r2, [pc, #248]	@ (8004d68 <HAL_DMA_Init+0x6b0>)
 8004c70:	4293      	cmp	r3, r2
 8004c72:	d004      	beq.n	8004c7e <HAL_DMA_Init+0x5c6>
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a3c      	ldr	r2, [pc, #240]	@ (8004d6c <HAL_DMA_Init+0x6b4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d101      	bne.n	8004c82 <HAL_DMA_Init+0x5ca>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <HAL_DMA_Init+0x5cc>
 8004c82:	2300      	movs	r3, #0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d032      	beq.n	8004cee <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004c88:	6878      	ldr	r0, [r7, #4]
 8004c8a:	f002 fa43 	bl	8007114 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	689b      	ldr	r3, [r3, #8]
 8004c92:	2b80      	cmp	r3, #128	@ 0x80
 8004c94:	d102      	bne.n	8004c9c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004ca4:	b2d2      	uxtb	r2, r2
 8004ca6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8004cb0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d010      	beq.n	8004cdc <HAL_DMA_Init+0x624>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b08      	cmp	r3, #8
 8004cc0:	d80c      	bhi.n	8004cdc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004cc2:	6878      	ldr	r0, [r7, #4]
 8004cc4:	f002 fac0 	bl	8007248 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ccc:	2200      	movs	r2, #0
 8004cce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8004cd8:	605a      	str	r2, [r3, #4]
 8004cda:	e008      	b.n	8004cee <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2201      	movs	r2, #1
 8004cf8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8004cfc:	2300      	movs	r3, #0
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3718      	adds	r7, #24
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	a7fdabf8 	.word	0xa7fdabf8
 8004d0c:	cccccccd 	.word	0xcccccccd
 8004d10:	40020010 	.word	0x40020010
 8004d14:	40020028 	.word	0x40020028
 8004d18:	40020040 	.word	0x40020040
 8004d1c:	40020058 	.word	0x40020058
 8004d20:	40020070 	.word	0x40020070
 8004d24:	40020088 	.word	0x40020088
 8004d28:	400200a0 	.word	0x400200a0
 8004d2c:	400200b8 	.word	0x400200b8
 8004d30:	40020410 	.word	0x40020410
 8004d34:	40020428 	.word	0x40020428
 8004d38:	40020440 	.word	0x40020440
 8004d3c:	40020458 	.word	0x40020458
 8004d40:	40020470 	.word	0x40020470
 8004d44:	40020488 	.word	0x40020488
 8004d48:	400204a0 	.word	0x400204a0
 8004d4c:	400204b8 	.word	0x400204b8
 8004d50:	58025408 	.word	0x58025408
 8004d54:	5802541c 	.word	0x5802541c
 8004d58:	58025430 	.word	0x58025430
 8004d5c:	58025444 	.word	0x58025444
 8004d60:	58025458 	.word	0x58025458
 8004d64:	5802546c 	.word	0x5802546c
 8004d68:	58025480 	.word	0x58025480
 8004d6c:	58025494 	.word	0x58025494

08004d70 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b086      	sub	sp, #24
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	60f8      	str	r0, [r7, #12]
 8004d78:	60b9      	str	r1, [r7, #8]
 8004d7a:	607a      	str	r2, [r7, #4]
 8004d7c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d101      	bne.n	8004d8c <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e226      	b.n	80051da <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d101      	bne.n	8004d9a <HAL_DMA_Start_IT+0x2a>
 8004d96:	2302      	movs	r3, #2
 8004d98:	e21f      	b.n	80051da <HAL_DMA_Start_IT+0x46a>
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2201      	movs	r2, #1
 8004d9e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004da8:	b2db      	uxtb	r3, r3
 8004daa:	2b01      	cmp	r3, #1
 8004dac:	f040 820a 	bne.w	80051c4 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2200      	movs	r2, #0
 8004dbc:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a68      	ldr	r2, [pc, #416]	@ (8004f64 <HAL_DMA_Start_IT+0x1f4>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d04a      	beq.n	8004e5e <HAL_DMA_Start_IT+0xee>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a66      	ldr	r2, [pc, #408]	@ (8004f68 <HAL_DMA_Start_IT+0x1f8>)
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	d045      	beq.n	8004e5e <HAL_DMA_Start_IT+0xee>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	4a65      	ldr	r2, [pc, #404]	@ (8004f6c <HAL_DMA_Start_IT+0x1fc>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d040      	beq.n	8004e5e <HAL_DMA_Start_IT+0xee>
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a63      	ldr	r2, [pc, #396]	@ (8004f70 <HAL_DMA_Start_IT+0x200>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d03b      	beq.n	8004e5e <HAL_DMA_Start_IT+0xee>
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	4a62      	ldr	r2, [pc, #392]	@ (8004f74 <HAL_DMA_Start_IT+0x204>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d036      	beq.n	8004e5e <HAL_DMA_Start_IT+0xee>
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a60      	ldr	r2, [pc, #384]	@ (8004f78 <HAL_DMA_Start_IT+0x208>)
 8004df6:	4293      	cmp	r3, r2
 8004df8:	d031      	beq.n	8004e5e <HAL_DMA_Start_IT+0xee>
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a5f      	ldr	r2, [pc, #380]	@ (8004f7c <HAL_DMA_Start_IT+0x20c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d02c      	beq.n	8004e5e <HAL_DMA_Start_IT+0xee>
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	4a5d      	ldr	r2, [pc, #372]	@ (8004f80 <HAL_DMA_Start_IT+0x210>)
 8004e0a:	4293      	cmp	r3, r2
 8004e0c:	d027      	beq.n	8004e5e <HAL_DMA_Start_IT+0xee>
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4a5c      	ldr	r2, [pc, #368]	@ (8004f84 <HAL_DMA_Start_IT+0x214>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d022      	beq.n	8004e5e <HAL_DMA_Start_IT+0xee>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4a5a      	ldr	r2, [pc, #360]	@ (8004f88 <HAL_DMA_Start_IT+0x218>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d01d      	beq.n	8004e5e <HAL_DMA_Start_IT+0xee>
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a59      	ldr	r2, [pc, #356]	@ (8004f8c <HAL_DMA_Start_IT+0x21c>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d018      	beq.n	8004e5e <HAL_DMA_Start_IT+0xee>
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	4a57      	ldr	r2, [pc, #348]	@ (8004f90 <HAL_DMA_Start_IT+0x220>)
 8004e32:	4293      	cmp	r3, r2
 8004e34:	d013      	beq.n	8004e5e <HAL_DMA_Start_IT+0xee>
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a56      	ldr	r2, [pc, #344]	@ (8004f94 <HAL_DMA_Start_IT+0x224>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d00e      	beq.n	8004e5e <HAL_DMA_Start_IT+0xee>
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a54      	ldr	r2, [pc, #336]	@ (8004f98 <HAL_DMA_Start_IT+0x228>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d009      	beq.n	8004e5e <HAL_DMA_Start_IT+0xee>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a53      	ldr	r2, [pc, #332]	@ (8004f9c <HAL_DMA_Start_IT+0x22c>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d004      	beq.n	8004e5e <HAL_DMA_Start_IT+0xee>
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a51      	ldr	r2, [pc, #324]	@ (8004fa0 <HAL_DMA_Start_IT+0x230>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d108      	bne.n	8004e70 <HAL_DMA_Start_IT+0x100>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f022 0201 	bic.w	r2, r2, #1
 8004e6c:	601a      	str	r2, [r3, #0]
 8004e6e:	e007      	b.n	8004e80 <HAL_DMA_Start_IT+0x110>
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0201 	bic.w	r2, r2, #1
 8004e7e:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	687a      	ldr	r2, [r7, #4]
 8004e84:	68b9      	ldr	r1, [r7, #8]
 8004e86:	68f8      	ldr	r0, [r7, #12]
 8004e88:	f001 fe6a 	bl	8006b60 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	4a34      	ldr	r2, [pc, #208]	@ (8004f64 <HAL_DMA_Start_IT+0x1f4>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d04a      	beq.n	8004f2c <HAL_DMA_Start_IT+0x1bc>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	4a33      	ldr	r2, [pc, #204]	@ (8004f68 <HAL_DMA_Start_IT+0x1f8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d045      	beq.n	8004f2c <HAL_DMA_Start_IT+0x1bc>
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a31      	ldr	r2, [pc, #196]	@ (8004f6c <HAL_DMA_Start_IT+0x1fc>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d040      	beq.n	8004f2c <HAL_DMA_Start_IT+0x1bc>
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a30      	ldr	r2, [pc, #192]	@ (8004f70 <HAL_DMA_Start_IT+0x200>)
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	d03b      	beq.n	8004f2c <HAL_DMA_Start_IT+0x1bc>
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a2e      	ldr	r2, [pc, #184]	@ (8004f74 <HAL_DMA_Start_IT+0x204>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d036      	beq.n	8004f2c <HAL_DMA_Start_IT+0x1bc>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a2d      	ldr	r2, [pc, #180]	@ (8004f78 <HAL_DMA_Start_IT+0x208>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d031      	beq.n	8004f2c <HAL_DMA_Start_IT+0x1bc>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a2b      	ldr	r2, [pc, #172]	@ (8004f7c <HAL_DMA_Start_IT+0x20c>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d02c      	beq.n	8004f2c <HAL_DMA_Start_IT+0x1bc>
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a2a      	ldr	r2, [pc, #168]	@ (8004f80 <HAL_DMA_Start_IT+0x210>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d027      	beq.n	8004f2c <HAL_DMA_Start_IT+0x1bc>
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a28      	ldr	r2, [pc, #160]	@ (8004f84 <HAL_DMA_Start_IT+0x214>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d022      	beq.n	8004f2c <HAL_DMA_Start_IT+0x1bc>
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a27      	ldr	r2, [pc, #156]	@ (8004f88 <HAL_DMA_Start_IT+0x218>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d01d      	beq.n	8004f2c <HAL_DMA_Start_IT+0x1bc>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a25      	ldr	r2, [pc, #148]	@ (8004f8c <HAL_DMA_Start_IT+0x21c>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d018      	beq.n	8004f2c <HAL_DMA_Start_IT+0x1bc>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a24      	ldr	r2, [pc, #144]	@ (8004f90 <HAL_DMA_Start_IT+0x220>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d013      	beq.n	8004f2c <HAL_DMA_Start_IT+0x1bc>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a22      	ldr	r2, [pc, #136]	@ (8004f94 <HAL_DMA_Start_IT+0x224>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d00e      	beq.n	8004f2c <HAL_DMA_Start_IT+0x1bc>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a21      	ldr	r2, [pc, #132]	@ (8004f98 <HAL_DMA_Start_IT+0x228>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d009      	beq.n	8004f2c <HAL_DMA_Start_IT+0x1bc>
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a1f      	ldr	r2, [pc, #124]	@ (8004f9c <HAL_DMA_Start_IT+0x22c>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d004      	beq.n	8004f2c <HAL_DMA_Start_IT+0x1bc>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a1e      	ldr	r2, [pc, #120]	@ (8004fa0 <HAL_DMA_Start_IT+0x230>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d101      	bne.n	8004f30 <HAL_DMA_Start_IT+0x1c0>
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e000      	b.n	8004f32 <HAL_DMA_Start_IT+0x1c2>
 8004f30:	2300      	movs	r3, #0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d036      	beq.n	8004fa4 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f023 021e 	bic.w	r2, r3, #30
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f042 0216 	orr.w	r2, r2, #22
 8004f48:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d03e      	beq.n	8004fd0 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 0208 	orr.w	r2, r2, #8
 8004f60:	601a      	str	r2, [r3, #0]
 8004f62:	e035      	b.n	8004fd0 <HAL_DMA_Start_IT+0x260>
 8004f64:	40020010 	.word	0x40020010
 8004f68:	40020028 	.word	0x40020028
 8004f6c:	40020040 	.word	0x40020040
 8004f70:	40020058 	.word	0x40020058
 8004f74:	40020070 	.word	0x40020070
 8004f78:	40020088 	.word	0x40020088
 8004f7c:	400200a0 	.word	0x400200a0
 8004f80:	400200b8 	.word	0x400200b8
 8004f84:	40020410 	.word	0x40020410
 8004f88:	40020428 	.word	0x40020428
 8004f8c:	40020440 	.word	0x40020440
 8004f90:	40020458 	.word	0x40020458
 8004f94:	40020470 	.word	0x40020470
 8004f98:	40020488 	.word	0x40020488
 8004f9c:	400204a0 	.word	0x400204a0
 8004fa0:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f023 020e 	bic.w	r2, r3, #14
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f042 020a 	orr.w	r2, r2, #10
 8004fb6:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d007      	beq.n	8004fd0 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0204 	orr.w	r2, r2, #4
 8004fce:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	4a83      	ldr	r2, [pc, #524]	@ (80051e4 <HAL_DMA_Start_IT+0x474>)
 8004fd6:	4293      	cmp	r3, r2
 8004fd8:	d072      	beq.n	80050c0 <HAL_DMA_Start_IT+0x350>
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	4a82      	ldr	r2, [pc, #520]	@ (80051e8 <HAL_DMA_Start_IT+0x478>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d06d      	beq.n	80050c0 <HAL_DMA_Start_IT+0x350>
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4a80      	ldr	r2, [pc, #512]	@ (80051ec <HAL_DMA_Start_IT+0x47c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d068      	beq.n	80050c0 <HAL_DMA_Start_IT+0x350>
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	4a7f      	ldr	r2, [pc, #508]	@ (80051f0 <HAL_DMA_Start_IT+0x480>)
 8004ff4:	4293      	cmp	r3, r2
 8004ff6:	d063      	beq.n	80050c0 <HAL_DMA_Start_IT+0x350>
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a7d      	ldr	r2, [pc, #500]	@ (80051f4 <HAL_DMA_Start_IT+0x484>)
 8004ffe:	4293      	cmp	r3, r2
 8005000:	d05e      	beq.n	80050c0 <HAL_DMA_Start_IT+0x350>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	4a7c      	ldr	r2, [pc, #496]	@ (80051f8 <HAL_DMA_Start_IT+0x488>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d059      	beq.n	80050c0 <HAL_DMA_Start_IT+0x350>
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a7a      	ldr	r2, [pc, #488]	@ (80051fc <HAL_DMA_Start_IT+0x48c>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d054      	beq.n	80050c0 <HAL_DMA_Start_IT+0x350>
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	4a79      	ldr	r2, [pc, #484]	@ (8005200 <HAL_DMA_Start_IT+0x490>)
 800501c:	4293      	cmp	r3, r2
 800501e:	d04f      	beq.n	80050c0 <HAL_DMA_Start_IT+0x350>
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a77      	ldr	r2, [pc, #476]	@ (8005204 <HAL_DMA_Start_IT+0x494>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d04a      	beq.n	80050c0 <HAL_DMA_Start_IT+0x350>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a76      	ldr	r2, [pc, #472]	@ (8005208 <HAL_DMA_Start_IT+0x498>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d045      	beq.n	80050c0 <HAL_DMA_Start_IT+0x350>
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	4a74      	ldr	r2, [pc, #464]	@ (800520c <HAL_DMA_Start_IT+0x49c>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d040      	beq.n	80050c0 <HAL_DMA_Start_IT+0x350>
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4a73      	ldr	r2, [pc, #460]	@ (8005210 <HAL_DMA_Start_IT+0x4a0>)
 8005044:	4293      	cmp	r3, r2
 8005046:	d03b      	beq.n	80050c0 <HAL_DMA_Start_IT+0x350>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a71      	ldr	r2, [pc, #452]	@ (8005214 <HAL_DMA_Start_IT+0x4a4>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d036      	beq.n	80050c0 <HAL_DMA_Start_IT+0x350>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	4a70      	ldr	r2, [pc, #448]	@ (8005218 <HAL_DMA_Start_IT+0x4a8>)
 8005058:	4293      	cmp	r3, r2
 800505a:	d031      	beq.n	80050c0 <HAL_DMA_Start_IT+0x350>
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	4a6e      	ldr	r2, [pc, #440]	@ (800521c <HAL_DMA_Start_IT+0x4ac>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d02c      	beq.n	80050c0 <HAL_DMA_Start_IT+0x350>
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	4a6d      	ldr	r2, [pc, #436]	@ (8005220 <HAL_DMA_Start_IT+0x4b0>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d027      	beq.n	80050c0 <HAL_DMA_Start_IT+0x350>
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a6b      	ldr	r2, [pc, #428]	@ (8005224 <HAL_DMA_Start_IT+0x4b4>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d022      	beq.n	80050c0 <HAL_DMA_Start_IT+0x350>
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	4a6a      	ldr	r2, [pc, #424]	@ (8005228 <HAL_DMA_Start_IT+0x4b8>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d01d      	beq.n	80050c0 <HAL_DMA_Start_IT+0x350>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	4a68      	ldr	r2, [pc, #416]	@ (800522c <HAL_DMA_Start_IT+0x4bc>)
 800508a:	4293      	cmp	r3, r2
 800508c:	d018      	beq.n	80050c0 <HAL_DMA_Start_IT+0x350>
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a67      	ldr	r2, [pc, #412]	@ (8005230 <HAL_DMA_Start_IT+0x4c0>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d013      	beq.n	80050c0 <HAL_DMA_Start_IT+0x350>
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	4a65      	ldr	r2, [pc, #404]	@ (8005234 <HAL_DMA_Start_IT+0x4c4>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d00e      	beq.n	80050c0 <HAL_DMA_Start_IT+0x350>
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a64      	ldr	r2, [pc, #400]	@ (8005238 <HAL_DMA_Start_IT+0x4c8>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d009      	beq.n	80050c0 <HAL_DMA_Start_IT+0x350>
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a62      	ldr	r2, [pc, #392]	@ (800523c <HAL_DMA_Start_IT+0x4cc>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d004      	beq.n	80050c0 <HAL_DMA_Start_IT+0x350>
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a61      	ldr	r2, [pc, #388]	@ (8005240 <HAL_DMA_Start_IT+0x4d0>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d101      	bne.n	80050c4 <HAL_DMA_Start_IT+0x354>
 80050c0:	2301      	movs	r3, #1
 80050c2:	e000      	b.n	80050c6 <HAL_DMA_Start_IT+0x356>
 80050c4:	2300      	movs	r3, #0
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d01a      	beq.n	8005100 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d007      	beq.n	80050e8 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050dc:	681a      	ldr	r2, [r3, #0]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050e6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d007      	beq.n	8005100 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050f4:	681a      	ldr	r2, [r3, #0]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80050fa:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050fe:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a37      	ldr	r2, [pc, #220]	@ (80051e4 <HAL_DMA_Start_IT+0x474>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d04a      	beq.n	80051a0 <HAL_DMA_Start_IT+0x430>
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a36      	ldr	r2, [pc, #216]	@ (80051e8 <HAL_DMA_Start_IT+0x478>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d045      	beq.n	80051a0 <HAL_DMA_Start_IT+0x430>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a34      	ldr	r2, [pc, #208]	@ (80051ec <HAL_DMA_Start_IT+0x47c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d040      	beq.n	80051a0 <HAL_DMA_Start_IT+0x430>
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a33      	ldr	r2, [pc, #204]	@ (80051f0 <HAL_DMA_Start_IT+0x480>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d03b      	beq.n	80051a0 <HAL_DMA_Start_IT+0x430>
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a31      	ldr	r2, [pc, #196]	@ (80051f4 <HAL_DMA_Start_IT+0x484>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d036      	beq.n	80051a0 <HAL_DMA_Start_IT+0x430>
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a30      	ldr	r2, [pc, #192]	@ (80051f8 <HAL_DMA_Start_IT+0x488>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d031      	beq.n	80051a0 <HAL_DMA_Start_IT+0x430>
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a2e      	ldr	r2, [pc, #184]	@ (80051fc <HAL_DMA_Start_IT+0x48c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d02c      	beq.n	80051a0 <HAL_DMA_Start_IT+0x430>
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a2d      	ldr	r2, [pc, #180]	@ (8005200 <HAL_DMA_Start_IT+0x490>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d027      	beq.n	80051a0 <HAL_DMA_Start_IT+0x430>
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a2b      	ldr	r2, [pc, #172]	@ (8005204 <HAL_DMA_Start_IT+0x494>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d022      	beq.n	80051a0 <HAL_DMA_Start_IT+0x430>
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a2a      	ldr	r2, [pc, #168]	@ (8005208 <HAL_DMA_Start_IT+0x498>)
 8005160:	4293      	cmp	r3, r2
 8005162:	d01d      	beq.n	80051a0 <HAL_DMA_Start_IT+0x430>
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4a28      	ldr	r2, [pc, #160]	@ (800520c <HAL_DMA_Start_IT+0x49c>)
 800516a:	4293      	cmp	r3, r2
 800516c:	d018      	beq.n	80051a0 <HAL_DMA_Start_IT+0x430>
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	4a27      	ldr	r2, [pc, #156]	@ (8005210 <HAL_DMA_Start_IT+0x4a0>)
 8005174:	4293      	cmp	r3, r2
 8005176:	d013      	beq.n	80051a0 <HAL_DMA_Start_IT+0x430>
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	4a25      	ldr	r2, [pc, #148]	@ (8005214 <HAL_DMA_Start_IT+0x4a4>)
 800517e:	4293      	cmp	r3, r2
 8005180:	d00e      	beq.n	80051a0 <HAL_DMA_Start_IT+0x430>
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	4a24      	ldr	r2, [pc, #144]	@ (8005218 <HAL_DMA_Start_IT+0x4a8>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d009      	beq.n	80051a0 <HAL_DMA_Start_IT+0x430>
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4a22      	ldr	r2, [pc, #136]	@ (800521c <HAL_DMA_Start_IT+0x4ac>)
 8005192:	4293      	cmp	r3, r2
 8005194:	d004      	beq.n	80051a0 <HAL_DMA_Start_IT+0x430>
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4a21      	ldr	r2, [pc, #132]	@ (8005220 <HAL_DMA_Start_IT+0x4b0>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d108      	bne.n	80051b2 <HAL_DMA_Start_IT+0x442>
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	681a      	ldr	r2, [r3, #0]
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f042 0201 	orr.w	r2, r2, #1
 80051ae:	601a      	str	r2, [r3, #0]
 80051b0:	e012      	b.n	80051d8 <HAL_DMA_Start_IT+0x468>
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f042 0201 	orr.w	r2, r2, #1
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	e009      	b.n	80051d8 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80051ca:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2200      	movs	r2, #0
 80051d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 80051d4:	2301      	movs	r3, #1
 80051d6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80051d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80051da:	4618      	mov	r0, r3
 80051dc:	3718      	adds	r7, #24
 80051de:	46bd      	mov	sp, r7
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	bf00      	nop
 80051e4:	40020010 	.word	0x40020010
 80051e8:	40020028 	.word	0x40020028
 80051ec:	40020040 	.word	0x40020040
 80051f0:	40020058 	.word	0x40020058
 80051f4:	40020070 	.word	0x40020070
 80051f8:	40020088 	.word	0x40020088
 80051fc:	400200a0 	.word	0x400200a0
 8005200:	400200b8 	.word	0x400200b8
 8005204:	40020410 	.word	0x40020410
 8005208:	40020428 	.word	0x40020428
 800520c:	40020440 	.word	0x40020440
 8005210:	40020458 	.word	0x40020458
 8005214:	40020470 	.word	0x40020470
 8005218:	40020488 	.word	0x40020488
 800521c:	400204a0 	.word	0x400204a0
 8005220:	400204b8 	.word	0x400204b8
 8005224:	58025408 	.word	0x58025408
 8005228:	5802541c 	.word	0x5802541c
 800522c:	58025430 	.word	0x58025430
 8005230:	58025444 	.word	0x58025444
 8005234:	58025458 	.word	0x58025458
 8005238:	5802546c 	.word	0x5802546c
 800523c:	58025480 	.word	0x58025480
 8005240:	58025494 	.word	0x58025494

08005244 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800524c:	f7fc ff06 	bl	800205c <HAL_GetTick>
 8005250:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d101      	bne.n	800525c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e2dc      	b.n	8005816 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b02      	cmp	r3, #2
 8005266:	d008      	beq.n	800527a <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2280      	movs	r2, #128	@ 0x80
 800526c:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e2cd      	b.n	8005816 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a76      	ldr	r2, [pc, #472]	@ (8005458 <HAL_DMA_Abort+0x214>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d04a      	beq.n	800531a <HAL_DMA_Abort+0xd6>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a74      	ldr	r2, [pc, #464]	@ (800545c <HAL_DMA_Abort+0x218>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d045      	beq.n	800531a <HAL_DMA_Abort+0xd6>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a73      	ldr	r2, [pc, #460]	@ (8005460 <HAL_DMA_Abort+0x21c>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d040      	beq.n	800531a <HAL_DMA_Abort+0xd6>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a71      	ldr	r2, [pc, #452]	@ (8005464 <HAL_DMA_Abort+0x220>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d03b      	beq.n	800531a <HAL_DMA_Abort+0xd6>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	4a70      	ldr	r2, [pc, #448]	@ (8005468 <HAL_DMA_Abort+0x224>)
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d036      	beq.n	800531a <HAL_DMA_Abort+0xd6>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	4a6e      	ldr	r2, [pc, #440]	@ (800546c <HAL_DMA_Abort+0x228>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d031      	beq.n	800531a <HAL_DMA_Abort+0xd6>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	4a6d      	ldr	r2, [pc, #436]	@ (8005470 <HAL_DMA_Abort+0x22c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	d02c      	beq.n	800531a <HAL_DMA_Abort+0xd6>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	4a6b      	ldr	r2, [pc, #428]	@ (8005474 <HAL_DMA_Abort+0x230>)
 80052c6:	4293      	cmp	r3, r2
 80052c8:	d027      	beq.n	800531a <HAL_DMA_Abort+0xd6>
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	4a6a      	ldr	r2, [pc, #424]	@ (8005478 <HAL_DMA_Abort+0x234>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d022      	beq.n	800531a <HAL_DMA_Abort+0xd6>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	4a68      	ldr	r2, [pc, #416]	@ (800547c <HAL_DMA_Abort+0x238>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d01d      	beq.n	800531a <HAL_DMA_Abort+0xd6>
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	4a67      	ldr	r2, [pc, #412]	@ (8005480 <HAL_DMA_Abort+0x23c>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	d018      	beq.n	800531a <HAL_DMA_Abort+0xd6>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a65      	ldr	r2, [pc, #404]	@ (8005484 <HAL_DMA_Abort+0x240>)
 80052ee:	4293      	cmp	r3, r2
 80052f0:	d013      	beq.n	800531a <HAL_DMA_Abort+0xd6>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a64      	ldr	r2, [pc, #400]	@ (8005488 <HAL_DMA_Abort+0x244>)
 80052f8:	4293      	cmp	r3, r2
 80052fa:	d00e      	beq.n	800531a <HAL_DMA_Abort+0xd6>
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a62      	ldr	r2, [pc, #392]	@ (800548c <HAL_DMA_Abort+0x248>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d009      	beq.n	800531a <HAL_DMA_Abort+0xd6>
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	4a61      	ldr	r2, [pc, #388]	@ (8005490 <HAL_DMA_Abort+0x24c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d004      	beq.n	800531a <HAL_DMA_Abort+0xd6>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	4a5f      	ldr	r2, [pc, #380]	@ (8005494 <HAL_DMA_Abort+0x250>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d101      	bne.n	800531e <HAL_DMA_Abort+0xda>
 800531a:	2301      	movs	r3, #1
 800531c:	e000      	b.n	8005320 <HAL_DMA_Abort+0xdc>
 800531e:	2300      	movs	r3, #0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d013      	beq.n	800534c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f022 021e 	bic.w	r2, r2, #30
 8005332:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	695a      	ldr	r2, [r3, #20]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005342:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	e00a      	b.n	8005362 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 020e 	bic.w	r2, r2, #14
 800535a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	4a3c      	ldr	r2, [pc, #240]	@ (8005458 <HAL_DMA_Abort+0x214>)
 8005368:	4293      	cmp	r3, r2
 800536a:	d072      	beq.n	8005452 <HAL_DMA_Abort+0x20e>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	4a3a      	ldr	r2, [pc, #232]	@ (800545c <HAL_DMA_Abort+0x218>)
 8005372:	4293      	cmp	r3, r2
 8005374:	d06d      	beq.n	8005452 <HAL_DMA_Abort+0x20e>
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4a39      	ldr	r2, [pc, #228]	@ (8005460 <HAL_DMA_Abort+0x21c>)
 800537c:	4293      	cmp	r3, r2
 800537e:	d068      	beq.n	8005452 <HAL_DMA_Abort+0x20e>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a37      	ldr	r2, [pc, #220]	@ (8005464 <HAL_DMA_Abort+0x220>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d063      	beq.n	8005452 <HAL_DMA_Abort+0x20e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	4a36      	ldr	r2, [pc, #216]	@ (8005468 <HAL_DMA_Abort+0x224>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d05e      	beq.n	8005452 <HAL_DMA_Abort+0x20e>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a34      	ldr	r2, [pc, #208]	@ (800546c <HAL_DMA_Abort+0x228>)
 800539a:	4293      	cmp	r3, r2
 800539c:	d059      	beq.n	8005452 <HAL_DMA_Abort+0x20e>
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a33      	ldr	r2, [pc, #204]	@ (8005470 <HAL_DMA_Abort+0x22c>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d054      	beq.n	8005452 <HAL_DMA_Abort+0x20e>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a31      	ldr	r2, [pc, #196]	@ (8005474 <HAL_DMA_Abort+0x230>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d04f      	beq.n	8005452 <HAL_DMA_Abort+0x20e>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	4a30      	ldr	r2, [pc, #192]	@ (8005478 <HAL_DMA_Abort+0x234>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d04a      	beq.n	8005452 <HAL_DMA_Abort+0x20e>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	4a2e      	ldr	r2, [pc, #184]	@ (800547c <HAL_DMA_Abort+0x238>)
 80053c2:	4293      	cmp	r3, r2
 80053c4:	d045      	beq.n	8005452 <HAL_DMA_Abort+0x20e>
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	4a2d      	ldr	r2, [pc, #180]	@ (8005480 <HAL_DMA_Abort+0x23c>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d040      	beq.n	8005452 <HAL_DMA_Abort+0x20e>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a2b      	ldr	r2, [pc, #172]	@ (8005484 <HAL_DMA_Abort+0x240>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d03b      	beq.n	8005452 <HAL_DMA_Abort+0x20e>
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	4a2a      	ldr	r2, [pc, #168]	@ (8005488 <HAL_DMA_Abort+0x244>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d036      	beq.n	8005452 <HAL_DMA_Abort+0x20e>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	4a28      	ldr	r2, [pc, #160]	@ (800548c <HAL_DMA_Abort+0x248>)
 80053ea:	4293      	cmp	r3, r2
 80053ec:	d031      	beq.n	8005452 <HAL_DMA_Abort+0x20e>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	4a27      	ldr	r2, [pc, #156]	@ (8005490 <HAL_DMA_Abort+0x24c>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d02c      	beq.n	8005452 <HAL_DMA_Abort+0x20e>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	4a25      	ldr	r2, [pc, #148]	@ (8005494 <HAL_DMA_Abort+0x250>)
 80053fe:	4293      	cmp	r3, r2
 8005400:	d027      	beq.n	8005452 <HAL_DMA_Abort+0x20e>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	4a24      	ldr	r2, [pc, #144]	@ (8005498 <HAL_DMA_Abort+0x254>)
 8005408:	4293      	cmp	r3, r2
 800540a:	d022      	beq.n	8005452 <HAL_DMA_Abort+0x20e>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4a22      	ldr	r2, [pc, #136]	@ (800549c <HAL_DMA_Abort+0x258>)
 8005412:	4293      	cmp	r3, r2
 8005414:	d01d      	beq.n	8005452 <HAL_DMA_Abort+0x20e>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	4a21      	ldr	r2, [pc, #132]	@ (80054a0 <HAL_DMA_Abort+0x25c>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d018      	beq.n	8005452 <HAL_DMA_Abort+0x20e>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a1f      	ldr	r2, [pc, #124]	@ (80054a4 <HAL_DMA_Abort+0x260>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d013      	beq.n	8005452 <HAL_DMA_Abort+0x20e>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	4a1e      	ldr	r2, [pc, #120]	@ (80054a8 <HAL_DMA_Abort+0x264>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d00e      	beq.n	8005452 <HAL_DMA_Abort+0x20e>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4a1c      	ldr	r2, [pc, #112]	@ (80054ac <HAL_DMA_Abort+0x268>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d009      	beq.n	8005452 <HAL_DMA_Abort+0x20e>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	4a1b      	ldr	r2, [pc, #108]	@ (80054b0 <HAL_DMA_Abort+0x26c>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d004      	beq.n	8005452 <HAL_DMA_Abort+0x20e>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a19      	ldr	r2, [pc, #100]	@ (80054b4 <HAL_DMA_Abort+0x270>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d132      	bne.n	80054b8 <HAL_DMA_Abort+0x274>
 8005452:	2301      	movs	r3, #1
 8005454:	e031      	b.n	80054ba <HAL_DMA_Abort+0x276>
 8005456:	bf00      	nop
 8005458:	40020010 	.word	0x40020010
 800545c:	40020028 	.word	0x40020028
 8005460:	40020040 	.word	0x40020040
 8005464:	40020058 	.word	0x40020058
 8005468:	40020070 	.word	0x40020070
 800546c:	40020088 	.word	0x40020088
 8005470:	400200a0 	.word	0x400200a0
 8005474:	400200b8 	.word	0x400200b8
 8005478:	40020410 	.word	0x40020410
 800547c:	40020428 	.word	0x40020428
 8005480:	40020440 	.word	0x40020440
 8005484:	40020458 	.word	0x40020458
 8005488:	40020470 	.word	0x40020470
 800548c:	40020488 	.word	0x40020488
 8005490:	400204a0 	.word	0x400204a0
 8005494:	400204b8 	.word	0x400204b8
 8005498:	58025408 	.word	0x58025408
 800549c:	5802541c 	.word	0x5802541c
 80054a0:	58025430 	.word	0x58025430
 80054a4:	58025444 	.word	0x58025444
 80054a8:	58025458 	.word	0x58025458
 80054ac:	5802546c 	.word	0x5802546c
 80054b0:	58025480 	.word	0x58025480
 80054b4:	58025494 	.word	0x58025494
 80054b8:	2300      	movs	r3, #0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d007      	beq.n	80054ce <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80054c8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80054cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4a6d      	ldr	r2, [pc, #436]	@ (8005688 <HAL_DMA_Abort+0x444>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d04a      	beq.n	800556e <HAL_DMA_Abort+0x32a>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	4a6b      	ldr	r2, [pc, #428]	@ (800568c <HAL_DMA_Abort+0x448>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d045      	beq.n	800556e <HAL_DMA_Abort+0x32a>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4a6a      	ldr	r2, [pc, #424]	@ (8005690 <HAL_DMA_Abort+0x44c>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d040      	beq.n	800556e <HAL_DMA_Abort+0x32a>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a68      	ldr	r2, [pc, #416]	@ (8005694 <HAL_DMA_Abort+0x450>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d03b      	beq.n	800556e <HAL_DMA_Abort+0x32a>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a67      	ldr	r2, [pc, #412]	@ (8005698 <HAL_DMA_Abort+0x454>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d036      	beq.n	800556e <HAL_DMA_Abort+0x32a>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	4a65      	ldr	r2, [pc, #404]	@ (800569c <HAL_DMA_Abort+0x458>)
 8005506:	4293      	cmp	r3, r2
 8005508:	d031      	beq.n	800556e <HAL_DMA_Abort+0x32a>
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	4a64      	ldr	r2, [pc, #400]	@ (80056a0 <HAL_DMA_Abort+0x45c>)
 8005510:	4293      	cmp	r3, r2
 8005512:	d02c      	beq.n	800556e <HAL_DMA_Abort+0x32a>
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	4a62      	ldr	r2, [pc, #392]	@ (80056a4 <HAL_DMA_Abort+0x460>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d027      	beq.n	800556e <HAL_DMA_Abort+0x32a>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	4a61      	ldr	r2, [pc, #388]	@ (80056a8 <HAL_DMA_Abort+0x464>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d022      	beq.n	800556e <HAL_DMA_Abort+0x32a>
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a5f      	ldr	r2, [pc, #380]	@ (80056ac <HAL_DMA_Abort+0x468>)
 800552e:	4293      	cmp	r3, r2
 8005530:	d01d      	beq.n	800556e <HAL_DMA_Abort+0x32a>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	4a5e      	ldr	r2, [pc, #376]	@ (80056b0 <HAL_DMA_Abort+0x46c>)
 8005538:	4293      	cmp	r3, r2
 800553a:	d018      	beq.n	800556e <HAL_DMA_Abort+0x32a>
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	4a5c      	ldr	r2, [pc, #368]	@ (80056b4 <HAL_DMA_Abort+0x470>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d013      	beq.n	800556e <HAL_DMA_Abort+0x32a>
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	4a5b      	ldr	r2, [pc, #364]	@ (80056b8 <HAL_DMA_Abort+0x474>)
 800554c:	4293      	cmp	r3, r2
 800554e:	d00e      	beq.n	800556e <HAL_DMA_Abort+0x32a>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a59      	ldr	r2, [pc, #356]	@ (80056bc <HAL_DMA_Abort+0x478>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d009      	beq.n	800556e <HAL_DMA_Abort+0x32a>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4a58      	ldr	r2, [pc, #352]	@ (80056c0 <HAL_DMA_Abort+0x47c>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d004      	beq.n	800556e <HAL_DMA_Abort+0x32a>
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	4a56      	ldr	r2, [pc, #344]	@ (80056c4 <HAL_DMA_Abort+0x480>)
 800556a:	4293      	cmp	r3, r2
 800556c:	d108      	bne.n	8005580 <HAL_DMA_Abort+0x33c>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	681a      	ldr	r2, [r3, #0]
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f022 0201 	bic.w	r2, r2, #1
 800557c:	601a      	str	r2, [r3, #0]
 800557e:	e007      	b.n	8005590 <HAL_DMA_Abort+0x34c>
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	681a      	ldr	r2, [r3, #0]
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f022 0201 	bic.w	r2, r2, #1
 800558e:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8005590:	e013      	b.n	80055ba <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005592:	f7fc fd63 	bl	800205c <HAL_GetTick>
 8005596:	4602      	mov	r2, r0
 8005598:	693b      	ldr	r3, [r7, #16]
 800559a:	1ad3      	subs	r3, r2, r3
 800559c:	2b05      	cmp	r3, #5
 800559e:	d90c      	bls.n	80055ba <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2220      	movs	r2, #32
 80055a4:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2203      	movs	r2, #3
 80055aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 80055b6:	2301      	movs	r3, #1
 80055b8:	e12d      	b.n	8005816 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d1e5      	bne.n	8005592 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a2f      	ldr	r2, [pc, #188]	@ (8005688 <HAL_DMA_Abort+0x444>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d04a      	beq.n	8005666 <HAL_DMA_Abort+0x422>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a2d      	ldr	r2, [pc, #180]	@ (800568c <HAL_DMA_Abort+0x448>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d045      	beq.n	8005666 <HAL_DMA_Abort+0x422>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a2c      	ldr	r2, [pc, #176]	@ (8005690 <HAL_DMA_Abort+0x44c>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d040      	beq.n	8005666 <HAL_DMA_Abort+0x422>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a2a      	ldr	r2, [pc, #168]	@ (8005694 <HAL_DMA_Abort+0x450>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d03b      	beq.n	8005666 <HAL_DMA_Abort+0x422>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a29      	ldr	r2, [pc, #164]	@ (8005698 <HAL_DMA_Abort+0x454>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d036      	beq.n	8005666 <HAL_DMA_Abort+0x422>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	4a27      	ldr	r2, [pc, #156]	@ (800569c <HAL_DMA_Abort+0x458>)
 80055fe:	4293      	cmp	r3, r2
 8005600:	d031      	beq.n	8005666 <HAL_DMA_Abort+0x422>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a26      	ldr	r2, [pc, #152]	@ (80056a0 <HAL_DMA_Abort+0x45c>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d02c      	beq.n	8005666 <HAL_DMA_Abort+0x422>
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a24      	ldr	r2, [pc, #144]	@ (80056a4 <HAL_DMA_Abort+0x460>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d027      	beq.n	8005666 <HAL_DMA_Abort+0x422>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	4a23      	ldr	r2, [pc, #140]	@ (80056a8 <HAL_DMA_Abort+0x464>)
 800561c:	4293      	cmp	r3, r2
 800561e:	d022      	beq.n	8005666 <HAL_DMA_Abort+0x422>
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a21      	ldr	r2, [pc, #132]	@ (80056ac <HAL_DMA_Abort+0x468>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d01d      	beq.n	8005666 <HAL_DMA_Abort+0x422>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a20      	ldr	r2, [pc, #128]	@ (80056b0 <HAL_DMA_Abort+0x46c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d018      	beq.n	8005666 <HAL_DMA_Abort+0x422>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	4a1e      	ldr	r2, [pc, #120]	@ (80056b4 <HAL_DMA_Abort+0x470>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d013      	beq.n	8005666 <HAL_DMA_Abort+0x422>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a1d      	ldr	r2, [pc, #116]	@ (80056b8 <HAL_DMA_Abort+0x474>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d00e      	beq.n	8005666 <HAL_DMA_Abort+0x422>
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	4a1b      	ldr	r2, [pc, #108]	@ (80056bc <HAL_DMA_Abort+0x478>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d009      	beq.n	8005666 <HAL_DMA_Abort+0x422>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a1a      	ldr	r2, [pc, #104]	@ (80056c0 <HAL_DMA_Abort+0x47c>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d004      	beq.n	8005666 <HAL_DMA_Abort+0x422>
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	4a18      	ldr	r2, [pc, #96]	@ (80056c4 <HAL_DMA_Abort+0x480>)
 8005662:	4293      	cmp	r3, r2
 8005664:	d101      	bne.n	800566a <HAL_DMA_Abort+0x426>
 8005666:	2301      	movs	r3, #1
 8005668:	e000      	b.n	800566c <HAL_DMA_Abort+0x428>
 800566a:	2300      	movs	r3, #0
 800566c:	2b00      	cmp	r3, #0
 800566e:	d02b      	beq.n	80056c8 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005674:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800567a:	f003 031f 	and.w	r3, r3, #31
 800567e:	223f      	movs	r2, #63	@ 0x3f
 8005680:	409a      	lsls	r2, r3
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	609a      	str	r2, [r3, #8]
 8005686:	e02a      	b.n	80056de <HAL_DMA_Abort+0x49a>
 8005688:	40020010 	.word	0x40020010
 800568c:	40020028 	.word	0x40020028
 8005690:	40020040 	.word	0x40020040
 8005694:	40020058 	.word	0x40020058
 8005698:	40020070 	.word	0x40020070
 800569c:	40020088 	.word	0x40020088
 80056a0:	400200a0 	.word	0x400200a0
 80056a4:	400200b8 	.word	0x400200b8
 80056a8:	40020410 	.word	0x40020410
 80056ac:	40020428 	.word	0x40020428
 80056b0:	40020440 	.word	0x40020440
 80056b4:	40020458 	.word	0x40020458
 80056b8:	40020470 	.word	0x40020470
 80056bc:	40020488 	.word	0x40020488
 80056c0:	400204a0 	.word	0x400204a0
 80056c4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056cc:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80056d2:	f003 031f 	and.w	r3, r3, #31
 80056d6:	2201      	movs	r2, #1
 80056d8:	409a      	lsls	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4a4f      	ldr	r2, [pc, #316]	@ (8005820 <HAL_DMA_Abort+0x5dc>)
 80056e4:	4293      	cmp	r3, r2
 80056e6:	d072      	beq.n	80057ce <HAL_DMA_Abort+0x58a>
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a4d      	ldr	r2, [pc, #308]	@ (8005824 <HAL_DMA_Abort+0x5e0>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d06d      	beq.n	80057ce <HAL_DMA_Abort+0x58a>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a4c      	ldr	r2, [pc, #304]	@ (8005828 <HAL_DMA_Abort+0x5e4>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d068      	beq.n	80057ce <HAL_DMA_Abort+0x58a>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a4a      	ldr	r2, [pc, #296]	@ (800582c <HAL_DMA_Abort+0x5e8>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d063      	beq.n	80057ce <HAL_DMA_Abort+0x58a>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4a49      	ldr	r2, [pc, #292]	@ (8005830 <HAL_DMA_Abort+0x5ec>)
 800570c:	4293      	cmp	r3, r2
 800570e:	d05e      	beq.n	80057ce <HAL_DMA_Abort+0x58a>
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	4a47      	ldr	r2, [pc, #284]	@ (8005834 <HAL_DMA_Abort+0x5f0>)
 8005716:	4293      	cmp	r3, r2
 8005718:	d059      	beq.n	80057ce <HAL_DMA_Abort+0x58a>
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	4a46      	ldr	r2, [pc, #280]	@ (8005838 <HAL_DMA_Abort+0x5f4>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d054      	beq.n	80057ce <HAL_DMA_Abort+0x58a>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4a44      	ldr	r2, [pc, #272]	@ (800583c <HAL_DMA_Abort+0x5f8>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d04f      	beq.n	80057ce <HAL_DMA_Abort+0x58a>
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a43      	ldr	r2, [pc, #268]	@ (8005840 <HAL_DMA_Abort+0x5fc>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d04a      	beq.n	80057ce <HAL_DMA_Abort+0x58a>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	4a41      	ldr	r2, [pc, #260]	@ (8005844 <HAL_DMA_Abort+0x600>)
 800573e:	4293      	cmp	r3, r2
 8005740:	d045      	beq.n	80057ce <HAL_DMA_Abort+0x58a>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4a40      	ldr	r2, [pc, #256]	@ (8005848 <HAL_DMA_Abort+0x604>)
 8005748:	4293      	cmp	r3, r2
 800574a:	d040      	beq.n	80057ce <HAL_DMA_Abort+0x58a>
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	4a3e      	ldr	r2, [pc, #248]	@ (800584c <HAL_DMA_Abort+0x608>)
 8005752:	4293      	cmp	r3, r2
 8005754:	d03b      	beq.n	80057ce <HAL_DMA_Abort+0x58a>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a3d      	ldr	r2, [pc, #244]	@ (8005850 <HAL_DMA_Abort+0x60c>)
 800575c:	4293      	cmp	r3, r2
 800575e:	d036      	beq.n	80057ce <HAL_DMA_Abort+0x58a>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	4a3b      	ldr	r2, [pc, #236]	@ (8005854 <HAL_DMA_Abort+0x610>)
 8005766:	4293      	cmp	r3, r2
 8005768:	d031      	beq.n	80057ce <HAL_DMA_Abort+0x58a>
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a3a      	ldr	r2, [pc, #232]	@ (8005858 <HAL_DMA_Abort+0x614>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d02c      	beq.n	80057ce <HAL_DMA_Abort+0x58a>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a38      	ldr	r2, [pc, #224]	@ (800585c <HAL_DMA_Abort+0x618>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d027      	beq.n	80057ce <HAL_DMA_Abort+0x58a>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a37      	ldr	r2, [pc, #220]	@ (8005860 <HAL_DMA_Abort+0x61c>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d022      	beq.n	80057ce <HAL_DMA_Abort+0x58a>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a35      	ldr	r2, [pc, #212]	@ (8005864 <HAL_DMA_Abort+0x620>)
 800578e:	4293      	cmp	r3, r2
 8005790:	d01d      	beq.n	80057ce <HAL_DMA_Abort+0x58a>
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	4a34      	ldr	r2, [pc, #208]	@ (8005868 <HAL_DMA_Abort+0x624>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d018      	beq.n	80057ce <HAL_DMA_Abort+0x58a>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	4a32      	ldr	r2, [pc, #200]	@ (800586c <HAL_DMA_Abort+0x628>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d013      	beq.n	80057ce <HAL_DMA_Abort+0x58a>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a31      	ldr	r2, [pc, #196]	@ (8005870 <HAL_DMA_Abort+0x62c>)
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d00e      	beq.n	80057ce <HAL_DMA_Abort+0x58a>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a2f      	ldr	r2, [pc, #188]	@ (8005874 <HAL_DMA_Abort+0x630>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d009      	beq.n	80057ce <HAL_DMA_Abort+0x58a>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	4a2e      	ldr	r2, [pc, #184]	@ (8005878 <HAL_DMA_Abort+0x634>)
 80057c0:	4293      	cmp	r3, r2
 80057c2:	d004      	beq.n	80057ce <HAL_DMA_Abort+0x58a>
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	4a2c      	ldr	r2, [pc, #176]	@ (800587c <HAL_DMA_Abort+0x638>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d101      	bne.n	80057d2 <HAL_DMA_Abort+0x58e>
 80057ce:	2301      	movs	r3, #1
 80057d0:	e000      	b.n	80057d4 <HAL_DMA_Abort+0x590>
 80057d2:	2300      	movs	r3, #0
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d015      	beq.n	8005804 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80057dc:	687a      	ldr	r2, [r7, #4]
 80057de:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80057e0:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d00c      	beq.n	8005804 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057ee:	681a      	ldr	r2, [r3, #0]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057f4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80057f8:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005802:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2201      	movs	r2, #1
 8005808:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8005814:	2300      	movs	r3, #0
}
 8005816:	4618      	mov	r0, r3
 8005818:	3718      	adds	r7, #24
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}
 800581e:	bf00      	nop
 8005820:	40020010 	.word	0x40020010
 8005824:	40020028 	.word	0x40020028
 8005828:	40020040 	.word	0x40020040
 800582c:	40020058 	.word	0x40020058
 8005830:	40020070 	.word	0x40020070
 8005834:	40020088 	.word	0x40020088
 8005838:	400200a0 	.word	0x400200a0
 800583c:	400200b8 	.word	0x400200b8
 8005840:	40020410 	.word	0x40020410
 8005844:	40020428 	.word	0x40020428
 8005848:	40020440 	.word	0x40020440
 800584c:	40020458 	.word	0x40020458
 8005850:	40020470 	.word	0x40020470
 8005854:	40020488 	.word	0x40020488
 8005858:	400204a0 	.word	0x400204a0
 800585c:	400204b8 	.word	0x400204b8
 8005860:	58025408 	.word	0x58025408
 8005864:	5802541c 	.word	0x5802541c
 8005868:	58025430 	.word	0x58025430
 800586c:	58025444 	.word	0x58025444
 8005870:	58025458 	.word	0x58025458
 8005874:	5802546c 	.word	0x5802546c
 8005878:	58025480 	.word	0x58025480
 800587c:	58025494 	.word	0x58025494

08005880 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b084      	sub	sp, #16
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d101      	bne.n	8005892 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800588e:	2301      	movs	r3, #1
 8005890:	e237      	b.n	8005d02 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005898:	b2db      	uxtb	r3, r3
 800589a:	2b02      	cmp	r3, #2
 800589c:	d004      	beq.n	80058a8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	2280      	movs	r2, #128	@ 0x80
 80058a2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80058a4:	2301      	movs	r3, #1
 80058a6:	e22c      	b.n	8005d02 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a5c      	ldr	r2, [pc, #368]	@ (8005a20 <HAL_DMA_Abort_IT+0x1a0>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d04a      	beq.n	8005948 <HAL_DMA_Abort_IT+0xc8>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a5b      	ldr	r2, [pc, #364]	@ (8005a24 <HAL_DMA_Abort_IT+0x1a4>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d045      	beq.n	8005948 <HAL_DMA_Abort_IT+0xc8>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a59      	ldr	r2, [pc, #356]	@ (8005a28 <HAL_DMA_Abort_IT+0x1a8>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d040      	beq.n	8005948 <HAL_DMA_Abort_IT+0xc8>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a58      	ldr	r2, [pc, #352]	@ (8005a2c <HAL_DMA_Abort_IT+0x1ac>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d03b      	beq.n	8005948 <HAL_DMA_Abort_IT+0xc8>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a56      	ldr	r2, [pc, #344]	@ (8005a30 <HAL_DMA_Abort_IT+0x1b0>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d036      	beq.n	8005948 <HAL_DMA_Abort_IT+0xc8>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a55      	ldr	r2, [pc, #340]	@ (8005a34 <HAL_DMA_Abort_IT+0x1b4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d031      	beq.n	8005948 <HAL_DMA_Abort_IT+0xc8>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a53      	ldr	r2, [pc, #332]	@ (8005a38 <HAL_DMA_Abort_IT+0x1b8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d02c      	beq.n	8005948 <HAL_DMA_Abort_IT+0xc8>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	4a52      	ldr	r2, [pc, #328]	@ (8005a3c <HAL_DMA_Abort_IT+0x1bc>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d027      	beq.n	8005948 <HAL_DMA_Abort_IT+0xc8>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4a50      	ldr	r2, [pc, #320]	@ (8005a40 <HAL_DMA_Abort_IT+0x1c0>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d022      	beq.n	8005948 <HAL_DMA_Abort_IT+0xc8>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a4f      	ldr	r2, [pc, #316]	@ (8005a44 <HAL_DMA_Abort_IT+0x1c4>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d01d      	beq.n	8005948 <HAL_DMA_Abort_IT+0xc8>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	4a4d      	ldr	r2, [pc, #308]	@ (8005a48 <HAL_DMA_Abort_IT+0x1c8>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d018      	beq.n	8005948 <HAL_DMA_Abort_IT+0xc8>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a4c      	ldr	r2, [pc, #304]	@ (8005a4c <HAL_DMA_Abort_IT+0x1cc>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d013      	beq.n	8005948 <HAL_DMA_Abort_IT+0xc8>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4a4a      	ldr	r2, [pc, #296]	@ (8005a50 <HAL_DMA_Abort_IT+0x1d0>)
 8005926:	4293      	cmp	r3, r2
 8005928:	d00e      	beq.n	8005948 <HAL_DMA_Abort_IT+0xc8>
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	4a49      	ldr	r2, [pc, #292]	@ (8005a54 <HAL_DMA_Abort_IT+0x1d4>)
 8005930:	4293      	cmp	r3, r2
 8005932:	d009      	beq.n	8005948 <HAL_DMA_Abort_IT+0xc8>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4a47      	ldr	r2, [pc, #284]	@ (8005a58 <HAL_DMA_Abort_IT+0x1d8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d004      	beq.n	8005948 <HAL_DMA_Abort_IT+0xc8>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4a46      	ldr	r2, [pc, #280]	@ (8005a5c <HAL_DMA_Abort_IT+0x1dc>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d101      	bne.n	800594c <HAL_DMA_Abort_IT+0xcc>
 8005948:	2301      	movs	r3, #1
 800594a:	e000      	b.n	800594e <HAL_DMA_Abort_IT+0xce>
 800594c:	2300      	movs	r3, #0
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 8086 	beq.w	8005a60 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2204      	movs	r2, #4
 8005958:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	4a2f      	ldr	r2, [pc, #188]	@ (8005a20 <HAL_DMA_Abort_IT+0x1a0>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d04a      	beq.n	80059fc <HAL_DMA_Abort_IT+0x17c>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a2e      	ldr	r2, [pc, #184]	@ (8005a24 <HAL_DMA_Abort_IT+0x1a4>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d045      	beq.n	80059fc <HAL_DMA_Abort_IT+0x17c>
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a2c      	ldr	r2, [pc, #176]	@ (8005a28 <HAL_DMA_Abort_IT+0x1a8>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d040      	beq.n	80059fc <HAL_DMA_Abort_IT+0x17c>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4a2b      	ldr	r2, [pc, #172]	@ (8005a2c <HAL_DMA_Abort_IT+0x1ac>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d03b      	beq.n	80059fc <HAL_DMA_Abort_IT+0x17c>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	4a29      	ldr	r2, [pc, #164]	@ (8005a30 <HAL_DMA_Abort_IT+0x1b0>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d036      	beq.n	80059fc <HAL_DMA_Abort_IT+0x17c>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	4a28      	ldr	r2, [pc, #160]	@ (8005a34 <HAL_DMA_Abort_IT+0x1b4>)
 8005994:	4293      	cmp	r3, r2
 8005996:	d031      	beq.n	80059fc <HAL_DMA_Abort_IT+0x17c>
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a26      	ldr	r2, [pc, #152]	@ (8005a38 <HAL_DMA_Abort_IT+0x1b8>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d02c      	beq.n	80059fc <HAL_DMA_Abort_IT+0x17c>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	4a25      	ldr	r2, [pc, #148]	@ (8005a3c <HAL_DMA_Abort_IT+0x1bc>)
 80059a8:	4293      	cmp	r3, r2
 80059aa:	d027      	beq.n	80059fc <HAL_DMA_Abort_IT+0x17c>
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a23      	ldr	r2, [pc, #140]	@ (8005a40 <HAL_DMA_Abort_IT+0x1c0>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d022      	beq.n	80059fc <HAL_DMA_Abort_IT+0x17c>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4a22      	ldr	r2, [pc, #136]	@ (8005a44 <HAL_DMA_Abort_IT+0x1c4>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d01d      	beq.n	80059fc <HAL_DMA_Abort_IT+0x17c>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4a20      	ldr	r2, [pc, #128]	@ (8005a48 <HAL_DMA_Abort_IT+0x1c8>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d018      	beq.n	80059fc <HAL_DMA_Abort_IT+0x17c>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	4a1f      	ldr	r2, [pc, #124]	@ (8005a4c <HAL_DMA_Abort_IT+0x1cc>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d013      	beq.n	80059fc <HAL_DMA_Abort_IT+0x17c>
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005a50 <HAL_DMA_Abort_IT+0x1d0>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d00e      	beq.n	80059fc <HAL_DMA_Abort_IT+0x17c>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a1c      	ldr	r2, [pc, #112]	@ (8005a54 <HAL_DMA_Abort_IT+0x1d4>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d009      	beq.n	80059fc <HAL_DMA_Abort_IT+0x17c>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a1a      	ldr	r2, [pc, #104]	@ (8005a58 <HAL_DMA_Abort_IT+0x1d8>)
 80059ee:	4293      	cmp	r3, r2
 80059f0:	d004      	beq.n	80059fc <HAL_DMA_Abort_IT+0x17c>
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	4a19      	ldr	r2, [pc, #100]	@ (8005a5c <HAL_DMA_Abort_IT+0x1dc>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d108      	bne.n	8005a0e <HAL_DMA_Abort_IT+0x18e>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681a      	ldr	r2, [r3, #0]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 0201 	bic.w	r2, r2, #1
 8005a0a:	601a      	str	r2, [r3, #0]
 8005a0c:	e178      	b.n	8005d00 <HAL_DMA_Abort_IT+0x480>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f022 0201 	bic.w	r2, r2, #1
 8005a1c:	601a      	str	r2, [r3, #0]
 8005a1e:	e16f      	b.n	8005d00 <HAL_DMA_Abort_IT+0x480>
 8005a20:	40020010 	.word	0x40020010
 8005a24:	40020028 	.word	0x40020028
 8005a28:	40020040 	.word	0x40020040
 8005a2c:	40020058 	.word	0x40020058
 8005a30:	40020070 	.word	0x40020070
 8005a34:	40020088 	.word	0x40020088
 8005a38:	400200a0 	.word	0x400200a0
 8005a3c:	400200b8 	.word	0x400200b8
 8005a40:	40020410 	.word	0x40020410
 8005a44:	40020428 	.word	0x40020428
 8005a48:	40020440 	.word	0x40020440
 8005a4c:	40020458 	.word	0x40020458
 8005a50:	40020470 	.word	0x40020470
 8005a54:	40020488 	.word	0x40020488
 8005a58:	400204a0 	.word	0x400204a0
 8005a5c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 020e 	bic.w	r2, r2, #14
 8005a6e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a6c      	ldr	r2, [pc, #432]	@ (8005c28 <HAL_DMA_Abort_IT+0x3a8>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d04a      	beq.n	8005b10 <HAL_DMA_Abort_IT+0x290>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	4a6b      	ldr	r2, [pc, #428]	@ (8005c2c <HAL_DMA_Abort_IT+0x3ac>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d045      	beq.n	8005b10 <HAL_DMA_Abort_IT+0x290>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a69      	ldr	r2, [pc, #420]	@ (8005c30 <HAL_DMA_Abort_IT+0x3b0>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d040      	beq.n	8005b10 <HAL_DMA_Abort_IT+0x290>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a68      	ldr	r2, [pc, #416]	@ (8005c34 <HAL_DMA_Abort_IT+0x3b4>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d03b      	beq.n	8005b10 <HAL_DMA_Abort_IT+0x290>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a66      	ldr	r2, [pc, #408]	@ (8005c38 <HAL_DMA_Abort_IT+0x3b8>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d036      	beq.n	8005b10 <HAL_DMA_Abort_IT+0x290>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a65      	ldr	r2, [pc, #404]	@ (8005c3c <HAL_DMA_Abort_IT+0x3bc>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d031      	beq.n	8005b10 <HAL_DMA_Abort_IT+0x290>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a63      	ldr	r2, [pc, #396]	@ (8005c40 <HAL_DMA_Abort_IT+0x3c0>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d02c      	beq.n	8005b10 <HAL_DMA_Abort_IT+0x290>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a62      	ldr	r2, [pc, #392]	@ (8005c44 <HAL_DMA_Abort_IT+0x3c4>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d027      	beq.n	8005b10 <HAL_DMA_Abort_IT+0x290>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a60      	ldr	r2, [pc, #384]	@ (8005c48 <HAL_DMA_Abort_IT+0x3c8>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d022      	beq.n	8005b10 <HAL_DMA_Abort_IT+0x290>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	4a5f      	ldr	r2, [pc, #380]	@ (8005c4c <HAL_DMA_Abort_IT+0x3cc>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d01d      	beq.n	8005b10 <HAL_DMA_Abort_IT+0x290>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	4a5d      	ldr	r2, [pc, #372]	@ (8005c50 <HAL_DMA_Abort_IT+0x3d0>)
 8005ada:	4293      	cmp	r3, r2
 8005adc:	d018      	beq.n	8005b10 <HAL_DMA_Abort_IT+0x290>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a5c      	ldr	r2, [pc, #368]	@ (8005c54 <HAL_DMA_Abort_IT+0x3d4>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d013      	beq.n	8005b10 <HAL_DMA_Abort_IT+0x290>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a5a      	ldr	r2, [pc, #360]	@ (8005c58 <HAL_DMA_Abort_IT+0x3d8>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d00e      	beq.n	8005b10 <HAL_DMA_Abort_IT+0x290>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a59      	ldr	r2, [pc, #356]	@ (8005c5c <HAL_DMA_Abort_IT+0x3dc>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d009      	beq.n	8005b10 <HAL_DMA_Abort_IT+0x290>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a57      	ldr	r2, [pc, #348]	@ (8005c60 <HAL_DMA_Abort_IT+0x3e0>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d004      	beq.n	8005b10 <HAL_DMA_Abort_IT+0x290>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a56      	ldr	r2, [pc, #344]	@ (8005c64 <HAL_DMA_Abort_IT+0x3e4>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d108      	bne.n	8005b22 <HAL_DMA_Abort_IT+0x2a2>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681a      	ldr	r2, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0201 	bic.w	r2, r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]
 8005b20:	e007      	b.n	8005b32 <HAL_DMA_Abort_IT+0x2b2>
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0201 	bic.w	r2, r2, #1
 8005b30:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a3c      	ldr	r2, [pc, #240]	@ (8005c28 <HAL_DMA_Abort_IT+0x3a8>)
 8005b38:	4293      	cmp	r3, r2
 8005b3a:	d072      	beq.n	8005c22 <HAL_DMA_Abort_IT+0x3a2>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	4a3a      	ldr	r2, [pc, #232]	@ (8005c2c <HAL_DMA_Abort_IT+0x3ac>)
 8005b42:	4293      	cmp	r3, r2
 8005b44:	d06d      	beq.n	8005c22 <HAL_DMA_Abort_IT+0x3a2>
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	4a39      	ldr	r2, [pc, #228]	@ (8005c30 <HAL_DMA_Abort_IT+0x3b0>)
 8005b4c:	4293      	cmp	r3, r2
 8005b4e:	d068      	beq.n	8005c22 <HAL_DMA_Abort_IT+0x3a2>
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	4a37      	ldr	r2, [pc, #220]	@ (8005c34 <HAL_DMA_Abort_IT+0x3b4>)
 8005b56:	4293      	cmp	r3, r2
 8005b58:	d063      	beq.n	8005c22 <HAL_DMA_Abort_IT+0x3a2>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	4a36      	ldr	r2, [pc, #216]	@ (8005c38 <HAL_DMA_Abort_IT+0x3b8>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d05e      	beq.n	8005c22 <HAL_DMA_Abort_IT+0x3a2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	4a34      	ldr	r2, [pc, #208]	@ (8005c3c <HAL_DMA_Abort_IT+0x3bc>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d059      	beq.n	8005c22 <HAL_DMA_Abort_IT+0x3a2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	4a33      	ldr	r2, [pc, #204]	@ (8005c40 <HAL_DMA_Abort_IT+0x3c0>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d054      	beq.n	8005c22 <HAL_DMA_Abort_IT+0x3a2>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	4a31      	ldr	r2, [pc, #196]	@ (8005c44 <HAL_DMA_Abort_IT+0x3c4>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d04f      	beq.n	8005c22 <HAL_DMA_Abort_IT+0x3a2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	4a30      	ldr	r2, [pc, #192]	@ (8005c48 <HAL_DMA_Abort_IT+0x3c8>)
 8005b88:	4293      	cmp	r3, r2
 8005b8a:	d04a      	beq.n	8005c22 <HAL_DMA_Abort_IT+0x3a2>
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a2e      	ldr	r2, [pc, #184]	@ (8005c4c <HAL_DMA_Abort_IT+0x3cc>)
 8005b92:	4293      	cmp	r3, r2
 8005b94:	d045      	beq.n	8005c22 <HAL_DMA_Abort_IT+0x3a2>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4a2d      	ldr	r2, [pc, #180]	@ (8005c50 <HAL_DMA_Abort_IT+0x3d0>)
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d040      	beq.n	8005c22 <HAL_DMA_Abort_IT+0x3a2>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	4a2b      	ldr	r2, [pc, #172]	@ (8005c54 <HAL_DMA_Abort_IT+0x3d4>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d03b      	beq.n	8005c22 <HAL_DMA_Abort_IT+0x3a2>
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	4a2a      	ldr	r2, [pc, #168]	@ (8005c58 <HAL_DMA_Abort_IT+0x3d8>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d036      	beq.n	8005c22 <HAL_DMA_Abort_IT+0x3a2>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	4a28      	ldr	r2, [pc, #160]	@ (8005c5c <HAL_DMA_Abort_IT+0x3dc>)
 8005bba:	4293      	cmp	r3, r2
 8005bbc:	d031      	beq.n	8005c22 <HAL_DMA_Abort_IT+0x3a2>
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	4a27      	ldr	r2, [pc, #156]	@ (8005c60 <HAL_DMA_Abort_IT+0x3e0>)
 8005bc4:	4293      	cmp	r3, r2
 8005bc6:	d02c      	beq.n	8005c22 <HAL_DMA_Abort_IT+0x3a2>
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4a25      	ldr	r2, [pc, #148]	@ (8005c64 <HAL_DMA_Abort_IT+0x3e4>)
 8005bce:	4293      	cmp	r3, r2
 8005bd0:	d027      	beq.n	8005c22 <HAL_DMA_Abort_IT+0x3a2>
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	4a24      	ldr	r2, [pc, #144]	@ (8005c68 <HAL_DMA_Abort_IT+0x3e8>)
 8005bd8:	4293      	cmp	r3, r2
 8005bda:	d022      	beq.n	8005c22 <HAL_DMA_Abort_IT+0x3a2>
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a22      	ldr	r2, [pc, #136]	@ (8005c6c <HAL_DMA_Abort_IT+0x3ec>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d01d      	beq.n	8005c22 <HAL_DMA_Abort_IT+0x3a2>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a21      	ldr	r2, [pc, #132]	@ (8005c70 <HAL_DMA_Abort_IT+0x3f0>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d018      	beq.n	8005c22 <HAL_DMA_Abort_IT+0x3a2>
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	4a1f      	ldr	r2, [pc, #124]	@ (8005c74 <HAL_DMA_Abort_IT+0x3f4>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d013      	beq.n	8005c22 <HAL_DMA_Abort_IT+0x3a2>
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	4a1e      	ldr	r2, [pc, #120]	@ (8005c78 <HAL_DMA_Abort_IT+0x3f8>)
 8005c00:	4293      	cmp	r3, r2
 8005c02:	d00e      	beq.n	8005c22 <HAL_DMA_Abort_IT+0x3a2>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	4a1c      	ldr	r2, [pc, #112]	@ (8005c7c <HAL_DMA_Abort_IT+0x3fc>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d009      	beq.n	8005c22 <HAL_DMA_Abort_IT+0x3a2>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a1b      	ldr	r2, [pc, #108]	@ (8005c80 <HAL_DMA_Abort_IT+0x400>)
 8005c14:	4293      	cmp	r3, r2
 8005c16:	d004      	beq.n	8005c22 <HAL_DMA_Abort_IT+0x3a2>
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	4a19      	ldr	r2, [pc, #100]	@ (8005c84 <HAL_DMA_Abort_IT+0x404>)
 8005c1e:	4293      	cmp	r3, r2
 8005c20:	d132      	bne.n	8005c88 <HAL_DMA_Abort_IT+0x408>
 8005c22:	2301      	movs	r3, #1
 8005c24:	e031      	b.n	8005c8a <HAL_DMA_Abort_IT+0x40a>
 8005c26:	bf00      	nop
 8005c28:	40020010 	.word	0x40020010
 8005c2c:	40020028 	.word	0x40020028
 8005c30:	40020040 	.word	0x40020040
 8005c34:	40020058 	.word	0x40020058
 8005c38:	40020070 	.word	0x40020070
 8005c3c:	40020088 	.word	0x40020088
 8005c40:	400200a0 	.word	0x400200a0
 8005c44:	400200b8 	.word	0x400200b8
 8005c48:	40020410 	.word	0x40020410
 8005c4c:	40020428 	.word	0x40020428
 8005c50:	40020440 	.word	0x40020440
 8005c54:	40020458 	.word	0x40020458
 8005c58:	40020470 	.word	0x40020470
 8005c5c:	40020488 	.word	0x40020488
 8005c60:	400204a0 	.word	0x400204a0
 8005c64:	400204b8 	.word	0x400204b8
 8005c68:	58025408 	.word	0x58025408
 8005c6c:	5802541c 	.word	0x5802541c
 8005c70:	58025430 	.word	0x58025430
 8005c74:	58025444 	.word	0x58025444
 8005c78:	58025458 	.word	0x58025458
 8005c7c:	5802546c 	.word	0x5802546c
 8005c80:	58025480 	.word	0x58025480
 8005c84:	58025494 	.word	0x58025494
 8005c88:	2300      	movs	r3, #0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d028      	beq.n	8005ce0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005c98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005c9c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005ca2:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005ca8:	f003 031f 	and.w	r3, r3, #31
 8005cac:	2201      	movs	r2, #1
 8005cae:	409a      	lsls	r2, r3
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005cb8:	687a      	ldr	r2, [r7, #4]
 8005cba:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8005cbc:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00c      	beq.n	8005ce0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005cd0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005cd4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005cde:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d003      	beq.n	8005d00 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8005d00:	2300      	movs	r3, #0
}
 8005d02:	4618      	mov	r0, r3
 8005d04:	3710      	adds	r7, #16
 8005d06:	46bd      	mov	sp, r7
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	bf00      	nop

08005d0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08a      	sub	sp, #40	@ 0x28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8005d14:	2300      	movs	r3, #0
 8005d16:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005d18:	4b67      	ldr	r3, [pc, #412]	@ (8005eb8 <HAL_DMA_IRQHandler+0x1ac>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a67      	ldr	r2, [pc, #412]	@ (8005ebc <HAL_DMA_IRQHandler+0x1b0>)
 8005d1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d22:	0a9b      	lsrs	r3, r3, #10
 8005d24:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d2a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d30:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8005d32:	6a3b      	ldr	r3, [r7, #32]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	4a5f      	ldr	r2, [pc, #380]	@ (8005ec0 <HAL_DMA_IRQHandler+0x1b4>)
 8005d44:	4293      	cmp	r3, r2
 8005d46:	d04a      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a5d      	ldr	r2, [pc, #372]	@ (8005ec4 <HAL_DMA_IRQHandler+0x1b8>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d045      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	4a5c      	ldr	r2, [pc, #368]	@ (8005ec8 <HAL_DMA_IRQHandler+0x1bc>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d040      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a5a      	ldr	r2, [pc, #360]	@ (8005ecc <HAL_DMA_IRQHandler+0x1c0>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d03b      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a59      	ldr	r2, [pc, #356]	@ (8005ed0 <HAL_DMA_IRQHandler+0x1c4>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d036      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a57      	ldr	r2, [pc, #348]	@ (8005ed4 <HAL_DMA_IRQHandler+0x1c8>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d031      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a56      	ldr	r2, [pc, #344]	@ (8005ed8 <HAL_DMA_IRQHandler+0x1cc>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d02c      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a54      	ldr	r2, [pc, #336]	@ (8005edc <HAL_DMA_IRQHandler+0x1d0>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d027      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a53      	ldr	r2, [pc, #332]	@ (8005ee0 <HAL_DMA_IRQHandler+0x1d4>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d022      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a51      	ldr	r2, [pc, #324]	@ (8005ee4 <HAL_DMA_IRQHandler+0x1d8>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d01d      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a50      	ldr	r2, [pc, #320]	@ (8005ee8 <HAL_DMA_IRQHandler+0x1dc>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d018      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a4e      	ldr	r2, [pc, #312]	@ (8005eec <HAL_DMA_IRQHandler+0x1e0>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d013      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a4d      	ldr	r2, [pc, #308]	@ (8005ef0 <HAL_DMA_IRQHandler+0x1e4>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d00e      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4a4b      	ldr	r2, [pc, #300]	@ (8005ef4 <HAL_DMA_IRQHandler+0x1e8>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d009      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4a4a      	ldr	r2, [pc, #296]	@ (8005ef8 <HAL_DMA_IRQHandler+0x1ec>)
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d004      	beq.n	8005dde <HAL_DMA_IRQHandler+0xd2>
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	4a48      	ldr	r2, [pc, #288]	@ (8005efc <HAL_DMA_IRQHandler+0x1f0>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d101      	bne.n	8005de2 <HAL_DMA_IRQHandler+0xd6>
 8005dde:	2301      	movs	r3, #1
 8005de0:	e000      	b.n	8005de4 <HAL_DMA_IRQHandler+0xd8>
 8005de2:	2300      	movs	r3, #0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	f000 842b 	beq.w	8006640 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dee:	f003 031f 	and.w	r3, r3, #31
 8005df2:	2208      	movs	r2, #8
 8005df4:	409a      	lsls	r2, r3
 8005df6:	69bb      	ldr	r3, [r7, #24]
 8005df8:	4013      	ands	r3, r2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 80a2 	beq.w	8005f44 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	4a2e      	ldr	r2, [pc, #184]	@ (8005ec0 <HAL_DMA_IRQHandler+0x1b4>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d04a      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	4a2d      	ldr	r2, [pc, #180]	@ (8005ec4 <HAL_DMA_IRQHandler+0x1b8>)
 8005e10:	4293      	cmp	r3, r2
 8005e12:	d045      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	4a2b      	ldr	r2, [pc, #172]	@ (8005ec8 <HAL_DMA_IRQHandler+0x1bc>)
 8005e1a:	4293      	cmp	r3, r2
 8005e1c:	d040      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4a2a      	ldr	r2, [pc, #168]	@ (8005ecc <HAL_DMA_IRQHandler+0x1c0>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d03b      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a28      	ldr	r2, [pc, #160]	@ (8005ed0 <HAL_DMA_IRQHandler+0x1c4>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d036      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a27      	ldr	r2, [pc, #156]	@ (8005ed4 <HAL_DMA_IRQHandler+0x1c8>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d031      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	4a25      	ldr	r2, [pc, #148]	@ (8005ed8 <HAL_DMA_IRQHandler+0x1cc>)
 8005e42:	4293      	cmp	r3, r2
 8005e44:	d02c      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	4a24      	ldr	r2, [pc, #144]	@ (8005edc <HAL_DMA_IRQHandler+0x1d0>)
 8005e4c:	4293      	cmp	r3, r2
 8005e4e:	d027      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	4a22      	ldr	r2, [pc, #136]	@ (8005ee0 <HAL_DMA_IRQHandler+0x1d4>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d022      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a21      	ldr	r2, [pc, #132]	@ (8005ee4 <HAL_DMA_IRQHandler+0x1d8>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d01d      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	4a1f      	ldr	r2, [pc, #124]	@ (8005ee8 <HAL_DMA_IRQHandler+0x1dc>)
 8005e6a:	4293      	cmp	r3, r2
 8005e6c:	d018      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a1e      	ldr	r2, [pc, #120]	@ (8005eec <HAL_DMA_IRQHandler+0x1e0>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d013      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a1c      	ldr	r2, [pc, #112]	@ (8005ef0 <HAL_DMA_IRQHandler+0x1e4>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00e      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a1b      	ldr	r2, [pc, #108]	@ (8005ef4 <HAL_DMA_IRQHandler+0x1e8>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d009      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a19      	ldr	r2, [pc, #100]	@ (8005ef8 <HAL_DMA_IRQHandler+0x1ec>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d004      	beq.n	8005ea0 <HAL_DMA_IRQHandler+0x194>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a18      	ldr	r2, [pc, #96]	@ (8005efc <HAL_DMA_IRQHandler+0x1f0>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d12f      	bne.n	8005f00 <HAL_DMA_IRQHandler+0x1f4>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	f003 0304 	and.w	r3, r3, #4
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	bf14      	ite	ne
 8005eae:	2301      	movne	r3, #1
 8005eb0:	2300      	moveq	r3, #0
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	e02e      	b.n	8005f14 <HAL_DMA_IRQHandler+0x208>
 8005eb6:	bf00      	nop
 8005eb8:	24000000 	.word	0x24000000
 8005ebc:	1b4e81b5 	.word	0x1b4e81b5
 8005ec0:	40020010 	.word	0x40020010
 8005ec4:	40020028 	.word	0x40020028
 8005ec8:	40020040 	.word	0x40020040
 8005ecc:	40020058 	.word	0x40020058
 8005ed0:	40020070 	.word	0x40020070
 8005ed4:	40020088 	.word	0x40020088
 8005ed8:	400200a0 	.word	0x400200a0
 8005edc:	400200b8 	.word	0x400200b8
 8005ee0:	40020410 	.word	0x40020410
 8005ee4:	40020428 	.word	0x40020428
 8005ee8:	40020440 	.word	0x40020440
 8005eec:	40020458 	.word	0x40020458
 8005ef0:	40020470 	.word	0x40020470
 8005ef4:	40020488 	.word	0x40020488
 8005ef8:	400204a0 	.word	0x400204a0
 8005efc:	400204b8 	.word	0x400204b8
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f003 0308 	and.w	r3, r3, #8
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	bf14      	ite	ne
 8005f0e:	2301      	movne	r3, #1
 8005f10:	2300      	moveq	r3, #0
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d015      	beq.n	8005f44 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f022 0204 	bic.w	r2, r2, #4
 8005f26:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f2c:	f003 031f 	and.w	r3, r3, #31
 8005f30:	2208      	movs	r2, #8
 8005f32:	409a      	lsls	r2, r3
 8005f34:	6a3b      	ldr	r3, [r7, #32]
 8005f36:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005f3c:	f043 0201 	orr.w	r2, r3, #1
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005f48:	f003 031f 	and.w	r3, r3, #31
 8005f4c:	69ba      	ldr	r2, [r7, #24]
 8005f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d06e      	beq.n	8006038 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	4a69      	ldr	r2, [pc, #420]	@ (8006104 <HAL_DMA_IRQHandler+0x3f8>)
 8005f60:	4293      	cmp	r3, r2
 8005f62:	d04a      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a67      	ldr	r2, [pc, #412]	@ (8006108 <HAL_DMA_IRQHandler+0x3fc>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d045      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a66      	ldr	r2, [pc, #408]	@ (800610c <HAL_DMA_IRQHandler+0x400>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d040      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a64      	ldr	r2, [pc, #400]	@ (8006110 <HAL_DMA_IRQHandler+0x404>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d03b      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a63      	ldr	r2, [pc, #396]	@ (8006114 <HAL_DMA_IRQHandler+0x408>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d036      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	4a61      	ldr	r2, [pc, #388]	@ (8006118 <HAL_DMA_IRQHandler+0x40c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d031      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a60      	ldr	r2, [pc, #384]	@ (800611c <HAL_DMA_IRQHandler+0x410>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d02c      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a5e      	ldr	r2, [pc, #376]	@ (8006120 <HAL_DMA_IRQHandler+0x414>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d027      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a5d      	ldr	r2, [pc, #372]	@ (8006124 <HAL_DMA_IRQHandler+0x418>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d022      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a5b      	ldr	r2, [pc, #364]	@ (8006128 <HAL_DMA_IRQHandler+0x41c>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d01d      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a5a      	ldr	r2, [pc, #360]	@ (800612c <HAL_DMA_IRQHandler+0x420>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d018      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a58      	ldr	r2, [pc, #352]	@ (8006130 <HAL_DMA_IRQHandler+0x424>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d013      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a57      	ldr	r2, [pc, #348]	@ (8006134 <HAL_DMA_IRQHandler+0x428>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d00e      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4a55      	ldr	r2, [pc, #340]	@ (8006138 <HAL_DMA_IRQHandler+0x42c>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d009      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	4a54      	ldr	r2, [pc, #336]	@ (800613c <HAL_DMA_IRQHandler+0x430>)
 8005fec:	4293      	cmp	r3, r2
 8005fee:	d004      	beq.n	8005ffa <HAL_DMA_IRQHandler+0x2ee>
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	4a52      	ldr	r2, [pc, #328]	@ (8006140 <HAL_DMA_IRQHandler+0x434>)
 8005ff6:	4293      	cmp	r3, r2
 8005ff8:	d10a      	bne.n	8006010 <HAL_DMA_IRQHandler+0x304>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	695b      	ldr	r3, [r3, #20]
 8006000:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006004:	2b00      	cmp	r3, #0
 8006006:	bf14      	ite	ne
 8006008:	2301      	movne	r3, #1
 800600a:	2300      	moveq	r3, #0
 800600c:	b2db      	uxtb	r3, r3
 800600e:	e003      	b.n	8006018 <HAL_DMA_IRQHandler+0x30c>
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	2300      	movs	r3, #0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d00d      	beq.n	8006038 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006020:	f003 031f 	and.w	r3, r3, #31
 8006024:	2201      	movs	r2, #1
 8006026:	409a      	lsls	r2, r3
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006030:	f043 0202 	orr.w	r2, r3, #2
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800603c:	f003 031f 	and.w	r3, r3, #31
 8006040:	2204      	movs	r2, #4
 8006042:	409a      	lsls	r2, r3
 8006044:	69bb      	ldr	r3, [r7, #24]
 8006046:	4013      	ands	r3, r2
 8006048:	2b00      	cmp	r3, #0
 800604a:	f000 808f 	beq.w	800616c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a2c      	ldr	r2, [pc, #176]	@ (8006104 <HAL_DMA_IRQHandler+0x3f8>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d04a      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a2a      	ldr	r2, [pc, #168]	@ (8006108 <HAL_DMA_IRQHandler+0x3fc>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d045      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	4a29      	ldr	r2, [pc, #164]	@ (800610c <HAL_DMA_IRQHandler+0x400>)
 8006068:	4293      	cmp	r3, r2
 800606a:	d040      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a27      	ldr	r2, [pc, #156]	@ (8006110 <HAL_DMA_IRQHandler+0x404>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d03b      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	4a26      	ldr	r2, [pc, #152]	@ (8006114 <HAL_DMA_IRQHandler+0x408>)
 800607c:	4293      	cmp	r3, r2
 800607e:	d036      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	4a24      	ldr	r2, [pc, #144]	@ (8006118 <HAL_DMA_IRQHandler+0x40c>)
 8006086:	4293      	cmp	r3, r2
 8006088:	d031      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	4a23      	ldr	r2, [pc, #140]	@ (800611c <HAL_DMA_IRQHandler+0x410>)
 8006090:	4293      	cmp	r3, r2
 8006092:	d02c      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a21      	ldr	r2, [pc, #132]	@ (8006120 <HAL_DMA_IRQHandler+0x414>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d027      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4a20      	ldr	r2, [pc, #128]	@ (8006124 <HAL_DMA_IRQHandler+0x418>)
 80060a4:	4293      	cmp	r3, r2
 80060a6:	d022      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a1e      	ldr	r2, [pc, #120]	@ (8006128 <HAL_DMA_IRQHandler+0x41c>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d01d      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a1d      	ldr	r2, [pc, #116]	@ (800612c <HAL_DMA_IRQHandler+0x420>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d018      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006130 <HAL_DMA_IRQHandler+0x424>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d013      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a1a      	ldr	r2, [pc, #104]	@ (8006134 <HAL_DMA_IRQHandler+0x428>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d00e      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a18      	ldr	r2, [pc, #96]	@ (8006138 <HAL_DMA_IRQHandler+0x42c>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d009      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a17      	ldr	r2, [pc, #92]	@ (800613c <HAL_DMA_IRQHandler+0x430>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d004      	beq.n	80060ee <HAL_DMA_IRQHandler+0x3e2>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a15      	ldr	r2, [pc, #84]	@ (8006140 <HAL_DMA_IRQHandler+0x434>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d12a      	bne.n	8006144 <HAL_DMA_IRQHandler+0x438>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f003 0302 	and.w	r3, r3, #2
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	bf14      	ite	ne
 80060fc:	2301      	movne	r3, #1
 80060fe:	2300      	moveq	r3, #0
 8006100:	b2db      	uxtb	r3, r3
 8006102:	e023      	b.n	800614c <HAL_DMA_IRQHandler+0x440>
 8006104:	40020010 	.word	0x40020010
 8006108:	40020028 	.word	0x40020028
 800610c:	40020040 	.word	0x40020040
 8006110:	40020058 	.word	0x40020058
 8006114:	40020070 	.word	0x40020070
 8006118:	40020088 	.word	0x40020088
 800611c:	400200a0 	.word	0x400200a0
 8006120:	400200b8 	.word	0x400200b8
 8006124:	40020410 	.word	0x40020410
 8006128:	40020428 	.word	0x40020428
 800612c:	40020440 	.word	0x40020440
 8006130:	40020458 	.word	0x40020458
 8006134:	40020470 	.word	0x40020470
 8006138:	40020488 	.word	0x40020488
 800613c:	400204a0 	.word	0x400204a0
 8006140:	400204b8 	.word	0x400204b8
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2300      	movs	r3, #0
 800614c:	2b00      	cmp	r3, #0
 800614e:	d00d      	beq.n	800616c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006154:	f003 031f 	and.w	r3, r3, #31
 8006158:	2204      	movs	r2, #4
 800615a:	409a      	lsls	r2, r3
 800615c:	6a3b      	ldr	r3, [r7, #32]
 800615e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006164:	f043 0204 	orr.w	r2, r3, #4
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006170:	f003 031f 	and.w	r3, r3, #31
 8006174:	2210      	movs	r2, #16
 8006176:	409a      	lsls	r2, r3
 8006178:	69bb      	ldr	r3, [r7, #24]
 800617a:	4013      	ands	r3, r2
 800617c:	2b00      	cmp	r3, #0
 800617e:	f000 80a6 	beq.w	80062ce <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	4a85      	ldr	r2, [pc, #532]	@ (800639c <HAL_DMA_IRQHandler+0x690>)
 8006188:	4293      	cmp	r3, r2
 800618a:	d04a      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4a83      	ldr	r2, [pc, #524]	@ (80063a0 <HAL_DMA_IRQHandler+0x694>)
 8006192:	4293      	cmp	r3, r2
 8006194:	d045      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	4a82      	ldr	r2, [pc, #520]	@ (80063a4 <HAL_DMA_IRQHandler+0x698>)
 800619c:	4293      	cmp	r3, r2
 800619e:	d040      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a80      	ldr	r2, [pc, #512]	@ (80063a8 <HAL_DMA_IRQHandler+0x69c>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d03b      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a7f      	ldr	r2, [pc, #508]	@ (80063ac <HAL_DMA_IRQHandler+0x6a0>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d036      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4a7d      	ldr	r2, [pc, #500]	@ (80063b0 <HAL_DMA_IRQHandler+0x6a4>)
 80061ba:	4293      	cmp	r3, r2
 80061bc:	d031      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a7c      	ldr	r2, [pc, #496]	@ (80063b4 <HAL_DMA_IRQHandler+0x6a8>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d02c      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	4a7a      	ldr	r2, [pc, #488]	@ (80063b8 <HAL_DMA_IRQHandler+0x6ac>)
 80061ce:	4293      	cmp	r3, r2
 80061d0:	d027      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a79      	ldr	r2, [pc, #484]	@ (80063bc <HAL_DMA_IRQHandler+0x6b0>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d022      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a77      	ldr	r2, [pc, #476]	@ (80063c0 <HAL_DMA_IRQHandler+0x6b4>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d01d      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a76      	ldr	r2, [pc, #472]	@ (80063c4 <HAL_DMA_IRQHandler+0x6b8>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d018      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a74      	ldr	r2, [pc, #464]	@ (80063c8 <HAL_DMA_IRQHandler+0x6bc>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d013      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a73      	ldr	r2, [pc, #460]	@ (80063cc <HAL_DMA_IRQHandler+0x6c0>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d00e      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a71      	ldr	r2, [pc, #452]	@ (80063d0 <HAL_DMA_IRQHandler+0x6c4>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d009      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	4a70      	ldr	r2, [pc, #448]	@ (80063d4 <HAL_DMA_IRQHandler+0x6c8>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d004      	beq.n	8006222 <HAL_DMA_IRQHandler+0x516>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	4a6e      	ldr	r2, [pc, #440]	@ (80063d8 <HAL_DMA_IRQHandler+0x6cc>)
 800621e:	4293      	cmp	r3, r2
 8006220:	d10a      	bne.n	8006238 <HAL_DMA_IRQHandler+0x52c>
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f003 0308 	and.w	r3, r3, #8
 800622c:	2b00      	cmp	r3, #0
 800622e:	bf14      	ite	ne
 8006230:	2301      	movne	r3, #1
 8006232:	2300      	moveq	r3, #0
 8006234:	b2db      	uxtb	r3, r3
 8006236:	e009      	b.n	800624c <HAL_DMA_IRQHandler+0x540>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f003 0304 	and.w	r3, r3, #4
 8006242:	2b00      	cmp	r3, #0
 8006244:	bf14      	ite	ne
 8006246:	2301      	movne	r3, #1
 8006248:	2300      	moveq	r3, #0
 800624a:	b2db      	uxtb	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d03e      	beq.n	80062ce <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006254:	f003 031f 	and.w	r3, r3, #31
 8006258:	2210      	movs	r2, #16
 800625a:	409a      	lsls	r2, r3
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800626a:	2b00      	cmp	r3, #0
 800626c:	d018      	beq.n	80062a0 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d108      	bne.n	800628e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006280:	2b00      	cmp	r3, #0
 8006282:	d024      	beq.n	80062ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	4798      	blx	r3
 800628c:	e01f      	b.n	80062ce <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006292:	2b00      	cmp	r3, #0
 8006294:	d01b      	beq.n	80062ce <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	4798      	blx	r3
 800629e:	e016      	b.n	80062ce <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d107      	bne.n	80062be <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	681a      	ldr	r2, [r3, #0]
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f022 0208 	bic.w	r2, r2, #8
 80062bc:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d003      	beq.n	80062ce <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80062d2:	f003 031f 	and.w	r3, r3, #31
 80062d6:	2220      	movs	r2, #32
 80062d8:	409a      	lsls	r2, r3
 80062da:	69bb      	ldr	r3, [r7, #24]
 80062dc:	4013      	ands	r3, r2
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f000 8110 	beq.w	8006504 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	4a2c      	ldr	r2, [pc, #176]	@ (800639c <HAL_DMA_IRQHandler+0x690>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d04a      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4a2b      	ldr	r2, [pc, #172]	@ (80063a0 <HAL_DMA_IRQHandler+0x694>)
 80062f4:	4293      	cmp	r3, r2
 80062f6:	d045      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	4a29      	ldr	r2, [pc, #164]	@ (80063a4 <HAL_DMA_IRQHandler+0x698>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d040      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	4a28      	ldr	r2, [pc, #160]	@ (80063a8 <HAL_DMA_IRQHandler+0x69c>)
 8006308:	4293      	cmp	r3, r2
 800630a:	d03b      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	4a26      	ldr	r2, [pc, #152]	@ (80063ac <HAL_DMA_IRQHandler+0x6a0>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d036      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4a25      	ldr	r2, [pc, #148]	@ (80063b0 <HAL_DMA_IRQHandler+0x6a4>)
 800631c:	4293      	cmp	r3, r2
 800631e:	d031      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a23      	ldr	r2, [pc, #140]	@ (80063b4 <HAL_DMA_IRQHandler+0x6a8>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d02c      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4a22      	ldr	r2, [pc, #136]	@ (80063b8 <HAL_DMA_IRQHandler+0x6ac>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d027      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	4a20      	ldr	r2, [pc, #128]	@ (80063bc <HAL_DMA_IRQHandler+0x6b0>)
 800633a:	4293      	cmp	r3, r2
 800633c:	d022      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a1f      	ldr	r2, [pc, #124]	@ (80063c0 <HAL_DMA_IRQHandler+0x6b4>)
 8006344:	4293      	cmp	r3, r2
 8006346:	d01d      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	4a1d      	ldr	r2, [pc, #116]	@ (80063c4 <HAL_DMA_IRQHandler+0x6b8>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d018      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	4a1c      	ldr	r2, [pc, #112]	@ (80063c8 <HAL_DMA_IRQHandler+0x6bc>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d013      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	4a1a      	ldr	r2, [pc, #104]	@ (80063cc <HAL_DMA_IRQHandler+0x6c0>)
 8006362:	4293      	cmp	r3, r2
 8006364:	d00e      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a19      	ldr	r2, [pc, #100]	@ (80063d0 <HAL_DMA_IRQHandler+0x6c4>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d009      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	4a17      	ldr	r2, [pc, #92]	@ (80063d4 <HAL_DMA_IRQHandler+0x6c8>)
 8006376:	4293      	cmp	r3, r2
 8006378:	d004      	beq.n	8006384 <HAL_DMA_IRQHandler+0x678>
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	4a16      	ldr	r2, [pc, #88]	@ (80063d8 <HAL_DMA_IRQHandler+0x6cc>)
 8006380:	4293      	cmp	r3, r2
 8006382:	d12b      	bne.n	80063dc <HAL_DMA_IRQHandler+0x6d0>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f003 0310 	and.w	r3, r3, #16
 800638e:	2b00      	cmp	r3, #0
 8006390:	bf14      	ite	ne
 8006392:	2301      	movne	r3, #1
 8006394:	2300      	moveq	r3, #0
 8006396:	b2db      	uxtb	r3, r3
 8006398:	e02a      	b.n	80063f0 <HAL_DMA_IRQHandler+0x6e4>
 800639a:	bf00      	nop
 800639c:	40020010 	.word	0x40020010
 80063a0:	40020028 	.word	0x40020028
 80063a4:	40020040 	.word	0x40020040
 80063a8:	40020058 	.word	0x40020058
 80063ac:	40020070 	.word	0x40020070
 80063b0:	40020088 	.word	0x40020088
 80063b4:	400200a0 	.word	0x400200a0
 80063b8:	400200b8 	.word	0x400200b8
 80063bc:	40020410 	.word	0x40020410
 80063c0:	40020428 	.word	0x40020428
 80063c4:	40020440 	.word	0x40020440
 80063c8:	40020458 	.word	0x40020458
 80063cc:	40020470 	.word	0x40020470
 80063d0:	40020488 	.word	0x40020488
 80063d4:	400204a0 	.word	0x400204a0
 80063d8:	400204b8 	.word	0x400204b8
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f003 0302 	and.w	r3, r3, #2
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	bf14      	ite	ne
 80063ea:	2301      	movne	r3, #1
 80063ec:	2300      	moveq	r3, #0
 80063ee:	b2db      	uxtb	r3, r3
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	f000 8087 	beq.w	8006504 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80063fa:	f003 031f 	and.w	r3, r3, #31
 80063fe:	2220      	movs	r2, #32
 8006400:	409a      	lsls	r2, r3
 8006402:	6a3b      	ldr	r3, [r7, #32]
 8006404:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800640c:	b2db      	uxtb	r3, r3
 800640e:	2b04      	cmp	r3, #4
 8006410:	d139      	bne.n	8006486 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	681a      	ldr	r2, [r3, #0]
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f022 0216 	bic.w	r2, r2, #22
 8006420:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	695a      	ldr	r2, [r3, #20]
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006430:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006436:	2b00      	cmp	r3, #0
 8006438:	d103      	bne.n	8006442 <HAL_DMA_IRQHandler+0x736>
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800643e:	2b00      	cmp	r3, #0
 8006440:	d007      	beq.n	8006452 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f022 0208 	bic.w	r2, r2, #8
 8006450:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006456:	f003 031f 	and.w	r3, r3, #31
 800645a:	223f      	movs	r2, #63	@ 0x3f
 800645c:	409a      	lsls	r2, r3
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2201      	movs	r2, #1
 8006466:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	2200      	movs	r2, #0
 800646e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006476:	2b00      	cmp	r3, #0
 8006478:	f000 834a 	beq.w	8006b10 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	4798      	blx	r3
          }
          return;
 8006484:	e344      	b.n	8006b10 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8006490:	2b00      	cmp	r3, #0
 8006492:	d018      	beq.n	80064c6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d108      	bne.n	80064b4 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d02c      	beq.n	8006504 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	4798      	blx	r3
 80064b2:	e027      	b.n	8006504 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d023      	beq.n	8006504 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064c0:	6878      	ldr	r0, [r7, #4]
 80064c2:	4798      	blx	r3
 80064c4:	e01e      	b.n	8006504 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10f      	bne.n	80064f4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	681a      	ldr	r2, [r3, #0]
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f022 0210 	bic.w	r2, r2, #16
 80064e2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2201      	movs	r2, #1
 80064e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d003      	beq.n	8006504 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006500:	6878      	ldr	r0, [r7, #4]
 8006502:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006508:	2b00      	cmp	r3, #0
 800650a:	f000 8306 	beq.w	8006b1a <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006512:	f003 0301 	and.w	r3, r3, #1
 8006516:	2b00      	cmp	r3, #0
 8006518:	f000 8088 	beq.w	800662c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2204      	movs	r2, #4
 8006520:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a7a      	ldr	r2, [pc, #488]	@ (8006714 <HAL_DMA_IRQHandler+0xa08>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d04a      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	4a79      	ldr	r2, [pc, #484]	@ (8006718 <HAL_DMA_IRQHandler+0xa0c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d045      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	4a77      	ldr	r2, [pc, #476]	@ (800671c <HAL_DMA_IRQHandler+0xa10>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d040      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a76      	ldr	r2, [pc, #472]	@ (8006720 <HAL_DMA_IRQHandler+0xa14>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d03b      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a74      	ldr	r2, [pc, #464]	@ (8006724 <HAL_DMA_IRQHandler+0xa18>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d036      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	4a73      	ldr	r2, [pc, #460]	@ (8006728 <HAL_DMA_IRQHandler+0xa1c>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d031      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	4a71      	ldr	r2, [pc, #452]	@ (800672c <HAL_DMA_IRQHandler+0xa20>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d02c      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4a70      	ldr	r2, [pc, #448]	@ (8006730 <HAL_DMA_IRQHandler+0xa24>)
 8006570:	4293      	cmp	r3, r2
 8006572:	d027      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	4a6e      	ldr	r2, [pc, #440]	@ (8006734 <HAL_DMA_IRQHandler+0xa28>)
 800657a:	4293      	cmp	r3, r2
 800657c:	d022      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	4a6d      	ldr	r2, [pc, #436]	@ (8006738 <HAL_DMA_IRQHandler+0xa2c>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d01d      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	4a6b      	ldr	r2, [pc, #428]	@ (800673c <HAL_DMA_IRQHandler+0xa30>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d018      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	4a6a      	ldr	r2, [pc, #424]	@ (8006740 <HAL_DMA_IRQHandler+0xa34>)
 8006598:	4293      	cmp	r3, r2
 800659a:	d013      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4a68      	ldr	r2, [pc, #416]	@ (8006744 <HAL_DMA_IRQHandler+0xa38>)
 80065a2:	4293      	cmp	r3, r2
 80065a4:	d00e      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a67      	ldr	r2, [pc, #412]	@ (8006748 <HAL_DMA_IRQHandler+0xa3c>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d009      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a65      	ldr	r2, [pc, #404]	@ (800674c <HAL_DMA_IRQHandler+0xa40>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d004      	beq.n	80065c4 <HAL_DMA_IRQHandler+0x8b8>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a64      	ldr	r2, [pc, #400]	@ (8006750 <HAL_DMA_IRQHandler+0xa44>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d108      	bne.n	80065d6 <HAL_DMA_IRQHandler+0x8ca>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0201 	bic.w	r2, r2, #1
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	e007      	b.n	80065e6 <HAL_DMA_IRQHandler+0x8da>
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	f022 0201 	bic.w	r2, r2, #1
 80065e4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	3301      	adds	r3, #1
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d307      	bcc.n	8006602 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 0301 	and.w	r3, r3, #1
 80065fc:	2b00      	cmp	r3, #0
 80065fe:	d1f2      	bne.n	80065e6 <HAL_DMA_IRQHandler+0x8da>
 8006600:	e000      	b.n	8006604 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8006602:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0301 	and.w	r3, r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	d004      	beq.n	800661c <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2203      	movs	r2, #3
 8006616:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800661a:	e003      	b.n	8006624 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2200      	movs	r2, #0
 8006628:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006630:	2b00      	cmp	r3, #0
 8006632:	f000 8272 	beq.w	8006b1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800663a:	6878      	ldr	r0, [r7, #4]
 800663c:	4798      	blx	r3
 800663e:	e26c      	b.n	8006b1a <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4a43      	ldr	r2, [pc, #268]	@ (8006754 <HAL_DMA_IRQHandler+0xa48>)
 8006646:	4293      	cmp	r3, r2
 8006648:	d022      	beq.n	8006690 <HAL_DMA_IRQHandler+0x984>
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a42      	ldr	r2, [pc, #264]	@ (8006758 <HAL_DMA_IRQHandler+0xa4c>)
 8006650:	4293      	cmp	r3, r2
 8006652:	d01d      	beq.n	8006690 <HAL_DMA_IRQHandler+0x984>
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4a40      	ldr	r2, [pc, #256]	@ (800675c <HAL_DMA_IRQHandler+0xa50>)
 800665a:	4293      	cmp	r3, r2
 800665c:	d018      	beq.n	8006690 <HAL_DMA_IRQHandler+0x984>
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	4a3f      	ldr	r2, [pc, #252]	@ (8006760 <HAL_DMA_IRQHandler+0xa54>)
 8006664:	4293      	cmp	r3, r2
 8006666:	d013      	beq.n	8006690 <HAL_DMA_IRQHandler+0x984>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	4a3d      	ldr	r2, [pc, #244]	@ (8006764 <HAL_DMA_IRQHandler+0xa58>)
 800666e:	4293      	cmp	r3, r2
 8006670:	d00e      	beq.n	8006690 <HAL_DMA_IRQHandler+0x984>
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	4a3c      	ldr	r2, [pc, #240]	@ (8006768 <HAL_DMA_IRQHandler+0xa5c>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d009      	beq.n	8006690 <HAL_DMA_IRQHandler+0x984>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a3a      	ldr	r2, [pc, #232]	@ (800676c <HAL_DMA_IRQHandler+0xa60>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d004      	beq.n	8006690 <HAL_DMA_IRQHandler+0x984>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	4a39      	ldr	r2, [pc, #228]	@ (8006770 <HAL_DMA_IRQHandler+0xa64>)
 800668c:	4293      	cmp	r3, r2
 800668e:	d101      	bne.n	8006694 <HAL_DMA_IRQHandler+0x988>
 8006690:	2301      	movs	r3, #1
 8006692:	e000      	b.n	8006696 <HAL_DMA_IRQHandler+0x98a>
 8006694:	2300      	movs	r3, #0
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 823f 	beq.w	8006b1a <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066a8:	f003 031f 	and.w	r3, r3, #31
 80066ac:	2204      	movs	r2, #4
 80066ae:	409a      	lsls	r2, r3
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	4013      	ands	r3, r2
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	f000 80cd 	beq.w	8006854 <HAL_DMA_IRQHandler+0xb48>
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	f003 0304 	and.w	r3, r3, #4
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	f000 80c7 	beq.w	8006854 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066ca:	f003 031f 	and.w	r3, r3, #31
 80066ce:	2204      	movs	r2, #4
 80066d0:	409a      	lsls	r2, r3
 80066d2:	69fb      	ldr	r3, [r7, #28]
 80066d4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d049      	beq.n	8006774 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d109      	bne.n	80066fe <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	f000 8210 	beq.w	8006b14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80066f8:	6878      	ldr	r0, [r7, #4]
 80066fa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80066fc:	e20a      	b.n	8006b14 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006702:	2b00      	cmp	r3, #0
 8006704:	f000 8206 	beq.w	8006b14 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800670c:	6878      	ldr	r0, [r7, #4]
 800670e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006710:	e200      	b.n	8006b14 <HAL_DMA_IRQHandler+0xe08>
 8006712:	bf00      	nop
 8006714:	40020010 	.word	0x40020010
 8006718:	40020028 	.word	0x40020028
 800671c:	40020040 	.word	0x40020040
 8006720:	40020058 	.word	0x40020058
 8006724:	40020070 	.word	0x40020070
 8006728:	40020088 	.word	0x40020088
 800672c:	400200a0 	.word	0x400200a0
 8006730:	400200b8 	.word	0x400200b8
 8006734:	40020410 	.word	0x40020410
 8006738:	40020428 	.word	0x40020428
 800673c:	40020440 	.word	0x40020440
 8006740:	40020458 	.word	0x40020458
 8006744:	40020470 	.word	0x40020470
 8006748:	40020488 	.word	0x40020488
 800674c:	400204a0 	.word	0x400204a0
 8006750:	400204b8 	.word	0x400204b8
 8006754:	58025408 	.word	0x58025408
 8006758:	5802541c 	.word	0x5802541c
 800675c:	58025430 	.word	0x58025430
 8006760:	58025444 	.word	0x58025444
 8006764:	58025458 	.word	0x58025458
 8006768:	5802546c 	.word	0x5802546c
 800676c:	58025480 	.word	0x58025480
 8006770:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	f003 0320 	and.w	r3, r3, #32
 800677a:	2b00      	cmp	r3, #0
 800677c:	d160      	bne.n	8006840 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a7f      	ldr	r2, [pc, #508]	@ (8006980 <HAL_DMA_IRQHandler+0xc74>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d04a      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a7d      	ldr	r2, [pc, #500]	@ (8006984 <HAL_DMA_IRQHandler+0xc78>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d045      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a7c      	ldr	r2, [pc, #496]	@ (8006988 <HAL_DMA_IRQHandler+0xc7c>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d040      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a7a      	ldr	r2, [pc, #488]	@ (800698c <HAL_DMA_IRQHandler+0xc80>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d03b      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a79      	ldr	r2, [pc, #484]	@ (8006990 <HAL_DMA_IRQHandler+0xc84>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d036      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a77      	ldr	r2, [pc, #476]	@ (8006994 <HAL_DMA_IRQHandler+0xc88>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d031      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a76      	ldr	r2, [pc, #472]	@ (8006998 <HAL_DMA_IRQHandler+0xc8c>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d02c      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a74      	ldr	r2, [pc, #464]	@ (800699c <HAL_DMA_IRQHandler+0xc90>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d027      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	4a73      	ldr	r2, [pc, #460]	@ (80069a0 <HAL_DMA_IRQHandler+0xc94>)
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d022      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	4a71      	ldr	r2, [pc, #452]	@ (80069a4 <HAL_DMA_IRQHandler+0xc98>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d01d      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a70      	ldr	r2, [pc, #448]	@ (80069a8 <HAL_DMA_IRQHandler+0xc9c>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d018      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	4a6e      	ldr	r2, [pc, #440]	@ (80069ac <HAL_DMA_IRQHandler+0xca0>)
 80067f2:	4293      	cmp	r3, r2
 80067f4:	d013      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	4a6d      	ldr	r2, [pc, #436]	@ (80069b0 <HAL_DMA_IRQHandler+0xca4>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d00e      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	4a6b      	ldr	r2, [pc, #428]	@ (80069b4 <HAL_DMA_IRQHandler+0xca8>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d009      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a6a      	ldr	r2, [pc, #424]	@ (80069b8 <HAL_DMA_IRQHandler+0xcac>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d004      	beq.n	800681e <HAL_DMA_IRQHandler+0xb12>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	4a68      	ldr	r2, [pc, #416]	@ (80069bc <HAL_DMA_IRQHandler+0xcb0>)
 800681a:	4293      	cmp	r3, r2
 800681c:	d108      	bne.n	8006830 <HAL_DMA_IRQHandler+0xb24>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0208 	bic.w	r2, r2, #8
 800682c:	601a      	str	r2, [r3, #0]
 800682e:	e007      	b.n	8006840 <HAL_DMA_IRQHandler+0xb34>
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	681a      	ldr	r2, [r3, #0]
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	f022 0204 	bic.w	r2, r2, #4
 800683e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 8165 	beq.w	8006b14 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006852:	e15f      	b.n	8006b14 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006858:	f003 031f 	and.w	r3, r3, #31
 800685c:	2202      	movs	r2, #2
 800685e:	409a      	lsls	r2, r3
 8006860:	697b      	ldr	r3, [r7, #20]
 8006862:	4013      	ands	r3, r2
 8006864:	2b00      	cmp	r3, #0
 8006866:	f000 80c5 	beq.w	80069f4 <HAL_DMA_IRQHandler+0xce8>
 800686a:	693b      	ldr	r3, [r7, #16]
 800686c:	f003 0302 	and.w	r3, r3, #2
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 80bf 	beq.w	80069f4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800687a:	f003 031f 	and.w	r3, r3, #31
 800687e:	2202      	movs	r2, #2
 8006880:	409a      	lsls	r2, r3
 8006882:	69fb      	ldr	r3, [r7, #28]
 8006884:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800688c:	2b00      	cmp	r3, #0
 800688e:	d018      	beq.n	80068c2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006896:	2b00      	cmp	r3, #0
 8006898:	d109      	bne.n	80068ae <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800689e:	2b00      	cmp	r3, #0
 80068a0:	f000 813a 	beq.w	8006b18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80068a8:	6878      	ldr	r0, [r7, #4]
 80068aa:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068ac:	e134      	b.n	8006b18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	f000 8130 	beq.w	8006b18 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80068bc:	6878      	ldr	r0, [r7, #4]
 80068be:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80068c0:	e12a      	b.n	8006b18 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f003 0320 	and.w	r3, r3, #32
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	f040 8089 	bne.w	80069e0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a2b      	ldr	r2, [pc, #172]	@ (8006980 <HAL_DMA_IRQHandler+0xc74>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d04a      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	4a29      	ldr	r2, [pc, #164]	@ (8006984 <HAL_DMA_IRQHandler+0xc78>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d045      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	4a28      	ldr	r2, [pc, #160]	@ (8006988 <HAL_DMA_IRQHandler+0xc7c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d040      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	4a26      	ldr	r2, [pc, #152]	@ (800698c <HAL_DMA_IRQHandler+0xc80>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d03b      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a25      	ldr	r2, [pc, #148]	@ (8006990 <HAL_DMA_IRQHandler+0xc84>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d036      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a23      	ldr	r2, [pc, #140]	@ (8006994 <HAL_DMA_IRQHandler+0xc88>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d031      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	4a22      	ldr	r2, [pc, #136]	@ (8006998 <HAL_DMA_IRQHandler+0xc8c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d02c      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a20      	ldr	r2, [pc, #128]	@ (800699c <HAL_DMA_IRQHandler+0xc90>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d027      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	4a1f      	ldr	r2, [pc, #124]	@ (80069a0 <HAL_DMA_IRQHandler+0xc94>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d022      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	4a1d      	ldr	r2, [pc, #116]	@ (80069a4 <HAL_DMA_IRQHandler+0xc98>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d01d      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a1c      	ldr	r2, [pc, #112]	@ (80069a8 <HAL_DMA_IRQHandler+0xc9c>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d018      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a1a      	ldr	r2, [pc, #104]	@ (80069ac <HAL_DMA_IRQHandler+0xca0>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d013      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	4a19      	ldr	r2, [pc, #100]	@ (80069b0 <HAL_DMA_IRQHandler+0xca4>)
 800694c:	4293      	cmp	r3, r2
 800694e:	d00e      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	4a17      	ldr	r2, [pc, #92]	@ (80069b4 <HAL_DMA_IRQHandler+0xca8>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d009      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	4a16      	ldr	r2, [pc, #88]	@ (80069b8 <HAL_DMA_IRQHandler+0xcac>)
 8006960:	4293      	cmp	r3, r2
 8006962:	d004      	beq.n	800696e <HAL_DMA_IRQHandler+0xc62>
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a14      	ldr	r2, [pc, #80]	@ (80069bc <HAL_DMA_IRQHandler+0xcb0>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d128      	bne.n	80069c0 <HAL_DMA_IRQHandler+0xcb4>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681a      	ldr	r2, [r3, #0]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f022 0214 	bic.w	r2, r2, #20
 800697c:	601a      	str	r2, [r3, #0]
 800697e:	e027      	b.n	80069d0 <HAL_DMA_IRQHandler+0xcc4>
 8006980:	40020010 	.word	0x40020010
 8006984:	40020028 	.word	0x40020028
 8006988:	40020040 	.word	0x40020040
 800698c:	40020058 	.word	0x40020058
 8006990:	40020070 	.word	0x40020070
 8006994:	40020088 	.word	0x40020088
 8006998:	400200a0 	.word	0x400200a0
 800699c:	400200b8 	.word	0x400200b8
 80069a0:	40020410 	.word	0x40020410
 80069a4:	40020428 	.word	0x40020428
 80069a8:	40020440 	.word	0x40020440
 80069ac:	40020458 	.word	0x40020458
 80069b0:	40020470 	.word	0x40020470
 80069b4:	40020488 	.word	0x40020488
 80069b8:	400204a0 	.word	0x400204a0
 80069bc:	400204b8 	.word	0x400204b8
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	681a      	ldr	r2, [r3, #0]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	f022 020a 	bic.w	r2, r2, #10
 80069ce:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 8097 	beq.w	8006b18 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80069f2:	e091      	b.n	8006b18 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80069f8:	f003 031f 	and.w	r3, r3, #31
 80069fc:	2208      	movs	r2, #8
 80069fe:	409a      	lsls	r2, r3
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	4013      	ands	r3, r2
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 8088 	beq.w	8006b1a <HAL_DMA_IRQHandler+0xe0e>
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f003 0308 	and.w	r3, r3, #8
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	f000 8082 	beq.w	8006b1a <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4a41      	ldr	r2, [pc, #260]	@ (8006b20 <HAL_DMA_IRQHandler+0xe14>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	d04a      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4a3f      	ldr	r2, [pc, #252]	@ (8006b24 <HAL_DMA_IRQHandler+0xe18>)
 8006a26:	4293      	cmp	r3, r2
 8006a28:	d045      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4a3e      	ldr	r2, [pc, #248]	@ (8006b28 <HAL_DMA_IRQHandler+0xe1c>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d040      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	4a3c      	ldr	r2, [pc, #240]	@ (8006b2c <HAL_DMA_IRQHandler+0xe20>)
 8006a3a:	4293      	cmp	r3, r2
 8006a3c:	d03b      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4a3b      	ldr	r2, [pc, #236]	@ (8006b30 <HAL_DMA_IRQHandler+0xe24>)
 8006a44:	4293      	cmp	r3, r2
 8006a46:	d036      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	4a39      	ldr	r2, [pc, #228]	@ (8006b34 <HAL_DMA_IRQHandler+0xe28>)
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d031      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	4a38      	ldr	r2, [pc, #224]	@ (8006b38 <HAL_DMA_IRQHandler+0xe2c>)
 8006a58:	4293      	cmp	r3, r2
 8006a5a:	d02c      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	4a36      	ldr	r2, [pc, #216]	@ (8006b3c <HAL_DMA_IRQHandler+0xe30>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d027      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	4a35      	ldr	r2, [pc, #212]	@ (8006b40 <HAL_DMA_IRQHandler+0xe34>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d022      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	4a33      	ldr	r2, [pc, #204]	@ (8006b44 <HAL_DMA_IRQHandler+0xe38>)
 8006a76:	4293      	cmp	r3, r2
 8006a78:	d01d      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a32      	ldr	r2, [pc, #200]	@ (8006b48 <HAL_DMA_IRQHandler+0xe3c>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d018      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a30      	ldr	r2, [pc, #192]	@ (8006b4c <HAL_DMA_IRQHandler+0xe40>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d013      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a2f      	ldr	r2, [pc, #188]	@ (8006b50 <HAL_DMA_IRQHandler+0xe44>)
 8006a94:	4293      	cmp	r3, r2
 8006a96:	d00e      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	4a2d      	ldr	r2, [pc, #180]	@ (8006b54 <HAL_DMA_IRQHandler+0xe48>)
 8006a9e:	4293      	cmp	r3, r2
 8006aa0:	d009      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4a2c      	ldr	r2, [pc, #176]	@ (8006b58 <HAL_DMA_IRQHandler+0xe4c>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d004      	beq.n	8006ab6 <HAL_DMA_IRQHandler+0xdaa>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a2a      	ldr	r2, [pc, #168]	@ (8006b5c <HAL_DMA_IRQHandler+0xe50>)
 8006ab2:	4293      	cmp	r3, r2
 8006ab4:	d108      	bne.n	8006ac8 <HAL_DMA_IRQHandler+0xdbc>
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f022 021c 	bic.w	r2, r2, #28
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	e007      	b.n	8006ad8 <HAL_DMA_IRQHandler+0xdcc>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681a      	ldr	r2, [r3, #0]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 020e 	bic.w	r2, r2, #14
 8006ad6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006adc:	f003 031f 	and.w	r3, r3, #31
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	409a      	lsls	r2, r3
 8006ae4:	69fb      	ldr	r3, [r7, #28]
 8006ae6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2201      	movs	r2, #1
 8006aec:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d009      	beq.n	8006b1a <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	4798      	blx	r3
 8006b0e:	e004      	b.n	8006b1a <HAL_DMA_IRQHandler+0xe0e>
          return;
 8006b10:	bf00      	nop
 8006b12:	e002      	b.n	8006b1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b14:	bf00      	nop
 8006b16:	e000      	b.n	8006b1a <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8006b18:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006b1a:	3728      	adds	r7, #40	@ 0x28
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	bd80      	pop	{r7, pc}
 8006b20:	40020010 	.word	0x40020010
 8006b24:	40020028 	.word	0x40020028
 8006b28:	40020040 	.word	0x40020040
 8006b2c:	40020058 	.word	0x40020058
 8006b30:	40020070 	.word	0x40020070
 8006b34:	40020088 	.word	0x40020088
 8006b38:	400200a0 	.word	0x400200a0
 8006b3c:	400200b8 	.word	0x400200b8
 8006b40:	40020410 	.word	0x40020410
 8006b44:	40020428 	.word	0x40020428
 8006b48:	40020440 	.word	0x40020440
 8006b4c:	40020458 	.word	0x40020458
 8006b50:	40020470 	.word	0x40020470
 8006b54:	40020488 	.word	0x40020488
 8006b58:	400204a0 	.word	0x400204a0
 8006b5c:	400204b8 	.word	0x400204b8

08006b60 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	60f8      	str	r0, [r7, #12]
 8006b68:	60b9      	str	r1, [r7, #8]
 8006b6a:	607a      	str	r2, [r7, #4]
 8006b6c:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b72:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b78:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a7f      	ldr	r2, [pc, #508]	@ (8006d7c <DMA_SetConfig+0x21c>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d072      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a7d      	ldr	r2, [pc, #500]	@ (8006d80 <DMA_SetConfig+0x220>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d06d      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a7c      	ldr	r2, [pc, #496]	@ (8006d84 <DMA_SetConfig+0x224>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d068      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a7a      	ldr	r2, [pc, #488]	@ (8006d88 <DMA_SetConfig+0x228>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d063      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	4a79      	ldr	r2, [pc, #484]	@ (8006d8c <DMA_SetConfig+0x22c>)
 8006ba8:	4293      	cmp	r3, r2
 8006baa:	d05e      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4a77      	ldr	r2, [pc, #476]	@ (8006d90 <DMA_SetConfig+0x230>)
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d059      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	4a76      	ldr	r2, [pc, #472]	@ (8006d94 <DMA_SetConfig+0x234>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d054      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a74      	ldr	r2, [pc, #464]	@ (8006d98 <DMA_SetConfig+0x238>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d04f      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a73      	ldr	r2, [pc, #460]	@ (8006d9c <DMA_SetConfig+0x23c>)
 8006bd0:	4293      	cmp	r3, r2
 8006bd2:	d04a      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	4a71      	ldr	r2, [pc, #452]	@ (8006da0 <DMA_SetConfig+0x240>)
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d045      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	4a70      	ldr	r2, [pc, #448]	@ (8006da4 <DMA_SetConfig+0x244>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d040      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	4a6e      	ldr	r2, [pc, #440]	@ (8006da8 <DMA_SetConfig+0x248>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	d03b      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a6d      	ldr	r2, [pc, #436]	@ (8006dac <DMA_SetConfig+0x24c>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d036      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a6b      	ldr	r2, [pc, #428]	@ (8006db0 <DMA_SetConfig+0x250>)
 8006c02:	4293      	cmp	r3, r2
 8006c04:	d031      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	4a6a      	ldr	r2, [pc, #424]	@ (8006db4 <DMA_SetConfig+0x254>)
 8006c0c:	4293      	cmp	r3, r2
 8006c0e:	d02c      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a68      	ldr	r2, [pc, #416]	@ (8006db8 <DMA_SetConfig+0x258>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d027      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	4a67      	ldr	r2, [pc, #412]	@ (8006dbc <DMA_SetConfig+0x25c>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d022      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a65      	ldr	r2, [pc, #404]	@ (8006dc0 <DMA_SetConfig+0x260>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d01d      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a64      	ldr	r2, [pc, #400]	@ (8006dc4 <DMA_SetConfig+0x264>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d018      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a62      	ldr	r2, [pc, #392]	@ (8006dc8 <DMA_SetConfig+0x268>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d013      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a61      	ldr	r2, [pc, #388]	@ (8006dcc <DMA_SetConfig+0x26c>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d00e      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a5f      	ldr	r2, [pc, #380]	@ (8006dd0 <DMA_SetConfig+0x270>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d009      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a5e      	ldr	r2, [pc, #376]	@ (8006dd4 <DMA_SetConfig+0x274>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d004      	beq.n	8006c6a <DMA_SetConfig+0x10a>
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4a5c      	ldr	r2, [pc, #368]	@ (8006dd8 <DMA_SetConfig+0x278>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d101      	bne.n	8006c6e <DMA_SetConfig+0x10e>
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	e000      	b.n	8006c70 <DMA_SetConfig+0x110>
 8006c6e:	2300      	movs	r3, #0
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d00d      	beq.n	8006c90 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8006c7c:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d004      	beq.n	8006c90 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006c8a:	68fa      	ldr	r2, [r7, #12]
 8006c8c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8006c8e:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a39      	ldr	r2, [pc, #228]	@ (8006d7c <DMA_SetConfig+0x21c>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d04a      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a38      	ldr	r2, [pc, #224]	@ (8006d80 <DMA_SetConfig+0x220>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d045      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a36      	ldr	r2, [pc, #216]	@ (8006d84 <DMA_SetConfig+0x224>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d040      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a35      	ldr	r2, [pc, #212]	@ (8006d88 <DMA_SetConfig+0x228>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d03b      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a33      	ldr	r2, [pc, #204]	@ (8006d8c <DMA_SetConfig+0x22c>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d036      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a32      	ldr	r2, [pc, #200]	@ (8006d90 <DMA_SetConfig+0x230>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d031      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a30      	ldr	r2, [pc, #192]	@ (8006d94 <DMA_SetConfig+0x234>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d02c      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	4a2f      	ldr	r2, [pc, #188]	@ (8006d98 <DMA_SetConfig+0x238>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d027      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	4a2d      	ldr	r2, [pc, #180]	@ (8006d9c <DMA_SetConfig+0x23c>)
 8006ce6:	4293      	cmp	r3, r2
 8006ce8:	d022      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	4a2c      	ldr	r2, [pc, #176]	@ (8006da0 <DMA_SetConfig+0x240>)
 8006cf0:	4293      	cmp	r3, r2
 8006cf2:	d01d      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	4a2a      	ldr	r2, [pc, #168]	@ (8006da4 <DMA_SetConfig+0x244>)
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d018      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	4a29      	ldr	r2, [pc, #164]	@ (8006da8 <DMA_SetConfig+0x248>)
 8006d04:	4293      	cmp	r3, r2
 8006d06:	d013      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	4a27      	ldr	r2, [pc, #156]	@ (8006dac <DMA_SetConfig+0x24c>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00e      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	4a26      	ldr	r2, [pc, #152]	@ (8006db0 <DMA_SetConfig+0x250>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d009      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4a24      	ldr	r2, [pc, #144]	@ (8006db4 <DMA_SetConfig+0x254>)
 8006d22:	4293      	cmp	r3, r2
 8006d24:	d004      	beq.n	8006d30 <DMA_SetConfig+0x1d0>
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	4a23      	ldr	r2, [pc, #140]	@ (8006db8 <DMA_SetConfig+0x258>)
 8006d2c:	4293      	cmp	r3, r2
 8006d2e:	d101      	bne.n	8006d34 <DMA_SetConfig+0x1d4>
 8006d30:	2301      	movs	r3, #1
 8006d32:	e000      	b.n	8006d36 <DMA_SetConfig+0x1d6>
 8006d34:	2300      	movs	r3, #0
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d059      	beq.n	8006dee <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006d3e:	f003 031f 	and.w	r3, r3, #31
 8006d42:	223f      	movs	r2, #63	@ 0x3f
 8006d44:	409a      	lsls	r2, r3
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	681a      	ldr	r2, [r3, #0]
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8006d58:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	683a      	ldr	r2, [r7, #0]
 8006d60:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	2b40      	cmp	r3, #64	@ 0x40
 8006d68:	d138      	bne.n	8006ddc <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	687a      	ldr	r2, [r7, #4]
 8006d70:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68ba      	ldr	r2, [r7, #8]
 8006d78:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 8006d7a:	e086      	b.n	8006e8a <DMA_SetConfig+0x32a>
 8006d7c:	40020010 	.word	0x40020010
 8006d80:	40020028 	.word	0x40020028
 8006d84:	40020040 	.word	0x40020040
 8006d88:	40020058 	.word	0x40020058
 8006d8c:	40020070 	.word	0x40020070
 8006d90:	40020088 	.word	0x40020088
 8006d94:	400200a0 	.word	0x400200a0
 8006d98:	400200b8 	.word	0x400200b8
 8006d9c:	40020410 	.word	0x40020410
 8006da0:	40020428 	.word	0x40020428
 8006da4:	40020440 	.word	0x40020440
 8006da8:	40020458 	.word	0x40020458
 8006dac:	40020470 	.word	0x40020470
 8006db0:	40020488 	.word	0x40020488
 8006db4:	400204a0 	.word	0x400204a0
 8006db8:	400204b8 	.word	0x400204b8
 8006dbc:	58025408 	.word	0x58025408
 8006dc0:	5802541c 	.word	0x5802541c
 8006dc4:	58025430 	.word	0x58025430
 8006dc8:	58025444 	.word	0x58025444
 8006dcc:	58025458 	.word	0x58025458
 8006dd0:	5802546c 	.word	0x5802546c
 8006dd4:	58025480 	.word	0x58025480
 8006dd8:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	687a      	ldr	r2, [r7, #4]
 8006dea:	60da      	str	r2, [r3, #12]
}
 8006dec:	e04d      	b.n	8006e8a <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4a29      	ldr	r2, [pc, #164]	@ (8006e98 <DMA_SetConfig+0x338>)
 8006df4:	4293      	cmp	r3, r2
 8006df6:	d022      	beq.n	8006e3e <DMA_SetConfig+0x2de>
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	4a27      	ldr	r2, [pc, #156]	@ (8006e9c <DMA_SetConfig+0x33c>)
 8006dfe:	4293      	cmp	r3, r2
 8006e00:	d01d      	beq.n	8006e3e <DMA_SetConfig+0x2de>
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	4a26      	ldr	r2, [pc, #152]	@ (8006ea0 <DMA_SetConfig+0x340>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d018      	beq.n	8006e3e <DMA_SetConfig+0x2de>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4a24      	ldr	r2, [pc, #144]	@ (8006ea4 <DMA_SetConfig+0x344>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d013      	beq.n	8006e3e <DMA_SetConfig+0x2de>
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	4a23      	ldr	r2, [pc, #140]	@ (8006ea8 <DMA_SetConfig+0x348>)
 8006e1c:	4293      	cmp	r3, r2
 8006e1e:	d00e      	beq.n	8006e3e <DMA_SetConfig+0x2de>
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a21      	ldr	r2, [pc, #132]	@ (8006eac <DMA_SetConfig+0x34c>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d009      	beq.n	8006e3e <DMA_SetConfig+0x2de>
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	4a20      	ldr	r2, [pc, #128]	@ (8006eb0 <DMA_SetConfig+0x350>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d004      	beq.n	8006e3e <DMA_SetConfig+0x2de>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	4a1e      	ldr	r2, [pc, #120]	@ (8006eb4 <DMA_SetConfig+0x354>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d101      	bne.n	8006e42 <DMA_SetConfig+0x2e2>
 8006e3e:	2301      	movs	r3, #1
 8006e40:	e000      	b.n	8006e44 <DMA_SetConfig+0x2e4>
 8006e42:	2300      	movs	r3, #0
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d020      	beq.n	8006e8a <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8006e4c:	f003 031f 	and.w	r3, r3, #31
 8006e50:	2201      	movs	r2, #1
 8006e52:	409a      	lsls	r2, r3
 8006e54:	693b      	ldr	r3, [r7, #16]
 8006e56:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	683a      	ldr	r2, [r7, #0]
 8006e5e:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	2b40      	cmp	r3, #64	@ 0x40
 8006e66:	d108      	bne.n	8006e7a <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	687a      	ldr	r2, [r7, #4]
 8006e6e:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	68ba      	ldr	r2, [r7, #8]
 8006e76:	60da      	str	r2, [r3, #12]
}
 8006e78:	e007      	b.n	8006e8a <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68ba      	ldr	r2, [r7, #8]
 8006e80:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	687a      	ldr	r2, [r7, #4]
 8006e88:	60da      	str	r2, [r3, #12]
}
 8006e8a:	bf00      	nop
 8006e8c:	371c      	adds	r7, #28
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e94:	4770      	bx	lr
 8006e96:	bf00      	nop
 8006e98:	58025408 	.word	0x58025408
 8006e9c:	5802541c 	.word	0x5802541c
 8006ea0:	58025430 	.word	0x58025430
 8006ea4:	58025444 	.word	0x58025444
 8006ea8:	58025458 	.word	0x58025458
 8006eac:	5802546c 	.word	0x5802546c
 8006eb0:	58025480 	.word	0x58025480
 8006eb4:	58025494 	.word	0x58025494

08006eb8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b085      	sub	sp, #20
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a42      	ldr	r2, [pc, #264]	@ (8006fd0 <DMA_CalcBaseAndBitshift+0x118>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d04a      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	4a41      	ldr	r2, [pc, #260]	@ (8006fd4 <DMA_CalcBaseAndBitshift+0x11c>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d045      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	4a3f      	ldr	r2, [pc, #252]	@ (8006fd8 <DMA_CalcBaseAndBitshift+0x120>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d040      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	4a3e      	ldr	r2, [pc, #248]	@ (8006fdc <DMA_CalcBaseAndBitshift+0x124>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d03b      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	4a3c      	ldr	r2, [pc, #240]	@ (8006fe0 <DMA_CalcBaseAndBitshift+0x128>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d036      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	4a3b      	ldr	r2, [pc, #236]	@ (8006fe4 <DMA_CalcBaseAndBitshift+0x12c>)
 8006ef8:	4293      	cmp	r3, r2
 8006efa:	d031      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a39      	ldr	r2, [pc, #228]	@ (8006fe8 <DMA_CalcBaseAndBitshift+0x130>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d02c      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	4a38      	ldr	r2, [pc, #224]	@ (8006fec <DMA_CalcBaseAndBitshift+0x134>)
 8006f0c:	4293      	cmp	r3, r2
 8006f0e:	d027      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	4a36      	ldr	r2, [pc, #216]	@ (8006ff0 <DMA_CalcBaseAndBitshift+0x138>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d022      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a35      	ldr	r2, [pc, #212]	@ (8006ff4 <DMA_CalcBaseAndBitshift+0x13c>)
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d01d      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	4a33      	ldr	r2, [pc, #204]	@ (8006ff8 <DMA_CalcBaseAndBitshift+0x140>)
 8006f2a:	4293      	cmp	r3, r2
 8006f2c:	d018      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	4a32      	ldr	r2, [pc, #200]	@ (8006ffc <DMA_CalcBaseAndBitshift+0x144>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d013      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a30      	ldr	r2, [pc, #192]	@ (8007000 <DMA_CalcBaseAndBitshift+0x148>)
 8006f3e:	4293      	cmp	r3, r2
 8006f40:	d00e      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	4a2f      	ldr	r2, [pc, #188]	@ (8007004 <DMA_CalcBaseAndBitshift+0x14c>)
 8006f48:	4293      	cmp	r3, r2
 8006f4a:	d009      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	4a2d      	ldr	r2, [pc, #180]	@ (8007008 <DMA_CalcBaseAndBitshift+0x150>)
 8006f52:	4293      	cmp	r3, r2
 8006f54:	d004      	beq.n	8006f60 <DMA_CalcBaseAndBitshift+0xa8>
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	4a2c      	ldr	r2, [pc, #176]	@ (800700c <DMA_CalcBaseAndBitshift+0x154>)
 8006f5c:	4293      	cmp	r3, r2
 8006f5e:	d101      	bne.n	8006f64 <DMA_CalcBaseAndBitshift+0xac>
 8006f60:	2301      	movs	r3, #1
 8006f62:	e000      	b.n	8006f66 <DMA_CalcBaseAndBitshift+0xae>
 8006f64:	2300      	movs	r3, #0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d024      	beq.n	8006fb4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	b2db      	uxtb	r3, r3
 8006f70:	3b10      	subs	r3, #16
 8006f72:	4a27      	ldr	r2, [pc, #156]	@ (8007010 <DMA_CalcBaseAndBitshift+0x158>)
 8006f74:	fba2 2303 	umull	r2, r3, r2, r3
 8006f78:	091b      	lsrs	r3, r3, #4
 8006f7a:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	f003 0307 	and.w	r3, r3, #7
 8006f82:	4a24      	ldr	r2, [pc, #144]	@ (8007014 <DMA_CalcBaseAndBitshift+0x15c>)
 8006f84:	5cd3      	ldrb	r3, [r2, r3]
 8006f86:	461a      	mov	r2, r3
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2b03      	cmp	r3, #3
 8006f90:	d908      	bls.n	8006fa4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	461a      	mov	r2, r3
 8006f98:	4b1f      	ldr	r3, [pc, #124]	@ (8007018 <DMA_CalcBaseAndBitshift+0x160>)
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	1d1a      	adds	r2, r3, #4
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	659a      	str	r2, [r3, #88]	@ 0x58
 8006fa2:	e00d      	b.n	8006fc0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	461a      	mov	r2, r3
 8006faa:	4b1b      	ldr	r3, [pc, #108]	@ (8007018 <DMA_CalcBaseAndBitshift+0x160>)
 8006fac:	4013      	ands	r3, r2
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	6593      	str	r3, [r2, #88]	@ 0x58
 8006fb2:	e005      	b.n	8006fc0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3714      	adds	r7, #20
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fce:	4770      	bx	lr
 8006fd0:	40020010 	.word	0x40020010
 8006fd4:	40020028 	.word	0x40020028
 8006fd8:	40020040 	.word	0x40020040
 8006fdc:	40020058 	.word	0x40020058
 8006fe0:	40020070 	.word	0x40020070
 8006fe4:	40020088 	.word	0x40020088
 8006fe8:	400200a0 	.word	0x400200a0
 8006fec:	400200b8 	.word	0x400200b8
 8006ff0:	40020410 	.word	0x40020410
 8006ff4:	40020428 	.word	0x40020428
 8006ff8:	40020440 	.word	0x40020440
 8006ffc:	40020458 	.word	0x40020458
 8007000:	40020470 	.word	0x40020470
 8007004:	40020488 	.word	0x40020488
 8007008:	400204a0 	.word	0x400204a0
 800700c:	400204b8 	.word	0x400204b8
 8007010:	aaaaaaab 	.word	0xaaaaaaab
 8007014:	08011c80 	.word	0x08011c80
 8007018:	fffffc00 	.word	0xfffffc00

0800701c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007024:	2300      	movs	r3, #0
 8007026:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	699b      	ldr	r3, [r3, #24]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d120      	bne.n	8007072 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007034:	2b03      	cmp	r3, #3
 8007036:	d858      	bhi.n	80070ea <DMA_CheckFifoParam+0xce>
 8007038:	a201      	add	r2, pc, #4	@ (adr r2, 8007040 <DMA_CheckFifoParam+0x24>)
 800703a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800703e:	bf00      	nop
 8007040:	08007051 	.word	0x08007051
 8007044:	08007063 	.word	0x08007063
 8007048:	08007051 	.word	0x08007051
 800704c:	080070eb 	.word	0x080070eb
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007054:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007058:	2b00      	cmp	r3, #0
 800705a:	d048      	beq.n	80070ee <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800705c:	2301      	movs	r3, #1
 800705e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007060:	e045      	b.n	80070ee <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007066:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800706a:	d142      	bne.n	80070f2 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8007070:	e03f      	b.n	80070f2 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	699b      	ldr	r3, [r3, #24]
 8007076:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800707a:	d123      	bne.n	80070c4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007080:	2b03      	cmp	r3, #3
 8007082:	d838      	bhi.n	80070f6 <DMA_CheckFifoParam+0xda>
 8007084:	a201      	add	r2, pc, #4	@ (adr r2, 800708c <DMA_CheckFifoParam+0x70>)
 8007086:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708a:	bf00      	nop
 800708c:	0800709d 	.word	0x0800709d
 8007090:	080070a3 	.word	0x080070a3
 8007094:	0800709d 	.word	0x0800709d
 8007098:	080070b5 	.word	0x080070b5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800709c:	2301      	movs	r3, #1
 800709e:	73fb      	strb	r3, [r7, #15]
        break;
 80070a0:	e030      	b.n	8007104 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d025      	beq.n	80070fa <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 80070ae:	2301      	movs	r3, #1
 80070b0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070b2:	e022      	b.n	80070fa <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070b8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80070bc:	d11f      	bne.n	80070fe <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80070c2:	e01c      	b.n	80070fe <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d902      	bls.n	80070d2 <DMA_CheckFifoParam+0xb6>
 80070cc:	2b03      	cmp	r3, #3
 80070ce:	d003      	beq.n	80070d8 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 80070d0:	e018      	b.n	8007104 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 80070d2:	2301      	movs	r3, #1
 80070d4:	73fb      	strb	r3, [r7, #15]
        break;
 80070d6:	e015      	b.n	8007104 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80070dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d00e      	beq.n	8007102 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 80070e4:	2301      	movs	r3, #1
 80070e6:	73fb      	strb	r3, [r7, #15]
    break;
 80070e8:	e00b      	b.n	8007102 <DMA_CheckFifoParam+0xe6>
        break;
 80070ea:	bf00      	nop
 80070ec:	e00a      	b.n	8007104 <DMA_CheckFifoParam+0xe8>
        break;
 80070ee:	bf00      	nop
 80070f0:	e008      	b.n	8007104 <DMA_CheckFifoParam+0xe8>
        break;
 80070f2:	bf00      	nop
 80070f4:	e006      	b.n	8007104 <DMA_CheckFifoParam+0xe8>
        break;
 80070f6:	bf00      	nop
 80070f8:	e004      	b.n	8007104 <DMA_CheckFifoParam+0xe8>
        break;
 80070fa:	bf00      	nop
 80070fc:	e002      	b.n	8007104 <DMA_CheckFifoParam+0xe8>
        break;
 80070fe:	bf00      	nop
 8007100:	e000      	b.n	8007104 <DMA_CheckFifoParam+0xe8>
    break;
 8007102:	bf00      	nop
    }
  }

  return status;
 8007104:	7bfb      	ldrb	r3, [r7, #15]
}
 8007106:	4618      	mov	r0, r3
 8007108:	3714      	adds	r7, #20
 800710a:	46bd      	mov	sp, r7
 800710c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007110:	4770      	bx	lr
 8007112:	bf00      	nop

08007114 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	4a38      	ldr	r2, [pc, #224]	@ (8007208 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8007128:	4293      	cmp	r3, r2
 800712a:	d022      	beq.n	8007172 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	4a36      	ldr	r2, [pc, #216]	@ (800720c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8007132:	4293      	cmp	r3, r2
 8007134:	d01d      	beq.n	8007172 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	4a35      	ldr	r2, [pc, #212]	@ (8007210 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800713c:	4293      	cmp	r3, r2
 800713e:	d018      	beq.n	8007172 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a33      	ldr	r2, [pc, #204]	@ (8007214 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d013      	beq.n	8007172 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	4a32      	ldr	r2, [pc, #200]	@ (8007218 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d00e      	beq.n	8007172 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	4a30      	ldr	r2, [pc, #192]	@ (800721c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d009      	beq.n	8007172 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	4a2f      	ldr	r2, [pc, #188]	@ (8007220 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d004      	beq.n	8007172 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	4a2d      	ldr	r2, [pc, #180]	@ (8007224 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d101      	bne.n	8007176 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8007172:	2301      	movs	r3, #1
 8007174:	e000      	b.n	8007178 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8007176:	2300      	movs	r3, #0
 8007178:	2b00      	cmp	r3, #0
 800717a:	d01a      	beq.n	80071b2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	b2db      	uxtb	r3, r3
 8007182:	3b08      	subs	r3, #8
 8007184:	4a28      	ldr	r2, [pc, #160]	@ (8007228 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8007186:	fba2 2303 	umull	r2, r3, r2, r3
 800718a:	091b      	lsrs	r3, r3, #4
 800718c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	4b26      	ldr	r3, [pc, #152]	@ (800722c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8007192:	4413      	add	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	461a      	mov	r2, r3
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	4a24      	ldr	r2, [pc, #144]	@ (8007230 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 80071a0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	f003 031f 	and.w	r3, r3, #31
 80071a8:	2201      	movs	r2, #1
 80071aa:	409a      	lsls	r2, r3
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 80071b0:	e024      	b.n	80071fc <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	b2db      	uxtb	r3, r3
 80071b8:	3b10      	subs	r3, #16
 80071ba:	4a1e      	ldr	r2, [pc, #120]	@ (8007234 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 80071bc:	fba2 2303 	umull	r2, r3, r2, r3
 80071c0:	091b      	lsrs	r3, r3, #4
 80071c2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	4a1c      	ldr	r2, [pc, #112]	@ (8007238 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 80071c8:	4293      	cmp	r3, r2
 80071ca:	d806      	bhi.n	80071da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	4a1b      	ldr	r2, [pc, #108]	@ (800723c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 80071d0:	4293      	cmp	r3, r2
 80071d2:	d902      	bls.n	80071da <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	3308      	adds	r3, #8
 80071d8:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 80071da:	68fa      	ldr	r2, [r7, #12]
 80071dc:	4b18      	ldr	r3, [pc, #96]	@ (8007240 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 80071de:	4413      	add	r3, r2
 80071e0:	009b      	lsls	r3, r3, #2
 80071e2:	461a      	mov	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	4a16      	ldr	r2, [pc, #88]	@ (8007244 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 80071ec:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f003 031f 	and.w	r3, r3, #31
 80071f4:	2201      	movs	r2, #1
 80071f6:	409a      	lsls	r2, r3
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80071fc:	bf00      	nop
 80071fe:	3714      	adds	r7, #20
 8007200:	46bd      	mov	sp, r7
 8007202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007206:	4770      	bx	lr
 8007208:	58025408 	.word	0x58025408
 800720c:	5802541c 	.word	0x5802541c
 8007210:	58025430 	.word	0x58025430
 8007214:	58025444 	.word	0x58025444
 8007218:	58025458 	.word	0x58025458
 800721c:	5802546c 	.word	0x5802546c
 8007220:	58025480 	.word	0x58025480
 8007224:	58025494 	.word	0x58025494
 8007228:	cccccccd 	.word	0xcccccccd
 800722c:	16009600 	.word	0x16009600
 8007230:	58025880 	.word	0x58025880
 8007234:	aaaaaaab 	.word	0xaaaaaaab
 8007238:	400204b8 	.word	0x400204b8
 800723c:	4002040f 	.word	0x4002040f
 8007240:	10008200 	.word	0x10008200
 8007244:	40020880 	.word	0x40020880

08007248 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	685b      	ldr	r3, [r3, #4]
 8007254:	b2db      	uxtb	r3, r3
 8007256:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d04a      	beq.n	80072f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	2b08      	cmp	r3, #8
 8007262:	d847      	bhi.n	80072f4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a25      	ldr	r2, [pc, #148]	@ (8007300 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d022      	beq.n	80072b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a24      	ldr	r2, [pc, #144]	@ (8007304 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d01d      	beq.n	80072b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a22      	ldr	r2, [pc, #136]	@ (8007308 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d018      	beq.n	80072b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a21      	ldr	r2, [pc, #132]	@ (800730c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d013      	beq.n	80072b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a1f      	ldr	r2, [pc, #124]	@ (8007310 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d00e      	beq.n	80072b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a1e      	ldr	r2, [pc, #120]	@ (8007314 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d009      	beq.n	80072b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007318 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d004      	beq.n	80072b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a1b      	ldr	r2, [pc, #108]	@ (800731c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d101      	bne.n	80072b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 80072b4:	2301      	movs	r3, #1
 80072b6:	e000      	b.n	80072ba <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 80072b8:	2300      	movs	r3, #0
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d00a      	beq.n	80072d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 80072be:	68fa      	ldr	r2, [r7, #12]
 80072c0:	4b17      	ldr	r3, [pc, #92]	@ (8007320 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 80072c2:	4413      	add	r3, r2
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	461a      	mov	r2, r3
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	4a15      	ldr	r2, [pc, #84]	@ (8007324 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 80072d0:	671a      	str	r2, [r3, #112]	@ 0x70
 80072d2:	e009      	b.n	80072e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80072d4:	68fa      	ldr	r2, [r7, #12]
 80072d6:	4b14      	ldr	r3, [pc, #80]	@ (8007328 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	461a      	mov	r2, r3
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a11      	ldr	r2, [pc, #68]	@ (800732c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 80072e6:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	3b01      	subs	r3, #1
 80072ec:	2201      	movs	r2, #1
 80072ee:	409a      	lsls	r2, r3
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 80072f4:	bf00      	nop
 80072f6:	3714      	adds	r7, #20
 80072f8:	46bd      	mov	sp, r7
 80072fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fe:	4770      	bx	lr
 8007300:	58025408 	.word	0x58025408
 8007304:	5802541c 	.word	0x5802541c
 8007308:	58025430 	.word	0x58025430
 800730c:	58025444 	.word	0x58025444
 8007310:	58025458 	.word	0x58025458
 8007314:	5802546c 	.word	0x5802546c
 8007318:	58025480 	.word	0x58025480
 800731c:	58025494 	.word	0x58025494
 8007320:	1600963f 	.word	0x1600963f
 8007324:	58025940 	.word	0x58025940
 8007328:	1000823f 	.word	0x1000823f
 800732c:	40020940 	.word	0x40020940

08007330 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007330:	b480      	push	{r7}
 8007332:	b089      	sub	sp, #36	@ 0x24
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800733a:	2300      	movs	r3, #0
 800733c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800733e:	4b89      	ldr	r3, [pc, #548]	@ (8007564 <HAL_GPIO_Init+0x234>)
 8007340:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007342:	e194      	b.n	800766e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	681a      	ldr	r2, [r3, #0]
 8007348:	2101      	movs	r1, #1
 800734a:	69fb      	ldr	r3, [r7, #28]
 800734c:	fa01 f303 	lsl.w	r3, r1, r3
 8007350:	4013      	ands	r3, r2
 8007352:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	2b00      	cmp	r3, #0
 8007358:	f000 8186 	beq.w	8007668 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800735c:	683b      	ldr	r3, [r7, #0]
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	f003 0303 	and.w	r3, r3, #3
 8007364:	2b01      	cmp	r3, #1
 8007366:	d005      	beq.n	8007374 <HAL_GPIO_Init+0x44>
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f003 0303 	and.w	r3, r3, #3
 8007370:	2b02      	cmp	r3, #2
 8007372:	d130      	bne.n	80073d6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	689b      	ldr	r3, [r3, #8]
 8007378:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	005b      	lsls	r3, r3, #1
 800737e:	2203      	movs	r2, #3
 8007380:	fa02 f303 	lsl.w	r3, r2, r3
 8007384:	43db      	mvns	r3, r3
 8007386:	69ba      	ldr	r2, [r7, #24]
 8007388:	4013      	ands	r3, r2
 800738a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	68da      	ldr	r2, [r3, #12]
 8007390:	69fb      	ldr	r3, [r7, #28]
 8007392:	005b      	lsls	r3, r3, #1
 8007394:	fa02 f303 	lsl.w	r3, r2, r3
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	4313      	orrs	r3, r2
 800739c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	69ba      	ldr	r2, [r7, #24]
 80073a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	685b      	ldr	r3, [r3, #4]
 80073a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80073aa:	2201      	movs	r2, #1
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	fa02 f303 	lsl.w	r3, r2, r3
 80073b2:	43db      	mvns	r3, r3
 80073b4:	69ba      	ldr	r2, [r7, #24]
 80073b6:	4013      	ands	r3, r2
 80073b8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80073ba:	683b      	ldr	r3, [r7, #0]
 80073bc:	685b      	ldr	r3, [r3, #4]
 80073be:	091b      	lsrs	r3, r3, #4
 80073c0:	f003 0201 	and.w	r2, r3, #1
 80073c4:	69fb      	ldr	r3, [r7, #28]
 80073c6:	fa02 f303 	lsl.w	r3, r2, r3
 80073ca:	69ba      	ldr	r2, [r7, #24]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	69ba      	ldr	r2, [r7, #24]
 80073d4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	685b      	ldr	r3, [r3, #4]
 80073da:	f003 0303 	and.w	r3, r3, #3
 80073de:	2b03      	cmp	r3, #3
 80073e0:	d017      	beq.n	8007412 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	68db      	ldr	r3, [r3, #12]
 80073e6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80073e8:	69fb      	ldr	r3, [r7, #28]
 80073ea:	005b      	lsls	r3, r3, #1
 80073ec:	2203      	movs	r2, #3
 80073ee:	fa02 f303 	lsl.w	r3, r2, r3
 80073f2:	43db      	mvns	r3, r3
 80073f4:	69ba      	ldr	r2, [r7, #24]
 80073f6:	4013      	ands	r3, r2
 80073f8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80073fa:	683b      	ldr	r3, [r7, #0]
 80073fc:	689a      	ldr	r2, [r3, #8]
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	005b      	lsls	r3, r3, #1
 8007402:	fa02 f303 	lsl.w	r3, r2, r3
 8007406:	69ba      	ldr	r2, [r7, #24]
 8007408:	4313      	orrs	r3, r2
 800740a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	69ba      	ldr	r2, [r7, #24]
 8007410:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007412:	683b      	ldr	r3, [r7, #0]
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	f003 0303 	and.w	r3, r3, #3
 800741a:	2b02      	cmp	r3, #2
 800741c:	d123      	bne.n	8007466 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	08da      	lsrs	r2, r3, #3
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	3208      	adds	r2, #8
 8007426:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800742a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800742c:	69fb      	ldr	r3, [r7, #28]
 800742e:	f003 0307 	and.w	r3, r3, #7
 8007432:	009b      	lsls	r3, r3, #2
 8007434:	220f      	movs	r2, #15
 8007436:	fa02 f303 	lsl.w	r3, r2, r3
 800743a:	43db      	mvns	r3, r3
 800743c:	69ba      	ldr	r2, [r7, #24]
 800743e:	4013      	ands	r3, r2
 8007440:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	691a      	ldr	r2, [r3, #16]
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	f003 0307 	and.w	r3, r3, #7
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	fa02 f303 	lsl.w	r3, r2, r3
 8007452:	69ba      	ldr	r2, [r7, #24]
 8007454:	4313      	orrs	r3, r2
 8007456:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	08da      	lsrs	r2, r3, #3
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	3208      	adds	r2, #8
 8007460:	69b9      	ldr	r1, [r7, #24]
 8007462:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800746c:	69fb      	ldr	r3, [r7, #28]
 800746e:	005b      	lsls	r3, r3, #1
 8007470:	2203      	movs	r2, #3
 8007472:	fa02 f303 	lsl.w	r3, r2, r3
 8007476:	43db      	mvns	r3, r3
 8007478:	69ba      	ldr	r2, [r7, #24]
 800747a:	4013      	ands	r3, r2
 800747c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	685b      	ldr	r3, [r3, #4]
 8007482:	f003 0203 	and.w	r2, r3, #3
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	005b      	lsls	r3, r3, #1
 800748a:	fa02 f303 	lsl.w	r3, r2, r3
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	4313      	orrs	r3, r2
 8007492:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	69ba      	ldr	r2, [r7, #24]
 8007498:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	685b      	ldr	r3, [r3, #4]
 800749e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	f000 80e0 	beq.w	8007668 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074a8:	4b2f      	ldr	r3, [pc, #188]	@ (8007568 <HAL_GPIO_Init+0x238>)
 80074aa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074ae:	4a2e      	ldr	r2, [pc, #184]	@ (8007568 <HAL_GPIO_Init+0x238>)
 80074b0:	f043 0302 	orr.w	r3, r3, #2
 80074b4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80074b8:	4b2b      	ldr	r3, [pc, #172]	@ (8007568 <HAL_GPIO_Init+0x238>)
 80074ba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	60fb      	str	r3, [r7, #12]
 80074c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80074c6:	4a29      	ldr	r2, [pc, #164]	@ (800756c <HAL_GPIO_Init+0x23c>)
 80074c8:	69fb      	ldr	r3, [r7, #28]
 80074ca:	089b      	lsrs	r3, r3, #2
 80074cc:	3302      	adds	r3, #2
 80074ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80074d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80074d4:	69fb      	ldr	r3, [r7, #28]
 80074d6:	f003 0303 	and.w	r3, r3, #3
 80074da:	009b      	lsls	r3, r3, #2
 80074dc:	220f      	movs	r2, #15
 80074de:	fa02 f303 	lsl.w	r3, r2, r3
 80074e2:	43db      	mvns	r3, r3
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	4013      	ands	r3, r2
 80074e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	4a20      	ldr	r2, [pc, #128]	@ (8007570 <HAL_GPIO_Init+0x240>)
 80074ee:	4293      	cmp	r3, r2
 80074f0:	d052      	beq.n	8007598 <HAL_GPIO_Init+0x268>
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	4a1f      	ldr	r2, [pc, #124]	@ (8007574 <HAL_GPIO_Init+0x244>)
 80074f6:	4293      	cmp	r3, r2
 80074f8:	d031      	beq.n	800755e <HAL_GPIO_Init+0x22e>
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	4a1e      	ldr	r2, [pc, #120]	@ (8007578 <HAL_GPIO_Init+0x248>)
 80074fe:	4293      	cmp	r3, r2
 8007500:	d02b      	beq.n	800755a <HAL_GPIO_Init+0x22a>
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	4a1d      	ldr	r2, [pc, #116]	@ (800757c <HAL_GPIO_Init+0x24c>)
 8007506:	4293      	cmp	r3, r2
 8007508:	d025      	beq.n	8007556 <HAL_GPIO_Init+0x226>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	4a1c      	ldr	r2, [pc, #112]	@ (8007580 <HAL_GPIO_Init+0x250>)
 800750e:	4293      	cmp	r3, r2
 8007510:	d01f      	beq.n	8007552 <HAL_GPIO_Init+0x222>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	4a1b      	ldr	r2, [pc, #108]	@ (8007584 <HAL_GPIO_Init+0x254>)
 8007516:	4293      	cmp	r3, r2
 8007518:	d019      	beq.n	800754e <HAL_GPIO_Init+0x21e>
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4a1a      	ldr	r2, [pc, #104]	@ (8007588 <HAL_GPIO_Init+0x258>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d013      	beq.n	800754a <HAL_GPIO_Init+0x21a>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a19      	ldr	r2, [pc, #100]	@ (800758c <HAL_GPIO_Init+0x25c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d00d      	beq.n	8007546 <HAL_GPIO_Init+0x216>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a18      	ldr	r2, [pc, #96]	@ (8007590 <HAL_GPIO_Init+0x260>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d007      	beq.n	8007542 <HAL_GPIO_Init+0x212>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a17      	ldr	r2, [pc, #92]	@ (8007594 <HAL_GPIO_Init+0x264>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d101      	bne.n	800753e <HAL_GPIO_Init+0x20e>
 800753a:	2309      	movs	r3, #9
 800753c:	e02d      	b.n	800759a <HAL_GPIO_Init+0x26a>
 800753e:	230a      	movs	r3, #10
 8007540:	e02b      	b.n	800759a <HAL_GPIO_Init+0x26a>
 8007542:	2308      	movs	r3, #8
 8007544:	e029      	b.n	800759a <HAL_GPIO_Init+0x26a>
 8007546:	2307      	movs	r3, #7
 8007548:	e027      	b.n	800759a <HAL_GPIO_Init+0x26a>
 800754a:	2306      	movs	r3, #6
 800754c:	e025      	b.n	800759a <HAL_GPIO_Init+0x26a>
 800754e:	2305      	movs	r3, #5
 8007550:	e023      	b.n	800759a <HAL_GPIO_Init+0x26a>
 8007552:	2304      	movs	r3, #4
 8007554:	e021      	b.n	800759a <HAL_GPIO_Init+0x26a>
 8007556:	2303      	movs	r3, #3
 8007558:	e01f      	b.n	800759a <HAL_GPIO_Init+0x26a>
 800755a:	2302      	movs	r3, #2
 800755c:	e01d      	b.n	800759a <HAL_GPIO_Init+0x26a>
 800755e:	2301      	movs	r3, #1
 8007560:	e01b      	b.n	800759a <HAL_GPIO_Init+0x26a>
 8007562:	bf00      	nop
 8007564:	58000080 	.word	0x58000080
 8007568:	58024400 	.word	0x58024400
 800756c:	58000400 	.word	0x58000400
 8007570:	58020000 	.word	0x58020000
 8007574:	58020400 	.word	0x58020400
 8007578:	58020800 	.word	0x58020800
 800757c:	58020c00 	.word	0x58020c00
 8007580:	58021000 	.word	0x58021000
 8007584:	58021400 	.word	0x58021400
 8007588:	58021800 	.word	0x58021800
 800758c:	58021c00 	.word	0x58021c00
 8007590:	58022000 	.word	0x58022000
 8007594:	58022400 	.word	0x58022400
 8007598:	2300      	movs	r3, #0
 800759a:	69fa      	ldr	r2, [r7, #28]
 800759c:	f002 0203 	and.w	r2, r2, #3
 80075a0:	0092      	lsls	r2, r2, #2
 80075a2:	4093      	lsls	r3, r2
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	4313      	orrs	r3, r2
 80075a8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80075aa:	4938      	ldr	r1, [pc, #224]	@ (800768c <HAL_GPIO_Init+0x35c>)
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	089b      	lsrs	r3, r3, #2
 80075b0:	3302      	adds	r3, #2
 80075b2:	69ba      	ldr	r2, [r7, #24]
 80075b4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80075b8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075c0:	693b      	ldr	r3, [r7, #16]
 80075c2:	43db      	mvns	r3, r3
 80075c4:	69ba      	ldr	r2, [r7, #24]
 80075c6:	4013      	ands	r3, r2
 80075c8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80075ca:	683b      	ldr	r3, [r7, #0]
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d003      	beq.n	80075de <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80075d6:	69ba      	ldr	r2, [r7, #24]
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	4313      	orrs	r3, r2
 80075dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80075de:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80075e6:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	43db      	mvns	r3, r3
 80075f2:	69ba      	ldr	r2, [r7, #24]
 80075f4:	4013      	ands	r3, r2
 80075f6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d003      	beq.n	800760c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	4313      	orrs	r3, r2
 800760a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800760c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	43db      	mvns	r3, r3
 800761e:	69ba      	ldr	r2, [r7, #24]
 8007620:	4013      	ands	r3, r2
 8007622:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800762c:	2b00      	cmp	r3, #0
 800762e:	d003      	beq.n	8007638 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	4313      	orrs	r3, r2
 8007636:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	69ba      	ldr	r2, [r7, #24]
 800763c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	43db      	mvns	r3, r3
 8007648:	69ba      	ldr	r2, [r7, #24]
 800764a:	4013      	ands	r3, r2
 800764c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800765a:	69ba      	ldr	r2, [r7, #24]
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	4313      	orrs	r3, r2
 8007660:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007662:	697b      	ldr	r3, [r7, #20]
 8007664:	69ba      	ldr	r2, [r7, #24]
 8007666:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	3301      	adds	r3, #1
 800766c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	fa22 f303 	lsr.w	r3, r2, r3
 8007678:	2b00      	cmp	r3, #0
 800767a:	f47f ae63 	bne.w	8007344 <HAL_GPIO_Init+0x14>
  }
}
 800767e:	bf00      	nop
 8007680:	bf00      	nop
 8007682:	3724      	adds	r7, #36	@ 0x24
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr
 800768c:	58000400 	.word	0x58000400

08007690 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007690:	b480      	push	{r7}
 8007692:	b083      	sub	sp, #12
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
 8007698:	460b      	mov	r3, r1
 800769a:	807b      	strh	r3, [r7, #2]
 800769c:	4613      	mov	r3, r2
 800769e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80076a0:	787b      	ldrb	r3, [r7, #1]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d003      	beq.n	80076ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80076a6:	887a      	ldrh	r2, [r7, #2]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80076ac:	e003      	b.n	80076b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80076ae:	887b      	ldrh	r3, [r7, #2]
 80076b0:	041a      	lsls	r2, r3, #16
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	619a      	str	r2, [r3, #24]
}
 80076b6:	bf00      	nop
 80076b8:	370c      	adds	r7, #12
 80076ba:	46bd      	mov	sp, r7
 80076bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c0:	4770      	bx	lr

080076c2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80076c2:	b480      	push	{r7}
 80076c4:	b085      	sub	sp, #20
 80076c6:	af00      	add	r7, sp, #0
 80076c8:	6078      	str	r0, [r7, #4]
 80076ca:	460b      	mov	r3, r1
 80076cc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	695b      	ldr	r3, [r3, #20]
 80076d2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80076d4:	887a      	ldrh	r2, [r7, #2]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	4013      	ands	r3, r2
 80076da:	041a      	lsls	r2, r3, #16
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	43d9      	mvns	r1, r3
 80076e0:	887b      	ldrh	r3, [r7, #2]
 80076e2:	400b      	ands	r3, r1
 80076e4:	431a      	orrs	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	619a      	str	r2, [r3, #24]
}
 80076ea:	bf00      	nop
 80076ec:	3714      	adds	r7, #20
 80076ee:	46bd      	mov	sp, r7
 80076f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f4:	4770      	bx	lr

080076f6 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b082      	sub	sp, #8
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	4603      	mov	r3, r0
 80076fe:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007700:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8007704:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007708:	88fb      	ldrh	r3, [r7, #6]
 800770a:	4013      	ands	r3, r2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d008      	beq.n	8007722 <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007710:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007714:	88fb      	ldrh	r3, [r7, #6]
 8007716:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800771a:	88fb      	ldrh	r3, [r7, #6]
 800771c:	4618      	mov	r0, r3
 800771e:	f7fa fc89 	bl	8002034 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007722:	bf00      	nop
 8007724:	3708      	adds	r7, #8
 8007726:	46bd      	mov	sp, r7
 8007728:	bd80      	pop	{r7, pc}
	...

0800772c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800772c:	b480      	push	{r7}
 800772e:	b083      	sub	sp, #12
 8007730:	af00      	add	r7, sp, #0
 8007732:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007734:	4a08      	ldr	r2, [pc, #32]	@ (8007758 <HAL_HSEM_FastTake+0x2c>)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	3320      	adds	r3, #32
 800773a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800773e:	4a07      	ldr	r2, [pc, #28]	@ (800775c <HAL_HSEM_FastTake+0x30>)
 8007740:	4293      	cmp	r3, r2
 8007742:	d101      	bne.n	8007748 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8007744:	2300      	movs	r3, #0
 8007746:	e000      	b.n	800774a <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8007748:	2301      	movs	r3, #1
}
 800774a:	4618      	mov	r0, r3
 800774c:	370c      	adds	r7, #12
 800774e:	46bd      	mov	sp, r7
 8007750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007754:	4770      	bx	lr
 8007756:	bf00      	nop
 8007758:	58026400 	.word	0x58026400
 800775c:	80000300 	.word	0x80000300

08007760 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8007760:	b480      	push	{r7}
 8007762:	b083      	sub	sp, #12
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
 8007768:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800776a:	4906      	ldr	r1, [pc, #24]	@ (8007784 <HAL_HSEM_Release+0x24>)
 800776c:	683b      	ldr	r3, [r7, #0]
 800776e:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8007778:	bf00      	nop
 800777a:	370c      	adds	r7, #12
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr
 8007784:	58026400 	.word	0x58026400

08007788 <HAL_PWREx_ConfigSupply>:
  *         process during startup.
  *         For more details, please refer to the power control chapter in the reference manual
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8007788:	b580      	push	{r7, lr}
 800778a:	b084      	sub	sp, #16
 800778c:	af00      	add	r7, sp, #0
 800778e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8007790:	4b29      	ldr	r3, [pc, #164]	@ (8007838 <HAL_PWREx_ConfigSupply+0xb0>)
 8007792:	68db      	ldr	r3, [r3, #12]
 8007794:	f003 0307 	and.w	r3, r3, #7
 8007798:	2b06      	cmp	r3, #6
 800779a:	d00a      	beq.n	80077b2 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800779c:	4b26      	ldr	r3, [pc, #152]	@ (8007838 <HAL_PWREx_ConfigSupply+0xb0>)
 800779e:	68db      	ldr	r3, [r3, #12]
 80077a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80077a4:	687a      	ldr	r2, [r7, #4]
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d001      	beq.n	80077ae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80077aa:	2301      	movs	r3, #1
 80077ac:	e040      	b.n	8007830 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	e03e      	b.n	8007830 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80077b2:	4b21      	ldr	r3, [pc, #132]	@ (8007838 <HAL_PWREx_ConfigSupply+0xb0>)
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	f023 023f 	bic.w	r2, r3, #63	@ 0x3f
 80077ba:	491f      	ldr	r1, [pc, #124]	@ (8007838 <HAL_PWREx_ConfigSupply+0xb0>)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	4313      	orrs	r3, r2
 80077c0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80077c2:	f7fa fc4b 	bl	800205c <HAL_GetTick>
 80077c6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80077c8:	e009      	b.n	80077de <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80077ca:	f7fa fc47 	bl	800205c <HAL_GetTick>
 80077ce:	4602      	mov	r2, r0
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80077d8:	d901      	bls.n	80077de <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e028      	b.n	8007830 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80077de:	4b16      	ldr	r3, [pc, #88]	@ (8007838 <HAL_PWREx_ConfigSupply+0xb0>)
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80077e6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80077ea:	d1ee      	bne.n	80077ca <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2b1e      	cmp	r3, #30
 80077f0:	d008      	beq.n	8007804 <HAL_PWREx_ConfigSupply+0x7c>
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	2b2e      	cmp	r3, #46	@ 0x2e
 80077f6:	d005      	beq.n	8007804 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b1d      	cmp	r3, #29
 80077fc:	d002      	beq.n	8007804 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b2d      	cmp	r3, #45	@ 0x2d
 8007802:	d114      	bne.n	800782e <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8007804:	f7fa fc2a 	bl	800205c <HAL_GetTick>
 8007808:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800780a:	e009      	b.n	8007820 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800780c:	f7fa fc26 	bl	800205c <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800781a:	d901      	bls.n	8007820 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 800781c:	2301      	movs	r3, #1
 800781e:	e007      	b.n	8007830 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8007820:	4b05      	ldr	r3, [pc, #20]	@ (8007838 <HAL_PWREx_ConfigSupply+0xb0>)
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007828:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800782c:	d1ee      	bne.n	800780c <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800782e:	2300      	movs	r3, #0
}
 8007830:	4618      	mov	r0, r3
 8007832:	3710      	adds	r7, #16
 8007834:	46bd      	mov	sp, r7
 8007836:	bd80      	pop	{r7, pc}
 8007838:	58024800 	.word	0x58024800

0800783c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b08c      	sub	sp, #48	@ 0x30
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d102      	bne.n	8007850 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	f000 bc48 	b.w	80080e0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f003 0301 	and.w	r3, r3, #1
 8007858:	2b00      	cmp	r3, #0
 800785a:	f000 8088 	beq.w	800796e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800785e:	4b99      	ldr	r3, [pc, #612]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 8007860:	691b      	ldr	r3, [r3, #16]
 8007862:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007866:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007868:	4b96      	ldr	r3, [pc, #600]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 800786a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800786c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800786e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007870:	2b10      	cmp	r3, #16
 8007872:	d007      	beq.n	8007884 <HAL_RCC_OscConfig+0x48>
 8007874:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007876:	2b18      	cmp	r3, #24
 8007878:	d111      	bne.n	800789e <HAL_RCC_OscConfig+0x62>
 800787a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800787c:	f003 0303 	and.w	r3, r3, #3
 8007880:	2b02      	cmp	r3, #2
 8007882:	d10c      	bne.n	800789e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007884:	4b8f      	ldr	r3, [pc, #572]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800788c:	2b00      	cmp	r3, #0
 800788e:	d06d      	beq.n	800796c <HAL_RCC_OscConfig+0x130>
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d169      	bne.n	800796c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007898:	2301      	movs	r3, #1
 800789a:	f000 bc21 	b.w	80080e0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	685b      	ldr	r3, [r3, #4]
 80078a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80078a6:	d106      	bne.n	80078b6 <HAL_RCC_OscConfig+0x7a>
 80078a8:	4b86      	ldr	r3, [pc, #536]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	4a85      	ldr	r2, [pc, #532]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 80078ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078b2:	6013      	str	r3, [r2, #0]
 80078b4:	e02e      	b.n	8007914 <HAL_RCC_OscConfig+0xd8>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	685b      	ldr	r3, [r3, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d10c      	bne.n	80078d8 <HAL_RCC_OscConfig+0x9c>
 80078be:	4b81      	ldr	r3, [pc, #516]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a80      	ldr	r2, [pc, #512]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 80078c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80078c8:	6013      	str	r3, [r2, #0]
 80078ca:	4b7e      	ldr	r3, [pc, #504]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a7d      	ldr	r2, [pc, #500]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 80078d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80078d4:	6013      	str	r3, [r2, #0]
 80078d6:	e01d      	b.n	8007914 <HAL_RCC_OscConfig+0xd8>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	685b      	ldr	r3, [r3, #4]
 80078dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80078e0:	d10c      	bne.n	80078fc <HAL_RCC_OscConfig+0xc0>
 80078e2:	4b78      	ldr	r3, [pc, #480]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a77      	ldr	r2, [pc, #476]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 80078e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80078ec:	6013      	str	r3, [r2, #0]
 80078ee:	4b75      	ldr	r3, [pc, #468]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	4a74      	ldr	r2, [pc, #464]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 80078f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80078f8:	6013      	str	r3, [r2, #0]
 80078fa:	e00b      	b.n	8007914 <HAL_RCC_OscConfig+0xd8>
 80078fc:	4b71      	ldr	r3, [pc, #452]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	4a70      	ldr	r2, [pc, #448]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 8007902:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007906:	6013      	str	r3, [r2, #0]
 8007908:	4b6e      	ldr	r3, [pc, #440]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	4a6d      	ldr	r2, [pc, #436]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 800790e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007912:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	685b      	ldr	r3, [r3, #4]
 8007918:	2b00      	cmp	r3, #0
 800791a:	d013      	beq.n	8007944 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800791c:	f7fa fb9e 	bl	800205c <HAL_GetTick>
 8007920:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007922:	e008      	b.n	8007936 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007924:	f7fa fb9a 	bl	800205c <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	2b64      	cmp	r3, #100	@ 0x64
 8007930:	d901      	bls.n	8007936 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007932:	2303      	movs	r3, #3
 8007934:	e3d4      	b.n	80080e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007936:	4b63      	ldr	r3, [pc, #396]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800793e:	2b00      	cmp	r3, #0
 8007940:	d0f0      	beq.n	8007924 <HAL_RCC_OscConfig+0xe8>
 8007942:	e014      	b.n	800796e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007944:	f7fa fb8a 	bl	800205c <HAL_GetTick>
 8007948:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800794a:	e008      	b.n	800795e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800794c:	f7fa fb86 	bl	800205c <HAL_GetTick>
 8007950:	4602      	mov	r2, r0
 8007952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007954:	1ad3      	subs	r3, r2, r3
 8007956:	2b64      	cmp	r3, #100	@ 0x64
 8007958:	d901      	bls.n	800795e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800795a:	2303      	movs	r3, #3
 800795c:	e3c0      	b.n	80080e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800795e:	4b59      	ldr	r3, [pc, #356]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007966:	2b00      	cmp	r3, #0
 8007968:	d1f0      	bne.n	800794c <HAL_RCC_OscConfig+0x110>
 800796a:	e000      	b.n	800796e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800796c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0302 	and.w	r3, r3, #2
 8007976:	2b00      	cmp	r3, #0
 8007978:	f000 80ca 	beq.w	8007b10 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800797c:	4b51      	ldr	r3, [pc, #324]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 800797e:	691b      	ldr	r3, [r3, #16]
 8007980:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007984:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007986:	4b4f      	ldr	r3, [pc, #316]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 8007988:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800798a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800798c:	6a3b      	ldr	r3, [r7, #32]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d007      	beq.n	80079a2 <HAL_RCC_OscConfig+0x166>
 8007992:	6a3b      	ldr	r3, [r7, #32]
 8007994:	2b18      	cmp	r3, #24
 8007996:	d156      	bne.n	8007a46 <HAL_RCC_OscConfig+0x20a>
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	f003 0303 	and.w	r3, r3, #3
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d151      	bne.n	8007a46 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80079a2:	4b48      	ldr	r3, [pc, #288]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0304 	and.w	r3, r3, #4
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d005      	beq.n	80079ba <HAL_RCC_OscConfig+0x17e>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e392      	b.n	80080e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80079ba:	4b42      	ldr	r3, [pc, #264]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	f023 0219 	bic.w	r2, r3, #25
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	493f      	ldr	r1, [pc, #252]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 80079c8:	4313      	orrs	r3, r2
 80079ca:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079cc:	f7fa fb46 	bl	800205c <HAL_GetTick>
 80079d0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079d2:	e008      	b.n	80079e6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079d4:	f7fa fb42 	bl	800205c <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d901      	bls.n	80079e6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80079e2:	2303      	movs	r3, #3
 80079e4:	e37c      	b.n	80080e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80079e6:	4b37      	ldr	r3, [pc, #220]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	f003 0304 	and.w	r3, r3, #4
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d0f0      	beq.n	80079d4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079f2:	f7fa fe9b 	bl	800272c <HAL_GetREVID>
 80079f6:	4603      	mov	r3, r0
 80079f8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80079fc:	4293      	cmp	r3, r2
 80079fe:	d817      	bhi.n	8007a30 <HAL_RCC_OscConfig+0x1f4>
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	691b      	ldr	r3, [r3, #16]
 8007a04:	2b40      	cmp	r3, #64	@ 0x40
 8007a06:	d108      	bne.n	8007a1a <HAL_RCC_OscConfig+0x1de>
 8007a08:	4b2e      	ldr	r3, [pc, #184]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007a10:	4a2c      	ldr	r2, [pc, #176]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 8007a12:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007a16:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a18:	e07a      	b.n	8007b10 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a1a:	4b2a      	ldr	r3, [pc, #168]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	691b      	ldr	r3, [r3, #16]
 8007a26:	031b      	lsls	r3, r3, #12
 8007a28:	4926      	ldr	r1, [pc, #152]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 8007a2a:	4313      	orrs	r3, r2
 8007a2c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a2e:	e06f      	b.n	8007b10 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a30:	4b24      	ldr	r3, [pc, #144]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 8007a32:	685b      	ldr	r3, [r3, #4]
 8007a34:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	691b      	ldr	r3, [r3, #16]
 8007a3c:	061b      	lsls	r3, r3, #24
 8007a3e:	4921      	ldr	r1, [pc, #132]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 8007a40:	4313      	orrs	r3, r2
 8007a42:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007a44:	e064      	b.n	8007b10 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d047      	beq.n	8007ade <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8007a4e:	4b1d      	ldr	r3, [pc, #116]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f023 0219 	bic.w	r2, r3, #25
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	491a      	ldr	r1, [pc, #104]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 8007a5c:	4313      	orrs	r3, r2
 8007a5e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a60:	f7fa fafc 	bl	800205c <HAL_GetTick>
 8007a64:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a66:	e008      	b.n	8007a7a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a68:	f7fa faf8 	bl	800205c <HAL_GetTick>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007a70:	1ad3      	subs	r3, r2, r3
 8007a72:	2b02      	cmp	r3, #2
 8007a74:	d901      	bls.n	8007a7a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8007a76:	2303      	movs	r3, #3
 8007a78:	e332      	b.n	80080e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007a7a:	4b12      	ldr	r3, [pc, #72]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f003 0304 	and.w	r3, r3, #4
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d0f0      	beq.n	8007a68 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a86:	f7fa fe51 	bl	800272c <HAL_GetREVID>
 8007a8a:	4603      	mov	r3, r0
 8007a8c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007a90:	4293      	cmp	r3, r2
 8007a92:	d819      	bhi.n	8007ac8 <HAL_RCC_OscConfig+0x28c>
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	2b40      	cmp	r3, #64	@ 0x40
 8007a9a:	d108      	bne.n	8007aae <HAL_RCC_OscConfig+0x272>
 8007a9c:	4b09      	ldr	r3, [pc, #36]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 8007a9e:	685b      	ldr	r3, [r3, #4]
 8007aa0:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8007aa4:	4a07      	ldr	r2, [pc, #28]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 8007aa6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007aaa:	6053      	str	r3, [r2, #4]
 8007aac:	e030      	b.n	8007b10 <HAL_RCC_OscConfig+0x2d4>
 8007aae:	4b05      	ldr	r3, [pc, #20]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 8007ab0:	685b      	ldr	r3, [r3, #4]
 8007ab2:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	031b      	lsls	r3, r3, #12
 8007abc:	4901      	ldr	r1, [pc, #4]	@ (8007ac4 <HAL_RCC_OscConfig+0x288>)
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	604b      	str	r3, [r1, #4]
 8007ac2:	e025      	b.n	8007b10 <HAL_RCC_OscConfig+0x2d4>
 8007ac4:	58024400 	.word	0x58024400
 8007ac8:	4b9a      	ldr	r3, [pc, #616]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007aca:	685b      	ldr	r3, [r3, #4]
 8007acc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	061b      	lsls	r3, r3, #24
 8007ad6:	4997      	ldr	r1, [pc, #604]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	604b      	str	r3, [r1, #4]
 8007adc:	e018      	b.n	8007b10 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007ade:	4b95      	ldr	r3, [pc, #596]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	4a94      	ldr	r2, [pc, #592]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007ae4:	f023 0301 	bic.w	r3, r3, #1
 8007ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007aea:	f7fa fab7 	bl	800205c <HAL_GetTick>
 8007aee:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007af0:	e008      	b.n	8007b04 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007af2:	f7fa fab3 	bl	800205c <HAL_GetTick>
 8007af6:	4602      	mov	r2, r0
 8007af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007afa:	1ad3      	subs	r3, r2, r3
 8007afc:	2b02      	cmp	r3, #2
 8007afe:	d901      	bls.n	8007b04 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8007b00:	2303      	movs	r3, #3
 8007b02:	e2ed      	b.n	80080e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007b04:	4b8b      	ldr	r3, [pc, #556]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f003 0304 	and.w	r3, r3, #4
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d1f0      	bne.n	8007af2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f003 0310 	and.w	r3, r3, #16
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 80a9 	beq.w	8007c70 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007b1e:	4b85      	ldr	r3, [pc, #532]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007b20:	691b      	ldr	r3, [r3, #16]
 8007b22:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007b26:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8007b28:	4b82      	ldr	r3, [pc, #520]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007b2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007b2c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8007b2e:	69bb      	ldr	r3, [r7, #24]
 8007b30:	2b08      	cmp	r3, #8
 8007b32:	d007      	beq.n	8007b44 <HAL_RCC_OscConfig+0x308>
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	2b18      	cmp	r3, #24
 8007b38:	d13a      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x374>
 8007b3a:	697b      	ldr	r3, [r7, #20]
 8007b3c:	f003 0303 	and.w	r3, r3, #3
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d135      	bne.n	8007bb0 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b44:	4b7b      	ldr	r3, [pc, #492]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d005      	beq.n	8007b5c <HAL_RCC_OscConfig+0x320>
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	69db      	ldr	r3, [r3, #28]
 8007b54:	2b80      	cmp	r3, #128	@ 0x80
 8007b56:	d001      	beq.n	8007b5c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e2c1      	b.n	80080e0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b5c:	f7fa fde6 	bl	800272c <HAL_GetREVID>
 8007b60:	4603      	mov	r3, r0
 8007b62:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007b66:	4293      	cmp	r3, r2
 8007b68:	d817      	bhi.n	8007b9a <HAL_RCC_OscConfig+0x35e>
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6a1b      	ldr	r3, [r3, #32]
 8007b6e:	2b20      	cmp	r3, #32
 8007b70:	d108      	bne.n	8007b84 <HAL_RCC_OscConfig+0x348>
 8007b72:	4b70      	ldr	r3, [pc, #448]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007b74:	685b      	ldr	r3, [r3, #4]
 8007b76:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007b7a:	4a6e      	ldr	r2, [pc, #440]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007b7c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b80:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b82:	e075      	b.n	8007c70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b84:	4b6b      	ldr	r3, [pc, #428]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6a1b      	ldr	r3, [r3, #32]
 8007b90:	069b      	lsls	r3, r3, #26
 8007b92:	4968      	ldr	r1, [pc, #416]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007b94:	4313      	orrs	r3, r2
 8007b96:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007b98:	e06a      	b.n	8007c70 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007b9a:	4b66      	ldr	r3, [pc, #408]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007b9c:	68db      	ldr	r3, [r3, #12]
 8007b9e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6a1b      	ldr	r3, [r3, #32]
 8007ba6:	061b      	lsls	r3, r3, #24
 8007ba8:	4962      	ldr	r1, [pc, #392]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8007bae:	e05f      	b.n	8007c70 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	69db      	ldr	r3, [r3, #28]
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d042      	beq.n	8007c3e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8007bb8:	4b5e      	ldr	r3, [pc, #376]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a5d      	ldr	r2, [pc, #372]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007bbe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bc4:	f7fa fa4a 	bl	800205c <HAL_GetTick>
 8007bc8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007bca:	e008      	b.n	8007bde <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007bcc:	f7fa fa46 	bl	800205c <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	2b02      	cmp	r3, #2
 8007bd8:	d901      	bls.n	8007bde <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8007bda:	2303      	movs	r3, #3
 8007bdc:	e280      	b.n	80080e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8007bde:	4b55      	ldr	r3, [pc, #340]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d0f0      	beq.n	8007bcc <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8007bea:	f7fa fd9f 	bl	800272c <HAL_GetREVID>
 8007bee:	4603      	mov	r3, r0
 8007bf0:	f241 0203 	movw	r2, #4099	@ 0x1003
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d817      	bhi.n	8007c28 <HAL_RCC_OscConfig+0x3ec>
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	6a1b      	ldr	r3, [r3, #32]
 8007bfc:	2b20      	cmp	r3, #32
 8007bfe:	d108      	bne.n	8007c12 <HAL_RCC_OscConfig+0x3d6>
 8007c00:	4b4c      	ldr	r3, [pc, #304]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8007c08:	4a4a      	ldr	r2, [pc, #296]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007c0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c0e:	6053      	str	r3, [r2, #4]
 8007c10:	e02e      	b.n	8007c70 <HAL_RCC_OscConfig+0x434>
 8007c12:	4b48      	ldr	r3, [pc, #288]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6a1b      	ldr	r3, [r3, #32]
 8007c1e:	069b      	lsls	r3, r3, #26
 8007c20:	4944      	ldr	r1, [pc, #272]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007c22:	4313      	orrs	r3, r2
 8007c24:	604b      	str	r3, [r1, #4]
 8007c26:	e023      	b.n	8007c70 <HAL_RCC_OscConfig+0x434>
 8007c28:	4b42      	ldr	r3, [pc, #264]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	6a1b      	ldr	r3, [r3, #32]
 8007c34:	061b      	lsls	r3, r3, #24
 8007c36:	493f      	ldr	r1, [pc, #252]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007c38:	4313      	orrs	r3, r2
 8007c3a:	60cb      	str	r3, [r1, #12]
 8007c3c:	e018      	b.n	8007c70 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8007c3e:	4b3d      	ldr	r3, [pc, #244]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4a3c      	ldr	r2, [pc, #240]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007c44:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007c48:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c4a:	f7fa fa07 	bl	800205c <HAL_GetTick>
 8007c4e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007c50:	e008      	b.n	8007c64 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8007c52:	f7fa fa03 	bl	800205c <HAL_GetTick>
 8007c56:	4602      	mov	r2, r0
 8007c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c5a:	1ad3      	subs	r3, r2, r3
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d901      	bls.n	8007c64 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007c60:	2303      	movs	r3, #3
 8007c62:	e23d      	b.n	80080e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8007c64:	4b33      	ldr	r3, [pc, #204]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d1f0      	bne.n	8007c52 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f003 0308 	and.w	r3, r3, #8
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d036      	beq.n	8007cea <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	695b      	ldr	r3, [r3, #20]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d019      	beq.n	8007cb8 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c84:	4b2b      	ldr	r3, [pc, #172]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007c86:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c88:	4a2a      	ldr	r2, [pc, #168]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007c8a:	f043 0301 	orr.w	r3, r3, #1
 8007c8e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c90:	f7fa f9e4 	bl	800205c <HAL_GetTick>
 8007c94:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007c96:	e008      	b.n	8007caa <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c98:	f7fa f9e0 	bl	800205c <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d901      	bls.n	8007caa <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e21a      	b.n	80080e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8007caa:	4b22      	ldr	r3, [pc, #136]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007cac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cae:	f003 0302 	and.w	r3, r3, #2
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d0f0      	beq.n	8007c98 <HAL_RCC_OscConfig+0x45c>
 8007cb6:	e018      	b.n	8007cea <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cb8:	4b1e      	ldr	r3, [pc, #120]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007cba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cbc:	4a1d      	ldr	r2, [pc, #116]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007cbe:	f023 0301 	bic.w	r3, r3, #1
 8007cc2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cc4:	f7fa f9ca 	bl	800205c <HAL_GetTick>
 8007cc8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007cca:	e008      	b.n	8007cde <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007ccc:	f7fa f9c6 	bl	800205c <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	2b02      	cmp	r3, #2
 8007cd8:	d901      	bls.n	8007cde <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8007cda:	2303      	movs	r3, #3
 8007cdc:	e200      	b.n	80080e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007cde:	4b15      	ldr	r3, [pc, #84]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007ce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ce2:	f003 0302 	and.w	r3, r3, #2
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d1f0      	bne.n	8007ccc <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0320 	and.w	r3, r3, #32
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d039      	beq.n	8007d6a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	699b      	ldr	r3, [r3, #24]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d01c      	beq.n	8007d38 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	4a0c      	ldr	r2, [pc, #48]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007d04:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007d08:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007d0a:	f7fa f9a7 	bl	800205c <HAL_GetTick>
 8007d0e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007d10:	e008      	b.n	8007d24 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d12:	f7fa f9a3 	bl	800205c <HAL_GetTick>
 8007d16:	4602      	mov	r2, r0
 8007d18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d1a:	1ad3      	subs	r3, r2, r3
 8007d1c:	2b02      	cmp	r3, #2
 8007d1e:	d901      	bls.n	8007d24 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8007d20:	2303      	movs	r3, #3
 8007d22:	e1dd      	b.n	80080e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8007d24:	4b03      	ldr	r3, [pc, #12]	@ (8007d34 <HAL_RCC_OscConfig+0x4f8>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d0f0      	beq.n	8007d12 <HAL_RCC_OscConfig+0x4d6>
 8007d30:	e01b      	b.n	8007d6a <HAL_RCC_OscConfig+0x52e>
 8007d32:	bf00      	nop
 8007d34:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007d38:	4b9b      	ldr	r3, [pc, #620]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a9a      	ldr	r2, [pc, #616]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007d3e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007d42:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8007d44:	f7fa f98a 	bl	800205c <HAL_GetTick>
 8007d48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007d4a:	e008      	b.n	8007d5e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007d4c:	f7fa f986 	bl	800205c <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d901      	bls.n	8007d5e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e1c0      	b.n	80080e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8007d5e:	4b92      	ldr	r3, [pc, #584]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d1f0      	bne.n	8007d4c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 0304 	and.w	r3, r3, #4
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	f000 8081 	beq.w	8007e7a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8007d78:	4b8c      	ldr	r3, [pc, #560]	@ (8007fac <HAL_RCC_OscConfig+0x770>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4a8b      	ldr	r2, [pc, #556]	@ (8007fac <HAL_RCC_OscConfig+0x770>)
 8007d7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007d82:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007d84:	f7fa f96a 	bl	800205c <HAL_GetTick>
 8007d88:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d8a:	e008      	b.n	8007d9e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d8c:	f7fa f966 	bl	800205c <HAL_GetTick>
 8007d90:	4602      	mov	r2, r0
 8007d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d94:	1ad3      	subs	r3, r2, r3
 8007d96:	2b64      	cmp	r3, #100	@ 0x64
 8007d98:	d901      	bls.n	8007d9e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8007d9a:	2303      	movs	r3, #3
 8007d9c:	e1a0      	b.n	80080e0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007d9e:	4b83      	ldr	r3, [pc, #524]	@ (8007fac <HAL_RCC_OscConfig+0x770>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d0f0      	beq.n	8007d8c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	2b01      	cmp	r3, #1
 8007db0:	d106      	bne.n	8007dc0 <HAL_RCC_OscConfig+0x584>
 8007db2:	4b7d      	ldr	r3, [pc, #500]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007db4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007db6:	4a7c      	ldr	r2, [pc, #496]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007db8:	f043 0301 	orr.w	r3, r3, #1
 8007dbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dbe:	e02d      	b.n	8007e1c <HAL_RCC_OscConfig+0x5e0>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	689b      	ldr	r3, [r3, #8]
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d10c      	bne.n	8007de2 <HAL_RCC_OscConfig+0x5a6>
 8007dc8:	4b77      	ldr	r3, [pc, #476]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007dca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dcc:	4a76      	ldr	r2, [pc, #472]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007dce:	f023 0301 	bic.w	r3, r3, #1
 8007dd2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007dd4:	4b74      	ldr	r3, [pc, #464]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007dd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dd8:	4a73      	ldr	r2, [pc, #460]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007dda:	f023 0304 	bic.w	r3, r3, #4
 8007dde:	6713      	str	r3, [r2, #112]	@ 0x70
 8007de0:	e01c      	b.n	8007e1c <HAL_RCC_OscConfig+0x5e0>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	689b      	ldr	r3, [r3, #8]
 8007de6:	2b05      	cmp	r3, #5
 8007de8:	d10c      	bne.n	8007e04 <HAL_RCC_OscConfig+0x5c8>
 8007dea:	4b6f      	ldr	r3, [pc, #444]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dee:	4a6e      	ldr	r2, [pc, #440]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007df0:	f043 0304 	orr.w	r3, r3, #4
 8007df4:	6713      	str	r3, [r2, #112]	@ 0x70
 8007df6:	4b6c      	ldr	r3, [pc, #432]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007df8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007dfa:	4a6b      	ldr	r2, [pc, #428]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007dfc:	f043 0301 	orr.w	r3, r3, #1
 8007e00:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e02:	e00b      	b.n	8007e1c <HAL_RCC_OscConfig+0x5e0>
 8007e04:	4b68      	ldr	r3, [pc, #416]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007e06:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e08:	4a67      	ldr	r2, [pc, #412]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007e0a:	f023 0301 	bic.w	r3, r3, #1
 8007e0e:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e10:	4b65      	ldr	r3, [pc, #404]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007e12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e14:	4a64      	ldr	r2, [pc, #400]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007e16:	f023 0304 	bic.w	r3, r3, #4
 8007e1a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d015      	beq.n	8007e50 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e24:	f7fa f91a 	bl	800205c <HAL_GetTick>
 8007e28:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e2a:	e00a      	b.n	8007e42 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e2c:	f7fa f916 	bl	800205c <HAL_GetTick>
 8007e30:	4602      	mov	r2, r0
 8007e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d901      	bls.n	8007e42 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e14e      	b.n	80080e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007e42:	4b59      	ldr	r3, [pc, #356]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007e44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e46:	f003 0302 	and.w	r3, r3, #2
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d0ee      	beq.n	8007e2c <HAL_RCC_OscConfig+0x5f0>
 8007e4e:	e014      	b.n	8007e7a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e50:	f7fa f904 	bl	800205c <HAL_GetTick>
 8007e54:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007e56:	e00a      	b.n	8007e6e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e58:	f7fa f900 	bl	800205c <HAL_GetTick>
 8007e5c:	4602      	mov	r2, r0
 8007e5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e60:	1ad3      	subs	r3, r2, r3
 8007e62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d901      	bls.n	8007e6e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8007e6a:	2303      	movs	r3, #3
 8007e6c:	e138      	b.n	80080e0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8007e6e:	4b4e      	ldr	r3, [pc, #312]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007e70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e72:	f003 0302 	and.w	r3, r3, #2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d1ee      	bne.n	8007e58 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	f000 812d 	beq.w	80080de <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8007e84:	4b48      	ldr	r3, [pc, #288]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007e86:	691b      	ldr	r3, [r3, #16]
 8007e88:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007e8c:	2b18      	cmp	r3, #24
 8007e8e:	f000 80bd 	beq.w	800800c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e96:	2b02      	cmp	r3, #2
 8007e98:	f040 809e 	bne.w	8007fd8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e9c:	4b42      	ldr	r3, [pc, #264]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4a41      	ldr	r2, [pc, #260]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007ea2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007ea6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ea8:	f7fa f8d8 	bl	800205c <HAL_GetTick>
 8007eac:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007eae:	e008      	b.n	8007ec2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007eb0:	f7fa f8d4 	bl	800205c <HAL_GetTick>
 8007eb4:	4602      	mov	r2, r0
 8007eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	2b02      	cmp	r3, #2
 8007ebc:	d901      	bls.n	8007ec2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e10e      	b.n	80080e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ec2:	4b39      	ldr	r3, [pc, #228]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1f0      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007ece:	4b36      	ldr	r3, [pc, #216]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007ed0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007ed2:	4b37      	ldr	r3, [pc, #220]	@ (8007fb0 <HAL_RCC_OscConfig+0x774>)
 8007ed4:	4013      	ands	r3, r2
 8007ed6:	687a      	ldr	r2, [r7, #4]
 8007ed8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8007eda:	687a      	ldr	r2, [r7, #4]
 8007edc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8007ede:	0112      	lsls	r2, r2, #4
 8007ee0:	430a      	orrs	r2, r1
 8007ee2:	4931      	ldr	r1, [pc, #196]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	628b      	str	r3, [r1, #40]	@ 0x28
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007eec:	3b01      	subs	r3, #1
 8007eee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007ef6:	3b01      	subs	r3, #1
 8007ef8:	025b      	lsls	r3, r3, #9
 8007efa:	b29b      	uxth	r3, r3
 8007efc:	431a      	orrs	r2, r3
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f02:	3b01      	subs	r3, #1
 8007f04:	041b      	lsls	r3, r3, #16
 8007f06:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8007f0a:	431a      	orrs	r2, r3
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007f10:	3b01      	subs	r3, #1
 8007f12:	061b      	lsls	r3, r3, #24
 8007f14:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8007f18:	4923      	ldr	r1, [pc, #140]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007f1a:	4313      	orrs	r3, r2
 8007f1c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8007f1e:	4b22      	ldr	r3, [pc, #136]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007f20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f22:	4a21      	ldr	r2, [pc, #132]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007f24:	f023 0301 	bic.w	r3, r3, #1
 8007f28:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8007f2a:	4b1f      	ldr	r3, [pc, #124]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007f2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007f2e:	4b21      	ldr	r3, [pc, #132]	@ (8007fb4 <HAL_RCC_OscConfig+0x778>)
 8007f30:	4013      	ands	r3, r2
 8007f32:	687a      	ldr	r2, [r7, #4]
 8007f34:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8007f36:	00d2      	lsls	r2, r2, #3
 8007f38:	491b      	ldr	r1, [pc, #108]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8007f3e:	4b1a      	ldr	r3, [pc, #104]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f42:	f023 020c 	bic.w	r2, r3, #12
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007f4a:	4917      	ldr	r1, [pc, #92]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007f4c:	4313      	orrs	r3, r2
 8007f4e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8007f50:	4b15      	ldr	r3, [pc, #84]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f54:	f023 0202 	bic.w	r2, r3, #2
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f5c:	4912      	ldr	r1, [pc, #72]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007f62:	4b11      	ldr	r3, [pc, #68]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f66:	4a10      	ldr	r2, [pc, #64]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007f68:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007f6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007f6e:	4b0e      	ldr	r3, [pc, #56]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007f70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f72:	4a0d      	ldr	r2, [pc, #52]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007f74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007f78:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f7e:	4a0a      	ldr	r2, [pc, #40]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007f80:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007f84:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8007f86:	4b08      	ldr	r3, [pc, #32]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8a:	4a07      	ldr	r2, [pc, #28]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007f8c:	f043 0301 	orr.w	r3, r3, #1
 8007f90:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f92:	4b05      	ldr	r3, [pc, #20]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007f94:	681b      	ldr	r3, [r3, #0]
 8007f96:	4a04      	ldr	r2, [pc, #16]	@ (8007fa8 <HAL_RCC_OscConfig+0x76c>)
 8007f98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8007f9c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007f9e:	f7fa f85d 	bl	800205c <HAL_GetTick>
 8007fa2:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007fa4:	e011      	b.n	8007fca <HAL_RCC_OscConfig+0x78e>
 8007fa6:	bf00      	nop
 8007fa8:	58024400 	.word	0x58024400
 8007fac:	58024800 	.word	0x58024800
 8007fb0:	fffffc0c 	.word	0xfffffc0c
 8007fb4:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fb8:	f7fa f850 	bl	800205c <HAL_GetTick>
 8007fbc:	4602      	mov	r2, r0
 8007fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fc0:	1ad3      	subs	r3, r2, r3
 8007fc2:	2b02      	cmp	r3, #2
 8007fc4:	d901      	bls.n	8007fca <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e08a      	b.n	80080e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007fca:	4b47      	ldr	r3, [pc, #284]	@ (80080e8 <HAL_RCC_OscConfig+0x8ac>)
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d0f0      	beq.n	8007fb8 <HAL_RCC_OscConfig+0x77c>
 8007fd6:	e082      	b.n	80080de <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007fd8:	4b43      	ldr	r3, [pc, #268]	@ (80080e8 <HAL_RCC_OscConfig+0x8ac>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	4a42      	ldr	r2, [pc, #264]	@ (80080e8 <HAL_RCC_OscConfig+0x8ac>)
 8007fde:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8007fe2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007fe4:	f7fa f83a 	bl	800205c <HAL_GetTick>
 8007fe8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007fea:	e008      	b.n	8007ffe <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007fec:	f7fa f836 	bl	800205c <HAL_GetTick>
 8007ff0:	4602      	mov	r2, r0
 8007ff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ff4:	1ad3      	subs	r3, r2, r3
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d901      	bls.n	8007ffe <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8007ffa:	2303      	movs	r3, #3
 8007ffc:	e070      	b.n	80080e0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007ffe:	4b3a      	ldr	r3, [pc, #232]	@ (80080e8 <HAL_RCC_OscConfig+0x8ac>)
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008006:	2b00      	cmp	r3, #0
 8008008:	d1f0      	bne.n	8007fec <HAL_RCC_OscConfig+0x7b0>
 800800a:	e068      	b.n	80080de <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800800c:	4b36      	ldr	r3, [pc, #216]	@ (80080e8 <HAL_RCC_OscConfig+0x8ac>)
 800800e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008010:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008012:	4b35      	ldr	r3, [pc, #212]	@ (80080e8 <HAL_RCC_OscConfig+0x8ac>)
 8008014:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008016:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800801c:	2b01      	cmp	r3, #1
 800801e:	d031      	beq.n	8008084 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	f003 0203 	and.w	r2, r3, #3
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800802a:	429a      	cmp	r2, r3
 800802c:	d12a      	bne.n	8008084 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800802e:	693b      	ldr	r3, [r7, #16]
 8008030:	091b      	lsrs	r3, r3, #4
 8008032:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800803a:	429a      	cmp	r2, r3
 800803c:	d122      	bne.n	8008084 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008048:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800804a:	429a      	cmp	r2, r3
 800804c:	d11a      	bne.n	8008084 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	0a5b      	lsrs	r3, r3, #9
 8008052:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800805a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800805c:	429a      	cmp	r2, r3
 800805e:	d111      	bne.n	8008084 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	0c1b      	lsrs	r3, r3, #16
 8008064:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800806c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800806e:	429a      	cmp	r2, r3
 8008070:	d108      	bne.n	8008084 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	0e1b      	lsrs	r3, r3, #24
 8008076:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800807e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8008080:	429a      	cmp	r2, r3
 8008082:	d001      	beq.n	8008088 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8008084:	2301      	movs	r3, #1
 8008086:	e02b      	b.n	80080e0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8008088:	4b17      	ldr	r3, [pc, #92]	@ (80080e8 <HAL_RCC_OscConfig+0x8ac>)
 800808a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800808c:	08db      	lsrs	r3, r3, #3
 800808e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008092:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008098:	693a      	ldr	r2, [r7, #16]
 800809a:	429a      	cmp	r2, r3
 800809c:	d01f      	beq.n	80080de <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800809e:	4b12      	ldr	r3, [pc, #72]	@ (80080e8 <HAL_RCC_OscConfig+0x8ac>)
 80080a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080a2:	4a11      	ldr	r2, [pc, #68]	@ (80080e8 <HAL_RCC_OscConfig+0x8ac>)
 80080a4:	f023 0301 	bic.w	r3, r3, #1
 80080a8:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80080aa:	f7f9 ffd7 	bl	800205c <HAL_GetTick>
 80080ae:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80080b0:	bf00      	nop
 80080b2:	f7f9 ffd3 	bl	800205c <HAL_GetTick>
 80080b6:	4602      	mov	r2, r0
 80080b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ba:	4293      	cmp	r3, r2
 80080bc:	d0f9      	beq.n	80080b2 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80080be:	4b0a      	ldr	r3, [pc, #40]	@ (80080e8 <HAL_RCC_OscConfig+0x8ac>)
 80080c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80080c2:	4b0a      	ldr	r3, [pc, #40]	@ (80080ec <HAL_RCC_OscConfig+0x8b0>)
 80080c4:	4013      	ands	r3, r2
 80080c6:	687a      	ldr	r2, [r7, #4]
 80080c8:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80080ca:	00d2      	lsls	r2, r2, #3
 80080cc:	4906      	ldr	r1, [pc, #24]	@ (80080e8 <HAL_RCC_OscConfig+0x8ac>)
 80080ce:	4313      	orrs	r3, r2
 80080d0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 80080d2:	4b05      	ldr	r3, [pc, #20]	@ (80080e8 <HAL_RCC_OscConfig+0x8ac>)
 80080d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80080d6:	4a04      	ldr	r2, [pc, #16]	@ (80080e8 <HAL_RCC_OscConfig+0x8ac>)
 80080d8:	f043 0301 	orr.w	r3, r3, #1
 80080dc:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80080de:	2300      	movs	r3, #0
}
 80080e0:	4618      	mov	r0, r3
 80080e2:	3730      	adds	r7, #48	@ 0x30
 80080e4:	46bd      	mov	sp, r7
 80080e6:	bd80      	pop	{r7, pc}
 80080e8:	58024400 	.word	0x58024400
 80080ec:	ffff0007 	.word	0xffff0007

080080f0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b086      	sub	sp, #24
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
 80080f8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d101      	bne.n	8008104 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	e19c      	b.n	800843e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008104:	4b8a      	ldr	r3, [pc, #552]	@ (8008330 <HAL_RCC_ClockConfig+0x240>)
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f003 030f 	and.w	r3, r3, #15
 800810c:	683a      	ldr	r2, [r7, #0]
 800810e:	429a      	cmp	r2, r3
 8008110:	d910      	bls.n	8008134 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008112:	4b87      	ldr	r3, [pc, #540]	@ (8008330 <HAL_RCC_ClockConfig+0x240>)
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f023 020f 	bic.w	r2, r3, #15
 800811a:	4985      	ldr	r1, [pc, #532]	@ (8008330 <HAL_RCC_ClockConfig+0x240>)
 800811c:	683b      	ldr	r3, [r7, #0]
 800811e:	4313      	orrs	r3, r2
 8008120:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008122:	4b83      	ldr	r3, [pc, #524]	@ (8008330 <HAL_RCC_ClockConfig+0x240>)
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f003 030f 	and.w	r3, r3, #15
 800812a:	683a      	ldr	r2, [r7, #0]
 800812c:	429a      	cmp	r2, r3
 800812e:	d001      	beq.n	8008134 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008130:	2301      	movs	r3, #1
 8008132:	e184      	b.n	800843e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	f003 0304 	and.w	r3, r3, #4
 800813c:	2b00      	cmp	r3, #0
 800813e:	d010      	beq.n	8008162 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	691a      	ldr	r2, [r3, #16]
 8008144:	4b7b      	ldr	r3, [pc, #492]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 8008146:	699b      	ldr	r3, [r3, #24]
 8008148:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800814c:	429a      	cmp	r2, r3
 800814e:	d908      	bls.n	8008162 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008150:	4b78      	ldr	r3, [pc, #480]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 8008152:	699b      	ldr	r3, [r3, #24]
 8008154:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	691b      	ldr	r3, [r3, #16]
 800815c:	4975      	ldr	r1, [pc, #468]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 800815e:	4313      	orrs	r3, r2
 8008160:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f003 0308 	and.w	r3, r3, #8
 800816a:	2b00      	cmp	r3, #0
 800816c:	d010      	beq.n	8008190 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	695a      	ldr	r2, [r3, #20]
 8008172:	4b70      	ldr	r3, [pc, #448]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 8008174:	69db      	ldr	r3, [r3, #28]
 8008176:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800817a:	429a      	cmp	r2, r3
 800817c:	d908      	bls.n	8008190 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800817e:	4b6d      	ldr	r3, [pc, #436]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 8008180:	69db      	ldr	r3, [r3, #28]
 8008182:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	695b      	ldr	r3, [r3, #20]
 800818a:	496a      	ldr	r1, [pc, #424]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 800818c:	4313      	orrs	r3, r2
 800818e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f003 0310 	and.w	r3, r3, #16
 8008198:	2b00      	cmp	r3, #0
 800819a:	d010      	beq.n	80081be <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	699a      	ldr	r2, [r3, #24]
 80081a0:	4b64      	ldr	r3, [pc, #400]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 80081a2:	69db      	ldr	r3, [r3, #28]
 80081a4:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80081a8:	429a      	cmp	r2, r3
 80081aa:	d908      	bls.n	80081be <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80081ac:	4b61      	ldr	r3, [pc, #388]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 80081ae:	69db      	ldr	r3, [r3, #28]
 80081b0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	699b      	ldr	r3, [r3, #24]
 80081b8:	495e      	ldr	r1, [pc, #376]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 80081ba:	4313      	orrs	r3, r2
 80081bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f003 0320 	and.w	r3, r3, #32
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d010      	beq.n	80081ec <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	69da      	ldr	r2, [r3, #28]
 80081ce:	4b59      	ldr	r3, [pc, #356]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 80081d0:	6a1b      	ldr	r3, [r3, #32]
 80081d2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80081d6:	429a      	cmp	r2, r3
 80081d8:	d908      	bls.n	80081ec <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80081da:	4b56      	ldr	r3, [pc, #344]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 80081dc:	6a1b      	ldr	r3, [r3, #32]
 80081de:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	69db      	ldr	r3, [r3, #28]
 80081e6:	4953      	ldr	r1, [pc, #332]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 80081e8:	4313      	orrs	r3, r2
 80081ea:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 0302 	and.w	r3, r3, #2
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d010      	beq.n	800821a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	68da      	ldr	r2, [r3, #12]
 80081fc:	4b4d      	ldr	r3, [pc, #308]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 80081fe:	699b      	ldr	r3, [r3, #24]
 8008200:	f003 030f 	and.w	r3, r3, #15
 8008204:	429a      	cmp	r2, r3
 8008206:	d908      	bls.n	800821a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008208:	4b4a      	ldr	r3, [pc, #296]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 800820a:	699b      	ldr	r3, [r3, #24]
 800820c:	f023 020f 	bic.w	r2, r3, #15
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	68db      	ldr	r3, [r3, #12]
 8008214:	4947      	ldr	r1, [pc, #284]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 8008216:	4313      	orrs	r3, r2
 8008218:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 0301 	and.w	r3, r3, #1
 8008222:	2b00      	cmp	r3, #0
 8008224:	d055      	beq.n	80082d2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8008226:	4b43      	ldr	r3, [pc, #268]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 8008228:	699b      	ldr	r3, [r3, #24]
 800822a:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	689b      	ldr	r3, [r3, #8]
 8008232:	4940      	ldr	r1, [pc, #256]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 8008234:	4313      	orrs	r3, r2
 8008236:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	2b02      	cmp	r3, #2
 800823e:	d107      	bne.n	8008250 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8008240:	4b3c      	ldr	r3, [pc, #240]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008248:	2b00      	cmp	r3, #0
 800824a:	d121      	bne.n	8008290 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800824c:	2301      	movs	r3, #1
 800824e:	e0f6      	b.n	800843e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	2b03      	cmp	r3, #3
 8008256:	d107      	bne.n	8008268 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008258:	4b36      	ldr	r3, [pc, #216]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008260:	2b00      	cmp	r3, #0
 8008262:	d115      	bne.n	8008290 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8008264:	2301      	movs	r3, #1
 8008266:	e0ea      	b.n	800843e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	2b01      	cmp	r3, #1
 800826e:	d107      	bne.n	8008280 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008270:	4b30      	ldr	r3, [pc, #192]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008278:	2b00      	cmp	r3, #0
 800827a:	d109      	bne.n	8008290 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800827c:	2301      	movs	r3, #1
 800827e:	e0de      	b.n	800843e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008280:	4b2c      	ldr	r3, [pc, #176]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f003 0304 	and.w	r3, r3, #4
 8008288:	2b00      	cmp	r3, #0
 800828a:	d101      	bne.n	8008290 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800828c:	2301      	movs	r3, #1
 800828e:	e0d6      	b.n	800843e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008290:	4b28      	ldr	r3, [pc, #160]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	f023 0207 	bic.w	r2, r3, #7
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	685b      	ldr	r3, [r3, #4]
 800829c:	4925      	ldr	r1, [pc, #148]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 800829e:	4313      	orrs	r3, r2
 80082a0:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80082a2:	f7f9 fedb 	bl	800205c <HAL_GetTick>
 80082a6:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082a8:	e00a      	b.n	80082c0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80082aa:	f7f9 fed7 	bl	800205c <HAL_GetTick>
 80082ae:	4602      	mov	r2, r0
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	1ad3      	subs	r3, r2, r3
 80082b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80082b8:	4293      	cmp	r3, r2
 80082ba:	d901      	bls.n	80082c0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80082bc:	2303      	movs	r3, #3
 80082be:	e0be      	b.n	800843e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80082c0:	4b1c      	ldr	r3, [pc, #112]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	00db      	lsls	r3, r3, #3
 80082ce:	429a      	cmp	r2, r3
 80082d0:	d1eb      	bne.n	80082aa <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f003 0302 	and.w	r3, r3, #2
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d010      	beq.n	8008300 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68da      	ldr	r2, [r3, #12]
 80082e2:	4b14      	ldr	r3, [pc, #80]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 80082e4:	699b      	ldr	r3, [r3, #24]
 80082e6:	f003 030f 	and.w	r3, r3, #15
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d208      	bcs.n	8008300 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80082ee:	4b11      	ldr	r3, [pc, #68]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 80082f0:	699b      	ldr	r3, [r3, #24]
 80082f2:	f023 020f 	bic.w	r2, r3, #15
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	68db      	ldr	r3, [r3, #12]
 80082fa:	490e      	ldr	r1, [pc, #56]	@ (8008334 <HAL_RCC_ClockConfig+0x244>)
 80082fc:	4313      	orrs	r3, r2
 80082fe:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008300:	4b0b      	ldr	r3, [pc, #44]	@ (8008330 <HAL_RCC_ClockConfig+0x240>)
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f003 030f 	and.w	r3, r3, #15
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	429a      	cmp	r2, r3
 800830c:	d214      	bcs.n	8008338 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800830e:	4b08      	ldr	r3, [pc, #32]	@ (8008330 <HAL_RCC_ClockConfig+0x240>)
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f023 020f 	bic.w	r2, r3, #15
 8008316:	4906      	ldr	r1, [pc, #24]	@ (8008330 <HAL_RCC_ClockConfig+0x240>)
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	4313      	orrs	r3, r2
 800831c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800831e:	4b04      	ldr	r3, [pc, #16]	@ (8008330 <HAL_RCC_ClockConfig+0x240>)
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f003 030f 	and.w	r3, r3, #15
 8008326:	683a      	ldr	r2, [r7, #0]
 8008328:	429a      	cmp	r2, r3
 800832a:	d005      	beq.n	8008338 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800832c:	2301      	movs	r3, #1
 800832e:	e086      	b.n	800843e <HAL_RCC_ClockConfig+0x34e>
 8008330:	52002000 	.word	0x52002000
 8008334:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f003 0304 	and.w	r3, r3, #4
 8008340:	2b00      	cmp	r3, #0
 8008342:	d010      	beq.n	8008366 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	691a      	ldr	r2, [r3, #16]
 8008348:	4b3f      	ldr	r3, [pc, #252]	@ (8008448 <HAL_RCC_ClockConfig+0x358>)
 800834a:	699b      	ldr	r3, [r3, #24]
 800834c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8008350:	429a      	cmp	r2, r3
 8008352:	d208      	bcs.n	8008366 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8008354:	4b3c      	ldr	r3, [pc, #240]	@ (8008448 <HAL_RCC_ClockConfig+0x358>)
 8008356:	699b      	ldr	r3, [r3, #24]
 8008358:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	691b      	ldr	r3, [r3, #16]
 8008360:	4939      	ldr	r1, [pc, #228]	@ (8008448 <HAL_RCC_ClockConfig+0x358>)
 8008362:	4313      	orrs	r3, r2
 8008364:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f003 0308 	and.w	r3, r3, #8
 800836e:	2b00      	cmp	r3, #0
 8008370:	d010      	beq.n	8008394 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	695a      	ldr	r2, [r3, #20]
 8008376:	4b34      	ldr	r3, [pc, #208]	@ (8008448 <HAL_RCC_ClockConfig+0x358>)
 8008378:	69db      	ldr	r3, [r3, #28]
 800837a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800837e:	429a      	cmp	r2, r3
 8008380:	d208      	bcs.n	8008394 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8008382:	4b31      	ldr	r3, [pc, #196]	@ (8008448 <HAL_RCC_ClockConfig+0x358>)
 8008384:	69db      	ldr	r3, [r3, #28]
 8008386:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	695b      	ldr	r3, [r3, #20]
 800838e:	492e      	ldr	r1, [pc, #184]	@ (8008448 <HAL_RCC_ClockConfig+0x358>)
 8008390:	4313      	orrs	r3, r2
 8008392:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f003 0310 	and.w	r3, r3, #16
 800839c:	2b00      	cmp	r3, #0
 800839e:	d010      	beq.n	80083c2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	699a      	ldr	r2, [r3, #24]
 80083a4:	4b28      	ldr	r3, [pc, #160]	@ (8008448 <HAL_RCC_ClockConfig+0x358>)
 80083a6:	69db      	ldr	r3, [r3, #28]
 80083a8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80083ac:	429a      	cmp	r2, r3
 80083ae:	d208      	bcs.n	80083c2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80083b0:	4b25      	ldr	r3, [pc, #148]	@ (8008448 <HAL_RCC_ClockConfig+0x358>)
 80083b2:	69db      	ldr	r3, [r3, #28]
 80083b4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	699b      	ldr	r3, [r3, #24]
 80083bc:	4922      	ldr	r1, [pc, #136]	@ (8008448 <HAL_RCC_ClockConfig+0x358>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	f003 0320 	and.w	r3, r3, #32
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d010      	beq.n	80083f0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	69da      	ldr	r2, [r3, #28]
 80083d2:	4b1d      	ldr	r3, [pc, #116]	@ (8008448 <HAL_RCC_ClockConfig+0x358>)
 80083d4:	6a1b      	ldr	r3, [r3, #32]
 80083d6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80083da:	429a      	cmp	r2, r3
 80083dc:	d208      	bcs.n	80083f0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80083de:	4b1a      	ldr	r3, [pc, #104]	@ (8008448 <HAL_RCC_ClockConfig+0x358>)
 80083e0:	6a1b      	ldr	r3, [r3, #32]
 80083e2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	69db      	ldr	r3, [r3, #28]
 80083ea:	4917      	ldr	r1, [pc, #92]	@ (8008448 <HAL_RCC_ClockConfig+0x358>)
 80083ec:	4313      	orrs	r3, r2
 80083ee:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80083f0:	f000 f834 	bl	800845c <HAL_RCC_GetSysClockFreq>
 80083f4:	4602      	mov	r2, r0
 80083f6:	4b14      	ldr	r3, [pc, #80]	@ (8008448 <HAL_RCC_ClockConfig+0x358>)
 80083f8:	699b      	ldr	r3, [r3, #24]
 80083fa:	0a1b      	lsrs	r3, r3, #8
 80083fc:	f003 030f 	and.w	r3, r3, #15
 8008400:	4912      	ldr	r1, [pc, #72]	@ (800844c <HAL_RCC_ClockConfig+0x35c>)
 8008402:	5ccb      	ldrb	r3, [r1, r3]
 8008404:	f003 031f 	and.w	r3, r3, #31
 8008408:	fa22 f303 	lsr.w	r3, r2, r3
 800840c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800840e:	4b0e      	ldr	r3, [pc, #56]	@ (8008448 <HAL_RCC_ClockConfig+0x358>)
 8008410:	699b      	ldr	r3, [r3, #24]
 8008412:	f003 030f 	and.w	r3, r3, #15
 8008416:	4a0d      	ldr	r2, [pc, #52]	@ (800844c <HAL_RCC_ClockConfig+0x35c>)
 8008418:	5cd3      	ldrb	r3, [r2, r3]
 800841a:	f003 031f 	and.w	r3, r3, #31
 800841e:	693a      	ldr	r2, [r7, #16]
 8008420:	fa22 f303 	lsr.w	r3, r2, r3
 8008424:	4a0a      	ldr	r2, [pc, #40]	@ (8008450 <HAL_RCC_ClockConfig+0x360>)
 8008426:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008428:	4a0a      	ldr	r2, [pc, #40]	@ (8008454 <HAL_RCC_ClockConfig+0x364>)
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800842e:	4b0a      	ldr	r3, [pc, #40]	@ (8008458 <HAL_RCC_ClockConfig+0x368>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4618      	mov	r0, r3
 8008434:	f7fa f930 	bl	8002698 <HAL_InitTick>
 8008438:	4603      	mov	r3, r0
 800843a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800843c:	7bfb      	ldrb	r3, [r7, #15]
}
 800843e:	4618      	mov	r0, r3
 8008440:	3718      	adds	r7, #24
 8008442:	46bd      	mov	sp, r7
 8008444:	bd80      	pop	{r7, pc}
 8008446:	bf00      	nop
 8008448:	58024400 	.word	0x58024400
 800844c:	08011c70 	.word	0x08011c70
 8008450:	24000004 	.word	0x24000004
 8008454:	24000000 	.word	0x24000000
 8008458:	24000028 	.word	0x24000028

0800845c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800845c:	b480      	push	{r7}
 800845e:	b089      	sub	sp, #36	@ 0x24
 8008460:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008462:	4bb3      	ldr	r3, [pc, #716]	@ (8008730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008464:	691b      	ldr	r3, [r3, #16]
 8008466:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800846a:	2b18      	cmp	r3, #24
 800846c:	f200 8155 	bhi.w	800871a <HAL_RCC_GetSysClockFreq+0x2be>
 8008470:	a201      	add	r2, pc, #4	@ (adr r2, 8008478 <HAL_RCC_GetSysClockFreq+0x1c>)
 8008472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008476:	bf00      	nop
 8008478:	080084dd 	.word	0x080084dd
 800847c:	0800871b 	.word	0x0800871b
 8008480:	0800871b 	.word	0x0800871b
 8008484:	0800871b 	.word	0x0800871b
 8008488:	0800871b 	.word	0x0800871b
 800848c:	0800871b 	.word	0x0800871b
 8008490:	0800871b 	.word	0x0800871b
 8008494:	0800871b 	.word	0x0800871b
 8008498:	08008503 	.word	0x08008503
 800849c:	0800871b 	.word	0x0800871b
 80084a0:	0800871b 	.word	0x0800871b
 80084a4:	0800871b 	.word	0x0800871b
 80084a8:	0800871b 	.word	0x0800871b
 80084ac:	0800871b 	.word	0x0800871b
 80084b0:	0800871b 	.word	0x0800871b
 80084b4:	0800871b 	.word	0x0800871b
 80084b8:	08008509 	.word	0x08008509
 80084bc:	0800871b 	.word	0x0800871b
 80084c0:	0800871b 	.word	0x0800871b
 80084c4:	0800871b 	.word	0x0800871b
 80084c8:	0800871b 	.word	0x0800871b
 80084cc:	0800871b 	.word	0x0800871b
 80084d0:	0800871b 	.word	0x0800871b
 80084d4:	0800871b 	.word	0x0800871b
 80084d8:	0800850f 	.word	0x0800850f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80084dc:	4b94      	ldr	r3, [pc, #592]	@ (8008730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f003 0320 	and.w	r3, r3, #32
 80084e4:	2b00      	cmp	r3, #0
 80084e6:	d009      	beq.n	80084fc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80084e8:	4b91      	ldr	r3, [pc, #580]	@ (8008730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	08db      	lsrs	r3, r3, #3
 80084ee:	f003 0303 	and.w	r3, r3, #3
 80084f2:	4a90      	ldr	r2, [pc, #576]	@ (8008734 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80084f4:	fa22 f303 	lsr.w	r3, r2, r3
 80084f8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80084fa:	e111      	b.n	8008720 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80084fc:	4b8d      	ldr	r3, [pc, #564]	@ (8008734 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80084fe:	61bb      	str	r3, [r7, #24]
      break;
 8008500:	e10e      	b.n	8008720 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8008502:	4b8d      	ldr	r3, [pc, #564]	@ (8008738 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8008504:	61bb      	str	r3, [r7, #24]
      break;
 8008506:	e10b      	b.n	8008720 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8008508:	4b8c      	ldr	r3, [pc, #560]	@ (800873c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800850a:	61bb      	str	r3, [r7, #24]
      break;
 800850c:	e108      	b.n	8008720 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800850e:	4b88      	ldr	r3, [pc, #544]	@ (8008730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008510:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008512:	f003 0303 	and.w	r3, r3, #3
 8008516:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8008518:	4b85      	ldr	r3, [pc, #532]	@ (8008730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800851a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800851c:	091b      	lsrs	r3, r3, #4
 800851e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008522:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8008524:	4b82      	ldr	r3, [pc, #520]	@ (8008730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008528:	f003 0301 	and.w	r3, r3, #1
 800852c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800852e:	4b80      	ldr	r3, [pc, #512]	@ (8008730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008532:	08db      	lsrs	r3, r3, #3
 8008534:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008538:	68fa      	ldr	r2, [r7, #12]
 800853a:	fb02 f303 	mul.w	r3, r2, r3
 800853e:	ee07 3a90 	vmov	s15, r3
 8008542:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008546:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800854a:	693b      	ldr	r3, [r7, #16]
 800854c:	2b00      	cmp	r3, #0
 800854e:	f000 80e1 	beq.w	8008714 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8008552:	697b      	ldr	r3, [r7, #20]
 8008554:	2b02      	cmp	r3, #2
 8008556:	f000 8083 	beq.w	8008660 <HAL_RCC_GetSysClockFreq+0x204>
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	2b02      	cmp	r3, #2
 800855e:	f200 80a1 	bhi.w	80086a4 <HAL_RCC_GetSysClockFreq+0x248>
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d003      	beq.n	8008570 <HAL_RCC_GetSysClockFreq+0x114>
 8008568:	697b      	ldr	r3, [r7, #20]
 800856a:	2b01      	cmp	r3, #1
 800856c:	d056      	beq.n	800861c <HAL_RCC_GetSysClockFreq+0x1c0>
 800856e:	e099      	b.n	80086a4 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8008570:	4b6f      	ldr	r3, [pc, #444]	@ (8008730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	f003 0320 	and.w	r3, r3, #32
 8008578:	2b00      	cmp	r3, #0
 800857a:	d02d      	beq.n	80085d8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800857c:	4b6c      	ldr	r3, [pc, #432]	@ (8008730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	08db      	lsrs	r3, r3, #3
 8008582:	f003 0303 	and.w	r3, r3, #3
 8008586:	4a6b      	ldr	r2, [pc, #428]	@ (8008734 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8008588:	fa22 f303 	lsr.w	r3, r2, r3
 800858c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	ee07 3a90 	vmov	s15, r3
 8008594:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008598:	693b      	ldr	r3, [r7, #16]
 800859a:	ee07 3a90 	vmov	s15, r3
 800859e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085a6:	4b62      	ldr	r3, [pc, #392]	@ (8008730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085ae:	ee07 3a90 	vmov	s15, r3
 80085b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085b6:	ed97 6a02 	vldr	s12, [r7, #8]
 80085ba:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8008740 <HAL_RCC_GetSysClockFreq+0x2e4>
 80085be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80085c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80085c6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80085ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80085ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80085d2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80085d6:	e087      	b.n	80086e8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	ee07 3a90 	vmov	s15, r3
 80085de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80085e2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8008744 <HAL_RCC_GetSysClockFreq+0x2e8>
 80085e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80085ea:	4b51      	ldr	r3, [pc, #324]	@ (8008730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80085ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80085f2:	ee07 3a90 	vmov	s15, r3
 80085f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80085fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80085fe:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8008740 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008602:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008606:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800860a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800860e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008612:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008616:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800861a:	e065      	b.n	80086e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800861c:	693b      	ldr	r3, [r7, #16]
 800861e:	ee07 3a90 	vmov	s15, r3
 8008622:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008626:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8008748 <HAL_RCC_GetSysClockFreq+0x2ec>
 800862a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800862e:	4b40      	ldr	r3, [pc, #256]	@ (8008730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008630:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008632:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008636:	ee07 3a90 	vmov	s15, r3
 800863a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800863e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008642:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8008740 <HAL_RCC_GetSysClockFreq+0x2e4>
 8008646:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800864a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800864e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008652:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8008656:	ee67 7a27 	vmul.f32	s15, s14, s15
 800865a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800865e:	e043      	b.n	80086e8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	ee07 3a90 	vmov	s15, r3
 8008666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800866a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800874c <HAL_RCC_GetSysClockFreq+0x2f0>
 800866e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008672:	4b2f      	ldr	r3, [pc, #188]	@ (8008730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8008674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008676:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800867a:	ee07 3a90 	vmov	s15, r3
 800867e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008682:	ed97 6a02 	vldr	s12, [r7, #8]
 8008686:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8008740 <HAL_RCC_GetSysClockFreq+0x2e4>
 800868a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800868e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008692:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8008696:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800869a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800869e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80086a2:	e021      	b.n	80086e8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80086a4:	693b      	ldr	r3, [r7, #16]
 80086a6:	ee07 3a90 	vmov	s15, r3
 80086aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80086ae:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8008748 <HAL_RCC_GetSysClockFreq+0x2ec>
 80086b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80086b6:	4b1e      	ldr	r3, [pc, #120]	@ (8008730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80086be:	ee07 3a90 	vmov	s15, r3
 80086c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80086c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80086ca:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8008740 <HAL_RCC_GetSysClockFreq+0x2e4>
 80086ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80086d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80086d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80086da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80086de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80086e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80086e6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80086e8:	4b11      	ldr	r3, [pc, #68]	@ (8008730 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80086ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80086ec:	0a5b      	lsrs	r3, r3, #9
 80086ee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80086f2:	3301      	adds	r3, #1
 80086f4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	ee07 3a90 	vmov	s15, r3
 80086fc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8008700:	edd7 6a07 	vldr	s13, [r7, #28]
 8008704:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008708:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800870c:	ee17 3a90 	vmov	r3, s15
 8008710:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8008712:	e005      	b.n	8008720 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8008714:	2300      	movs	r3, #0
 8008716:	61bb      	str	r3, [r7, #24]
      break;
 8008718:	e002      	b.n	8008720 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800871a:	4b07      	ldr	r3, [pc, #28]	@ (8008738 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800871c:	61bb      	str	r3, [r7, #24]
      break;
 800871e:	bf00      	nop
  }

  return sysclockfreq;
 8008720:	69bb      	ldr	r3, [r7, #24]
}
 8008722:	4618      	mov	r0, r3
 8008724:	3724      	adds	r7, #36	@ 0x24
 8008726:	46bd      	mov	sp, r7
 8008728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800872c:	4770      	bx	lr
 800872e:	bf00      	nop
 8008730:	58024400 	.word	0x58024400
 8008734:	03d09000 	.word	0x03d09000
 8008738:	003d0900 	.word	0x003d0900
 800873c:	017d7840 	.word	0x017d7840
 8008740:	46000000 	.word	0x46000000
 8008744:	4c742400 	.word	0x4c742400
 8008748:	4a742400 	.word	0x4a742400
 800874c:	4bbebc20 	.word	0x4bbebc20

08008750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8008756:	f7ff fe81 	bl	800845c <HAL_RCC_GetSysClockFreq>
 800875a:	4602      	mov	r2, r0
 800875c:	4b10      	ldr	r3, [pc, #64]	@ (80087a0 <HAL_RCC_GetHCLKFreq+0x50>)
 800875e:	699b      	ldr	r3, [r3, #24]
 8008760:	0a1b      	lsrs	r3, r3, #8
 8008762:	f003 030f 	and.w	r3, r3, #15
 8008766:	490f      	ldr	r1, [pc, #60]	@ (80087a4 <HAL_RCC_GetHCLKFreq+0x54>)
 8008768:	5ccb      	ldrb	r3, [r1, r3]
 800876a:	f003 031f 	and.w	r3, r3, #31
 800876e:	fa22 f303 	lsr.w	r3, r2, r3
 8008772:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008774:	4b0a      	ldr	r3, [pc, #40]	@ (80087a0 <HAL_RCC_GetHCLKFreq+0x50>)
 8008776:	699b      	ldr	r3, [r3, #24]
 8008778:	f003 030f 	and.w	r3, r3, #15
 800877c:	4a09      	ldr	r2, [pc, #36]	@ (80087a4 <HAL_RCC_GetHCLKFreq+0x54>)
 800877e:	5cd3      	ldrb	r3, [r2, r3]
 8008780:	f003 031f 	and.w	r3, r3, #31
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	fa22 f303 	lsr.w	r3, r2, r3
 800878a:	4a07      	ldr	r2, [pc, #28]	@ (80087a8 <HAL_RCC_GetHCLKFreq+0x58>)
 800878c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800878e:	4a07      	ldr	r2, [pc, #28]	@ (80087ac <HAL_RCC_GetHCLKFreq+0x5c>)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8008794:	4b04      	ldr	r3, [pc, #16]	@ (80087a8 <HAL_RCC_GetHCLKFreq+0x58>)
 8008796:	681b      	ldr	r3, [r3, #0]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3708      	adds	r7, #8
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}
 80087a0:	58024400 	.word	0x58024400
 80087a4:	08011c70 	.word	0x08011c70
 80087a8:	24000004 	.word	0x24000004
 80087ac:	24000000 	.word	0x24000000

080087b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80087b0:	b580      	push	{r7, lr}
 80087b2:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80087b4:	f7ff ffcc 	bl	8008750 <HAL_RCC_GetHCLKFreq>
 80087b8:	4602      	mov	r2, r0
 80087ba:	4b06      	ldr	r3, [pc, #24]	@ (80087d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80087bc:	69db      	ldr	r3, [r3, #28]
 80087be:	091b      	lsrs	r3, r3, #4
 80087c0:	f003 0307 	and.w	r3, r3, #7
 80087c4:	4904      	ldr	r1, [pc, #16]	@ (80087d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80087c6:	5ccb      	ldrb	r3, [r1, r3]
 80087c8:	f003 031f 	and.w	r3, r3, #31
 80087cc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80087d0:	4618      	mov	r0, r3
 80087d2:	bd80      	pop	{r7, pc}
 80087d4:	58024400 	.word	0x58024400
 80087d8:	08011c70 	.word	0x08011c70

080087dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80087dc:	b580      	push	{r7, lr}
 80087de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80087e0:	f7ff ffb6 	bl	8008750 <HAL_RCC_GetHCLKFreq>
 80087e4:	4602      	mov	r2, r0
 80087e6:	4b06      	ldr	r3, [pc, #24]	@ (8008800 <HAL_RCC_GetPCLK2Freq+0x24>)
 80087e8:	69db      	ldr	r3, [r3, #28]
 80087ea:	0a1b      	lsrs	r3, r3, #8
 80087ec:	f003 0307 	and.w	r3, r3, #7
 80087f0:	4904      	ldr	r1, [pc, #16]	@ (8008804 <HAL_RCC_GetPCLK2Freq+0x28>)
 80087f2:	5ccb      	ldrb	r3, [r1, r3]
 80087f4:	f003 031f 	and.w	r3, r3, #31
 80087f8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80087fc:	4618      	mov	r0, r3
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	58024400 	.word	0x58024400
 8008804:	08011c70 	.word	0x08011c70

08008808 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008808:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800880c:	b0ca      	sub	sp, #296	@ 0x128
 800880e:	af00      	add	r7, sp, #0
 8008810:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008814:	2300      	movs	r3, #0
 8008816:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800881a:	2300      	movs	r3, #0
 800881c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008820:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008828:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800882c:	2500      	movs	r5, #0
 800882e:	ea54 0305 	orrs.w	r3, r4, r5
 8008832:	d049      	beq.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8008834:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008838:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800883a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800883e:	d02f      	beq.n	80088a0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8008840:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8008844:	d828      	bhi.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008846:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800884a:	d01a      	beq.n	8008882 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800884c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008850:	d822      	bhi.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8008852:	2b00      	cmp	r3, #0
 8008854:	d003      	beq.n	800885e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8008856:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800885a:	d007      	beq.n	800886c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800885c:	e01c      	b.n	8008898 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800885e:	4bb8      	ldr	r3, [pc, #736]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008862:	4ab7      	ldr	r2, [pc, #732]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008864:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008868:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800886a:	e01a      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800886c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008870:	3308      	adds	r3, #8
 8008872:	2102      	movs	r1, #2
 8008874:	4618      	mov	r0, r3
 8008876:	f002 fb61 	bl	800af3c <RCCEx_PLL2_Config>
 800887a:	4603      	mov	r3, r0
 800887c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008880:	e00f      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8008882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008886:	3328      	adds	r3, #40	@ 0x28
 8008888:	2102      	movs	r1, #2
 800888a:	4618      	mov	r0, r3
 800888c:	f002 fc08 	bl	800b0a0 <RCCEx_PLL3_Config>
 8008890:	4603      	mov	r3, r0
 8008892:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8008896:	e004      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008898:	2301      	movs	r3, #1
 800889a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800889e:	e000      	b.n	80088a2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80088a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80088a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d10a      	bne.n	80088c0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80088aa:	4ba5      	ldr	r3, [pc, #660]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80088ae:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80088b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80088b8:	4aa1      	ldr	r2, [pc, #644]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80088ba:	430b      	orrs	r3, r1
 80088bc:	6513      	str	r3, [r2, #80]	@ 0x50
 80088be:	e003      	b.n	80088c8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80088c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80088c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80088c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80088d4:	f04f 0900 	mov.w	r9, #0
 80088d8:	ea58 0309 	orrs.w	r3, r8, r9
 80088dc:	d047      	beq.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80088de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80088e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088e4:	2b04      	cmp	r3, #4
 80088e6:	d82a      	bhi.n	800893e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80088e8:	a201      	add	r2, pc, #4	@ (adr r2, 80088f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80088ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088ee:	bf00      	nop
 80088f0:	08008905 	.word	0x08008905
 80088f4:	08008913 	.word	0x08008913
 80088f8:	08008929 	.word	0x08008929
 80088fc:	08008947 	.word	0x08008947
 8008900:	08008947 	.word	0x08008947
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008904:	4b8e      	ldr	r3, [pc, #568]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008908:	4a8d      	ldr	r2, [pc, #564]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800890a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800890e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008910:	e01a      	b.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008916:	3308      	adds	r3, #8
 8008918:	2100      	movs	r1, #0
 800891a:	4618      	mov	r0, r3
 800891c:	f002 fb0e 	bl	800af3c <RCCEx_PLL2_Config>
 8008920:	4603      	mov	r3, r0
 8008922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008926:	e00f      	b.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008928:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800892c:	3328      	adds	r3, #40	@ 0x28
 800892e:	2100      	movs	r1, #0
 8008930:	4618      	mov	r0, r3
 8008932:	f002 fbb5 	bl	800b0a0 <RCCEx_PLL3_Config>
 8008936:	4603      	mov	r3, r0
 8008938:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800893c:	e004      	b.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800893e:	2301      	movs	r3, #1
 8008940:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008944:	e000      	b.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8008946:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008948:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800894c:	2b00      	cmp	r3, #0
 800894e:	d10a      	bne.n	8008966 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008950:	4b7b      	ldr	r3, [pc, #492]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008952:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008954:	f023 0107 	bic.w	r1, r3, #7
 8008958:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800895c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800895e:	4a78      	ldr	r2, [pc, #480]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008960:	430b      	orrs	r3, r1
 8008962:	6513      	str	r3, [r2, #80]	@ 0x50
 8008964:	e003      	b.n	800896e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800896a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800896e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008976:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800897a:	f04f 0b00 	mov.w	fp, #0
 800897e:	ea5a 030b 	orrs.w	r3, sl, fp
 8008982:	d04c      	beq.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8008984:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008988:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800898a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800898e:	d030      	beq.n	80089f2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8008990:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008994:	d829      	bhi.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8008996:	2bc0      	cmp	r3, #192	@ 0xc0
 8008998:	d02d      	beq.n	80089f6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800899a:	2bc0      	cmp	r3, #192	@ 0xc0
 800899c:	d825      	bhi.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800899e:	2b80      	cmp	r3, #128	@ 0x80
 80089a0:	d018      	beq.n	80089d4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80089a2:	2b80      	cmp	r3, #128	@ 0x80
 80089a4:	d821      	bhi.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d002      	beq.n	80089b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80089aa:	2b40      	cmp	r3, #64	@ 0x40
 80089ac:	d007      	beq.n	80089be <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80089ae:	e01c      	b.n	80089ea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80089b0:	4b63      	ldr	r3, [pc, #396]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b4:	4a62      	ldr	r2, [pc, #392]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80089b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80089ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80089bc:	e01c      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80089be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089c2:	3308      	adds	r3, #8
 80089c4:	2100      	movs	r1, #0
 80089c6:	4618      	mov	r0, r3
 80089c8:	f002 fab8 	bl	800af3c <RCCEx_PLL2_Config>
 80089cc:	4603      	mov	r3, r0
 80089ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80089d2:	e011      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80089d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80089d8:	3328      	adds	r3, #40	@ 0x28
 80089da:	2100      	movs	r1, #0
 80089dc:	4618      	mov	r0, r3
 80089de:	f002 fb5f 	bl	800b0a0 <RCCEx_PLL3_Config>
 80089e2:	4603      	mov	r3, r0
 80089e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80089e8:	e006      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80089ea:	2301      	movs	r3, #1
 80089ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80089f0:	e002      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80089f2:	bf00      	nop
 80089f4:	e000      	b.n	80089f8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80089f6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80089f8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d10a      	bne.n	8008a16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8008a00:	4b4f      	ldr	r3, [pc, #316]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008a04:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 8008a08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a0c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008a0e:	4a4c      	ldr	r2, [pc, #304]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a10:	430b      	orrs	r3, r1
 8008a12:	6513      	str	r3, [r2, #80]	@ 0x50
 8008a14:	e003      	b.n	8008a1e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008a16:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008a1a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8008a1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a26:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 8008a2a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 8008a2e:	2300      	movs	r3, #0
 8008a30:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8008a34:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8008a38:	460b      	mov	r3, r1
 8008a3a:	4313      	orrs	r3, r2
 8008a3c:	d053      	beq.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8008a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008a46:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008a4a:	d035      	beq.n	8008ab8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8008a4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8008a50:	d82e      	bhi.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008a52:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008a56:	d031      	beq.n	8008abc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8008a58:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8008a5c:	d828      	bhi.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008a5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a62:	d01a      	beq.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8008a64:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008a68:	d822      	bhi.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d003      	beq.n	8008a76 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8008a6e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008a72:	d007      	beq.n	8008a84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8008a74:	e01c      	b.n	8008ab0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008a76:	4b32      	ldr	r3, [pc, #200]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7a:	4a31      	ldr	r2, [pc, #196]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008a7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008a80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008a82:	e01c      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a88:	3308      	adds	r3, #8
 8008a8a:	2100      	movs	r1, #0
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f002 fa55 	bl	800af3c <RCCEx_PLL2_Config>
 8008a92:	4603      	mov	r3, r0
 8008a94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008a98:	e011      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008a9e:	3328      	adds	r3, #40	@ 0x28
 8008aa0:	2100      	movs	r1, #0
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f002 fafc 	bl	800b0a0 <RCCEx_PLL3_Config>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008aae:	e006      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008ab0:	2301      	movs	r3, #1
 8008ab2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ab6:	e002      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008ab8:	bf00      	nop
 8008aba:	e000      	b.n	8008abe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8008abc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008abe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d10b      	bne.n	8008ade <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8008ac6:	4b1e      	ldr	r3, [pc, #120]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008aca:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 8008ace:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ad2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 8008ad6:	4a1a      	ldr	r2, [pc, #104]	@ (8008b40 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8008ad8:	430b      	orrs	r3, r1
 8008ada:	6593      	str	r3, [r2, #88]	@ 0x58
 8008adc:	e003      	b.n	8008ae6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ade:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ae2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8008ae6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aee:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 8008af2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8008af6:	2300      	movs	r3, #0
 8008af8:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8008afc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 8008b00:	460b      	mov	r3, r1
 8008b02:	4313      	orrs	r3, r2
 8008b04:	d056      	beq.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8008b06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b0a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008b0e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b12:	d038      	beq.n	8008b86 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8008b14:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008b18:	d831      	bhi.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008b1a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b1e:	d034      	beq.n	8008b8a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8008b20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8008b24:	d82b      	bhi.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008b26:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b2a:	d01d      	beq.n	8008b68 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8008b2c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8008b30:	d825      	bhi.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d006      	beq.n	8008b44 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8008b36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008b3a:	d00a      	beq.n	8008b52 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8008b3c:	e01f      	b.n	8008b7e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8008b3e:	bf00      	nop
 8008b40:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008b44:	4ba2      	ldr	r3, [pc, #648]	@ (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b48:	4aa1      	ldr	r2, [pc, #644]	@ (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b4a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008b4e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b50:	e01c      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008b52:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b56:	3308      	adds	r3, #8
 8008b58:	2100      	movs	r1, #0
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f002 f9ee 	bl	800af3c <RCCEx_PLL2_Config>
 8008b60:	4603      	mov	r3, r0
 8008b62:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8008b66:	e011      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008b68:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008b6c:	3328      	adds	r3, #40	@ 0x28
 8008b6e:	2100      	movs	r1, #0
 8008b70:	4618      	mov	r0, r3
 8008b72:	f002 fa95 	bl	800b0a0 <RCCEx_PLL3_Config>
 8008b76:	4603      	mov	r3, r0
 8008b78:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8008b7c:	e006      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008b84:	e002      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008b86:	bf00      	nop
 8008b88:	e000      	b.n	8008b8c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8008b8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008b8c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10b      	bne.n	8008bac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8008b94:	4b8e      	ldr	r3, [pc, #568]	@ (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008b96:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b98:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 8008b9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ba0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8008ba4:	4a8a      	ldr	r2, [pc, #552]	@ (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ba6:	430b      	orrs	r3, r1
 8008ba8:	6593      	str	r3, [r2, #88]	@ 0x58
 8008baa:	e003      	b.n	8008bb4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008bac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008bb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8008bb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbc:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8008bc0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8008bca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8008bce:	460b      	mov	r3, r1
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	d03a      	beq.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8008bd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008bd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008bda:	2b30      	cmp	r3, #48	@ 0x30
 8008bdc:	d01f      	beq.n	8008c1e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8008bde:	2b30      	cmp	r3, #48	@ 0x30
 8008be0:	d819      	bhi.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008be2:	2b20      	cmp	r3, #32
 8008be4:	d00c      	beq.n	8008c00 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8008be6:	2b20      	cmp	r3, #32
 8008be8:	d815      	bhi.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d019      	beq.n	8008c22 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8008bee:	2b10      	cmp	r3, #16
 8008bf0:	d111      	bne.n	8008c16 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008bf2:	4b77      	ldr	r3, [pc, #476]	@ (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008bf4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008bf6:	4a76      	ldr	r2, [pc, #472]	@ (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008bf8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008bfc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008bfe:	e011      	b.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008c00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c04:	3308      	adds	r3, #8
 8008c06:	2102      	movs	r1, #2
 8008c08:	4618      	mov	r0, r3
 8008c0a:	f002 f997 	bl	800af3c <RCCEx_PLL2_Config>
 8008c0e:	4603      	mov	r3, r0
 8008c10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8008c14:	e006      	b.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008c16:	2301      	movs	r3, #1
 8008c18:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008c1c:	e002      	b.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008c1e:	bf00      	nop
 8008c20:	e000      	b.n	8008c24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8008c22:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008c24:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d10a      	bne.n	8008c42 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8008c2c:	4b68      	ldr	r3, [pc, #416]	@ (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c30:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8008c34:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008c3a:	4a65      	ldr	r2, [pc, #404]	@ (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008c3c:	430b      	orrs	r3, r1
 8008c3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008c40:	e003      	b.n	8008c4a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008c42:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008c46:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8008c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c52:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8008c56:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8008c5a:	2300      	movs	r3, #0
 8008c5c:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8008c60:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8008c64:	460b      	mov	r3, r1
 8008c66:	4313      	orrs	r3, r2
 8008c68:	d051      	beq.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8008c6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008c6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c70:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c74:	d035      	beq.n	8008ce2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8008c76:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8008c7a:	d82e      	bhi.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008c7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008c80:	d031      	beq.n	8008ce6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8008c82:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8008c86:	d828      	bhi.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008c88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c8c:	d01a      	beq.n	8008cc4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8008c8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8008c92:	d822      	bhi.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d003      	beq.n	8008ca0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8008c98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c9c:	d007      	beq.n	8008cae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8008c9e:	e01c      	b.n	8008cda <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ca0:	4b4b      	ldr	r3, [pc, #300]	@ (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ca2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ca4:	4a4a      	ldr	r2, [pc, #296]	@ (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008ca6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008caa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008cac:	e01c      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8008cae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cb2:	3308      	adds	r3, #8
 8008cb4:	2100      	movs	r1, #0
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f002 f940 	bl	800af3c <RCCEx_PLL2_Config>
 8008cbc:	4603      	mov	r3, r0
 8008cbe:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008cc2:	e011      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8008cc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cc8:	3328      	adds	r3, #40	@ 0x28
 8008cca:	2100      	movs	r1, #0
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f002 f9e7 	bl	800b0a0 <RCCEx_PLL3_Config>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8008cd8:	e006      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008cda:	2301      	movs	r3, #1
 8008cdc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008ce0:	e002      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008ce2:	bf00      	nop
 8008ce4:	e000      	b.n	8008ce8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8008ce6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008ce8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d10a      	bne.n	8008d06 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8008cf0:	4b37      	ldr	r3, [pc, #220]	@ (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008cf2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008cf4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8008cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008cfe:	4a34      	ldr	r2, [pc, #208]	@ (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008d00:	430b      	orrs	r3, r1
 8008d02:	6513      	str	r3, [r2, #80]	@ 0x50
 8008d04:	e003      	b.n	8008d0e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008d06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008d0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8008d0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d16:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8008d1a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008d1e:	2300      	movs	r3, #0
 8008d20:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8008d24:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4313      	orrs	r3, r2
 8008d2c:	d056      	beq.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8008d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008d34:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008d38:	d033      	beq.n	8008da2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8008d3a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8008d3e:	d82c      	bhi.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008d40:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d44:	d02f      	beq.n	8008da6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8008d46:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008d4a:	d826      	bhi.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008d4c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008d50:	d02b      	beq.n	8008daa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8008d52:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8008d56:	d820      	bhi.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008d58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d5c:	d012      	beq.n	8008d84 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8008d5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008d62:	d81a      	bhi.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d022      	beq.n	8008dae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8008d68:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008d6c:	d115      	bne.n	8008d9a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008d6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d72:	3308      	adds	r3, #8
 8008d74:	2101      	movs	r1, #1
 8008d76:	4618      	mov	r0, r3
 8008d78:	f002 f8e0 	bl	800af3c <RCCEx_PLL2_Config>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008d82:	e015      	b.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008d84:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008d88:	3328      	adds	r3, #40	@ 0x28
 8008d8a:	2101      	movs	r1, #1
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f002 f987 	bl	800b0a0 <RCCEx_PLL3_Config>
 8008d92:	4603      	mov	r3, r0
 8008d94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8008d98:	e00a      	b.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008da0:	e006      	b.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008da2:	bf00      	nop
 8008da4:	e004      	b.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008da6:	bf00      	nop
 8008da8:	e002      	b.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008daa:	bf00      	nop
 8008dac:	e000      	b.n	8008db0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8008dae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008db0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d10d      	bne.n	8008dd4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8008db8:	4b05      	ldr	r3, [pc, #20]	@ (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008dba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008dbc:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8008dc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008dc4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008dc6:	4a02      	ldr	r2, [pc, #8]	@ (8008dd0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8008dc8:	430b      	orrs	r3, r1
 8008dca:	6513      	str	r3, [r2, #80]	@ 0x50
 8008dcc:	e006      	b.n	8008ddc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8008dce:	bf00      	nop
 8008dd0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008dd4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008dd8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8008ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8008de8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008dec:	2300      	movs	r3, #0
 8008dee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008df2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8008df6:	460b      	mov	r3, r1
 8008df8:	4313      	orrs	r3, r2
 8008dfa:	d055      	beq.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8008dfc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e00:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008e04:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e08:	d033      	beq.n	8008e72 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8008e0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008e0e:	d82c      	bhi.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008e10:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e14:	d02f      	beq.n	8008e76 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8008e16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008e1a:	d826      	bhi.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008e1c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e20:	d02b      	beq.n	8008e7a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8008e22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8008e26:	d820      	bhi.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008e28:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e2c:	d012      	beq.n	8008e54 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8008e2e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008e32:	d81a      	bhi.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8008e34:	2b00      	cmp	r3, #0
 8008e36:	d022      	beq.n	8008e7e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8008e38:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008e3c:	d115      	bne.n	8008e6a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e42:	3308      	adds	r3, #8
 8008e44:	2101      	movs	r1, #1
 8008e46:	4618      	mov	r0, r3
 8008e48:	f002 f878 	bl	800af3c <RCCEx_PLL2_Config>
 8008e4c:	4603      	mov	r3, r0
 8008e4e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008e52:	e015      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8008e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e58:	3328      	adds	r3, #40	@ 0x28
 8008e5a:	2101      	movs	r1, #1
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f002 f91f 	bl	800b0a0 <RCCEx_PLL3_Config>
 8008e62:	4603      	mov	r3, r0
 8008e64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8008e68:	e00a      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8008e6a:	2301      	movs	r3, #1
 8008e6c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008e70:	e006      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008e72:	bf00      	nop
 8008e74:	e004      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008e76:	bf00      	nop
 8008e78:	e002      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008e7a:	bf00      	nop
 8008e7c:	e000      	b.n	8008e80 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8008e7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008e80:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008e84:	2b00      	cmp	r3, #0
 8008e86:	d10b      	bne.n	8008ea0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8008e88:	4ba3      	ldr	r3, [pc, #652]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e8c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8008e90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008e94:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008e98:	4a9f      	ldr	r2, [pc, #636]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008e9a:	430b      	orrs	r3, r1
 8008e9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8008e9e:	e003      	b.n	8008ea8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008ea0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008ea4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8008ea8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008eac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eb0:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8008eb4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008eb8:	2300      	movs	r3, #0
 8008eba:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8008ebe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008ec2:	460b      	mov	r3, r1
 8008ec4:	4313      	orrs	r3, r2
 8008ec6:	d037      	beq.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8008ec8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ecc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008ece:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ed2:	d00e      	beq.n	8008ef2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8008ed4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008ed8:	d816      	bhi.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d018      	beq.n	8008f10 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8008ede:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008ee2:	d111      	bne.n	8008f08 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008ee4:	4b8c      	ldr	r3, [pc, #560]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008ee8:	4a8b      	ldr	r2, [pc, #556]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008eea:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008eee:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008ef0:	e00f      	b.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8008ef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008ef6:	3308      	adds	r3, #8
 8008ef8:	2101      	movs	r1, #1
 8008efa:	4618      	mov	r0, r3
 8008efc:	f002 f81e 	bl	800af3c <RCCEx_PLL2_Config>
 8008f00:	4603      	mov	r3, r0
 8008f02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8008f06:	e004      	b.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008f08:	2301      	movs	r3, #1
 8008f0a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008f0e:	e000      	b.n	8008f12 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8008f10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008f12:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d10a      	bne.n	8008f30 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8008f1a:	4b7f      	ldr	r3, [pc, #508]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8008f1e:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8008f22:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008f28:	4a7b      	ldr	r2, [pc, #492]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f2a:	430b      	orrs	r3, r1
 8008f2c:	6513      	str	r3, [r2, #80]	@ 0x50
 8008f2e:	e003      	b.n	8008f38 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008f30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008f34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8008f38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f40:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8008f44:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008f48:	2300      	movs	r3, #0
 8008f4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8008f4e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8008f52:	460b      	mov	r3, r1
 8008f54:	4313      	orrs	r3, r2
 8008f56:	d039      	beq.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8008f58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008f5e:	2b03      	cmp	r3, #3
 8008f60:	d81c      	bhi.n	8008f9c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8008f62:	a201      	add	r2, pc, #4	@ (adr r2, 8008f68 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8008f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008f68:	08008fa5 	.word	0x08008fa5
 8008f6c:	08008f79 	.word	0x08008f79
 8008f70:	08008f87 	.word	0x08008f87
 8008f74:	08008fa5 	.word	0x08008fa5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f78:	4b67      	ldr	r3, [pc, #412]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f7c:	4a66      	ldr	r2, [pc, #408]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008f7e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8008f82:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008f84:	e00f      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8008f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008f8a:	3308      	adds	r3, #8
 8008f8c:	2102      	movs	r1, #2
 8008f8e:	4618      	mov	r0, r3
 8008f90:	f001 ffd4 	bl	800af3c <RCCEx_PLL2_Config>
 8008f94:	4603      	mov	r3, r0
 8008f96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8008f9a:	e004      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8008f9c:	2301      	movs	r3, #1
 8008f9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8008fa2:	e000      	b.n	8008fa6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8008fa4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8008fa6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d10a      	bne.n	8008fc4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8008fae:	4b5a      	ldr	r3, [pc, #360]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fb0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008fb2:	f023 0103 	bic.w	r1, r3, #3
 8008fb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008fbc:	4a56      	ldr	r2, [pc, #344]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8008fbe:	430b      	orrs	r3, r1
 8008fc0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8008fc2:	e003      	b.n	8008fcc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008fc4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8008fc8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008fcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8008fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fd4:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8008fd8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008fdc:	2300      	movs	r3, #0
 8008fde:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008fe2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8008fe6:	460b      	mov	r3, r1
 8008fe8:	4313      	orrs	r3, r2
 8008fea:	f000 809f 	beq.w	800912c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008fee:	4b4b      	ldr	r3, [pc, #300]	@ (800911c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a4a      	ldr	r2, [pc, #296]	@ (800911c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8008ff4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ff8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008ffa:	f7f9 f82f 	bl	800205c <HAL_GetTick>
 8008ffe:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009002:	e00b      	b.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009004:	f7f9 f82a 	bl	800205c <HAL_GetTick>
 8009008:	4602      	mov	r2, r0
 800900a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800900e:	1ad3      	subs	r3, r2, r3
 8009010:	2b64      	cmp	r3, #100	@ 0x64
 8009012:	d903      	bls.n	800901c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8009014:	2303      	movs	r3, #3
 8009016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800901a:	e005      	b.n	8009028 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800901c:	4b3f      	ldr	r3, [pc, #252]	@ (800911c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800901e:	681b      	ldr	r3, [r3, #0]
 8009020:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009024:	2b00      	cmp	r3, #0
 8009026:	d0ed      	beq.n	8009004 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8009028:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800902c:	2b00      	cmp	r3, #0
 800902e:	d179      	bne.n	8009124 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8009030:	4b39      	ldr	r3, [pc, #228]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009032:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8009034:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009038:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800903c:	4053      	eors	r3, r2
 800903e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009042:	2b00      	cmp	r3, #0
 8009044:	d015      	beq.n	8009072 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009046:	4b34      	ldr	r3, [pc, #208]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009048:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800904a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800904e:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009052:	4b31      	ldr	r3, [pc, #196]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009054:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009056:	4a30      	ldr	r2, [pc, #192]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009058:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800905c:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800905e:	4b2e      	ldr	r3, [pc, #184]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009062:	4a2d      	ldr	r2, [pc, #180]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009064:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009068:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800906a:	4a2b      	ldr	r2, [pc, #172]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800906c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8009070:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8009072:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009076:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800907a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800907e:	d118      	bne.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009080:	f7f8 ffec 	bl	800205c <HAL_GetTick>
 8009084:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009088:	e00d      	b.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800908a:	f7f8 ffe7 	bl	800205c <HAL_GetTick>
 800908e:	4602      	mov	r2, r0
 8009090:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8009094:	1ad2      	subs	r2, r2, r3
 8009096:	f241 3388 	movw	r3, #5000	@ 0x1388
 800909a:	429a      	cmp	r2, r3
 800909c:	d903      	bls.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800909e:	2303      	movs	r3, #3
 80090a0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 80090a4:	e005      	b.n	80090b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80090a6:	4b1c      	ldr	r3, [pc, #112]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80090aa:	f003 0302 	and.w	r3, r3, #2
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d0eb      	beq.n	800908a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 80090b2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d129      	bne.n	800910e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80090ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80090c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80090c6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80090ca:	d10e      	bne.n	80090ea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 80090cc:	4b12      	ldr	r3, [pc, #72]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090ce:	691b      	ldr	r3, [r3, #16]
 80090d0:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 80090d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 80090dc:	091a      	lsrs	r2, r3, #4
 80090de:	4b10      	ldr	r3, [pc, #64]	@ (8009120 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80090e0:	4013      	ands	r3, r2
 80090e2:	4a0d      	ldr	r2, [pc, #52]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090e4:	430b      	orrs	r3, r1
 80090e6:	6113      	str	r3, [r2, #16]
 80090e8:	e005      	b.n	80090f6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80090ea:	4b0b      	ldr	r3, [pc, #44]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090ec:	691b      	ldr	r3, [r3, #16]
 80090ee:	4a0a      	ldr	r2, [pc, #40]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090f0:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80090f4:	6113      	str	r3, [r2, #16]
 80090f6:	4b08      	ldr	r3, [pc, #32]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80090f8:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 80090fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80090fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8009102:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009106:	4a04      	ldr	r2, [pc, #16]	@ (8009118 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009108:	430b      	orrs	r3, r1
 800910a:	6713      	str	r3, [r2, #112]	@ 0x70
 800910c:	e00e      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800910e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009112:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 8009116:	e009      	b.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8009118:	58024400 	.word	0x58024400
 800911c:	58024800 	.word	0x58024800
 8009120:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009124:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009128:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800912c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009134:	f002 0301 	and.w	r3, r2, #1
 8009138:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800913c:	2300      	movs	r3, #0
 800913e:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8009142:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009146:	460b      	mov	r3, r1
 8009148:	4313      	orrs	r3, r2
 800914a:	f000 8089 	beq.w	8009260 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800914e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009152:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009154:	2b28      	cmp	r3, #40	@ 0x28
 8009156:	d86b      	bhi.n	8009230 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8009158:	a201      	add	r2, pc, #4	@ (adr r2, 8009160 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800915a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800915e:	bf00      	nop
 8009160:	08009239 	.word	0x08009239
 8009164:	08009231 	.word	0x08009231
 8009168:	08009231 	.word	0x08009231
 800916c:	08009231 	.word	0x08009231
 8009170:	08009231 	.word	0x08009231
 8009174:	08009231 	.word	0x08009231
 8009178:	08009231 	.word	0x08009231
 800917c:	08009231 	.word	0x08009231
 8009180:	08009205 	.word	0x08009205
 8009184:	08009231 	.word	0x08009231
 8009188:	08009231 	.word	0x08009231
 800918c:	08009231 	.word	0x08009231
 8009190:	08009231 	.word	0x08009231
 8009194:	08009231 	.word	0x08009231
 8009198:	08009231 	.word	0x08009231
 800919c:	08009231 	.word	0x08009231
 80091a0:	0800921b 	.word	0x0800921b
 80091a4:	08009231 	.word	0x08009231
 80091a8:	08009231 	.word	0x08009231
 80091ac:	08009231 	.word	0x08009231
 80091b0:	08009231 	.word	0x08009231
 80091b4:	08009231 	.word	0x08009231
 80091b8:	08009231 	.word	0x08009231
 80091bc:	08009231 	.word	0x08009231
 80091c0:	08009239 	.word	0x08009239
 80091c4:	08009231 	.word	0x08009231
 80091c8:	08009231 	.word	0x08009231
 80091cc:	08009231 	.word	0x08009231
 80091d0:	08009231 	.word	0x08009231
 80091d4:	08009231 	.word	0x08009231
 80091d8:	08009231 	.word	0x08009231
 80091dc:	08009231 	.word	0x08009231
 80091e0:	08009239 	.word	0x08009239
 80091e4:	08009231 	.word	0x08009231
 80091e8:	08009231 	.word	0x08009231
 80091ec:	08009231 	.word	0x08009231
 80091f0:	08009231 	.word	0x08009231
 80091f4:	08009231 	.word	0x08009231
 80091f8:	08009231 	.word	0x08009231
 80091fc:	08009231 	.word	0x08009231
 8009200:	08009239 	.word	0x08009239
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009204:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009208:	3308      	adds	r3, #8
 800920a:	2101      	movs	r1, #1
 800920c:	4618      	mov	r0, r3
 800920e:	f001 fe95 	bl	800af3c <RCCEx_PLL2_Config>
 8009212:	4603      	mov	r3, r0
 8009214:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8009218:	e00f      	b.n	800923a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800921a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800921e:	3328      	adds	r3, #40	@ 0x28
 8009220:	2101      	movs	r1, #1
 8009222:	4618      	mov	r0, r3
 8009224:	f001 ff3c 	bl	800b0a0 <RCCEx_PLL3_Config>
 8009228:	4603      	mov	r3, r0
 800922a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800922e:	e004      	b.n	800923a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009230:	2301      	movs	r3, #1
 8009232:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009236:	e000      	b.n	800923a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8009238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800923a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800923e:	2b00      	cmp	r3, #0
 8009240:	d10a      	bne.n	8009258 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8009242:	4bbf      	ldr	r3, [pc, #764]	@ (8009540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009244:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009246:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800924a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800924e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009250:	4abb      	ldr	r2, [pc, #748]	@ (8009540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009252:	430b      	orrs	r3, r1
 8009254:	6553      	str	r3, [r2, #84]	@ 0x54
 8009256:	e003      	b.n	8009260 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009258:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800925c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8009260:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009268:	f002 0302 	and.w	r3, r2, #2
 800926c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009270:	2300      	movs	r3, #0
 8009272:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8009276:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800927a:	460b      	mov	r3, r1
 800927c:	4313      	orrs	r3, r2
 800927e:	d041      	beq.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8009280:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009284:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8009286:	2b05      	cmp	r3, #5
 8009288:	d824      	bhi.n	80092d4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800928a:	a201      	add	r2, pc, #4	@ (adr r2, 8009290 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800928c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009290:	080092dd 	.word	0x080092dd
 8009294:	080092a9 	.word	0x080092a9
 8009298:	080092bf 	.word	0x080092bf
 800929c:	080092dd 	.word	0x080092dd
 80092a0:	080092dd 	.word	0x080092dd
 80092a4:	080092dd 	.word	0x080092dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80092a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092ac:	3308      	adds	r3, #8
 80092ae:	2101      	movs	r1, #1
 80092b0:	4618      	mov	r0, r3
 80092b2:	f001 fe43 	bl	800af3c <RCCEx_PLL2_Config>
 80092b6:	4603      	mov	r3, r0
 80092b8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80092bc:	e00f      	b.n	80092de <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80092be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092c2:	3328      	adds	r3, #40	@ 0x28
 80092c4:	2101      	movs	r1, #1
 80092c6:	4618      	mov	r0, r3
 80092c8:	f001 feea 	bl	800b0a0 <RCCEx_PLL3_Config>
 80092cc:	4603      	mov	r3, r0
 80092ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80092d2:	e004      	b.n	80092de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80092d4:	2301      	movs	r3, #1
 80092d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80092da:	e000      	b.n	80092de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80092dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80092de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10a      	bne.n	80092fc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80092e6:	4b96      	ldr	r3, [pc, #600]	@ (8009540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80092e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092ea:	f023 0107 	bic.w	r1, r3, #7
 80092ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80092f2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80092f4:	4a92      	ldr	r2, [pc, #584]	@ (8009540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80092f6:	430b      	orrs	r3, r1
 80092f8:	6553      	str	r3, [r2, #84]	@ 0x54
 80092fa:	e003      	b.n	8009304 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80092fc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009300:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009304:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800930c:	f002 0304 	and.w	r3, r2, #4
 8009310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009314:	2300      	movs	r3, #0
 8009316:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800931a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800931e:	460b      	mov	r3, r1
 8009320:	4313      	orrs	r3, r2
 8009322:	d044      	beq.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8009324:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009328:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800932c:	2b05      	cmp	r3, #5
 800932e:	d825      	bhi.n	800937c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8009330:	a201      	add	r2, pc, #4	@ (adr r2, 8009338 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8009332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009336:	bf00      	nop
 8009338:	08009385 	.word	0x08009385
 800933c:	08009351 	.word	0x08009351
 8009340:	08009367 	.word	0x08009367
 8009344:	08009385 	.word	0x08009385
 8009348:	08009385 	.word	0x08009385
 800934c:	08009385 	.word	0x08009385
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009350:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009354:	3308      	adds	r3, #8
 8009356:	2101      	movs	r1, #1
 8009358:	4618      	mov	r0, r3
 800935a:	f001 fdef 	bl	800af3c <RCCEx_PLL2_Config>
 800935e:	4603      	mov	r3, r0
 8009360:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8009364:	e00f      	b.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009366:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800936a:	3328      	adds	r3, #40	@ 0x28
 800936c:	2101      	movs	r1, #1
 800936e:	4618      	mov	r0, r3
 8009370:	f001 fe96 	bl	800b0a0 <RCCEx_PLL3_Config>
 8009374:	4603      	mov	r3, r0
 8009376:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800937a:	e004      	b.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800937c:	2301      	movs	r3, #1
 800937e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009382:	e000      	b.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8009384:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009386:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800938a:	2b00      	cmp	r3, #0
 800938c:	d10b      	bne.n	80093a6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800938e:	4b6c      	ldr	r3, [pc, #432]	@ (8009540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009392:	f023 0107 	bic.w	r1, r3, #7
 8009396:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800939a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800939e:	4a68      	ldr	r2, [pc, #416]	@ (8009540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80093a0:	430b      	orrs	r3, r1
 80093a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80093a4:	e003      	b.n	80093ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80093a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80093aa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80093ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093b6:	f002 0320 	and.w	r3, r2, #32
 80093ba:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80093be:	2300      	movs	r3, #0
 80093c0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80093c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80093c8:	460b      	mov	r3, r1
 80093ca:	4313      	orrs	r3, r2
 80093cc:	d055      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80093ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80093d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80093d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093da:	d033      	beq.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80093dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80093e0:	d82c      	bhi.n	800943c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80093e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093e6:	d02f      	beq.n	8009448 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80093e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80093ec:	d826      	bhi.n	800943c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80093ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80093f2:	d02b      	beq.n	800944c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80093f4:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80093f8:	d820      	bhi.n	800943c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80093fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80093fe:	d012      	beq.n	8009426 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8009400:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009404:	d81a      	bhi.n	800943c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8009406:	2b00      	cmp	r3, #0
 8009408:	d022      	beq.n	8009450 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800940a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800940e:	d115      	bne.n	800943c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009414:	3308      	adds	r3, #8
 8009416:	2100      	movs	r1, #0
 8009418:	4618      	mov	r0, r3
 800941a:	f001 fd8f 	bl	800af3c <RCCEx_PLL2_Config>
 800941e:	4603      	mov	r3, r0
 8009420:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8009424:	e015      	b.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009426:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800942a:	3328      	adds	r3, #40	@ 0x28
 800942c:	2102      	movs	r1, #2
 800942e:	4618      	mov	r0, r3
 8009430:	f001 fe36 	bl	800b0a0 <RCCEx_PLL3_Config>
 8009434:	4603      	mov	r3, r0
 8009436:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800943a:	e00a      	b.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800943c:	2301      	movs	r3, #1
 800943e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009442:	e006      	b.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009444:	bf00      	nop
 8009446:	e004      	b.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009448:	bf00      	nop
 800944a:	e002      	b.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800944c:	bf00      	nop
 800944e:	e000      	b.n	8009452 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8009450:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009452:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009456:	2b00      	cmp	r3, #0
 8009458:	d10b      	bne.n	8009472 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800945a:	4b39      	ldr	r3, [pc, #228]	@ (8009540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800945c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800945e:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8009462:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009466:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800946a:	4a35      	ldr	r2, [pc, #212]	@ (8009540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800946c:	430b      	orrs	r3, r1
 800946e:	6553      	str	r3, [r2, #84]	@ 0x54
 8009470:	e003      	b.n	800947a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009472:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009476:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800947a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800947e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009482:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 8009486:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800948a:	2300      	movs	r3, #0
 800948c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8009490:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 8009494:	460b      	mov	r3, r1
 8009496:	4313      	orrs	r3, r2
 8009498:	d058      	beq.n	800954c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800949a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800949e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80094a2:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80094a6:	d033      	beq.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80094a8:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80094ac:	d82c      	bhi.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80094ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094b2:	d02f      	beq.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80094b4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80094b8:	d826      	bhi.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80094ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80094be:	d02b      	beq.n	8009518 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80094c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80094c4:	d820      	bhi.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80094c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094ca:	d012      	beq.n	80094f2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80094cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80094d0:	d81a      	bhi.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80094d2:	2b00      	cmp	r3, #0
 80094d4:	d022      	beq.n	800951c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80094d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80094da:	d115      	bne.n	8009508 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80094dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094e0:	3308      	adds	r3, #8
 80094e2:	2100      	movs	r1, #0
 80094e4:	4618      	mov	r0, r3
 80094e6:	f001 fd29 	bl	800af3c <RCCEx_PLL2_Config>
 80094ea:	4603      	mov	r3, r0
 80094ec:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80094f0:	e015      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80094f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80094f6:	3328      	adds	r3, #40	@ 0x28
 80094f8:	2102      	movs	r1, #2
 80094fa:	4618      	mov	r0, r3
 80094fc:	f001 fdd0 	bl	800b0a0 <RCCEx_PLL3_Config>
 8009500:	4603      	mov	r3, r0
 8009502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8009506:	e00a      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009508:	2301      	movs	r3, #1
 800950a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800950e:	e006      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009510:	bf00      	nop
 8009512:	e004      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009514:	bf00      	nop
 8009516:	e002      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8009518:	bf00      	nop
 800951a:	e000      	b.n	800951e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800951c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800951e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009522:	2b00      	cmp	r3, #0
 8009524:	d10e      	bne.n	8009544 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009526:	4b06      	ldr	r3, [pc, #24]	@ (8009540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800952a:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800952e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009532:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8009536:	4a02      	ldr	r2, [pc, #8]	@ (8009540 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8009538:	430b      	orrs	r3, r1
 800953a:	6593      	str	r3, [r2, #88]	@ 0x58
 800953c:	e006      	b.n	800954c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800953e:	bf00      	nop
 8009540:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009544:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009548:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800954c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009554:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 8009558:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800955c:	2300      	movs	r3, #0
 800955e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8009562:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 8009566:	460b      	mov	r3, r1
 8009568:	4313      	orrs	r3, r2
 800956a:	d055      	beq.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800956c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009570:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009574:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8009578:	d033      	beq.n	80095e2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800957a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800957e:	d82c      	bhi.n	80095da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009580:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009584:	d02f      	beq.n	80095e6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8009586:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800958a:	d826      	bhi.n	80095da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800958c:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009590:	d02b      	beq.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8009592:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8009596:	d820      	bhi.n	80095da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8009598:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800959c:	d012      	beq.n	80095c4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800959e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80095a2:	d81a      	bhi.n	80095da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d022      	beq.n	80095ee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80095a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80095ac:	d115      	bne.n	80095da <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80095ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095b2:	3308      	adds	r3, #8
 80095b4:	2100      	movs	r1, #0
 80095b6:	4618      	mov	r0, r3
 80095b8:	f001 fcc0 	bl	800af3c <RCCEx_PLL2_Config>
 80095bc:	4603      	mov	r3, r0
 80095be:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80095c2:	e015      	b.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80095c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80095c8:	3328      	adds	r3, #40	@ 0x28
 80095ca:	2102      	movs	r1, #2
 80095cc:	4618      	mov	r0, r3
 80095ce:	f001 fd67 	bl	800b0a0 <RCCEx_PLL3_Config>
 80095d2:	4603      	mov	r3, r0
 80095d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80095d8:	e00a      	b.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80095da:	2301      	movs	r3, #1
 80095dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80095e0:	e006      	b.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80095e2:	bf00      	nop
 80095e4:	e004      	b.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80095e6:	bf00      	nop
 80095e8:	e002      	b.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80095ea:	bf00      	nop
 80095ec:	e000      	b.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80095ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80095f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d10b      	bne.n	8009610 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80095f8:	4ba1      	ldr	r3, [pc, #644]	@ (8009880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80095fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80095fc:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8009600:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009604:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8009608:	4a9d      	ldr	r2, [pc, #628]	@ (8009880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800960a:	430b      	orrs	r3, r1
 800960c:	6593      	str	r3, [r2, #88]	@ 0x58
 800960e:	e003      	b.n	8009618 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009614:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8009618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800961c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009620:	f002 0308 	and.w	r3, r2, #8
 8009624:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8009628:	2300      	movs	r3, #0
 800962a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800962e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8009632:	460b      	mov	r3, r1
 8009634:	4313      	orrs	r3, r2
 8009636:	d01e      	beq.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8009638:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800963c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009640:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009644:	d10c      	bne.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8009646:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800964a:	3328      	adds	r3, #40	@ 0x28
 800964c:	2102      	movs	r1, #2
 800964e:	4618      	mov	r0, r3
 8009650:	f001 fd26 	bl	800b0a0 <RCCEx_PLL3_Config>
 8009654:	4603      	mov	r3, r0
 8009656:	2b00      	cmp	r3, #0
 8009658:	d002      	beq.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800965a:	2301      	movs	r3, #1
 800965c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8009660:	4b87      	ldr	r3, [pc, #540]	@ (8009880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009664:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800966c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009670:	4a83      	ldr	r2, [pc, #524]	@ (8009880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009672:	430b      	orrs	r3, r1
 8009674:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009676:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800967a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800967e:	f002 0310 	and.w	r3, r2, #16
 8009682:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009686:	2300      	movs	r3, #0
 8009688:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800968c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8009690:	460b      	mov	r3, r1
 8009692:	4313      	orrs	r3, r2
 8009694:	d01e      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8009696:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800969a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800969e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80096a2:	d10c      	bne.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80096a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096a8:	3328      	adds	r3, #40	@ 0x28
 80096aa:	2102      	movs	r1, #2
 80096ac:	4618      	mov	r0, r3
 80096ae:	f001 fcf7 	bl	800b0a0 <RCCEx_PLL3_Config>
 80096b2:	4603      	mov	r3, r0
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d002      	beq.n	80096be <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80096b8:	2301      	movs	r3, #1
 80096ba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80096be:	4b70      	ldr	r3, [pc, #448]	@ (8009880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096c2:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80096c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80096ce:	4a6c      	ldr	r2, [pc, #432]	@ (8009880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80096d0:	430b      	orrs	r3, r1
 80096d2:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80096d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096dc:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 80096e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80096e4:	2300      	movs	r3, #0
 80096e6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80096ea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 80096ee:	460b      	mov	r3, r1
 80096f0:	4313      	orrs	r3, r2
 80096f2:	d03e      	beq.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80096f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80096f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80096fc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009700:	d022      	beq.n	8009748 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8009702:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009706:	d81b      	bhi.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8009708:	2b00      	cmp	r3, #0
 800970a:	d003      	beq.n	8009714 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800970c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009710:	d00b      	beq.n	800972a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8009712:	e015      	b.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009714:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009718:	3308      	adds	r3, #8
 800971a:	2100      	movs	r1, #0
 800971c:	4618      	mov	r0, r3
 800971e:	f001 fc0d 	bl	800af3c <RCCEx_PLL2_Config>
 8009722:	4603      	mov	r3, r0
 8009724:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8009728:	e00f      	b.n	800974a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800972a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800972e:	3328      	adds	r3, #40	@ 0x28
 8009730:	2102      	movs	r1, #2
 8009732:	4618      	mov	r0, r3
 8009734:	f001 fcb4 	bl	800b0a0 <RCCEx_PLL3_Config>
 8009738:	4603      	mov	r3, r0
 800973a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800973e:	e004      	b.n	800974a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009740:	2301      	movs	r3, #1
 8009742:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 8009746:	e000      	b.n	800974a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8009748:	bf00      	nop
    }

    if (ret == HAL_OK)
 800974a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800974e:	2b00      	cmp	r3, #0
 8009750:	d10b      	bne.n	800976a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009752:	4b4b      	ldr	r3, [pc, #300]	@ (8009880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009756:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800975a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800975e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8009762:	4a47      	ldr	r2, [pc, #284]	@ (8009880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009764:	430b      	orrs	r3, r1
 8009766:	6593      	str	r3, [r2, #88]	@ 0x58
 8009768:	e003      	b.n	8009772 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800976a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800976e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8009772:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009776:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977a:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800977e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009780:	2300      	movs	r3, #0
 8009782:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009784:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8009788:	460b      	mov	r3, r1
 800978a:	4313      	orrs	r3, r2
 800978c:	d03b      	beq.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800978e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009792:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009796:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800979a:	d01f      	beq.n	80097dc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800979c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80097a0:	d818      	bhi.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80097a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80097a6:	d003      	beq.n	80097b0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80097a8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80097ac:	d007      	beq.n	80097be <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80097ae:	e011      	b.n	80097d4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80097b0:	4b33      	ldr	r3, [pc, #204]	@ (8009880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097b4:	4a32      	ldr	r2, [pc, #200]	@ (8009880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097b6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80097ba:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80097bc:	e00f      	b.n	80097de <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80097be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097c2:	3328      	adds	r3, #40	@ 0x28
 80097c4:	2101      	movs	r1, #1
 80097c6:	4618      	mov	r0, r3
 80097c8:	f001 fc6a 	bl	800b0a0 <RCCEx_PLL3_Config>
 80097cc:	4603      	mov	r3, r0
 80097ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80097d2:	e004      	b.n	80097de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80097d4:	2301      	movs	r3, #1
 80097d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 80097da:	e000      	b.n	80097de <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80097dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80097de:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 80097e2:	2b00      	cmp	r3, #0
 80097e4:	d10b      	bne.n	80097fe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80097e6:	4b26      	ldr	r3, [pc, #152]	@ (8009880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80097ea:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80097ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80097f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80097f6:	4a22      	ldr	r2, [pc, #136]	@ (8009880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80097f8:	430b      	orrs	r3, r1
 80097fa:	6553      	str	r3, [r2, #84]	@ 0x54
 80097fc:	e003      	b.n	8009806 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80097fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009802:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8009806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800980a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980e:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8009812:	673b      	str	r3, [r7, #112]	@ 0x70
 8009814:	2300      	movs	r3, #0
 8009816:	677b      	str	r3, [r7, #116]	@ 0x74
 8009818:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800981c:	460b      	mov	r3, r1
 800981e:	4313      	orrs	r3, r2
 8009820:	d034      	beq.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8009822:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009826:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009828:	2b00      	cmp	r3, #0
 800982a:	d003      	beq.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800982c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009830:	d007      	beq.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8009832:	e011      	b.n	8009858 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009834:	4b12      	ldr	r3, [pc, #72]	@ (8009880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009838:	4a11      	ldr	r2, [pc, #68]	@ (8009880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800983a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800983e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009840:	e00e      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009842:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009846:	3308      	adds	r3, #8
 8009848:	2102      	movs	r1, #2
 800984a:	4618      	mov	r0, r3
 800984c:	f001 fb76 	bl	800af3c <RCCEx_PLL2_Config>
 8009850:	4603      	mov	r3, r0
 8009852:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8009856:	e003      	b.n	8009860 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8009858:	2301      	movs	r3, #1
 800985a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800985e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009860:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009864:	2b00      	cmp	r3, #0
 8009866:	d10d      	bne.n	8009884 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8009868:	4b05      	ldr	r3, [pc, #20]	@ (8009880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800986a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800986c:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8009870:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009874:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009876:	4a02      	ldr	r2, [pc, #8]	@ (8009880 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8009878:	430b      	orrs	r3, r1
 800987a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800987c:	e006      	b.n	800988c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800987e:	bf00      	nop
 8009880:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009884:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009888:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800988c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009894:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8009898:	66bb      	str	r3, [r7, #104]	@ 0x68
 800989a:	2300      	movs	r3, #0
 800989c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800989e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80098a2:	460b      	mov	r3, r1
 80098a4:	4313      	orrs	r3, r2
 80098a6:	d00c      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80098a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098ac:	3328      	adds	r3, #40	@ 0x28
 80098ae:	2102      	movs	r1, #2
 80098b0:	4618      	mov	r0, r3
 80098b2:	f001 fbf5 	bl	800b0a0 <RCCEx_PLL3_Config>
 80098b6:	4603      	mov	r3, r0
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	d002      	beq.n	80098c2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80098bc:	2301      	movs	r3, #1
 80098be:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80098c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ca:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 80098ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80098d0:	2300      	movs	r3, #0
 80098d2:	667b      	str	r3, [r7, #100]	@ 0x64
 80098d4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 80098d8:	460b      	mov	r3, r1
 80098da:	4313      	orrs	r3, r2
 80098dc:	d038      	beq.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80098de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80098e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80098e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80098ea:	d018      	beq.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80098ec:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80098f0:	d811      	bhi.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80098f2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098f6:	d014      	beq.n	8009922 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80098f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098fc:	d80b      	bhi.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d011      	beq.n	8009926 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8009902:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009906:	d106      	bne.n	8009916 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009908:	4bc3      	ldr	r3, [pc, #780]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800990a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800990c:	4ac2      	ldr	r2, [pc, #776]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800990e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009912:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8009914:	e008      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009916:	2301      	movs	r3, #1
 8009918:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 800991c:	e004      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800991e:	bf00      	nop
 8009920:	e002      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009922:	bf00      	nop
 8009924:	e000      	b.n	8009928 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8009926:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009928:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800992c:	2b00      	cmp	r3, #0
 800992e:	d10b      	bne.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009930:	4bb9      	ldr	r3, [pc, #740]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009932:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009934:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8009938:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800993c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009940:	4ab5      	ldr	r2, [pc, #724]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009942:	430b      	orrs	r3, r1
 8009944:	6553      	str	r3, [r2, #84]	@ 0x54
 8009946:	e003      	b.n	8009950 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009948:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 800994c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009950:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009958:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800995c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800995e:	2300      	movs	r3, #0
 8009960:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8009962:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 8009966:	460b      	mov	r3, r1
 8009968:	4313      	orrs	r3, r2
 800996a:	d009      	beq.n	8009980 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800996c:	4baa      	ldr	r3, [pc, #680]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800996e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009970:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8009974:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009978:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800997a:	4aa7      	ldr	r2, [pc, #668]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800997c:	430b      	orrs	r3, r1
 800997e:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8009980:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009988:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800998c:	653b      	str	r3, [r7, #80]	@ 0x50
 800998e:	2300      	movs	r3, #0
 8009990:	657b      	str	r3, [r7, #84]	@ 0x54
 8009992:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 8009996:	460b      	mov	r3, r1
 8009998:	4313      	orrs	r3, r2
 800999a:	d00a      	beq.n	80099b2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800999c:	4b9e      	ldr	r3, [pc, #632]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800999e:	691b      	ldr	r3, [r3, #16]
 80099a0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80099a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099a8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 80099ac:	4a9a      	ldr	r2, [pc, #616]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099ae:	430b      	orrs	r3, r1
 80099b0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80099b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ba:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 80099be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80099c0:	2300      	movs	r3, #0
 80099c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80099c4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 80099c8:	460b      	mov	r3, r1
 80099ca:	4313      	orrs	r3, r2
 80099cc:	d009      	beq.n	80099e2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80099ce:	4b92      	ldr	r3, [pc, #584]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099d0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80099d2:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 80099d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80099dc:	4a8e      	ldr	r2, [pc, #568]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80099de:	430b      	orrs	r3, r1
 80099e0:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80099e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80099e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ea:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 80099ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80099f0:	2300      	movs	r3, #0
 80099f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80099f4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 80099f8:	460b      	mov	r3, r1
 80099fa:	4313      	orrs	r3, r2
 80099fc:	d00e      	beq.n	8009a1c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80099fe:	4b86      	ldr	r3, [pc, #536]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a00:	691b      	ldr	r3, [r3, #16]
 8009a02:	4a85      	ldr	r2, [pc, #532]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a04:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8009a08:	6113      	str	r3, [r2, #16]
 8009a0a:	4b83      	ldr	r3, [pc, #524]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a0c:	6919      	ldr	r1, [r3, #16]
 8009a0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8009a16:	4a80      	ldr	r2, [pc, #512]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a18:	430b      	orrs	r3, r1
 8009a1a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8009a1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a24:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8009a28:	63bb      	str	r3, [r7, #56]	@ 0x38
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009a2e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8009a32:	460b      	mov	r3, r1
 8009a34:	4313      	orrs	r3, r2
 8009a36:	d009      	beq.n	8009a4c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8009a38:	4b77      	ldr	r3, [pc, #476]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009a3c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8009a40:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a46:	4a74      	ldr	r2, [pc, #464]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a48:	430b      	orrs	r3, r1
 8009a4a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009a4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a54:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 8009a58:	633b      	str	r3, [r7, #48]	@ 0x30
 8009a5a:	2300      	movs	r3, #0
 8009a5c:	637b      	str	r3, [r7, #52]	@ 0x34
 8009a5e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 8009a62:	460b      	mov	r3, r1
 8009a64:	4313      	orrs	r3, r2
 8009a66:	d00a      	beq.n	8009a7e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009a68:	4b6b      	ldr	r3, [pc, #428]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009a6c:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 8009a70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a74:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8009a78:	4a67      	ldr	r2, [pc, #412]	@ (8009c18 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8009a7a:	430b      	orrs	r3, r1
 8009a7c:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8009a7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a86:	2100      	movs	r1, #0
 8009a88:	62b9      	str	r1, [r7, #40]	@ 0x28
 8009a8a:	f003 0301 	and.w	r3, r3, #1
 8009a8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009a90:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8009a94:	460b      	mov	r3, r1
 8009a96:	4313      	orrs	r3, r2
 8009a98:	d011      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009a9e:	3308      	adds	r3, #8
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	4618      	mov	r0, r3
 8009aa4:	f001 fa4a 	bl	800af3c <RCCEx_PLL2_Config>
 8009aa8:	4603      	mov	r3, r0
 8009aaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009aae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d003      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ab6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009aba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8009abe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac6:	2100      	movs	r1, #0
 8009ac8:	6239      	str	r1, [r7, #32]
 8009aca:	f003 0302 	and.w	r3, r3, #2
 8009ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ad0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009ad4:	460b      	mov	r3, r1
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	d011      	beq.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009ade:	3308      	adds	r3, #8
 8009ae0:	2101      	movs	r1, #1
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f001 fa2a 	bl	800af3c <RCCEx_PLL2_Config>
 8009ae8:	4603      	mov	r3, r0
 8009aea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009aee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009af2:	2b00      	cmp	r3, #0
 8009af4:	d003      	beq.n	8009afe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009af6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009afa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8009afe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b06:	2100      	movs	r1, #0
 8009b08:	61b9      	str	r1, [r7, #24]
 8009b0a:	f003 0304 	and.w	r3, r3, #4
 8009b0e:	61fb      	str	r3, [r7, #28]
 8009b10:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009b14:	460b      	mov	r3, r1
 8009b16:	4313      	orrs	r3, r2
 8009b18:	d011      	beq.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009b1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b1e:	3308      	adds	r3, #8
 8009b20:	2102      	movs	r1, #2
 8009b22:	4618      	mov	r0, r3
 8009b24:	f001 fa0a 	bl	800af3c <RCCEx_PLL2_Config>
 8009b28:	4603      	mov	r3, r0
 8009b2a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009b2e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d003      	beq.n	8009b3e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b3a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8009b3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b46:	2100      	movs	r1, #0
 8009b48:	6139      	str	r1, [r7, #16]
 8009b4a:	f003 0308 	and.w	r3, r3, #8
 8009b4e:	617b      	str	r3, [r7, #20]
 8009b50:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8009b54:	460b      	mov	r3, r1
 8009b56:	4313      	orrs	r3, r2
 8009b58:	d011      	beq.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b5e:	3328      	adds	r3, #40	@ 0x28
 8009b60:	2100      	movs	r1, #0
 8009b62:	4618      	mov	r0, r3
 8009b64:	f001 fa9c 	bl	800b0a0 <RCCEx_PLL3_Config>
 8009b68:	4603      	mov	r3, r0
 8009b6a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 8009b6e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d003      	beq.n	8009b7e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009b76:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009b7a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8009b7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b86:	2100      	movs	r1, #0
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	f003 0310 	and.w	r3, r3, #16
 8009b8e:	60fb      	str	r3, [r7, #12]
 8009b90:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8009b94:	460b      	mov	r3, r1
 8009b96:	4313      	orrs	r3, r2
 8009b98:	d011      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009b9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009b9e:	3328      	adds	r3, #40	@ 0x28
 8009ba0:	2101      	movs	r1, #1
 8009ba2:	4618      	mov	r0, r3
 8009ba4:	f001 fa7c 	bl	800b0a0 <RCCEx_PLL3_Config>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009bae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d003      	beq.n	8009bbe <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bb6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bba:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8009bbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc6:	2100      	movs	r1, #0
 8009bc8:	6039      	str	r1, [r7, #0]
 8009bca:	f003 0320 	and.w	r3, r3, #32
 8009bce:	607b      	str	r3, [r7, #4]
 8009bd0:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009bd4:	460b      	mov	r3, r1
 8009bd6:	4313      	orrs	r3, r2
 8009bd8:	d011      	beq.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8009bda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8009bde:	3328      	adds	r3, #40	@ 0x28
 8009be0:	2102      	movs	r1, #2
 8009be2:	4618      	mov	r0, r3
 8009be4:	f001 fa5c 	bl	800b0a0 <RCCEx_PLL3_Config>
 8009be8:	4603      	mov	r3, r0
 8009bea:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 8009bee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d003      	beq.n	8009bfe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bf6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 8009bfa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 8009bfe:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d101      	bne.n	8009c0a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8009c06:	2300      	movs	r3, #0
 8009c08:	e000      	b.n	8009c0c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8009c0a:	2301      	movs	r3, #1
}
 8009c0c:	4618      	mov	r0, r3
 8009c0e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8009c12:	46bd      	mov	sp, r7
 8009c14:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009c18:	58024400 	.word	0x58024400

08009c1c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b090      	sub	sp, #64	@ 0x40
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8009c26:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c2a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8009c2e:	430b      	orrs	r3, r1
 8009c30:	f040 8094 	bne.w	8009d5c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8009c34:	4b9e      	ldr	r3, [pc, #632]	@ (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c38:	f003 0307 	and.w	r3, r3, #7
 8009c3c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009c3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009c40:	2b04      	cmp	r3, #4
 8009c42:	f200 8087 	bhi.w	8009d54 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8009c46:	a201      	add	r2, pc, #4	@ (adr r2, 8009c4c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8009c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c4c:	08009c61 	.word	0x08009c61
 8009c50:	08009c89 	.word	0x08009c89
 8009c54:	08009cb1 	.word	0x08009cb1
 8009c58:	08009d4d 	.word	0x08009d4d
 8009c5c:	08009cd9 	.word	0x08009cd9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009c60:	4b93      	ldr	r3, [pc, #588]	@ (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009c68:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009c6c:	d108      	bne.n	8009c80 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009c6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009c72:	4618      	mov	r0, r3
 8009c74:	f001 f810 	bl	800ac98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009c78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009c7c:	f000 bd45 	b.w	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009c80:	2300      	movs	r3, #0
 8009c82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009c84:	f000 bd41 	b.w	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009c88:	4b89      	ldr	r3, [pc, #548]	@ (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009c8a:	681b      	ldr	r3, [r3, #0]
 8009c8c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009c90:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009c94:	d108      	bne.n	8009ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009c96:	f107 0318 	add.w	r3, r7, #24
 8009c9a:	4618      	mov	r0, r3
 8009c9c:	f000 fd54 	bl	800a748 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ca4:	f000 bd31 	b.w	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009ca8:	2300      	movs	r3, #0
 8009caa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cac:	f000 bd2d 	b.w	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009cb0:	4b7f      	ldr	r3, [pc, #508]	@ (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009cb8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009cbc:	d108      	bne.n	8009cd0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009cbe:	f107 030c 	add.w	r3, r7, #12
 8009cc2:	4618      	mov	r0, r3
 8009cc4:	f000 fe94 	bl	800a9f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009cc8:	68fb      	ldr	r3, [r7, #12]
 8009cca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009ccc:	f000 bd1d 	b.w	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009cd0:	2300      	movs	r3, #0
 8009cd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009cd4:	f000 bd19 	b.w	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009cd8:	4b75      	ldr	r3, [pc, #468]	@ (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cda:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009cdc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009ce0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009ce2:	4b73      	ldr	r3, [pc, #460]	@ (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f003 0304 	and.w	r3, r3, #4
 8009cea:	2b04      	cmp	r3, #4
 8009cec:	d10c      	bne.n	8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8009cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d109      	bne.n	8009d08 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009cf4:	4b6e      	ldr	r3, [pc, #440]	@ (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	08db      	lsrs	r3, r3, #3
 8009cfa:	f003 0303 	and.w	r3, r3, #3
 8009cfe:	4a6d      	ldr	r2, [pc, #436]	@ (8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009d00:	fa22 f303 	lsr.w	r3, r2, r3
 8009d04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d06:	e01f      	b.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009d08:	4b69      	ldr	r3, [pc, #420]	@ (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009d10:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d14:	d106      	bne.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8009d16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d18:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009d1c:	d102      	bne.n	8009d24 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009d1e:	4b66      	ldr	r3, [pc, #408]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d22:	e011      	b.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009d24:	4b62      	ldr	r3, [pc, #392]	@ (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009d2c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009d30:	d106      	bne.n	8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8009d32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009d34:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009d38:	d102      	bne.n	8009d40 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009d3a:	4b60      	ldr	r3, [pc, #384]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009d3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009d3e:	e003      	b.n	8009d48 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009d40:	2300      	movs	r3, #0
 8009d42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009d44:	f000 bce1 	b.w	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009d48:	f000 bcdf 	b.w	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009d4c:	4b5c      	ldr	r3, [pc, #368]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009d4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d50:	f000 bcdb 	b.w	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009d54:	2300      	movs	r3, #0
 8009d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009d58:	f000 bcd7 	b.w	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8009d5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d60:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8009d64:	430b      	orrs	r3, r1
 8009d66:	f040 80ad 	bne.w	8009ec4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8009d6a:	4b51      	ldr	r3, [pc, #324]	@ (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009d6c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009d6e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8009d72:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009d74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d7a:	d056      	beq.n	8009e2a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009d82:	f200 8090 	bhi.w	8009ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009d86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d88:	2bc0      	cmp	r3, #192	@ 0xc0
 8009d8a:	f000 8088 	beq.w	8009e9e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8009d8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d90:	2bc0      	cmp	r3, #192	@ 0xc0
 8009d92:	f200 8088 	bhi.w	8009ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009d96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d98:	2b80      	cmp	r3, #128	@ 0x80
 8009d9a:	d032      	beq.n	8009e02 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9e:	2b80      	cmp	r3, #128	@ 0x80
 8009da0:	f200 8081 	bhi.w	8009ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8009da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d003      	beq.n	8009db2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8009daa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dac:	2b40      	cmp	r3, #64	@ 0x40
 8009dae:	d014      	beq.n	8009dda <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8009db0:	e079      	b.n	8009ea6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009db2:	4b3f      	ldr	r3, [pc, #252]	@ (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009dba:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009dbe:	d108      	bne.n	8009dd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009dc0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009dc4:	4618      	mov	r0, r3
 8009dc6:	f000 ff67 	bl	800ac98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009dce:	f000 bc9c 	b.w	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dd6:	f000 bc98 	b.w	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009dda:	4b35      	ldr	r3, [pc, #212]	@ (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009de2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009de6:	d108      	bne.n	8009dfa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009de8:	f107 0318 	add.w	r3, r7, #24
 8009dec:	4618      	mov	r0, r3
 8009dee:	f000 fcab 	bl	800a748 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009df2:	69bb      	ldr	r3, [r7, #24]
 8009df4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009df6:	f000 bc88 	b.w	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009dfe:	f000 bc84 	b.w	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009e02:	4b2b      	ldr	r3, [pc, #172]	@ (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009e0a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e0e:	d108      	bne.n	8009e22 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009e10:	f107 030c 	add.w	r3, r7, #12
 8009e14:	4618      	mov	r0, r3
 8009e16:	f000 fdeb 	bl	800a9f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009e1e:	f000 bc74 	b.w	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009e22:	2300      	movs	r3, #0
 8009e24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009e26:	f000 bc70 	b.w	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009e2a:	4b21      	ldr	r3, [pc, #132]	@ (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e2e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009e32:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009e34:	4b1e      	ldr	r3, [pc, #120]	@ (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f003 0304 	and.w	r3, r3, #4
 8009e3c:	2b04      	cmp	r3, #4
 8009e3e:	d10c      	bne.n	8009e5a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8009e40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d109      	bne.n	8009e5a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009e46:	4b1a      	ldr	r3, [pc, #104]	@ (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	08db      	lsrs	r3, r3, #3
 8009e4c:	f003 0303 	and.w	r3, r3, #3
 8009e50:	4a18      	ldr	r2, [pc, #96]	@ (8009eb4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8009e52:	fa22 f303 	lsr.w	r3, r2, r3
 8009e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e58:	e01f      	b.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009e5a:	4b15      	ldr	r3, [pc, #84]	@ (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009e62:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e66:	d106      	bne.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8009e68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e6a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009e6e:	d102      	bne.n	8009e76 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009e70:	4b11      	ldr	r3, [pc, #68]	@ (8009eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8009e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e74:	e011      	b.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009e76:	4b0e      	ldr	r3, [pc, #56]	@ (8009eb0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009e7e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009e82:	d106      	bne.n	8009e92 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8009e84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009e86:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009e8a:	d102      	bne.n	8009e92 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8009ebc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8009e8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009e90:	e003      	b.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009e92:	2300      	movs	r3, #0
 8009e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009e96:	f000 bc38 	b.w	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009e9a:	f000 bc36 	b.w	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009e9e:	4b08      	ldr	r3, [pc, #32]	@ (8009ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8009ea0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009ea2:	f000 bc32 	b.w	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8009ea6:	2300      	movs	r3, #0
 8009ea8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009eaa:	f000 bc2e 	b.w	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009eae:	bf00      	nop
 8009eb0:	58024400 	.word	0x58024400
 8009eb4:	03d09000 	.word	0x03d09000
 8009eb8:	003d0900 	.word	0x003d0900
 8009ebc:	017d7840 	.word	0x017d7840
 8009ec0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8009ec4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ec8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 8009ecc:	430b      	orrs	r3, r1
 8009ece:	f040 809c 	bne.w	800a00a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8009ed2:	4b9e      	ldr	r3, [pc, #632]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009ed6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 8009eda:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8009edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ede:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009ee2:	d054      	beq.n	8009f8e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 8009ee4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ee6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009eea:	f200 808b 	bhi.w	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009ef0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009ef4:	f000 8083 	beq.w	8009ffe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 8009ef8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009efa:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8009efe:	f200 8081 	bhi.w	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f08:	d02f      	beq.n	8009f6a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 8009f0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f0c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009f10:	d878      	bhi.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 8009f12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d004      	beq.n	8009f22 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009f18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009f1a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8009f1e:	d012      	beq.n	8009f46 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009f20:	e070      	b.n	800a004 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8009f22:	4b8a      	ldr	r3, [pc, #552]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8009f2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009f2e:	d107      	bne.n	8009f40 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8009f34:	4618      	mov	r0, r3
 8009f36:	f000 feaf 	bl	800ac98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f3e:	e3e4      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f40:	2300      	movs	r3, #0
 8009f42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f44:	e3e1      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8009f46:	4b81      	ldr	r3, [pc, #516]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009f4e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009f52:	d107      	bne.n	8009f64 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f54:	f107 0318 	add.w	r3, r7, #24
 8009f58:	4618      	mov	r0, r3
 8009f5a:	f000 fbf5 	bl	800a748 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8009f5e:	69bb      	ldr	r3, [r7, #24]
 8009f60:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f62:	e3d2      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f64:	2300      	movs	r3, #0
 8009f66:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f68:	e3cf      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8009f6a:	4b78      	ldr	r3, [pc, #480]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8009f72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009f76:	d107      	bne.n	8009f88 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009f78:	f107 030c 	add.w	r3, r7, #12
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	f000 fd37 	bl	800a9f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8009f86:	e3c0      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8009f88:	2300      	movs	r3, #0
 8009f8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8009f8c:	e3bd      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8009f8e:	4b6f      	ldr	r3, [pc, #444]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009f92:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8009f96:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8009f98:	4b6c      	ldr	r3, [pc, #432]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009f9a:	681b      	ldr	r3, [r3, #0]
 8009f9c:	f003 0304 	and.w	r3, r3, #4
 8009fa0:	2b04      	cmp	r3, #4
 8009fa2:	d10c      	bne.n	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8009fa4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d109      	bne.n	8009fbe <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009faa:	4b68      	ldr	r3, [pc, #416]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	08db      	lsrs	r3, r3, #3
 8009fb0:	f003 0303 	and.w	r3, r3, #3
 8009fb4:	4a66      	ldr	r2, [pc, #408]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8009fb6:	fa22 f303 	lsr.w	r3, r2, r3
 8009fba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fbc:	e01e      	b.n	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8009fbe:	4b63      	ldr	r3, [pc, #396]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009fc6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009fca:	d106      	bne.n	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 8009fcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fce:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009fd2:	d102      	bne.n	8009fda <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8009fd4:	4b5f      	ldr	r3, [pc, #380]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8009fd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009fd8:	e010      	b.n	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8009fda:	4b5c      	ldr	r3, [pc, #368]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8009fdc:	681b      	ldr	r3, [r3, #0]
 8009fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8009fe2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8009fe6:	d106      	bne.n	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 8009fe8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8009fea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009fee:	d102      	bne.n	8009ff6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8009ff0:	4b59      	ldr	r3, [pc, #356]	@ (800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8009ff2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8009ff4:	e002      	b.n	8009ffc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8009ff6:	2300      	movs	r3, #0
 8009ff8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8009ffa:	e386      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8009ffc:	e385      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8009ffe:	4b57      	ldr	r3, [pc, #348]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a000:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a002:	e382      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a004:	2300      	movs	r3, #0
 800a006:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a008:	e37f      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800a00a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a00e:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800a012:	430b      	orrs	r3, r1
 800a014:	f040 80a7 	bne.w	800a166 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800a018:	4b4c      	ldr	r3, [pc, #304]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a01a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a01c:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800a020:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800a022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a024:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a028:	d055      	beq.n	800a0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800a02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a02c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a030:	f200 8096 	bhi.w	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a036:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a03a:	f000 8084 	beq.w	800a146 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800a03e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a040:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a044:	f200 808c 	bhi.w	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a048:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a04a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a04e:	d030      	beq.n	800a0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800a050:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a052:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a056:	f200 8083 	bhi.w	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800a05a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d004      	beq.n	800a06a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800a060:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a062:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a066:	d012      	beq.n	800a08e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800a068:	e07a      	b.n	800a160 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a06a:	4b38      	ldr	r3, [pc, #224]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a072:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a076:	d107      	bne.n	800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a078:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a07c:	4618      	mov	r0, r3
 800a07e:	f000 fe0b 	bl	800ac98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a084:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a086:	e340      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a088:	2300      	movs	r3, #0
 800a08a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a08c:	e33d      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a08e:	4b2f      	ldr	r3, [pc, #188]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a096:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a09a:	d107      	bne.n	800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a09c:	f107 0318 	add.w	r3, r7, #24
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f000 fb51 	bl	800a748 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a0a6:	69bb      	ldr	r3, [r7, #24]
 800a0a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0aa:	e32e      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0b0:	e32b      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a0b2:	4b26      	ldr	r3, [pc, #152]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a0be:	d107      	bne.n	800a0d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a0c0:	f107 030c 	add.w	r3, r7, #12
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	f000 fc93 	bl	800a9f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a0ce:	e31c      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a0d0:	2300      	movs	r3, #0
 800a0d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a0d4:	e319      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a0d6:	4b1d      	ldr	r3, [pc, #116]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a0da:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a0de:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a0e0:	4b1a      	ldr	r3, [pc, #104]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	f003 0304 	and.w	r3, r3, #4
 800a0e8:	2b04      	cmp	r3, #4
 800a0ea:	d10c      	bne.n	800a106 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800a0ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	d109      	bne.n	800a106 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0f2:	4b16      	ldr	r3, [pc, #88]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	08db      	lsrs	r3, r3, #3
 800a0f8:	f003 0303 	and.w	r3, r3, #3
 800a0fc:	4a14      	ldr	r2, [pc, #80]	@ (800a150 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800a0fe:	fa22 f303 	lsr.w	r3, r2, r3
 800a102:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a104:	e01e      	b.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a106:	4b11      	ldr	r3, [pc, #68]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a10e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a112:	d106      	bne.n	800a122 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800a114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a116:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a11a:	d102      	bne.n	800a122 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a11c:	4b0d      	ldr	r3, [pc, #52]	@ (800a154 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800a11e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a120:	e010      	b.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a122:	4b0a      	ldr	r3, [pc, #40]	@ (800a14c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a12a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a12e:	d106      	bne.n	800a13e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800a130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a132:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a136:	d102      	bne.n	800a13e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a138:	4b07      	ldr	r3, [pc, #28]	@ (800a158 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800a13a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a13c:	e002      	b.n	800a144 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a13e:	2300      	movs	r3, #0
 800a140:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a142:	e2e2      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a144:	e2e1      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a146:	4b05      	ldr	r3, [pc, #20]	@ (800a15c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800a148:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a14a:	e2de      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a14c:	58024400 	.word	0x58024400
 800a150:	03d09000 	.word	0x03d09000
 800a154:	003d0900 	.word	0x003d0900
 800a158:	017d7840 	.word	0x017d7840
 800a15c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800a160:	2300      	movs	r3, #0
 800a162:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a164:	e2d1      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800a166:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a16a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800a16e:	430b      	orrs	r3, r1
 800a170:	f040 809c 	bne.w	800a2ac <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800a174:	4b93      	ldr	r3, [pc, #588]	@ (800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a176:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a178:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800a17c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a17e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a180:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a184:	d054      	beq.n	800a230 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800a186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a188:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a18c:	f200 808b 	bhi.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a192:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a196:	f000 8083 	beq.w	800a2a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800a19a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a19c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a1a0:	f200 8081 	bhi.w	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a1a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1aa:	d02f      	beq.n	800a20c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800a1ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a1b2:	d878      	bhi.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800a1b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d004      	beq.n	800a1c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800a1ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a1bc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a1c0:	d012      	beq.n	800a1e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800a1c2:	e070      	b.n	800a2a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a1c4:	4b7f      	ldr	r3, [pc, #508]	@ (800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a1cc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a1d0:	d107      	bne.n	800a1e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a1d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f000 fd5e 	bl	800ac98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a1dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1de:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a1e0:	e293      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a1e6:	e290      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a1e8:	4b76      	ldr	r3, [pc, #472]	@ (800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a1f0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a1f4:	d107      	bne.n	800a206 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a1f6:	f107 0318 	add.w	r3, r7, #24
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	f000 faa4 	bl	800a748 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a200:	69bb      	ldr	r3, [r7, #24]
 800a202:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a204:	e281      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a206:	2300      	movs	r3, #0
 800a208:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a20a:	e27e      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a20c:	4b6d      	ldr	r3, [pc, #436]	@ (800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a214:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a218:	d107      	bne.n	800a22a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a21a:	f107 030c 	add.w	r3, r7, #12
 800a21e:	4618      	mov	r0, r3
 800a220:	f000 fbe6 	bl	800a9f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a228:	e26f      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a22a:	2300      	movs	r3, #0
 800a22c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a22e:	e26c      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a230:	4b64      	ldr	r3, [pc, #400]	@ (800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a232:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a234:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a238:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a23a:	4b62      	ldr	r3, [pc, #392]	@ (800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a23c:	681b      	ldr	r3, [r3, #0]
 800a23e:	f003 0304 	and.w	r3, r3, #4
 800a242:	2b04      	cmp	r3, #4
 800a244:	d10c      	bne.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800a246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d109      	bne.n	800a260 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a24c:	4b5d      	ldr	r3, [pc, #372]	@ (800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	08db      	lsrs	r3, r3, #3
 800a252:	f003 0303 	and.w	r3, r3, #3
 800a256:	4a5c      	ldr	r2, [pc, #368]	@ (800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a258:	fa22 f303 	lsr.w	r3, r2, r3
 800a25c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a25e:	e01e      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a260:	4b58      	ldr	r3, [pc, #352]	@ (800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a268:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a26c:	d106      	bne.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800a26e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a270:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a274:	d102      	bne.n	800a27c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a276:	4b55      	ldr	r3, [pc, #340]	@ (800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a278:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a27a:	e010      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a27c:	4b51      	ldr	r3, [pc, #324]	@ (800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a27e:	681b      	ldr	r3, [r3, #0]
 800a280:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a284:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a288:	d106      	bne.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800a28a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a28c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a290:	d102      	bne.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a292:	4b4f      	ldr	r3, [pc, #316]	@ (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a294:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a296:	e002      	b.n	800a29e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a298:	2300      	movs	r3, #0
 800a29a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a29c:	e235      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a29e:	e234      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800a2a0:	4b4c      	ldr	r3, [pc, #304]	@ (800a3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800a2a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2a4:	e231      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a2aa:	e22e      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800a2ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2b0:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800a2b4:	430b      	orrs	r3, r1
 800a2b6:	f040 808f 	bne.w	800a3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800a2ba:	4b42      	ldr	r3, [pc, #264]	@ (800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a2bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a2be:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800a2c2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800a2c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2c6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a2ca:	d06b      	beq.n	800a3a4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800a2cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ce:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800a2d2:	d874      	bhi.n	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a2d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2d6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a2da:	d056      	beq.n	800a38a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800a2dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2de:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a2e2:	d86c      	bhi.n	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a2e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2e6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a2ea:	d03b      	beq.n	800a364 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800a2ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a2f2:	d864      	bhi.n	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a2f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2f6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a2fa:	d021      	beq.n	800a340 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2fe:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a302:	d85c      	bhi.n	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800a304:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a306:	2b00      	cmp	r3, #0
 800a308:	d004      	beq.n	800a314 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800a30a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a30c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a310:	d004      	beq.n	800a31c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800a312:	e054      	b.n	800a3be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800a314:	f7fe fa4c 	bl	80087b0 <HAL_RCC_GetPCLK1Freq>
 800a318:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a31a:	e1f6      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a31c:	4b29      	ldr	r3, [pc, #164]	@ (800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a324:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a328:	d107      	bne.n	800a33a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a32a:	f107 0318 	add.w	r3, r7, #24
 800a32e:	4618      	mov	r0, r3
 800a330:	f000 fa0a 	bl	800a748 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a334:	69fb      	ldr	r3, [r7, #28]
 800a336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a338:	e1e7      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a33a:	2300      	movs	r3, #0
 800a33c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a33e:	e1e4      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a340:	4b20      	ldr	r3, [pc, #128]	@ (800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a348:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a34c:	d107      	bne.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a34e:	f107 030c 	add.w	r3, r7, #12
 800a352:	4618      	mov	r0, r3
 800a354:	f000 fb4c 	bl	800a9f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a35c:	e1d5      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a35e:	2300      	movs	r3, #0
 800a360:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a362:	e1d2      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a364:	4b17      	ldr	r3, [pc, #92]	@ (800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f003 0304 	and.w	r3, r3, #4
 800a36c:	2b04      	cmp	r3, #4
 800a36e:	d109      	bne.n	800a384 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a370:	4b14      	ldr	r3, [pc, #80]	@ (800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	08db      	lsrs	r3, r3, #3
 800a376:	f003 0303 	and.w	r3, r3, #3
 800a37a:	4a13      	ldr	r2, [pc, #76]	@ (800a3c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800a37c:	fa22 f303 	lsr.w	r3, r2, r3
 800a380:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a382:	e1c2      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a384:	2300      	movs	r3, #0
 800a386:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a388:	e1bf      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a38a:	4b0e      	ldr	r3, [pc, #56]	@ (800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a392:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a396:	d102      	bne.n	800a39e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800a398:	4b0c      	ldr	r3, [pc, #48]	@ (800a3cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800a39a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a39c:	e1b5      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3a2:	e1b2      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a3a4:	4b07      	ldr	r3, [pc, #28]	@ (800a3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a3ac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3b0:	d102      	bne.n	800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800a3b2:	4b07      	ldr	r3, [pc, #28]	@ (800a3d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800a3b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a3b6:	e1a8      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a3b8:	2300      	movs	r3, #0
 800a3ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3bc:	e1a5      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a3c2:	e1a2      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a3c4:	58024400 	.word	0x58024400
 800a3c8:	03d09000 	.word	0x03d09000
 800a3cc:	003d0900 	.word	0x003d0900
 800a3d0:	017d7840 	.word	0x017d7840
 800a3d4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800a3d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a3dc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800a3e0:	430b      	orrs	r3, r1
 800a3e2:	d173      	bne.n	800a4cc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800a3e4:	4b9c      	ldr	r3, [pc, #624]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a3e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a3e8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800a3ec:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a3ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3f4:	d02f      	beq.n	800a456 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800a3f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a3fc:	d863      	bhi.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800a3fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a400:	2b00      	cmp	r3, #0
 800a402:	d004      	beq.n	800a40e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800a404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a406:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a40a:	d012      	beq.n	800a432 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800a40c:	e05b      	b.n	800a4c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a40e:	4b92      	ldr	r3, [pc, #584]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a416:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a41a:	d107      	bne.n	800a42c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a41c:	f107 0318 	add.w	r3, r7, #24
 800a420:	4618      	mov	r0, r3
 800a422:	f000 f991 	bl	800a748 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800a426:	69bb      	ldr	r3, [r7, #24]
 800a428:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a42a:	e16e      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a42c:	2300      	movs	r3, #0
 800a42e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a430:	e16b      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a432:	4b89      	ldr	r3, [pc, #548]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a43a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a43e:	d107      	bne.n	800a450 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a440:	f107 030c 	add.w	r3, r7, #12
 800a444:	4618      	mov	r0, r3
 800a446:	f000 fad3 	bl	800a9f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800a44a:	697b      	ldr	r3, [r7, #20]
 800a44c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a44e:	e15c      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a450:	2300      	movs	r3, #0
 800a452:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a454:	e159      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800a456:	4b80      	ldr	r3, [pc, #512]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a45a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a45e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800a460:	4b7d      	ldr	r3, [pc, #500]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	f003 0304 	and.w	r3, r3, #4
 800a468:	2b04      	cmp	r3, #4
 800a46a:	d10c      	bne.n	800a486 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800a46c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d109      	bne.n	800a486 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a472:	4b79      	ldr	r3, [pc, #484]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	08db      	lsrs	r3, r3, #3
 800a478:	f003 0303 	and.w	r3, r3, #3
 800a47c:	4a77      	ldr	r2, [pc, #476]	@ (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a47e:	fa22 f303 	lsr.w	r3, r2, r3
 800a482:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a484:	e01e      	b.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800a486:	4b74      	ldr	r3, [pc, #464]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a48e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a492:	d106      	bne.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800a494:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a496:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a49a:	d102      	bne.n	800a4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800a49c:	4b70      	ldr	r3, [pc, #448]	@ (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a49e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4a0:	e010      	b.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800a4a2:	4b6d      	ldr	r3, [pc, #436]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a4aa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a4ae:	d106      	bne.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800a4b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4b2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a4b6:	d102      	bne.n	800a4be <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800a4b8:	4b6a      	ldr	r3, [pc, #424]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a4ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a4bc:	e002      	b.n	800a4c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800a4be:	2300      	movs	r3, #0
 800a4c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800a4c2:	e122      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a4c4:	e121      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a4c6:	2300      	movs	r3, #0
 800a4c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a4ca:	e11e      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800a4cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a4d0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800a4d4:	430b      	orrs	r3, r1
 800a4d6:	d133      	bne.n	800a540 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800a4d8:	4b5f      	ldr	r3, [pc, #380]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a4e0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a4e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d004      	beq.n	800a4f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800a4e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4ea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a4ee:	d012      	beq.n	800a516 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800a4f0:	e023      	b.n	800a53a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a4f2:	4b59      	ldr	r3, [pc, #356]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a4fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a4fe:	d107      	bne.n	800a510 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a500:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a504:	4618      	mov	r0, r3
 800a506:	f000 fbc7 	bl	800ac98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a50a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a50c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a50e:	e0fc      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a510:	2300      	movs	r3, #0
 800a512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a514:	e0f9      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a516:	4b50      	ldr	r3, [pc, #320]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a518:	681b      	ldr	r3, [r3, #0]
 800a51a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a51e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a522:	d107      	bne.n	800a534 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a524:	f107 0318 	add.w	r3, r7, #24
 800a528:	4618      	mov	r0, r3
 800a52a:	f000 f90d 	bl	800a748 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800a52e:	6a3b      	ldr	r3, [r7, #32]
 800a530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a532:	e0ea      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a534:	2300      	movs	r3, #0
 800a536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a538:	e0e7      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800a53a:	2300      	movs	r3, #0
 800a53c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a53e:	e0e4      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800a540:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a544:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800a548:	430b      	orrs	r3, r1
 800a54a:	f040 808d 	bne.w	800a668 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800a54e:	4b42      	ldr	r3, [pc, #264]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a550:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a552:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800a556:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a55a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a55e:	d06b      	beq.n	800a638 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800a560:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a562:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a566:	d874      	bhi.n	800a652 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a56a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a56e:	d056      	beq.n	800a61e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800a570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a572:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a576:	d86c      	bhi.n	800a652 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a57a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a57e:	d03b      	beq.n	800a5f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800a580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a582:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800a586:	d864      	bhi.n	800a652 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a588:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a58a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a58e:	d021      	beq.n	800a5d4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800a590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a592:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a596:	d85c      	bhi.n	800a652 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800a598:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a59a:	2b00      	cmp	r3, #0
 800a59c:	d004      	beq.n	800a5a8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800a59e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a5a0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5a4:	d004      	beq.n	800a5b0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800a5a6:	e054      	b.n	800a652 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800a5a8:	f000 f8b8 	bl	800a71c <HAL_RCCEx_GetD3PCLK1Freq>
 800a5ac:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800a5ae:	e0ac      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a5b0:	4b29      	ldr	r3, [pc, #164]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a5b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a5bc:	d107      	bne.n	800a5ce <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a5be:	f107 0318 	add.w	r3, r7, #24
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	f000 f8c0 	bl	800a748 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a5c8:	69fb      	ldr	r3, [r7, #28]
 800a5ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5cc:	e09d      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5d2:	e09a      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800a5d4:	4b20      	ldr	r3, [pc, #128]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a5dc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a5e0:	d107      	bne.n	800a5f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800a5e2:	f107 030c 	add.w	r3, r7, #12
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	f000 fa02 	bl	800a9f0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a5f0:	e08b      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a5f2:	2300      	movs	r3, #0
 800a5f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a5f6:	e088      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a5f8:	4b17      	ldr	r3, [pc, #92]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 0304 	and.w	r3, r3, #4
 800a600:	2b04      	cmp	r3, #4
 800a602:	d109      	bne.n	800a618 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a604:	4b14      	ldr	r3, [pc, #80]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	08db      	lsrs	r3, r3, #3
 800a60a:	f003 0303 	and.w	r3, r3, #3
 800a60e:	4a13      	ldr	r2, [pc, #76]	@ (800a65c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800a610:	fa22 f303 	lsr.w	r3, r2, r3
 800a614:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a616:	e078      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a618:	2300      	movs	r3, #0
 800a61a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a61c:	e075      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800a61e:	4b0e      	ldr	r3, [pc, #56]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800a626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a62a:	d102      	bne.n	800a632 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800a62c:	4b0c      	ldr	r3, [pc, #48]	@ (800a660 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800a62e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a630:	e06b      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a632:	2300      	movs	r3, #0
 800a634:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a636:	e068      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a638:	4b07      	ldr	r3, [pc, #28]	@ (800a658 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a640:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a644:	d102      	bne.n	800a64c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800a646:	4b07      	ldr	r3, [pc, #28]	@ (800a664 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800a648:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a64a:	e05e      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a64c:	2300      	movs	r3, #0
 800a64e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a650:	e05b      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800a652:	2300      	movs	r3, #0
 800a654:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a656:	e058      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800a658:	58024400 	.word	0x58024400
 800a65c:	03d09000 	.word	0x03d09000
 800a660:	003d0900 	.word	0x003d0900
 800a664:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800a668:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a66c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800a670:	430b      	orrs	r3, r1
 800a672:	d148      	bne.n	800a706 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800a674:	4b27      	ldr	r3, [pc, #156]	@ (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a676:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a678:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800a67c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800a67e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a680:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a684:	d02a      	beq.n	800a6dc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800a686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a688:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a68c:	d838      	bhi.n	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800a68e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a690:	2b00      	cmp	r3, #0
 800a692:	d004      	beq.n	800a69e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800a694:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a696:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a69a:	d00d      	beq.n	800a6b8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800a69c:	e030      	b.n	800a700 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a69e:	4b1d      	ldr	r3, [pc, #116]	@ (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800a6a6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a6aa:	d102      	bne.n	800a6b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800a6ac:	4b1a      	ldr	r3, [pc, #104]	@ (800a718 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800a6ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6b0:	e02b      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6b2:	2300      	movs	r3, #0
 800a6b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6b6:	e028      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800a6b8:	4b16      	ldr	r3, [pc, #88]	@ (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800a6c0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a6c4:	d107      	bne.n	800a6d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a6c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f000 fae4 	bl	800ac98 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800a6d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6d4:	e019      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6d6:	2300      	movs	r3, #0
 800a6d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6da:	e016      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800a6dc:	4b0d      	ldr	r3, [pc, #52]	@ (800a714 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800a6e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800a6e8:	d107      	bne.n	800a6fa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a6ea:	f107 0318 	add.w	r3, r7, #24
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 f82a 	bl	800a748 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800a6f4:	69fb      	ldr	r3, [r7, #28]
 800a6f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800a6f8:	e007      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a6fe:	e004      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800a700:	2300      	movs	r3, #0
 800a702:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800a704:	e001      	b.n	800a70a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800a706:	2300      	movs	r3, #0
 800a708:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800a70a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a70c:	4618      	mov	r0, r3
 800a70e:	3740      	adds	r7, #64	@ 0x40
 800a710:	46bd      	mov	sp, r7
 800a712:	bd80      	pop	{r7, pc}
 800a714:	58024400 	.word	0x58024400
 800a718:	017d7840 	.word	0x017d7840

0800a71c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800a720:	f7fe f816 	bl	8008750 <HAL_RCC_GetHCLKFreq>
 800a724:	4602      	mov	r2, r0
 800a726:	4b06      	ldr	r3, [pc, #24]	@ (800a740 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800a728:	6a1b      	ldr	r3, [r3, #32]
 800a72a:	091b      	lsrs	r3, r3, #4
 800a72c:	f003 0307 	and.w	r3, r3, #7
 800a730:	4904      	ldr	r1, [pc, #16]	@ (800a744 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800a732:	5ccb      	ldrb	r3, [r1, r3]
 800a734:	f003 031f 	and.w	r3, r3, #31
 800a738:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800a73c:	4618      	mov	r0, r3
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	58024400 	.word	0x58024400
 800a744:	08011c70 	.word	0x08011c70

0800a748 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800a748:	b480      	push	{r7}
 800a74a:	b089      	sub	sp, #36	@ 0x24
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a750:	4ba1      	ldr	r3, [pc, #644]	@ (800a9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a752:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a754:	f003 0303 	and.w	r3, r3, #3
 800a758:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800a75a:	4b9f      	ldr	r3, [pc, #636]	@ (800a9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a75c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a75e:	0b1b      	lsrs	r3, r3, #12
 800a760:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800a764:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800a766:	4b9c      	ldr	r3, [pc, #624]	@ (800a9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a76a:	091b      	lsrs	r3, r3, #4
 800a76c:	f003 0301 	and.w	r3, r3, #1
 800a770:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800a772:	4b99      	ldr	r3, [pc, #612]	@ (800a9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a774:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a776:	08db      	lsrs	r3, r3, #3
 800a778:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a77c:	693a      	ldr	r2, [r7, #16]
 800a77e:	fb02 f303 	mul.w	r3, r2, r3
 800a782:	ee07 3a90 	vmov	s15, r3
 800a786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a78a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800a78e:	697b      	ldr	r3, [r7, #20]
 800a790:	2b00      	cmp	r3, #0
 800a792:	f000 8111 	beq.w	800a9b8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800a796:	69bb      	ldr	r3, [r7, #24]
 800a798:	2b02      	cmp	r3, #2
 800a79a:	f000 8083 	beq.w	800a8a4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800a79e:	69bb      	ldr	r3, [r7, #24]
 800a7a0:	2b02      	cmp	r3, #2
 800a7a2:	f200 80a1 	bhi.w	800a8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800a7a6:	69bb      	ldr	r3, [r7, #24]
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d003      	beq.n	800a7b4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800a7ac:	69bb      	ldr	r3, [r7, #24]
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	d056      	beq.n	800a860 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800a7b2:	e099      	b.n	800a8e8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a7b4:	4b88      	ldr	r3, [pc, #544]	@ (800a9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	f003 0320 	and.w	r3, r3, #32
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d02d      	beq.n	800a81c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a7c0:	4b85      	ldr	r3, [pc, #532]	@ (800a9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7c2:	681b      	ldr	r3, [r3, #0]
 800a7c4:	08db      	lsrs	r3, r3, #3
 800a7c6:	f003 0303 	and.w	r3, r3, #3
 800a7ca:	4a84      	ldr	r2, [pc, #528]	@ (800a9dc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800a7cc:	fa22 f303 	lsr.w	r3, r2, r3
 800a7d0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a7d2:	68bb      	ldr	r3, [r7, #8]
 800a7d4:	ee07 3a90 	vmov	s15, r3
 800a7d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7dc:	697b      	ldr	r3, [r7, #20]
 800a7de:	ee07 3a90 	vmov	s15, r3
 800a7e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a7e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a7ea:	4b7b      	ldr	r3, [pc, #492]	@ (800a9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a7ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a7f2:	ee07 3a90 	vmov	s15, r3
 800a7f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a7fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800a7fe:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800a9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a802:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a806:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a80a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a80e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a812:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a816:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800a81a:	e087      	b.n	800a92c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a81c:	697b      	ldr	r3, [r7, #20]
 800a81e:	ee07 3a90 	vmov	s15, r3
 800a822:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a826:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800a9e4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800a82a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a82e:	4b6a      	ldr	r3, [pc, #424]	@ (800a9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a832:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a836:	ee07 3a90 	vmov	s15, r3
 800a83a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a83e:	ed97 6a03 	vldr	s12, [r7, #12]
 800a842:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800a9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a846:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a84a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a84e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a852:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a856:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a85a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a85e:	e065      	b.n	800a92c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	ee07 3a90 	vmov	s15, r3
 800a866:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a86a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800a9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a86e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a872:	4b59      	ldr	r3, [pc, #356]	@ (800a9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a874:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a876:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a87a:	ee07 3a90 	vmov	s15, r3
 800a87e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a882:	ed97 6a03 	vldr	s12, [r7, #12]
 800a886:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800a9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a88a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a88e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a892:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a896:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a89a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a89e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8a2:	e043      	b.n	800a92c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a8a4:	697b      	ldr	r3, [r7, #20]
 800a8a6:	ee07 3a90 	vmov	s15, r3
 800a8aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8ae:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800a9ec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800a8b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8b6:	4b48      	ldr	r3, [pc, #288]	@ (800a9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a8be:	ee07 3a90 	vmov	s15, r3
 800a8c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a8c6:	ed97 6a03 	vldr	s12, [r7, #12]
 800a8ca:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800a9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a8ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a8d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a8d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a8da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a8de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a8e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a8e6:	e021      	b.n	800a92c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800a8e8:	697b      	ldr	r3, [r7, #20]
 800a8ea:	ee07 3a90 	vmov	s15, r3
 800a8ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a8f2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800a9e8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800a8f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800a8fa:	4b37      	ldr	r3, [pc, #220]	@ (800a9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a8fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a902:	ee07 3a90 	vmov	s15, r3
 800a906:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800a90a:	ed97 6a03 	vldr	s12, [r7, #12]
 800a90e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800a9e0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800a912:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800a916:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800a91a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800a91e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a922:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a926:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800a92a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800a92c:	4b2a      	ldr	r3, [pc, #168]	@ (800a9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a92e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a930:	0a5b      	lsrs	r3, r3, #9
 800a932:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a936:	ee07 3a90 	vmov	s15, r3
 800a93a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a93e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a942:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a946:	edd7 6a07 	vldr	s13, [r7, #28]
 800a94a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a94e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a952:	ee17 2a90 	vmov	r2, s15
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800a95a:	4b1f      	ldr	r3, [pc, #124]	@ (800a9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a95c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a95e:	0c1b      	lsrs	r3, r3, #16
 800a960:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a964:	ee07 3a90 	vmov	s15, r3
 800a968:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a96c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a970:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a974:	edd7 6a07 	vldr	s13, [r7, #28]
 800a978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a97c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a980:	ee17 2a90 	vmov	r2, s15
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800a988:	4b13      	ldr	r3, [pc, #76]	@ (800a9d8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800a98a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a98c:	0e1b      	lsrs	r3, r3, #24
 800a98e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a992:	ee07 3a90 	vmov	s15, r3
 800a996:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800a99a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800a99e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a9a2:	edd7 6a07 	vldr	s13, [r7, #28]
 800a9a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800a9aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800a9ae:	ee17 2a90 	vmov	r2, s15
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800a9b6:	e008      	b.n	800a9ca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	2200      	movs	r2, #0
 800a9bc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	609a      	str	r2, [r3, #8]
}
 800a9ca:	bf00      	nop
 800a9cc:	3724      	adds	r7, #36	@ 0x24
 800a9ce:	46bd      	mov	sp, r7
 800a9d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d4:	4770      	bx	lr
 800a9d6:	bf00      	nop
 800a9d8:	58024400 	.word	0x58024400
 800a9dc:	03d09000 	.word	0x03d09000
 800a9e0:	46000000 	.word	0x46000000
 800a9e4:	4c742400 	.word	0x4c742400
 800a9e8:	4a742400 	.word	0x4a742400
 800a9ec:	4bbebc20 	.word	0x4bbebc20

0800a9f0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	b089      	sub	sp, #36	@ 0x24
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9f8:	4ba1      	ldr	r3, [pc, #644]	@ (800ac80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800a9fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a9fc:	f003 0303 	and.w	r3, r3, #3
 800aa00:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800aa02:	4b9f      	ldr	r3, [pc, #636]	@ (800ac80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa06:	0d1b      	lsrs	r3, r3, #20
 800aa08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800aa0c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800aa0e:	4b9c      	ldr	r3, [pc, #624]	@ (800ac80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aa12:	0a1b      	lsrs	r3, r3, #8
 800aa14:	f003 0301 	and.w	r3, r3, #1
 800aa18:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800aa1a:	4b99      	ldr	r3, [pc, #612]	@ (800ac80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa1e:	08db      	lsrs	r3, r3, #3
 800aa20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa24:	693a      	ldr	r2, [r7, #16]
 800aa26:	fb02 f303 	mul.w	r3, r2, r3
 800aa2a:	ee07 3a90 	vmov	s15, r3
 800aa2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800aa36:	697b      	ldr	r3, [r7, #20]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	f000 8111 	beq.w	800ac60 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800aa3e:	69bb      	ldr	r3, [r7, #24]
 800aa40:	2b02      	cmp	r3, #2
 800aa42:	f000 8083 	beq.w	800ab4c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	2b02      	cmp	r3, #2
 800aa4a:	f200 80a1 	bhi.w	800ab90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800aa4e:	69bb      	ldr	r3, [r7, #24]
 800aa50:	2b00      	cmp	r3, #0
 800aa52:	d003      	beq.n	800aa5c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	2b01      	cmp	r3, #1
 800aa58:	d056      	beq.n	800ab08 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800aa5a:	e099      	b.n	800ab90 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa5c:	4b88      	ldr	r3, [pc, #544]	@ (800ac80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	f003 0320 	and.w	r3, r3, #32
 800aa64:	2b00      	cmp	r3, #0
 800aa66:	d02d      	beq.n	800aac4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa68:	4b85      	ldr	r3, [pc, #532]	@ (800ac80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	08db      	lsrs	r3, r3, #3
 800aa6e:	f003 0303 	and.w	r3, r3, #3
 800aa72:	4a84      	ldr	r2, [pc, #528]	@ (800ac84 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800aa74:	fa22 f303 	lsr.w	r3, r2, r3
 800aa78:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aa7a:	68bb      	ldr	r3, [r7, #8]
 800aa7c:	ee07 3a90 	vmov	s15, r3
 800aa80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa84:	697b      	ldr	r3, [r7, #20]
 800aa86:	ee07 3a90 	vmov	s15, r3
 800aa8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa92:	4b7b      	ldr	r3, [pc, #492]	@ (800ac80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aa94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa9a:	ee07 3a90 	vmov	s15, r3
 800aa9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aaa2:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaa6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800ac88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aaaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aaba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aabe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800aac2:	e087      	b.n	800abd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800aac4:	697b      	ldr	r3, [r7, #20]
 800aac6:	ee07 3a90 	vmov	s15, r3
 800aaca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aace:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800ac8c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800aad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aad6:	4b6a      	ldr	r3, [pc, #424]	@ (800ac80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aade:	ee07 3a90 	vmov	s15, r3
 800aae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aae6:	ed97 6a03 	vldr	s12, [r7, #12]
 800aaea:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800ac88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800aaee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aaf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aaf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800aafa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aafe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab06:	e065      	b.n	800abd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab08:	697b      	ldr	r3, [r7, #20]
 800ab0a:	ee07 3a90 	vmov	s15, r3
 800ab0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab12:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800ac90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ab16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab1a:	4b59      	ldr	r3, [pc, #356]	@ (800ac80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab22:	ee07 3a90 	vmov	s15, r3
 800ab26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab2a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab2e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800ac88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab42:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab46:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab4a:	e043      	b.n	800abd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	ee07 3a90 	vmov	s15, r3
 800ab52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab56:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800ac94 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800ab5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab5e:	4b48      	ldr	r3, [pc, #288]	@ (800ac80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ab60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab66:	ee07 3a90 	vmov	s15, r3
 800ab6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab6e:	ed97 6a03 	vldr	s12, [r7, #12]
 800ab72:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800ac88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800ab76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ab82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab8a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ab8e:	e021      	b.n	800abd4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ab90:	697b      	ldr	r3, [r7, #20]
 800ab92:	ee07 3a90 	vmov	s15, r3
 800ab96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab9a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800ac90 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800ab9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aba2:	4b37      	ldr	r3, [pc, #220]	@ (800ac80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800aba4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800abaa:	ee07 3a90 	vmov	s15, r3
 800abae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800abb2:	ed97 6a03 	vldr	s12, [r7, #12]
 800abb6:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800ac88 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800abba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800abbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800abc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800abc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800abca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800abd2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800abd4:	4b2a      	ldr	r3, [pc, #168]	@ (800ac80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800abd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abd8:	0a5b      	lsrs	r3, r3, #9
 800abda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800abde:	ee07 3a90 	vmov	s15, r3
 800abe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800abe6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800abea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800abee:	edd7 6a07 	vldr	s13, [r7, #28]
 800abf2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abf6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abfa:	ee17 2a90 	vmov	r2, s15
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800ac02:	4b1f      	ldr	r3, [pc, #124]	@ (800ac80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac06:	0c1b      	lsrs	r3, r3, #16
 800ac08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac0c:	ee07 3a90 	vmov	s15, r3
 800ac10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac14:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac18:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac1c:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac24:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac28:	ee17 2a90 	vmov	r2, s15
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800ac30:	4b13      	ldr	r3, [pc, #76]	@ (800ac80 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ac32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ac34:	0e1b      	lsrs	r3, r3, #24
 800ac36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ac3a:	ee07 3a90 	vmov	s15, r3
 800ac3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac42:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ac46:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ac4a:	edd7 6a07 	vldr	s13, [r7, #28]
 800ac4e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ac52:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ac56:	ee17 2a90 	vmov	r2, s15
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800ac5e:	e008      	b.n	800ac72 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	2200      	movs	r2, #0
 800ac64:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	2200      	movs	r2, #0
 800ac6a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	2200      	movs	r2, #0
 800ac70:	609a      	str	r2, [r3, #8]
}
 800ac72:	bf00      	nop
 800ac74:	3724      	adds	r7, #36	@ 0x24
 800ac76:	46bd      	mov	sp, r7
 800ac78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac7c:	4770      	bx	lr
 800ac7e:	bf00      	nop
 800ac80:	58024400 	.word	0x58024400
 800ac84:	03d09000 	.word	0x03d09000
 800ac88:	46000000 	.word	0x46000000
 800ac8c:	4c742400 	.word	0x4c742400
 800ac90:	4a742400 	.word	0x4a742400
 800ac94:	4bbebc20 	.word	0x4bbebc20

0800ac98 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b089      	sub	sp, #36	@ 0x24
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800aca0:	4ba0      	ldr	r3, [pc, #640]	@ (800af24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aca2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aca4:	f003 0303 	and.w	r3, r3, #3
 800aca8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800acaa:	4b9e      	ldr	r3, [pc, #632]	@ (800af24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800acae:	091b      	lsrs	r3, r3, #4
 800acb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800acb4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800acb6:	4b9b      	ldr	r3, [pc, #620]	@ (800af24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acba:	f003 0301 	and.w	r3, r3, #1
 800acbe:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800acc0:	4b98      	ldr	r3, [pc, #608]	@ (800af24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800acc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800acc4:	08db      	lsrs	r3, r3, #3
 800acc6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800acca:	693a      	ldr	r2, [r7, #16]
 800accc:	fb02 f303 	mul.w	r3, r2, r3
 800acd0:	ee07 3a90 	vmov	s15, r3
 800acd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acd8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800acdc:	697b      	ldr	r3, [r7, #20]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	f000 8111 	beq.w	800af06 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	2b02      	cmp	r3, #2
 800ace8:	f000 8083 	beq.w	800adf2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	2b02      	cmp	r3, #2
 800acf0:	f200 80a1 	bhi.w	800ae36 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d003      	beq.n	800ad02 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	2b01      	cmp	r3, #1
 800acfe:	d056      	beq.n	800adae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800ad00:	e099      	b.n	800ae36 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ad02:	4b88      	ldr	r3, [pc, #544]	@ (800af24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f003 0320 	and.w	r3, r3, #32
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d02d      	beq.n	800ad6a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad0e:	4b85      	ldr	r3, [pc, #532]	@ (800af24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad10:	681b      	ldr	r3, [r3, #0]
 800ad12:	08db      	lsrs	r3, r3, #3
 800ad14:	f003 0303 	and.w	r3, r3, #3
 800ad18:	4a83      	ldr	r2, [pc, #524]	@ (800af28 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800ad1a:	fa22 f303 	lsr.w	r3, r2, r3
 800ad1e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad20:	68bb      	ldr	r3, [r7, #8]
 800ad22:	ee07 3a90 	vmov	s15, r3
 800ad26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad2a:	697b      	ldr	r3, [r7, #20]
 800ad2c:	ee07 3a90 	vmov	s15, r3
 800ad30:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad38:	4b7a      	ldr	r3, [pc, #488]	@ (800af24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad40:	ee07 3a90 	vmov	s15, r3
 800ad44:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad48:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad4c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800af2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad50:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad54:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad58:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ad5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad60:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad64:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800ad68:	e087      	b.n	800ae7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad6a:	697b      	ldr	r3, [r7, #20]
 800ad6c:	ee07 3a90 	vmov	s15, r3
 800ad70:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad74:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800af30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ad78:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad7c:	4b69      	ldr	r3, [pc, #420]	@ (800af24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ad7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ad80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad84:	ee07 3a90 	vmov	s15, r3
 800ad88:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad8c:	ed97 6a03 	vldr	s12, [r7, #12]
 800ad90:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800af2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ad94:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad98:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad9c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ada0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ada4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ada8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adac:	e065      	b.n	800ae7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adae:	697b      	ldr	r3, [r7, #20]
 800adb0:	ee07 3a90 	vmov	s15, r3
 800adb4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adb8:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800af34 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800adbc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adc0:	4b58      	ldr	r3, [pc, #352]	@ (800af24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800adc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800adc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adc8:	ee07 3a90 	vmov	s15, r3
 800adcc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800add0:	ed97 6a03 	vldr	s12, [r7, #12]
 800add4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800af2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800add8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800addc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ade0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ade4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ade8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800adf0:	e043      	b.n	800ae7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adf2:	697b      	ldr	r3, [r7, #20]
 800adf4:	ee07 3a90 	vmov	s15, r3
 800adf8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adfc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800af38 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800ae00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae04:	4b47      	ldr	r3, [pc, #284]	@ (800af24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae0c:	ee07 3a90 	vmov	s15, r3
 800ae10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae14:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae18:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800af2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ae1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae30:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae34:	e021      	b.n	800ae7a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ae36:	697b      	ldr	r3, [r7, #20]
 800ae38:	ee07 3a90 	vmov	s15, r3
 800ae3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae40:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800af30 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800ae44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae48:	4b36      	ldr	r3, [pc, #216]	@ (800af24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae50:	ee07 3a90 	vmov	s15, r3
 800ae54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae58:	ed97 6a03 	vldr	s12, [r7, #12]
 800ae5c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800af2c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800ae60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae68:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ae6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae70:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae74:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ae78:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800ae7a:	4b2a      	ldr	r3, [pc, #168]	@ (800af24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800ae7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ae7e:	0a5b      	lsrs	r3, r3, #9
 800ae80:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae84:	ee07 3a90 	vmov	s15, r3
 800ae88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800ae90:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ae94:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae98:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aea0:	ee17 2a90 	vmov	r2, s15
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800aea8:	4b1e      	ldr	r3, [pc, #120]	@ (800af24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aeaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aeac:	0c1b      	lsrs	r3, r3, #16
 800aeae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aeb2:	ee07 3a90 	vmov	s15, r3
 800aeb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aeba:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aebe:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aec2:	edd7 6a07 	vldr	s13, [r7, #28]
 800aec6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aeca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aece:	ee17 2a90 	vmov	r2, s15
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800aed6:	4b13      	ldr	r3, [pc, #76]	@ (800af24 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800aed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aeda:	0e1b      	lsrs	r3, r3, #24
 800aedc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800aee0:	ee07 3a90 	vmov	s15, r3
 800aee4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aee8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800aeec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800aef0:	edd7 6a07 	vldr	s13, [r7, #28]
 800aef4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800aef8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800aefc:	ee17 2a90 	vmov	r2, s15
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800af04:	e008      	b.n	800af18 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	2200      	movs	r2, #0
 800af0a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2200      	movs	r2, #0
 800af10:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	2200      	movs	r2, #0
 800af16:	609a      	str	r2, [r3, #8]
}
 800af18:	bf00      	nop
 800af1a:	3724      	adds	r7, #36	@ 0x24
 800af1c:	46bd      	mov	sp, r7
 800af1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af22:	4770      	bx	lr
 800af24:	58024400 	.word	0x58024400
 800af28:	03d09000 	.word	0x03d09000
 800af2c:	46000000 	.word	0x46000000
 800af30:	4c742400 	.word	0x4c742400
 800af34:	4a742400 	.word	0x4a742400
 800af38:	4bbebc20 	.word	0x4bbebc20

0800af3c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b084      	sub	sp, #16
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800af46:	2300      	movs	r3, #0
 800af48:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800af4a:	4b53      	ldr	r3, [pc, #332]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800af4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af4e:	f003 0303 	and.w	r3, r3, #3
 800af52:	2b03      	cmp	r3, #3
 800af54:	d101      	bne.n	800af5a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800af56:	2301      	movs	r3, #1
 800af58:	e099      	b.n	800b08e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800af5a:	4b4f      	ldr	r3, [pc, #316]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a4e      	ldr	r2, [pc, #312]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800af60:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800af64:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800af66:	f7f7 f879 	bl	800205c <HAL_GetTick>
 800af6a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800af6c:	e008      	b.n	800af80 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800af6e:	f7f7 f875 	bl	800205c <HAL_GetTick>
 800af72:	4602      	mov	r2, r0
 800af74:	68bb      	ldr	r3, [r7, #8]
 800af76:	1ad3      	subs	r3, r2, r3
 800af78:	2b02      	cmp	r3, #2
 800af7a:	d901      	bls.n	800af80 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800af7c:	2303      	movs	r3, #3
 800af7e:	e086      	b.n	800b08e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800af80:	4b45      	ldr	r3, [pc, #276]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d1f0      	bne.n	800af6e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800af8c:	4b42      	ldr	r3, [pc, #264]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800af8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af90:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	031b      	lsls	r3, r3, #12
 800af9a:	493f      	ldr	r1, [pc, #252]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800af9c:	4313      	orrs	r3, r2
 800af9e:	628b      	str	r3, [r1, #40]	@ 0x28
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	685b      	ldr	r3, [r3, #4]
 800afa4:	3b01      	subs	r3, #1
 800afa6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800afaa:	687b      	ldr	r3, [r7, #4]
 800afac:	689b      	ldr	r3, [r3, #8]
 800afae:	3b01      	subs	r3, #1
 800afb0:	025b      	lsls	r3, r3, #9
 800afb2:	b29b      	uxth	r3, r3
 800afb4:	431a      	orrs	r2, r3
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	68db      	ldr	r3, [r3, #12]
 800afba:	3b01      	subs	r3, #1
 800afbc:	041b      	lsls	r3, r3, #16
 800afbe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800afc2:	431a      	orrs	r2, r3
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	691b      	ldr	r3, [r3, #16]
 800afc8:	3b01      	subs	r3, #1
 800afca:	061b      	lsls	r3, r3, #24
 800afcc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800afd0:	4931      	ldr	r1, [pc, #196]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800afd2:	4313      	orrs	r3, r2
 800afd4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800afd6:	4b30      	ldr	r3, [pc, #192]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800afd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afda:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	695b      	ldr	r3, [r3, #20]
 800afe2:	492d      	ldr	r1, [pc, #180]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800afe4:	4313      	orrs	r3, r2
 800afe6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800afe8:	4b2b      	ldr	r3, [pc, #172]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800afea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afec:	f023 0220 	bic.w	r2, r3, #32
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	699b      	ldr	r3, [r3, #24]
 800aff4:	4928      	ldr	r1, [pc, #160]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800aff6:	4313      	orrs	r3, r2
 800aff8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800affa:	4b27      	ldr	r3, [pc, #156]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800affc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800affe:	4a26      	ldr	r2, [pc, #152]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800b000:	f023 0310 	bic.w	r3, r3, #16
 800b004:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b006:	4b24      	ldr	r3, [pc, #144]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800b008:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b00a:	4b24      	ldr	r3, [pc, #144]	@ (800b09c <RCCEx_PLL2_Config+0x160>)
 800b00c:	4013      	ands	r3, r2
 800b00e:	687a      	ldr	r2, [r7, #4]
 800b010:	69d2      	ldr	r2, [r2, #28]
 800b012:	00d2      	lsls	r2, r2, #3
 800b014:	4920      	ldr	r1, [pc, #128]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800b016:	4313      	orrs	r3, r2
 800b018:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b01a:	4b1f      	ldr	r3, [pc, #124]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800b01c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b01e:	4a1e      	ldr	r2, [pc, #120]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800b020:	f043 0310 	orr.w	r3, r3, #16
 800b024:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b026:	683b      	ldr	r3, [r7, #0]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d106      	bne.n	800b03a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b02c:	4b1a      	ldr	r3, [pc, #104]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800b02e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b030:	4a19      	ldr	r2, [pc, #100]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800b032:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800b036:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b038:	e00f      	b.n	800b05a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	d106      	bne.n	800b04e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b040:	4b15      	ldr	r3, [pc, #84]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800b042:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b044:	4a14      	ldr	r2, [pc, #80]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800b046:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b04a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b04c:	e005      	b.n	800b05a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b04e:	4b12      	ldr	r3, [pc, #72]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800b050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b052:	4a11      	ldr	r2, [pc, #68]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800b054:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800b058:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b05a:	4b0f      	ldr	r3, [pc, #60]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	4a0e      	ldr	r2, [pc, #56]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800b060:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b064:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b066:	f7f6 fff9 	bl	800205c <HAL_GetTick>
 800b06a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b06c:	e008      	b.n	800b080 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b06e:	f7f6 fff5 	bl	800205c <HAL_GetTick>
 800b072:	4602      	mov	r2, r0
 800b074:	68bb      	ldr	r3, [r7, #8]
 800b076:	1ad3      	subs	r3, r2, r3
 800b078:	2b02      	cmp	r3, #2
 800b07a:	d901      	bls.n	800b080 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b07c:	2303      	movs	r3, #3
 800b07e:	e006      	b.n	800b08e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b080:	4b05      	ldr	r3, [pc, #20]	@ (800b098 <RCCEx_PLL2_Config+0x15c>)
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d0f0      	beq.n	800b06e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800b08c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b08e:	4618      	mov	r0, r3
 800b090:	3710      	adds	r7, #16
 800b092:	46bd      	mov	sp, r7
 800b094:	bd80      	pop	{r7, pc}
 800b096:	bf00      	nop
 800b098:	58024400 	.word	0x58024400
 800b09c:	ffff0007 	.word	0xffff0007

0800b0a0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b0a0:	b580      	push	{r7, lr}
 800b0a2:	b084      	sub	sp, #16
 800b0a4:	af00      	add	r7, sp, #0
 800b0a6:	6078      	str	r0, [r7, #4]
 800b0a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800b0aa:	2300      	movs	r3, #0
 800b0ac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b0ae:	4b53      	ldr	r3, [pc, #332]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b0b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0b2:	f003 0303 	and.w	r3, r3, #3
 800b0b6:	2b03      	cmp	r3, #3
 800b0b8:	d101      	bne.n	800b0be <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	e099      	b.n	800b1f2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b0be:	4b4f      	ldr	r3, [pc, #316]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	4a4e      	ldr	r2, [pc, #312]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b0c4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b0c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b0ca:	f7f6 ffc7 	bl	800205c <HAL_GetTick>
 800b0ce:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b0d0:	e008      	b.n	800b0e4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b0d2:	f7f6 ffc3 	bl	800205c <HAL_GetTick>
 800b0d6:	4602      	mov	r2, r0
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	1ad3      	subs	r3, r2, r3
 800b0dc:	2b02      	cmp	r3, #2
 800b0de:	d901      	bls.n	800b0e4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800b0e0:	2303      	movs	r3, #3
 800b0e2:	e086      	b.n	800b1f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b0e4:	4b45      	ldr	r3, [pc, #276]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d1f0      	bne.n	800b0d2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b0f0:	4b42      	ldr	r3, [pc, #264]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b0f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0f4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	051b      	lsls	r3, r3, #20
 800b0fe:	493f      	ldr	r1, [pc, #252]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b100:	4313      	orrs	r3, r2
 800b102:	628b      	str	r3, [r1, #40]	@ 0x28
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	3b01      	subs	r3, #1
 800b10a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	689b      	ldr	r3, [r3, #8]
 800b112:	3b01      	subs	r3, #1
 800b114:	025b      	lsls	r3, r3, #9
 800b116:	b29b      	uxth	r3, r3
 800b118:	431a      	orrs	r2, r3
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	68db      	ldr	r3, [r3, #12]
 800b11e:	3b01      	subs	r3, #1
 800b120:	041b      	lsls	r3, r3, #16
 800b122:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800b126:	431a      	orrs	r2, r3
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	691b      	ldr	r3, [r3, #16]
 800b12c:	3b01      	subs	r3, #1
 800b12e:	061b      	lsls	r3, r3, #24
 800b130:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800b134:	4931      	ldr	r1, [pc, #196]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b136:	4313      	orrs	r3, r2
 800b138:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800b13a:	4b30      	ldr	r3, [pc, #192]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b13c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b13e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	695b      	ldr	r3, [r3, #20]
 800b146:	492d      	ldr	r1, [pc, #180]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b148:	4313      	orrs	r3, r2
 800b14a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800b14c:	4b2b      	ldr	r3, [pc, #172]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b14e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b150:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	699b      	ldr	r3, [r3, #24]
 800b158:	4928      	ldr	r1, [pc, #160]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b15a:	4313      	orrs	r3, r2
 800b15c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800b15e:	4b27      	ldr	r3, [pc, #156]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b160:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b162:	4a26      	ldr	r2, [pc, #152]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b168:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800b16a:	4b24      	ldr	r3, [pc, #144]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b16c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b16e:	4b24      	ldr	r3, [pc, #144]	@ (800b200 <RCCEx_PLL3_Config+0x160>)
 800b170:	4013      	ands	r3, r2
 800b172:	687a      	ldr	r2, [r7, #4]
 800b174:	69d2      	ldr	r2, [r2, #28]
 800b176:	00d2      	lsls	r2, r2, #3
 800b178:	4920      	ldr	r1, [pc, #128]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b17a:	4313      	orrs	r3, r2
 800b17c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800b17e:	4b1f      	ldr	r3, [pc, #124]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b180:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b182:	4a1e      	ldr	r2, [pc, #120]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b184:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b188:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d106      	bne.n	800b19e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800b190:	4b1a      	ldr	r3, [pc, #104]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b192:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b194:	4a19      	ldr	r2, [pc, #100]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b196:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800b19a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b19c:	e00f      	b.n	800b1be <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800b19e:	683b      	ldr	r3, [r7, #0]
 800b1a0:	2b01      	cmp	r3, #1
 800b1a2:	d106      	bne.n	800b1b2 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800b1a4:	4b15      	ldr	r3, [pc, #84]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b1a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1a8:	4a14      	ldr	r2, [pc, #80]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b1aa:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800b1ae:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800b1b0:	e005      	b.n	800b1be <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800b1b2:	4b12      	ldr	r3, [pc, #72]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b1b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1b6:	4a11      	ldr	r2, [pc, #68]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b1b8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b1bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800b1be:	4b0f      	ldr	r3, [pc, #60]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	4a0e      	ldr	r2, [pc, #56]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b1c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b1c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b1ca:	f7f6 ff47 	bl	800205c <HAL_GetTick>
 800b1ce:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b1d0:	e008      	b.n	800b1e4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800b1d2:	f7f6 ff43 	bl	800205c <HAL_GetTick>
 800b1d6:	4602      	mov	r2, r0
 800b1d8:	68bb      	ldr	r3, [r7, #8]
 800b1da:	1ad3      	subs	r3, r2, r3
 800b1dc:	2b02      	cmp	r3, #2
 800b1de:	d901      	bls.n	800b1e4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800b1e0:	2303      	movs	r3, #3
 800b1e2:	e006      	b.n	800b1f2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800b1e4:	4b05      	ldr	r3, [pc, #20]	@ (800b1fc <RCCEx_PLL3_Config+0x15c>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d0f0      	beq.n	800b1d2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800b1f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3710      	adds	r7, #16
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
 800b1fa:	bf00      	nop
 800b1fc:	58024400 	.word	0x58024400
 800b200:	ffff0007 	.word	0xffff0007

0800b204 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b082      	sub	sp, #8
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d101      	bne.n	800b216 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b212:	2301      	movs	r3, #1
 800b214:	e042      	b.n	800b29c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d106      	bne.n	800b22e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b228:	6878      	ldr	r0, [r7, #4]
 800b22a:	f7f7 f81f 	bl	800226c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2224      	movs	r2, #36	@ 0x24
 800b232:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	681a      	ldr	r2, [r3, #0]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	f022 0201 	bic.w	r2, r2, #1
 800b244:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d002      	beq.n	800b254 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f001 fa1c 	bl	800c68c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b254:	6878      	ldr	r0, [r7, #4]
 800b256:	f000 fcb1 	bl	800bbbc <UART_SetConfig>
 800b25a:	4603      	mov	r3, r0
 800b25c:	2b01      	cmp	r3, #1
 800b25e:	d101      	bne.n	800b264 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800b260:	2301      	movs	r3, #1
 800b262:	e01b      	b.n	800b29c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	685a      	ldr	r2, [r3, #4]
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	681b      	ldr	r3, [r3, #0]
 800b26e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800b272:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	689a      	ldr	r2, [r3, #8]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800b282:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	681a      	ldr	r2, [r3, #0]
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	681b      	ldr	r3, [r3, #0]
 800b28e:	f042 0201 	orr.w	r2, r2, #1
 800b292:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b294:	6878      	ldr	r0, [r7, #4]
 800b296:	f001 fa9b 	bl	800c7d0 <UART_CheckIdleState>
 800b29a:	4603      	mov	r3, r0
}
 800b29c:	4618      	mov	r0, r3
 800b29e:	3708      	adds	r7, #8
 800b2a0:	46bd      	mov	sp, r7
 800b2a2:	bd80      	pop	{r7, pc}

0800b2a4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b08a      	sub	sp, #40	@ 0x28
 800b2a8:	af02      	add	r7, sp, #8
 800b2aa:	60f8      	str	r0, [r7, #12]
 800b2ac:	60b9      	str	r1, [r7, #8]
 800b2ae:	603b      	str	r3, [r7, #0]
 800b2b0:	4613      	mov	r3, r2
 800b2b2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800b2ba:	2b20      	cmp	r3, #32
 800b2bc:	d17b      	bne.n	800b3b6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	2b00      	cmp	r3, #0
 800b2c2:	d002      	beq.n	800b2ca <HAL_UART_Transmit+0x26>
 800b2c4:	88fb      	ldrh	r3, [r7, #6]
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d101      	bne.n	800b2ce <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	e074      	b.n	800b3b8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b2d6:	68fb      	ldr	r3, [r7, #12]
 800b2d8:	2221      	movs	r2, #33	@ 0x21
 800b2da:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b2de:	f7f6 febd 	bl	800205c <HAL_GetTick>
 800b2e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	88fa      	ldrh	r2, [r7, #6]
 800b2e8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	88fa      	ldrh	r2, [r7, #6]
 800b2f0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b2f4:	68fb      	ldr	r3, [r7, #12]
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b2fc:	d108      	bne.n	800b310 <HAL_UART_Transmit+0x6c>
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	691b      	ldr	r3, [r3, #16]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d104      	bne.n	800b310 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800b306:	2300      	movs	r3, #0
 800b308:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b30a:	68bb      	ldr	r3, [r7, #8]
 800b30c:	61bb      	str	r3, [r7, #24]
 800b30e:	e003      	b.n	800b318 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800b310:	68bb      	ldr	r3, [r7, #8]
 800b312:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b314:	2300      	movs	r3, #0
 800b316:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b318:	e030      	b.n	800b37c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b31a:	683b      	ldr	r3, [r7, #0]
 800b31c:	9300      	str	r3, [sp, #0]
 800b31e:	697b      	ldr	r3, [r7, #20]
 800b320:	2200      	movs	r2, #0
 800b322:	2180      	movs	r1, #128	@ 0x80
 800b324:	68f8      	ldr	r0, [r7, #12]
 800b326:	f001 fafd 	bl	800c924 <UART_WaitOnFlagUntilTimeout>
 800b32a:	4603      	mov	r3, r0
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d005      	beq.n	800b33c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	2220      	movs	r2, #32
 800b334:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800b338:	2303      	movs	r3, #3
 800b33a:	e03d      	b.n	800b3b8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800b33c:	69fb      	ldr	r3, [r7, #28]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d10b      	bne.n	800b35a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b342:	69bb      	ldr	r3, [r7, #24]
 800b344:	881b      	ldrh	r3, [r3, #0]
 800b346:	461a      	mov	r2, r3
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b350:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800b352:	69bb      	ldr	r3, [r7, #24]
 800b354:	3302      	adds	r3, #2
 800b356:	61bb      	str	r3, [r7, #24]
 800b358:	e007      	b.n	800b36a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b35a:	69fb      	ldr	r3, [r7, #28]
 800b35c:	781a      	ldrb	r2, [r3, #0]
 800b35e:	68fb      	ldr	r3, [r7, #12]
 800b360:	681b      	ldr	r3, [r3, #0]
 800b362:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800b364:	69fb      	ldr	r3, [r7, #28]
 800b366:	3301      	adds	r3, #1
 800b368:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b36a:	68fb      	ldr	r3, [r7, #12]
 800b36c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b370:	b29b      	uxth	r3, r3
 800b372:	3b01      	subs	r3, #1
 800b374:	b29a      	uxth	r2, r3
 800b376:	68fb      	ldr	r3, [r7, #12]
 800b378:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 800b37c:	68fb      	ldr	r3, [r7, #12]
 800b37e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800b382:	b29b      	uxth	r3, r3
 800b384:	2b00      	cmp	r3, #0
 800b386:	d1c8      	bne.n	800b31a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	9300      	str	r3, [sp, #0]
 800b38c:	697b      	ldr	r3, [r7, #20]
 800b38e:	2200      	movs	r2, #0
 800b390:	2140      	movs	r1, #64	@ 0x40
 800b392:	68f8      	ldr	r0, [r7, #12]
 800b394:	f001 fac6 	bl	800c924 <UART_WaitOnFlagUntilTimeout>
 800b398:	4603      	mov	r3, r0
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d005      	beq.n	800b3aa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	2220      	movs	r2, #32
 800b3a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800b3a6:	2303      	movs	r3, #3
 800b3a8:	e006      	b.n	800b3b8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b3aa:	68fb      	ldr	r3, [r7, #12]
 800b3ac:	2220      	movs	r2, #32
 800b3ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	e000      	b.n	800b3b8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800b3b6:	2302      	movs	r3, #2
  }
}
 800b3b8:	4618      	mov	r0, r3
 800b3ba:	3720      	adds	r7, #32
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b0ba      	sub	sp, #232	@ 0xe8
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	69db      	ldr	r3, [r3, #28]
 800b3ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	689b      	ldr	r3, [r3, #8]
 800b3e2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b3e6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800b3ea:	f640 030f 	movw	r3, #2063	@ 0x80f
 800b3ee:	4013      	ands	r3, r2
 800b3f0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 800b3f4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b3f8:	2b00      	cmp	r3, #0
 800b3fa:	d11b      	bne.n	800b434 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b3fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b400:	f003 0320 	and.w	r3, r3, #32
 800b404:	2b00      	cmp	r3, #0
 800b406:	d015      	beq.n	800b434 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b40c:	f003 0320 	and.w	r3, r3, #32
 800b410:	2b00      	cmp	r3, #0
 800b412:	d105      	bne.n	800b420 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b414:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b418:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d009      	beq.n	800b434 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b424:	2b00      	cmp	r3, #0
 800b426:	f000 8393 	beq.w	800bb50 <HAL_UART_IRQHandler+0x790>
      {
        huart->RxISR(huart);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b42e:	6878      	ldr	r0, [r7, #4]
 800b430:	4798      	blx	r3
      }
      return;
 800b432:	e38d      	b.n	800bb50 <HAL_UART_IRQHandler+0x790>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b434:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800b438:	2b00      	cmp	r3, #0
 800b43a:	f000 8123 	beq.w	800b684 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b43e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b442:	4b8d      	ldr	r3, [pc, #564]	@ (800b678 <HAL_UART_IRQHandler+0x2b8>)
 800b444:	4013      	ands	r3, r2
 800b446:	2b00      	cmp	r3, #0
 800b448:	d106      	bne.n	800b458 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b44a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800b44e:	4b8b      	ldr	r3, [pc, #556]	@ (800b67c <HAL_UART_IRQHandler+0x2bc>)
 800b450:	4013      	ands	r3, r2
 800b452:	2b00      	cmp	r3, #0
 800b454:	f000 8116 	beq.w	800b684 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b458:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b45c:	f003 0301 	and.w	r3, r3, #1
 800b460:	2b00      	cmp	r3, #0
 800b462:	d011      	beq.n	800b488 <HAL_UART_IRQHandler+0xc8>
 800b464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d00b      	beq.n	800b488 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2201      	movs	r2, #1
 800b476:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b47e:	f043 0201 	orr.w	r2, r3, #1
 800b482:	687b      	ldr	r3, [r7, #4]
 800b484:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b48c:	f003 0302 	and.w	r3, r3, #2
 800b490:	2b00      	cmp	r3, #0
 800b492:	d011      	beq.n	800b4b8 <HAL_UART_IRQHandler+0xf8>
 800b494:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b498:	f003 0301 	and.w	r3, r3, #1
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d00b      	beq.n	800b4b8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	2202      	movs	r2, #2
 800b4a6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4ae:	f043 0204 	orr.w	r2, r3, #4
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b4b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4bc:	f003 0304 	and.w	r3, r3, #4
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d011      	beq.n	800b4e8 <HAL_UART_IRQHandler+0x128>
 800b4c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b4c8:	f003 0301 	and.w	r3, r3, #1
 800b4cc:	2b00      	cmp	r3, #0
 800b4ce:	d00b      	beq.n	800b4e8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	2204      	movs	r2, #4
 800b4d6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b4de:	f043 0202 	orr.w	r2, r3, #2
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b4e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b4ec:	f003 0308 	and.w	r3, r3, #8
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d017      	beq.n	800b524 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b4f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b4f8:	f003 0320 	and.w	r3, r3, #32
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d105      	bne.n	800b50c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800b500:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800b504:	4b5c      	ldr	r3, [pc, #368]	@ (800b678 <HAL_UART_IRQHandler+0x2b8>)
 800b506:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d00b      	beq.n	800b524 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	2208      	movs	r2, #8
 800b512:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b51a:	f043 0208 	orr.w	r2, r3, #8
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b524:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b528:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d012      	beq.n	800b556 <HAL_UART_IRQHandler+0x196>
 800b530:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b534:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d00c      	beq.n	800b556 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800b544:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b54c:	f043 0220 	orr.w	r2, r3, #32
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	f000 82f9 	beq.w	800bb54 <HAL_UART_IRQHandler+0x794>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b562:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b566:	f003 0320 	and.w	r3, r3, #32
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d013      	beq.n	800b596 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b56e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b572:	f003 0320 	and.w	r3, r3, #32
 800b576:	2b00      	cmp	r3, #0
 800b578:	d105      	bne.n	800b586 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b57a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800b57e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b582:	2b00      	cmp	r3, #0
 800b584:	d007      	beq.n	800b596 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 800b586:	687b      	ldr	r3, [r7, #4]
 800b588:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d003      	beq.n	800b596 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800b58e:	687b      	ldr	r3, [r7, #4]
 800b590:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b592:	6878      	ldr	r0, [r7, #4]
 800b594:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800b59c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b5a0:	687b      	ldr	r3, [r7, #4]
 800b5a2:	681b      	ldr	r3, [r3, #0]
 800b5a4:	689b      	ldr	r3, [r3, #8]
 800b5a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5aa:	2b40      	cmp	r3, #64	@ 0x40
 800b5ac:	d005      	beq.n	800b5ba <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b5ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800b5b2:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d054      	beq.n	800b664 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b5ba:	6878      	ldr	r0, [r7, #4]
 800b5bc:	f001 fb08 	bl	800cbd0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	681b      	ldr	r3, [r3, #0]
 800b5c4:	689b      	ldr	r3, [r3, #8]
 800b5c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b5ca:	2b40      	cmp	r3, #64	@ 0x40
 800b5cc:	d146      	bne.n	800b65c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	3308      	adds	r3, #8
 800b5d4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b5d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800b5dc:	e853 3f00 	ldrex	r3, [r3]
 800b5e0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800b5e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800b5e8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b5ec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	3308      	adds	r3, #8
 800b5f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800b5fa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800b5fe:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b602:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800b606:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800b60a:	e841 2300 	strex	r3, r2, [r1]
 800b60e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800b612:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800b616:	2b00      	cmp	r3, #0
 800b618:	d1d9      	bne.n	800b5ce <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b620:	2b00      	cmp	r3, #0
 800b622:	d017      	beq.n	800b654 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b62a:	4a15      	ldr	r2, [pc, #84]	@ (800b680 <HAL_UART_IRQHandler+0x2c0>)
 800b62c:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b634:	4618      	mov	r0, r3
 800b636:	f7fa f923 	bl	8005880 <HAL_DMA_Abort_IT>
 800b63a:	4603      	mov	r3, r0
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d019      	beq.n	800b674 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b640:	687b      	ldr	r3, [r7, #4]
 800b642:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b646:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b648:	687a      	ldr	r2, [r7, #4]
 800b64a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800b64e:	4610      	mov	r0, r2
 800b650:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b652:	e00f      	b.n	800b674 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b654:	6878      	ldr	r0, [r7, #4]
 800b656:	f000 faa7 	bl	800bba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b65a:	e00b      	b.n	800b674 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b65c:	6878      	ldr	r0, [r7, #4]
 800b65e:	f000 faa3 	bl	800bba8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b662:	e007      	b.n	800b674 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 fa9f 	bl	800bba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	2200      	movs	r2, #0
 800b66e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800b672:	e26f      	b.n	800bb54 <HAL_UART_IRQHandler+0x794>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b674:	bf00      	nop
    return;
 800b676:	e26d      	b.n	800bb54 <HAL_UART_IRQHandler+0x794>
 800b678:	10000001 	.word	0x10000001
 800b67c:	04000120 	.word	0x04000120
 800b680:	0800ce83 	.word	0x0800ce83

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b688:	2b01      	cmp	r3, #1
 800b68a:	f040 8203 	bne.w	800ba94 <HAL_UART_IRQHandler+0x6d4>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b68e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800b692:	f003 0310 	and.w	r3, r3, #16
 800b696:	2b00      	cmp	r3, #0
 800b698:	f000 81fc 	beq.w	800ba94 <HAL_UART_IRQHandler+0x6d4>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b69c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800b6a0:	f003 0310 	and.w	r3, r3, #16
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	f000 81f5 	beq.w	800ba94 <HAL_UART_IRQHandler+0x6d4>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	2210      	movs	r2, #16
 800b6b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	689b      	ldr	r3, [r3, #8]
 800b6b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b6bc:	2b40      	cmp	r3, #64	@ 0x40
 800b6be:	f040 816d 	bne.w	800b99c <HAL_UART_IRQHandler+0x5dc>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b6c2:	687b      	ldr	r3, [r7, #4]
 800b6c4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4aa4      	ldr	r2, [pc, #656]	@ (800b95c <HAL_UART_IRQHandler+0x59c>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d068      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x3e2>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	4aa1      	ldr	r2, [pc, #644]	@ (800b960 <HAL_UART_IRQHandler+0x5a0>)
 800b6da:	4293      	cmp	r3, r2
 800b6dc:	d061      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x3e2>
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	4a9f      	ldr	r2, [pc, #636]	@ (800b964 <HAL_UART_IRQHandler+0x5a4>)
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d05a      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x3e2>
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4a9c      	ldr	r2, [pc, #624]	@ (800b968 <HAL_UART_IRQHandler+0x5a8>)
 800b6f6:	4293      	cmp	r3, r2
 800b6f8:	d053      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x3e2>
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	4a9a      	ldr	r2, [pc, #616]	@ (800b96c <HAL_UART_IRQHandler+0x5ac>)
 800b704:	4293      	cmp	r3, r2
 800b706:	d04c      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x3e2>
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	4a97      	ldr	r2, [pc, #604]	@ (800b970 <HAL_UART_IRQHandler+0x5b0>)
 800b712:	4293      	cmp	r3, r2
 800b714:	d045      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x3e2>
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	4a95      	ldr	r2, [pc, #596]	@ (800b974 <HAL_UART_IRQHandler+0x5b4>)
 800b720:	4293      	cmp	r3, r2
 800b722:	d03e      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x3e2>
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	4a92      	ldr	r2, [pc, #584]	@ (800b978 <HAL_UART_IRQHandler+0x5b8>)
 800b72e:	4293      	cmp	r3, r2
 800b730:	d037      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x3e2>
 800b732:	687b      	ldr	r3, [r7, #4]
 800b734:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	4a90      	ldr	r2, [pc, #576]	@ (800b97c <HAL_UART_IRQHandler+0x5bc>)
 800b73c:	4293      	cmp	r3, r2
 800b73e:	d030      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x3e2>
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	4a8d      	ldr	r2, [pc, #564]	@ (800b980 <HAL_UART_IRQHandler+0x5c0>)
 800b74a:	4293      	cmp	r3, r2
 800b74c:	d029      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x3e2>
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	4a8b      	ldr	r2, [pc, #556]	@ (800b984 <HAL_UART_IRQHandler+0x5c4>)
 800b758:	4293      	cmp	r3, r2
 800b75a:	d022      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x3e2>
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	4a88      	ldr	r2, [pc, #544]	@ (800b988 <HAL_UART_IRQHandler+0x5c8>)
 800b766:	4293      	cmp	r3, r2
 800b768:	d01b      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x3e2>
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	4a86      	ldr	r2, [pc, #536]	@ (800b98c <HAL_UART_IRQHandler+0x5cc>)
 800b774:	4293      	cmp	r3, r2
 800b776:	d014      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x3e2>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	4a83      	ldr	r2, [pc, #524]	@ (800b990 <HAL_UART_IRQHandler+0x5d0>)
 800b782:	4293      	cmp	r3, r2
 800b784:	d00d      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x3e2>
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	4a81      	ldr	r2, [pc, #516]	@ (800b994 <HAL_UART_IRQHandler+0x5d4>)
 800b790:	4293      	cmp	r3, r2
 800b792:	d006      	beq.n	800b7a2 <HAL_UART_IRQHandler+0x3e2>
 800b794:	687b      	ldr	r3, [r7, #4]
 800b796:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	4a7e      	ldr	r2, [pc, #504]	@ (800b998 <HAL_UART_IRQHandler+0x5d8>)
 800b79e:	4293      	cmp	r3, r2
 800b7a0:	d106      	bne.n	800b7b0 <HAL_UART_IRQHandler+0x3f0>
 800b7a2:	687b      	ldr	r3, [r7, #4]
 800b7a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	b29b      	uxth	r3, r3
 800b7ae:	e005      	b.n	800b7bc <HAL_UART_IRQHandler+0x3fc>
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	685b      	ldr	r3, [r3, #4]
 800b7ba:	b29b      	uxth	r3, r3
 800b7bc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800b7c0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	f000 80ad 	beq.w	800b924 <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b7d0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	f080 80a5 	bcs.w	800b924 <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b7e0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b7ea:	69db      	ldr	r3, [r3, #28]
 800b7ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b7f0:	f000 8087 	beq.w	800b902 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800b800:	e853 3f00 	ldrex	r3, [r3]
 800b804:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800b808:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b80c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800b810:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	461a      	mov	r2, r3
 800b81a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800b81e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800b822:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b826:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800b82a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800b82e:	e841 2300 	strex	r3, r2, [r1]
 800b832:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800b836:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d1da      	bne.n	800b7f4 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	3308      	adds	r3, #8
 800b844:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b846:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b848:	e853 3f00 	ldrex	r3, [r3]
 800b84c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800b84e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b850:	f023 0301 	bic.w	r3, r3, #1
 800b854:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	3308      	adds	r3, #8
 800b85e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800b862:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b866:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b868:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800b86a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800b86e:	e841 2300 	strex	r3, r2, [r1]
 800b872:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800b874:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b876:	2b00      	cmp	r3, #0
 800b878:	d1e1      	bne.n	800b83e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b87a:	687b      	ldr	r3, [r7, #4]
 800b87c:	681b      	ldr	r3, [r3, #0]
 800b87e:	3308      	adds	r3, #8
 800b880:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b882:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b884:	e853 3f00 	ldrex	r3, [r3]
 800b888:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800b88a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b88c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b890:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	3308      	adds	r3, #8
 800b89a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800b89e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b8a0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8a2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800b8a4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800b8a6:	e841 2300 	strex	r3, r2, [r1]
 800b8aa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800b8ac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d1e3      	bne.n	800b87a <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2220      	movs	r2, #32
 800b8b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b8c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b8c8:	e853 3f00 	ldrex	r3, [r3]
 800b8cc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800b8ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800b8d0:	f023 0310 	bic.w	r3, r3, #16
 800b8d4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	461a      	mov	r2, r3
 800b8de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800b8e2:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b8e4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b8e6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800b8e8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800b8ea:	e841 2300 	strex	r3, r2, [r1]
 800b8ee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800b8f0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d1e4      	bne.n	800b8c0 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b8fc:	4618      	mov	r0, r3
 800b8fe:	f7f9 fca1 	bl	8005244 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2202      	movs	r2, #2
 800b906:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b914:	b29b      	uxth	r3, r3
 800b916:	1ad3      	subs	r3, r2, r3
 800b918:	b29b      	uxth	r3, r3
 800b91a:	4619      	mov	r1, r3
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f7f6 fa89 	bl	8001e34 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800b922:	e119      	b.n	800bb58 <HAL_UART_IRQHandler+0x798>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b92a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800b92e:	429a      	cmp	r2, r3
 800b930:	f040 8112 	bne.w	800bb58 <HAL_UART_IRQHandler+0x798>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800b93a:	69db      	ldr	r3, [r3, #28]
 800b93c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b940:	f040 810a 	bne.w	800bb58 <HAL_UART_IRQHandler+0x798>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2202      	movs	r2, #2
 800b948:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800b950:	4619      	mov	r1, r3
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f7f6 fa6e 	bl	8001e34 <HAL_UARTEx_RxEventCallback>
      return;
 800b958:	e0fe      	b.n	800bb58 <HAL_UART_IRQHandler+0x798>
 800b95a:	bf00      	nop
 800b95c:	40020010 	.word	0x40020010
 800b960:	40020028 	.word	0x40020028
 800b964:	40020040 	.word	0x40020040
 800b968:	40020058 	.word	0x40020058
 800b96c:	40020070 	.word	0x40020070
 800b970:	40020088 	.word	0x40020088
 800b974:	400200a0 	.word	0x400200a0
 800b978:	400200b8 	.word	0x400200b8
 800b97c:	40020410 	.word	0x40020410
 800b980:	40020428 	.word	0x40020428
 800b984:	40020440 	.word	0x40020440
 800b988:	40020458 	.word	0x40020458
 800b98c:	40020470 	.word	0x40020470
 800b990:	40020488 	.word	0x40020488
 800b994:	400204a0 	.word	0x400204a0
 800b998:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b9a8:	b29b      	uxth	r3, r3
 800b9aa:	1ad3      	subs	r3, r2, r3
 800b9ac:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800b9b6:	b29b      	uxth	r3, r3
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	f000 80cf 	beq.w	800bb5c <HAL_UART_IRQHandler+0x79c>
          && (nb_rx_data > 0U))
 800b9be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	f000 80ca 	beq.w	800bb5c <HAL_UART_IRQHandler+0x79c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b9d0:	e853 3f00 	ldrex	r3, [r3]
 800b9d4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800b9d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b9d8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800b9dc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	461a      	mov	r2, r3
 800b9e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800b9ea:	647b      	str	r3, [r7, #68]	@ 0x44
 800b9ec:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b9ee:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800b9f0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b9f2:	e841 2300 	strex	r3, r2, [r1]
 800b9f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800b9f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d1e4      	bne.n	800b9c8 <HAL_UART_IRQHandler+0x608>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	3308      	adds	r3, #8
 800ba04:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba08:	e853 3f00 	ldrex	r3, [r3]
 800ba0c:	623b      	str	r3, [r7, #32]
   return(result);
 800ba0e:	6a3a      	ldr	r2, [r7, #32]
 800ba10:	4b55      	ldr	r3, [pc, #340]	@ (800bb68 <HAL_UART_IRQHandler+0x7a8>)
 800ba12:	4013      	ands	r3, r2
 800ba14:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	3308      	adds	r3, #8
 800ba1e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800ba22:	633a      	str	r2, [r7, #48]	@ 0x30
 800ba24:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba26:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800ba28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ba2a:	e841 2300 	strex	r3, r2, [r1]
 800ba2e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800ba30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ba32:	2b00      	cmp	r3, #0
 800ba34:	d1e3      	bne.n	800b9fe <HAL_UART_IRQHandler+0x63e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	2220      	movs	r2, #32
 800ba3a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	2200      	movs	r2, #0
 800ba42:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2200      	movs	r2, #0
 800ba48:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba50:	693b      	ldr	r3, [r7, #16]
 800ba52:	e853 3f00 	ldrex	r3, [r3]
 800ba56:	60fb      	str	r3, [r7, #12]
   return(result);
 800ba58:	68fb      	ldr	r3, [r7, #12]
 800ba5a:	f023 0310 	bic.w	r3, r3, #16
 800ba5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	681b      	ldr	r3, [r3, #0]
 800ba66:	461a      	mov	r2, r3
 800ba68:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ba6c:	61fb      	str	r3, [r7, #28]
 800ba6e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba70:	69b9      	ldr	r1, [r7, #24]
 800ba72:	69fa      	ldr	r2, [r7, #28]
 800ba74:	e841 2300 	strex	r3, r2, [r1]
 800ba78:	617b      	str	r3, [r7, #20]
   return(result);
 800ba7a:	697b      	ldr	r3, [r7, #20]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d1e4      	bne.n	800ba4a <HAL_UART_IRQHandler+0x68a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba80:	687b      	ldr	r3, [r7, #4]
 800ba82:	2202      	movs	r2, #2
 800ba84:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800ba86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800ba8a:	4619      	mov	r1, r3
 800ba8c:	6878      	ldr	r0, [r7, #4]
 800ba8e:	f7f6 f9d1 	bl	8001e34 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ba92:	e063      	b.n	800bb5c <HAL_UART_IRQHandler+0x79c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800ba94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800ba98:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d00e      	beq.n	800babe <HAL_UART_IRQHandler+0x6fe>
 800baa0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800baa4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d008      	beq.n	800babe <HAL_UART_IRQHandler+0x6fe>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	681b      	ldr	r3, [r3, #0]
 800bab0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800bab4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f001 fa20 	bl	800cefc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800babc:	e051      	b.n	800bb62 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800babe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d014      	beq.n	800baf4 <HAL_UART_IRQHandler+0x734>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800baca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	d105      	bne.n	800bae2 <HAL_UART_IRQHandler+0x722>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800bada:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d008      	beq.n	800baf4 <HAL_UART_IRQHandler+0x734>
  {
    if (huart->TxISR != NULL)
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d03a      	beq.n	800bb60 <HAL_UART_IRQHandler+0x7a0>
    {
      huart->TxISR(huart);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800baee:	6878      	ldr	r0, [r7, #4]
 800baf0:	4798      	blx	r3
    }
    return;
 800baf2:	e035      	b.n	800bb60 <HAL_UART_IRQHandler+0x7a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800baf4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800baf8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d009      	beq.n	800bb14 <HAL_UART_IRQHandler+0x754>
 800bb00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bb08:	2b00      	cmp	r3, #0
 800bb0a:	d003      	beq.n	800bb14 <HAL_UART_IRQHandler+0x754>
  {
    UART_EndTransmit_IT(huart);
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f001 f9ca 	bl	800cea6 <UART_EndTransmit_IT>
    return;
 800bb12:	e026      	b.n	800bb62 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bb14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb18:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800bb1c:	2b00      	cmp	r3, #0
 800bb1e:	d009      	beq.n	800bb34 <HAL_UART_IRQHandler+0x774>
 800bb20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb24:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d003      	beq.n	800bb34 <HAL_UART_IRQHandler+0x774>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bb2c:	6878      	ldr	r0, [r7, #4]
 800bb2e:	f001 f9f9 	bl	800cf24 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb32:	e016      	b.n	800bb62 <HAL_UART_IRQHandler+0x7a2>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bb34:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800bb38:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800bb3c:	2b00      	cmp	r3, #0
 800bb3e:	d010      	beq.n	800bb62 <HAL_UART_IRQHandler+0x7a2>
 800bb40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	da0c      	bge.n	800bb62 <HAL_UART_IRQHandler+0x7a2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bb48:	6878      	ldr	r0, [r7, #4]
 800bb4a:	f001 f9e1 	bl	800cf10 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800bb4e:	e008      	b.n	800bb62 <HAL_UART_IRQHandler+0x7a2>
      return;
 800bb50:	bf00      	nop
 800bb52:	e006      	b.n	800bb62 <HAL_UART_IRQHandler+0x7a2>
    return;
 800bb54:	bf00      	nop
 800bb56:	e004      	b.n	800bb62 <HAL_UART_IRQHandler+0x7a2>
      return;
 800bb58:	bf00      	nop
 800bb5a:	e002      	b.n	800bb62 <HAL_UART_IRQHandler+0x7a2>
      return;
 800bb5c:	bf00      	nop
 800bb5e:	e000      	b.n	800bb62 <HAL_UART_IRQHandler+0x7a2>
    return;
 800bb60:	bf00      	nop
  }
}
 800bb62:	37e8      	adds	r7, #232	@ 0xe8
 800bb64:	46bd      	mov	sp, r7
 800bb66:	bd80      	pop	{r7, pc}
 800bb68:	effffffe 	.word	0xeffffffe

0800bb6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb6c:	b480      	push	{r7}
 800bb6e:	b083      	sub	sp, #12
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bb74:	bf00      	nop
 800bb76:	370c      	adds	r7, #12
 800bb78:	46bd      	mov	sp, r7
 800bb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb7e:	4770      	bx	lr

0800bb80 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800bb80:	b480      	push	{r7}
 800bb82:	b083      	sub	sp, #12
 800bb84:	af00      	add	r7, sp, #0
 800bb86:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 800bb88:	bf00      	nop
 800bb8a:	370c      	adds	r7, #12
 800bb8c:	46bd      	mov	sp, r7
 800bb8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb92:	4770      	bx	lr

0800bb94 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800bb94:	b480      	push	{r7}
 800bb96:	b083      	sub	sp, #12
 800bb98:	af00      	add	r7, sp, #0
 800bb9a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800bb9c:	bf00      	nop
 800bb9e:	370c      	adds	r7, #12
 800bba0:	46bd      	mov	sp, r7
 800bba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bba6:	4770      	bx	lr

0800bba8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b083      	sub	sp, #12
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bbb0:	bf00      	nop
 800bbb2:	370c      	adds	r7, #12
 800bbb4:	46bd      	mov	sp, r7
 800bbb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbba:	4770      	bx	lr

0800bbbc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bbbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bbc0:	b092      	sub	sp, #72	@ 0x48
 800bbc2:	af00      	add	r7, sp, #0
 800bbc4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800bbc6:	2300      	movs	r3, #0
 800bbc8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bbcc:	697b      	ldr	r3, [r7, #20]
 800bbce:	689a      	ldr	r2, [r3, #8]
 800bbd0:	697b      	ldr	r3, [r7, #20]
 800bbd2:	691b      	ldr	r3, [r3, #16]
 800bbd4:	431a      	orrs	r2, r3
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	695b      	ldr	r3, [r3, #20]
 800bbda:	431a      	orrs	r2, r3
 800bbdc:	697b      	ldr	r3, [r7, #20]
 800bbde:	69db      	ldr	r3, [r3, #28]
 800bbe0:	4313      	orrs	r3, r2
 800bbe2:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bbe4:	697b      	ldr	r3, [r7, #20]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	681a      	ldr	r2, [r3, #0]
 800bbea:	4bbe      	ldr	r3, [pc, #760]	@ (800bee4 <UART_SetConfig+0x328>)
 800bbec:	4013      	ands	r3, r2
 800bbee:	697a      	ldr	r2, [r7, #20]
 800bbf0:	6812      	ldr	r2, [r2, #0]
 800bbf2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bbf4:	430b      	orrs	r3, r1
 800bbf6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bbf8:	697b      	ldr	r3, [r7, #20]
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	685b      	ldr	r3, [r3, #4]
 800bbfe:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	68da      	ldr	r2, [r3, #12]
 800bc06:	697b      	ldr	r3, [r7, #20]
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	430a      	orrs	r2, r1
 800bc0c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bc0e:	697b      	ldr	r3, [r7, #20]
 800bc10:	699b      	ldr	r3, [r3, #24]
 800bc12:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bc14:	697b      	ldr	r3, [r7, #20]
 800bc16:	681b      	ldr	r3, [r3, #0]
 800bc18:	4ab3      	ldr	r2, [pc, #716]	@ (800bee8 <UART_SetConfig+0x32c>)
 800bc1a:	4293      	cmp	r3, r2
 800bc1c:	d004      	beq.n	800bc28 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bc1e:	697b      	ldr	r3, [r7, #20]
 800bc20:	6a1b      	ldr	r3, [r3, #32]
 800bc22:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800bc24:	4313      	orrs	r3, r2
 800bc26:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bc28:	697b      	ldr	r3, [r7, #20]
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	689a      	ldr	r2, [r3, #8]
 800bc2e:	4baf      	ldr	r3, [pc, #700]	@ (800beec <UART_SetConfig+0x330>)
 800bc30:	4013      	ands	r3, r2
 800bc32:	697a      	ldr	r2, [r7, #20]
 800bc34:	6812      	ldr	r2, [r2, #0]
 800bc36:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800bc38:	430b      	orrs	r3, r1
 800bc3a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bc3c:	697b      	ldr	r3, [r7, #20]
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc42:	f023 010f 	bic.w	r1, r3, #15
 800bc46:	697b      	ldr	r3, [r7, #20]
 800bc48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc4a:	697b      	ldr	r3, [r7, #20]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	430a      	orrs	r2, r1
 800bc50:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc52:	697b      	ldr	r3, [r7, #20]
 800bc54:	681b      	ldr	r3, [r3, #0]
 800bc56:	4aa6      	ldr	r2, [pc, #664]	@ (800bef0 <UART_SetConfig+0x334>)
 800bc58:	4293      	cmp	r3, r2
 800bc5a:	d177      	bne.n	800bd4c <UART_SetConfig+0x190>
 800bc5c:	4ba5      	ldr	r3, [pc, #660]	@ (800bef4 <UART_SetConfig+0x338>)
 800bc5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc60:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bc64:	2b28      	cmp	r3, #40	@ 0x28
 800bc66:	d86d      	bhi.n	800bd44 <UART_SetConfig+0x188>
 800bc68:	a201      	add	r2, pc, #4	@ (adr r2, 800bc70 <UART_SetConfig+0xb4>)
 800bc6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc6e:	bf00      	nop
 800bc70:	0800bd15 	.word	0x0800bd15
 800bc74:	0800bd45 	.word	0x0800bd45
 800bc78:	0800bd45 	.word	0x0800bd45
 800bc7c:	0800bd45 	.word	0x0800bd45
 800bc80:	0800bd45 	.word	0x0800bd45
 800bc84:	0800bd45 	.word	0x0800bd45
 800bc88:	0800bd45 	.word	0x0800bd45
 800bc8c:	0800bd45 	.word	0x0800bd45
 800bc90:	0800bd1d 	.word	0x0800bd1d
 800bc94:	0800bd45 	.word	0x0800bd45
 800bc98:	0800bd45 	.word	0x0800bd45
 800bc9c:	0800bd45 	.word	0x0800bd45
 800bca0:	0800bd45 	.word	0x0800bd45
 800bca4:	0800bd45 	.word	0x0800bd45
 800bca8:	0800bd45 	.word	0x0800bd45
 800bcac:	0800bd45 	.word	0x0800bd45
 800bcb0:	0800bd25 	.word	0x0800bd25
 800bcb4:	0800bd45 	.word	0x0800bd45
 800bcb8:	0800bd45 	.word	0x0800bd45
 800bcbc:	0800bd45 	.word	0x0800bd45
 800bcc0:	0800bd45 	.word	0x0800bd45
 800bcc4:	0800bd45 	.word	0x0800bd45
 800bcc8:	0800bd45 	.word	0x0800bd45
 800bccc:	0800bd45 	.word	0x0800bd45
 800bcd0:	0800bd2d 	.word	0x0800bd2d
 800bcd4:	0800bd45 	.word	0x0800bd45
 800bcd8:	0800bd45 	.word	0x0800bd45
 800bcdc:	0800bd45 	.word	0x0800bd45
 800bce0:	0800bd45 	.word	0x0800bd45
 800bce4:	0800bd45 	.word	0x0800bd45
 800bce8:	0800bd45 	.word	0x0800bd45
 800bcec:	0800bd45 	.word	0x0800bd45
 800bcf0:	0800bd35 	.word	0x0800bd35
 800bcf4:	0800bd45 	.word	0x0800bd45
 800bcf8:	0800bd45 	.word	0x0800bd45
 800bcfc:	0800bd45 	.word	0x0800bd45
 800bd00:	0800bd45 	.word	0x0800bd45
 800bd04:	0800bd45 	.word	0x0800bd45
 800bd08:	0800bd45 	.word	0x0800bd45
 800bd0c:	0800bd45 	.word	0x0800bd45
 800bd10:	0800bd3d 	.word	0x0800bd3d
 800bd14:	2301      	movs	r3, #1
 800bd16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd1a:	e222      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bd1c:	2304      	movs	r3, #4
 800bd1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd22:	e21e      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bd24:	2308      	movs	r3, #8
 800bd26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd2a:	e21a      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bd2c:	2310      	movs	r3, #16
 800bd2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd32:	e216      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bd34:	2320      	movs	r3, #32
 800bd36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd3a:	e212      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bd3c:	2340      	movs	r3, #64	@ 0x40
 800bd3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd42:	e20e      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bd44:	2380      	movs	r3, #128	@ 0x80
 800bd46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd4a:	e20a      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	681b      	ldr	r3, [r3, #0]
 800bd50:	4a69      	ldr	r2, [pc, #420]	@ (800bef8 <UART_SetConfig+0x33c>)
 800bd52:	4293      	cmp	r3, r2
 800bd54:	d130      	bne.n	800bdb8 <UART_SetConfig+0x1fc>
 800bd56:	4b67      	ldr	r3, [pc, #412]	@ (800bef4 <UART_SetConfig+0x338>)
 800bd58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bd5a:	f003 0307 	and.w	r3, r3, #7
 800bd5e:	2b05      	cmp	r3, #5
 800bd60:	d826      	bhi.n	800bdb0 <UART_SetConfig+0x1f4>
 800bd62:	a201      	add	r2, pc, #4	@ (adr r2, 800bd68 <UART_SetConfig+0x1ac>)
 800bd64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd68:	0800bd81 	.word	0x0800bd81
 800bd6c:	0800bd89 	.word	0x0800bd89
 800bd70:	0800bd91 	.word	0x0800bd91
 800bd74:	0800bd99 	.word	0x0800bd99
 800bd78:	0800bda1 	.word	0x0800bda1
 800bd7c:	0800bda9 	.word	0x0800bda9
 800bd80:	2300      	movs	r3, #0
 800bd82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd86:	e1ec      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bd88:	2304      	movs	r3, #4
 800bd8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd8e:	e1e8      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bd90:	2308      	movs	r3, #8
 800bd92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd96:	e1e4      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bd98:	2310      	movs	r3, #16
 800bd9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bd9e:	e1e0      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bda0:	2320      	movs	r3, #32
 800bda2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bda6:	e1dc      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bda8:	2340      	movs	r3, #64	@ 0x40
 800bdaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdae:	e1d8      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bdb0:	2380      	movs	r3, #128	@ 0x80
 800bdb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdb6:	e1d4      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bdb8:	697b      	ldr	r3, [r7, #20]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	4a4f      	ldr	r2, [pc, #316]	@ (800befc <UART_SetConfig+0x340>)
 800bdbe:	4293      	cmp	r3, r2
 800bdc0:	d130      	bne.n	800be24 <UART_SetConfig+0x268>
 800bdc2:	4b4c      	ldr	r3, [pc, #304]	@ (800bef4 <UART_SetConfig+0x338>)
 800bdc4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bdc6:	f003 0307 	and.w	r3, r3, #7
 800bdca:	2b05      	cmp	r3, #5
 800bdcc:	d826      	bhi.n	800be1c <UART_SetConfig+0x260>
 800bdce:	a201      	add	r2, pc, #4	@ (adr r2, 800bdd4 <UART_SetConfig+0x218>)
 800bdd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bdd4:	0800bded 	.word	0x0800bded
 800bdd8:	0800bdf5 	.word	0x0800bdf5
 800bddc:	0800bdfd 	.word	0x0800bdfd
 800bde0:	0800be05 	.word	0x0800be05
 800bde4:	0800be0d 	.word	0x0800be0d
 800bde8:	0800be15 	.word	0x0800be15
 800bdec:	2300      	movs	r3, #0
 800bdee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdf2:	e1b6      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bdf4:	2304      	movs	r3, #4
 800bdf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bdfa:	e1b2      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bdfc:	2308      	movs	r3, #8
 800bdfe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be02:	e1ae      	b.n	800c162 <UART_SetConfig+0x5a6>
 800be04:	2310      	movs	r3, #16
 800be06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be0a:	e1aa      	b.n	800c162 <UART_SetConfig+0x5a6>
 800be0c:	2320      	movs	r3, #32
 800be0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be12:	e1a6      	b.n	800c162 <UART_SetConfig+0x5a6>
 800be14:	2340      	movs	r3, #64	@ 0x40
 800be16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be1a:	e1a2      	b.n	800c162 <UART_SetConfig+0x5a6>
 800be1c:	2380      	movs	r3, #128	@ 0x80
 800be1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be22:	e19e      	b.n	800c162 <UART_SetConfig+0x5a6>
 800be24:	697b      	ldr	r3, [r7, #20]
 800be26:	681b      	ldr	r3, [r3, #0]
 800be28:	4a35      	ldr	r2, [pc, #212]	@ (800bf00 <UART_SetConfig+0x344>)
 800be2a:	4293      	cmp	r3, r2
 800be2c:	d130      	bne.n	800be90 <UART_SetConfig+0x2d4>
 800be2e:	4b31      	ldr	r3, [pc, #196]	@ (800bef4 <UART_SetConfig+0x338>)
 800be30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be32:	f003 0307 	and.w	r3, r3, #7
 800be36:	2b05      	cmp	r3, #5
 800be38:	d826      	bhi.n	800be88 <UART_SetConfig+0x2cc>
 800be3a:	a201      	add	r2, pc, #4	@ (adr r2, 800be40 <UART_SetConfig+0x284>)
 800be3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be40:	0800be59 	.word	0x0800be59
 800be44:	0800be61 	.word	0x0800be61
 800be48:	0800be69 	.word	0x0800be69
 800be4c:	0800be71 	.word	0x0800be71
 800be50:	0800be79 	.word	0x0800be79
 800be54:	0800be81 	.word	0x0800be81
 800be58:	2300      	movs	r3, #0
 800be5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be5e:	e180      	b.n	800c162 <UART_SetConfig+0x5a6>
 800be60:	2304      	movs	r3, #4
 800be62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be66:	e17c      	b.n	800c162 <UART_SetConfig+0x5a6>
 800be68:	2308      	movs	r3, #8
 800be6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be6e:	e178      	b.n	800c162 <UART_SetConfig+0x5a6>
 800be70:	2310      	movs	r3, #16
 800be72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be76:	e174      	b.n	800c162 <UART_SetConfig+0x5a6>
 800be78:	2320      	movs	r3, #32
 800be7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be7e:	e170      	b.n	800c162 <UART_SetConfig+0x5a6>
 800be80:	2340      	movs	r3, #64	@ 0x40
 800be82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be86:	e16c      	b.n	800c162 <UART_SetConfig+0x5a6>
 800be88:	2380      	movs	r3, #128	@ 0x80
 800be8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800be8e:	e168      	b.n	800c162 <UART_SetConfig+0x5a6>
 800be90:	697b      	ldr	r3, [r7, #20]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	4a1b      	ldr	r2, [pc, #108]	@ (800bf04 <UART_SetConfig+0x348>)
 800be96:	4293      	cmp	r3, r2
 800be98:	d142      	bne.n	800bf20 <UART_SetConfig+0x364>
 800be9a:	4b16      	ldr	r3, [pc, #88]	@ (800bef4 <UART_SetConfig+0x338>)
 800be9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800be9e:	f003 0307 	and.w	r3, r3, #7
 800bea2:	2b05      	cmp	r3, #5
 800bea4:	d838      	bhi.n	800bf18 <UART_SetConfig+0x35c>
 800bea6:	a201      	add	r2, pc, #4	@ (adr r2, 800beac <UART_SetConfig+0x2f0>)
 800bea8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800beac:	0800bec5 	.word	0x0800bec5
 800beb0:	0800becd 	.word	0x0800becd
 800beb4:	0800bed5 	.word	0x0800bed5
 800beb8:	0800bedd 	.word	0x0800bedd
 800bebc:	0800bf09 	.word	0x0800bf09
 800bec0:	0800bf11 	.word	0x0800bf11
 800bec4:	2300      	movs	r3, #0
 800bec6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beca:	e14a      	b.n	800c162 <UART_SetConfig+0x5a6>
 800becc:	2304      	movs	r3, #4
 800bece:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bed2:	e146      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bed4:	2308      	movs	r3, #8
 800bed6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800beda:	e142      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bedc:	2310      	movs	r3, #16
 800bede:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bee2:	e13e      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bee4:	cfff69f3 	.word	0xcfff69f3
 800bee8:	58000c00 	.word	0x58000c00
 800beec:	11fff4ff 	.word	0x11fff4ff
 800bef0:	40011000 	.word	0x40011000
 800bef4:	58024400 	.word	0x58024400
 800bef8:	40004400 	.word	0x40004400
 800befc:	40004800 	.word	0x40004800
 800bf00:	40004c00 	.word	0x40004c00
 800bf04:	40005000 	.word	0x40005000
 800bf08:	2320      	movs	r3, #32
 800bf0a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf0e:	e128      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bf10:	2340      	movs	r3, #64	@ 0x40
 800bf12:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf16:	e124      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bf18:	2380      	movs	r3, #128	@ 0x80
 800bf1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bf1e:	e120      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bf20:	697b      	ldr	r3, [r7, #20]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	4acb      	ldr	r2, [pc, #812]	@ (800c254 <UART_SetConfig+0x698>)
 800bf26:	4293      	cmp	r3, r2
 800bf28:	d176      	bne.n	800c018 <UART_SetConfig+0x45c>
 800bf2a:	4bcb      	ldr	r3, [pc, #812]	@ (800c258 <UART_SetConfig+0x69c>)
 800bf2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bf32:	2b28      	cmp	r3, #40	@ 0x28
 800bf34:	d86c      	bhi.n	800c010 <UART_SetConfig+0x454>
 800bf36:	a201      	add	r2, pc, #4	@ (adr r2, 800bf3c <UART_SetConfig+0x380>)
 800bf38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bf3c:	0800bfe1 	.word	0x0800bfe1
 800bf40:	0800c011 	.word	0x0800c011
 800bf44:	0800c011 	.word	0x0800c011
 800bf48:	0800c011 	.word	0x0800c011
 800bf4c:	0800c011 	.word	0x0800c011
 800bf50:	0800c011 	.word	0x0800c011
 800bf54:	0800c011 	.word	0x0800c011
 800bf58:	0800c011 	.word	0x0800c011
 800bf5c:	0800bfe9 	.word	0x0800bfe9
 800bf60:	0800c011 	.word	0x0800c011
 800bf64:	0800c011 	.word	0x0800c011
 800bf68:	0800c011 	.word	0x0800c011
 800bf6c:	0800c011 	.word	0x0800c011
 800bf70:	0800c011 	.word	0x0800c011
 800bf74:	0800c011 	.word	0x0800c011
 800bf78:	0800c011 	.word	0x0800c011
 800bf7c:	0800bff1 	.word	0x0800bff1
 800bf80:	0800c011 	.word	0x0800c011
 800bf84:	0800c011 	.word	0x0800c011
 800bf88:	0800c011 	.word	0x0800c011
 800bf8c:	0800c011 	.word	0x0800c011
 800bf90:	0800c011 	.word	0x0800c011
 800bf94:	0800c011 	.word	0x0800c011
 800bf98:	0800c011 	.word	0x0800c011
 800bf9c:	0800bff9 	.word	0x0800bff9
 800bfa0:	0800c011 	.word	0x0800c011
 800bfa4:	0800c011 	.word	0x0800c011
 800bfa8:	0800c011 	.word	0x0800c011
 800bfac:	0800c011 	.word	0x0800c011
 800bfb0:	0800c011 	.word	0x0800c011
 800bfb4:	0800c011 	.word	0x0800c011
 800bfb8:	0800c011 	.word	0x0800c011
 800bfbc:	0800c001 	.word	0x0800c001
 800bfc0:	0800c011 	.word	0x0800c011
 800bfc4:	0800c011 	.word	0x0800c011
 800bfc8:	0800c011 	.word	0x0800c011
 800bfcc:	0800c011 	.word	0x0800c011
 800bfd0:	0800c011 	.word	0x0800c011
 800bfd4:	0800c011 	.word	0x0800c011
 800bfd8:	0800c011 	.word	0x0800c011
 800bfdc:	0800c009 	.word	0x0800c009
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfe6:	e0bc      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bfe8:	2304      	movs	r3, #4
 800bfea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bfee:	e0b8      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bff0:	2308      	movs	r3, #8
 800bff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bff6:	e0b4      	b.n	800c162 <UART_SetConfig+0x5a6>
 800bff8:	2310      	movs	r3, #16
 800bffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800bffe:	e0b0      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c000:	2320      	movs	r3, #32
 800c002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c006:	e0ac      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c008:	2340      	movs	r3, #64	@ 0x40
 800c00a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c00e:	e0a8      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c010:	2380      	movs	r3, #128	@ 0x80
 800c012:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c016:	e0a4      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c018:	697b      	ldr	r3, [r7, #20]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	4a8f      	ldr	r2, [pc, #572]	@ (800c25c <UART_SetConfig+0x6a0>)
 800c01e:	4293      	cmp	r3, r2
 800c020:	d130      	bne.n	800c084 <UART_SetConfig+0x4c8>
 800c022:	4b8d      	ldr	r3, [pc, #564]	@ (800c258 <UART_SetConfig+0x69c>)
 800c024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c026:	f003 0307 	and.w	r3, r3, #7
 800c02a:	2b05      	cmp	r3, #5
 800c02c:	d826      	bhi.n	800c07c <UART_SetConfig+0x4c0>
 800c02e:	a201      	add	r2, pc, #4	@ (adr r2, 800c034 <UART_SetConfig+0x478>)
 800c030:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c034:	0800c04d 	.word	0x0800c04d
 800c038:	0800c055 	.word	0x0800c055
 800c03c:	0800c05d 	.word	0x0800c05d
 800c040:	0800c065 	.word	0x0800c065
 800c044:	0800c06d 	.word	0x0800c06d
 800c048:	0800c075 	.word	0x0800c075
 800c04c:	2300      	movs	r3, #0
 800c04e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c052:	e086      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c054:	2304      	movs	r3, #4
 800c056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c05a:	e082      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c05c:	2308      	movs	r3, #8
 800c05e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c062:	e07e      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c064:	2310      	movs	r3, #16
 800c066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c06a:	e07a      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c06c:	2320      	movs	r3, #32
 800c06e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c072:	e076      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c074:	2340      	movs	r3, #64	@ 0x40
 800c076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c07a:	e072      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c07c:	2380      	movs	r3, #128	@ 0x80
 800c07e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c082:	e06e      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c084:	697b      	ldr	r3, [r7, #20]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	4a75      	ldr	r2, [pc, #468]	@ (800c260 <UART_SetConfig+0x6a4>)
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d130      	bne.n	800c0f0 <UART_SetConfig+0x534>
 800c08e:	4b72      	ldr	r3, [pc, #456]	@ (800c258 <UART_SetConfig+0x69c>)
 800c090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c092:	f003 0307 	and.w	r3, r3, #7
 800c096:	2b05      	cmp	r3, #5
 800c098:	d826      	bhi.n	800c0e8 <UART_SetConfig+0x52c>
 800c09a:	a201      	add	r2, pc, #4	@ (adr r2, 800c0a0 <UART_SetConfig+0x4e4>)
 800c09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0a0:	0800c0b9 	.word	0x0800c0b9
 800c0a4:	0800c0c1 	.word	0x0800c0c1
 800c0a8:	0800c0c9 	.word	0x0800c0c9
 800c0ac:	0800c0d1 	.word	0x0800c0d1
 800c0b0:	0800c0d9 	.word	0x0800c0d9
 800c0b4:	0800c0e1 	.word	0x0800c0e1
 800c0b8:	2300      	movs	r3, #0
 800c0ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0be:	e050      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c0c0:	2304      	movs	r3, #4
 800c0c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0c6:	e04c      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c0c8:	2308      	movs	r3, #8
 800c0ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ce:	e048      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c0d0:	2310      	movs	r3, #16
 800c0d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0d6:	e044      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c0d8:	2320      	movs	r3, #32
 800c0da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0de:	e040      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c0e0:	2340      	movs	r3, #64	@ 0x40
 800c0e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0e6:	e03c      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c0e8:	2380      	movs	r3, #128	@ 0x80
 800c0ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c0ee:	e038      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c0f0:	697b      	ldr	r3, [r7, #20]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	4a5b      	ldr	r2, [pc, #364]	@ (800c264 <UART_SetConfig+0x6a8>)
 800c0f6:	4293      	cmp	r3, r2
 800c0f8:	d130      	bne.n	800c15c <UART_SetConfig+0x5a0>
 800c0fa:	4b57      	ldr	r3, [pc, #348]	@ (800c258 <UART_SetConfig+0x69c>)
 800c0fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c0fe:	f003 0307 	and.w	r3, r3, #7
 800c102:	2b05      	cmp	r3, #5
 800c104:	d826      	bhi.n	800c154 <UART_SetConfig+0x598>
 800c106:	a201      	add	r2, pc, #4	@ (adr r2, 800c10c <UART_SetConfig+0x550>)
 800c108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c10c:	0800c125 	.word	0x0800c125
 800c110:	0800c12d 	.word	0x0800c12d
 800c114:	0800c135 	.word	0x0800c135
 800c118:	0800c13d 	.word	0x0800c13d
 800c11c:	0800c145 	.word	0x0800c145
 800c120:	0800c14d 	.word	0x0800c14d
 800c124:	2302      	movs	r3, #2
 800c126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c12a:	e01a      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c12c:	2304      	movs	r3, #4
 800c12e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c132:	e016      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c134:	2308      	movs	r3, #8
 800c136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c13a:	e012      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c13c:	2310      	movs	r3, #16
 800c13e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c142:	e00e      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c144:	2320      	movs	r3, #32
 800c146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c14a:	e00a      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c14c:	2340      	movs	r3, #64	@ 0x40
 800c14e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c152:	e006      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c154:	2380      	movs	r3, #128	@ 0x80
 800c156:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800c15a:	e002      	b.n	800c162 <UART_SetConfig+0x5a6>
 800c15c:	2380      	movs	r3, #128	@ 0x80
 800c15e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800c162:	697b      	ldr	r3, [r7, #20]
 800c164:	681b      	ldr	r3, [r3, #0]
 800c166:	4a3f      	ldr	r2, [pc, #252]	@ (800c264 <UART_SetConfig+0x6a8>)
 800c168:	4293      	cmp	r3, r2
 800c16a:	f040 80f8 	bne.w	800c35e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800c16e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c172:	2b20      	cmp	r3, #32
 800c174:	dc46      	bgt.n	800c204 <UART_SetConfig+0x648>
 800c176:	2b02      	cmp	r3, #2
 800c178:	f2c0 8082 	blt.w	800c280 <UART_SetConfig+0x6c4>
 800c17c:	3b02      	subs	r3, #2
 800c17e:	2b1e      	cmp	r3, #30
 800c180:	d87e      	bhi.n	800c280 <UART_SetConfig+0x6c4>
 800c182:	a201      	add	r2, pc, #4	@ (adr r2, 800c188 <UART_SetConfig+0x5cc>)
 800c184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c188:	0800c20b 	.word	0x0800c20b
 800c18c:	0800c281 	.word	0x0800c281
 800c190:	0800c213 	.word	0x0800c213
 800c194:	0800c281 	.word	0x0800c281
 800c198:	0800c281 	.word	0x0800c281
 800c19c:	0800c281 	.word	0x0800c281
 800c1a0:	0800c223 	.word	0x0800c223
 800c1a4:	0800c281 	.word	0x0800c281
 800c1a8:	0800c281 	.word	0x0800c281
 800c1ac:	0800c281 	.word	0x0800c281
 800c1b0:	0800c281 	.word	0x0800c281
 800c1b4:	0800c281 	.word	0x0800c281
 800c1b8:	0800c281 	.word	0x0800c281
 800c1bc:	0800c281 	.word	0x0800c281
 800c1c0:	0800c233 	.word	0x0800c233
 800c1c4:	0800c281 	.word	0x0800c281
 800c1c8:	0800c281 	.word	0x0800c281
 800c1cc:	0800c281 	.word	0x0800c281
 800c1d0:	0800c281 	.word	0x0800c281
 800c1d4:	0800c281 	.word	0x0800c281
 800c1d8:	0800c281 	.word	0x0800c281
 800c1dc:	0800c281 	.word	0x0800c281
 800c1e0:	0800c281 	.word	0x0800c281
 800c1e4:	0800c281 	.word	0x0800c281
 800c1e8:	0800c281 	.word	0x0800c281
 800c1ec:	0800c281 	.word	0x0800c281
 800c1f0:	0800c281 	.word	0x0800c281
 800c1f4:	0800c281 	.word	0x0800c281
 800c1f8:	0800c281 	.word	0x0800c281
 800c1fc:	0800c281 	.word	0x0800c281
 800c200:	0800c273 	.word	0x0800c273
 800c204:	2b40      	cmp	r3, #64	@ 0x40
 800c206:	d037      	beq.n	800c278 <UART_SetConfig+0x6bc>
 800c208:	e03a      	b.n	800c280 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c20a:	f7fe fa87 	bl	800a71c <HAL_RCCEx_GetD3PCLK1Freq>
 800c20e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c210:	e03c      	b.n	800c28c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c212:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c216:	4618      	mov	r0, r3
 800c218:	f7fe fa96 	bl	800a748 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c21c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c21e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c220:	e034      	b.n	800c28c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c222:	f107 0318 	add.w	r3, r7, #24
 800c226:	4618      	mov	r0, r3
 800c228:	f7fe fbe2 	bl	800a9f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c22c:	69fb      	ldr	r3, [r7, #28]
 800c22e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c230:	e02c      	b.n	800c28c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c232:	4b09      	ldr	r3, [pc, #36]	@ (800c258 <UART_SetConfig+0x69c>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	f003 0320 	and.w	r3, r3, #32
 800c23a:	2b00      	cmp	r3, #0
 800c23c:	d016      	beq.n	800c26c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c23e:	4b06      	ldr	r3, [pc, #24]	@ (800c258 <UART_SetConfig+0x69c>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	08db      	lsrs	r3, r3, #3
 800c244:	f003 0303 	and.w	r3, r3, #3
 800c248:	4a07      	ldr	r2, [pc, #28]	@ (800c268 <UART_SetConfig+0x6ac>)
 800c24a:	fa22 f303 	lsr.w	r3, r2, r3
 800c24e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c250:	e01c      	b.n	800c28c <UART_SetConfig+0x6d0>
 800c252:	bf00      	nop
 800c254:	40011400 	.word	0x40011400
 800c258:	58024400 	.word	0x58024400
 800c25c:	40007800 	.word	0x40007800
 800c260:	40007c00 	.word	0x40007c00
 800c264:	58000c00 	.word	0x58000c00
 800c268:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800c26c:	4b9d      	ldr	r3, [pc, #628]	@ (800c4e4 <UART_SetConfig+0x928>)
 800c26e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c270:	e00c      	b.n	800c28c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c272:	4b9d      	ldr	r3, [pc, #628]	@ (800c4e8 <UART_SetConfig+0x92c>)
 800c274:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c276:	e009      	b.n	800c28c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c278:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c27c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c27e:	e005      	b.n	800c28c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800c280:	2300      	movs	r3, #0
 800c282:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c284:	2301      	movs	r3, #1
 800c286:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c28a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800c28c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c28e:	2b00      	cmp	r3, #0
 800c290:	f000 81de 	beq.w	800c650 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c294:	697b      	ldr	r3, [r7, #20]
 800c296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c298:	4a94      	ldr	r2, [pc, #592]	@ (800c4ec <UART_SetConfig+0x930>)
 800c29a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c29e:	461a      	mov	r2, r3
 800c2a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2a2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c2a6:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c2a8:	697b      	ldr	r3, [r7, #20]
 800c2aa:	685a      	ldr	r2, [r3, #4]
 800c2ac:	4613      	mov	r3, r2
 800c2ae:	005b      	lsls	r3, r3, #1
 800c2b0:	4413      	add	r3, r2
 800c2b2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	d305      	bcc.n	800c2c4 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800c2b8:	697b      	ldr	r3, [r7, #20]
 800c2ba:	685b      	ldr	r3, [r3, #4]
 800c2bc:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c2be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	d903      	bls.n	800c2cc <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800c2c4:	2301      	movs	r3, #1
 800c2c6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c2ca:	e1c1      	b.n	800c650 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c2cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	60bb      	str	r3, [r7, #8]
 800c2d2:	60fa      	str	r2, [r7, #12]
 800c2d4:	697b      	ldr	r3, [r7, #20]
 800c2d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2d8:	4a84      	ldr	r2, [pc, #528]	@ (800c4ec <UART_SetConfig+0x930>)
 800c2da:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c2de:	b29b      	uxth	r3, r3
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	603b      	str	r3, [r7, #0]
 800c2e4:	607a      	str	r2, [r7, #4]
 800c2e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c2ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c2ee:	f7f4 fa1b 	bl	8000728 <__aeabi_uldivmod>
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	460b      	mov	r3, r1
 800c2f6:	4610      	mov	r0, r2
 800c2f8:	4619      	mov	r1, r3
 800c2fa:	f04f 0200 	mov.w	r2, #0
 800c2fe:	f04f 0300 	mov.w	r3, #0
 800c302:	020b      	lsls	r3, r1, #8
 800c304:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800c308:	0202      	lsls	r2, r0, #8
 800c30a:	6979      	ldr	r1, [r7, #20]
 800c30c:	6849      	ldr	r1, [r1, #4]
 800c30e:	0849      	lsrs	r1, r1, #1
 800c310:	2000      	movs	r0, #0
 800c312:	460c      	mov	r4, r1
 800c314:	4605      	mov	r5, r0
 800c316:	eb12 0804 	adds.w	r8, r2, r4
 800c31a:	eb43 0905 	adc.w	r9, r3, r5
 800c31e:	697b      	ldr	r3, [r7, #20]
 800c320:	685b      	ldr	r3, [r3, #4]
 800c322:	2200      	movs	r2, #0
 800c324:	469a      	mov	sl, r3
 800c326:	4693      	mov	fp, r2
 800c328:	4652      	mov	r2, sl
 800c32a:	465b      	mov	r3, fp
 800c32c:	4640      	mov	r0, r8
 800c32e:	4649      	mov	r1, r9
 800c330:	f7f4 f9fa 	bl	8000728 <__aeabi_uldivmod>
 800c334:	4602      	mov	r2, r0
 800c336:	460b      	mov	r3, r1
 800c338:	4613      	mov	r3, r2
 800c33a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c33c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c33e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800c342:	d308      	bcc.n	800c356 <UART_SetConfig+0x79a>
 800c344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c346:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c34a:	d204      	bcs.n	800c356 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800c34c:	697b      	ldr	r3, [r7, #20]
 800c34e:	681b      	ldr	r3, [r3, #0]
 800c350:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800c352:	60da      	str	r2, [r3, #12]
 800c354:	e17c      	b.n	800c650 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800c356:	2301      	movs	r3, #1
 800c358:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c35c:	e178      	b.n	800c650 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c35e:	697b      	ldr	r3, [r7, #20]
 800c360:	69db      	ldr	r3, [r3, #28]
 800c362:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800c366:	f040 80c5 	bne.w	800c4f4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800c36a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c36e:	2b20      	cmp	r3, #32
 800c370:	dc48      	bgt.n	800c404 <UART_SetConfig+0x848>
 800c372:	2b00      	cmp	r3, #0
 800c374:	db7b      	blt.n	800c46e <UART_SetConfig+0x8b2>
 800c376:	2b20      	cmp	r3, #32
 800c378:	d879      	bhi.n	800c46e <UART_SetConfig+0x8b2>
 800c37a:	a201      	add	r2, pc, #4	@ (adr r2, 800c380 <UART_SetConfig+0x7c4>)
 800c37c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c380:	0800c40b 	.word	0x0800c40b
 800c384:	0800c413 	.word	0x0800c413
 800c388:	0800c46f 	.word	0x0800c46f
 800c38c:	0800c46f 	.word	0x0800c46f
 800c390:	0800c41b 	.word	0x0800c41b
 800c394:	0800c46f 	.word	0x0800c46f
 800c398:	0800c46f 	.word	0x0800c46f
 800c39c:	0800c46f 	.word	0x0800c46f
 800c3a0:	0800c42b 	.word	0x0800c42b
 800c3a4:	0800c46f 	.word	0x0800c46f
 800c3a8:	0800c46f 	.word	0x0800c46f
 800c3ac:	0800c46f 	.word	0x0800c46f
 800c3b0:	0800c46f 	.word	0x0800c46f
 800c3b4:	0800c46f 	.word	0x0800c46f
 800c3b8:	0800c46f 	.word	0x0800c46f
 800c3bc:	0800c46f 	.word	0x0800c46f
 800c3c0:	0800c43b 	.word	0x0800c43b
 800c3c4:	0800c46f 	.word	0x0800c46f
 800c3c8:	0800c46f 	.word	0x0800c46f
 800c3cc:	0800c46f 	.word	0x0800c46f
 800c3d0:	0800c46f 	.word	0x0800c46f
 800c3d4:	0800c46f 	.word	0x0800c46f
 800c3d8:	0800c46f 	.word	0x0800c46f
 800c3dc:	0800c46f 	.word	0x0800c46f
 800c3e0:	0800c46f 	.word	0x0800c46f
 800c3e4:	0800c46f 	.word	0x0800c46f
 800c3e8:	0800c46f 	.word	0x0800c46f
 800c3ec:	0800c46f 	.word	0x0800c46f
 800c3f0:	0800c46f 	.word	0x0800c46f
 800c3f4:	0800c46f 	.word	0x0800c46f
 800c3f8:	0800c46f 	.word	0x0800c46f
 800c3fc:	0800c46f 	.word	0x0800c46f
 800c400:	0800c461 	.word	0x0800c461
 800c404:	2b40      	cmp	r3, #64	@ 0x40
 800c406:	d02e      	beq.n	800c466 <UART_SetConfig+0x8aa>
 800c408:	e031      	b.n	800c46e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c40a:	f7fc f9d1 	bl	80087b0 <HAL_RCC_GetPCLK1Freq>
 800c40e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c410:	e033      	b.n	800c47a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c412:	f7fc f9e3 	bl	80087dc <HAL_RCC_GetPCLK2Freq>
 800c416:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c418:	e02f      	b.n	800c47a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c41a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c41e:	4618      	mov	r0, r3
 800c420:	f7fe f992 	bl	800a748 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c424:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c426:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c428:	e027      	b.n	800c47a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c42a:	f107 0318 	add.w	r3, r7, #24
 800c42e:	4618      	mov	r0, r3
 800c430:	f7fe fade 	bl	800a9f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c434:	69fb      	ldr	r3, [r7, #28]
 800c436:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c438:	e01f      	b.n	800c47a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c43a:	4b2d      	ldr	r3, [pc, #180]	@ (800c4f0 <UART_SetConfig+0x934>)
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f003 0320 	and.w	r3, r3, #32
 800c442:	2b00      	cmp	r3, #0
 800c444:	d009      	beq.n	800c45a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c446:	4b2a      	ldr	r3, [pc, #168]	@ (800c4f0 <UART_SetConfig+0x934>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	08db      	lsrs	r3, r3, #3
 800c44c:	f003 0303 	and.w	r3, r3, #3
 800c450:	4a24      	ldr	r2, [pc, #144]	@ (800c4e4 <UART_SetConfig+0x928>)
 800c452:	fa22 f303 	lsr.w	r3, r2, r3
 800c456:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c458:	e00f      	b.n	800c47a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800c45a:	4b22      	ldr	r3, [pc, #136]	@ (800c4e4 <UART_SetConfig+0x928>)
 800c45c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c45e:	e00c      	b.n	800c47a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c460:	4b21      	ldr	r3, [pc, #132]	@ (800c4e8 <UART_SetConfig+0x92c>)
 800c462:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c464:	e009      	b.n	800c47a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c466:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c46a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c46c:	e005      	b.n	800c47a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800c46e:	2300      	movs	r3, #0
 800c470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c472:	2301      	movs	r3, #1
 800c474:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c478:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800c47a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	f000 80e7 	beq.w	800c650 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c486:	4a19      	ldr	r2, [pc, #100]	@ (800c4ec <UART_SetConfig+0x930>)
 800c488:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c48c:	461a      	mov	r2, r3
 800c48e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c490:	fbb3 f3f2 	udiv	r3, r3, r2
 800c494:	005a      	lsls	r2, r3, #1
 800c496:	697b      	ldr	r3, [r7, #20]
 800c498:	685b      	ldr	r3, [r3, #4]
 800c49a:	085b      	lsrs	r3, r3, #1
 800c49c:	441a      	add	r2, r3
 800c49e:	697b      	ldr	r3, [r7, #20]
 800c4a0:	685b      	ldr	r3, [r3, #4]
 800c4a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c4a6:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c4a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4aa:	2b0f      	cmp	r3, #15
 800c4ac:	d916      	bls.n	800c4dc <UART_SetConfig+0x920>
 800c4ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c4b4:	d212      	bcs.n	800c4dc <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c4b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4b8:	b29b      	uxth	r3, r3
 800c4ba:	f023 030f 	bic.w	r3, r3, #15
 800c4be:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c4c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c4c2:	085b      	lsrs	r3, r3, #1
 800c4c4:	b29b      	uxth	r3, r3
 800c4c6:	f003 0307 	and.w	r3, r3, #7
 800c4ca:	b29a      	uxth	r2, r3
 800c4cc:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 800c4d2:	697b      	ldr	r3, [r7, #20]
 800c4d4:	681b      	ldr	r3, [r3, #0]
 800c4d6:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 800c4d8:	60da      	str	r2, [r3, #12]
 800c4da:	e0b9      	b.n	800c650 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c4dc:	2301      	movs	r3, #1
 800c4de:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 800c4e2:	e0b5      	b.n	800c650 <UART_SetConfig+0xa94>
 800c4e4:	03d09000 	.word	0x03d09000
 800c4e8:	003d0900 	.word	0x003d0900
 800c4ec:	08011c88 	.word	0x08011c88
 800c4f0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800c4f4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800c4f8:	2b20      	cmp	r3, #32
 800c4fa:	dc49      	bgt.n	800c590 <UART_SetConfig+0x9d4>
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	db7c      	blt.n	800c5fa <UART_SetConfig+0xa3e>
 800c500:	2b20      	cmp	r3, #32
 800c502:	d87a      	bhi.n	800c5fa <UART_SetConfig+0xa3e>
 800c504:	a201      	add	r2, pc, #4	@ (adr r2, 800c50c <UART_SetConfig+0x950>)
 800c506:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c50a:	bf00      	nop
 800c50c:	0800c597 	.word	0x0800c597
 800c510:	0800c59f 	.word	0x0800c59f
 800c514:	0800c5fb 	.word	0x0800c5fb
 800c518:	0800c5fb 	.word	0x0800c5fb
 800c51c:	0800c5a7 	.word	0x0800c5a7
 800c520:	0800c5fb 	.word	0x0800c5fb
 800c524:	0800c5fb 	.word	0x0800c5fb
 800c528:	0800c5fb 	.word	0x0800c5fb
 800c52c:	0800c5b7 	.word	0x0800c5b7
 800c530:	0800c5fb 	.word	0x0800c5fb
 800c534:	0800c5fb 	.word	0x0800c5fb
 800c538:	0800c5fb 	.word	0x0800c5fb
 800c53c:	0800c5fb 	.word	0x0800c5fb
 800c540:	0800c5fb 	.word	0x0800c5fb
 800c544:	0800c5fb 	.word	0x0800c5fb
 800c548:	0800c5fb 	.word	0x0800c5fb
 800c54c:	0800c5c7 	.word	0x0800c5c7
 800c550:	0800c5fb 	.word	0x0800c5fb
 800c554:	0800c5fb 	.word	0x0800c5fb
 800c558:	0800c5fb 	.word	0x0800c5fb
 800c55c:	0800c5fb 	.word	0x0800c5fb
 800c560:	0800c5fb 	.word	0x0800c5fb
 800c564:	0800c5fb 	.word	0x0800c5fb
 800c568:	0800c5fb 	.word	0x0800c5fb
 800c56c:	0800c5fb 	.word	0x0800c5fb
 800c570:	0800c5fb 	.word	0x0800c5fb
 800c574:	0800c5fb 	.word	0x0800c5fb
 800c578:	0800c5fb 	.word	0x0800c5fb
 800c57c:	0800c5fb 	.word	0x0800c5fb
 800c580:	0800c5fb 	.word	0x0800c5fb
 800c584:	0800c5fb 	.word	0x0800c5fb
 800c588:	0800c5fb 	.word	0x0800c5fb
 800c58c:	0800c5ed 	.word	0x0800c5ed
 800c590:	2b40      	cmp	r3, #64	@ 0x40
 800c592:	d02e      	beq.n	800c5f2 <UART_SetConfig+0xa36>
 800c594:	e031      	b.n	800c5fa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c596:	f7fc f90b 	bl	80087b0 <HAL_RCC_GetPCLK1Freq>
 800c59a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c59c:	e033      	b.n	800c606 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c59e:	f7fc f91d 	bl	80087dc <HAL_RCC_GetPCLK2Freq>
 800c5a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800c5a4:	e02f      	b.n	800c606 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c5a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800c5aa:	4618      	mov	r0, r3
 800c5ac:	f7fe f8cc 	bl	800a748 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c5b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c5b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5b4:	e027      	b.n	800c606 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5b6:	f107 0318 	add.w	r3, r7, #24
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f7fe fa18 	bl	800a9f0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c5c0:	69fb      	ldr	r3, [r7, #28]
 800c5c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5c4:	e01f      	b.n	800c606 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c5c6:	4b2d      	ldr	r3, [pc, #180]	@ (800c67c <UART_SetConfig+0xac0>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	f003 0320 	and.w	r3, r3, #32
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d009      	beq.n	800c5e6 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c5d2:	4b2a      	ldr	r3, [pc, #168]	@ (800c67c <UART_SetConfig+0xac0>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	08db      	lsrs	r3, r3, #3
 800c5d8:	f003 0303 	and.w	r3, r3, #3
 800c5dc:	4a28      	ldr	r2, [pc, #160]	@ (800c680 <UART_SetConfig+0xac4>)
 800c5de:	fa22 f303 	lsr.w	r3, r2, r3
 800c5e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800c5e4:	e00f      	b.n	800c606 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800c5e6:	4b26      	ldr	r3, [pc, #152]	@ (800c680 <UART_SetConfig+0xac4>)
 800c5e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5ea:	e00c      	b.n	800c606 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800c5ec:	4b25      	ldr	r3, [pc, #148]	@ (800c684 <UART_SetConfig+0xac8>)
 800c5ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5f0:	e009      	b.n	800c606 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800c5f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c5f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800c5f8:	e005      	b.n	800c606 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800c5fa:	2300      	movs	r3, #0
 800c5fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 800c5fe:	2301      	movs	r3, #1
 800c600:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 800c604:	bf00      	nop
    }

    if (pclk != 0U)
 800c606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d021      	beq.n	800c650 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c60c:	697b      	ldr	r3, [r7, #20]
 800c60e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c610:	4a1d      	ldr	r2, [pc, #116]	@ (800c688 <UART_SetConfig+0xacc>)
 800c612:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800c616:	461a      	mov	r2, r3
 800c618:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c61a:	fbb3 f2f2 	udiv	r2, r3, r2
 800c61e:	697b      	ldr	r3, [r7, #20]
 800c620:	685b      	ldr	r3, [r3, #4]
 800c622:	085b      	lsrs	r3, r3, #1
 800c624:	441a      	add	r2, r3
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	685b      	ldr	r3, [r3, #4]
 800c62a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c62e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c632:	2b0f      	cmp	r3, #15
 800c634:	d909      	bls.n	800c64a <UART_SetConfig+0xa8e>
 800c636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c638:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c63c:	d205      	bcs.n	800c64a <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c63e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c640:	b29a      	uxth	r2, r3
 800c642:	697b      	ldr	r3, [r7, #20]
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	60da      	str	r2, [r3, #12]
 800c648:	e002      	b.n	800c650 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800c64a:	2301      	movs	r3, #1
 800c64c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	2201      	movs	r2, #1
 800c654:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800c658:	697b      	ldr	r3, [r7, #20]
 800c65a:	2201      	movs	r2, #1
 800c65c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c660:	697b      	ldr	r3, [r7, #20]
 800c662:	2200      	movs	r2, #0
 800c664:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800c666:	697b      	ldr	r3, [r7, #20]
 800c668:	2200      	movs	r2, #0
 800c66a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800c66c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 800c670:	4618      	mov	r0, r3
 800c672:	3748      	adds	r7, #72	@ 0x48
 800c674:	46bd      	mov	sp, r7
 800c676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c67a:	bf00      	nop
 800c67c:	58024400 	.word	0x58024400
 800c680:	03d09000 	.word	0x03d09000
 800c684:	003d0900 	.word	0x003d0900
 800c688:	08011c88 	.word	0x08011c88

0800c68c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c68c:	b480      	push	{r7}
 800c68e:	b083      	sub	sp, #12
 800c690:	af00      	add	r7, sp, #0
 800c692:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c698:	f003 0308 	and.w	r3, r3, #8
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	d00a      	beq.n	800c6b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	681b      	ldr	r3, [r3, #0]
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c6ae:	687b      	ldr	r3, [r7, #4]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	430a      	orrs	r2, r1
 800c6b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6ba:	f003 0301 	and.w	r3, r3, #1
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d00a      	beq.n	800c6d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	685b      	ldr	r3, [r3, #4]
 800c6c8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	430a      	orrs	r2, r1
 800c6d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6dc:	f003 0302 	and.w	r3, r3, #2
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d00a      	beq.n	800c6fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800c6ee:	687b      	ldr	r3, [r7, #4]
 800c6f0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	430a      	orrs	r2, r1
 800c6f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c6fa:	687b      	ldr	r3, [r7, #4]
 800c6fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c6fe:	f003 0304 	and.w	r3, r3, #4
 800c702:	2b00      	cmp	r3, #0
 800c704:	d00a      	beq.n	800c71c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c706:	687b      	ldr	r3, [r7, #4]
 800c708:	681b      	ldr	r3, [r3, #0]
 800c70a:	685b      	ldr	r3, [r3, #4]
 800c70c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	430a      	orrs	r2, r1
 800c71a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c720:	f003 0310 	and.w	r3, r3, #16
 800c724:	2b00      	cmp	r3, #0
 800c726:	d00a      	beq.n	800c73e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	689b      	ldr	r3, [r3, #8]
 800c72e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	430a      	orrs	r2, r1
 800c73c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c742:	f003 0320 	and.w	r3, r3, #32
 800c746:	2b00      	cmp	r3, #0
 800c748:	d00a      	beq.n	800c760 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	689b      	ldr	r3, [r3, #8]
 800c750:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800c754:	687b      	ldr	r3, [r7, #4]
 800c756:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	430a      	orrs	r2, r1
 800c75e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800c768:	2b00      	cmp	r3, #0
 800c76a:	d01a      	beq.n	800c7a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	685b      	ldr	r3, [r3, #4]
 800c772:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	430a      	orrs	r2, r1
 800c780:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c782:	687b      	ldr	r3, [r7, #4]
 800c784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c786:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c78a:	d10a      	bne.n	800c7a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	685b      	ldr	r3, [r3, #4]
 800c792:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	681b      	ldr	r3, [r3, #0]
 800c79e:	430a      	orrs	r2, r1
 800c7a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c7a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d00a      	beq.n	800c7c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	685b      	ldr	r3, [r3, #4]
 800c7b4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	430a      	orrs	r2, r1
 800c7c2:	605a      	str	r2, [r3, #4]
  }
}
 800c7c4:	bf00      	nop
 800c7c6:	370c      	adds	r7, #12
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ce:	4770      	bx	lr

0800c7d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b098      	sub	sp, #96	@ 0x60
 800c7d4:	af02      	add	r7, sp, #8
 800c7d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	2200      	movs	r2, #0
 800c7dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800c7e0:	f7f5 fc3c 	bl	800205c <HAL_GetTick>
 800c7e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	681b      	ldr	r3, [r3, #0]
 800c7ea:	681b      	ldr	r3, [r3, #0]
 800c7ec:	f003 0308 	and.w	r3, r3, #8
 800c7f0:	2b08      	cmp	r3, #8
 800c7f2:	d12f      	bne.n	800c854 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c7f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c7f8:	9300      	str	r3, [sp, #0]
 800c7fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c7fc:	2200      	movs	r2, #0
 800c7fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c802:	6878      	ldr	r0, [r7, #4]
 800c804:	f000 f88e 	bl	800c924 <UART_WaitOnFlagUntilTimeout>
 800c808:	4603      	mov	r3, r0
 800c80a:	2b00      	cmp	r3, #0
 800c80c:	d022      	beq.n	800c854 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c814:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c816:	e853 3f00 	ldrex	r3, [r3]
 800c81a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800c81c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c81e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c822:	653b      	str	r3, [r7, #80]	@ 0x50
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	461a      	mov	r2, r3
 800c82a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800c82c:	647b      	str	r3, [r7, #68]	@ 0x44
 800c82e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c830:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800c832:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800c834:	e841 2300 	strex	r3, r2, [r1]
 800c838:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800c83a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c83c:	2b00      	cmp	r3, #0
 800c83e:	d1e6      	bne.n	800c80e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800c840:	687b      	ldr	r3, [r7, #4]
 800c842:	2220      	movs	r2, #32
 800c844:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	2200      	movs	r2, #0
 800c84c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c850:	2303      	movs	r3, #3
 800c852:	e063      	b.n	800c91c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	f003 0304 	and.w	r3, r3, #4
 800c85e:	2b04      	cmp	r3, #4
 800c860:	d149      	bne.n	800c8f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c862:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c866:	9300      	str	r3, [sp, #0]
 800c868:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800c86a:	2200      	movs	r2, #0
 800c86c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c870:	6878      	ldr	r0, [r7, #4]
 800c872:	f000 f857 	bl	800c924 <UART_WaitOnFlagUntilTimeout>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d03c      	beq.n	800c8f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c884:	e853 3f00 	ldrex	r3, [r3]
 800c888:	623b      	str	r3, [r7, #32]
   return(result);
 800c88a:	6a3b      	ldr	r3, [r7, #32]
 800c88c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800c890:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	461a      	mov	r2, r3
 800c898:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c89a:	633b      	str	r3, [r7, #48]	@ 0x30
 800c89c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c89e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800c8a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800c8a2:	e841 2300 	strex	r3, r2, [r1]
 800c8a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800c8a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d1e6      	bne.n	800c87c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c8ae:	687b      	ldr	r3, [r7, #4]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	3308      	adds	r3, #8
 800c8b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8b6:	693b      	ldr	r3, [r7, #16]
 800c8b8:	e853 3f00 	ldrex	r3, [r3]
 800c8bc:	60fb      	str	r3, [r7, #12]
   return(result);
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	f023 0301 	bic.w	r3, r3, #1
 800c8c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	3308      	adds	r3, #8
 800c8cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800c8ce:	61fa      	str	r2, [r7, #28]
 800c8d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8d2:	69b9      	ldr	r1, [r7, #24]
 800c8d4:	69fa      	ldr	r2, [r7, #28]
 800c8d6:	e841 2300 	strex	r3, r2, [r1]
 800c8da:	617b      	str	r3, [r7, #20]
   return(result);
 800c8dc:	697b      	ldr	r3, [r7, #20]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1e5      	bne.n	800c8ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	2220      	movs	r2, #32
 800c8e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	2200      	movs	r2, #0
 800c8ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c8f2:	2303      	movs	r3, #3
 800c8f4:	e012      	b.n	800c91c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	2220      	movs	r2, #32
 800c8fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	2220      	movs	r2, #32
 800c902:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	2200      	movs	r2, #0
 800c90a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2200      	movs	r2, #0
 800c910:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	2200      	movs	r2, #0
 800c916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800c91a:	2300      	movs	r3, #0
}
 800c91c:	4618      	mov	r0, r3
 800c91e:	3758      	adds	r7, #88	@ 0x58
 800c920:	46bd      	mov	sp, r7
 800c922:	bd80      	pop	{r7, pc}

0800c924 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c924:	b580      	push	{r7, lr}
 800c926:	b084      	sub	sp, #16
 800c928:	af00      	add	r7, sp, #0
 800c92a:	60f8      	str	r0, [r7, #12]
 800c92c:	60b9      	str	r1, [r7, #8]
 800c92e:	603b      	str	r3, [r7, #0]
 800c930:	4613      	mov	r3, r2
 800c932:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c934:	e04f      	b.n	800c9d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c936:	69bb      	ldr	r3, [r7, #24]
 800c938:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c93c:	d04b      	beq.n	800c9d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c93e:	f7f5 fb8d 	bl	800205c <HAL_GetTick>
 800c942:	4602      	mov	r2, r0
 800c944:	683b      	ldr	r3, [r7, #0]
 800c946:	1ad3      	subs	r3, r2, r3
 800c948:	69ba      	ldr	r2, [r7, #24]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d302      	bcc.n	800c954 <UART_WaitOnFlagUntilTimeout+0x30>
 800c94e:	69bb      	ldr	r3, [r7, #24]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d101      	bne.n	800c958 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c954:	2303      	movs	r3, #3
 800c956:	e04e      	b.n	800c9f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c958:	68fb      	ldr	r3, [r7, #12]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	f003 0304 	and.w	r3, r3, #4
 800c962:	2b00      	cmp	r3, #0
 800c964:	d037      	beq.n	800c9d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c966:	68bb      	ldr	r3, [r7, #8]
 800c968:	2b80      	cmp	r3, #128	@ 0x80
 800c96a:	d034      	beq.n	800c9d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800c96c:	68bb      	ldr	r3, [r7, #8]
 800c96e:	2b40      	cmp	r3, #64	@ 0x40
 800c970:	d031      	beq.n	800c9d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c972:	68fb      	ldr	r3, [r7, #12]
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	69db      	ldr	r3, [r3, #28]
 800c978:	f003 0308 	and.w	r3, r3, #8
 800c97c:	2b08      	cmp	r3, #8
 800c97e:	d110      	bne.n	800c9a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	2208      	movs	r2, #8
 800c986:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c988:	68f8      	ldr	r0, [r7, #12]
 800c98a:	f000 f921 	bl	800cbd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	2208      	movs	r2, #8
 800c992:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c996:	68fb      	ldr	r3, [r7, #12]
 800c998:	2200      	movs	r2, #0
 800c99a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800c99e:	2301      	movs	r3, #1
 800c9a0:	e029      	b.n	800c9f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	69db      	ldr	r3, [r3, #28]
 800c9a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800c9ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c9b0:	d111      	bne.n	800c9d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c9b2:	68fb      	ldr	r3, [r7, #12]
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800c9ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c9bc:	68f8      	ldr	r0, [r7, #12]
 800c9be:	f000 f907 	bl	800cbd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2220      	movs	r2, #32
 800c9c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2200      	movs	r2, #0
 800c9ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800c9d2:	2303      	movs	r3, #3
 800c9d4:	e00f      	b.n	800c9f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c9d6:	68fb      	ldr	r3, [r7, #12]
 800c9d8:	681b      	ldr	r3, [r3, #0]
 800c9da:	69da      	ldr	r2, [r3, #28]
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	4013      	ands	r3, r2
 800c9e0:	68ba      	ldr	r2, [r7, #8]
 800c9e2:	429a      	cmp	r2, r3
 800c9e4:	bf0c      	ite	eq
 800c9e6:	2301      	moveq	r3, #1
 800c9e8:	2300      	movne	r3, #0
 800c9ea:	b2db      	uxtb	r3, r3
 800c9ec:	461a      	mov	r2, r3
 800c9ee:	79fb      	ldrb	r3, [r7, #7]
 800c9f0:	429a      	cmp	r2, r3
 800c9f2:	d0a0      	beq.n	800c936 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c9f4:	2300      	movs	r3, #0
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}
	...

0800ca00 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ca00:	b580      	push	{r7, lr}
 800ca02:	b096      	sub	sp, #88	@ 0x58
 800ca04:	af00      	add	r7, sp, #0
 800ca06:	60f8      	str	r0, [r7, #12]
 800ca08:	60b9      	str	r1, [r7, #8]
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	68ba      	ldr	r2, [r7, #8]
 800ca12:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	88fa      	ldrh	r2, [r7, #6]
 800ca18:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2222      	movs	r2, #34	@ 0x22
 800ca28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 800ca2c:	68fb      	ldr	r3, [r7, #12]
 800ca2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d02d      	beq.n	800ca92 <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ca36:	68fb      	ldr	r3, [r7, #12]
 800ca38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca3c:	4a40      	ldr	r2, [pc, #256]	@ (800cb40 <UART_Start_Receive_DMA+0x140>)
 800ca3e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca46:	4a3f      	ldr	r2, [pc, #252]	@ (800cb44 <UART_Start_Receive_DMA+0x144>)
 800ca48:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ca4a:	68fb      	ldr	r3, [r7, #12]
 800ca4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca50:	4a3d      	ldr	r2, [pc, #244]	@ (800cb48 <UART_Start_Receive_DMA+0x148>)
 800ca52:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ca54:	68fb      	ldr	r3, [r7, #12]
 800ca56:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	681b      	ldr	r3, [r3, #0]
 800ca68:	3324      	adds	r3, #36	@ 0x24
 800ca6a:	4619      	mov	r1, r3
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ca70:	461a      	mov	r2, r3
 800ca72:	88fb      	ldrh	r3, [r7, #6]
 800ca74:	f7f8 f97c 	bl	8004d70 <HAL_DMA_Start_IT>
 800ca78:	4603      	mov	r3, r0
 800ca7a:	2b00      	cmp	r3, #0
 800ca7c:	d009      	beq.n	800ca92 <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	2210      	movs	r2, #16
 800ca82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800ca86:	68fb      	ldr	r3, [r7, #12]
 800ca88:	2220      	movs	r2, #32
 800ca8a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	e051      	b.n	800cb36 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	691b      	ldr	r3, [r3, #16]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d018      	beq.n	800cacc <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800caa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800caa2:	e853 3f00 	ldrex	r3, [r3]
 800caa6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800caa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800caaa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800caae:	657b      	str	r3, [r7, #84]	@ 0x54
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	461a      	mov	r2, r3
 800cab6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800cab8:	64bb      	str	r3, [r7, #72]	@ 0x48
 800caba:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cabc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800cabe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cac0:	e841 2300 	strex	r3, r2, [r1]
 800cac4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800cac6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d1e6      	bne.n	800ca9a <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cacc:	68fb      	ldr	r3, [r7, #12]
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	3308      	adds	r3, #8
 800cad2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cad4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cad6:	e853 3f00 	ldrex	r3, [r3]
 800cada:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cadc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cade:	f043 0301 	orr.w	r3, r3, #1
 800cae2:	653b      	str	r3, [r7, #80]	@ 0x50
 800cae4:	68fb      	ldr	r3, [r7, #12]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	3308      	adds	r3, #8
 800caea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800caec:	637a      	str	r2, [r7, #52]	@ 0x34
 800caee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800caf0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800caf2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800caf4:	e841 2300 	strex	r3, r2, [r1]
 800caf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 800cafa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d1e5      	bne.n	800cacc <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	681b      	ldr	r3, [r3, #0]
 800cb04:	3308      	adds	r3, #8
 800cb06:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb08:	697b      	ldr	r3, [r7, #20]
 800cb0a:	e853 3f00 	ldrex	r3, [r3]
 800cb0e:	613b      	str	r3, [r7, #16]
   return(result);
 800cb10:	693b      	ldr	r3, [r7, #16]
 800cb12:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cb16:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	681b      	ldr	r3, [r3, #0]
 800cb1c:	3308      	adds	r3, #8
 800cb1e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800cb20:	623a      	str	r2, [r7, #32]
 800cb22:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb24:	69f9      	ldr	r1, [r7, #28]
 800cb26:	6a3a      	ldr	r2, [r7, #32]
 800cb28:	e841 2300 	strex	r3, r2, [r1]
 800cb2c:	61bb      	str	r3, [r7, #24]
   return(result);
 800cb2e:	69bb      	ldr	r3, [r7, #24]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1e5      	bne.n	800cb00 <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 800cb34:	2300      	movs	r3, #0
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	3758      	adds	r7, #88	@ 0x58
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	bd80      	pop	{r7, pc}
 800cb3e:	bf00      	nop
 800cb40:	0800cc9d 	.word	0x0800cc9d
 800cb44:	0800cdc5 	.word	0x0800cdc5
 800cb48:	0800ce03 	.word	0x0800ce03

0800cb4c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800cb4c:	b480      	push	{r7}
 800cb4e:	b08f      	sub	sp, #60	@ 0x3c
 800cb50:	af00      	add	r7, sp, #0
 800cb52:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	681b      	ldr	r3, [r3, #0]
 800cb58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb5a:	6a3b      	ldr	r3, [r7, #32]
 800cb5c:	e853 3f00 	ldrex	r3, [r3]
 800cb60:	61fb      	str	r3, [r7, #28]
   return(result);
 800cb62:	69fb      	ldr	r3, [r7, #28]
 800cb64:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800cb68:	637b      	str	r3, [r7, #52]	@ 0x34
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	681b      	ldr	r3, [r3, #0]
 800cb6e:	461a      	mov	r2, r3
 800cb70:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cb72:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800cb74:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cb76:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cb78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cb7a:	e841 2300 	strex	r3, r2, [r1]
 800cb7e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cb80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d1e6      	bne.n	800cb54 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	3308      	adds	r3, #8
 800cb8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	e853 3f00 	ldrex	r3, [r3]
 800cb94:	60bb      	str	r3, [r7, #8]
   return(result);
 800cb96:	68bb      	ldr	r3, [r7, #8]
 800cb98:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 800cb9c:	633b      	str	r3, [r7, #48]	@ 0x30
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	3308      	adds	r3, #8
 800cba4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cba6:	61ba      	str	r2, [r7, #24]
 800cba8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbaa:	6979      	ldr	r1, [r7, #20]
 800cbac:	69ba      	ldr	r2, [r7, #24]
 800cbae:	e841 2300 	strex	r3, r2, [r1]
 800cbb2:	613b      	str	r3, [r7, #16]
   return(result);
 800cbb4:	693b      	ldr	r3, [r7, #16]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d1e5      	bne.n	800cb86 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	2220      	movs	r2, #32
 800cbbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 800cbc2:	bf00      	nop
 800cbc4:	373c      	adds	r7, #60	@ 0x3c
 800cbc6:	46bd      	mov	sp, r7
 800cbc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbcc:	4770      	bx	lr
	...

0800cbd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cbd0:	b480      	push	{r7}
 800cbd2:	b095      	sub	sp, #84	@ 0x54
 800cbd4:	af00      	add	r7, sp, #0
 800cbd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cbd8:	687b      	ldr	r3, [r7, #4]
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cbe0:	e853 3f00 	ldrex	r3, [r3]
 800cbe4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800cbe6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cbe8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800cbec:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800cbf6:	643b      	str	r3, [r7, #64]	@ 0x40
 800cbf8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbfa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800cbfc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800cbfe:	e841 2300 	strex	r3, r2, [r1]
 800cc02:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800cc04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800cc06:	2b00      	cmp	r3, #0
 800cc08:	d1e6      	bne.n	800cbd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	681b      	ldr	r3, [r3, #0]
 800cc0e:	3308      	adds	r3, #8
 800cc10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc12:	6a3b      	ldr	r3, [r7, #32]
 800cc14:	e853 3f00 	ldrex	r3, [r3]
 800cc18:	61fb      	str	r3, [r7, #28]
   return(result);
 800cc1a:	69fa      	ldr	r2, [r7, #28]
 800cc1c:	4b1e      	ldr	r3, [pc, #120]	@ (800cc98 <UART_EndRxTransfer+0xc8>)
 800cc1e:	4013      	ands	r3, r2
 800cc20:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	3308      	adds	r3, #8
 800cc28:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800cc2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800cc2c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc2e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800cc30:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cc32:	e841 2300 	strex	r3, r2, [r1]
 800cc36:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800cc38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cc3a:	2b00      	cmp	r3, #0
 800cc3c:	d1e5      	bne.n	800cc0a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc42:	2b01      	cmp	r3, #1
 800cc44:	d118      	bne.n	800cc78 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	681b      	ldr	r3, [r3, #0]
 800cc4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	e853 3f00 	ldrex	r3, [r3]
 800cc52:	60bb      	str	r3, [r7, #8]
   return(result);
 800cc54:	68bb      	ldr	r3, [r7, #8]
 800cc56:	f023 0310 	bic.w	r3, r3, #16
 800cc5a:	647b      	str	r3, [r7, #68]	@ 0x44
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	681b      	ldr	r3, [r3, #0]
 800cc60:	461a      	mov	r2, r3
 800cc62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cc64:	61bb      	str	r3, [r7, #24]
 800cc66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc68:	6979      	ldr	r1, [r7, #20]
 800cc6a:	69ba      	ldr	r2, [r7, #24]
 800cc6c:	e841 2300 	strex	r3, r2, [r1]
 800cc70:	613b      	str	r3, [r7, #16]
   return(result);
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	2b00      	cmp	r3, #0
 800cc76:	d1e6      	bne.n	800cc46 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	2220      	movs	r2, #32
 800cc7c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	2200      	movs	r2, #0
 800cc84:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	2200      	movs	r2, #0
 800cc8a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800cc8c:	bf00      	nop
 800cc8e:	3754      	adds	r7, #84	@ 0x54
 800cc90:	46bd      	mov	sp, r7
 800cc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc96:	4770      	bx	lr
 800cc98:	effffffe 	.word	0xeffffffe

0800cc9c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800cc9c:	b580      	push	{r7, lr}
 800cc9e:	b09c      	sub	sp, #112	@ 0x70
 800cca0:	af00      	add	r7, sp, #0
 800cca2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cca4:	687b      	ldr	r3, [r7, #4]
 800cca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cca8:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	69db      	ldr	r3, [r3, #28]
 800ccae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ccb2:	d071      	beq.n	800cd98 <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800ccb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ccb6:	2200      	movs	r2, #0
 800ccb8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ccbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ccbe:	681b      	ldr	r3, [r3, #0]
 800ccc0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccc2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ccc4:	e853 3f00 	ldrex	r3, [r3]
 800ccc8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800ccca:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cccc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ccd0:	66bb      	str	r3, [r7, #104]	@ 0x68
 800ccd2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	461a      	mov	r2, r3
 800ccd8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800ccda:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ccdc:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ccde:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800cce0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800cce2:	e841 2300 	strex	r3, r2, [r1]
 800cce6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800cce8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d1e6      	bne.n	800ccbc <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ccee:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ccf0:	681b      	ldr	r3, [r3, #0]
 800ccf2:	3308      	adds	r3, #8
 800ccf4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ccf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ccf8:	e853 3f00 	ldrex	r3, [r3]
 800ccfc:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800ccfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd00:	f023 0301 	bic.w	r3, r3, #1
 800cd04:	667b      	str	r3, [r7, #100]	@ 0x64
 800cd06:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd08:	681b      	ldr	r3, [r3, #0]
 800cd0a:	3308      	adds	r3, #8
 800cd0c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800cd0e:	647a      	str	r2, [r7, #68]	@ 0x44
 800cd10:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd12:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800cd14:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cd16:	e841 2300 	strex	r3, r2, [r1]
 800cd1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800cd1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d1e5      	bne.n	800ccee <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	3308      	adds	r3, #8
 800cd28:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd2c:	e853 3f00 	ldrex	r3, [r3]
 800cd30:	623b      	str	r3, [r7, #32]
   return(result);
 800cd32:	6a3b      	ldr	r3, [r7, #32]
 800cd34:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cd38:	663b      	str	r3, [r7, #96]	@ 0x60
 800cd3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	3308      	adds	r3, #8
 800cd40:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800cd42:	633a      	str	r2, [r7, #48]	@ 0x30
 800cd44:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd46:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800cd48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800cd4a:	e841 2300 	strex	r3, r2, [r1]
 800cd4e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800cd50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd52:	2b00      	cmp	r3, #0
 800cd54:	d1e5      	bne.n	800cd22 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800cd56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd58:	2220      	movs	r2, #32
 800cd5a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cd62:	2b01      	cmp	r3, #1
 800cd64:	d118      	bne.n	800cd98 <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cd66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd6c:	693b      	ldr	r3, [r7, #16]
 800cd6e:	e853 3f00 	ldrex	r3, [r3]
 800cd72:	60fb      	str	r3, [r7, #12]
   return(result);
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	f023 0310 	bic.w	r3, r3, #16
 800cd7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800cd7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd7e:	681b      	ldr	r3, [r3, #0]
 800cd80:	461a      	mov	r2, r3
 800cd82:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800cd84:	61fb      	str	r3, [r7, #28]
 800cd86:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd88:	69b9      	ldr	r1, [r7, #24]
 800cd8a:	69fa      	ldr	r2, [r7, #28]
 800cd8c:	e841 2300 	strex	r3, r2, [r1]
 800cd90:	617b      	str	r3, [r7, #20]
   return(result);
 800cd92:	697b      	ldr	r3, [r7, #20]
 800cd94:	2b00      	cmp	r3, #0
 800cd96:	d1e6      	bne.n	800cd66 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800cd98:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd9e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cda0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cda2:	2b01      	cmp	r3, #1
 800cda4:	d107      	bne.n	800cdb6 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800cda6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cda8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cdac:	4619      	mov	r1, r3
 800cdae:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cdb0:	f7f5 f840 	bl	8001e34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cdb4:	e002      	b.n	800cdbc <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800cdb6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800cdb8:	f7fe fee2 	bl	800bb80 <HAL_UART_RxCpltCallback>
}
 800cdbc:	bf00      	nop
 800cdbe:	3770      	adds	r7, #112	@ 0x70
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	bd80      	pop	{r7, pc}

0800cdc4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b084      	sub	sp, #16
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800cdd0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	2201      	movs	r2, #1
 800cdd6:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cdd8:	68fb      	ldr	r3, [r7, #12]
 800cdda:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	d109      	bne.n	800cdf4 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800cde6:	085b      	lsrs	r3, r3, #1
 800cde8:	b29b      	uxth	r3, r3
 800cdea:	4619      	mov	r1, r3
 800cdec:	68f8      	ldr	r0, [r7, #12]
 800cdee:	f7f5 f821 	bl	8001e34 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800cdf2:	e002      	b.n	800cdfa <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800cdf4:	68f8      	ldr	r0, [r7, #12]
 800cdf6:	f7fe fecd 	bl	800bb94 <HAL_UART_RxHalfCpltCallback>
}
 800cdfa:	bf00      	nop
 800cdfc:	3710      	adds	r7, #16
 800cdfe:	46bd      	mov	sp, r7
 800ce00:	bd80      	pop	{r7, pc}

0800ce02 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800ce02:	b580      	push	{r7, lr}
 800ce04:	b086      	sub	sp, #24
 800ce06:	af00      	add	r7, sp, #0
 800ce08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ce0a:	687b      	ldr	r3, [r7, #4]
 800ce0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce0e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800ce10:	697b      	ldr	r3, [r7, #20]
 800ce12:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800ce16:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800ce1e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800ce20:	697b      	ldr	r3, [r7, #20]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	689b      	ldr	r3, [r3, #8]
 800ce26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800ce2a:	2b80      	cmp	r3, #128	@ 0x80
 800ce2c:	d109      	bne.n	800ce42 <UART_DMAError+0x40>
 800ce2e:	693b      	ldr	r3, [r7, #16]
 800ce30:	2b21      	cmp	r3, #33	@ 0x21
 800ce32:	d106      	bne.n	800ce42 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800ce34:	697b      	ldr	r3, [r7, #20]
 800ce36:	2200      	movs	r2, #0
 800ce38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 800ce3c:	6978      	ldr	r0, [r7, #20]
 800ce3e:	f7ff fe85 	bl	800cb4c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ce42:	697b      	ldr	r3, [r7, #20]
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	689b      	ldr	r3, [r3, #8]
 800ce48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ce4c:	2b40      	cmp	r3, #64	@ 0x40
 800ce4e:	d109      	bne.n	800ce64 <UART_DMAError+0x62>
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	2b22      	cmp	r3, #34	@ 0x22
 800ce54:	d106      	bne.n	800ce64 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ce56:	697b      	ldr	r3, [r7, #20]
 800ce58:	2200      	movs	r2, #0
 800ce5a:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 800ce5e:	6978      	ldr	r0, [r7, #20]
 800ce60:	f7ff feb6 	bl	800cbd0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ce64:	697b      	ldr	r3, [r7, #20]
 800ce66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800ce6a:	f043 0210 	orr.w	r2, r3, #16
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce74:	6978      	ldr	r0, [r7, #20]
 800ce76:	f7fe fe97 	bl	800bba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce7a:	bf00      	nop
 800ce7c:	3718      	adds	r7, #24
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}

0800ce82 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800ce82:	b580      	push	{r7, lr}
 800ce84:	b084      	sub	sp, #16
 800ce86:	af00      	add	r7, sp, #0
 800ce88:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ce8a:	687b      	ldr	r3, [r7, #4]
 800ce8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ce8e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ce90:	68fb      	ldr	r3, [r7, #12]
 800ce92:	2200      	movs	r2, #0
 800ce94:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ce98:	68f8      	ldr	r0, [r7, #12]
 800ce9a:	f7fe fe85 	bl	800bba8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ce9e:	bf00      	nop
 800cea0:	3710      	adds	r7, #16
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}

0800cea6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800cea6:	b580      	push	{r7, lr}
 800cea8:	b088      	sub	sp, #32
 800ceaa:	af00      	add	r7, sp, #0
 800ceac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	681b      	ldr	r3, [r3, #0]
 800ceb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	e853 3f00 	ldrex	r3, [r3]
 800ceba:	60bb      	str	r3, [r7, #8]
   return(result);
 800cebc:	68bb      	ldr	r3, [r7, #8]
 800cebe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800cec2:	61fb      	str	r3, [r7, #28]
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	461a      	mov	r2, r3
 800ceca:	69fb      	ldr	r3, [r7, #28]
 800cecc:	61bb      	str	r3, [r7, #24]
 800cece:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ced0:	6979      	ldr	r1, [r7, #20]
 800ced2:	69ba      	ldr	r2, [r7, #24]
 800ced4:	e841 2300 	strex	r3, r2, [r1]
 800ced8:	613b      	str	r3, [r7, #16]
   return(result);
 800ceda:	693b      	ldr	r3, [r7, #16]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d1e6      	bne.n	800ceae <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2220      	movs	r2, #32
 800cee4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2200      	movs	r2, #0
 800ceec:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800ceee:	6878      	ldr	r0, [r7, #4]
 800cef0:	f7fe fe3c 	bl	800bb6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cef4:	bf00      	nop
 800cef6:	3720      	adds	r7, #32
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800cefc:	b480      	push	{r7}
 800cefe:	b083      	sub	sp, #12
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800cf04:	bf00      	nop
 800cf06:	370c      	adds	r7, #12
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf0e:	4770      	bx	lr

0800cf10 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800cf10:	b480      	push	{r7}
 800cf12:	b083      	sub	sp, #12
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800cf18:	bf00      	nop
 800cf1a:	370c      	adds	r7, #12
 800cf1c:	46bd      	mov	sp, r7
 800cf1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf22:	4770      	bx	lr

0800cf24 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800cf24:	b480      	push	{r7}
 800cf26:	b083      	sub	sp, #12
 800cf28:	af00      	add	r7, sp, #0
 800cf2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800cf2c:	bf00      	nop
 800cf2e:	370c      	adds	r7, #12
 800cf30:	46bd      	mov	sp, r7
 800cf32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf36:	4770      	bx	lr

0800cf38 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800cf38:	b480      	push	{r7}
 800cf3a:	b085      	sub	sp, #20
 800cf3c:	af00      	add	r7, sp, #0
 800cf3e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cf46:	2b01      	cmp	r3, #1
 800cf48:	d101      	bne.n	800cf4e <HAL_UARTEx_DisableFifoMode+0x16>
 800cf4a:	2302      	movs	r3, #2
 800cf4c:	e027      	b.n	800cf9e <HAL_UARTEx_DisableFifoMode+0x66>
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	2201      	movs	r2, #1
 800cf52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	2224      	movs	r2, #36	@ 0x24
 800cf5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cf5e:	687b      	ldr	r3, [r7, #4]
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	681b      	ldr	r3, [r3, #0]
 800cf6a:	681a      	ldr	r2, [r3, #0]
 800cf6c:	687b      	ldr	r3, [r7, #4]
 800cf6e:	681b      	ldr	r3, [r3, #0]
 800cf70:	f022 0201 	bic.w	r2, r2, #1
 800cf74:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800cf7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800cf7e:	687b      	ldr	r3, [r7, #4]
 800cf80:	2200      	movs	r2, #0
 800cf82:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	2220      	movs	r2, #32
 800cf90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	2200      	movs	r2, #0
 800cf98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800cf9c:	2300      	movs	r3, #0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	3714      	adds	r7, #20
 800cfa2:	46bd      	mov	sp, r7
 800cfa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfa8:	4770      	bx	lr

0800cfaa <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800cfaa:	b580      	push	{r7, lr}
 800cfac:	b084      	sub	sp, #16
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]
 800cfb2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800cfba:	2b01      	cmp	r3, #1
 800cfbc:	d101      	bne.n	800cfc2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800cfbe:	2302      	movs	r3, #2
 800cfc0:	e02d      	b.n	800d01e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800cfc2:	687b      	ldr	r3, [r7, #4]
 800cfc4:	2201      	movs	r2, #1
 800cfc6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	2224      	movs	r2, #36	@ 0x24
 800cfce:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	681b      	ldr	r3, [r3, #0]
 800cfd8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	681b      	ldr	r3, [r3, #0]
 800cfde:	681a      	ldr	r2, [r3, #0]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	681b      	ldr	r3, [r3, #0]
 800cfe4:	f022 0201 	bic.w	r2, r2, #1
 800cfe8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	689b      	ldr	r3, [r3, #8]
 800cff0:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	683a      	ldr	r2, [r7, #0]
 800cffa:	430a      	orrs	r2, r1
 800cffc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800cffe:	6878      	ldr	r0, [r7, #4]
 800d000:	f000 f8a4 	bl	800d14c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	68fa      	ldr	r2, [r7, #12]
 800d00a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d00c:	687b      	ldr	r3, [r7, #4]
 800d00e:	2220      	movs	r2, #32
 800d010:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	2200      	movs	r2, #0
 800d018:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d01c:	2300      	movs	r3, #0
}
 800d01e:	4618      	mov	r0, r3
 800d020:	3710      	adds	r7, #16
 800d022:	46bd      	mov	sp, r7
 800d024:	bd80      	pop	{r7, pc}

0800d026 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800d026:	b580      	push	{r7, lr}
 800d028:	b084      	sub	sp, #16
 800d02a:	af00      	add	r7, sp, #0
 800d02c:	6078      	str	r0, [r7, #4]
 800d02e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d030:	687b      	ldr	r3, [r7, #4]
 800d032:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800d036:	2b01      	cmp	r3, #1
 800d038:	d101      	bne.n	800d03e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800d03a:	2302      	movs	r3, #2
 800d03c:	e02d      	b.n	800d09a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	2201      	movs	r2, #1
 800d042:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d046:	687b      	ldr	r3, [r7, #4]
 800d048:	2224      	movs	r2, #36	@ 0x24
 800d04a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	681b      	ldr	r3, [r3, #0]
 800d054:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	681a      	ldr	r2, [r3, #0]
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	f022 0201 	bic.w	r2, r2, #1
 800d064:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	689b      	ldr	r3, [r3, #8]
 800d06c:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	683a      	ldr	r2, [r7, #0]
 800d076:	430a      	orrs	r2, r1
 800d078:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800d07a:	6878      	ldr	r0, [r7, #4]
 800d07c:	f000 f866 	bl	800d14c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	68fa      	ldr	r2, [r7, #12]
 800d086:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2220      	movs	r2, #32
 800d08c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	2200      	movs	r2, #0
 800d094:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800d098:	2300      	movs	r3, #0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3710      	adds	r7, #16
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bd80      	pop	{r7, pc}

0800d0a2 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d0a2:	b580      	push	{r7, lr}
 800d0a4:	b08c      	sub	sp, #48	@ 0x30
 800d0a6:	af00      	add	r7, sp, #0
 800d0a8:	60f8      	str	r0, [r7, #12]
 800d0aa:	60b9      	str	r1, [r7, #8]
 800d0ac:	4613      	mov	r3, r2
 800d0ae:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800d0b6:	2b20      	cmp	r3, #32
 800d0b8:	d142      	bne.n	800d140 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 800d0ba:	68bb      	ldr	r3, [r7, #8]
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d002      	beq.n	800d0c6 <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 800d0c0:	88fb      	ldrh	r3, [r7, #6]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d101      	bne.n	800d0ca <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	e03b      	b.n	800d142 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	2201      	movs	r2, #1
 800d0ce:	66da      	str	r2, [r3, #108]	@ 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	2200      	movs	r2, #0
 800d0d4:	671a      	str	r2, [r3, #112]	@ 0x70

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800d0d6:	88fb      	ldrh	r3, [r7, #6]
 800d0d8:	461a      	mov	r2, r3
 800d0da:	68b9      	ldr	r1, [r7, #8]
 800d0dc:	68f8      	ldr	r0, [r7, #12]
 800d0de:	f7ff fc8f 	bl	800ca00 <UART_Start_Receive_DMA>
 800d0e2:	4603      	mov	r3, r0
 800d0e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 800d0e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	d124      	bne.n	800d13a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d0f4:	2b01      	cmp	r3, #1
 800d0f6:	d11d      	bne.n	800d134 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	681b      	ldr	r3, [r3, #0]
 800d0fc:	2210      	movs	r2, #16
 800d0fe:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d106:	69bb      	ldr	r3, [r7, #24]
 800d108:	e853 3f00 	ldrex	r3, [r3]
 800d10c:	617b      	str	r3, [r7, #20]
   return(result);
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	f043 0310 	orr.w	r3, r3, #16
 800d114:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d116:	68fb      	ldr	r3, [r7, #12]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	461a      	mov	r2, r3
 800d11c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d11e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d120:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d122:	6a39      	ldr	r1, [r7, #32]
 800d124:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d126:	e841 2300 	strex	r3, r2, [r1]
 800d12a:	61fb      	str	r3, [r7, #28]
   return(result);
 800d12c:	69fb      	ldr	r3, [r7, #28]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d1e6      	bne.n	800d100 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 800d132:	e002      	b.n	800d13a <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 800d134:	2301      	movs	r3, #1
 800d136:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800d13a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800d13e:	e000      	b.n	800d142 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800d140:	2302      	movs	r3, #2
  }
}
 800d142:	4618      	mov	r0, r3
 800d144:	3730      	adds	r7, #48	@ 0x30
 800d146:	46bd      	mov	sp, r7
 800d148:	bd80      	pop	{r7, pc}
	...

0800d14c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800d14c:	b480      	push	{r7}
 800d14e:	b085      	sub	sp, #20
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d158:	2b00      	cmp	r3, #0
 800d15a:	d108      	bne.n	800d16e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800d15c:	687b      	ldr	r3, [r7, #4]
 800d15e:	2201      	movs	r2, #1
 800d160:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2201      	movs	r2, #1
 800d168:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d16c:	e031      	b.n	800d1d2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800d16e:	2310      	movs	r3, #16
 800d170:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800d172:	2310      	movs	r3, #16
 800d174:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	689b      	ldr	r3, [r3, #8]
 800d17c:	0e5b      	lsrs	r3, r3, #25
 800d17e:	b2db      	uxtb	r3, r3
 800d180:	f003 0307 	and.w	r3, r3, #7
 800d184:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	689b      	ldr	r3, [r3, #8]
 800d18c:	0f5b      	lsrs	r3, r3, #29
 800d18e:	b2db      	uxtb	r3, r3
 800d190:	f003 0307 	and.w	r3, r3, #7
 800d194:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d196:	7bbb      	ldrb	r3, [r7, #14]
 800d198:	7b3a      	ldrb	r2, [r7, #12]
 800d19a:	4911      	ldr	r1, [pc, #68]	@ (800d1e0 <UARTEx_SetNbDataToProcess+0x94>)
 800d19c:	5c8a      	ldrb	r2, [r1, r2]
 800d19e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800d1a2:	7b3a      	ldrb	r2, [r7, #12]
 800d1a4:	490f      	ldr	r1, [pc, #60]	@ (800d1e4 <UARTEx_SetNbDataToProcess+0x98>)
 800d1a6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d1a8:	fb93 f3f2 	sdiv	r3, r3, r2
 800d1ac:	b29a      	uxth	r2, r3
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d1b4:	7bfb      	ldrb	r3, [r7, #15]
 800d1b6:	7b7a      	ldrb	r2, [r7, #13]
 800d1b8:	4909      	ldr	r1, [pc, #36]	@ (800d1e0 <UARTEx_SetNbDataToProcess+0x94>)
 800d1ba:	5c8a      	ldrb	r2, [r1, r2]
 800d1bc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800d1c0:	7b7a      	ldrb	r2, [r7, #13]
 800d1c2:	4908      	ldr	r1, [pc, #32]	@ (800d1e4 <UARTEx_SetNbDataToProcess+0x98>)
 800d1c4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d1c6:	fb93 f3f2 	sdiv	r3, r3, r2
 800d1ca:	b29a      	uxth	r2, r3
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800d1d2:	bf00      	nop
 800d1d4:	3714      	adds	r7, #20
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1dc:	4770      	bx	lr
 800d1de:	bf00      	nop
 800d1e0:	08011ca0 	.word	0x08011ca0
 800d1e4:	08011ca8 	.word	0x08011ca8

0800d1e8 <sqrt>:
 800d1e8:	b508      	push	{r3, lr}
 800d1ea:	ed2d 8b04 	vpush	{d8-d9}
 800d1ee:	eeb0 8b40 	vmov.f64	d8, d0
 800d1f2:	f000 feaa 	bl	800df4a <__ieee754_sqrt>
 800d1f6:	eeb4 8b48 	vcmp.f64	d8, d8
 800d1fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d1fe:	d60c      	bvs.n	800d21a <sqrt+0x32>
 800d200:	ed9f 9b07 	vldr	d9, [pc, #28]	@ 800d220 <sqrt+0x38>
 800d204:	eeb4 8bc9 	vcmpe.f64	d8, d9
 800d208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d20c:	d505      	bpl.n	800d21a <sqrt+0x32>
 800d20e:	f002 fc25 	bl	800fa5c <__errno>
 800d212:	ee89 0b09 	vdiv.f64	d0, d9, d9
 800d216:	2321      	movs	r3, #33	@ 0x21
 800d218:	6003      	str	r3, [r0, #0]
 800d21a:	ecbd 8b04 	vpop	{d8-d9}
 800d21e:	bd08      	pop	{r3, pc}
	...

0800d228 <cos>:
 800d228:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d22a:	eeb0 7b40 	vmov.f64	d7, d0
 800d22e:	ee17 3a90 	vmov	r3, s15
 800d232:	4a21      	ldr	r2, [pc, #132]	@ (800d2b8 <cos+0x90>)
 800d234:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d238:	4293      	cmp	r3, r2
 800d23a:	d806      	bhi.n	800d24a <cos+0x22>
 800d23c:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800d2b0 <cos+0x88>
 800d240:	b005      	add	sp, #20
 800d242:	f85d eb04 	ldr.w	lr, [sp], #4
 800d246:	f000 be87 	b.w	800df58 <__kernel_cos>
 800d24a:	4a1c      	ldr	r2, [pc, #112]	@ (800d2bc <cos+0x94>)
 800d24c:	4293      	cmp	r3, r2
 800d24e:	d904      	bls.n	800d25a <cos+0x32>
 800d250:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d254:	b005      	add	sp, #20
 800d256:	f85d fb04 	ldr.w	pc, [sp], #4
 800d25a:	4668      	mov	r0, sp
 800d25c:	f000 ff3c 	bl	800e0d8 <__ieee754_rem_pio2>
 800d260:	f000 0003 	and.w	r0, r0, #3
 800d264:	2801      	cmp	r0, #1
 800d266:	d009      	beq.n	800d27c <cos+0x54>
 800d268:	2802      	cmp	r0, #2
 800d26a:	d010      	beq.n	800d28e <cos+0x66>
 800d26c:	b9b0      	cbnz	r0, 800d29c <cos+0x74>
 800d26e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d272:	ed9d 0b00 	vldr	d0, [sp]
 800d276:	f000 fe6f 	bl	800df58 <__kernel_cos>
 800d27a:	e7eb      	b.n	800d254 <cos+0x2c>
 800d27c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d280:	ed9d 0b00 	vldr	d0, [sp]
 800d284:	f000 fed0 	bl	800e028 <__kernel_sin>
 800d288:	eeb1 0b40 	vneg.f64	d0, d0
 800d28c:	e7e2      	b.n	800d254 <cos+0x2c>
 800d28e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d292:	ed9d 0b00 	vldr	d0, [sp]
 800d296:	f000 fe5f 	bl	800df58 <__kernel_cos>
 800d29a:	e7f5      	b.n	800d288 <cos+0x60>
 800d29c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d2a0:	ed9d 0b00 	vldr	d0, [sp]
 800d2a4:	2001      	movs	r0, #1
 800d2a6:	f000 febf 	bl	800e028 <__kernel_sin>
 800d2aa:	e7d3      	b.n	800d254 <cos+0x2c>
 800d2ac:	f3af 8000 	nop.w
	...
 800d2b8:	3fe921fb 	.word	0x3fe921fb
 800d2bc:	7fefffff 	.word	0x7fefffff

0800d2c0 <sin>:
 800d2c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d2c2:	eeb0 7b40 	vmov.f64	d7, d0
 800d2c6:	ee17 3a90 	vmov	r3, s15
 800d2ca:	4a21      	ldr	r2, [pc, #132]	@ (800d350 <sin+0x90>)
 800d2cc:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d2d0:	4293      	cmp	r3, r2
 800d2d2:	d807      	bhi.n	800d2e4 <sin+0x24>
 800d2d4:	ed9f 1b1c 	vldr	d1, [pc, #112]	@ 800d348 <sin+0x88>
 800d2d8:	2000      	movs	r0, #0
 800d2da:	b005      	add	sp, #20
 800d2dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800d2e0:	f000 bea2 	b.w	800e028 <__kernel_sin>
 800d2e4:	4a1b      	ldr	r2, [pc, #108]	@ (800d354 <sin+0x94>)
 800d2e6:	4293      	cmp	r3, r2
 800d2e8:	d904      	bls.n	800d2f4 <sin+0x34>
 800d2ea:	ee30 0b40 	vsub.f64	d0, d0, d0
 800d2ee:	b005      	add	sp, #20
 800d2f0:	f85d fb04 	ldr.w	pc, [sp], #4
 800d2f4:	4668      	mov	r0, sp
 800d2f6:	f000 feef 	bl	800e0d8 <__ieee754_rem_pio2>
 800d2fa:	f000 0003 	and.w	r0, r0, #3
 800d2fe:	2801      	cmp	r0, #1
 800d300:	d00a      	beq.n	800d318 <sin+0x58>
 800d302:	2802      	cmp	r0, #2
 800d304:	d00f      	beq.n	800d326 <sin+0x66>
 800d306:	b9c0      	cbnz	r0, 800d33a <sin+0x7a>
 800d308:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d30c:	ed9d 0b00 	vldr	d0, [sp]
 800d310:	2001      	movs	r0, #1
 800d312:	f000 fe89 	bl	800e028 <__kernel_sin>
 800d316:	e7ea      	b.n	800d2ee <sin+0x2e>
 800d318:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d31c:	ed9d 0b00 	vldr	d0, [sp]
 800d320:	f000 fe1a 	bl	800df58 <__kernel_cos>
 800d324:	e7e3      	b.n	800d2ee <sin+0x2e>
 800d326:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d32a:	ed9d 0b00 	vldr	d0, [sp]
 800d32e:	2001      	movs	r0, #1
 800d330:	f000 fe7a 	bl	800e028 <__kernel_sin>
 800d334:	eeb1 0b40 	vneg.f64	d0, d0
 800d338:	e7d9      	b.n	800d2ee <sin+0x2e>
 800d33a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d33e:	ed9d 0b00 	vldr	d0, [sp]
 800d342:	f000 fe09 	bl	800df58 <__kernel_cos>
 800d346:	e7f5      	b.n	800d334 <sin+0x74>
	...
 800d350:	3fe921fb 	.word	0x3fe921fb
 800d354:	7fefffff 	.word	0x7fefffff

0800d358 <sqrtf>:
 800d358:	b508      	push	{r3, lr}
 800d35a:	ed2d 8b02 	vpush	{d8}
 800d35e:	eeb0 8a40 	vmov.f32	s16, s0
 800d362:	f000 fdf5 	bl	800df50 <__ieee754_sqrtf>
 800d366:	eeb4 8a48 	vcmp.f32	s16, s16
 800d36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d36e:	d60c      	bvs.n	800d38a <sqrtf+0x32>
 800d370:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800d390 <sqrtf+0x38>
 800d374:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800d378:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d37c:	d505      	bpl.n	800d38a <sqrtf+0x32>
 800d37e:	f002 fb6d 	bl	800fa5c <__errno>
 800d382:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800d386:	2321      	movs	r3, #33	@ 0x21
 800d388:	6003      	str	r3, [r0, #0]
 800d38a:	ecbd 8b02 	vpop	{d8}
 800d38e:	bd08      	pop	{r3, pc}
 800d390:	00000000 	.word	0x00000000

0800d394 <checkint>:
 800d394:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800d398:	f240 33fe 	movw	r3, #1022	@ 0x3fe
 800d39c:	429a      	cmp	r2, r3
 800d39e:	b570      	push	{r4, r5, r6, lr}
 800d3a0:	dd2a      	ble.n	800d3f8 <checkint+0x64>
 800d3a2:	f240 4333 	movw	r3, #1075	@ 0x433
 800d3a6:	429a      	cmp	r2, r3
 800d3a8:	dc24      	bgt.n	800d3f4 <checkint+0x60>
 800d3aa:	1a9b      	subs	r3, r3, r2
 800d3ac:	f1a3 0620 	sub.w	r6, r3, #32
 800d3b0:	f04f 32ff 	mov.w	r2, #4294967295
 800d3b4:	fa02 f403 	lsl.w	r4, r2, r3
 800d3b8:	fa02 f606 	lsl.w	r6, r2, r6
 800d3bc:	f1c3 0520 	rsb	r5, r3, #32
 800d3c0:	fa22 f505 	lsr.w	r5, r2, r5
 800d3c4:	4334      	orrs	r4, r6
 800d3c6:	432c      	orrs	r4, r5
 800d3c8:	409a      	lsls	r2, r3
 800d3ca:	ea20 0202 	bic.w	r2, r0, r2
 800d3ce:	ea21 0404 	bic.w	r4, r1, r4
 800d3d2:	4322      	orrs	r2, r4
 800d3d4:	f1a3 0420 	sub.w	r4, r3, #32
 800d3d8:	f1c3 0220 	rsb	r2, r3, #32
 800d3dc:	d10c      	bne.n	800d3f8 <checkint+0x64>
 800d3de:	40d8      	lsrs	r0, r3
 800d3e0:	fa01 f302 	lsl.w	r3, r1, r2
 800d3e4:	4318      	orrs	r0, r3
 800d3e6:	40e1      	lsrs	r1, r4
 800d3e8:	4308      	orrs	r0, r1
 800d3ea:	f000 0001 	and.w	r0, r0, #1
 800d3ee:	f1d0 0002 	rsbs	r0, r0, #2
 800d3f2:	bd70      	pop	{r4, r5, r6, pc}
 800d3f4:	2002      	movs	r0, #2
 800d3f6:	e7fc      	b.n	800d3f2 <checkint+0x5e>
 800d3f8:	2000      	movs	r0, #0
 800d3fa:	e7fa      	b.n	800d3f2 <checkint+0x5e>
 800d3fc:	0000      	movs	r0, r0
	...

0800d400 <pow>:
 800d400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d404:	ee10 4a90 	vmov	r4, s1
 800d408:	ed2d 8b0a 	vpush	{d8-d12}
 800d40c:	ea4f 5814 	mov.w	r8, r4, lsr #20
 800d410:	ee11 aa90 	vmov	sl, s3
 800d414:	f108 32ff 	add.w	r2, r8, #4294967295
 800d418:	f240 73fd 	movw	r3, #2045	@ 0x7fd
 800d41c:	429a      	cmp	r2, r3
 800d41e:	ee10 5a10 	vmov	r5, s0
 800d422:	ee11 0a10 	vmov	r0, s2
 800d426:	b087      	sub	sp, #28
 800d428:	46c4      	mov	ip, r8
 800d42a:	ea4f 561a 	mov.w	r6, sl, lsr #20
 800d42e:	d806      	bhi.n	800d43e <pow+0x3e>
 800d430:	f3c6 030a 	ubfx	r3, r6, #0, #11
 800d434:	f2a3 33be 	subw	r3, r3, #958	@ 0x3be
 800d438:	2b7f      	cmp	r3, #127	@ 0x7f
 800d43a:	f240 8157 	bls.w	800d6ec <pow+0x2ec>
 800d43e:	1802      	adds	r2, r0, r0
 800d440:	eb4a 010a 	adc.w	r1, sl, sl
 800d444:	f06f 0b01 	mvn.w	fp, #1
 800d448:	1e57      	subs	r7, r2, #1
 800d44a:	f141 33ff 	adc.w	r3, r1, #4294967295
 800d44e:	f46f 1e00 	mvn.w	lr, #2097152	@ 0x200000
 800d452:	45bb      	cmp	fp, r7
 800d454:	eb7e 0303 	sbcs.w	r3, lr, r3
 800d458:	d242      	bcs.n	800d4e0 <pow+0xe0>
 800d45a:	ea52 0301 	orrs.w	r3, r2, r1
 800d45e:	f04f 0300 	mov.w	r3, #0
 800d462:	d10c      	bne.n	800d47e <pow+0x7e>
 800d464:	196d      	adds	r5, r5, r5
 800d466:	f484 2400 	eor.w	r4, r4, #524288	@ 0x80000
 800d46a:	4164      	adcs	r4, r4
 800d46c:	42ab      	cmp	r3, r5
 800d46e:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d472:	41a3      	sbcs	r3, r4
 800d474:	f0c0 808f 	bcc.w	800d596 <pow+0x196>
 800d478:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800d47c:	e02b      	b.n	800d4d6 <pow+0xd6>
 800d47e:	4ed4      	ldr	r6, [pc, #848]	@ (800d7d0 <pow+0x3d0>)
 800d480:	42b4      	cmp	r4, r6
 800d482:	bf08      	it	eq
 800d484:	429d      	cmpeq	r5, r3
 800d486:	d109      	bne.n	800d49c <pow+0x9c>
 800d488:	1800      	adds	r0, r0, r0
 800d48a:	f48a 2a00 	eor.w	sl, sl, #524288	@ 0x80000
 800d48e:	eb4a 0a0a 	adc.w	sl, sl, sl
 800d492:	4283      	cmp	r3, r0
 800d494:	4bcf      	ldr	r3, [pc, #828]	@ (800d7d4 <pow+0x3d4>)
 800d496:	eb73 030a 	sbcs.w	r3, r3, sl
 800d49a:	e7eb      	b.n	800d474 <pow+0x74>
 800d49c:	196d      	adds	r5, r5, r5
 800d49e:	48ce      	ldr	r0, [pc, #824]	@ (800d7d8 <pow+0x3d8>)
 800d4a0:	4164      	adcs	r4, r4
 800d4a2:	42ab      	cmp	r3, r5
 800d4a4:	eb70 0604 	sbcs.w	r6, r0, r4
 800d4a8:	d375      	bcc.n	800d596 <pow+0x196>
 800d4aa:	4281      	cmp	r1, r0
 800d4ac:	bf08      	it	eq
 800d4ae:	429a      	cmpeq	r2, r3
 800d4b0:	d171      	bne.n	800d596 <pow+0x196>
 800d4b2:	4aca      	ldr	r2, [pc, #808]	@ (800d7dc <pow+0x3dc>)
 800d4b4:	4294      	cmp	r4, r2
 800d4b6:	bf08      	it	eq
 800d4b8:	429d      	cmpeq	r5, r3
 800d4ba:	d0dd      	beq.n	800d478 <pow+0x78>
 800d4bc:	4294      	cmp	r4, r2
 800d4be:	ea6f 0a0a 	mvn.w	sl, sl
 800d4c2:	bf34      	ite	cc
 800d4c4:	2400      	movcc	r4, #0
 800d4c6:	2401      	movcs	r4, #1
 800d4c8:	ea4f 7ada 	mov.w	sl, sl, lsr #31
 800d4cc:	4554      	cmp	r4, sl
 800d4ce:	f040 81dc 	bne.w	800d88a <pow+0x48a>
 800d4d2:	ee21 0b01 	vmul.f64	d0, d1, d1
 800d4d6:	b007      	add	sp, #28
 800d4d8:	ecbd 8b0a 	vpop	{d8-d12}
 800d4dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4e0:	196f      	adds	r7, r5, r5
 800d4e2:	eb44 0904 	adc.w	r9, r4, r4
 800d4e6:	1e7a      	subs	r2, r7, #1
 800d4e8:	f169 0300 	sbc.w	r3, r9, #0
 800d4ec:	4593      	cmp	fp, r2
 800d4ee:	eb7e 0303 	sbcs.w	r3, lr, r3
 800d4f2:	d225      	bcs.n	800d540 <pow+0x140>
 800d4f4:	ee20 0b00 	vmul.f64	d0, d0, d0
 800d4f8:	2c00      	cmp	r4, #0
 800d4fa:	da13      	bge.n	800d524 <pow+0x124>
 800d4fc:	4651      	mov	r1, sl
 800d4fe:	f7ff ff49 	bl	800d394 <checkint>
 800d502:	2801      	cmp	r0, #1
 800d504:	d10e      	bne.n	800d524 <pow+0x124>
 800d506:	eeb1 0b40 	vneg.f64	d0, d0
 800d50a:	ea57 0909 	orrs.w	r9, r7, r9
 800d50e:	d10b      	bne.n	800d528 <pow+0x128>
 800d510:	f1ba 0f00 	cmp.w	sl, #0
 800d514:	dadf      	bge.n	800d4d6 <pow+0xd6>
 800d516:	b007      	add	sp, #28
 800d518:	ecbd 8b0a 	vpop	{d8-d12}
 800d51c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d520:	f000 bf56 	b.w	800e3d0 <__math_divzero>
 800d524:	2000      	movs	r0, #0
 800d526:	e7f0      	b.n	800d50a <pow+0x10a>
 800d528:	f1ba 0f00 	cmp.w	sl, #0
 800d52c:	dad3      	bge.n	800d4d6 <pow+0xd6>
 800d52e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800d532:	ee86 7b00 	vdiv.f64	d7, d6, d0
 800d536:	ed8d 7b00 	vstr	d7, [sp]
 800d53a:	ed9d 0b00 	vldr	d0, [sp]
 800d53e:	e7ca      	b.n	800d4d6 <pow+0xd6>
 800d540:	2c00      	cmp	r4, #0
 800d542:	da2b      	bge.n	800d59c <pow+0x19c>
 800d544:	4651      	mov	r1, sl
 800d546:	f7ff ff25 	bl	800d394 <checkint>
 800d54a:	b930      	cbnz	r0, 800d55a <pow+0x15a>
 800d54c:	b007      	add	sp, #28
 800d54e:	ecbd 8b0a 	vpop	{d8-d12}
 800d552:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d556:	f000 bf53 	b.w	800e400 <__math_invalid>
 800d55a:	1e41      	subs	r1, r0, #1
 800d55c:	4248      	negs	r0, r1
 800d55e:	4148      	adcs	r0, r1
 800d560:	0480      	lsls	r0, r0, #18
 800d562:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800d566:	f3c8 0c0a 	ubfx	ip, r8, #0, #11
 800d56a:	f3c6 020a 	ubfx	r2, r6, #0, #11
 800d56e:	f2a2 33be 	subw	r3, r2, #958	@ 0x3be
 800d572:	2b7f      	cmp	r3, #127	@ 0x7f
 800d574:	d92d      	bls.n	800d5d2 <pow+0x1d2>
 800d576:	4b96      	ldr	r3, [pc, #600]	@ (800d7d0 <pow+0x3d0>)
 800d578:	2000      	movs	r0, #0
 800d57a:	429c      	cmp	r4, r3
 800d57c:	bf08      	it	eq
 800d57e:	4285      	cmpeq	r5, r0
 800d580:	f43f af7a 	beq.w	800d478 <pow+0x78>
 800d584:	f240 31bd 	movw	r1, #957	@ 0x3bd
 800d588:	428a      	cmp	r2, r1
 800d58a:	d80c      	bhi.n	800d5a6 <pow+0x1a6>
 800d58c:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800d590:	42a8      	cmp	r0, r5
 800d592:	41a3      	sbcs	r3, r4
 800d594:	d204      	bcs.n	800d5a0 <pow+0x1a0>
 800d596:	ee31 0b00 	vadd.f64	d0, d1, d0
 800d59a:	e79c      	b.n	800d4d6 <pow+0xd6>
 800d59c:	2000      	movs	r0, #0
 800d59e:	e7e4      	b.n	800d56a <pow+0x16a>
 800d5a0:	ee30 0b41 	vsub.f64	d0, d0, d1
 800d5a4:	e797      	b.n	800d4d6 <pow+0xd6>
 800d5a6:	2d01      	cmp	r5, #1
 800d5a8:	eb74 0303 	sbcs.w	r3, r4, r3
 800d5ac:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800d5b0:	bf34      	ite	cc
 800d5b2:	2301      	movcc	r3, #1
 800d5b4:	2300      	movcs	r3, #0
 800d5b6:	4296      	cmp	r6, r2
 800d5b8:	bf8c      	ite	hi
 800d5ba:	2600      	movhi	r6, #0
 800d5bc:	2601      	movls	r6, #1
 800d5be:	42b3      	cmp	r3, r6
 800d5c0:	f000 809c 	beq.w	800d6fc <pow+0x2fc>
 800d5c4:	b007      	add	sp, #28
 800d5c6:	ecbd 8b0a 	vpop	{d8-d12}
 800d5ca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5ce:	f000 bef7 	b.w	800e3c0 <__math_oflow>
 800d5d2:	f1bc 0f00 	cmp.w	ip, #0
 800d5d6:	d10a      	bne.n	800d5ee <pow+0x1ee>
 800d5d8:	ed9f 7b79 	vldr	d7, [pc, #484]	@ 800d7c0 <pow+0x3c0>
 800d5dc:	ee20 7b07 	vmul.f64	d7, d0, d7
 800d5e0:	ec53 2b17 	vmov	r2, r3, d7
 800d5e4:	f023 4400 	bic.w	r4, r3, #2147483648	@ 0x80000000
 800d5e8:	4615      	mov	r5, r2
 800d5ea:	f1a4 7450 	sub.w	r4, r4, #54525952	@ 0x3400000
 800d5ee:	4a7c      	ldr	r2, [pc, #496]	@ (800d7e0 <pow+0x3e0>)
 800d5f0:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800d5f4:	4422      	add	r2, r4
 800d5f6:	1513      	asrs	r3, r2, #20
 800d5f8:	ee03 3a10 	vmov	s6, r3
 800d5fc:	4b79      	ldr	r3, [pc, #484]	@ (800d7e4 <pow+0x3e4>)
 800d5fe:	f3c2 3146 	ubfx	r1, r2, #13, #7
 800d602:	f36f 0213 	bfc	r2, #0, #20
 800d606:	eb03 1641 	add.w	r6, r3, r1, lsl #5
 800d60a:	1aa7      	subs	r7, r4, r2
 800d60c:	eb03 1241 	add.w	r2, r3, r1, lsl #5
 800d610:	ed92 5b12 	vldr	d5, [r2, #72]	@ 0x48
 800d614:	ed96 7b18 	vldr	d7, [r6, #96]	@ 0x60
 800d618:	1e2e      	subs	r6, r5, #0
 800d61a:	ec47 6b14 	vmov	d4, r6, r7
 800d61e:	ed92 2b16 	vldr	d2, [r2, #88]	@ 0x58
 800d622:	eea4 6b05 	vfma.f64	d6, d4, d5
 800d626:	ed93 5b00 	vldr	d5, [r3]
 800d62a:	eeb8 3bc3 	vcvt.f64.s32	d3, s6
 800d62e:	eea3 2b05 	vfma.f64	d2, d3, d5
 800d632:	ed93 5b02 	vldr	d5, [r3, #8]
 800d636:	ee36 4b02 	vadd.f64	d4, d6, d2
 800d63a:	ee32 2b44 	vsub.f64	d2, d2, d4
 800d63e:	eea3 7b05 	vfma.f64	d7, d3, d5
 800d642:	ed93 5b04 	vldr	d5, [r3, #16]
 800d646:	ee32 2b06 	vadd.f64	d2, d2, d6
 800d64a:	ee37 7b02 	vadd.f64	d7, d7, d2
 800d64e:	ee26 5b05 	vmul.f64	d5, d6, d5
 800d652:	ee26 0b05 	vmul.f64	d0, d6, d5
 800d656:	ee34 8b00 	vadd.f64	d8, d4, d0
 800d65a:	eeb0 9b40 	vmov.f64	d9, d0
 800d65e:	ee34 4b48 	vsub.f64	d4, d4, d8
 800d662:	ee96 9b05 	vfnms.f64	d9, d6, d5
 800d666:	ee34 ab00 	vadd.f64	d10, d4, d0
 800d66a:	ed93 5b06 	vldr	d5, [r3, #24]
 800d66e:	ee26 bb00 	vmul.f64	d11, d6, d0
 800d672:	ee37 7b09 	vadd.f64	d7, d7, d9
 800d676:	ed93 4b08 	vldr	d4, [r3, #32]
 800d67a:	ee37 7b0a 	vadd.f64	d7, d7, d10
 800d67e:	ed93 3b0c 	vldr	d3, [r3, #48]	@ 0x30
 800d682:	eea6 5b04 	vfma.f64	d5, d6, d4
 800d686:	ed93 4b0a 	vldr	d4, [r3, #40]	@ 0x28
 800d68a:	ed93 cb10 	vldr	d12, [r3, #64]	@ 0x40
 800d68e:	eea6 4b03 	vfma.f64	d4, d6, d3
 800d692:	ed93 3b0e 	vldr	d3, [r3, #56]	@ 0x38
 800d696:	eea6 3b0c 	vfma.f64	d3, d6, d12
 800d69a:	eea0 4b03 	vfma.f64	d4, d0, d3
 800d69e:	eea0 5b04 	vfma.f64	d5, d0, d4
 800d6a2:	eeab 7b05 	vfma.f64	d7, d11, d5
 800d6a6:	ee38 4b07 	vadd.f64	d4, d8, d7
 800d6aa:	ee21 6b04 	vmul.f64	d6, d1, d4
 800d6ae:	ee16 3a90 	vmov	r3, s13
 800d6b2:	eeb0 5b46 	vmov.f64	d5, d6
 800d6b6:	f3c3 560a 	ubfx	r6, r3, #20, #11
 800d6ba:	f46f 7272 	mvn.w	r2, #968	@ 0x3c8
 800d6be:	18b2      	adds	r2, r6, r2
 800d6c0:	2a3e      	cmp	r2, #62	@ 0x3e
 800d6c2:	ee91 5b04 	vfnms.f64	d5, d1, d4
 800d6c6:	ee38 8b44 	vsub.f64	d8, d8, d4
 800d6ca:	ee38 8b07 	vadd.f64	d8, d8, d7
 800d6ce:	eea1 5b08 	vfma.f64	d5, d1, d8
 800d6d2:	d91b      	bls.n	800d70c <pow+0x30c>
 800d6d4:	2a00      	cmp	r2, #0
 800d6d6:	da0b      	bge.n	800d6f0 <pow+0x2f0>
 800d6d8:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800d6dc:	ee36 0b00 	vadd.f64	d0, d6, d0
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	f43f aef8 	beq.w	800d4d6 <pow+0xd6>
 800d6e6:	eeb1 0b40 	vneg.f64	d0, d0
 800d6ea:	e6f4      	b.n	800d4d6 <pow+0xd6>
 800d6ec:	2000      	movs	r0, #0
 800d6ee:	e77e      	b.n	800d5ee <pow+0x1ee>
 800d6f0:	f5b6 6f81 	cmp.w	r6, #1032	@ 0x408
 800d6f4:	d909      	bls.n	800d70a <pow+0x30a>
 800d6f6:	2b00      	cmp	r3, #0
 800d6f8:	f6bf af64 	bge.w	800d5c4 <pow+0x1c4>
 800d6fc:	b007      	add	sp, #28
 800d6fe:	ecbd 8b0a 	vpop	{d8-d12}
 800d702:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d706:	f000 be53 	b.w	800e3b0 <__math_uflow>
 800d70a:	2600      	movs	r6, #0
 800d70c:	4936      	ldr	r1, [pc, #216]	@ (800d7e8 <pow+0x3e8>)
 800d70e:	ed91 4b02 	vldr	d4, [r1, #8]
 800d712:	ed91 3b00 	vldr	d3, [r1]
 800d716:	eeb0 7b44 	vmov.f64	d7, d4
 800d71a:	eea6 7b03 	vfma.f64	d7, d6, d3
 800d71e:	ee17 5a10 	vmov	r5, s14
 800d722:	ee37 7b44 	vsub.f64	d7, d7, d4
 800d726:	ed91 4b04 	vldr	d4, [r1, #16]
 800d72a:	f005 037f 	and.w	r3, r5, #127	@ 0x7f
 800d72e:	eea7 6b04 	vfma.f64	d6, d7, d4
 800d732:	ed91 4b06 	vldr	d4, [r1, #24]
 800d736:	18dc      	adds	r4, r3, r3
 800d738:	f104 030f 	add.w	r3, r4, #15
 800d73c:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
 800d740:	eea7 6b04 	vfma.f64	d6, d7, d4
 800d744:	ed91 3b0a 	vldr	d3, [r1, #40]	@ 0x28
 800d748:	ee35 5b06 	vadd.f64	d5, d5, d6
 800d74c:	ee25 6b05 	vmul.f64	d6, d5, d5
 800d750:	ed94 7b1c 	vldr	d7, [r4, #112]	@ 0x70
 800d754:	ed91 4b08 	vldr	d4, [r1, #32]
 800d758:	ee35 7b07 	vadd.f64	d7, d5, d7
 800d75c:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
 800d760:	eea5 4b03 	vfma.f64	d4, d5, d3
 800d764:	ed91 3b0e 	vldr	d3, [r1, #56]	@ 0x38
 800d768:	eea6 7b04 	vfma.f64	d7, d6, d4
 800d76c:	ee26 6b06 	vmul.f64	d6, d6, d6
 800d770:	ed91 4b0c 	vldr	d4, [r1, #48]	@ 0x30
 800d774:	f851 c033 	ldr.w	ip, [r1, r3, lsl #3]
 800d778:	f8d2 e004 	ldr.w	lr, [r2, #4]
 800d77c:	eea5 4b03 	vfma.f64	d4, d5, d3
 800d780:	1940      	adds	r0, r0, r5
 800d782:	2700      	movs	r7, #0
 800d784:	eb17 020c 	adds.w	r2, r7, ip
 800d788:	eb0e 3340 	add.w	r3, lr, r0, lsl #13
 800d78c:	eea6 7b04 	vfma.f64	d7, d6, d4
 800d790:	2e00      	cmp	r6, #0
 800d792:	d175      	bne.n	800d880 <pow+0x480>
 800d794:	42bd      	cmp	r5, r7
 800d796:	db29      	blt.n	800d7ec <pow+0x3ec>
 800d798:	f103 4140 	add.w	r1, r3, #3221225472	@ 0xc0000000
 800d79c:	f501 0170 	add.w	r1, r1, #15728640	@ 0xf00000
 800d7a0:	4610      	mov	r0, r2
 800d7a2:	ec41 0b10 	vmov	d0, r0, r1
 800d7a6:	eea7 0b00 	vfma.f64	d0, d7, d0
 800d7aa:	ed9f 7b07 	vldr	d7, [pc, #28]	@ 800d7c8 <pow+0x3c8>
 800d7ae:	ee20 0b07 	vmul.f64	d0, d0, d7
 800d7b2:	b007      	add	sp, #28
 800d7b4:	ecbd 8b0a 	vpop	{d8-d12}
 800d7b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7bc:	f000 be38 	b.w	800e430 <__math_check_oflow>
 800d7c0:	00000000 	.word	0x00000000
 800d7c4:	43300000 	.word	0x43300000
 800d7c8:	00000000 	.word	0x00000000
 800d7cc:	7f000000 	.word	0x7f000000
 800d7d0:	3ff00000 	.word	0x3ff00000
 800d7d4:	fff00000 	.word	0xfff00000
 800d7d8:	ffe00000 	.word	0xffe00000
 800d7dc:	7fe00000 	.word	0x7fe00000
 800d7e0:	c0196aab 	.word	0xc0196aab
 800d7e4:	08011cb0 	.word	0x08011cb0
 800d7e8:	08012fc0 	.word	0x08012fc0
 800d7ec:	f103 517f 	add.w	r1, r3, #1069547520	@ 0x3fc00000
 800d7f0:	f501 1100 	add.w	r1, r1, #2097152	@ 0x200000
 800d7f4:	4610      	mov	r0, r2
 800d7f6:	ec41 0b15 	vmov	d5, r0, r1
 800d7fa:	eeb7 3b00 	vmov.f64	d3, #112	@ 0x3f800000  1.0
 800d7fe:	ee27 6b05 	vmul.f64	d6, d7, d5
 800d802:	ee35 7b06 	vadd.f64	d7, d5, d6
 800d806:	eeb0 4bc7 	vabs.f64	d4, d7
 800d80a:	eeb4 4bc3 	vcmpe.f64	d4, d3
 800d80e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d812:	ed9f 0b1f 	vldr	d0, [pc, #124]	@ 800d890 <pow+0x490>
 800d816:	d52a      	bpl.n	800d86e <pow+0x46e>
 800d818:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800d81c:	ee35 5b47 	vsub.f64	d5, d5, d7
 800d820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d824:	ee35 5b06 	vadd.f64	d5, d5, d6
 800d828:	eebf 4b00 	vmov.f64	d4, #240	@ 0xbf800000 -1.0
 800d82c:	bf58      	it	pl
 800d82e:	eeb0 4b43 	vmovpl.f64	d4, d3
 800d832:	ee37 3b04 	vadd.f64	d3, d7, d4
 800d836:	ee34 6b43 	vsub.f64	d6, d4, d3
 800d83a:	ee36 6b07 	vadd.f64	d6, d6, d7
 800d83e:	ee36 6b05 	vadd.f64	d6, d6, d5
 800d842:	ee36 6b03 	vadd.f64	d6, d6, d3
 800d846:	ee36 7b44 	vsub.f64	d7, d6, d4
 800d84a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800d84e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d852:	d104      	bne.n	800d85e <pow+0x45e>
 800d854:	4632      	mov	r2, r6
 800d856:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800d85a:	ec43 2b17 	vmov	d7, r2, r3
 800d85e:	ed8d 0b02 	vstr	d0, [sp, #8]
 800d862:	ed9d 6b02 	vldr	d6, [sp, #8]
 800d866:	ee26 6b00 	vmul.f64	d6, d6, d0
 800d86a:	ed8d 6b04 	vstr	d6, [sp, #16]
 800d86e:	ee27 0b00 	vmul.f64	d0, d7, d0
 800d872:	b007      	add	sp, #28
 800d874:	ecbd 8b0a 	vpop	{d8-d12}
 800d878:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d87c:	f000 bdcf 	b.w	800e41e <__math_check_uflow>
 800d880:	ec43 2b10 	vmov	d0, r2, r3
 800d884:	eea7 0b00 	vfma.f64	d0, d7, d0
 800d888:	e625      	b.n	800d4d6 <pow+0xd6>
 800d88a:	ed9f 0b03 	vldr	d0, [pc, #12]	@ 800d898 <pow+0x498>
 800d88e:	e622      	b.n	800d4d6 <pow+0xd6>
 800d890:	00000000 	.word	0x00000000
 800d894:	00100000 	.word	0x00100000
	...

0800d8a0 <checkint>:
 800d8a0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800d8a4:	2b7e      	cmp	r3, #126	@ 0x7e
 800d8a6:	d910      	bls.n	800d8ca <checkint+0x2a>
 800d8a8:	2b96      	cmp	r3, #150	@ 0x96
 800d8aa:	d80c      	bhi.n	800d8c6 <checkint+0x26>
 800d8ac:	2201      	movs	r2, #1
 800d8ae:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800d8b2:	fa02 f303 	lsl.w	r3, r2, r3
 800d8b6:	1e5a      	subs	r2, r3, #1
 800d8b8:	4202      	tst	r2, r0
 800d8ba:	d106      	bne.n	800d8ca <checkint+0x2a>
 800d8bc:	4203      	tst	r3, r0
 800d8be:	bf14      	ite	ne
 800d8c0:	2001      	movne	r0, #1
 800d8c2:	2002      	moveq	r0, #2
 800d8c4:	4770      	bx	lr
 800d8c6:	2002      	movs	r0, #2
 800d8c8:	4770      	bx	lr
 800d8ca:	2000      	movs	r0, #0
 800d8cc:	4770      	bx	lr
	...

0800d8d0 <powf>:
 800d8d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8d2:	ee10 1a10 	vmov	r1, s0
 800d8d6:	ee10 4a90 	vmov	r4, s1
 800d8da:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 800d8de:	0063      	lsls	r3, r4, #1
 800d8e0:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800d8e4:	eef0 7a40 	vmov.f32	s15, s0
 800d8e8:	eeb0 7a60 	vmov.f32	s14, s1
 800d8ec:	f103 30ff 	add.w	r0, r3, #4294967295
 800d8f0:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 800d8f4:	d252      	bcs.n	800d99c <powf+0xcc>
 800d8f6:	4290      	cmp	r0, r2
 800d8f8:	d258      	bcs.n	800d9ac <powf+0xdc>
 800d8fa:	2000      	movs	r0, #0
 800d8fc:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 800d900:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 800d904:	4a9e      	ldr	r2, [pc, #632]	@ (800db80 <powf+0x2b0>)
 800d906:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 800d90a:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 800d90e:	f36f 0316 	bfc	r3, #0, #23
 800d912:	1ac9      	subs	r1, r1, r3
 800d914:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 800d918:	ee07 1a90 	vmov	s15, r1
 800d91c:	ed94 5b02 	vldr	d5, [r4, #8]
 800d920:	ed94 4b00 	vldr	d4, [r4]
 800d924:	15db      	asrs	r3, r3, #23
 800d926:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 800d92a:	ee07 3a90 	vmov	s15, r3
 800d92e:	eea4 2b06 	vfma.f64	d2, d4, d6
 800d932:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 800d936:	ee22 4b02 	vmul.f64	d4, d2, d2
 800d93a:	ee24 0b04 	vmul.f64	d0, d4, d4
 800d93e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 800d942:	ee36 6b05 	vadd.f64	d6, d6, d5
 800d946:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 800d94a:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 800d94e:	eea2 1b05 	vfma.f64	d1, d2, d5
 800d952:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 800d956:	eea2 5b03 	vfma.f64	d5, d2, d3
 800d95a:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 800d95e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 800d962:	eea2 6b03 	vfma.f64	d6, d2, d3
 800d966:	eea4 6b05 	vfma.f64	d6, d4, d5
 800d96a:	eea1 6b00 	vfma.f64	d6, d1, d0
 800d96e:	ee27 7b06 	vmul.f64	d7, d7, d6
 800d972:	ee17 3a90 	vmov	r3, s15
 800d976:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 800d97a:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 800d97e:	429a      	cmp	r2, r3
 800d980:	f0c0 8098 	bcc.w	800dab4 <powf+0x1e4>
 800d984:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800db60 <powf+0x290>
 800d988:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800d98c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d990:	dd79      	ble.n	800da86 <powf+0x1b6>
 800d992:	b003      	add	sp, #12
 800d994:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d998:	f000 bab0 	b.w	800defc <__math_oflowf>
 800d99c:	4290      	cmp	r0, r2
 800d99e:	d330      	bcc.n	800da02 <powf+0x132>
 800d9a0:	b12b      	cbz	r3, 800d9ae <powf+0xde>
 800d9a2:	0049      	lsls	r1, r1, #1
 800d9a4:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 800d9a8:	d808      	bhi.n	800d9bc <powf+0xec>
 800d9aa:	e015      	b.n	800d9d8 <powf+0x108>
 800d9ac:	b953      	cbnz	r3, 800d9c4 <powf+0xf4>
 800d9ae:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 800d9b2:	0049      	lsls	r1, r1, #1
 800d9b4:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 800d9b8:	f240 80ca 	bls.w	800db50 <powf+0x280>
 800d9bc:	ee37 0a87 	vadd.f32	s0, s15, s14
 800d9c0:	b003      	add	sp, #12
 800d9c2:	bd30      	pop	{r4, r5, pc}
 800d9c4:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 800d9c8:	d105      	bne.n	800d9d6 <powf+0x106>
 800d9ca:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800d9ce:	0064      	lsls	r4, r4, #1
 800d9d0:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800d9d4:	e7f0      	b.n	800d9b8 <powf+0xe8>
 800d9d6:	0049      	lsls	r1, r1, #1
 800d9d8:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 800d9dc:	d1ee      	bne.n	800d9bc <powf+0xec>
 800d9de:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 800d9e2:	f000 80b5 	beq.w	800db50 <powf+0x280>
 800d9e6:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 800d9ea:	ea6f 0404 	mvn.w	r4, r4
 800d9ee:	bf34      	ite	cc
 800d9f0:	2100      	movcc	r1, #0
 800d9f2:	2101      	movcs	r1, #1
 800d9f4:	0fe4      	lsrs	r4, r4, #31
 800d9f6:	42a1      	cmp	r1, r4
 800d9f8:	f040 80ad 	bne.w	800db56 <powf+0x286>
 800d9fc:	ee27 0a07 	vmul.f32	s0, s14, s14
 800da00:	e7de      	b.n	800d9c0 <powf+0xf0>
 800da02:	004d      	lsls	r5, r1, #1
 800da04:	1e6b      	subs	r3, r5, #1
 800da06:	4293      	cmp	r3, r2
 800da08:	d31b      	bcc.n	800da42 <powf+0x172>
 800da0a:	2900      	cmp	r1, #0
 800da0c:	ee20 0a00 	vmul.f32	s0, s0, s0
 800da10:	da0e      	bge.n	800da30 <powf+0x160>
 800da12:	4620      	mov	r0, r4
 800da14:	f7ff ff44 	bl	800d8a0 <checkint>
 800da18:	2801      	cmp	r0, #1
 800da1a:	d109      	bne.n	800da30 <powf+0x160>
 800da1c:	eeb1 0a40 	vneg.f32	s0, s0
 800da20:	b945      	cbnz	r5, 800da34 <powf+0x164>
 800da22:	2c00      	cmp	r4, #0
 800da24:	dacc      	bge.n	800d9c0 <powf+0xf0>
 800da26:	b003      	add	sp, #12
 800da28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da2c:	f000 ba6c 	b.w	800df08 <__math_divzerof>
 800da30:	2000      	movs	r0, #0
 800da32:	e7f5      	b.n	800da20 <powf+0x150>
 800da34:	2c00      	cmp	r4, #0
 800da36:	dac3      	bge.n	800d9c0 <powf+0xf0>
 800da38:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800da3c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800da40:	e7be      	b.n	800d9c0 <powf+0xf0>
 800da42:	2900      	cmp	r1, #0
 800da44:	da1d      	bge.n	800da82 <powf+0x1b2>
 800da46:	4620      	mov	r0, r4
 800da48:	f7ff ff2a 	bl	800d8a0 <checkint>
 800da4c:	b920      	cbnz	r0, 800da58 <powf+0x188>
 800da4e:	b003      	add	sp, #12
 800da50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800da54:	f000 ba6a 	b.w	800df2c <__math_invalidf>
 800da58:	1e43      	subs	r3, r0, #1
 800da5a:	4258      	negs	r0, r3
 800da5c:	4158      	adcs	r0, r3
 800da5e:	0400      	lsls	r0, r0, #16
 800da60:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800da64:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 800da68:	f4bf af48 	bcs.w	800d8fc <powf+0x2c>
 800da6c:	eddf 6a45 	vldr	s13, [pc, #276]	@ 800db84 <powf+0x2b4>
 800da70:	ee27 0aa6 	vmul.f32	s0, s15, s13
 800da74:	ee10 3a10 	vmov	r3, s0
 800da78:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800da7c:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 800da80:	e73c      	b.n	800d8fc <powf+0x2c>
 800da82:	2000      	movs	r0, #0
 800da84:	e7ee      	b.n	800da64 <powf+0x194>
 800da86:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 800db68 <powf+0x298>
 800da8a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800da8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800da92:	dd45      	ble.n	800db20 <powf+0x250>
 800da94:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 800da98:	b3d0      	cbz	r0, 800db10 <powf+0x240>
 800da9a:	9301      	str	r3, [sp, #4]
 800da9c:	eddd 6a01 	vldr	s13, [sp, #4]
 800daa0:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 800daa4:	ee76 6a66 	vsub.f32	s13, s12, s13
 800daa8:	eef4 6a46 	vcmp.f32	s13, s12
 800daac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dab0:	f47f af6f 	bne.w	800d992 <powf+0xc2>
 800dab4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800dab8:	4b33      	ldr	r3, [pc, #204]	@ (800db88 <powf+0x2b8>)
 800daba:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 800dabe:	ee37 6b05 	vadd.f64	d6, d7, d5
 800dac2:	ee16 2a10 	vmov	r2, s12
 800dac6:	ee36 6b45 	vsub.f64	d6, d6, d5
 800daca:	f002 011f 	and.w	r1, r2, #31
 800dace:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dad2:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 800dad6:	ee27 4b07 	vmul.f64	d4, d7, d7
 800dada:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 800dade:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 800dae2:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 800dae6:	eea7 6b05 	vfma.f64	d6, d7, d5
 800daea:	686d      	ldr	r5, [r5, #4]
 800daec:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 800daf0:	1880      	adds	r0, r0, r2
 800daf2:	2100      	movs	r1, #0
 800daf4:	190a      	adds	r2, r1, r4
 800daf6:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 800dafa:	eea7 0b05 	vfma.f64	d0, d7, d5
 800dafe:	ec43 2b17 	vmov	d7, r2, r3
 800db02:	eea6 0b04 	vfma.f64	d0, d6, d4
 800db06:	ee20 0b07 	vmul.f64	d0, d0, d7
 800db0a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800db0e:	e757      	b.n	800d9c0 <powf+0xf0>
 800db10:	9300      	str	r3, [sp, #0]
 800db12:	eddd 6a00 	vldr	s13, [sp]
 800db16:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800db1a:	ee76 6a86 	vadd.f32	s13, s13, s12
 800db1e:	e7c3      	b.n	800daa8 <powf+0x1d8>
 800db20:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 800db70 <powf+0x2a0>
 800db24:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800db28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db2c:	d804      	bhi.n	800db38 <powf+0x268>
 800db2e:	b003      	add	sp, #12
 800db30:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db34:	f000 b9d6 	b.w	800dee4 <__math_uflowf>
 800db38:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 800db78 <powf+0x2a8>
 800db3c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800db40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db44:	d5b6      	bpl.n	800dab4 <powf+0x1e4>
 800db46:	b003      	add	sp, #12
 800db48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800db4c:	f000 b9d0 	b.w	800def0 <__math_may_uflowf>
 800db50:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800db54:	e734      	b.n	800d9c0 <powf+0xf0>
 800db56:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 800db8c <powf+0x2bc>
 800db5a:	e731      	b.n	800d9c0 <powf+0xf0>
 800db5c:	f3af 8000 	nop.w
 800db60:	ffd1d571 	.word	0xffd1d571
 800db64:	405fffff 	.word	0x405fffff
 800db68:	ffa3aae2 	.word	0xffa3aae2
 800db6c:	405fffff 	.word	0x405fffff
 800db70:	00000000 	.word	0x00000000
 800db74:	c062c000 	.word	0xc062c000
 800db78:	00000000 	.word	0x00000000
 800db7c:	c062a000 	.word	0xc062a000
 800db80:	08013978 	.word	0x08013978
 800db84:	4b000000 	.word	0x4b000000
 800db88:	08013830 	.word	0x08013830
 800db8c:	00000000 	.word	0x00000000

0800db90 <sinf_poly>:
 800db90:	07cb      	lsls	r3, r1, #31
 800db92:	d412      	bmi.n	800dbba <sinf_poly+0x2a>
 800db94:	ee21 5b00 	vmul.f64	d5, d1, d0
 800db98:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 800db9c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 800dba0:	eea6 7b01 	vfma.f64	d7, d6, d1
 800dba4:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 800dba8:	ee21 1b05 	vmul.f64	d1, d1, d5
 800dbac:	eea6 0b05 	vfma.f64	d0, d6, d5
 800dbb0:	eea7 0b01 	vfma.f64	d0, d7, d1
 800dbb4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800dbb8:	4770      	bx	lr
 800dbba:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 800dbbe:	ee21 5b01 	vmul.f64	d5, d1, d1
 800dbc2:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 800dbc6:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 800dbca:	eea1 7b06 	vfma.f64	d7, d1, d6
 800dbce:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 800dbd2:	eea1 0b06 	vfma.f64	d0, d1, d6
 800dbd6:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 800dbda:	ee21 1b05 	vmul.f64	d1, d1, d5
 800dbde:	eea5 0b06 	vfma.f64	d0, d5, d6
 800dbe2:	e7e5      	b.n	800dbb0 <sinf_poly+0x20>
 800dbe4:	0000      	movs	r0, r0
	...

0800dbe8 <sinf>:
 800dbe8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbea:	ee10 4a10 	vmov	r4, s0
 800dbee:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800dbf2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800dbf6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 800dbfa:	eef0 7a40 	vmov.f32	s15, s0
 800dbfe:	d218      	bcs.n	800dc32 <sinf+0x4a>
 800dc00:	ee26 1b06 	vmul.f64	d1, d6, d6
 800dc04:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800dc08:	d20a      	bcs.n	800dc20 <sinf+0x38>
 800dc0a:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800dc0e:	d103      	bne.n	800dc18 <sinf+0x30>
 800dc10:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 800dc14:	ed8d 1a01 	vstr	s2, [sp, #4]
 800dc18:	eeb0 0a67 	vmov.f32	s0, s15
 800dc1c:	b003      	add	sp, #12
 800dc1e:	bd30      	pop	{r4, r5, pc}
 800dc20:	483b      	ldr	r0, [pc, #236]	@ (800dd10 <sinf+0x128>)
 800dc22:	eeb0 0b46 	vmov.f64	d0, d6
 800dc26:	2100      	movs	r1, #0
 800dc28:	b003      	add	sp, #12
 800dc2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc2e:	f7ff bfaf 	b.w	800db90 <sinf_poly>
 800dc32:	f240 422e 	movw	r2, #1070	@ 0x42e
 800dc36:	4293      	cmp	r3, r2
 800dc38:	d824      	bhi.n	800dc84 <sinf+0x9c>
 800dc3a:	4b35      	ldr	r3, [pc, #212]	@ (800dd10 <sinf+0x128>)
 800dc3c:	ed93 7b08 	vldr	d7, [r3, #32]
 800dc40:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dc44:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800dc48:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800dc4c:	ee17 1a90 	vmov	r1, s15
 800dc50:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 800dc54:	1609      	asrs	r1, r1, #24
 800dc56:	ee07 1a90 	vmov	s15, r1
 800dc5a:	f001 0203 	and.w	r2, r1, #3
 800dc5e:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800dc62:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800dc66:	ed92 0b00 	vldr	d0, [r2]
 800dc6a:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 800dc6e:	f011 0f02 	tst.w	r1, #2
 800dc72:	eea5 6b47 	vfms.f64	d6, d5, d7
 800dc76:	bf08      	it	eq
 800dc78:	4618      	moveq	r0, r3
 800dc7a:	ee26 1b06 	vmul.f64	d1, d6, d6
 800dc7e:	ee20 0b06 	vmul.f64	d0, d0, d6
 800dc82:	e7d1      	b.n	800dc28 <sinf+0x40>
 800dc84:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800dc88:	d237      	bcs.n	800dcfa <sinf+0x112>
 800dc8a:	4922      	ldr	r1, [pc, #136]	@ (800dd14 <sinf+0x12c>)
 800dc8c:	f3c4 6083 	ubfx	r0, r4, #26, #4
 800dc90:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800dc94:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800dc98:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800dc9c:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800dca0:	6a10      	ldr	r0, [r2, #32]
 800dca2:	6912      	ldr	r2, [r2, #16]
 800dca4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800dca8:	40ab      	lsls	r3, r5
 800dcaa:	fba0 5003 	umull	r5, r0, r0, r3
 800dcae:	4359      	muls	r1, r3
 800dcb0:	fbe3 0102 	umlal	r0, r1, r3, r2
 800dcb4:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 800dcb8:	0f9d      	lsrs	r5, r3, #30
 800dcba:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800dcbe:	1ac9      	subs	r1, r1, r3
 800dcc0:	f7f2 fd04 	bl	80006cc <__aeabi_l2d>
 800dcc4:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800dcc8:	4b11      	ldr	r3, [pc, #68]	@ (800dd10 <sinf+0x128>)
 800dcca:	f004 0203 	and.w	r2, r4, #3
 800dcce:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800dcd2:	ed9f 6b0d 	vldr	d6, [pc, #52]	@ 800dd08 <sinf+0x120>
 800dcd6:	ed92 0b00 	vldr	d0, [r2]
 800dcda:	ec41 0b17 	vmov	d7, r0, r1
 800dcde:	f014 0f02 	tst.w	r4, #2
 800dce2:	ee27 7b06 	vmul.f64	d7, d7, d6
 800dce6:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800dcea:	4629      	mov	r1, r5
 800dcec:	bf08      	it	eq
 800dcee:	4618      	moveq	r0, r3
 800dcf0:	ee27 1b07 	vmul.f64	d1, d7, d7
 800dcf4:	ee20 0b07 	vmul.f64	d0, d0, d7
 800dcf8:	e796      	b.n	800dc28 <sinf+0x40>
 800dcfa:	b003      	add	sp, #12
 800dcfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dd00:	f000 b914 	b.w	800df2c <__math_invalidf>
 800dd04:	f3af 8000 	nop.w
 800dd08:	54442d18 	.word	0x54442d18
 800dd0c:	3c1921fb 	.word	0x3c1921fb
 800dd10:	08012d58 	.word	0x08012d58
 800dd14:	08012cf8 	.word	0x08012cf8

0800dd18 <sinf_poly>:
 800dd18:	07cb      	lsls	r3, r1, #31
 800dd1a:	d412      	bmi.n	800dd42 <sinf_poly+0x2a>
 800dd1c:	ee21 5b00 	vmul.f64	d5, d1, d0
 800dd20:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 800dd24:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 800dd28:	eea6 7b01 	vfma.f64	d7, d6, d1
 800dd2c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 800dd30:	ee21 1b05 	vmul.f64	d1, d1, d5
 800dd34:	eea6 0b05 	vfma.f64	d0, d6, d5
 800dd38:	eea7 0b01 	vfma.f64	d0, d7, d1
 800dd3c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800dd40:	4770      	bx	lr
 800dd42:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 800dd46:	ee21 5b01 	vmul.f64	d5, d1, d1
 800dd4a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 800dd4e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 800dd52:	eea1 7b06 	vfma.f64	d7, d1, d6
 800dd56:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 800dd5a:	eea1 0b06 	vfma.f64	d0, d1, d6
 800dd5e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 800dd62:	ee21 1b05 	vmul.f64	d1, d1, d5
 800dd66:	eea5 0b06 	vfma.f64	d0, d5, d6
 800dd6a:	e7e5      	b.n	800dd38 <sinf_poly+0x20>
 800dd6c:	0000      	movs	r0, r0
	...

0800dd70 <cosf>:
 800dd70:	b538      	push	{r3, r4, r5, lr}
 800dd72:	ee10 4a10 	vmov	r4, s0
 800dd76:	f3c4 530a 	ubfx	r3, r4, #20, #11
 800dd7a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 800dd7e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 800dd82:	d21f      	bcs.n	800ddc4 <cosf+0x54>
 800dd84:	ee27 7b07 	vmul.f64	d7, d7, d7
 800dd88:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 800dd8c:	f0c0 8082 	bcc.w	800de94 <cosf+0x124>
 800dd90:	ee27 4b07 	vmul.f64	d4, d7, d7
 800dd94:	4b44      	ldr	r3, [pc, #272]	@ (800dea8 <cosf+0x138>)
 800dd96:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 800dd9a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 800dd9e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 800dda2:	eea7 6b05 	vfma.f64	d6, d7, d5
 800dda6:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 800ddaa:	eea7 0b05 	vfma.f64	d0, d7, d5
 800ddae:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 800ddb2:	ee27 7b04 	vmul.f64	d7, d7, d4
 800ddb6:	eea4 0b05 	vfma.f64	d0, d4, d5
 800ddba:	eea6 0b07 	vfma.f64	d0, d6, d7
 800ddbe:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 800ddc2:	bd38      	pop	{r3, r4, r5, pc}
 800ddc4:	f240 422e 	movw	r2, #1070	@ 0x42e
 800ddc8:	4293      	cmp	r3, r2
 800ddca:	d829      	bhi.n	800de20 <cosf+0xb0>
 800ddcc:	4b36      	ldr	r3, [pc, #216]	@ (800dea8 <cosf+0x138>)
 800ddce:	ed93 6b08 	vldr	d6, [r3, #32]
 800ddd2:	ee27 6b06 	vmul.f64	d6, d7, d6
 800ddd6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 800ddda:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800ddde:	ee16 1a90 	vmov	r1, s13
 800dde2:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 800dde6:	1609      	asrs	r1, r1, #24
 800dde8:	ee06 1a90 	vmov	s13, r1
 800ddec:	f001 0203 	and.w	r2, r1, #3
 800ddf0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800ddf4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 800ddf8:	ed92 0b00 	vldr	d0, [r2]
 800ddfc:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 800de00:	f011 0f02 	tst.w	r1, #2
 800de04:	f081 0101 	eor.w	r1, r1, #1
 800de08:	eea5 7b46 	vfms.f64	d7, d5, d6
 800de0c:	bf08      	it	eq
 800de0e:	4618      	moveq	r0, r3
 800de10:	ee27 1b07 	vmul.f64	d1, d7, d7
 800de14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de18:	ee20 0b07 	vmul.f64	d0, d0, d7
 800de1c:	f7ff bf7c 	b.w	800dd18 <sinf_poly>
 800de20:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 800de24:	d232      	bcs.n	800de8c <cosf+0x11c>
 800de26:	4921      	ldr	r1, [pc, #132]	@ (800deac <cosf+0x13c>)
 800de28:	f3c4 6083 	ubfx	r0, r4, #26, #4
 800de2c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800de30:	f3c4 0316 	ubfx	r3, r4, #0, #23
 800de34:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 800de38:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800de3c:	6a10      	ldr	r0, [r2, #32]
 800de3e:	6912      	ldr	r2, [r2, #16]
 800de40:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800de44:	40ab      	lsls	r3, r5
 800de46:	fba0 5003 	umull	r5, r0, r0, r3
 800de4a:	4359      	muls	r1, r3
 800de4c:	fbe3 0102 	umlal	r0, r1, r3, r2
 800de50:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 800de54:	0f9d      	lsrs	r5, r3, #30
 800de56:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 800de5a:	1ac9      	subs	r1, r1, r3
 800de5c:	f7f2 fc36 	bl	80006cc <__aeabi_l2d>
 800de60:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 800de64:	4b10      	ldr	r3, [pc, #64]	@ (800dea8 <cosf+0x138>)
 800de66:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 800dea0 <cosf+0x130>
 800de6a:	ec41 0b17 	vmov	d7, r0, r1
 800de6e:	f004 0203 	and.w	r2, r4, #3
 800de72:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 800de76:	ed92 0b00 	vldr	d0, [r2]
 800de7a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800de7e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 800de82:	f014 0f02 	tst.w	r4, #2
 800de86:	f085 0101 	eor.w	r1, r5, #1
 800de8a:	e7bf      	b.n	800de0c <cosf+0x9c>
 800de8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de90:	f000 b84c 	b.w	800df2c <__math_invalidf>
 800de94:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800de98:	e793      	b.n	800ddc2 <cosf+0x52>
 800de9a:	bf00      	nop
 800de9c:	f3af 8000 	nop.w
 800dea0:	54442d18 	.word	0x54442d18
 800dea4:	3c1921fb 	.word	0x3c1921fb
 800dea8:	08012d58 	.word	0x08012d58
 800deac:	08012cf8 	.word	0x08012cf8

0800deb0 <with_errnof>:
 800deb0:	b510      	push	{r4, lr}
 800deb2:	ed2d 8b02 	vpush	{d8}
 800deb6:	eeb0 8a40 	vmov.f32	s16, s0
 800deba:	4604      	mov	r4, r0
 800debc:	f001 fdce 	bl	800fa5c <__errno>
 800dec0:	eeb0 0a48 	vmov.f32	s0, s16
 800dec4:	ecbd 8b02 	vpop	{d8}
 800dec8:	6004      	str	r4, [r0, #0]
 800deca:	bd10      	pop	{r4, pc}

0800decc <xflowf>:
 800decc:	b130      	cbz	r0, 800dedc <xflowf+0x10>
 800dece:	eef1 7a40 	vneg.f32	s15, s0
 800ded2:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ded6:	2022      	movs	r0, #34	@ 0x22
 800ded8:	f7ff bfea 	b.w	800deb0 <with_errnof>
 800dedc:	eef0 7a40 	vmov.f32	s15, s0
 800dee0:	e7f7      	b.n	800ded2 <xflowf+0x6>
	...

0800dee4 <__math_uflowf>:
 800dee4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800deec <__math_uflowf+0x8>
 800dee8:	f7ff bff0 	b.w	800decc <xflowf>
 800deec:	10000000 	.word	0x10000000

0800def0 <__math_may_uflowf>:
 800def0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800def8 <__math_may_uflowf+0x8>
 800def4:	f7ff bfea 	b.w	800decc <xflowf>
 800def8:	1a200000 	.word	0x1a200000

0800defc <__math_oflowf>:
 800defc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800df04 <__math_oflowf+0x8>
 800df00:	f7ff bfe4 	b.w	800decc <xflowf>
 800df04:	70000000 	.word	0x70000000

0800df08 <__math_divzerof>:
 800df08:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 800df28 <__math_divzerof+0x20>
 800df0c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800df10:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800df14:	2800      	cmp	r0, #0
 800df16:	f04f 0022 	mov.w	r0, #34	@ 0x22
 800df1a:	fe47 7a87 	vseleq.f32	s15, s15, s14
 800df1e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 800df22:	f7ff bfc5 	b.w	800deb0 <with_errnof>
 800df26:	bf00      	nop
 800df28:	00000000 	.word	0x00000000

0800df2c <__math_invalidf>:
 800df2c:	eef0 7a40 	vmov.f32	s15, s0
 800df30:	ee30 7a40 	vsub.f32	s14, s0, s0
 800df34:	eef4 7a67 	vcmp.f32	s15, s15
 800df38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df3c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 800df40:	d602      	bvs.n	800df48 <__math_invalidf+0x1c>
 800df42:	2021      	movs	r0, #33	@ 0x21
 800df44:	f7ff bfb4 	b.w	800deb0 <with_errnof>
 800df48:	4770      	bx	lr

0800df4a <__ieee754_sqrt>:
 800df4a:	eeb1 0bc0 	vsqrt.f64	d0, d0
 800df4e:	4770      	bx	lr

0800df50 <__ieee754_sqrtf>:
 800df50:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800df54:	4770      	bx	lr
	...

0800df58 <__kernel_cos>:
 800df58:	eeb0 5b40 	vmov.f64	d5, d0
 800df5c:	ee15 1a90 	vmov	r1, s11
 800df60:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800df64:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800df68:	f1b1 5f79 	cmp.w	r1, #1044381696	@ 0x3e400000
 800df6c:	d204      	bcs.n	800df78 <__kernel_cos+0x20>
 800df6e:	eefd 7bc5 	vcvt.s32.f64	s15, d5
 800df72:	ee17 3a90 	vmov	r3, s15
 800df76:	b343      	cbz	r3, 800dfca <__kernel_cos+0x72>
 800df78:	ee25 6b05 	vmul.f64	d6, d5, d5
 800df7c:	ee21 1b45 	vnmul.f64	d1, d1, d5
 800df80:	ed9f 7b1b 	vldr	d7, [pc, #108]	@ 800dff0 <__kernel_cos+0x98>
 800df84:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800dff8 <__kernel_cos+0xa0>
 800df88:	eea6 4b07 	vfma.f64	d4, d6, d7
 800df8c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800e000 <__kernel_cos+0xa8>
 800df90:	eea4 7b06 	vfma.f64	d7, d4, d6
 800df94:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800e008 <__kernel_cos+0xb0>
 800df98:	eea7 4b06 	vfma.f64	d4, d7, d6
 800df9c:	ed9f 7b1c 	vldr	d7, [pc, #112]	@ 800e010 <__kernel_cos+0xb8>
 800dfa0:	4b1f      	ldr	r3, [pc, #124]	@ (800e020 <__kernel_cos+0xc8>)
 800dfa2:	eea4 7b06 	vfma.f64	d7, d4, d6
 800dfa6:	ed9f 4b1c 	vldr	d4, [pc, #112]	@ 800e018 <__kernel_cos+0xc0>
 800dfaa:	4299      	cmp	r1, r3
 800dfac:	eea7 4b06 	vfma.f64	d4, d7, d6
 800dfb0:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800dfb4:	ee24 4b06 	vmul.f64	d4, d4, d6
 800dfb8:	ee26 7b07 	vmul.f64	d7, d6, d7
 800dfbc:	eea6 1b04 	vfma.f64	d1, d6, d4
 800dfc0:	d804      	bhi.n	800dfcc <__kernel_cos+0x74>
 800dfc2:	ee37 7b41 	vsub.f64	d7, d7, d1
 800dfc6:	ee30 0b47 	vsub.f64	d0, d0, d7
 800dfca:	4770      	bx	lr
 800dfcc:	4b15      	ldr	r3, [pc, #84]	@ (800e024 <__kernel_cos+0xcc>)
 800dfce:	4299      	cmp	r1, r3
 800dfd0:	d809      	bhi.n	800dfe6 <__kernel_cos+0x8e>
 800dfd2:	2200      	movs	r2, #0
 800dfd4:	f5a1 1300 	sub.w	r3, r1, #2097152	@ 0x200000
 800dfd8:	ec43 2b16 	vmov	d6, r2, r3
 800dfdc:	ee30 0b46 	vsub.f64	d0, d0, d6
 800dfe0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800dfe4:	e7ed      	b.n	800dfc2 <__kernel_cos+0x6a>
 800dfe6:	eeb5 6b02 	vmov.f64	d6, #82	@ 0x3e900000  0.2812500
 800dfea:	e7f7      	b.n	800dfdc <__kernel_cos+0x84>
 800dfec:	f3af 8000 	nop.w
 800dff0:	be8838d4 	.word	0xbe8838d4
 800dff4:	bda8fae9 	.word	0xbda8fae9
 800dff8:	bdb4b1c4 	.word	0xbdb4b1c4
 800dffc:	3e21ee9e 	.word	0x3e21ee9e
 800e000:	809c52ad 	.word	0x809c52ad
 800e004:	be927e4f 	.word	0xbe927e4f
 800e008:	19cb1590 	.word	0x19cb1590
 800e00c:	3efa01a0 	.word	0x3efa01a0
 800e010:	16c15177 	.word	0x16c15177
 800e014:	bf56c16c 	.word	0xbf56c16c
 800e018:	5555554c 	.word	0x5555554c
 800e01c:	3fa55555 	.word	0x3fa55555
 800e020:	3fd33332 	.word	0x3fd33332
 800e024:	3fe90000 	.word	0x3fe90000

0800e028 <__kernel_sin>:
 800e028:	ee10 3a90 	vmov	r3, s1
 800e02c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e030:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800e034:	d204      	bcs.n	800e040 <__kernel_sin+0x18>
 800e036:	eefd 7bc0 	vcvt.s32.f64	s15, d0
 800e03a:	ee17 3a90 	vmov	r3, s15
 800e03e:	b35b      	cbz	r3, 800e098 <__kernel_sin+0x70>
 800e040:	ee20 6b00 	vmul.f64	d6, d0, d0
 800e044:	ee20 5b06 	vmul.f64	d5, d0, d6
 800e048:	ed9f 7b15 	vldr	d7, [pc, #84]	@ 800e0a0 <__kernel_sin+0x78>
 800e04c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800e0a8 <__kernel_sin+0x80>
 800e050:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e054:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800e0b0 <__kernel_sin+0x88>
 800e058:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e05c:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800e0b8 <__kernel_sin+0x90>
 800e060:	eea7 4b06 	vfma.f64	d4, d7, d6
 800e064:	ed9f 7b16 	vldr	d7, [pc, #88]	@ 800e0c0 <__kernel_sin+0x98>
 800e068:	eea4 7b06 	vfma.f64	d7, d4, d6
 800e06c:	b930      	cbnz	r0, 800e07c <__kernel_sin+0x54>
 800e06e:	ed9f 4b16 	vldr	d4, [pc, #88]	@ 800e0c8 <__kernel_sin+0xa0>
 800e072:	eea6 4b07 	vfma.f64	d4, d6, d7
 800e076:	eea4 0b05 	vfma.f64	d0, d4, d5
 800e07a:	4770      	bx	lr
 800e07c:	ee27 7b45 	vnmul.f64	d7, d7, d5
 800e080:	eeb6 4b00 	vmov.f64	d4, #96	@ 0x3f000000  0.5
 800e084:	eea1 7b04 	vfma.f64	d7, d1, d4
 800e088:	ee97 1b06 	vfnms.f64	d1, d7, d6
 800e08c:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800e0d0 <__kernel_sin+0xa8>
 800e090:	eea5 1b07 	vfma.f64	d1, d5, d7
 800e094:	ee30 0b41 	vsub.f64	d0, d0, d1
 800e098:	4770      	bx	lr
 800e09a:	bf00      	nop
 800e09c:	f3af 8000 	nop.w
 800e0a0:	5acfd57c 	.word	0x5acfd57c
 800e0a4:	3de5d93a 	.word	0x3de5d93a
 800e0a8:	8a2b9ceb 	.word	0x8a2b9ceb
 800e0ac:	be5ae5e6 	.word	0xbe5ae5e6
 800e0b0:	57b1fe7d 	.word	0x57b1fe7d
 800e0b4:	3ec71de3 	.word	0x3ec71de3
 800e0b8:	19c161d5 	.word	0x19c161d5
 800e0bc:	bf2a01a0 	.word	0xbf2a01a0
 800e0c0:	1110f8a6 	.word	0x1110f8a6
 800e0c4:	3f811111 	.word	0x3f811111
 800e0c8:	55555549 	.word	0x55555549
 800e0cc:	bfc55555 	.word	0xbfc55555
 800e0d0:	55555549 	.word	0x55555549
 800e0d4:	3fc55555 	.word	0x3fc55555

0800e0d8 <__ieee754_rem_pio2>:
 800e0d8:	b570      	push	{r4, r5, r6, lr}
 800e0da:	eeb0 7b40 	vmov.f64	d7, d0
 800e0de:	ee17 5a90 	vmov	r5, s15
 800e0e2:	4b99      	ldr	r3, [pc, #612]	@ (800e348 <__ieee754_rem_pio2+0x270>)
 800e0e4:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e0e8:	429e      	cmp	r6, r3
 800e0ea:	b088      	sub	sp, #32
 800e0ec:	4604      	mov	r4, r0
 800e0ee:	d807      	bhi.n	800e100 <__ieee754_rem_pio2+0x28>
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	ed84 0b00 	vstr	d0, [r4]
 800e0f8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e0fc:	2000      	movs	r0, #0
 800e0fe:	e01b      	b.n	800e138 <__ieee754_rem_pio2+0x60>
 800e100:	4b92      	ldr	r3, [pc, #584]	@ (800e34c <__ieee754_rem_pio2+0x274>)
 800e102:	429e      	cmp	r6, r3
 800e104:	d83b      	bhi.n	800e17e <__ieee754_rem_pio2+0xa6>
 800e106:	f5a3 231b 	sub.w	r3, r3, #634880	@ 0x9b000
 800e10a:	2d00      	cmp	r5, #0
 800e10c:	ed9f 6b7e 	vldr	d6, [pc, #504]	@ 800e308 <__ieee754_rem_pio2+0x230>
 800e110:	f5a3 63f0 	sub.w	r3, r3, #1920	@ 0x780
 800e114:	dd19      	ble.n	800e14a <__ieee754_rem_pio2+0x72>
 800e116:	ee30 7b46 	vsub.f64	d7, d0, d6
 800e11a:	429e      	cmp	r6, r3
 800e11c:	d00e      	beq.n	800e13c <__ieee754_rem_pio2+0x64>
 800e11e:	ed9f 5b7c 	vldr	d5, [pc, #496]	@ 800e310 <__ieee754_rem_pio2+0x238>
 800e122:	ee37 6b45 	vsub.f64	d6, d7, d5
 800e126:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e12a:	ed84 6b00 	vstr	d6, [r4]
 800e12e:	ee37 7b45 	vsub.f64	d7, d7, d5
 800e132:	ed84 7b02 	vstr	d7, [r4, #8]
 800e136:	2001      	movs	r0, #1
 800e138:	b008      	add	sp, #32
 800e13a:	bd70      	pop	{r4, r5, r6, pc}
 800e13c:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 800e318 <__ieee754_rem_pio2+0x240>
 800e140:	ed9f 5b77 	vldr	d5, [pc, #476]	@ 800e320 <__ieee754_rem_pio2+0x248>
 800e144:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e148:	e7eb      	b.n	800e122 <__ieee754_rem_pio2+0x4a>
 800e14a:	429e      	cmp	r6, r3
 800e14c:	ee30 7b06 	vadd.f64	d7, d0, d6
 800e150:	d00e      	beq.n	800e170 <__ieee754_rem_pio2+0x98>
 800e152:	ed9f 5b6f 	vldr	d5, [pc, #444]	@ 800e310 <__ieee754_rem_pio2+0x238>
 800e156:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e15a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e15e:	ed84 6b00 	vstr	d6, [r4]
 800e162:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e166:	f04f 30ff 	mov.w	r0, #4294967295
 800e16a:	ed84 7b02 	vstr	d7, [r4, #8]
 800e16e:	e7e3      	b.n	800e138 <__ieee754_rem_pio2+0x60>
 800e170:	ed9f 6b69 	vldr	d6, [pc, #420]	@ 800e318 <__ieee754_rem_pio2+0x240>
 800e174:	ed9f 5b6a 	vldr	d5, [pc, #424]	@ 800e320 <__ieee754_rem_pio2+0x248>
 800e178:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e17c:	e7eb      	b.n	800e156 <__ieee754_rem_pio2+0x7e>
 800e17e:	4b74      	ldr	r3, [pc, #464]	@ (800e350 <__ieee754_rem_pio2+0x278>)
 800e180:	429e      	cmp	r6, r3
 800e182:	d870      	bhi.n	800e266 <__ieee754_rem_pio2+0x18e>
 800e184:	f000 f8ec 	bl	800e360 <fabs>
 800e188:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800e18c:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800e328 <__ieee754_rem_pio2+0x250>
 800e190:	eea0 7b06 	vfma.f64	d7, d0, d6
 800e194:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800e198:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 800e19c:	ee17 0a90 	vmov	r0, s15
 800e1a0:	eeb1 4b45 	vneg.f64	d4, d5
 800e1a4:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800e308 <__ieee754_rem_pio2+0x230>
 800e1a8:	eea5 0b47 	vfms.f64	d0, d5, d7
 800e1ac:	ed9f 7b58 	vldr	d7, [pc, #352]	@ 800e310 <__ieee754_rem_pio2+0x238>
 800e1b0:	281f      	cmp	r0, #31
 800e1b2:	ee25 7b07 	vmul.f64	d7, d5, d7
 800e1b6:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e1ba:	dc05      	bgt.n	800e1c8 <__ieee754_rem_pio2+0xf0>
 800e1bc:	4b65      	ldr	r3, [pc, #404]	@ (800e354 <__ieee754_rem_pio2+0x27c>)
 800e1be:	1e42      	subs	r2, r0, #1
 800e1c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e1c4:	42b3      	cmp	r3, r6
 800e1c6:	d109      	bne.n	800e1dc <__ieee754_rem_pio2+0x104>
 800e1c8:	ee16 3a90 	vmov	r3, s13
 800e1cc:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e1d0:	ebc3 5316 	rsb	r3, r3, r6, lsr #20
 800e1d4:	2b10      	cmp	r3, #16
 800e1d6:	ea4f 5226 	mov.w	r2, r6, asr #20
 800e1da:	dc02      	bgt.n	800e1e2 <__ieee754_rem_pio2+0x10a>
 800e1dc:	ed84 6b00 	vstr	d6, [r4]
 800e1e0:	e01a      	b.n	800e218 <__ieee754_rem_pio2+0x140>
 800e1e2:	ed9f 3b4d 	vldr	d3, [pc, #308]	@ 800e318 <__ieee754_rem_pio2+0x240>
 800e1e6:	eeb0 6b40 	vmov.f64	d6, d0
 800e1ea:	eea4 6b03 	vfma.f64	d6, d4, d3
 800e1ee:	ee30 7b46 	vsub.f64	d7, d0, d6
 800e1f2:	eea4 7b03 	vfma.f64	d7, d4, d3
 800e1f6:	ed9f 3b4a 	vldr	d3, [pc, #296]	@ 800e320 <__ieee754_rem_pio2+0x248>
 800e1fa:	ee95 7b03 	vfnms.f64	d7, d5, d3
 800e1fe:	ee36 3b47 	vsub.f64	d3, d6, d7
 800e202:	ee13 3a90 	vmov	r3, s7
 800e206:	f3c3 530a 	ubfx	r3, r3, #20, #11
 800e20a:	1ad3      	subs	r3, r2, r3
 800e20c:	2b31      	cmp	r3, #49	@ 0x31
 800e20e:	dc17      	bgt.n	800e240 <__ieee754_rem_pio2+0x168>
 800e210:	eeb0 0b46 	vmov.f64	d0, d6
 800e214:	ed84 3b00 	vstr	d3, [r4]
 800e218:	ed94 6b00 	vldr	d6, [r4]
 800e21c:	2d00      	cmp	r5, #0
 800e21e:	ee30 0b46 	vsub.f64	d0, d0, d6
 800e222:	ee30 0b47 	vsub.f64	d0, d0, d7
 800e226:	ed84 0b02 	vstr	d0, [r4, #8]
 800e22a:	da85      	bge.n	800e138 <__ieee754_rem_pio2+0x60>
 800e22c:	eeb1 6b46 	vneg.f64	d6, d6
 800e230:	eeb1 0b40 	vneg.f64	d0, d0
 800e234:	ed84 6b00 	vstr	d6, [r4]
 800e238:	ed84 0b02 	vstr	d0, [r4, #8]
 800e23c:	4240      	negs	r0, r0
 800e23e:	e77b      	b.n	800e138 <__ieee754_rem_pio2+0x60>
 800e240:	ed9f 7b3b 	vldr	d7, [pc, #236]	@ 800e330 <__ieee754_rem_pio2+0x258>
 800e244:	eeb0 0b46 	vmov.f64	d0, d6
 800e248:	eea4 0b07 	vfma.f64	d0, d4, d7
 800e24c:	ee36 6b40 	vsub.f64	d6, d6, d0
 800e250:	eea4 6b07 	vfma.f64	d6, d4, d7
 800e254:	ed9f 4b38 	vldr	d4, [pc, #224]	@ 800e338 <__ieee754_rem_pio2+0x260>
 800e258:	eeb0 7b46 	vmov.f64	d7, d6
 800e25c:	ee95 7b04 	vfnms.f64	d7, d5, d4
 800e260:	ee30 6b47 	vsub.f64	d6, d0, d7
 800e264:	e7ba      	b.n	800e1dc <__ieee754_rem_pio2+0x104>
 800e266:	4b3c      	ldr	r3, [pc, #240]	@ (800e358 <__ieee754_rem_pio2+0x280>)
 800e268:	429e      	cmp	r6, r3
 800e26a:	d906      	bls.n	800e27a <__ieee754_rem_pio2+0x1a2>
 800e26c:	ee30 7b40 	vsub.f64	d7, d0, d0
 800e270:	ed80 7b02 	vstr	d7, [r0, #8]
 800e274:	ed80 7b00 	vstr	d7, [r0]
 800e278:	e740      	b.n	800e0fc <__ieee754_rem_pio2+0x24>
 800e27a:	ee10 3a10 	vmov	r3, s0
 800e27e:	1532      	asrs	r2, r6, #20
 800e280:	f2a2 4216 	subw	r2, r2, #1046	@ 0x416
 800e284:	4618      	mov	r0, r3
 800e286:	eba6 5102 	sub.w	r1, r6, r2, lsl #20
 800e28a:	ec41 0b17 	vmov	d7, r0, r1
 800e28e:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e292:	ed9f 5b2b 	vldr	d5, [pc, #172]	@ 800e340 <__ieee754_rem_pio2+0x268>
 800e296:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e29a:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e29e:	ed8d 6b02 	vstr	d6, [sp, #8]
 800e2a2:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e2a6:	eebd 6bc7 	vcvt.s32.f64	s12, d7
 800e2aa:	a808      	add	r0, sp, #32
 800e2ac:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
 800e2b0:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e2b4:	ed8d 6b04 	vstr	d6, [sp, #16]
 800e2b8:	ee27 7b05 	vmul.f64	d7, d7, d5
 800e2bc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e2c0:	2103      	movs	r1, #3
 800e2c2:	ed30 7b02 	vldmdb	r0!, {d7}
 800e2c6:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800e2ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e2ce:	460b      	mov	r3, r1
 800e2d0:	f101 31ff 	add.w	r1, r1, #4294967295
 800e2d4:	d0f5      	beq.n	800e2c2 <__ieee754_rem_pio2+0x1ea>
 800e2d6:	4921      	ldr	r1, [pc, #132]	@ (800e35c <__ieee754_rem_pio2+0x284>)
 800e2d8:	9101      	str	r1, [sp, #4]
 800e2da:	2102      	movs	r1, #2
 800e2dc:	9100      	str	r1, [sp, #0]
 800e2de:	a802      	add	r0, sp, #8
 800e2e0:	4621      	mov	r1, r4
 800e2e2:	f000 f8b9 	bl	800e458 <__kernel_rem_pio2>
 800e2e6:	2d00      	cmp	r5, #0
 800e2e8:	f6bf af26 	bge.w	800e138 <__ieee754_rem_pio2+0x60>
 800e2ec:	ed94 7b00 	vldr	d7, [r4]
 800e2f0:	eeb1 7b47 	vneg.f64	d7, d7
 800e2f4:	ed84 7b00 	vstr	d7, [r4]
 800e2f8:	ed94 7b02 	vldr	d7, [r4, #8]
 800e2fc:	eeb1 7b47 	vneg.f64	d7, d7
 800e300:	ed84 7b02 	vstr	d7, [r4, #8]
 800e304:	e79a      	b.n	800e23c <__ieee754_rem_pio2+0x164>
 800e306:	bf00      	nop
 800e308:	54400000 	.word	0x54400000
 800e30c:	3ff921fb 	.word	0x3ff921fb
 800e310:	1a626331 	.word	0x1a626331
 800e314:	3dd0b461 	.word	0x3dd0b461
 800e318:	1a600000 	.word	0x1a600000
 800e31c:	3dd0b461 	.word	0x3dd0b461
 800e320:	2e037073 	.word	0x2e037073
 800e324:	3ba3198a 	.word	0x3ba3198a
 800e328:	6dc9c883 	.word	0x6dc9c883
 800e32c:	3fe45f30 	.word	0x3fe45f30
 800e330:	2e000000 	.word	0x2e000000
 800e334:	3ba3198a 	.word	0x3ba3198a
 800e338:	252049c1 	.word	0x252049c1
 800e33c:	397b839a 	.word	0x397b839a
 800e340:	00000000 	.word	0x00000000
 800e344:	41700000 	.word	0x41700000
 800e348:	3fe921fb 	.word	0x3fe921fb
 800e34c:	4002d97b 	.word	0x4002d97b
 800e350:	413921fb 	.word	0x413921fb
 800e354:	08012e38 	.word	0x08012e38
 800e358:	7fefffff 	.word	0x7fefffff
 800e35c:	08012eb8 	.word	0x08012eb8

0800e360 <fabs>:
 800e360:	ec51 0b10 	vmov	r0, r1, d0
 800e364:	4602      	mov	r2, r0
 800e366:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e36a:	ec43 2b10 	vmov	d0, r2, r3
 800e36e:	4770      	bx	lr

0800e370 <with_errno>:
 800e370:	b510      	push	{r4, lr}
 800e372:	ed2d 8b02 	vpush	{d8}
 800e376:	eeb0 8b40 	vmov.f64	d8, d0
 800e37a:	4604      	mov	r4, r0
 800e37c:	f001 fb6e 	bl	800fa5c <__errno>
 800e380:	eeb0 0b48 	vmov.f64	d0, d8
 800e384:	ecbd 8b02 	vpop	{d8}
 800e388:	6004      	str	r4, [r0, #0]
 800e38a:	bd10      	pop	{r4, pc}

0800e38c <xflow>:
 800e38c:	b082      	sub	sp, #8
 800e38e:	b158      	cbz	r0, 800e3a8 <xflow+0x1c>
 800e390:	eeb1 7b40 	vneg.f64	d7, d0
 800e394:	ed8d 7b00 	vstr	d7, [sp]
 800e398:	ed9d 7b00 	vldr	d7, [sp]
 800e39c:	2022      	movs	r0, #34	@ 0x22
 800e39e:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e3a2:	b002      	add	sp, #8
 800e3a4:	f7ff bfe4 	b.w	800e370 <with_errno>
 800e3a8:	eeb0 7b40 	vmov.f64	d7, d0
 800e3ac:	e7f2      	b.n	800e394 <xflow+0x8>
	...

0800e3b0 <__math_uflow>:
 800e3b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e3b8 <__math_uflow+0x8>
 800e3b4:	f7ff bfea 	b.w	800e38c <xflow>
 800e3b8:	00000000 	.word	0x00000000
 800e3bc:	10000000 	.word	0x10000000

0800e3c0 <__math_oflow>:
 800e3c0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e3c8 <__math_oflow+0x8>
 800e3c4:	f7ff bfe2 	b.w	800e38c <xflow>
 800e3c8:	00000000 	.word	0x00000000
 800e3cc:	70000000 	.word	0x70000000

0800e3d0 <__math_divzero>:
 800e3d0:	b082      	sub	sp, #8
 800e3d2:	2800      	cmp	r0, #0
 800e3d4:	eebf 6b00 	vmov.f64	d6, #240	@ 0xbf800000 -1.0
 800e3d8:	eeb7 7b00 	vmov.f64	d7, #112	@ 0x3f800000  1.0
 800e3dc:	fe07 7b06 	vseleq.f64	d7, d7, d6
 800e3e0:	ed8d 7b00 	vstr	d7, [sp]
 800e3e4:	ed9d 0b00 	vldr	d0, [sp]
 800e3e8:	ed9f 7b03 	vldr	d7, [pc, #12]	@ 800e3f8 <__math_divzero+0x28>
 800e3ec:	2022      	movs	r0, #34	@ 0x22
 800e3ee:	ee80 0b07 	vdiv.f64	d0, d0, d7
 800e3f2:	b002      	add	sp, #8
 800e3f4:	f7ff bfbc 	b.w	800e370 <with_errno>
	...

0800e400 <__math_invalid>:
 800e400:	eeb0 7b40 	vmov.f64	d7, d0
 800e404:	eeb4 7b47 	vcmp.f64	d7, d7
 800e408:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e40c:	ee30 6b40 	vsub.f64	d6, d0, d0
 800e410:	ee86 0b06 	vdiv.f64	d0, d6, d6
 800e414:	d602      	bvs.n	800e41c <__math_invalid+0x1c>
 800e416:	2021      	movs	r0, #33	@ 0x21
 800e418:	f7ff bfaa 	b.w	800e370 <with_errno>
 800e41c:	4770      	bx	lr

0800e41e <__math_check_uflow>:
 800e41e:	eeb5 0b40 	vcmp.f64	d0, #0.0
 800e422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e426:	d102      	bne.n	800e42e <__math_check_uflow+0x10>
 800e428:	2022      	movs	r0, #34	@ 0x22
 800e42a:	f7ff bfa1 	b.w	800e370 <with_errno>
 800e42e:	4770      	bx	lr

0800e430 <__math_check_oflow>:
 800e430:	ed9f 6b07 	vldr	d6, [pc, #28]	@ 800e450 <__math_check_oflow+0x20>
 800e434:	eeb0 7bc0 	vabs.f64	d7, d0
 800e438:	eeb4 7b46 	vcmp.f64	d7, d6
 800e43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e440:	dd02      	ble.n	800e448 <__math_check_oflow+0x18>
 800e442:	2022      	movs	r0, #34	@ 0x22
 800e444:	f7ff bf94 	b.w	800e370 <with_errno>
 800e448:	4770      	bx	lr
 800e44a:	bf00      	nop
 800e44c:	f3af 8000 	nop.w
 800e450:	ffffffff 	.word	0xffffffff
 800e454:	7fefffff 	.word	0x7fefffff

0800e458 <__kernel_rem_pio2>:
 800e458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e45c:	ed2d 8b06 	vpush	{d8-d10}
 800e460:	f5ad 7d13 	sub.w	sp, sp, #588	@ 0x24c
 800e464:	469b      	mov	fp, r3
 800e466:	460f      	mov	r7, r1
 800e468:	4bb9      	ldr	r3, [pc, #740]	@ (800e750 <__kernel_rem_pio2+0x2f8>)
 800e46a:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800e46c:	9ea3      	ldr	r6, [sp, #652]	@ 0x28c
 800e46e:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800e472:	9001      	str	r0, [sp, #4]
 800e474:	f112 0f14 	cmn.w	r2, #20
 800e478:	bfa8      	it	ge
 800e47a:	1ed3      	subge	r3, r2, #3
 800e47c:	f10b 3aff 	add.w	sl, fp, #4294967295
 800e480:	bfb8      	it	lt
 800e482:	2300      	movlt	r3, #0
 800e484:	f06f 0517 	mvn.w	r5, #23
 800e488:	ed9f 6bab 	vldr	d6, [pc, #684]	@ 800e738 <__kernel_rem_pio2+0x2e0>
 800e48c:	bfa4      	itt	ge
 800e48e:	2018      	movge	r0, #24
 800e490:	fb93 f3f0 	sdivge	r3, r3, r0
 800e494:	fb03 5505 	mla	r5, r3, r5, r5
 800e498:	eba3 040a 	sub.w	r4, r3, sl
 800e49c:	4415      	add	r5, r2
 800e49e:	eb09 0c0a 	add.w	ip, r9, sl
 800e4a2:	a81a      	add	r0, sp, #104	@ 0x68
 800e4a4:	eb06 0e84 	add.w	lr, r6, r4, lsl #2
 800e4a8:	2200      	movs	r2, #0
 800e4aa:	4562      	cmp	r2, ip
 800e4ac:	dd0e      	ble.n	800e4cc <__kernel_rem_pio2+0x74>
 800e4ae:	aa1a      	add	r2, sp, #104	@ 0x68
 800e4b0:	eb02 02cb 	add.w	r2, r2, fp, lsl #3
 800e4b4:	f50d 78d4 	add.w	r8, sp, #424	@ 0x1a8
 800e4b8:	2400      	movs	r4, #0
 800e4ba:	454c      	cmp	r4, r9
 800e4bc:	dc23      	bgt.n	800e506 <__kernel_rem_pio2+0xae>
 800e4be:	ed9f 7b9e 	vldr	d7, [pc, #632]	@ 800e738 <__kernel_rem_pio2+0x2e0>
 800e4c2:	f8dd e004 	ldr.w	lr, [sp, #4]
 800e4c6:	4694      	mov	ip, r2
 800e4c8:	2000      	movs	r0, #0
 800e4ca:	e015      	b.n	800e4f8 <__kernel_rem_pio2+0xa0>
 800e4cc:	42d4      	cmn	r4, r2
 800e4ce:	d409      	bmi.n	800e4e4 <__kernel_rem_pio2+0x8c>
 800e4d0:	f85e 1022 	ldr.w	r1, [lr, r2, lsl #2]
 800e4d4:	ee07 1a90 	vmov	s15, r1
 800e4d8:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e4dc:	eca0 7b02 	vstmia	r0!, {d7}
 800e4e0:	3201      	adds	r2, #1
 800e4e2:	e7e2      	b.n	800e4aa <__kernel_rem_pio2+0x52>
 800e4e4:	eeb0 7b46 	vmov.f64	d7, d6
 800e4e8:	e7f8      	b.n	800e4dc <__kernel_rem_pio2+0x84>
 800e4ea:	ecbe 5b02 	vldmia	lr!, {d5}
 800e4ee:	ed3c 6b02 	vldmdb	ip!, {d6}
 800e4f2:	3001      	adds	r0, #1
 800e4f4:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e4f8:	4550      	cmp	r0, sl
 800e4fa:	ddf6      	ble.n	800e4ea <__kernel_rem_pio2+0x92>
 800e4fc:	eca8 7b02 	vstmia	r8!, {d7}
 800e500:	3401      	adds	r4, #1
 800e502:	3208      	adds	r2, #8
 800e504:	e7d9      	b.n	800e4ba <__kernel_rem_pio2+0x62>
 800e506:	aa06      	add	r2, sp, #24
 800e508:	ed9f 9b8d 	vldr	d9, [pc, #564]	@ 800e740 <__kernel_rem_pio2+0x2e8>
 800e50c:	ed9f ab8e 	vldr	d10, [pc, #568]	@ 800e748 <__kernel_rem_pio2+0x2f0>
 800e510:	eb02 0289 	add.w	r2, r2, r9, lsl #2
 800e514:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800e518:	9203      	str	r2, [sp, #12]
 800e51a:	9302      	str	r3, [sp, #8]
 800e51c:	464c      	mov	r4, r9
 800e51e:	00e3      	lsls	r3, r4, #3
 800e520:	9304      	str	r3, [sp, #16]
 800e522:	ab92      	add	r3, sp, #584	@ 0x248
 800e524:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e528:	ed13 0b28 	vldr	d0, [r3, #-160]	@ 0xffffff60
 800e52c:	aa6a      	add	r2, sp, #424	@ 0x1a8
 800e52e:	ab06      	add	r3, sp, #24
 800e530:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 800e534:	461e      	mov	r6, r3
 800e536:	4620      	mov	r0, r4
 800e538:	2800      	cmp	r0, #0
 800e53a:	dc4a      	bgt.n	800e5d2 <__kernel_rem_pio2+0x17a>
 800e53c:	4628      	mov	r0, r5
 800e53e:	9305      	str	r3, [sp, #20]
 800e540:	f000 f9fe 	bl	800e940 <scalbn>
 800e544:	eeb0 8b40 	vmov.f64	d8, d0
 800e548:	eeb4 0b00 	vmov.f64	d0, #64	@ 0x3e000000  0.125
 800e54c:	ee28 0b00 	vmul.f64	d0, d8, d0
 800e550:	f000 fa72 	bl	800ea38 <floor>
 800e554:	eeb2 7b00 	vmov.f64	d7, #32	@ 0x41000000  8.0
 800e558:	eea0 8b47 	vfms.f64	d8, d0, d7
 800e55c:	eefd 7bc8 	vcvt.s32.f64	s15, d8
 800e560:	2d00      	cmp	r5, #0
 800e562:	ee17 8a90 	vmov	r8, s15
 800e566:	9b05      	ldr	r3, [sp, #20]
 800e568:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e56c:	ee38 8b47 	vsub.f64	d8, d8, d7
 800e570:	dd41      	ble.n	800e5f6 <__kernel_rem_pio2+0x19e>
 800e572:	1e60      	subs	r0, r4, #1
 800e574:	aa06      	add	r2, sp, #24
 800e576:	f1c5 0c18 	rsb	ip, r5, #24
 800e57a:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 800e57e:	fa46 f20c 	asr.w	r2, r6, ip
 800e582:	4490      	add	r8, r2
 800e584:	fa02 f20c 	lsl.w	r2, r2, ip
 800e588:	1ab6      	subs	r6, r6, r2
 800e58a:	aa06      	add	r2, sp, #24
 800e58c:	f842 6020 	str.w	r6, [r2, r0, lsl #2]
 800e590:	f1c5 0217 	rsb	r2, r5, #23
 800e594:	4116      	asrs	r6, r2
 800e596:	2e00      	cmp	r6, #0
 800e598:	dd3c      	ble.n	800e614 <__kernel_rem_pio2+0x1bc>
 800e59a:	f04f 0c00 	mov.w	ip, #0
 800e59e:	f108 0801 	add.w	r8, r8, #1
 800e5a2:	4660      	mov	r0, ip
 800e5a4:	f06f 4e7f 	mvn.w	lr, #4278190080	@ 0xff000000
 800e5a8:	4564      	cmp	r4, ip
 800e5aa:	dc66      	bgt.n	800e67a <__kernel_rem_pio2+0x222>
 800e5ac:	2d00      	cmp	r5, #0
 800e5ae:	dd03      	ble.n	800e5b8 <__kernel_rem_pio2+0x160>
 800e5b0:	2d01      	cmp	r5, #1
 800e5b2:	d072      	beq.n	800e69a <__kernel_rem_pio2+0x242>
 800e5b4:	2d02      	cmp	r5, #2
 800e5b6:	d07a      	beq.n	800e6ae <__kernel_rem_pio2+0x256>
 800e5b8:	2e02      	cmp	r6, #2
 800e5ba:	d12b      	bne.n	800e614 <__kernel_rem_pio2+0x1bc>
 800e5bc:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800e5c0:	ee30 8b48 	vsub.f64	d8, d0, d8
 800e5c4:	b330      	cbz	r0, 800e614 <__kernel_rem_pio2+0x1bc>
 800e5c6:	4628      	mov	r0, r5
 800e5c8:	f000 f9ba 	bl	800e940 <scalbn>
 800e5cc:	ee38 8b40 	vsub.f64	d8, d8, d0
 800e5d0:	e020      	b.n	800e614 <__kernel_rem_pio2+0x1bc>
 800e5d2:	ee20 7b09 	vmul.f64	d7, d0, d9
 800e5d6:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e5da:	3801      	subs	r0, #1
 800e5dc:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
 800e5e0:	eea7 0b4a 	vfms.f64	d0, d7, d10
 800e5e4:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e5e8:	eca6 0a01 	vstmia	r6!, {s0}
 800e5ec:	ed32 0b02 	vldmdb	r2!, {d0}
 800e5f0:	ee37 0b00 	vadd.f64	d0, d7, d0
 800e5f4:	e7a0      	b.n	800e538 <__kernel_rem_pio2+0xe0>
 800e5f6:	d105      	bne.n	800e604 <__kernel_rem_pio2+0x1ac>
 800e5f8:	1e62      	subs	r2, r4, #1
 800e5fa:	a906      	add	r1, sp, #24
 800e5fc:	f851 6022 	ldr.w	r6, [r1, r2, lsl #2]
 800e600:	15f6      	asrs	r6, r6, #23
 800e602:	e7c8      	b.n	800e596 <__kernel_rem_pio2+0x13e>
 800e604:	eeb6 7b00 	vmov.f64	d7, #96	@ 0x3f000000  0.5
 800e608:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800e60c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e610:	da31      	bge.n	800e676 <__kernel_rem_pio2+0x21e>
 800e612:	2600      	movs	r6, #0
 800e614:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800e618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e61c:	f040 809c 	bne.w	800e758 <__kernel_rem_pio2+0x300>
 800e620:	1e62      	subs	r2, r4, #1
 800e622:	2000      	movs	r0, #0
 800e624:	454a      	cmp	r2, r9
 800e626:	da49      	bge.n	800e6bc <__kernel_rem_pio2+0x264>
 800e628:	2800      	cmp	r0, #0
 800e62a:	d062      	beq.n	800e6f2 <__kernel_rem_pio2+0x29a>
 800e62c:	3c01      	subs	r4, #1
 800e62e:	ab06      	add	r3, sp, #24
 800e630:	3d18      	subs	r5, #24
 800e632:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e636:	2b00      	cmp	r3, #0
 800e638:	d0f8      	beq.n	800e62c <__kernel_rem_pio2+0x1d4>
 800e63a:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 800e63e:	4628      	mov	r0, r5
 800e640:	f000 f97e 	bl	800e940 <scalbn>
 800e644:	ed9f 6b3e 	vldr	d6, [pc, #248]	@ 800e740 <__kernel_rem_pio2+0x2e8>
 800e648:	1c62      	adds	r2, r4, #1
 800e64a:	a96a      	add	r1, sp, #424	@ 0x1a8
 800e64c:	00d3      	lsls	r3, r2, #3
 800e64e:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800e652:	4622      	mov	r2, r4
 800e654:	2a00      	cmp	r2, #0
 800e656:	f280 80a9 	bge.w	800e7ac <__kernel_rem_pio2+0x354>
 800e65a:	4622      	mov	r2, r4
 800e65c:	2a00      	cmp	r2, #0
 800e65e:	f2c0 80c7 	blt.w	800e7f0 <__kernel_rem_pio2+0x398>
 800e662:	a96a      	add	r1, sp, #424	@ 0x1a8
 800e664:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 800e668:	ed9f 7b33 	vldr	d7, [pc, #204]	@ 800e738 <__kernel_rem_pio2+0x2e0>
 800e66c:	f8df c0e4 	ldr.w	ip, [pc, #228]	@ 800e754 <__kernel_rem_pio2+0x2fc>
 800e670:	2000      	movs	r0, #0
 800e672:	1aa1      	subs	r1, r4, r2
 800e674:	e0b1      	b.n	800e7da <__kernel_rem_pio2+0x382>
 800e676:	2602      	movs	r6, #2
 800e678:	e78f      	b.n	800e59a <__kernel_rem_pio2+0x142>
 800e67a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e67e:	b948      	cbnz	r0, 800e694 <__kernel_rem_pio2+0x23c>
 800e680:	b122      	cbz	r2, 800e68c <__kernel_rem_pio2+0x234>
 800e682:	f1c2 7280 	rsb	r2, r2, #16777216	@ 0x1000000
 800e686:	f843 2c04 	str.w	r2, [r3, #-4]
 800e68a:	2201      	movs	r2, #1
 800e68c:	f10c 0c01 	add.w	ip, ip, #1
 800e690:	4610      	mov	r0, r2
 800e692:	e789      	b.n	800e5a8 <__kernel_rem_pio2+0x150>
 800e694:	ebae 0202 	sub.w	r2, lr, r2
 800e698:	e7f5      	b.n	800e686 <__kernel_rem_pio2+0x22e>
 800e69a:	1e62      	subs	r2, r4, #1
 800e69c:	ab06      	add	r3, sp, #24
 800e69e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6a2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e6a6:	a906      	add	r1, sp, #24
 800e6a8:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800e6ac:	e784      	b.n	800e5b8 <__kernel_rem_pio2+0x160>
 800e6ae:	1e62      	subs	r2, r4, #1
 800e6b0:	ab06      	add	r3, sp, #24
 800e6b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6b6:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800e6ba:	e7f4      	b.n	800e6a6 <__kernel_rem_pio2+0x24e>
 800e6bc:	ab06      	add	r3, sp, #24
 800e6be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e6c2:	3a01      	subs	r2, #1
 800e6c4:	4318      	orrs	r0, r3
 800e6c6:	e7ad      	b.n	800e624 <__kernel_rem_pio2+0x1cc>
 800e6c8:	3301      	adds	r3, #1
 800e6ca:	f852 0d04 	ldr.w	r0, [r2, #-4]!
 800e6ce:	2800      	cmp	r0, #0
 800e6d0:	d0fa      	beq.n	800e6c8 <__kernel_rem_pio2+0x270>
 800e6d2:	9a04      	ldr	r2, [sp, #16]
 800e6d4:	f502 7212 	add.w	r2, r2, #584	@ 0x248
 800e6d8:	446a      	add	r2, sp
 800e6da:	eb04 000b 	add.w	r0, r4, fp
 800e6de:	a91a      	add	r1, sp, #104	@ 0x68
 800e6e0:	1c66      	adds	r6, r4, #1
 800e6e2:	3a98      	subs	r2, #152	@ 0x98
 800e6e4:	eb01 00c0 	add.w	r0, r1, r0, lsl #3
 800e6e8:	4423      	add	r3, r4
 800e6ea:	42b3      	cmp	r3, r6
 800e6ec:	da04      	bge.n	800e6f8 <__kernel_rem_pio2+0x2a0>
 800e6ee:	461c      	mov	r4, r3
 800e6f0:	e715      	b.n	800e51e <__kernel_rem_pio2+0xc6>
 800e6f2:	9a03      	ldr	r2, [sp, #12]
 800e6f4:	2301      	movs	r3, #1
 800e6f6:	e7e8      	b.n	800e6ca <__kernel_rem_pio2+0x272>
 800e6f8:	9902      	ldr	r1, [sp, #8]
 800e6fa:	f8dd c004 	ldr.w	ip, [sp, #4]
 800e6fe:	f851 1026 	ldr.w	r1, [r1, r6, lsl #2]
 800e702:	9104      	str	r1, [sp, #16]
 800e704:	ee07 1a90 	vmov	s15, r1
 800e708:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e70c:	2400      	movs	r4, #0
 800e70e:	eca0 7b02 	vstmia	r0!, {d7}
 800e712:	ed9f 7b09 	vldr	d7, [pc, #36]	@ 800e738 <__kernel_rem_pio2+0x2e0>
 800e716:	4686      	mov	lr, r0
 800e718:	4554      	cmp	r4, sl
 800e71a:	dd03      	ble.n	800e724 <__kernel_rem_pio2+0x2cc>
 800e71c:	eca2 7b02 	vstmia	r2!, {d7}
 800e720:	3601      	adds	r6, #1
 800e722:	e7e2      	b.n	800e6ea <__kernel_rem_pio2+0x292>
 800e724:	ecbc 5b02 	vldmia	ip!, {d5}
 800e728:	ed3e 6b02 	vldmdb	lr!, {d6}
 800e72c:	3401      	adds	r4, #1
 800e72e:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e732:	e7f1      	b.n	800e718 <__kernel_rem_pio2+0x2c0>
 800e734:	f3af 8000 	nop.w
	...
 800e744:	3e700000 	.word	0x3e700000
 800e748:	00000000 	.word	0x00000000
 800e74c:	41700000 	.word	0x41700000
 800e750:	08013ae0 	.word	0x08013ae0
 800e754:	08013aa0 	.word	0x08013aa0
 800e758:	4268      	negs	r0, r5
 800e75a:	eeb0 0b48 	vmov.f64	d0, d8
 800e75e:	f000 f8ef 	bl	800e940 <scalbn>
 800e762:	ed9f 6b71 	vldr	d6, [pc, #452]	@ 800e928 <__kernel_rem_pio2+0x4d0>
 800e766:	eeb4 0bc6 	vcmpe.f64	d0, d6
 800e76a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e76e:	db17      	blt.n	800e7a0 <__kernel_rem_pio2+0x348>
 800e770:	ed9f 7b6f 	vldr	d7, [pc, #444]	@ 800e930 <__kernel_rem_pio2+0x4d8>
 800e774:	ee20 7b07 	vmul.f64	d7, d0, d7
 800e778:	eebd 7bc7 	vcvt.s32.f64	s14, d7
 800e77c:	aa06      	add	r2, sp, #24
 800e77e:	eeb8 5bc7 	vcvt.f64.s32	d5, s14
 800e782:	eea5 0b46 	vfms.f64	d0, d5, d6
 800e786:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e78a:	3518      	adds	r5, #24
 800e78c:	ee10 3a10 	vmov	r3, s0
 800e790:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e794:	ee17 3a10 	vmov	r3, s14
 800e798:	3401      	adds	r4, #1
 800e79a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e79e:	e74c      	b.n	800e63a <__kernel_rem_pio2+0x1e2>
 800e7a0:	eebd 0bc0 	vcvt.s32.f64	s0, d0
 800e7a4:	aa06      	add	r2, sp, #24
 800e7a6:	ee10 3a10 	vmov	r3, s0
 800e7aa:	e7f6      	b.n	800e79a <__kernel_rem_pio2+0x342>
 800e7ac:	a806      	add	r0, sp, #24
 800e7ae:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800e7b2:	9001      	str	r0, [sp, #4]
 800e7b4:	ee07 0a90 	vmov	s15, r0
 800e7b8:	3a01      	subs	r2, #1
 800e7ba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800e7be:	ee27 7b00 	vmul.f64	d7, d7, d0
 800e7c2:	ee20 0b06 	vmul.f64	d0, d0, d6
 800e7c6:	ed21 7b02 	vstmdb	r1!, {d7}
 800e7ca:	e743      	b.n	800e654 <__kernel_rem_pio2+0x1fc>
 800e7cc:	ecbc 5b02 	vldmia	ip!, {d5}
 800e7d0:	ecb5 6b02 	vldmia	r5!, {d6}
 800e7d4:	3001      	adds	r0, #1
 800e7d6:	eea5 7b06 	vfma.f64	d7, d5, d6
 800e7da:	4548      	cmp	r0, r9
 800e7dc:	dc01      	bgt.n	800e7e2 <__kernel_rem_pio2+0x38a>
 800e7de:	4288      	cmp	r0, r1
 800e7e0:	ddf4      	ble.n	800e7cc <__kernel_rem_pio2+0x374>
 800e7e2:	a842      	add	r0, sp, #264	@ 0x108
 800e7e4:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 800e7e8:	ed81 7b00 	vstr	d7, [r1]
 800e7ec:	3a01      	subs	r2, #1
 800e7ee:	e735      	b.n	800e65c <__kernel_rem_pio2+0x204>
 800e7f0:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800e7f2:	2a02      	cmp	r2, #2
 800e7f4:	dc0a      	bgt.n	800e80c <__kernel_rem_pio2+0x3b4>
 800e7f6:	2a00      	cmp	r2, #0
 800e7f8:	dc29      	bgt.n	800e84e <__kernel_rem_pio2+0x3f6>
 800e7fa:	d042      	beq.n	800e882 <__kernel_rem_pio2+0x42a>
 800e7fc:	f008 0007 	and.w	r0, r8, #7
 800e800:	f50d 7d13 	add.w	sp, sp, #588	@ 0x24c
 800e804:	ecbd 8b06 	vpop	{d8-d10}
 800e808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e80c:	9aa2      	ldr	r2, [sp, #648]	@ 0x288
 800e80e:	2a03      	cmp	r2, #3
 800e810:	d1f4      	bne.n	800e7fc <__kernel_rem_pio2+0x3a4>
 800e812:	a942      	add	r1, sp, #264	@ 0x108
 800e814:	f1a3 0208 	sub.w	r2, r3, #8
 800e818:	440a      	add	r2, r1
 800e81a:	4611      	mov	r1, r2
 800e81c:	4620      	mov	r0, r4
 800e81e:	2800      	cmp	r0, #0
 800e820:	dc50      	bgt.n	800e8c4 <__kernel_rem_pio2+0x46c>
 800e822:	4621      	mov	r1, r4
 800e824:	2901      	cmp	r1, #1
 800e826:	dc5d      	bgt.n	800e8e4 <__kernel_rem_pio2+0x48c>
 800e828:	ed9f 7b43 	vldr	d7, [pc, #268]	@ 800e938 <__kernel_rem_pio2+0x4e0>
 800e82c:	aa42      	add	r2, sp, #264	@ 0x108
 800e82e:	4413      	add	r3, r2
 800e830:	2c01      	cmp	r4, #1
 800e832:	dc67      	bgt.n	800e904 <__kernel_rem_pio2+0x4ac>
 800e834:	ed9d 5b42 	vldr	d5, [sp, #264]	@ 0x108
 800e838:	ed9d 6b44 	vldr	d6, [sp, #272]	@ 0x110
 800e83c:	2e00      	cmp	r6, #0
 800e83e:	d167      	bne.n	800e910 <__kernel_rem_pio2+0x4b8>
 800e840:	ed87 5b00 	vstr	d5, [r7]
 800e844:	ed87 6b02 	vstr	d6, [r7, #8]
 800e848:	ed87 7b04 	vstr	d7, [r7, #16]
 800e84c:	e7d6      	b.n	800e7fc <__kernel_rem_pio2+0x3a4>
 800e84e:	ed9f 6b3a 	vldr	d6, [pc, #232]	@ 800e938 <__kernel_rem_pio2+0x4e0>
 800e852:	aa42      	add	r2, sp, #264	@ 0x108
 800e854:	4413      	add	r3, r2
 800e856:	4622      	mov	r2, r4
 800e858:	2a00      	cmp	r2, #0
 800e85a:	da24      	bge.n	800e8a6 <__kernel_rem_pio2+0x44e>
 800e85c:	b34e      	cbz	r6, 800e8b2 <__kernel_rem_pio2+0x45a>
 800e85e:	eeb1 7b46 	vneg.f64	d7, d6
 800e862:	ed87 7b00 	vstr	d7, [r7]
 800e866:	ed9d 7b42 	vldr	d7, [sp, #264]	@ 0x108
 800e86a:	aa44      	add	r2, sp, #272	@ 0x110
 800e86c:	2301      	movs	r3, #1
 800e86e:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e872:	429c      	cmp	r4, r3
 800e874:	da20      	bge.n	800e8b8 <__kernel_rem_pio2+0x460>
 800e876:	b10e      	cbz	r6, 800e87c <__kernel_rem_pio2+0x424>
 800e878:	eeb1 7b47 	vneg.f64	d7, d7
 800e87c:	ed87 7b02 	vstr	d7, [r7, #8]
 800e880:	e7bc      	b.n	800e7fc <__kernel_rem_pio2+0x3a4>
 800e882:	ed9f 7b2d 	vldr	d7, [pc, #180]	@ 800e938 <__kernel_rem_pio2+0x4e0>
 800e886:	aa42      	add	r2, sp, #264	@ 0x108
 800e888:	4413      	add	r3, r2
 800e88a:	2c00      	cmp	r4, #0
 800e88c:	da05      	bge.n	800e89a <__kernel_rem_pio2+0x442>
 800e88e:	b10e      	cbz	r6, 800e894 <__kernel_rem_pio2+0x43c>
 800e890:	eeb1 7b47 	vneg.f64	d7, d7
 800e894:	ed87 7b00 	vstr	d7, [r7]
 800e898:	e7b0      	b.n	800e7fc <__kernel_rem_pio2+0x3a4>
 800e89a:	ed33 6b02 	vldmdb	r3!, {d6}
 800e89e:	3c01      	subs	r4, #1
 800e8a0:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e8a4:	e7f1      	b.n	800e88a <__kernel_rem_pio2+0x432>
 800e8a6:	ed33 7b02 	vldmdb	r3!, {d7}
 800e8aa:	3a01      	subs	r2, #1
 800e8ac:	ee36 6b07 	vadd.f64	d6, d6, d7
 800e8b0:	e7d2      	b.n	800e858 <__kernel_rem_pio2+0x400>
 800e8b2:	eeb0 7b46 	vmov.f64	d7, d6
 800e8b6:	e7d4      	b.n	800e862 <__kernel_rem_pio2+0x40a>
 800e8b8:	ecb2 6b02 	vldmia	r2!, {d6}
 800e8bc:	3301      	adds	r3, #1
 800e8be:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e8c2:	e7d6      	b.n	800e872 <__kernel_rem_pio2+0x41a>
 800e8c4:	ed31 7b02 	vldmdb	r1!, {d7}
 800e8c8:	ed91 5b02 	vldr	d5, [r1, #8]
 800e8cc:	3801      	subs	r0, #1
 800e8ce:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e8d2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e8d6:	ed81 6b00 	vstr	d6, [r1]
 800e8da:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e8de:	ed81 7b02 	vstr	d7, [r1, #8]
 800e8e2:	e79c      	b.n	800e81e <__kernel_rem_pio2+0x3c6>
 800e8e4:	ed32 7b02 	vldmdb	r2!, {d7}
 800e8e8:	ed92 5b02 	vldr	d5, [r2, #8]
 800e8ec:	3901      	subs	r1, #1
 800e8ee:	ee37 6b05 	vadd.f64	d6, d7, d5
 800e8f2:	ee37 7b46 	vsub.f64	d7, d7, d6
 800e8f6:	ed82 6b00 	vstr	d6, [r2]
 800e8fa:	ee37 7b05 	vadd.f64	d7, d7, d5
 800e8fe:	ed82 7b02 	vstr	d7, [r2, #8]
 800e902:	e78f      	b.n	800e824 <__kernel_rem_pio2+0x3cc>
 800e904:	ed33 6b02 	vldmdb	r3!, {d6}
 800e908:	3c01      	subs	r4, #1
 800e90a:	ee37 7b06 	vadd.f64	d7, d7, d6
 800e90e:	e78f      	b.n	800e830 <__kernel_rem_pio2+0x3d8>
 800e910:	eeb1 5b45 	vneg.f64	d5, d5
 800e914:	eeb1 6b46 	vneg.f64	d6, d6
 800e918:	ed87 5b00 	vstr	d5, [r7]
 800e91c:	eeb1 7b47 	vneg.f64	d7, d7
 800e920:	ed87 6b02 	vstr	d6, [r7, #8]
 800e924:	e790      	b.n	800e848 <__kernel_rem_pio2+0x3f0>
 800e926:	bf00      	nop
 800e928:	00000000 	.word	0x00000000
 800e92c:	41700000 	.word	0x41700000
 800e930:	00000000 	.word	0x00000000
 800e934:	3e700000 	.word	0x3e700000
	...

0800e940 <scalbn>:
 800e940:	ee10 1a90 	vmov	r1, s1
 800e944:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e948:	b98b      	cbnz	r3, 800e96e <scalbn+0x2e>
 800e94a:	ee10 3a10 	vmov	r3, s0
 800e94e:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800e952:	4319      	orrs	r1, r3
 800e954:	d00a      	beq.n	800e96c <scalbn+0x2c>
 800e956:	ed9f 7b2a 	vldr	d7, [pc, #168]	@ 800ea00 <scalbn+0xc0>
 800e95a:	4b35      	ldr	r3, [pc, #212]	@ (800ea30 <scalbn+0xf0>)
 800e95c:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e960:	4298      	cmp	r0, r3
 800e962:	da0b      	bge.n	800e97c <scalbn+0x3c>
 800e964:	ed9f 7b28 	vldr	d7, [pc, #160]	@ 800ea08 <scalbn+0xc8>
 800e968:	ee20 0b07 	vmul.f64	d0, d0, d7
 800e96c:	4770      	bx	lr
 800e96e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e972:	4293      	cmp	r3, r2
 800e974:	d107      	bne.n	800e986 <scalbn+0x46>
 800e976:	ee30 0b00 	vadd.f64	d0, d0, d0
 800e97a:	4770      	bx	lr
 800e97c:	ee10 1a90 	vmov	r1, s1
 800e980:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e984:	3b36      	subs	r3, #54	@ 0x36
 800e986:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e98a:	4290      	cmp	r0, r2
 800e98c:	dd0d      	ble.n	800e9aa <scalbn+0x6a>
 800e98e:	ed9f 7b20 	vldr	d7, [pc, #128]	@ 800ea10 <scalbn+0xd0>
 800e992:	ee10 3a90 	vmov	r3, s1
 800e996:	eeb0 6b47 	vmov.f64	d6, d7
 800e99a:	ed9f 5b1f 	vldr	d5, [pc, #124]	@ 800ea18 <scalbn+0xd8>
 800e99e:	2b00      	cmp	r3, #0
 800e9a0:	fe27 7b05 	vselge.f64	d7, d7, d5
 800e9a4:	ee27 0b06 	vmul.f64	d0, d7, d6
 800e9a8:	4770      	bx	lr
 800e9aa:	4418      	add	r0, r3
 800e9ac:	f240 73fe 	movw	r3, #2046	@ 0x7fe
 800e9b0:	4298      	cmp	r0, r3
 800e9b2:	dcec      	bgt.n	800e98e <scalbn+0x4e>
 800e9b4:	2800      	cmp	r0, #0
 800e9b6:	dd08      	ble.n	800e9ca <scalbn+0x8a>
 800e9b8:	ec53 2b10 	vmov	r2, r3, d0
 800e9bc:	f36f 511e 	bfc	r1, #20, #11
 800e9c0:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800e9c4:	ec43 2b10 	vmov	d0, r2, r3
 800e9c8:	4770      	bx	lr
 800e9ca:	f110 0f35 	cmn.w	r0, #53	@ 0x35
 800e9ce:	da09      	bge.n	800e9e4 <scalbn+0xa4>
 800e9d0:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800ea08 <scalbn+0xc8>
 800e9d4:	ee10 3a90 	vmov	r3, s1
 800e9d8:	eeb0 6b47 	vmov.f64	d6, d7
 800e9dc:	ed9f 5b10 	vldr	d5, [pc, #64]	@ 800ea20 <scalbn+0xe0>
 800e9e0:	2b00      	cmp	r3, #0
 800e9e2:	e7dd      	b.n	800e9a0 <scalbn+0x60>
 800e9e4:	ec53 2b10 	vmov	r2, r3, d0
 800e9e8:	3036      	adds	r0, #54	@ 0x36
 800e9ea:	f36f 511e 	bfc	r1, #20, #11
 800e9ee:	ea41 5300 	orr.w	r3, r1, r0, lsl #20
 800e9f2:	ed9f 7b0d 	vldr	d7, [pc, #52]	@ 800ea28 <scalbn+0xe8>
 800e9f6:	ec43 2b10 	vmov	d0, r2, r3
 800e9fa:	e7b5      	b.n	800e968 <scalbn+0x28>
 800e9fc:	f3af 8000 	nop.w
 800ea00:	00000000 	.word	0x00000000
 800ea04:	43500000 	.word	0x43500000
 800ea08:	c2f8f359 	.word	0xc2f8f359
 800ea0c:	01a56e1f 	.word	0x01a56e1f
 800ea10:	8800759c 	.word	0x8800759c
 800ea14:	7e37e43c 	.word	0x7e37e43c
 800ea18:	8800759c 	.word	0x8800759c
 800ea1c:	fe37e43c 	.word	0xfe37e43c
 800ea20:	c2f8f359 	.word	0xc2f8f359
 800ea24:	81a56e1f 	.word	0x81a56e1f
 800ea28:	00000000 	.word	0x00000000
 800ea2c:	3c900000 	.word	0x3c900000
 800ea30:	ffff3cb0 	.word	0xffff3cb0
 800ea34:	00000000 	.word	0x00000000

0800ea38 <floor>:
 800ea38:	ee10 3a90 	vmov	r3, s1
 800ea3c:	f3c3 500a 	ubfx	r0, r3, #20, #11
 800ea40:	ee10 2a10 	vmov	r2, s0
 800ea44:	f2a0 31ff 	subw	r1, r0, #1023	@ 0x3ff
 800ea48:	2913      	cmp	r1, #19
 800ea4a:	b530      	push	{r4, r5, lr}
 800ea4c:	4615      	mov	r5, r2
 800ea4e:	dc33      	bgt.n	800eab8 <floor+0x80>
 800ea50:	2900      	cmp	r1, #0
 800ea52:	da18      	bge.n	800ea86 <floor+0x4e>
 800ea54:	ed9f 7b30 	vldr	d7, [pc, #192]	@ 800eb18 <floor+0xe0>
 800ea58:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ea5c:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ea60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ea64:	dd0a      	ble.n	800ea7c <floor+0x44>
 800ea66:	2b00      	cmp	r3, #0
 800ea68:	da50      	bge.n	800eb0c <floor+0xd4>
 800ea6a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ea6e:	4313      	orrs	r3, r2
 800ea70:	2200      	movs	r2, #0
 800ea72:	4293      	cmp	r3, r2
 800ea74:	4b2a      	ldr	r3, [pc, #168]	@ (800eb20 <floor+0xe8>)
 800ea76:	bf08      	it	eq
 800ea78:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 800ea7c:	4619      	mov	r1, r3
 800ea7e:	4610      	mov	r0, r2
 800ea80:	ec41 0b10 	vmov	d0, r0, r1
 800ea84:	e01f      	b.n	800eac6 <floor+0x8e>
 800ea86:	4827      	ldr	r0, [pc, #156]	@ (800eb24 <floor+0xec>)
 800ea88:	4108      	asrs	r0, r1
 800ea8a:	ea03 0400 	and.w	r4, r3, r0
 800ea8e:	4314      	orrs	r4, r2
 800ea90:	d019      	beq.n	800eac6 <floor+0x8e>
 800ea92:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800eb18 <floor+0xe0>
 800ea96:	ee30 0b07 	vadd.f64	d0, d0, d7
 800ea9a:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ea9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eaa2:	ddeb      	ble.n	800ea7c <floor+0x44>
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	bfbe      	ittt	lt
 800eaa8:	f44f 1280 	movlt.w	r2, #1048576	@ 0x100000
 800eaac:	410a      	asrlt	r2, r1
 800eaae:	189b      	addlt	r3, r3, r2
 800eab0:	ea23 0300 	bic.w	r3, r3, r0
 800eab4:	2200      	movs	r2, #0
 800eab6:	e7e1      	b.n	800ea7c <floor+0x44>
 800eab8:	2933      	cmp	r1, #51	@ 0x33
 800eaba:	dd05      	ble.n	800eac8 <floor+0x90>
 800eabc:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800eac0:	d101      	bne.n	800eac6 <floor+0x8e>
 800eac2:	ee30 0b00 	vadd.f64	d0, d0, d0
 800eac6:	bd30      	pop	{r4, r5, pc}
 800eac8:	f2a0 4413 	subw	r4, r0, #1043	@ 0x413
 800eacc:	f04f 30ff 	mov.w	r0, #4294967295
 800ead0:	40e0      	lsrs	r0, r4
 800ead2:	4210      	tst	r0, r2
 800ead4:	d0f7      	beq.n	800eac6 <floor+0x8e>
 800ead6:	ed9f 7b10 	vldr	d7, [pc, #64]	@ 800eb18 <floor+0xe0>
 800eada:	ee30 0b07 	vadd.f64	d0, d0, d7
 800eade:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800eae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800eae6:	ddc9      	ble.n	800ea7c <floor+0x44>
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	da02      	bge.n	800eaf2 <floor+0xba>
 800eaec:	2914      	cmp	r1, #20
 800eaee:	d103      	bne.n	800eaf8 <floor+0xc0>
 800eaf0:	3301      	adds	r3, #1
 800eaf2:	ea22 0200 	bic.w	r2, r2, r0
 800eaf6:	e7c1      	b.n	800ea7c <floor+0x44>
 800eaf8:	2401      	movs	r4, #1
 800eafa:	f1c1 0134 	rsb	r1, r1, #52	@ 0x34
 800eafe:	fa04 f101 	lsl.w	r1, r4, r1
 800eb02:	440a      	add	r2, r1
 800eb04:	42aa      	cmp	r2, r5
 800eb06:	bf38      	it	cc
 800eb08:	191b      	addcc	r3, r3, r4
 800eb0a:	e7f2      	b.n	800eaf2 <floor+0xba>
 800eb0c:	2200      	movs	r2, #0
 800eb0e:	4613      	mov	r3, r2
 800eb10:	e7b4      	b.n	800ea7c <floor+0x44>
 800eb12:	bf00      	nop
 800eb14:	f3af 8000 	nop.w
 800eb18:	8800759c 	.word	0x8800759c
 800eb1c:	7e37e43c 	.word	0x7e37e43c
 800eb20:	bff00000 	.word	0xbff00000
 800eb24:	000fffff 	.word	0x000fffff

0800eb28 <malloc>:
 800eb28:	4b02      	ldr	r3, [pc, #8]	@ (800eb34 <malloc+0xc>)
 800eb2a:	4601      	mov	r1, r0
 800eb2c:	6818      	ldr	r0, [r3, #0]
 800eb2e:	f000 b82d 	b.w	800eb8c <_malloc_r>
 800eb32:	bf00      	nop
 800eb34:	2400003c 	.word	0x2400003c

0800eb38 <free>:
 800eb38:	4b02      	ldr	r3, [pc, #8]	@ (800eb44 <free+0xc>)
 800eb3a:	4601      	mov	r1, r0
 800eb3c:	6818      	ldr	r0, [r3, #0]
 800eb3e:	f001 bdb9 	b.w	80106b4 <_free_r>
 800eb42:	bf00      	nop
 800eb44:	2400003c 	.word	0x2400003c

0800eb48 <sbrk_aligned>:
 800eb48:	b570      	push	{r4, r5, r6, lr}
 800eb4a:	4e0f      	ldr	r6, [pc, #60]	@ (800eb88 <sbrk_aligned+0x40>)
 800eb4c:	460c      	mov	r4, r1
 800eb4e:	6831      	ldr	r1, [r6, #0]
 800eb50:	4605      	mov	r5, r0
 800eb52:	b911      	cbnz	r1, 800eb5a <sbrk_aligned+0x12>
 800eb54:	f000 ff60 	bl	800fa18 <_sbrk_r>
 800eb58:	6030      	str	r0, [r6, #0]
 800eb5a:	4621      	mov	r1, r4
 800eb5c:	4628      	mov	r0, r5
 800eb5e:	f000 ff5b 	bl	800fa18 <_sbrk_r>
 800eb62:	1c43      	adds	r3, r0, #1
 800eb64:	d103      	bne.n	800eb6e <sbrk_aligned+0x26>
 800eb66:	f04f 34ff 	mov.w	r4, #4294967295
 800eb6a:	4620      	mov	r0, r4
 800eb6c:	bd70      	pop	{r4, r5, r6, pc}
 800eb6e:	1cc4      	adds	r4, r0, #3
 800eb70:	f024 0403 	bic.w	r4, r4, #3
 800eb74:	42a0      	cmp	r0, r4
 800eb76:	d0f8      	beq.n	800eb6a <sbrk_aligned+0x22>
 800eb78:	1a21      	subs	r1, r4, r0
 800eb7a:	4628      	mov	r0, r5
 800eb7c:	f000 ff4c 	bl	800fa18 <_sbrk_r>
 800eb80:	3001      	adds	r0, #1
 800eb82:	d1f2      	bne.n	800eb6a <sbrk_aligned+0x22>
 800eb84:	e7ef      	b.n	800eb66 <sbrk_aligned+0x1e>
 800eb86:	bf00      	nop
 800eb88:	240008e0 	.word	0x240008e0

0800eb8c <_malloc_r>:
 800eb8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800eb90:	1ccd      	adds	r5, r1, #3
 800eb92:	f025 0503 	bic.w	r5, r5, #3
 800eb96:	3508      	adds	r5, #8
 800eb98:	2d0c      	cmp	r5, #12
 800eb9a:	bf38      	it	cc
 800eb9c:	250c      	movcc	r5, #12
 800eb9e:	2d00      	cmp	r5, #0
 800eba0:	4606      	mov	r6, r0
 800eba2:	db01      	blt.n	800eba8 <_malloc_r+0x1c>
 800eba4:	42a9      	cmp	r1, r5
 800eba6:	d904      	bls.n	800ebb2 <_malloc_r+0x26>
 800eba8:	230c      	movs	r3, #12
 800ebaa:	6033      	str	r3, [r6, #0]
 800ebac:	2000      	movs	r0, #0
 800ebae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ebb2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ec88 <_malloc_r+0xfc>
 800ebb6:	f000 f869 	bl	800ec8c <__malloc_lock>
 800ebba:	f8d8 3000 	ldr.w	r3, [r8]
 800ebbe:	461c      	mov	r4, r3
 800ebc0:	bb44      	cbnz	r4, 800ec14 <_malloc_r+0x88>
 800ebc2:	4629      	mov	r1, r5
 800ebc4:	4630      	mov	r0, r6
 800ebc6:	f7ff ffbf 	bl	800eb48 <sbrk_aligned>
 800ebca:	1c43      	adds	r3, r0, #1
 800ebcc:	4604      	mov	r4, r0
 800ebce:	d158      	bne.n	800ec82 <_malloc_r+0xf6>
 800ebd0:	f8d8 4000 	ldr.w	r4, [r8]
 800ebd4:	4627      	mov	r7, r4
 800ebd6:	2f00      	cmp	r7, #0
 800ebd8:	d143      	bne.n	800ec62 <_malloc_r+0xd6>
 800ebda:	2c00      	cmp	r4, #0
 800ebdc:	d04b      	beq.n	800ec76 <_malloc_r+0xea>
 800ebde:	6823      	ldr	r3, [r4, #0]
 800ebe0:	4639      	mov	r1, r7
 800ebe2:	4630      	mov	r0, r6
 800ebe4:	eb04 0903 	add.w	r9, r4, r3
 800ebe8:	f000 ff16 	bl	800fa18 <_sbrk_r>
 800ebec:	4581      	cmp	r9, r0
 800ebee:	d142      	bne.n	800ec76 <_malloc_r+0xea>
 800ebf0:	6821      	ldr	r1, [r4, #0]
 800ebf2:	1a6d      	subs	r5, r5, r1
 800ebf4:	4629      	mov	r1, r5
 800ebf6:	4630      	mov	r0, r6
 800ebf8:	f7ff ffa6 	bl	800eb48 <sbrk_aligned>
 800ebfc:	3001      	adds	r0, #1
 800ebfe:	d03a      	beq.n	800ec76 <_malloc_r+0xea>
 800ec00:	6823      	ldr	r3, [r4, #0]
 800ec02:	442b      	add	r3, r5
 800ec04:	6023      	str	r3, [r4, #0]
 800ec06:	f8d8 3000 	ldr.w	r3, [r8]
 800ec0a:	685a      	ldr	r2, [r3, #4]
 800ec0c:	bb62      	cbnz	r2, 800ec68 <_malloc_r+0xdc>
 800ec0e:	f8c8 7000 	str.w	r7, [r8]
 800ec12:	e00f      	b.n	800ec34 <_malloc_r+0xa8>
 800ec14:	6822      	ldr	r2, [r4, #0]
 800ec16:	1b52      	subs	r2, r2, r5
 800ec18:	d420      	bmi.n	800ec5c <_malloc_r+0xd0>
 800ec1a:	2a0b      	cmp	r2, #11
 800ec1c:	d917      	bls.n	800ec4e <_malloc_r+0xc2>
 800ec1e:	1961      	adds	r1, r4, r5
 800ec20:	42a3      	cmp	r3, r4
 800ec22:	6025      	str	r5, [r4, #0]
 800ec24:	bf18      	it	ne
 800ec26:	6059      	strne	r1, [r3, #4]
 800ec28:	6863      	ldr	r3, [r4, #4]
 800ec2a:	bf08      	it	eq
 800ec2c:	f8c8 1000 	streq.w	r1, [r8]
 800ec30:	5162      	str	r2, [r4, r5]
 800ec32:	604b      	str	r3, [r1, #4]
 800ec34:	4630      	mov	r0, r6
 800ec36:	f000 f82f 	bl	800ec98 <__malloc_unlock>
 800ec3a:	f104 000b 	add.w	r0, r4, #11
 800ec3e:	1d23      	adds	r3, r4, #4
 800ec40:	f020 0007 	bic.w	r0, r0, #7
 800ec44:	1ac2      	subs	r2, r0, r3
 800ec46:	bf1c      	itt	ne
 800ec48:	1a1b      	subne	r3, r3, r0
 800ec4a:	50a3      	strne	r3, [r4, r2]
 800ec4c:	e7af      	b.n	800ebae <_malloc_r+0x22>
 800ec4e:	6862      	ldr	r2, [r4, #4]
 800ec50:	42a3      	cmp	r3, r4
 800ec52:	bf0c      	ite	eq
 800ec54:	f8c8 2000 	streq.w	r2, [r8]
 800ec58:	605a      	strne	r2, [r3, #4]
 800ec5a:	e7eb      	b.n	800ec34 <_malloc_r+0xa8>
 800ec5c:	4623      	mov	r3, r4
 800ec5e:	6864      	ldr	r4, [r4, #4]
 800ec60:	e7ae      	b.n	800ebc0 <_malloc_r+0x34>
 800ec62:	463c      	mov	r4, r7
 800ec64:	687f      	ldr	r7, [r7, #4]
 800ec66:	e7b6      	b.n	800ebd6 <_malloc_r+0x4a>
 800ec68:	461a      	mov	r2, r3
 800ec6a:	685b      	ldr	r3, [r3, #4]
 800ec6c:	42a3      	cmp	r3, r4
 800ec6e:	d1fb      	bne.n	800ec68 <_malloc_r+0xdc>
 800ec70:	2300      	movs	r3, #0
 800ec72:	6053      	str	r3, [r2, #4]
 800ec74:	e7de      	b.n	800ec34 <_malloc_r+0xa8>
 800ec76:	230c      	movs	r3, #12
 800ec78:	6033      	str	r3, [r6, #0]
 800ec7a:	4630      	mov	r0, r6
 800ec7c:	f000 f80c 	bl	800ec98 <__malloc_unlock>
 800ec80:	e794      	b.n	800ebac <_malloc_r+0x20>
 800ec82:	6005      	str	r5, [r0, #0]
 800ec84:	e7d6      	b.n	800ec34 <_malloc_r+0xa8>
 800ec86:	bf00      	nop
 800ec88:	240008e4 	.word	0x240008e4

0800ec8c <__malloc_lock>:
 800ec8c:	4801      	ldr	r0, [pc, #4]	@ (800ec94 <__malloc_lock+0x8>)
 800ec8e:	f000 bf10 	b.w	800fab2 <__retarget_lock_acquire_recursive>
 800ec92:	bf00      	nop
 800ec94:	24000a28 	.word	0x24000a28

0800ec98 <__malloc_unlock>:
 800ec98:	4801      	ldr	r0, [pc, #4]	@ (800eca0 <__malloc_unlock+0x8>)
 800ec9a:	f000 bf0b 	b.w	800fab4 <__retarget_lock_release_recursive>
 800ec9e:	bf00      	nop
 800eca0:	24000a28 	.word	0x24000a28

0800eca4 <__cvt>:
 800eca4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eca6:	ed2d 8b02 	vpush	{d8}
 800ecaa:	eeb0 8b40 	vmov.f64	d8, d0
 800ecae:	b085      	sub	sp, #20
 800ecb0:	4617      	mov	r7, r2
 800ecb2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 800ecb4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ecb6:	ee18 2a90 	vmov	r2, s17
 800ecba:	f025 0520 	bic.w	r5, r5, #32
 800ecbe:	2a00      	cmp	r2, #0
 800ecc0:	bfb6      	itet	lt
 800ecc2:	222d      	movlt	r2, #45	@ 0x2d
 800ecc4:	2200      	movge	r2, #0
 800ecc6:	eeb1 8b40 	vneglt.f64	d8, d0
 800ecca:	2d46      	cmp	r5, #70	@ 0x46
 800eccc:	460c      	mov	r4, r1
 800ecce:	701a      	strb	r2, [r3, #0]
 800ecd0:	d004      	beq.n	800ecdc <__cvt+0x38>
 800ecd2:	2d45      	cmp	r5, #69	@ 0x45
 800ecd4:	d100      	bne.n	800ecd8 <__cvt+0x34>
 800ecd6:	3401      	adds	r4, #1
 800ecd8:	2102      	movs	r1, #2
 800ecda:	e000      	b.n	800ecde <__cvt+0x3a>
 800ecdc:	2103      	movs	r1, #3
 800ecde:	ab03      	add	r3, sp, #12
 800ece0:	9301      	str	r3, [sp, #4]
 800ece2:	ab02      	add	r3, sp, #8
 800ece4:	9300      	str	r3, [sp, #0]
 800ece6:	4622      	mov	r2, r4
 800ece8:	4633      	mov	r3, r6
 800ecea:	eeb0 0b48 	vmov.f64	d0, d8
 800ecee:	f000 ff83 	bl	800fbf8 <_dtoa_r>
 800ecf2:	2d47      	cmp	r5, #71	@ 0x47
 800ecf4:	d114      	bne.n	800ed20 <__cvt+0x7c>
 800ecf6:	07fb      	lsls	r3, r7, #31
 800ecf8:	d50a      	bpl.n	800ed10 <__cvt+0x6c>
 800ecfa:	1902      	adds	r2, r0, r4
 800ecfc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ed00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed04:	bf08      	it	eq
 800ed06:	9203      	streq	r2, [sp, #12]
 800ed08:	2130      	movs	r1, #48	@ 0x30
 800ed0a:	9b03      	ldr	r3, [sp, #12]
 800ed0c:	4293      	cmp	r3, r2
 800ed0e:	d319      	bcc.n	800ed44 <__cvt+0xa0>
 800ed10:	9b03      	ldr	r3, [sp, #12]
 800ed12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ed14:	1a1b      	subs	r3, r3, r0
 800ed16:	6013      	str	r3, [r2, #0]
 800ed18:	b005      	add	sp, #20
 800ed1a:	ecbd 8b02 	vpop	{d8}
 800ed1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed20:	2d46      	cmp	r5, #70	@ 0x46
 800ed22:	eb00 0204 	add.w	r2, r0, r4
 800ed26:	d1e9      	bne.n	800ecfc <__cvt+0x58>
 800ed28:	7803      	ldrb	r3, [r0, #0]
 800ed2a:	2b30      	cmp	r3, #48	@ 0x30
 800ed2c:	d107      	bne.n	800ed3e <__cvt+0x9a>
 800ed2e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800ed32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ed36:	bf1c      	itt	ne
 800ed38:	f1c4 0401 	rsbne	r4, r4, #1
 800ed3c:	6034      	strne	r4, [r6, #0]
 800ed3e:	6833      	ldr	r3, [r6, #0]
 800ed40:	441a      	add	r2, r3
 800ed42:	e7db      	b.n	800ecfc <__cvt+0x58>
 800ed44:	1c5c      	adds	r4, r3, #1
 800ed46:	9403      	str	r4, [sp, #12]
 800ed48:	7019      	strb	r1, [r3, #0]
 800ed4a:	e7de      	b.n	800ed0a <__cvt+0x66>

0800ed4c <__exponent>:
 800ed4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ed4e:	2900      	cmp	r1, #0
 800ed50:	bfba      	itte	lt
 800ed52:	4249      	neglt	r1, r1
 800ed54:	232d      	movlt	r3, #45	@ 0x2d
 800ed56:	232b      	movge	r3, #43	@ 0x2b
 800ed58:	2909      	cmp	r1, #9
 800ed5a:	7002      	strb	r2, [r0, #0]
 800ed5c:	7043      	strb	r3, [r0, #1]
 800ed5e:	dd29      	ble.n	800edb4 <__exponent+0x68>
 800ed60:	f10d 0307 	add.w	r3, sp, #7
 800ed64:	461d      	mov	r5, r3
 800ed66:	270a      	movs	r7, #10
 800ed68:	461a      	mov	r2, r3
 800ed6a:	fbb1 f6f7 	udiv	r6, r1, r7
 800ed6e:	fb07 1416 	mls	r4, r7, r6, r1
 800ed72:	3430      	adds	r4, #48	@ 0x30
 800ed74:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ed78:	460c      	mov	r4, r1
 800ed7a:	2c63      	cmp	r4, #99	@ 0x63
 800ed7c:	f103 33ff 	add.w	r3, r3, #4294967295
 800ed80:	4631      	mov	r1, r6
 800ed82:	dcf1      	bgt.n	800ed68 <__exponent+0x1c>
 800ed84:	3130      	adds	r1, #48	@ 0x30
 800ed86:	1e94      	subs	r4, r2, #2
 800ed88:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ed8c:	1c41      	adds	r1, r0, #1
 800ed8e:	4623      	mov	r3, r4
 800ed90:	42ab      	cmp	r3, r5
 800ed92:	d30a      	bcc.n	800edaa <__exponent+0x5e>
 800ed94:	f10d 0309 	add.w	r3, sp, #9
 800ed98:	1a9b      	subs	r3, r3, r2
 800ed9a:	42ac      	cmp	r4, r5
 800ed9c:	bf88      	it	hi
 800ed9e:	2300      	movhi	r3, #0
 800eda0:	3302      	adds	r3, #2
 800eda2:	4403      	add	r3, r0
 800eda4:	1a18      	subs	r0, r3, r0
 800eda6:	b003      	add	sp, #12
 800eda8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800edaa:	f813 6b01 	ldrb.w	r6, [r3], #1
 800edae:	f801 6f01 	strb.w	r6, [r1, #1]!
 800edb2:	e7ed      	b.n	800ed90 <__exponent+0x44>
 800edb4:	2330      	movs	r3, #48	@ 0x30
 800edb6:	3130      	adds	r1, #48	@ 0x30
 800edb8:	7083      	strb	r3, [r0, #2]
 800edba:	70c1      	strb	r1, [r0, #3]
 800edbc:	1d03      	adds	r3, r0, #4
 800edbe:	e7f1      	b.n	800eda4 <__exponent+0x58>

0800edc0 <_printf_float>:
 800edc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800edc4:	b08d      	sub	sp, #52	@ 0x34
 800edc6:	460c      	mov	r4, r1
 800edc8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800edcc:	4616      	mov	r6, r2
 800edce:	461f      	mov	r7, r3
 800edd0:	4605      	mov	r5, r0
 800edd2:	f000 fde9 	bl	800f9a8 <_localeconv_r>
 800edd6:	f8d0 b000 	ldr.w	fp, [r0]
 800edda:	4658      	mov	r0, fp
 800eddc:	f7f1 fae0 	bl	80003a0 <strlen>
 800ede0:	2300      	movs	r3, #0
 800ede2:	930a      	str	r3, [sp, #40]	@ 0x28
 800ede4:	f8d8 3000 	ldr.w	r3, [r8]
 800ede8:	f894 9018 	ldrb.w	r9, [r4, #24]
 800edec:	6822      	ldr	r2, [r4, #0]
 800edee:	9005      	str	r0, [sp, #20]
 800edf0:	3307      	adds	r3, #7
 800edf2:	f023 0307 	bic.w	r3, r3, #7
 800edf6:	f103 0108 	add.w	r1, r3, #8
 800edfa:	f8c8 1000 	str.w	r1, [r8]
 800edfe:	ed93 0b00 	vldr	d0, [r3]
 800ee02:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 800f060 <_printf_float+0x2a0>
 800ee06:	eeb0 7bc0 	vabs.f64	d7, d0
 800ee0a:	eeb4 7b46 	vcmp.f64	d7, d6
 800ee0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee12:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 800ee16:	dd24      	ble.n	800ee62 <_printf_float+0xa2>
 800ee18:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800ee1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee20:	d502      	bpl.n	800ee28 <_printf_float+0x68>
 800ee22:	232d      	movs	r3, #45	@ 0x2d
 800ee24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ee28:	498f      	ldr	r1, [pc, #572]	@ (800f068 <_printf_float+0x2a8>)
 800ee2a:	4b90      	ldr	r3, [pc, #576]	@ (800f06c <_printf_float+0x2ac>)
 800ee2c:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 800ee30:	bf8c      	ite	hi
 800ee32:	4688      	movhi	r8, r1
 800ee34:	4698      	movls	r8, r3
 800ee36:	f022 0204 	bic.w	r2, r2, #4
 800ee3a:	2303      	movs	r3, #3
 800ee3c:	6123      	str	r3, [r4, #16]
 800ee3e:	6022      	str	r2, [r4, #0]
 800ee40:	f04f 0a00 	mov.w	sl, #0
 800ee44:	9700      	str	r7, [sp, #0]
 800ee46:	4633      	mov	r3, r6
 800ee48:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ee4a:	4621      	mov	r1, r4
 800ee4c:	4628      	mov	r0, r5
 800ee4e:	f000 f9d1 	bl	800f1f4 <_printf_common>
 800ee52:	3001      	adds	r0, #1
 800ee54:	f040 8089 	bne.w	800ef6a <_printf_float+0x1aa>
 800ee58:	f04f 30ff 	mov.w	r0, #4294967295
 800ee5c:	b00d      	add	sp, #52	@ 0x34
 800ee5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ee62:	eeb4 0b40 	vcmp.f64	d0, d0
 800ee66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ee6a:	d709      	bvc.n	800ee80 <_printf_float+0xc0>
 800ee6c:	ee10 3a90 	vmov	r3, s1
 800ee70:	2b00      	cmp	r3, #0
 800ee72:	bfbc      	itt	lt
 800ee74:	232d      	movlt	r3, #45	@ 0x2d
 800ee76:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ee7a:	497d      	ldr	r1, [pc, #500]	@ (800f070 <_printf_float+0x2b0>)
 800ee7c:	4b7d      	ldr	r3, [pc, #500]	@ (800f074 <_printf_float+0x2b4>)
 800ee7e:	e7d5      	b.n	800ee2c <_printf_float+0x6c>
 800ee80:	6863      	ldr	r3, [r4, #4]
 800ee82:	1c59      	adds	r1, r3, #1
 800ee84:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 800ee88:	d139      	bne.n	800eefe <_printf_float+0x13e>
 800ee8a:	2306      	movs	r3, #6
 800ee8c:	6063      	str	r3, [r4, #4]
 800ee8e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800ee92:	2300      	movs	r3, #0
 800ee94:	6022      	str	r2, [r4, #0]
 800ee96:	9303      	str	r3, [sp, #12]
 800ee98:	ab0a      	add	r3, sp, #40	@ 0x28
 800ee9a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800ee9e:	ab09      	add	r3, sp, #36	@ 0x24
 800eea0:	9300      	str	r3, [sp, #0]
 800eea2:	6861      	ldr	r1, [r4, #4]
 800eea4:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800eea8:	4628      	mov	r0, r5
 800eeaa:	f7ff fefb 	bl	800eca4 <__cvt>
 800eeae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800eeb2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800eeb4:	4680      	mov	r8, r0
 800eeb6:	d129      	bne.n	800ef0c <_printf_float+0x14c>
 800eeb8:	1cc8      	adds	r0, r1, #3
 800eeba:	db02      	blt.n	800eec2 <_printf_float+0x102>
 800eebc:	6863      	ldr	r3, [r4, #4]
 800eebe:	4299      	cmp	r1, r3
 800eec0:	dd41      	ble.n	800ef46 <_printf_float+0x186>
 800eec2:	f1a9 0902 	sub.w	r9, r9, #2
 800eec6:	fa5f f989 	uxtb.w	r9, r9
 800eeca:	3901      	subs	r1, #1
 800eecc:	464a      	mov	r2, r9
 800eece:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800eed2:	9109      	str	r1, [sp, #36]	@ 0x24
 800eed4:	f7ff ff3a 	bl	800ed4c <__exponent>
 800eed8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800eeda:	1813      	adds	r3, r2, r0
 800eedc:	2a01      	cmp	r2, #1
 800eede:	4682      	mov	sl, r0
 800eee0:	6123      	str	r3, [r4, #16]
 800eee2:	dc02      	bgt.n	800eeea <_printf_float+0x12a>
 800eee4:	6822      	ldr	r2, [r4, #0]
 800eee6:	07d2      	lsls	r2, r2, #31
 800eee8:	d501      	bpl.n	800eeee <_printf_float+0x12e>
 800eeea:	3301      	adds	r3, #1
 800eeec:	6123      	str	r3, [r4, #16]
 800eeee:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d0a6      	beq.n	800ee44 <_printf_float+0x84>
 800eef6:	232d      	movs	r3, #45	@ 0x2d
 800eef8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800eefc:	e7a2      	b.n	800ee44 <_printf_float+0x84>
 800eefe:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ef02:	d1c4      	bne.n	800ee8e <_printf_float+0xce>
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d1c2      	bne.n	800ee8e <_printf_float+0xce>
 800ef08:	2301      	movs	r3, #1
 800ef0a:	e7bf      	b.n	800ee8c <_printf_float+0xcc>
 800ef0c:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800ef10:	d9db      	bls.n	800eeca <_printf_float+0x10a>
 800ef12:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 800ef16:	d118      	bne.n	800ef4a <_printf_float+0x18a>
 800ef18:	2900      	cmp	r1, #0
 800ef1a:	6863      	ldr	r3, [r4, #4]
 800ef1c:	dd0b      	ble.n	800ef36 <_printf_float+0x176>
 800ef1e:	6121      	str	r1, [r4, #16]
 800ef20:	b913      	cbnz	r3, 800ef28 <_printf_float+0x168>
 800ef22:	6822      	ldr	r2, [r4, #0]
 800ef24:	07d0      	lsls	r0, r2, #31
 800ef26:	d502      	bpl.n	800ef2e <_printf_float+0x16e>
 800ef28:	3301      	adds	r3, #1
 800ef2a:	440b      	add	r3, r1
 800ef2c:	6123      	str	r3, [r4, #16]
 800ef2e:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ef30:	f04f 0a00 	mov.w	sl, #0
 800ef34:	e7db      	b.n	800eeee <_printf_float+0x12e>
 800ef36:	b913      	cbnz	r3, 800ef3e <_printf_float+0x17e>
 800ef38:	6822      	ldr	r2, [r4, #0]
 800ef3a:	07d2      	lsls	r2, r2, #31
 800ef3c:	d501      	bpl.n	800ef42 <_printf_float+0x182>
 800ef3e:	3302      	adds	r3, #2
 800ef40:	e7f4      	b.n	800ef2c <_printf_float+0x16c>
 800ef42:	2301      	movs	r3, #1
 800ef44:	e7f2      	b.n	800ef2c <_printf_float+0x16c>
 800ef46:	f04f 0967 	mov.w	r9, #103	@ 0x67
 800ef4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ef4c:	4299      	cmp	r1, r3
 800ef4e:	db05      	blt.n	800ef5c <_printf_float+0x19c>
 800ef50:	6823      	ldr	r3, [r4, #0]
 800ef52:	6121      	str	r1, [r4, #16]
 800ef54:	07d8      	lsls	r0, r3, #31
 800ef56:	d5ea      	bpl.n	800ef2e <_printf_float+0x16e>
 800ef58:	1c4b      	adds	r3, r1, #1
 800ef5a:	e7e7      	b.n	800ef2c <_printf_float+0x16c>
 800ef5c:	2900      	cmp	r1, #0
 800ef5e:	bfd4      	ite	le
 800ef60:	f1c1 0202 	rsble	r2, r1, #2
 800ef64:	2201      	movgt	r2, #1
 800ef66:	4413      	add	r3, r2
 800ef68:	e7e0      	b.n	800ef2c <_printf_float+0x16c>
 800ef6a:	6823      	ldr	r3, [r4, #0]
 800ef6c:	055a      	lsls	r2, r3, #21
 800ef6e:	d407      	bmi.n	800ef80 <_printf_float+0x1c0>
 800ef70:	6923      	ldr	r3, [r4, #16]
 800ef72:	4642      	mov	r2, r8
 800ef74:	4631      	mov	r1, r6
 800ef76:	4628      	mov	r0, r5
 800ef78:	47b8      	blx	r7
 800ef7a:	3001      	adds	r0, #1
 800ef7c:	d12a      	bne.n	800efd4 <_printf_float+0x214>
 800ef7e:	e76b      	b.n	800ee58 <_printf_float+0x98>
 800ef80:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 800ef84:	f240 80e0 	bls.w	800f148 <_printf_float+0x388>
 800ef88:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800ef8c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800ef90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ef94:	d133      	bne.n	800effe <_printf_float+0x23e>
 800ef96:	4a38      	ldr	r2, [pc, #224]	@ (800f078 <_printf_float+0x2b8>)
 800ef98:	2301      	movs	r3, #1
 800ef9a:	4631      	mov	r1, r6
 800ef9c:	4628      	mov	r0, r5
 800ef9e:	47b8      	blx	r7
 800efa0:	3001      	adds	r0, #1
 800efa2:	f43f af59 	beq.w	800ee58 <_printf_float+0x98>
 800efa6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800efaa:	4543      	cmp	r3, r8
 800efac:	db02      	blt.n	800efb4 <_printf_float+0x1f4>
 800efae:	6823      	ldr	r3, [r4, #0]
 800efb0:	07d8      	lsls	r0, r3, #31
 800efb2:	d50f      	bpl.n	800efd4 <_printf_float+0x214>
 800efb4:	9b05      	ldr	r3, [sp, #20]
 800efb6:	465a      	mov	r2, fp
 800efb8:	4631      	mov	r1, r6
 800efba:	4628      	mov	r0, r5
 800efbc:	47b8      	blx	r7
 800efbe:	3001      	adds	r0, #1
 800efc0:	f43f af4a 	beq.w	800ee58 <_printf_float+0x98>
 800efc4:	f04f 0900 	mov.w	r9, #0
 800efc8:	f108 38ff 	add.w	r8, r8, #4294967295
 800efcc:	f104 0a1a 	add.w	sl, r4, #26
 800efd0:	45c8      	cmp	r8, r9
 800efd2:	dc09      	bgt.n	800efe8 <_printf_float+0x228>
 800efd4:	6823      	ldr	r3, [r4, #0]
 800efd6:	079b      	lsls	r3, r3, #30
 800efd8:	f100 8107 	bmi.w	800f1ea <_printf_float+0x42a>
 800efdc:	68e0      	ldr	r0, [r4, #12]
 800efde:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800efe0:	4298      	cmp	r0, r3
 800efe2:	bfb8      	it	lt
 800efe4:	4618      	movlt	r0, r3
 800efe6:	e739      	b.n	800ee5c <_printf_float+0x9c>
 800efe8:	2301      	movs	r3, #1
 800efea:	4652      	mov	r2, sl
 800efec:	4631      	mov	r1, r6
 800efee:	4628      	mov	r0, r5
 800eff0:	47b8      	blx	r7
 800eff2:	3001      	adds	r0, #1
 800eff4:	f43f af30 	beq.w	800ee58 <_printf_float+0x98>
 800eff8:	f109 0901 	add.w	r9, r9, #1
 800effc:	e7e8      	b.n	800efd0 <_printf_float+0x210>
 800effe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f000:	2b00      	cmp	r3, #0
 800f002:	dc3b      	bgt.n	800f07c <_printf_float+0x2bc>
 800f004:	4a1c      	ldr	r2, [pc, #112]	@ (800f078 <_printf_float+0x2b8>)
 800f006:	2301      	movs	r3, #1
 800f008:	4631      	mov	r1, r6
 800f00a:	4628      	mov	r0, r5
 800f00c:	47b8      	blx	r7
 800f00e:	3001      	adds	r0, #1
 800f010:	f43f af22 	beq.w	800ee58 <_printf_float+0x98>
 800f014:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800f018:	ea59 0303 	orrs.w	r3, r9, r3
 800f01c:	d102      	bne.n	800f024 <_printf_float+0x264>
 800f01e:	6823      	ldr	r3, [r4, #0]
 800f020:	07d9      	lsls	r1, r3, #31
 800f022:	d5d7      	bpl.n	800efd4 <_printf_float+0x214>
 800f024:	9b05      	ldr	r3, [sp, #20]
 800f026:	465a      	mov	r2, fp
 800f028:	4631      	mov	r1, r6
 800f02a:	4628      	mov	r0, r5
 800f02c:	47b8      	blx	r7
 800f02e:	3001      	adds	r0, #1
 800f030:	f43f af12 	beq.w	800ee58 <_printf_float+0x98>
 800f034:	f04f 0a00 	mov.w	sl, #0
 800f038:	f104 0b1a 	add.w	fp, r4, #26
 800f03c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f03e:	425b      	negs	r3, r3
 800f040:	4553      	cmp	r3, sl
 800f042:	dc01      	bgt.n	800f048 <_printf_float+0x288>
 800f044:	464b      	mov	r3, r9
 800f046:	e794      	b.n	800ef72 <_printf_float+0x1b2>
 800f048:	2301      	movs	r3, #1
 800f04a:	465a      	mov	r2, fp
 800f04c:	4631      	mov	r1, r6
 800f04e:	4628      	mov	r0, r5
 800f050:	47b8      	blx	r7
 800f052:	3001      	adds	r0, #1
 800f054:	f43f af00 	beq.w	800ee58 <_printf_float+0x98>
 800f058:	f10a 0a01 	add.w	sl, sl, #1
 800f05c:	e7ee      	b.n	800f03c <_printf_float+0x27c>
 800f05e:	bf00      	nop
 800f060:	ffffffff 	.word	0xffffffff
 800f064:	7fefffff 	.word	0x7fefffff
 800f068:	08013af4 	.word	0x08013af4
 800f06c:	08013af0 	.word	0x08013af0
 800f070:	08013afc 	.word	0x08013afc
 800f074:	08013af8 	.word	0x08013af8
 800f078:	08013b00 	.word	0x08013b00
 800f07c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f07e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800f082:	4553      	cmp	r3, sl
 800f084:	bfa8      	it	ge
 800f086:	4653      	movge	r3, sl
 800f088:	2b00      	cmp	r3, #0
 800f08a:	4699      	mov	r9, r3
 800f08c:	dc37      	bgt.n	800f0fe <_printf_float+0x33e>
 800f08e:	2300      	movs	r3, #0
 800f090:	9307      	str	r3, [sp, #28]
 800f092:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f096:	f104 021a 	add.w	r2, r4, #26
 800f09a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800f09c:	9907      	ldr	r1, [sp, #28]
 800f09e:	9306      	str	r3, [sp, #24]
 800f0a0:	eba3 0309 	sub.w	r3, r3, r9
 800f0a4:	428b      	cmp	r3, r1
 800f0a6:	dc31      	bgt.n	800f10c <_printf_float+0x34c>
 800f0a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0aa:	459a      	cmp	sl, r3
 800f0ac:	dc3b      	bgt.n	800f126 <_printf_float+0x366>
 800f0ae:	6823      	ldr	r3, [r4, #0]
 800f0b0:	07da      	lsls	r2, r3, #31
 800f0b2:	d438      	bmi.n	800f126 <_printf_float+0x366>
 800f0b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0b6:	ebaa 0903 	sub.w	r9, sl, r3
 800f0ba:	9b06      	ldr	r3, [sp, #24]
 800f0bc:	ebaa 0303 	sub.w	r3, sl, r3
 800f0c0:	4599      	cmp	r9, r3
 800f0c2:	bfa8      	it	ge
 800f0c4:	4699      	movge	r9, r3
 800f0c6:	f1b9 0f00 	cmp.w	r9, #0
 800f0ca:	dc34      	bgt.n	800f136 <_printf_float+0x376>
 800f0cc:	f04f 0800 	mov.w	r8, #0
 800f0d0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800f0d4:	f104 0b1a 	add.w	fp, r4, #26
 800f0d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0da:	ebaa 0303 	sub.w	r3, sl, r3
 800f0de:	eba3 0309 	sub.w	r3, r3, r9
 800f0e2:	4543      	cmp	r3, r8
 800f0e4:	f77f af76 	ble.w	800efd4 <_printf_float+0x214>
 800f0e8:	2301      	movs	r3, #1
 800f0ea:	465a      	mov	r2, fp
 800f0ec:	4631      	mov	r1, r6
 800f0ee:	4628      	mov	r0, r5
 800f0f0:	47b8      	blx	r7
 800f0f2:	3001      	adds	r0, #1
 800f0f4:	f43f aeb0 	beq.w	800ee58 <_printf_float+0x98>
 800f0f8:	f108 0801 	add.w	r8, r8, #1
 800f0fc:	e7ec      	b.n	800f0d8 <_printf_float+0x318>
 800f0fe:	4642      	mov	r2, r8
 800f100:	4631      	mov	r1, r6
 800f102:	4628      	mov	r0, r5
 800f104:	47b8      	blx	r7
 800f106:	3001      	adds	r0, #1
 800f108:	d1c1      	bne.n	800f08e <_printf_float+0x2ce>
 800f10a:	e6a5      	b.n	800ee58 <_printf_float+0x98>
 800f10c:	2301      	movs	r3, #1
 800f10e:	4631      	mov	r1, r6
 800f110:	4628      	mov	r0, r5
 800f112:	9206      	str	r2, [sp, #24]
 800f114:	47b8      	blx	r7
 800f116:	3001      	adds	r0, #1
 800f118:	f43f ae9e 	beq.w	800ee58 <_printf_float+0x98>
 800f11c:	9b07      	ldr	r3, [sp, #28]
 800f11e:	9a06      	ldr	r2, [sp, #24]
 800f120:	3301      	adds	r3, #1
 800f122:	9307      	str	r3, [sp, #28]
 800f124:	e7b9      	b.n	800f09a <_printf_float+0x2da>
 800f126:	9b05      	ldr	r3, [sp, #20]
 800f128:	465a      	mov	r2, fp
 800f12a:	4631      	mov	r1, r6
 800f12c:	4628      	mov	r0, r5
 800f12e:	47b8      	blx	r7
 800f130:	3001      	adds	r0, #1
 800f132:	d1bf      	bne.n	800f0b4 <_printf_float+0x2f4>
 800f134:	e690      	b.n	800ee58 <_printf_float+0x98>
 800f136:	9a06      	ldr	r2, [sp, #24]
 800f138:	464b      	mov	r3, r9
 800f13a:	4442      	add	r2, r8
 800f13c:	4631      	mov	r1, r6
 800f13e:	4628      	mov	r0, r5
 800f140:	47b8      	blx	r7
 800f142:	3001      	adds	r0, #1
 800f144:	d1c2      	bne.n	800f0cc <_printf_float+0x30c>
 800f146:	e687      	b.n	800ee58 <_printf_float+0x98>
 800f148:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800f14c:	f1b9 0f01 	cmp.w	r9, #1
 800f150:	dc01      	bgt.n	800f156 <_printf_float+0x396>
 800f152:	07db      	lsls	r3, r3, #31
 800f154:	d536      	bpl.n	800f1c4 <_printf_float+0x404>
 800f156:	2301      	movs	r3, #1
 800f158:	4642      	mov	r2, r8
 800f15a:	4631      	mov	r1, r6
 800f15c:	4628      	mov	r0, r5
 800f15e:	47b8      	blx	r7
 800f160:	3001      	adds	r0, #1
 800f162:	f43f ae79 	beq.w	800ee58 <_printf_float+0x98>
 800f166:	9b05      	ldr	r3, [sp, #20]
 800f168:	465a      	mov	r2, fp
 800f16a:	4631      	mov	r1, r6
 800f16c:	4628      	mov	r0, r5
 800f16e:	47b8      	blx	r7
 800f170:	3001      	adds	r0, #1
 800f172:	f43f ae71 	beq.w	800ee58 <_printf_float+0x98>
 800f176:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 800f17a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800f17e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f182:	f109 39ff 	add.w	r9, r9, #4294967295
 800f186:	d018      	beq.n	800f1ba <_printf_float+0x3fa>
 800f188:	464b      	mov	r3, r9
 800f18a:	f108 0201 	add.w	r2, r8, #1
 800f18e:	4631      	mov	r1, r6
 800f190:	4628      	mov	r0, r5
 800f192:	47b8      	blx	r7
 800f194:	3001      	adds	r0, #1
 800f196:	d10c      	bne.n	800f1b2 <_printf_float+0x3f2>
 800f198:	e65e      	b.n	800ee58 <_printf_float+0x98>
 800f19a:	2301      	movs	r3, #1
 800f19c:	465a      	mov	r2, fp
 800f19e:	4631      	mov	r1, r6
 800f1a0:	4628      	mov	r0, r5
 800f1a2:	47b8      	blx	r7
 800f1a4:	3001      	adds	r0, #1
 800f1a6:	f43f ae57 	beq.w	800ee58 <_printf_float+0x98>
 800f1aa:	f108 0801 	add.w	r8, r8, #1
 800f1ae:	45c8      	cmp	r8, r9
 800f1b0:	dbf3      	blt.n	800f19a <_printf_float+0x3da>
 800f1b2:	4653      	mov	r3, sl
 800f1b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800f1b8:	e6dc      	b.n	800ef74 <_printf_float+0x1b4>
 800f1ba:	f04f 0800 	mov.w	r8, #0
 800f1be:	f104 0b1a 	add.w	fp, r4, #26
 800f1c2:	e7f4      	b.n	800f1ae <_printf_float+0x3ee>
 800f1c4:	2301      	movs	r3, #1
 800f1c6:	4642      	mov	r2, r8
 800f1c8:	e7e1      	b.n	800f18e <_printf_float+0x3ce>
 800f1ca:	2301      	movs	r3, #1
 800f1cc:	464a      	mov	r2, r9
 800f1ce:	4631      	mov	r1, r6
 800f1d0:	4628      	mov	r0, r5
 800f1d2:	47b8      	blx	r7
 800f1d4:	3001      	adds	r0, #1
 800f1d6:	f43f ae3f 	beq.w	800ee58 <_printf_float+0x98>
 800f1da:	f108 0801 	add.w	r8, r8, #1
 800f1de:	68e3      	ldr	r3, [r4, #12]
 800f1e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f1e2:	1a5b      	subs	r3, r3, r1
 800f1e4:	4543      	cmp	r3, r8
 800f1e6:	dcf0      	bgt.n	800f1ca <_printf_float+0x40a>
 800f1e8:	e6f8      	b.n	800efdc <_printf_float+0x21c>
 800f1ea:	f04f 0800 	mov.w	r8, #0
 800f1ee:	f104 0919 	add.w	r9, r4, #25
 800f1f2:	e7f4      	b.n	800f1de <_printf_float+0x41e>

0800f1f4 <_printf_common>:
 800f1f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1f8:	4616      	mov	r6, r2
 800f1fa:	4698      	mov	r8, r3
 800f1fc:	688a      	ldr	r2, [r1, #8]
 800f1fe:	690b      	ldr	r3, [r1, #16]
 800f200:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800f204:	4293      	cmp	r3, r2
 800f206:	bfb8      	it	lt
 800f208:	4613      	movlt	r3, r2
 800f20a:	6033      	str	r3, [r6, #0]
 800f20c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800f210:	4607      	mov	r7, r0
 800f212:	460c      	mov	r4, r1
 800f214:	b10a      	cbz	r2, 800f21a <_printf_common+0x26>
 800f216:	3301      	adds	r3, #1
 800f218:	6033      	str	r3, [r6, #0]
 800f21a:	6823      	ldr	r3, [r4, #0]
 800f21c:	0699      	lsls	r1, r3, #26
 800f21e:	bf42      	ittt	mi
 800f220:	6833      	ldrmi	r3, [r6, #0]
 800f222:	3302      	addmi	r3, #2
 800f224:	6033      	strmi	r3, [r6, #0]
 800f226:	6825      	ldr	r5, [r4, #0]
 800f228:	f015 0506 	ands.w	r5, r5, #6
 800f22c:	d106      	bne.n	800f23c <_printf_common+0x48>
 800f22e:	f104 0a19 	add.w	sl, r4, #25
 800f232:	68e3      	ldr	r3, [r4, #12]
 800f234:	6832      	ldr	r2, [r6, #0]
 800f236:	1a9b      	subs	r3, r3, r2
 800f238:	42ab      	cmp	r3, r5
 800f23a:	dc26      	bgt.n	800f28a <_printf_common+0x96>
 800f23c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800f240:	6822      	ldr	r2, [r4, #0]
 800f242:	3b00      	subs	r3, #0
 800f244:	bf18      	it	ne
 800f246:	2301      	movne	r3, #1
 800f248:	0692      	lsls	r2, r2, #26
 800f24a:	d42b      	bmi.n	800f2a4 <_printf_common+0xb0>
 800f24c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800f250:	4641      	mov	r1, r8
 800f252:	4638      	mov	r0, r7
 800f254:	47c8      	blx	r9
 800f256:	3001      	adds	r0, #1
 800f258:	d01e      	beq.n	800f298 <_printf_common+0xa4>
 800f25a:	6823      	ldr	r3, [r4, #0]
 800f25c:	6922      	ldr	r2, [r4, #16]
 800f25e:	f003 0306 	and.w	r3, r3, #6
 800f262:	2b04      	cmp	r3, #4
 800f264:	bf02      	ittt	eq
 800f266:	68e5      	ldreq	r5, [r4, #12]
 800f268:	6833      	ldreq	r3, [r6, #0]
 800f26a:	1aed      	subeq	r5, r5, r3
 800f26c:	68a3      	ldr	r3, [r4, #8]
 800f26e:	bf0c      	ite	eq
 800f270:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f274:	2500      	movne	r5, #0
 800f276:	4293      	cmp	r3, r2
 800f278:	bfc4      	itt	gt
 800f27a:	1a9b      	subgt	r3, r3, r2
 800f27c:	18ed      	addgt	r5, r5, r3
 800f27e:	2600      	movs	r6, #0
 800f280:	341a      	adds	r4, #26
 800f282:	42b5      	cmp	r5, r6
 800f284:	d11a      	bne.n	800f2bc <_printf_common+0xc8>
 800f286:	2000      	movs	r0, #0
 800f288:	e008      	b.n	800f29c <_printf_common+0xa8>
 800f28a:	2301      	movs	r3, #1
 800f28c:	4652      	mov	r2, sl
 800f28e:	4641      	mov	r1, r8
 800f290:	4638      	mov	r0, r7
 800f292:	47c8      	blx	r9
 800f294:	3001      	adds	r0, #1
 800f296:	d103      	bne.n	800f2a0 <_printf_common+0xac>
 800f298:	f04f 30ff 	mov.w	r0, #4294967295
 800f29c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2a0:	3501      	adds	r5, #1
 800f2a2:	e7c6      	b.n	800f232 <_printf_common+0x3e>
 800f2a4:	18e1      	adds	r1, r4, r3
 800f2a6:	1c5a      	adds	r2, r3, #1
 800f2a8:	2030      	movs	r0, #48	@ 0x30
 800f2aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800f2ae:	4422      	add	r2, r4
 800f2b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800f2b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800f2b8:	3302      	adds	r3, #2
 800f2ba:	e7c7      	b.n	800f24c <_printf_common+0x58>
 800f2bc:	2301      	movs	r3, #1
 800f2be:	4622      	mov	r2, r4
 800f2c0:	4641      	mov	r1, r8
 800f2c2:	4638      	mov	r0, r7
 800f2c4:	47c8      	blx	r9
 800f2c6:	3001      	adds	r0, #1
 800f2c8:	d0e6      	beq.n	800f298 <_printf_common+0xa4>
 800f2ca:	3601      	adds	r6, #1
 800f2cc:	e7d9      	b.n	800f282 <_printf_common+0x8e>
	...

0800f2d0 <_printf_i>:
 800f2d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f2d4:	7e0f      	ldrb	r7, [r1, #24]
 800f2d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800f2d8:	2f78      	cmp	r7, #120	@ 0x78
 800f2da:	4691      	mov	r9, r2
 800f2dc:	4680      	mov	r8, r0
 800f2de:	460c      	mov	r4, r1
 800f2e0:	469a      	mov	sl, r3
 800f2e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800f2e6:	d807      	bhi.n	800f2f8 <_printf_i+0x28>
 800f2e8:	2f62      	cmp	r7, #98	@ 0x62
 800f2ea:	d80a      	bhi.n	800f302 <_printf_i+0x32>
 800f2ec:	2f00      	cmp	r7, #0
 800f2ee:	f000 80d1 	beq.w	800f494 <_printf_i+0x1c4>
 800f2f2:	2f58      	cmp	r7, #88	@ 0x58
 800f2f4:	f000 80b8 	beq.w	800f468 <_printf_i+0x198>
 800f2f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f2fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800f300:	e03a      	b.n	800f378 <_printf_i+0xa8>
 800f302:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800f306:	2b15      	cmp	r3, #21
 800f308:	d8f6      	bhi.n	800f2f8 <_printf_i+0x28>
 800f30a:	a101      	add	r1, pc, #4	@ (adr r1, 800f310 <_printf_i+0x40>)
 800f30c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f310:	0800f369 	.word	0x0800f369
 800f314:	0800f37d 	.word	0x0800f37d
 800f318:	0800f2f9 	.word	0x0800f2f9
 800f31c:	0800f2f9 	.word	0x0800f2f9
 800f320:	0800f2f9 	.word	0x0800f2f9
 800f324:	0800f2f9 	.word	0x0800f2f9
 800f328:	0800f37d 	.word	0x0800f37d
 800f32c:	0800f2f9 	.word	0x0800f2f9
 800f330:	0800f2f9 	.word	0x0800f2f9
 800f334:	0800f2f9 	.word	0x0800f2f9
 800f338:	0800f2f9 	.word	0x0800f2f9
 800f33c:	0800f47b 	.word	0x0800f47b
 800f340:	0800f3a7 	.word	0x0800f3a7
 800f344:	0800f435 	.word	0x0800f435
 800f348:	0800f2f9 	.word	0x0800f2f9
 800f34c:	0800f2f9 	.word	0x0800f2f9
 800f350:	0800f49d 	.word	0x0800f49d
 800f354:	0800f2f9 	.word	0x0800f2f9
 800f358:	0800f3a7 	.word	0x0800f3a7
 800f35c:	0800f2f9 	.word	0x0800f2f9
 800f360:	0800f2f9 	.word	0x0800f2f9
 800f364:	0800f43d 	.word	0x0800f43d
 800f368:	6833      	ldr	r3, [r6, #0]
 800f36a:	1d1a      	adds	r2, r3, #4
 800f36c:	681b      	ldr	r3, [r3, #0]
 800f36e:	6032      	str	r2, [r6, #0]
 800f370:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800f374:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800f378:	2301      	movs	r3, #1
 800f37a:	e09c      	b.n	800f4b6 <_printf_i+0x1e6>
 800f37c:	6833      	ldr	r3, [r6, #0]
 800f37e:	6820      	ldr	r0, [r4, #0]
 800f380:	1d19      	adds	r1, r3, #4
 800f382:	6031      	str	r1, [r6, #0]
 800f384:	0606      	lsls	r6, r0, #24
 800f386:	d501      	bpl.n	800f38c <_printf_i+0xbc>
 800f388:	681d      	ldr	r5, [r3, #0]
 800f38a:	e003      	b.n	800f394 <_printf_i+0xc4>
 800f38c:	0645      	lsls	r5, r0, #25
 800f38e:	d5fb      	bpl.n	800f388 <_printf_i+0xb8>
 800f390:	f9b3 5000 	ldrsh.w	r5, [r3]
 800f394:	2d00      	cmp	r5, #0
 800f396:	da03      	bge.n	800f3a0 <_printf_i+0xd0>
 800f398:	232d      	movs	r3, #45	@ 0x2d
 800f39a:	426d      	negs	r5, r5
 800f39c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f3a0:	4858      	ldr	r0, [pc, #352]	@ (800f504 <_printf_i+0x234>)
 800f3a2:	230a      	movs	r3, #10
 800f3a4:	e011      	b.n	800f3ca <_printf_i+0xfa>
 800f3a6:	6821      	ldr	r1, [r4, #0]
 800f3a8:	6833      	ldr	r3, [r6, #0]
 800f3aa:	0608      	lsls	r0, r1, #24
 800f3ac:	f853 5b04 	ldr.w	r5, [r3], #4
 800f3b0:	d402      	bmi.n	800f3b8 <_printf_i+0xe8>
 800f3b2:	0649      	lsls	r1, r1, #25
 800f3b4:	bf48      	it	mi
 800f3b6:	b2ad      	uxthmi	r5, r5
 800f3b8:	2f6f      	cmp	r7, #111	@ 0x6f
 800f3ba:	4852      	ldr	r0, [pc, #328]	@ (800f504 <_printf_i+0x234>)
 800f3bc:	6033      	str	r3, [r6, #0]
 800f3be:	bf14      	ite	ne
 800f3c0:	230a      	movne	r3, #10
 800f3c2:	2308      	moveq	r3, #8
 800f3c4:	2100      	movs	r1, #0
 800f3c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800f3ca:	6866      	ldr	r6, [r4, #4]
 800f3cc:	60a6      	str	r6, [r4, #8]
 800f3ce:	2e00      	cmp	r6, #0
 800f3d0:	db05      	blt.n	800f3de <_printf_i+0x10e>
 800f3d2:	6821      	ldr	r1, [r4, #0]
 800f3d4:	432e      	orrs	r6, r5
 800f3d6:	f021 0104 	bic.w	r1, r1, #4
 800f3da:	6021      	str	r1, [r4, #0]
 800f3dc:	d04b      	beq.n	800f476 <_printf_i+0x1a6>
 800f3de:	4616      	mov	r6, r2
 800f3e0:	fbb5 f1f3 	udiv	r1, r5, r3
 800f3e4:	fb03 5711 	mls	r7, r3, r1, r5
 800f3e8:	5dc7      	ldrb	r7, [r0, r7]
 800f3ea:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f3ee:	462f      	mov	r7, r5
 800f3f0:	42bb      	cmp	r3, r7
 800f3f2:	460d      	mov	r5, r1
 800f3f4:	d9f4      	bls.n	800f3e0 <_printf_i+0x110>
 800f3f6:	2b08      	cmp	r3, #8
 800f3f8:	d10b      	bne.n	800f412 <_printf_i+0x142>
 800f3fa:	6823      	ldr	r3, [r4, #0]
 800f3fc:	07df      	lsls	r7, r3, #31
 800f3fe:	d508      	bpl.n	800f412 <_printf_i+0x142>
 800f400:	6923      	ldr	r3, [r4, #16]
 800f402:	6861      	ldr	r1, [r4, #4]
 800f404:	4299      	cmp	r1, r3
 800f406:	bfde      	ittt	le
 800f408:	2330      	movle	r3, #48	@ 0x30
 800f40a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f40e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f412:	1b92      	subs	r2, r2, r6
 800f414:	6122      	str	r2, [r4, #16]
 800f416:	f8cd a000 	str.w	sl, [sp]
 800f41a:	464b      	mov	r3, r9
 800f41c:	aa03      	add	r2, sp, #12
 800f41e:	4621      	mov	r1, r4
 800f420:	4640      	mov	r0, r8
 800f422:	f7ff fee7 	bl	800f1f4 <_printf_common>
 800f426:	3001      	adds	r0, #1
 800f428:	d14a      	bne.n	800f4c0 <_printf_i+0x1f0>
 800f42a:	f04f 30ff 	mov.w	r0, #4294967295
 800f42e:	b004      	add	sp, #16
 800f430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f434:	6823      	ldr	r3, [r4, #0]
 800f436:	f043 0320 	orr.w	r3, r3, #32
 800f43a:	6023      	str	r3, [r4, #0]
 800f43c:	4832      	ldr	r0, [pc, #200]	@ (800f508 <_printf_i+0x238>)
 800f43e:	2778      	movs	r7, #120	@ 0x78
 800f440:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800f444:	6823      	ldr	r3, [r4, #0]
 800f446:	6831      	ldr	r1, [r6, #0]
 800f448:	061f      	lsls	r7, r3, #24
 800f44a:	f851 5b04 	ldr.w	r5, [r1], #4
 800f44e:	d402      	bmi.n	800f456 <_printf_i+0x186>
 800f450:	065f      	lsls	r7, r3, #25
 800f452:	bf48      	it	mi
 800f454:	b2ad      	uxthmi	r5, r5
 800f456:	6031      	str	r1, [r6, #0]
 800f458:	07d9      	lsls	r1, r3, #31
 800f45a:	bf44      	itt	mi
 800f45c:	f043 0320 	orrmi.w	r3, r3, #32
 800f460:	6023      	strmi	r3, [r4, #0]
 800f462:	b11d      	cbz	r5, 800f46c <_printf_i+0x19c>
 800f464:	2310      	movs	r3, #16
 800f466:	e7ad      	b.n	800f3c4 <_printf_i+0xf4>
 800f468:	4826      	ldr	r0, [pc, #152]	@ (800f504 <_printf_i+0x234>)
 800f46a:	e7e9      	b.n	800f440 <_printf_i+0x170>
 800f46c:	6823      	ldr	r3, [r4, #0]
 800f46e:	f023 0320 	bic.w	r3, r3, #32
 800f472:	6023      	str	r3, [r4, #0]
 800f474:	e7f6      	b.n	800f464 <_printf_i+0x194>
 800f476:	4616      	mov	r6, r2
 800f478:	e7bd      	b.n	800f3f6 <_printf_i+0x126>
 800f47a:	6833      	ldr	r3, [r6, #0]
 800f47c:	6825      	ldr	r5, [r4, #0]
 800f47e:	6961      	ldr	r1, [r4, #20]
 800f480:	1d18      	adds	r0, r3, #4
 800f482:	6030      	str	r0, [r6, #0]
 800f484:	062e      	lsls	r6, r5, #24
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	d501      	bpl.n	800f48e <_printf_i+0x1be>
 800f48a:	6019      	str	r1, [r3, #0]
 800f48c:	e002      	b.n	800f494 <_printf_i+0x1c4>
 800f48e:	0668      	lsls	r0, r5, #25
 800f490:	d5fb      	bpl.n	800f48a <_printf_i+0x1ba>
 800f492:	8019      	strh	r1, [r3, #0]
 800f494:	2300      	movs	r3, #0
 800f496:	6123      	str	r3, [r4, #16]
 800f498:	4616      	mov	r6, r2
 800f49a:	e7bc      	b.n	800f416 <_printf_i+0x146>
 800f49c:	6833      	ldr	r3, [r6, #0]
 800f49e:	1d1a      	adds	r2, r3, #4
 800f4a0:	6032      	str	r2, [r6, #0]
 800f4a2:	681e      	ldr	r6, [r3, #0]
 800f4a4:	6862      	ldr	r2, [r4, #4]
 800f4a6:	2100      	movs	r1, #0
 800f4a8:	4630      	mov	r0, r6
 800f4aa:	f7f0 ff29 	bl	8000300 <memchr>
 800f4ae:	b108      	cbz	r0, 800f4b4 <_printf_i+0x1e4>
 800f4b0:	1b80      	subs	r0, r0, r6
 800f4b2:	6060      	str	r0, [r4, #4]
 800f4b4:	6863      	ldr	r3, [r4, #4]
 800f4b6:	6123      	str	r3, [r4, #16]
 800f4b8:	2300      	movs	r3, #0
 800f4ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800f4be:	e7aa      	b.n	800f416 <_printf_i+0x146>
 800f4c0:	6923      	ldr	r3, [r4, #16]
 800f4c2:	4632      	mov	r2, r6
 800f4c4:	4649      	mov	r1, r9
 800f4c6:	4640      	mov	r0, r8
 800f4c8:	47d0      	blx	sl
 800f4ca:	3001      	adds	r0, #1
 800f4cc:	d0ad      	beq.n	800f42a <_printf_i+0x15a>
 800f4ce:	6823      	ldr	r3, [r4, #0]
 800f4d0:	079b      	lsls	r3, r3, #30
 800f4d2:	d413      	bmi.n	800f4fc <_printf_i+0x22c>
 800f4d4:	68e0      	ldr	r0, [r4, #12]
 800f4d6:	9b03      	ldr	r3, [sp, #12]
 800f4d8:	4298      	cmp	r0, r3
 800f4da:	bfb8      	it	lt
 800f4dc:	4618      	movlt	r0, r3
 800f4de:	e7a6      	b.n	800f42e <_printf_i+0x15e>
 800f4e0:	2301      	movs	r3, #1
 800f4e2:	4632      	mov	r2, r6
 800f4e4:	4649      	mov	r1, r9
 800f4e6:	4640      	mov	r0, r8
 800f4e8:	47d0      	blx	sl
 800f4ea:	3001      	adds	r0, #1
 800f4ec:	d09d      	beq.n	800f42a <_printf_i+0x15a>
 800f4ee:	3501      	adds	r5, #1
 800f4f0:	68e3      	ldr	r3, [r4, #12]
 800f4f2:	9903      	ldr	r1, [sp, #12]
 800f4f4:	1a5b      	subs	r3, r3, r1
 800f4f6:	42ab      	cmp	r3, r5
 800f4f8:	dcf2      	bgt.n	800f4e0 <_printf_i+0x210>
 800f4fa:	e7eb      	b.n	800f4d4 <_printf_i+0x204>
 800f4fc:	2500      	movs	r5, #0
 800f4fe:	f104 0619 	add.w	r6, r4, #25
 800f502:	e7f5      	b.n	800f4f0 <_printf_i+0x220>
 800f504:	08013b02 	.word	0x08013b02
 800f508:	08013b13 	.word	0x08013b13

0800f50c <std>:
 800f50c:	2300      	movs	r3, #0
 800f50e:	b510      	push	{r4, lr}
 800f510:	4604      	mov	r4, r0
 800f512:	e9c0 3300 	strd	r3, r3, [r0]
 800f516:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f51a:	6083      	str	r3, [r0, #8]
 800f51c:	8181      	strh	r1, [r0, #12]
 800f51e:	6643      	str	r3, [r0, #100]	@ 0x64
 800f520:	81c2      	strh	r2, [r0, #14]
 800f522:	6183      	str	r3, [r0, #24]
 800f524:	4619      	mov	r1, r3
 800f526:	2208      	movs	r2, #8
 800f528:	305c      	adds	r0, #92	@ 0x5c
 800f52a:	f000 f9f9 	bl	800f920 <memset>
 800f52e:	4b0d      	ldr	r3, [pc, #52]	@ (800f564 <std+0x58>)
 800f530:	6263      	str	r3, [r4, #36]	@ 0x24
 800f532:	4b0d      	ldr	r3, [pc, #52]	@ (800f568 <std+0x5c>)
 800f534:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f536:	4b0d      	ldr	r3, [pc, #52]	@ (800f56c <std+0x60>)
 800f538:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f53a:	4b0d      	ldr	r3, [pc, #52]	@ (800f570 <std+0x64>)
 800f53c:	6323      	str	r3, [r4, #48]	@ 0x30
 800f53e:	4b0d      	ldr	r3, [pc, #52]	@ (800f574 <std+0x68>)
 800f540:	6224      	str	r4, [r4, #32]
 800f542:	429c      	cmp	r4, r3
 800f544:	d006      	beq.n	800f554 <std+0x48>
 800f546:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f54a:	4294      	cmp	r4, r2
 800f54c:	d002      	beq.n	800f554 <std+0x48>
 800f54e:	33d0      	adds	r3, #208	@ 0xd0
 800f550:	429c      	cmp	r4, r3
 800f552:	d105      	bne.n	800f560 <std+0x54>
 800f554:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f55c:	f000 baa8 	b.w	800fab0 <__retarget_lock_init_recursive>
 800f560:	bd10      	pop	{r4, pc}
 800f562:	bf00      	nop
 800f564:	0800f771 	.word	0x0800f771
 800f568:	0800f793 	.word	0x0800f793
 800f56c:	0800f7cb 	.word	0x0800f7cb
 800f570:	0800f7ef 	.word	0x0800f7ef
 800f574:	240008e8 	.word	0x240008e8

0800f578 <stdio_exit_handler>:
 800f578:	4a02      	ldr	r2, [pc, #8]	@ (800f584 <stdio_exit_handler+0xc>)
 800f57a:	4903      	ldr	r1, [pc, #12]	@ (800f588 <stdio_exit_handler+0x10>)
 800f57c:	4803      	ldr	r0, [pc, #12]	@ (800f58c <stdio_exit_handler+0x14>)
 800f57e:	f000 b869 	b.w	800f654 <_fwalk_sglue>
 800f582:	bf00      	nop
 800f584:	24000030 	.word	0x24000030
 800f588:	080111c9 	.word	0x080111c9
 800f58c:	24000040 	.word	0x24000040

0800f590 <cleanup_stdio>:
 800f590:	6841      	ldr	r1, [r0, #4]
 800f592:	4b0c      	ldr	r3, [pc, #48]	@ (800f5c4 <cleanup_stdio+0x34>)
 800f594:	4299      	cmp	r1, r3
 800f596:	b510      	push	{r4, lr}
 800f598:	4604      	mov	r4, r0
 800f59a:	d001      	beq.n	800f5a0 <cleanup_stdio+0x10>
 800f59c:	f001 fe14 	bl	80111c8 <_fflush_r>
 800f5a0:	68a1      	ldr	r1, [r4, #8]
 800f5a2:	4b09      	ldr	r3, [pc, #36]	@ (800f5c8 <cleanup_stdio+0x38>)
 800f5a4:	4299      	cmp	r1, r3
 800f5a6:	d002      	beq.n	800f5ae <cleanup_stdio+0x1e>
 800f5a8:	4620      	mov	r0, r4
 800f5aa:	f001 fe0d 	bl	80111c8 <_fflush_r>
 800f5ae:	68e1      	ldr	r1, [r4, #12]
 800f5b0:	4b06      	ldr	r3, [pc, #24]	@ (800f5cc <cleanup_stdio+0x3c>)
 800f5b2:	4299      	cmp	r1, r3
 800f5b4:	d004      	beq.n	800f5c0 <cleanup_stdio+0x30>
 800f5b6:	4620      	mov	r0, r4
 800f5b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5bc:	f001 be04 	b.w	80111c8 <_fflush_r>
 800f5c0:	bd10      	pop	{r4, pc}
 800f5c2:	bf00      	nop
 800f5c4:	240008e8 	.word	0x240008e8
 800f5c8:	24000950 	.word	0x24000950
 800f5cc:	240009b8 	.word	0x240009b8

0800f5d0 <global_stdio_init.part.0>:
 800f5d0:	b510      	push	{r4, lr}
 800f5d2:	4b0b      	ldr	r3, [pc, #44]	@ (800f600 <global_stdio_init.part.0+0x30>)
 800f5d4:	4c0b      	ldr	r4, [pc, #44]	@ (800f604 <global_stdio_init.part.0+0x34>)
 800f5d6:	4a0c      	ldr	r2, [pc, #48]	@ (800f608 <global_stdio_init.part.0+0x38>)
 800f5d8:	601a      	str	r2, [r3, #0]
 800f5da:	4620      	mov	r0, r4
 800f5dc:	2200      	movs	r2, #0
 800f5de:	2104      	movs	r1, #4
 800f5e0:	f7ff ff94 	bl	800f50c <std>
 800f5e4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f5e8:	2201      	movs	r2, #1
 800f5ea:	2109      	movs	r1, #9
 800f5ec:	f7ff ff8e 	bl	800f50c <std>
 800f5f0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f5f4:	2202      	movs	r2, #2
 800f5f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5fa:	2112      	movs	r1, #18
 800f5fc:	f7ff bf86 	b.w	800f50c <std>
 800f600:	24000a20 	.word	0x24000a20
 800f604:	240008e8 	.word	0x240008e8
 800f608:	0800f579 	.word	0x0800f579

0800f60c <__sfp_lock_acquire>:
 800f60c:	4801      	ldr	r0, [pc, #4]	@ (800f614 <__sfp_lock_acquire+0x8>)
 800f60e:	f000 ba50 	b.w	800fab2 <__retarget_lock_acquire_recursive>
 800f612:	bf00      	nop
 800f614:	24000a29 	.word	0x24000a29

0800f618 <__sfp_lock_release>:
 800f618:	4801      	ldr	r0, [pc, #4]	@ (800f620 <__sfp_lock_release+0x8>)
 800f61a:	f000 ba4b 	b.w	800fab4 <__retarget_lock_release_recursive>
 800f61e:	bf00      	nop
 800f620:	24000a29 	.word	0x24000a29

0800f624 <__sinit>:
 800f624:	b510      	push	{r4, lr}
 800f626:	4604      	mov	r4, r0
 800f628:	f7ff fff0 	bl	800f60c <__sfp_lock_acquire>
 800f62c:	6a23      	ldr	r3, [r4, #32]
 800f62e:	b11b      	cbz	r3, 800f638 <__sinit+0x14>
 800f630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f634:	f7ff bff0 	b.w	800f618 <__sfp_lock_release>
 800f638:	4b04      	ldr	r3, [pc, #16]	@ (800f64c <__sinit+0x28>)
 800f63a:	6223      	str	r3, [r4, #32]
 800f63c:	4b04      	ldr	r3, [pc, #16]	@ (800f650 <__sinit+0x2c>)
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	2b00      	cmp	r3, #0
 800f642:	d1f5      	bne.n	800f630 <__sinit+0xc>
 800f644:	f7ff ffc4 	bl	800f5d0 <global_stdio_init.part.0>
 800f648:	e7f2      	b.n	800f630 <__sinit+0xc>
 800f64a:	bf00      	nop
 800f64c:	0800f591 	.word	0x0800f591
 800f650:	24000a20 	.word	0x24000a20

0800f654 <_fwalk_sglue>:
 800f654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f658:	4607      	mov	r7, r0
 800f65a:	4688      	mov	r8, r1
 800f65c:	4614      	mov	r4, r2
 800f65e:	2600      	movs	r6, #0
 800f660:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f664:	f1b9 0901 	subs.w	r9, r9, #1
 800f668:	d505      	bpl.n	800f676 <_fwalk_sglue+0x22>
 800f66a:	6824      	ldr	r4, [r4, #0]
 800f66c:	2c00      	cmp	r4, #0
 800f66e:	d1f7      	bne.n	800f660 <_fwalk_sglue+0xc>
 800f670:	4630      	mov	r0, r6
 800f672:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f676:	89ab      	ldrh	r3, [r5, #12]
 800f678:	2b01      	cmp	r3, #1
 800f67a:	d907      	bls.n	800f68c <_fwalk_sglue+0x38>
 800f67c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f680:	3301      	adds	r3, #1
 800f682:	d003      	beq.n	800f68c <_fwalk_sglue+0x38>
 800f684:	4629      	mov	r1, r5
 800f686:	4638      	mov	r0, r7
 800f688:	47c0      	blx	r8
 800f68a:	4306      	orrs	r6, r0
 800f68c:	3568      	adds	r5, #104	@ 0x68
 800f68e:	e7e9      	b.n	800f664 <_fwalk_sglue+0x10>

0800f690 <iprintf>:
 800f690:	b40f      	push	{r0, r1, r2, r3}
 800f692:	b507      	push	{r0, r1, r2, lr}
 800f694:	4906      	ldr	r1, [pc, #24]	@ (800f6b0 <iprintf+0x20>)
 800f696:	ab04      	add	r3, sp, #16
 800f698:	6808      	ldr	r0, [r1, #0]
 800f69a:	f853 2b04 	ldr.w	r2, [r3], #4
 800f69e:	6881      	ldr	r1, [r0, #8]
 800f6a0:	9301      	str	r3, [sp, #4]
 800f6a2:	f001 fbf5 	bl	8010e90 <_vfiprintf_r>
 800f6a6:	b003      	add	sp, #12
 800f6a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f6ac:	b004      	add	sp, #16
 800f6ae:	4770      	bx	lr
 800f6b0:	2400003c 	.word	0x2400003c

0800f6b4 <_puts_r>:
 800f6b4:	6a03      	ldr	r3, [r0, #32]
 800f6b6:	b570      	push	{r4, r5, r6, lr}
 800f6b8:	6884      	ldr	r4, [r0, #8]
 800f6ba:	4605      	mov	r5, r0
 800f6bc:	460e      	mov	r6, r1
 800f6be:	b90b      	cbnz	r3, 800f6c4 <_puts_r+0x10>
 800f6c0:	f7ff ffb0 	bl	800f624 <__sinit>
 800f6c4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f6c6:	07db      	lsls	r3, r3, #31
 800f6c8:	d405      	bmi.n	800f6d6 <_puts_r+0x22>
 800f6ca:	89a3      	ldrh	r3, [r4, #12]
 800f6cc:	0598      	lsls	r0, r3, #22
 800f6ce:	d402      	bmi.n	800f6d6 <_puts_r+0x22>
 800f6d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6d2:	f000 f9ee 	bl	800fab2 <__retarget_lock_acquire_recursive>
 800f6d6:	89a3      	ldrh	r3, [r4, #12]
 800f6d8:	0719      	lsls	r1, r3, #28
 800f6da:	d502      	bpl.n	800f6e2 <_puts_r+0x2e>
 800f6dc:	6923      	ldr	r3, [r4, #16]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d135      	bne.n	800f74e <_puts_r+0x9a>
 800f6e2:	4621      	mov	r1, r4
 800f6e4:	4628      	mov	r0, r5
 800f6e6:	f000 f8c5 	bl	800f874 <__swsetup_r>
 800f6ea:	b380      	cbz	r0, 800f74e <_puts_r+0x9a>
 800f6ec:	f04f 35ff 	mov.w	r5, #4294967295
 800f6f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f6f2:	07da      	lsls	r2, r3, #31
 800f6f4:	d405      	bmi.n	800f702 <_puts_r+0x4e>
 800f6f6:	89a3      	ldrh	r3, [r4, #12]
 800f6f8:	059b      	lsls	r3, r3, #22
 800f6fa:	d402      	bmi.n	800f702 <_puts_r+0x4e>
 800f6fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f6fe:	f000 f9d9 	bl	800fab4 <__retarget_lock_release_recursive>
 800f702:	4628      	mov	r0, r5
 800f704:	bd70      	pop	{r4, r5, r6, pc}
 800f706:	2b00      	cmp	r3, #0
 800f708:	da04      	bge.n	800f714 <_puts_r+0x60>
 800f70a:	69a2      	ldr	r2, [r4, #24]
 800f70c:	429a      	cmp	r2, r3
 800f70e:	dc17      	bgt.n	800f740 <_puts_r+0x8c>
 800f710:	290a      	cmp	r1, #10
 800f712:	d015      	beq.n	800f740 <_puts_r+0x8c>
 800f714:	6823      	ldr	r3, [r4, #0]
 800f716:	1c5a      	adds	r2, r3, #1
 800f718:	6022      	str	r2, [r4, #0]
 800f71a:	7019      	strb	r1, [r3, #0]
 800f71c:	68a3      	ldr	r3, [r4, #8]
 800f71e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f722:	3b01      	subs	r3, #1
 800f724:	60a3      	str	r3, [r4, #8]
 800f726:	2900      	cmp	r1, #0
 800f728:	d1ed      	bne.n	800f706 <_puts_r+0x52>
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	da11      	bge.n	800f752 <_puts_r+0x9e>
 800f72e:	4622      	mov	r2, r4
 800f730:	210a      	movs	r1, #10
 800f732:	4628      	mov	r0, r5
 800f734:	f000 f85f 	bl	800f7f6 <__swbuf_r>
 800f738:	3001      	adds	r0, #1
 800f73a:	d0d7      	beq.n	800f6ec <_puts_r+0x38>
 800f73c:	250a      	movs	r5, #10
 800f73e:	e7d7      	b.n	800f6f0 <_puts_r+0x3c>
 800f740:	4622      	mov	r2, r4
 800f742:	4628      	mov	r0, r5
 800f744:	f000 f857 	bl	800f7f6 <__swbuf_r>
 800f748:	3001      	adds	r0, #1
 800f74a:	d1e7      	bne.n	800f71c <_puts_r+0x68>
 800f74c:	e7ce      	b.n	800f6ec <_puts_r+0x38>
 800f74e:	3e01      	subs	r6, #1
 800f750:	e7e4      	b.n	800f71c <_puts_r+0x68>
 800f752:	6823      	ldr	r3, [r4, #0]
 800f754:	1c5a      	adds	r2, r3, #1
 800f756:	6022      	str	r2, [r4, #0]
 800f758:	220a      	movs	r2, #10
 800f75a:	701a      	strb	r2, [r3, #0]
 800f75c:	e7ee      	b.n	800f73c <_puts_r+0x88>
	...

0800f760 <puts>:
 800f760:	4b02      	ldr	r3, [pc, #8]	@ (800f76c <puts+0xc>)
 800f762:	4601      	mov	r1, r0
 800f764:	6818      	ldr	r0, [r3, #0]
 800f766:	f7ff bfa5 	b.w	800f6b4 <_puts_r>
 800f76a:	bf00      	nop
 800f76c:	2400003c 	.word	0x2400003c

0800f770 <__sread>:
 800f770:	b510      	push	{r4, lr}
 800f772:	460c      	mov	r4, r1
 800f774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f778:	f000 f93c 	bl	800f9f4 <_read_r>
 800f77c:	2800      	cmp	r0, #0
 800f77e:	bfab      	itete	ge
 800f780:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f782:	89a3      	ldrhlt	r3, [r4, #12]
 800f784:	181b      	addge	r3, r3, r0
 800f786:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f78a:	bfac      	ite	ge
 800f78c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f78e:	81a3      	strhlt	r3, [r4, #12]
 800f790:	bd10      	pop	{r4, pc}

0800f792 <__swrite>:
 800f792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f796:	461f      	mov	r7, r3
 800f798:	898b      	ldrh	r3, [r1, #12]
 800f79a:	05db      	lsls	r3, r3, #23
 800f79c:	4605      	mov	r5, r0
 800f79e:	460c      	mov	r4, r1
 800f7a0:	4616      	mov	r6, r2
 800f7a2:	d505      	bpl.n	800f7b0 <__swrite+0x1e>
 800f7a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7a8:	2302      	movs	r3, #2
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	f000 f910 	bl	800f9d0 <_lseek_r>
 800f7b0:	89a3      	ldrh	r3, [r4, #12]
 800f7b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f7ba:	81a3      	strh	r3, [r4, #12]
 800f7bc:	4632      	mov	r2, r6
 800f7be:	463b      	mov	r3, r7
 800f7c0:	4628      	mov	r0, r5
 800f7c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f7c6:	f000 b937 	b.w	800fa38 <_write_r>

0800f7ca <__sseek>:
 800f7ca:	b510      	push	{r4, lr}
 800f7cc:	460c      	mov	r4, r1
 800f7ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7d2:	f000 f8fd 	bl	800f9d0 <_lseek_r>
 800f7d6:	1c43      	adds	r3, r0, #1
 800f7d8:	89a3      	ldrh	r3, [r4, #12]
 800f7da:	bf15      	itete	ne
 800f7dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f7de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f7e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f7e6:	81a3      	strheq	r3, [r4, #12]
 800f7e8:	bf18      	it	ne
 800f7ea:	81a3      	strhne	r3, [r4, #12]
 800f7ec:	bd10      	pop	{r4, pc}

0800f7ee <__sclose>:
 800f7ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f7f2:	f000 b8dd 	b.w	800f9b0 <_close_r>

0800f7f6 <__swbuf_r>:
 800f7f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7f8:	460e      	mov	r6, r1
 800f7fa:	4614      	mov	r4, r2
 800f7fc:	4605      	mov	r5, r0
 800f7fe:	b118      	cbz	r0, 800f808 <__swbuf_r+0x12>
 800f800:	6a03      	ldr	r3, [r0, #32]
 800f802:	b90b      	cbnz	r3, 800f808 <__swbuf_r+0x12>
 800f804:	f7ff ff0e 	bl	800f624 <__sinit>
 800f808:	69a3      	ldr	r3, [r4, #24]
 800f80a:	60a3      	str	r3, [r4, #8]
 800f80c:	89a3      	ldrh	r3, [r4, #12]
 800f80e:	071a      	lsls	r2, r3, #28
 800f810:	d501      	bpl.n	800f816 <__swbuf_r+0x20>
 800f812:	6923      	ldr	r3, [r4, #16]
 800f814:	b943      	cbnz	r3, 800f828 <__swbuf_r+0x32>
 800f816:	4621      	mov	r1, r4
 800f818:	4628      	mov	r0, r5
 800f81a:	f000 f82b 	bl	800f874 <__swsetup_r>
 800f81e:	b118      	cbz	r0, 800f828 <__swbuf_r+0x32>
 800f820:	f04f 37ff 	mov.w	r7, #4294967295
 800f824:	4638      	mov	r0, r7
 800f826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f828:	6823      	ldr	r3, [r4, #0]
 800f82a:	6922      	ldr	r2, [r4, #16]
 800f82c:	1a98      	subs	r0, r3, r2
 800f82e:	6963      	ldr	r3, [r4, #20]
 800f830:	b2f6      	uxtb	r6, r6
 800f832:	4283      	cmp	r3, r0
 800f834:	4637      	mov	r7, r6
 800f836:	dc05      	bgt.n	800f844 <__swbuf_r+0x4e>
 800f838:	4621      	mov	r1, r4
 800f83a:	4628      	mov	r0, r5
 800f83c:	f001 fcc4 	bl	80111c8 <_fflush_r>
 800f840:	2800      	cmp	r0, #0
 800f842:	d1ed      	bne.n	800f820 <__swbuf_r+0x2a>
 800f844:	68a3      	ldr	r3, [r4, #8]
 800f846:	3b01      	subs	r3, #1
 800f848:	60a3      	str	r3, [r4, #8]
 800f84a:	6823      	ldr	r3, [r4, #0]
 800f84c:	1c5a      	adds	r2, r3, #1
 800f84e:	6022      	str	r2, [r4, #0]
 800f850:	701e      	strb	r6, [r3, #0]
 800f852:	6962      	ldr	r2, [r4, #20]
 800f854:	1c43      	adds	r3, r0, #1
 800f856:	429a      	cmp	r2, r3
 800f858:	d004      	beq.n	800f864 <__swbuf_r+0x6e>
 800f85a:	89a3      	ldrh	r3, [r4, #12]
 800f85c:	07db      	lsls	r3, r3, #31
 800f85e:	d5e1      	bpl.n	800f824 <__swbuf_r+0x2e>
 800f860:	2e0a      	cmp	r6, #10
 800f862:	d1df      	bne.n	800f824 <__swbuf_r+0x2e>
 800f864:	4621      	mov	r1, r4
 800f866:	4628      	mov	r0, r5
 800f868:	f001 fcae 	bl	80111c8 <_fflush_r>
 800f86c:	2800      	cmp	r0, #0
 800f86e:	d0d9      	beq.n	800f824 <__swbuf_r+0x2e>
 800f870:	e7d6      	b.n	800f820 <__swbuf_r+0x2a>
	...

0800f874 <__swsetup_r>:
 800f874:	b538      	push	{r3, r4, r5, lr}
 800f876:	4b29      	ldr	r3, [pc, #164]	@ (800f91c <__swsetup_r+0xa8>)
 800f878:	4605      	mov	r5, r0
 800f87a:	6818      	ldr	r0, [r3, #0]
 800f87c:	460c      	mov	r4, r1
 800f87e:	b118      	cbz	r0, 800f888 <__swsetup_r+0x14>
 800f880:	6a03      	ldr	r3, [r0, #32]
 800f882:	b90b      	cbnz	r3, 800f888 <__swsetup_r+0x14>
 800f884:	f7ff fece 	bl	800f624 <__sinit>
 800f888:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f88c:	0719      	lsls	r1, r3, #28
 800f88e:	d422      	bmi.n	800f8d6 <__swsetup_r+0x62>
 800f890:	06da      	lsls	r2, r3, #27
 800f892:	d407      	bmi.n	800f8a4 <__swsetup_r+0x30>
 800f894:	2209      	movs	r2, #9
 800f896:	602a      	str	r2, [r5, #0]
 800f898:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f89c:	81a3      	strh	r3, [r4, #12]
 800f89e:	f04f 30ff 	mov.w	r0, #4294967295
 800f8a2:	e033      	b.n	800f90c <__swsetup_r+0x98>
 800f8a4:	0758      	lsls	r0, r3, #29
 800f8a6:	d512      	bpl.n	800f8ce <__swsetup_r+0x5a>
 800f8a8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f8aa:	b141      	cbz	r1, 800f8be <__swsetup_r+0x4a>
 800f8ac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f8b0:	4299      	cmp	r1, r3
 800f8b2:	d002      	beq.n	800f8ba <__swsetup_r+0x46>
 800f8b4:	4628      	mov	r0, r5
 800f8b6:	f000 fefd 	bl	80106b4 <_free_r>
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	6363      	str	r3, [r4, #52]	@ 0x34
 800f8be:	89a3      	ldrh	r3, [r4, #12]
 800f8c0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f8c4:	81a3      	strh	r3, [r4, #12]
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	6063      	str	r3, [r4, #4]
 800f8ca:	6923      	ldr	r3, [r4, #16]
 800f8cc:	6023      	str	r3, [r4, #0]
 800f8ce:	89a3      	ldrh	r3, [r4, #12]
 800f8d0:	f043 0308 	orr.w	r3, r3, #8
 800f8d4:	81a3      	strh	r3, [r4, #12]
 800f8d6:	6923      	ldr	r3, [r4, #16]
 800f8d8:	b94b      	cbnz	r3, 800f8ee <__swsetup_r+0x7a>
 800f8da:	89a3      	ldrh	r3, [r4, #12]
 800f8dc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f8e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f8e4:	d003      	beq.n	800f8ee <__swsetup_r+0x7a>
 800f8e6:	4621      	mov	r1, r4
 800f8e8:	4628      	mov	r0, r5
 800f8ea:	f001 fcbb 	bl	8011264 <__smakebuf_r>
 800f8ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8f2:	f013 0201 	ands.w	r2, r3, #1
 800f8f6:	d00a      	beq.n	800f90e <__swsetup_r+0x9a>
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	60a2      	str	r2, [r4, #8]
 800f8fc:	6962      	ldr	r2, [r4, #20]
 800f8fe:	4252      	negs	r2, r2
 800f900:	61a2      	str	r2, [r4, #24]
 800f902:	6922      	ldr	r2, [r4, #16]
 800f904:	b942      	cbnz	r2, 800f918 <__swsetup_r+0xa4>
 800f906:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f90a:	d1c5      	bne.n	800f898 <__swsetup_r+0x24>
 800f90c:	bd38      	pop	{r3, r4, r5, pc}
 800f90e:	0799      	lsls	r1, r3, #30
 800f910:	bf58      	it	pl
 800f912:	6962      	ldrpl	r2, [r4, #20]
 800f914:	60a2      	str	r2, [r4, #8]
 800f916:	e7f4      	b.n	800f902 <__swsetup_r+0x8e>
 800f918:	2000      	movs	r0, #0
 800f91a:	e7f7      	b.n	800f90c <__swsetup_r+0x98>
 800f91c:	2400003c 	.word	0x2400003c

0800f920 <memset>:
 800f920:	4402      	add	r2, r0
 800f922:	4603      	mov	r3, r0
 800f924:	4293      	cmp	r3, r2
 800f926:	d100      	bne.n	800f92a <memset+0xa>
 800f928:	4770      	bx	lr
 800f92a:	f803 1b01 	strb.w	r1, [r3], #1
 800f92e:	e7f9      	b.n	800f924 <memset+0x4>

0800f930 <strncat>:
 800f930:	b530      	push	{r4, r5, lr}
 800f932:	4604      	mov	r4, r0
 800f934:	7825      	ldrb	r5, [r4, #0]
 800f936:	4623      	mov	r3, r4
 800f938:	3401      	adds	r4, #1
 800f93a:	2d00      	cmp	r5, #0
 800f93c:	d1fa      	bne.n	800f934 <strncat+0x4>
 800f93e:	3a01      	subs	r2, #1
 800f940:	d304      	bcc.n	800f94c <strncat+0x1c>
 800f942:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f946:	f803 4b01 	strb.w	r4, [r3], #1
 800f94a:	b904      	cbnz	r4, 800f94e <strncat+0x1e>
 800f94c:	bd30      	pop	{r4, r5, pc}
 800f94e:	2a00      	cmp	r2, #0
 800f950:	d1f5      	bne.n	800f93e <strncat+0xe>
 800f952:	701a      	strb	r2, [r3, #0]
 800f954:	e7f3      	b.n	800f93e <strncat+0xe>

0800f956 <strncpy>:
 800f956:	b510      	push	{r4, lr}
 800f958:	3901      	subs	r1, #1
 800f95a:	4603      	mov	r3, r0
 800f95c:	b132      	cbz	r2, 800f96c <strncpy+0x16>
 800f95e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f962:	f803 4b01 	strb.w	r4, [r3], #1
 800f966:	3a01      	subs	r2, #1
 800f968:	2c00      	cmp	r4, #0
 800f96a:	d1f7      	bne.n	800f95c <strncpy+0x6>
 800f96c:	441a      	add	r2, r3
 800f96e:	2100      	movs	r1, #0
 800f970:	4293      	cmp	r3, r2
 800f972:	d100      	bne.n	800f976 <strncpy+0x20>
 800f974:	bd10      	pop	{r4, pc}
 800f976:	f803 1b01 	strb.w	r1, [r3], #1
 800f97a:	e7f9      	b.n	800f970 <strncpy+0x1a>

0800f97c <strstr>:
 800f97c:	780a      	ldrb	r2, [r1, #0]
 800f97e:	b570      	push	{r4, r5, r6, lr}
 800f980:	b96a      	cbnz	r2, 800f99e <strstr+0x22>
 800f982:	bd70      	pop	{r4, r5, r6, pc}
 800f984:	429a      	cmp	r2, r3
 800f986:	d109      	bne.n	800f99c <strstr+0x20>
 800f988:	460c      	mov	r4, r1
 800f98a:	4605      	mov	r5, r0
 800f98c:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800f990:	2b00      	cmp	r3, #0
 800f992:	d0f6      	beq.n	800f982 <strstr+0x6>
 800f994:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800f998:	429e      	cmp	r6, r3
 800f99a:	d0f7      	beq.n	800f98c <strstr+0x10>
 800f99c:	3001      	adds	r0, #1
 800f99e:	7803      	ldrb	r3, [r0, #0]
 800f9a0:	2b00      	cmp	r3, #0
 800f9a2:	d1ef      	bne.n	800f984 <strstr+0x8>
 800f9a4:	4618      	mov	r0, r3
 800f9a6:	e7ec      	b.n	800f982 <strstr+0x6>

0800f9a8 <_localeconv_r>:
 800f9a8:	4800      	ldr	r0, [pc, #0]	@ (800f9ac <_localeconv_r+0x4>)
 800f9aa:	4770      	bx	lr
 800f9ac:	2400017c 	.word	0x2400017c

0800f9b0 <_close_r>:
 800f9b0:	b538      	push	{r3, r4, r5, lr}
 800f9b2:	4d06      	ldr	r5, [pc, #24]	@ (800f9cc <_close_r+0x1c>)
 800f9b4:	2300      	movs	r3, #0
 800f9b6:	4604      	mov	r4, r0
 800f9b8:	4608      	mov	r0, r1
 800f9ba:	602b      	str	r3, [r5, #0]
 800f9bc:	f7f2 fd9a 	bl	80024f4 <_close>
 800f9c0:	1c43      	adds	r3, r0, #1
 800f9c2:	d102      	bne.n	800f9ca <_close_r+0x1a>
 800f9c4:	682b      	ldr	r3, [r5, #0]
 800f9c6:	b103      	cbz	r3, 800f9ca <_close_r+0x1a>
 800f9c8:	6023      	str	r3, [r4, #0]
 800f9ca:	bd38      	pop	{r3, r4, r5, pc}
 800f9cc:	24000a24 	.word	0x24000a24

0800f9d0 <_lseek_r>:
 800f9d0:	b538      	push	{r3, r4, r5, lr}
 800f9d2:	4d07      	ldr	r5, [pc, #28]	@ (800f9f0 <_lseek_r+0x20>)
 800f9d4:	4604      	mov	r4, r0
 800f9d6:	4608      	mov	r0, r1
 800f9d8:	4611      	mov	r1, r2
 800f9da:	2200      	movs	r2, #0
 800f9dc:	602a      	str	r2, [r5, #0]
 800f9de:	461a      	mov	r2, r3
 800f9e0:	f7f2 fdaf 	bl	8002542 <_lseek>
 800f9e4:	1c43      	adds	r3, r0, #1
 800f9e6:	d102      	bne.n	800f9ee <_lseek_r+0x1e>
 800f9e8:	682b      	ldr	r3, [r5, #0]
 800f9ea:	b103      	cbz	r3, 800f9ee <_lseek_r+0x1e>
 800f9ec:	6023      	str	r3, [r4, #0]
 800f9ee:	bd38      	pop	{r3, r4, r5, pc}
 800f9f0:	24000a24 	.word	0x24000a24

0800f9f4 <_read_r>:
 800f9f4:	b538      	push	{r3, r4, r5, lr}
 800f9f6:	4d07      	ldr	r5, [pc, #28]	@ (800fa14 <_read_r+0x20>)
 800f9f8:	4604      	mov	r4, r0
 800f9fa:	4608      	mov	r0, r1
 800f9fc:	4611      	mov	r1, r2
 800f9fe:	2200      	movs	r2, #0
 800fa00:	602a      	str	r2, [r5, #0]
 800fa02:	461a      	mov	r2, r3
 800fa04:	f7f2 fd59 	bl	80024ba <_read>
 800fa08:	1c43      	adds	r3, r0, #1
 800fa0a:	d102      	bne.n	800fa12 <_read_r+0x1e>
 800fa0c:	682b      	ldr	r3, [r5, #0]
 800fa0e:	b103      	cbz	r3, 800fa12 <_read_r+0x1e>
 800fa10:	6023      	str	r3, [r4, #0]
 800fa12:	bd38      	pop	{r3, r4, r5, pc}
 800fa14:	24000a24 	.word	0x24000a24

0800fa18 <_sbrk_r>:
 800fa18:	b538      	push	{r3, r4, r5, lr}
 800fa1a:	4d06      	ldr	r5, [pc, #24]	@ (800fa34 <_sbrk_r+0x1c>)
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	4604      	mov	r4, r0
 800fa20:	4608      	mov	r0, r1
 800fa22:	602b      	str	r3, [r5, #0]
 800fa24:	f7f2 fd9a 	bl	800255c <_sbrk>
 800fa28:	1c43      	adds	r3, r0, #1
 800fa2a:	d102      	bne.n	800fa32 <_sbrk_r+0x1a>
 800fa2c:	682b      	ldr	r3, [r5, #0]
 800fa2e:	b103      	cbz	r3, 800fa32 <_sbrk_r+0x1a>
 800fa30:	6023      	str	r3, [r4, #0]
 800fa32:	bd38      	pop	{r3, r4, r5, pc}
 800fa34:	24000a24 	.word	0x24000a24

0800fa38 <_write_r>:
 800fa38:	b538      	push	{r3, r4, r5, lr}
 800fa3a:	4d07      	ldr	r5, [pc, #28]	@ (800fa58 <_write_r+0x20>)
 800fa3c:	4604      	mov	r4, r0
 800fa3e:	4608      	mov	r0, r1
 800fa40:	4611      	mov	r1, r2
 800fa42:	2200      	movs	r2, #0
 800fa44:	602a      	str	r2, [r5, #0]
 800fa46:	461a      	mov	r2, r3
 800fa48:	f7f2 f9de 	bl	8001e08 <_write>
 800fa4c:	1c43      	adds	r3, r0, #1
 800fa4e:	d102      	bne.n	800fa56 <_write_r+0x1e>
 800fa50:	682b      	ldr	r3, [r5, #0]
 800fa52:	b103      	cbz	r3, 800fa56 <_write_r+0x1e>
 800fa54:	6023      	str	r3, [r4, #0]
 800fa56:	bd38      	pop	{r3, r4, r5, pc}
 800fa58:	24000a24 	.word	0x24000a24

0800fa5c <__errno>:
 800fa5c:	4b01      	ldr	r3, [pc, #4]	@ (800fa64 <__errno+0x8>)
 800fa5e:	6818      	ldr	r0, [r3, #0]
 800fa60:	4770      	bx	lr
 800fa62:	bf00      	nop
 800fa64:	2400003c 	.word	0x2400003c

0800fa68 <__libc_init_array>:
 800fa68:	b570      	push	{r4, r5, r6, lr}
 800fa6a:	4d0d      	ldr	r5, [pc, #52]	@ (800faa0 <__libc_init_array+0x38>)
 800fa6c:	4c0d      	ldr	r4, [pc, #52]	@ (800faa4 <__libc_init_array+0x3c>)
 800fa6e:	1b64      	subs	r4, r4, r5
 800fa70:	10a4      	asrs	r4, r4, #2
 800fa72:	2600      	movs	r6, #0
 800fa74:	42a6      	cmp	r6, r4
 800fa76:	d109      	bne.n	800fa8c <__libc_init_array+0x24>
 800fa78:	4d0b      	ldr	r5, [pc, #44]	@ (800faa8 <__libc_init_array+0x40>)
 800fa7a:	4c0c      	ldr	r4, [pc, #48]	@ (800faac <__libc_init_array+0x44>)
 800fa7c:	f001 fd00 	bl	8011480 <_init>
 800fa80:	1b64      	subs	r4, r4, r5
 800fa82:	10a4      	asrs	r4, r4, #2
 800fa84:	2600      	movs	r6, #0
 800fa86:	42a6      	cmp	r6, r4
 800fa88:	d105      	bne.n	800fa96 <__libc_init_array+0x2e>
 800fa8a:	bd70      	pop	{r4, r5, r6, pc}
 800fa8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa90:	4798      	blx	r3
 800fa92:	3601      	adds	r6, #1
 800fa94:	e7ee      	b.n	800fa74 <__libc_init_array+0xc>
 800fa96:	f855 3b04 	ldr.w	r3, [r5], #4
 800fa9a:	4798      	blx	r3
 800fa9c:	3601      	adds	r6, #1
 800fa9e:	e7f2      	b.n	800fa86 <__libc_init_array+0x1e>
 800faa0:	08013e6c 	.word	0x08013e6c
 800faa4:	08013e6c 	.word	0x08013e6c
 800faa8:	08013e6c 	.word	0x08013e6c
 800faac:	08013e70 	.word	0x08013e70

0800fab0 <__retarget_lock_init_recursive>:
 800fab0:	4770      	bx	lr

0800fab2 <__retarget_lock_acquire_recursive>:
 800fab2:	4770      	bx	lr

0800fab4 <__retarget_lock_release_recursive>:
 800fab4:	4770      	bx	lr

0800fab6 <strcpy>:
 800fab6:	4603      	mov	r3, r0
 800fab8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800fabc:	f803 2b01 	strb.w	r2, [r3], #1
 800fac0:	2a00      	cmp	r2, #0
 800fac2:	d1f9      	bne.n	800fab8 <strcpy+0x2>
 800fac4:	4770      	bx	lr

0800fac6 <memcpy>:
 800fac6:	440a      	add	r2, r1
 800fac8:	4291      	cmp	r1, r2
 800faca:	f100 33ff 	add.w	r3, r0, #4294967295
 800face:	d100      	bne.n	800fad2 <memcpy+0xc>
 800fad0:	4770      	bx	lr
 800fad2:	b510      	push	{r4, lr}
 800fad4:	f811 4b01 	ldrb.w	r4, [r1], #1
 800fad8:	f803 4f01 	strb.w	r4, [r3, #1]!
 800fadc:	4291      	cmp	r1, r2
 800fade:	d1f9      	bne.n	800fad4 <memcpy+0xe>
 800fae0:	bd10      	pop	{r4, pc}

0800fae2 <quorem>:
 800fae2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fae6:	6903      	ldr	r3, [r0, #16]
 800fae8:	690c      	ldr	r4, [r1, #16]
 800faea:	42a3      	cmp	r3, r4
 800faec:	4607      	mov	r7, r0
 800faee:	db7e      	blt.n	800fbee <quorem+0x10c>
 800faf0:	3c01      	subs	r4, #1
 800faf2:	f101 0814 	add.w	r8, r1, #20
 800faf6:	00a3      	lsls	r3, r4, #2
 800faf8:	f100 0514 	add.w	r5, r0, #20
 800fafc:	9300      	str	r3, [sp, #0]
 800fafe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fb02:	9301      	str	r3, [sp, #4]
 800fb04:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800fb08:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fb0c:	3301      	adds	r3, #1
 800fb0e:	429a      	cmp	r2, r3
 800fb10:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800fb14:	fbb2 f6f3 	udiv	r6, r2, r3
 800fb18:	d32e      	bcc.n	800fb78 <quorem+0x96>
 800fb1a:	f04f 0a00 	mov.w	sl, #0
 800fb1e:	46c4      	mov	ip, r8
 800fb20:	46ae      	mov	lr, r5
 800fb22:	46d3      	mov	fp, sl
 800fb24:	f85c 3b04 	ldr.w	r3, [ip], #4
 800fb28:	b298      	uxth	r0, r3
 800fb2a:	fb06 a000 	mla	r0, r6, r0, sl
 800fb2e:	0c02      	lsrs	r2, r0, #16
 800fb30:	0c1b      	lsrs	r3, r3, #16
 800fb32:	fb06 2303 	mla	r3, r6, r3, r2
 800fb36:	f8de 2000 	ldr.w	r2, [lr]
 800fb3a:	b280      	uxth	r0, r0
 800fb3c:	b292      	uxth	r2, r2
 800fb3e:	1a12      	subs	r2, r2, r0
 800fb40:	445a      	add	r2, fp
 800fb42:	f8de 0000 	ldr.w	r0, [lr]
 800fb46:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800fb4a:	b29b      	uxth	r3, r3
 800fb4c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800fb50:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800fb54:	b292      	uxth	r2, r2
 800fb56:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800fb5a:	45e1      	cmp	r9, ip
 800fb5c:	f84e 2b04 	str.w	r2, [lr], #4
 800fb60:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800fb64:	d2de      	bcs.n	800fb24 <quorem+0x42>
 800fb66:	9b00      	ldr	r3, [sp, #0]
 800fb68:	58eb      	ldr	r3, [r5, r3]
 800fb6a:	b92b      	cbnz	r3, 800fb78 <quorem+0x96>
 800fb6c:	9b01      	ldr	r3, [sp, #4]
 800fb6e:	3b04      	subs	r3, #4
 800fb70:	429d      	cmp	r5, r3
 800fb72:	461a      	mov	r2, r3
 800fb74:	d32f      	bcc.n	800fbd6 <quorem+0xf4>
 800fb76:	613c      	str	r4, [r7, #16]
 800fb78:	4638      	mov	r0, r7
 800fb7a:	f001 f857 	bl	8010c2c <__mcmp>
 800fb7e:	2800      	cmp	r0, #0
 800fb80:	db25      	blt.n	800fbce <quorem+0xec>
 800fb82:	4629      	mov	r1, r5
 800fb84:	2000      	movs	r0, #0
 800fb86:	f858 2b04 	ldr.w	r2, [r8], #4
 800fb8a:	f8d1 c000 	ldr.w	ip, [r1]
 800fb8e:	fa1f fe82 	uxth.w	lr, r2
 800fb92:	fa1f f38c 	uxth.w	r3, ip
 800fb96:	eba3 030e 	sub.w	r3, r3, lr
 800fb9a:	4403      	add	r3, r0
 800fb9c:	0c12      	lsrs	r2, r2, #16
 800fb9e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800fba2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800fba6:	b29b      	uxth	r3, r3
 800fba8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbac:	45c1      	cmp	r9, r8
 800fbae:	f841 3b04 	str.w	r3, [r1], #4
 800fbb2:	ea4f 4022 	mov.w	r0, r2, asr #16
 800fbb6:	d2e6      	bcs.n	800fb86 <quorem+0xa4>
 800fbb8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800fbbc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800fbc0:	b922      	cbnz	r2, 800fbcc <quorem+0xea>
 800fbc2:	3b04      	subs	r3, #4
 800fbc4:	429d      	cmp	r5, r3
 800fbc6:	461a      	mov	r2, r3
 800fbc8:	d30b      	bcc.n	800fbe2 <quorem+0x100>
 800fbca:	613c      	str	r4, [r7, #16]
 800fbcc:	3601      	adds	r6, #1
 800fbce:	4630      	mov	r0, r6
 800fbd0:	b003      	add	sp, #12
 800fbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbd6:	6812      	ldr	r2, [r2, #0]
 800fbd8:	3b04      	subs	r3, #4
 800fbda:	2a00      	cmp	r2, #0
 800fbdc:	d1cb      	bne.n	800fb76 <quorem+0x94>
 800fbde:	3c01      	subs	r4, #1
 800fbe0:	e7c6      	b.n	800fb70 <quorem+0x8e>
 800fbe2:	6812      	ldr	r2, [r2, #0]
 800fbe4:	3b04      	subs	r3, #4
 800fbe6:	2a00      	cmp	r2, #0
 800fbe8:	d1ef      	bne.n	800fbca <quorem+0xe8>
 800fbea:	3c01      	subs	r4, #1
 800fbec:	e7ea      	b.n	800fbc4 <quorem+0xe2>
 800fbee:	2000      	movs	r0, #0
 800fbf0:	e7ee      	b.n	800fbd0 <quorem+0xee>
 800fbf2:	0000      	movs	r0, r0
 800fbf4:	0000      	movs	r0, r0
	...

0800fbf8 <_dtoa_r>:
 800fbf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fbfc:	ed2d 8b02 	vpush	{d8}
 800fc00:	69c7      	ldr	r7, [r0, #28]
 800fc02:	b091      	sub	sp, #68	@ 0x44
 800fc04:	ed8d 0b02 	vstr	d0, [sp, #8]
 800fc08:	ec55 4b10 	vmov	r4, r5, d0
 800fc0c:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 800fc0e:	9107      	str	r1, [sp, #28]
 800fc10:	4681      	mov	r9, r0
 800fc12:	9209      	str	r2, [sp, #36]	@ 0x24
 800fc14:	930d      	str	r3, [sp, #52]	@ 0x34
 800fc16:	b97f      	cbnz	r7, 800fc38 <_dtoa_r+0x40>
 800fc18:	2010      	movs	r0, #16
 800fc1a:	f7fe ff85 	bl	800eb28 <malloc>
 800fc1e:	4602      	mov	r2, r0
 800fc20:	f8c9 001c 	str.w	r0, [r9, #28]
 800fc24:	b920      	cbnz	r0, 800fc30 <_dtoa_r+0x38>
 800fc26:	4ba0      	ldr	r3, [pc, #640]	@ (800fea8 <_dtoa_r+0x2b0>)
 800fc28:	21ef      	movs	r1, #239	@ 0xef
 800fc2a:	48a0      	ldr	r0, [pc, #640]	@ (800feac <_dtoa_r+0x2b4>)
 800fc2c:	f001 fb78 	bl	8011320 <__assert_func>
 800fc30:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800fc34:	6007      	str	r7, [r0, #0]
 800fc36:	60c7      	str	r7, [r0, #12]
 800fc38:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fc3c:	6819      	ldr	r1, [r3, #0]
 800fc3e:	b159      	cbz	r1, 800fc58 <_dtoa_r+0x60>
 800fc40:	685a      	ldr	r2, [r3, #4]
 800fc42:	604a      	str	r2, [r1, #4]
 800fc44:	2301      	movs	r3, #1
 800fc46:	4093      	lsls	r3, r2
 800fc48:	608b      	str	r3, [r1, #8]
 800fc4a:	4648      	mov	r0, r9
 800fc4c:	f000 fdbc 	bl	80107c8 <_Bfree>
 800fc50:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800fc54:	2200      	movs	r2, #0
 800fc56:	601a      	str	r2, [r3, #0]
 800fc58:	1e2b      	subs	r3, r5, #0
 800fc5a:	bfbb      	ittet	lt
 800fc5c:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800fc60:	9303      	strlt	r3, [sp, #12]
 800fc62:	2300      	movge	r3, #0
 800fc64:	2201      	movlt	r2, #1
 800fc66:	bfac      	ite	ge
 800fc68:	6033      	strge	r3, [r6, #0]
 800fc6a:	6032      	strlt	r2, [r6, #0]
 800fc6c:	4b90      	ldr	r3, [pc, #576]	@ (800feb0 <_dtoa_r+0x2b8>)
 800fc6e:	9e03      	ldr	r6, [sp, #12]
 800fc70:	43b3      	bics	r3, r6
 800fc72:	d110      	bne.n	800fc96 <_dtoa_r+0x9e>
 800fc74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fc76:	f242 730f 	movw	r3, #9999	@ 0x270f
 800fc7a:	6013      	str	r3, [r2, #0]
 800fc7c:	f3c6 0313 	ubfx	r3, r6, #0, #20
 800fc80:	4323      	orrs	r3, r4
 800fc82:	f000 84e6 	beq.w	8010652 <_dtoa_r+0xa5a>
 800fc86:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fc88:	4f8a      	ldr	r7, [pc, #552]	@ (800feb4 <_dtoa_r+0x2bc>)
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	f000 84e8 	beq.w	8010660 <_dtoa_r+0xa68>
 800fc90:	1cfb      	adds	r3, r7, #3
 800fc92:	f000 bce3 	b.w	801065c <_dtoa_r+0xa64>
 800fc96:	ed9d 8b02 	vldr	d8, [sp, #8]
 800fc9a:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800fc9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fca2:	d10a      	bne.n	800fcba <_dtoa_r+0xc2>
 800fca4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fca6:	2301      	movs	r3, #1
 800fca8:	6013      	str	r3, [r2, #0]
 800fcaa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800fcac:	b113      	cbz	r3, 800fcb4 <_dtoa_r+0xbc>
 800fcae:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 800fcb0:	4b81      	ldr	r3, [pc, #516]	@ (800feb8 <_dtoa_r+0x2c0>)
 800fcb2:	6013      	str	r3, [r2, #0]
 800fcb4:	4f81      	ldr	r7, [pc, #516]	@ (800febc <_dtoa_r+0x2c4>)
 800fcb6:	f000 bcd3 	b.w	8010660 <_dtoa_r+0xa68>
 800fcba:	aa0e      	add	r2, sp, #56	@ 0x38
 800fcbc:	a90f      	add	r1, sp, #60	@ 0x3c
 800fcbe:	4648      	mov	r0, r9
 800fcc0:	eeb0 0b48 	vmov.f64	d0, d8
 800fcc4:	f001 f862 	bl	8010d8c <__d2b>
 800fcc8:	f3c6 530a 	ubfx	r3, r6, #20, #11
 800fccc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800fcce:	9001      	str	r0, [sp, #4]
 800fcd0:	2b00      	cmp	r3, #0
 800fcd2:	d045      	beq.n	800fd60 <_dtoa_r+0x168>
 800fcd4:	eeb0 7b48 	vmov.f64	d7, d8
 800fcd8:	ee18 1a90 	vmov	r1, s17
 800fcdc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800fce0:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 800fce4:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 800fce8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800fcec:	2500      	movs	r5, #0
 800fcee:	ee07 1a90 	vmov	s15, r1
 800fcf2:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 800fcf6:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800fe90 <_dtoa_r+0x298>
 800fcfa:	ee37 7b46 	vsub.f64	d7, d7, d6
 800fcfe:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 800fe98 <_dtoa_r+0x2a0>
 800fd02:	eea7 6b05 	vfma.f64	d6, d7, d5
 800fd06:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 800fea0 <_dtoa_r+0x2a8>
 800fd0a:	ee07 3a90 	vmov	s15, r3
 800fd0e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 800fd12:	eeb0 7b46 	vmov.f64	d7, d6
 800fd16:	eea4 7b05 	vfma.f64	d7, d4, d5
 800fd1a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800fd1e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 800fd22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd26:	ee16 8a90 	vmov	r8, s13
 800fd2a:	d508      	bpl.n	800fd3e <_dtoa_r+0x146>
 800fd2c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 800fd30:	eeb4 6b47 	vcmp.f64	d6, d7
 800fd34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd38:	bf18      	it	ne
 800fd3a:	f108 38ff 	addne.w	r8, r8, #4294967295
 800fd3e:	f1b8 0f16 	cmp.w	r8, #22
 800fd42:	d82b      	bhi.n	800fd9c <_dtoa_r+0x1a4>
 800fd44:	495e      	ldr	r1, [pc, #376]	@ (800fec0 <_dtoa_r+0x2c8>)
 800fd46:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 800fd4a:	ed91 7b00 	vldr	d7, [r1]
 800fd4e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 800fd52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fd56:	d501      	bpl.n	800fd5c <_dtoa_r+0x164>
 800fd58:	f108 38ff 	add.w	r8, r8, #4294967295
 800fd5c:	2100      	movs	r1, #0
 800fd5e:	e01e      	b.n	800fd9e <_dtoa_r+0x1a6>
 800fd60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fd62:	4413      	add	r3, r2
 800fd64:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 800fd68:	2920      	cmp	r1, #32
 800fd6a:	bfc1      	itttt	gt
 800fd6c:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 800fd70:	408e      	lslgt	r6, r1
 800fd72:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 800fd76:	fa24 f101 	lsrgt.w	r1, r4, r1
 800fd7a:	bfd6      	itet	le
 800fd7c:	f1c1 0120 	rsble	r1, r1, #32
 800fd80:	4331      	orrgt	r1, r6
 800fd82:	fa04 f101 	lslle.w	r1, r4, r1
 800fd86:	ee07 1a90 	vmov	s15, r1
 800fd8a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800fd8e:	3b01      	subs	r3, #1
 800fd90:	ee17 1a90 	vmov	r1, s15
 800fd94:	2501      	movs	r5, #1
 800fd96:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 800fd9a:	e7a8      	b.n	800fcee <_dtoa_r+0xf6>
 800fd9c:	2101      	movs	r1, #1
 800fd9e:	1ad2      	subs	r2, r2, r3
 800fda0:	1e53      	subs	r3, r2, #1
 800fda2:	9306      	str	r3, [sp, #24]
 800fda4:	bf45      	ittet	mi
 800fda6:	f1c2 0301 	rsbmi	r3, r2, #1
 800fdaa:	9304      	strmi	r3, [sp, #16]
 800fdac:	2300      	movpl	r3, #0
 800fdae:	2300      	movmi	r3, #0
 800fdb0:	bf4c      	ite	mi
 800fdb2:	9306      	strmi	r3, [sp, #24]
 800fdb4:	9304      	strpl	r3, [sp, #16]
 800fdb6:	f1b8 0f00 	cmp.w	r8, #0
 800fdba:	910c      	str	r1, [sp, #48]	@ 0x30
 800fdbc:	db18      	blt.n	800fdf0 <_dtoa_r+0x1f8>
 800fdbe:	9b06      	ldr	r3, [sp, #24]
 800fdc0:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800fdc4:	4443      	add	r3, r8
 800fdc6:	9306      	str	r3, [sp, #24]
 800fdc8:	2300      	movs	r3, #0
 800fdca:	9a07      	ldr	r2, [sp, #28]
 800fdcc:	2a09      	cmp	r2, #9
 800fdce:	d845      	bhi.n	800fe5c <_dtoa_r+0x264>
 800fdd0:	2a05      	cmp	r2, #5
 800fdd2:	bfc4      	itt	gt
 800fdd4:	3a04      	subgt	r2, #4
 800fdd6:	9207      	strgt	r2, [sp, #28]
 800fdd8:	9a07      	ldr	r2, [sp, #28]
 800fdda:	f1a2 0202 	sub.w	r2, r2, #2
 800fdde:	bfcc      	ite	gt
 800fde0:	2400      	movgt	r4, #0
 800fde2:	2401      	movle	r4, #1
 800fde4:	2a03      	cmp	r2, #3
 800fde6:	d844      	bhi.n	800fe72 <_dtoa_r+0x27a>
 800fde8:	e8df f002 	tbb	[pc, r2]
 800fdec:	0b173634 	.word	0x0b173634
 800fdf0:	9b04      	ldr	r3, [sp, #16]
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	eba3 0308 	sub.w	r3, r3, r8
 800fdf8:	9304      	str	r3, [sp, #16]
 800fdfa:	920a      	str	r2, [sp, #40]	@ 0x28
 800fdfc:	f1c8 0300 	rsb	r3, r8, #0
 800fe00:	e7e3      	b.n	800fdca <_dtoa_r+0x1d2>
 800fe02:	2201      	movs	r2, #1
 800fe04:	9208      	str	r2, [sp, #32]
 800fe06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe08:	eb08 0b02 	add.w	fp, r8, r2
 800fe0c:	f10b 0a01 	add.w	sl, fp, #1
 800fe10:	4652      	mov	r2, sl
 800fe12:	2a01      	cmp	r2, #1
 800fe14:	bfb8      	it	lt
 800fe16:	2201      	movlt	r2, #1
 800fe18:	e006      	b.n	800fe28 <_dtoa_r+0x230>
 800fe1a:	2201      	movs	r2, #1
 800fe1c:	9208      	str	r2, [sp, #32]
 800fe1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fe20:	2a00      	cmp	r2, #0
 800fe22:	dd29      	ble.n	800fe78 <_dtoa_r+0x280>
 800fe24:	4693      	mov	fp, r2
 800fe26:	4692      	mov	sl, r2
 800fe28:	f8d9 701c 	ldr.w	r7, [r9, #28]
 800fe2c:	2100      	movs	r1, #0
 800fe2e:	2004      	movs	r0, #4
 800fe30:	f100 0614 	add.w	r6, r0, #20
 800fe34:	4296      	cmp	r6, r2
 800fe36:	d926      	bls.n	800fe86 <_dtoa_r+0x28e>
 800fe38:	6079      	str	r1, [r7, #4]
 800fe3a:	4648      	mov	r0, r9
 800fe3c:	9305      	str	r3, [sp, #20]
 800fe3e:	f000 fc83 	bl	8010748 <_Balloc>
 800fe42:	9b05      	ldr	r3, [sp, #20]
 800fe44:	4607      	mov	r7, r0
 800fe46:	2800      	cmp	r0, #0
 800fe48:	d13e      	bne.n	800fec8 <_dtoa_r+0x2d0>
 800fe4a:	4b1e      	ldr	r3, [pc, #120]	@ (800fec4 <_dtoa_r+0x2cc>)
 800fe4c:	4602      	mov	r2, r0
 800fe4e:	f240 11af 	movw	r1, #431	@ 0x1af
 800fe52:	e6ea      	b.n	800fc2a <_dtoa_r+0x32>
 800fe54:	2200      	movs	r2, #0
 800fe56:	e7e1      	b.n	800fe1c <_dtoa_r+0x224>
 800fe58:	2200      	movs	r2, #0
 800fe5a:	e7d3      	b.n	800fe04 <_dtoa_r+0x20c>
 800fe5c:	2401      	movs	r4, #1
 800fe5e:	2200      	movs	r2, #0
 800fe60:	e9cd 2407 	strd	r2, r4, [sp, #28]
 800fe64:	f04f 3bff 	mov.w	fp, #4294967295
 800fe68:	2100      	movs	r1, #0
 800fe6a:	46da      	mov	sl, fp
 800fe6c:	2212      	movs	r2, #18
 800fe6e:	9109      	str	r1, [sp, #36]	@ 0x24
 800fe70:	e7da      	b.n	800fe28 <_dtoa_r+0x230>
 800fe72:	2201      	movs	r2, #1
 800fe74:	9208      	str	r2, [sp, #32]
 800fe76:	e7f5      	b.n	800fe64 <_dtoa_r+0x26c>
 800fe78:	f04f 0b01 	mov.w	fp, #1
 800fe7c:	46da      	mov	sl, fp
 800fe7e:	465a      	mov	r2, fp
 800fe80:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 800fe84:	e7d0      	b.n	800fe28 <_dtoa_r+0x230>
 800fe86:	3101      	adds	r1, #1
 800fe88:	0040      	lsls	r0, r0, #1
 800fe8a:	e7d1      	b.n	800fe30 <_dtoa_r+0x238>
 800fe8c:	f3af 8000 	nop.w
 800fe90:	636f4361 	.word	0x636f4361
 800fe94:	3fd287a7 	.word	0x3fd287a7
 800fe98:	8b60c8b3 	.word	0x8b60c8b3
 800fe9c:	3fc68a28 	.word	0x3fc68a28
 800fea0:	509f79fb 	.word	0x509f79fb
 800fea4:	3fd34413 	.word	0x3fd34413
 800fea8:	08013b31 	.word	0x08013b31
 800feac:	08013b48 	.word	0x08013b48
 800feb0:	7ff00000 	.word	0x7ff00000
 800feb4:	08013b2d 	.word	0x08013b2d
 800feb8:	08013b01 	.word	0x08013b01
 800febc:	08013b00 	.word	0x08013b00
 800fec0:	08013c98 	.word	0x08013c98
 800fec4:	08013ba0 	.word	0x08013ba0
 800fec8:	f8d9 201c 	ldr.w	r2, [r9, #28]
 800fecc:	f1ba 0f0e 	cmp.w	sl, #14
 800fed0:	6010      	str	r0, [r2, #0]
 800fed2:	d86e      	bhi.n	800ffb2 <_dtoa_r+0x3ba>
 800fed4:	2c00      	cmp	r4, #0
 800fed6:	d06c      	beq.n	800ffb2 <_dtoa_r+0x3ba>
 800fed8:	f1b8 0f00 	cmp.w	r8, #0
 800fedc:	f340 80b4 	ble.w	8010048 <_dtoa_r+0x450>
 800fee0:	4ac8      	ldr	r2, [pc, #800]	@ (8010204 <_dtoa_r+0x60c>)
 800fee2:	f008 010f 	and.w	r1, r8, #15
 800fee6:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 800feea:	f418 7f80 	tst.w	r8, #256	@ 0x100
 800feee:	ed92 7b00 	vldr	d7, [r2]
 800fef2:	ea4f 1128 	mov.w	r1, r8, asr #4
 800fef6:	f000 809b 	beq.w	8010030 <_dtoa_r+0x438>
 800fefa:	4ac3      	ldr	r2, [pc, #780]	@ (8010208 <_dtoa_r+0x610>)
 800fefc:	ed92 6b08 	vldr	d6, [r2, #32]
 800ff00:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800ff04:	ed8d 6b02 	vstr	d6, [sp, #8]
 800ff08:	f001 010f 	and.w	r1, r1, #15
 800ff0c:	2203      	movs	r2, #3
 800ff0e:	48be      	ldr	r0, [pc, #760]	@ (8010208 <_dtoa_r+0x610>)
 800ff10:	2900      	cmp	r1, #0
 800ff12:	f040 808f 	bne.w	8010034 <_dtoa_r+0x43c>
 800ff16:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ff1a:	ee86 7b07 	vdiv.f64	d7, d6, d7
 800ff1e:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ff22:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800ff24:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ff28:	2900      	cmp	r1, #0
 800ff2a:	f000 80b3 	beq.w	8010094 <_dtoa_r+0x49c>
 800ff2e:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 800ff32:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800ff36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff3a:	f140 80ab 	bpl.w	8010094 <_dtoa_r+0x49c>
 800ff3e:	f1ba 0f00 	cmp.w	sl, #0
 800ff42:	f000 80a7 	beq.w	8010094 <_dtoa_r+0x49c>
 800ff46:	f1bb 0f00 	cmp.w	fp, #0
 800ff4a:	dd30      	ble.n	800ffae <_dtoa_r+0x3b6>
 800ff4c:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 800ff50:	ee27 7b06 	vmul.f64	d7, d7, d6
 800ff54:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ff58:	f108 31ff 	add.w	r1, r8, #4294967295
 800ff5c:	9105      	str	r1, [sp, #20]
 800ff5e:	3201      	adds	r2, #1
 800ff60:	465c      	mov	r4, fp
 800ff62:	ed9d 6b02 	vldr	d6, [sp, #8]
 800ff66:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 800ff6a:	ee07 2a90 	vmov	s15, r2
 800ff6e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800ff72:	eea7 5b06 	vfma.f64	d5, d7, d6
 800ff76:	ee15 2a90 	vmov	r2, s11
 800ff7a:	ec51 0b15 	vmov	r0, r1, d5
 800ff7e:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 800ff82:	2c00      	cmp	r4, #0
 800ff84:	f040 808a 	bne.w	801009c <_dtoa_r+0x4a4>
 800ff88:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ff8c:	ee36 6b47 	vsub.f64	d6, d6, d7
 800ff90:	ec41 0b17 	vmov	d7, r0, r1
 800ff94:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ff98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff9c:	f300 826a 	bgt.w	8010474 <_dtoa_r+0x87c>
 800ffa0:	eeb1 7b47 	vneg.f64	d7, d7
 800ffa4:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ffa8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffac:	d423      	bmi.n	800fff6 <_dtoa_r+0x3fe>
 800ffae:	ed8d 8b02 	vstr	d8, [sp, #8]
 800ffb2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ffb4:	2a00      	cmp	r2, #0
 800ffb6:	f2c0 8129 	blt.w	801020c <_dtoa_r+0x614>
 800ffba:	f1b8 0f0e 	cmp.w	r8, #14
 800ffbe:	f300 8125 	bgt.w	801020c <_dtoa_r+0x614>
 800ffc2:	4b90      	ldr	r3, [pc, #576]	@ (8010204 <_dtoa_r+0x60c>)
 800ffc4:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ffc8:	ed93 6b00 	vldr	d6, [r3]
 800ffcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	f280 80c8 	bge.w	8010164 <_dtoa_r+0x56c>
 800ffd4:	f1ba 0f00 	cmp.w	sl, #0
 800ffd8:	f300 80c4 	bgt.w	8010164 <_dtoa_r+0x56c>
 800ffdc:	d10b      	bne.n	800fff6 <_dtoa_r+0x3fe>
 800ffde:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 800ffe2:	ee26 6b07 	vmul.f64	d6, d6, d7
 800ffe6:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ffea:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800ffee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fff2:	f2c0 823c 	blt.w	801046e <_dtoa_r+0x876>
 800fff6:	2400      	movs	r4, #0
 800fff8:	4625      	mov	r5, r4
 800fffa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fffc:	43db      	mvns	r3, r3
 800fffe:	9305      	str	r3, [sp, #20]
 8010000:	463e      	mov	r6, r7
 8010002:	f04f 0800 	mov.w	r8, #0
 8010006:	4621      	mov	r1, r4
 8010008:	4648      	mov	r0, r9
 801000a:	f000 fbdd 	bl	80107c8 <_Bfree>
 801000e:	2d00      	cmp	r5, #0
 8010010:	f000 80a2 	beq.w	8010158 <_dtoa_r+0x560>
 8010014:	f1b8 0f00 	cmp.w	r8, #0
 8010018:	d005      	beq.n	8010026 <_dtoa_r+0x42e>
 801001a:	45a8      	cmp	r8, r5
 801001c:	d003      	beq.n	8010026 <_dtoa_r+0x42e>
 801001e:	4641      	mov	r1, r8
 8010020:	4648      	mov	r0, r9
 8010022:	f000 fbd1 	bl	80107c8 <_Bfree>
 8010026:	4629      	mov	r1, r5
 8010028:	4648      	mov	r0, r9
 801002a:	f000 fbcd 	bl	80107c8 <_Bfree>
 801002e:	e093      	b.n	8010158 <_dtoa_r+0x560>
 8010030:	2202      	movs	r2, #2
 8010032:	e76c      	b.n	800ff0e <_dtoa_r+0x316>
 8010034:	07cc      	lsls	r4, r1, #31
 8010036:	d504      	bpl.n	8010042 <_dtoa_r+0x44a>
 8010038:	ed90 6b00 	vldr	d6, [r0]
 801003c:	3201      	adds	r2, #1
 801003e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8010042:	1049      	asrs	r1, r1, #1
 8010044:	3008      	adds	r0, #8
 8010046:	e763      	b.n	800ff10 <_dtoa_r+0x318>
 8010048:	d022      	beq.n	8010090 <_dtoa_r+0x498>
 801004a:	f1c8 0100 	rsb	r1, r8, #0
 801004e:	4a6d      	ldr	r2, [pc, #436]	@ (8010204 <_dtoa_r+0x60c>)
 8010050:	f001 000f 	and.w	r0, r1, #15
 8010054:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8010058:	ed92 7b00 	vldr	d7, [r2]
 801005c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8010060:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010064:	4868      	ldr	r0, [pc, #416]	@ (8010208 <_dtoa_r+0x610>)
 8010066:	1109      	asrs	r1, r1, #4
 8010068:	2400      	movs	r4, #0
 801006a:	2202      	movs	r2, #2
 801006c:	b929      	cbnz	r1, 801007a <_dtoa_r+0x482>
 801006e:	2c00      	cmp	r4, #0
 8010070:	f43f af57 	beq.w	800ff22 <_dtoa_r+0x32a>
 8010074:	ed8d 7b02 	vstr	d7, [sp, #8]
 8010078:	e753      	b.n	800ff22 <_dtoa_r+0x32a>
 801007a:	07ce      	lsls	r6, r1, #31
 801007c:	d505      	bpl.n	801008a <_dtoa_r+0x492>
 801007e:	ed90 6b00 	vldr	d6, [r0]
 8010082:	3201      	adds	r2, #1
 8010084:	2401      	movs	r4, #1
 8010086:	ee27 7b06 	vmul.f64	d7, d7, d6
 801008a:	1049      	asrs	r1, r1, #1
 801008c:	3008      	adds	r0, #8
 801008e:	e7ed      	b.n	801006c <_dtoa_r+0x474>
 8010090:	2202      	movs	r2, #2
 8010092:	e746      	b.n	800ff22 <_dtoa_r+0x32a>
 8010094:	f8cd 8014 	str.w	r8, [sp, #20]
 8010098:	4654      	mov	r4, sl
 801009a:	e762      	b.n	800ff62 <_dtoa_r+0x36a>
 801009c:	4a59      	ldr	r2, [pc, #356]	@ (8010204 <_dtoa_r+0x60c>)
 801009e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 80100a2:	ed12 4b02 	vldr	d4, [r2, #-8]
 80100a6:	9a08      	ldr	r2, [sp, #32]
 80100a8:	ec41 0b17 	vmov	d7, r0, r1
 80100ac:	443c      	add	r4, r7
 80100ae:	b34a      	cbz	r2, 8010104 <_dtoa_r+0x50c>
 80100b0:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 80100b4:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80100b8:	463e      	mov	r6, r7
 80100ba:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80100be:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80100c2:	ee35 7b47 	vsub.f64	d7, d5, d7
 80100c6:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80100ca:	ee14 2a90 	vmov	r2, s9
 80100ce:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80100d2:	3230      	adds	r2, #48	@ 0x30
 80100d4:	ee36 6b45 	vsub.f64	d6, d6, d5
 80100d8:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80100dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100e0:	f806 2b01 	strb.w	r2, [r6], #1
 80100e4:	d438      	bmi.n	8010158 <_dtoa_r+0x560>
 80100e6:	ee32 5b46 	vsub.f64	d5, d2, d6
 80100ea:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80100ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100f2:	d46e      	bmi.n	80101d2 <_dtoa_r+0x5da>
 80100f4:	42a6      	cmp	r6, r4
 80100f6:	f43f af5a 	beq.w	800ffae <_dtoa_r+0x3b6>
 80100fa:	ee27 7b03 	vmul.f64	d7, d7, d3
 80100fe:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010102:	e7e0      	b.n	80100c6 <_dtoa_r+0x4ce>
 8010104:	4621      	mov	r1, r4
 8010106:	463e      	mov	r6, r7
 8010108:	ee27 7b04 	vmul.f64	d7, d7, d4
 801010c:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 8010110:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8010114:	ee14 2a90 	vmov	r2, s9
 8010118:	3230      	adds	r2, #48	@ 0x30
 801011a:	f806 2b01 	strb.w	r2, [r6], #1
 801011e:	42a6      	cmp	r6, r4
 8010120:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8010124:	ee36 6b45 	vsub.f64	d6, d6, d5
 8010128:	d119      	bne.n	801015e <_dtoa_r+0x566>
 801012a:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 801012e:	ee37 4b05 	vadd.f64	d4, d7, d5
 8010132:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8010136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801013a:	dc4a      	bgt.n	80101d2 <_dtoa_r+0x5da>
 801013c:	ee35 5b47 	vsub.f64	d5, d5, d7
 8010140:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8010144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010148:	f57f af31 	bpl.w	800ffae <_dtoa_r+0x3b6>
 801014c:	460e      	mov	r6, r1
 801014e:	3901      	subs	r1, #1
 8010150:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8010154:	2b30      	cmp	r3, #48	@ 0x30
 8010156:	d0f9      	beq.n	801014c <_dtoa_r+0x554>
 8010158:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801015c:	e027      	b.n	80101ae <_dtoa_r+0x5b6>
 801015e:	ee26 6b03 	vmul.f64	d6, d6, d3
 8010162:	e7d5      	b.n	8010110 <_dtoa_r+0x518>
 8010164:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010168:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 801016c:	463e      	mov	r6, r7
 801016e:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8010172:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8010176:	ee15 3a10 	vmov	r3, s10
 801017a:	3330      	adds	r3, #48	@ 0x30
 801017c:	f806 3b01 	strb.w	r3, [r6], #1
 8010180:	1bf3      	subs	r3, r6, r7
 8010182:	459a      	cmp	sl, r3
 8010184:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8010188:	eea3 7b46 	vfms.f64	d7, d3, d6
 801018c:	d132      	bne.n	80101f4 <_dtoa_r+0x5fc>
 801018e:	ee37 7b07 	vadd.f64	d7, d7, d7
 8010192:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8010196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801019a:	dc18      	bgt.n	80101ce <_dtoa_r+0x5d6>
 801019c:	eeb4 7b46 	vcmp.f64	d7, d6
 80101a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101a4:	d103      	bne.n	80101ae <_dtoa_r+0x5b6>
 80101a6:	ee15 3a10 	vmov	r3, s10
 80101aa:	07db      	lsls	r3, r3, #31
 80101ac:	d40f      	bmi.n	80101ce <_dtoa_r+0x5d6>
 80101ae:	9901      	ldr	r1, [sp, #4]
 80101b0:	4648      	mov	r0, r9
 80101b2:	f000 fb09 	bl	80107c8 <_Bfree>
 80101b6:	2300      	movs	r3, #0
 80101b8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80101ba:	7033      	strb	r3, [r6, #0]
 80101bc:	f108 0301 	add.w	r3, r8, #1
 80101c0:	6013      	str	r3, [r2, #0]
 80101c2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80101c4:	2b00      	cmp	r3, #0
 80101c6:	f000 824b 	beq.w	8010660 <_dtoa_r+0xa68>
 80101ca:	601e      	str	r6, [r3, #0]
 80101cc:	e248      	b.n	8010660 <_dtoa_r+0xa68>
 80101ce:	f8cd 8014 	str.w	r8, [sp, #20]
 80101d2:	4633      	mov	r3, r6
 80101d4:	461e      	mov	r6, r3
 80101d6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80101da:	2a39      	cmp	r2, #57	@ 0x39
 80101dc:	d106      	bne.n	80101ec <_dtoa_r+0x5f4>
 80101de:	429f      	cmp	r7, r3
 80101e0:	d1f8      	bne.n	80101d4 <_dtoa_r+0x5dc>
 80101e2:	9a05      	ldr	r2, [sp, #20]
 80101e4:	3201      	adds	r2, #1
 80101e6:	9205      	str	r2, [sp, #20]
 80101e8:	2230      	movs	r2, #48	@ 0x30
 80101ea:	703a      	strb	r2, [r7, #0]
 80101ec:	781a      	ldrb	r2, [r3, #0]
 80101ee:	3201      	adds	r2, #1
 80101f0:	701a      	strb	r2, [r3, #0]
 80101f2:	e7b1      	b.n	8010158 <_dtoa_r+0x560>
 80101f4:	ee27 7b04 	vmul.f64	d7, d7, d4
 80101f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80101fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010200:	d1b5      	bne.n	801016e <_dtoa_r+0x576>
 8010202:	e7d4      	b.n	80101ae <_dtoa_r+0x5b6>
 8010204:	08013c98 	.word	0x08013c98
 8010208:	08013c70 	.word	0x08013c70
 801020c:	9908      	ldr	r1, [sp, #32]
 801020e:	2900      	cmp	r1, #0
 8010210:	f000 80e9 	beq.w	80103e6 <_dtoa_r+0x7ee>
 8010214:	9907      	ldr	r1, [sp, #28]
 8010216:	2901      	cmp	r1, #1
 8010218:	f300 80cb 	bgt.w	80103b2 <_dtoa_r+0x7ba>
 801021c:	2d00      	cmp	r5, #0
 801021e:	f000 80c4 	beq.w	80103aa <_dtoa_r+0x7b2>
 8010222:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8010226:	9e04      	ldr	r6, [sp, #16]
 8010228:	461c      	mov	r4, r3
 801022a:	9305      	str	r3, [sp, #20]
 801022c:	9b04      	ldr	r3, [sp, #16]
 801022e:	4413      	add	r3, r2
 8010230:	9304      	str	r3, [sp, #16]
 8010232:	9b06      	ldr	r3, [sp, #24]
 8010234:	2101      	movs	r1, #1
 8010236:	4413      	add	r3, r2
 8010238:	4648      	mov	r0, r9
 801023a:	9306      	str	r3, [sp, #24]
 801023c:	f000 fb78 	bl	8010930 <__i2b>
 8010240:	9b05      	ldr	r3, [sp, #20]
 8010242:	4605      	mov	r5, r0
 8010244:	b166      	cbz	r6, 8010260 <_dtoa_r+0x668>
 8010246:	9a06      	ldr	r2, [sp, #24]
 8010248:	2a00      	cmp	r2, #0
 801024a:	dd09      	ble.n	8010260 <_dtoa_r+0x668>
 801024c:	42b2      	cmp	r2, r6
 801024e:	9904      	ldr	r1, [sp, #16]
 8010250:	bfa8      	it	ge
 8010252:	4632      	movge	r2, r6
 8010254:	1a89      	subs	r1, r1, r2
 8010256:	9104      	str	r1, [sp, #16]
 8010258:	9906      	ldr	r1, [sp, #24]
 801025a:	1ab6      	subs	r6, r6, r2
 801025c:	1a8a      	subs	r2, r1, r2
 801025e:	9206      	str	r2, [sp, #24]
 8010260:	b30b      	cbz	r3, 80102a6 <_dtoa_r+0x6ae>
 8010262:	9a08      	ldr	r2, [sp, #32]
 8010264:	2a00      	cmp	r2, #0
 8010266:	f000 80c5 	beq.w	80103f4 <_dtoa_r+0x7fc>
 801026a:	2c00      	cmp	r4, #0
 801026c:	f000 80bf 	beq.w	80103ee <_dtoa_r+0x7f6>
 8010270:	4629      	mov	r1, r5
 8010272:	4622      	mov	r2, r4
 8010274:	4648      	mov	r0, r9
 8010276:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010278:	f000 fc12 	bl	8010aa0 <__pow5mult>
 801027c:	9a01      	ldr	r2, [sp, #4]
 801027e:	4601      	mov	r1, r0
 8010280:	4605      	mov	r5, r0
 8010282:	4648      	mov	r0, r9
 8010284:	f000 fb6a 	bl	801095c <__multiply>
 8010288:	9901      	ldr	r1, [sp, #4]
 801028a:	9005      	str	r0, [sp, #20]
 801028c:	4648      	mov	r0, r9
 801028e:	f000 fa9b 	bl	80107c8 <_Bfree>
 8010292:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010294:	1b1b      	subs	r3, r3, r4
 8010296:	f000 80b0 	beq.w	80103fa <_dtoa_r+0x802>
 801029a:	9905      	ldr	r1, [sp, #20]
 801029c:	461a      	mov	r2, r3
 801029e:	4648      	mov	r0, r9
 80102a0:	f000 fbfe 	bl	8010aa0 <__pow5mult>
 80102a4:	9001      	str	r0, [sp, #4]
 80102a6:	2101      	movs	r1, #1
 80102a8:	4648      	mov	r0, r9
 80102aa:	f000 fb41 	bl	8010930 <__i2b>
 80102ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80102b0:	4604      	mov	r4, r0
 80102b2:	2b00      	cmp	r3, #0
 80102b4:	f000 81da 	beq.w	801066c <_dtoa_r+0xa74>
 80102b8:	461a      	mov	r2, r3
 80102ba:	4601      	mov	r1, r0
 80102bc:	4648      	mov	r0, r9
 80102be:	f000 fbef 	bl	8010aa0 <__pow5mult>
 80102c2:	9b07      	ldr	r3, [sp, #28]
 80102c4:	2b01      	cmp	r3, #1
 80102c6:	4604      	mov	r4, r0
 80102c8:	f300 80a0 	bgt.w	801040c <_dtoa_r+0x814>
 80102cc:	9b02      	ldr	r3, [sp, #8]
 80102ce:	2b00      	cmp	r3, #0
 80102d0:	f040 8096 	bne.w	8010400 <_dtoa_r+0x808>
 80102d4:	9b03      	ldr	r3, [sp, #12]
 80102d6:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80102da:	2a00      	cmp	r2, #0
 80102dc:	f040 8092 	bne.w	8010404 <_dtoa_r+0x80c>
 80102e0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80102e4:	0d12      	lsrs	r2, r2, #20
 80102e6:	0512      	lsls	r2, r2, #20
 80102e8:	2a00      	cmp	r2, #0
 80102ea:	f000 808d 	beq.w	8010408 <_dtoa_r+0x810>
 80102ee:	9b04      	ldr	r3, [sp, #16]
 80102f0:	3301      	adds	r3, #1
 80102f2:	9304      	str	r3, [sp, #16]
 80102f4:	9b06      	ldr	r3, [sp, #24]
 80102f6:	3301      	adds	r3, #1
 80102f8:	9306      	str	r3, [sp, #24]
 80102fa:	2301      	movs	r3, #1
 80102fc:	930b      	str	r3, [sp, #44]	@ 0x2c
 80102fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010300:	2b00      	cmp	r3, #0
 8010302:	f000 81b9 	beq.w	8010678 <_dtoa_r+0xa80>
 8010306:	6922      	ldr	r2, [r4, #16]
 8010308:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801030c:	6910      	ldr	r0, [r2, #16]
 801030e:	f000 fac3 	bl	8010898 <__hi0bits>
 8010312:	f1c0 0020 	rsb	r0, r0, #32
 8010316:	9b06      	ldr	r3, [sp, #24]
 8010318:	4418      	add	r0, r3
 801031a:	f010 001f 	ands.w	r0, r0, #31
 801031e:	f000 8081 	beq.w	8010424 <_dtoa_r+0x82c>
 8010322:	f1c0 0220 	rsb	r2, r0, #32
 8010326:	2a04      	cmp	r2, #4
 8010328:	dd73      	ble.n	8010412 <_dtoa_r+0x81a>
 801032a:	9b04      	ldr	r3, [sp, #16]
 801032c:	f1c0 001c 	rsb	r0, r0, #28
 8010330:	4403      	add	r3, r0
 8010332:	9304      	str	r3, [sp, #16]
 8010334:	9b06      	ldr	r3, [sp, #24]
 8010336:	4406      	add	r6, r0
 8010338:	4403      	add	r3, r0
 801033a:	9306      	str	r3, [sp, #24]
 801033c:	9b04      	ldr	r3, [sp, #16]
 801033e:	2b00      	cmp	r3, #0
 8010340:	dd05      	ble.n	801034e <_dtoa_r+0x756>
 8010342:	9901      	ldr	r1, [sp, #4]
 8010344:	461a      	mov	r2, r3
 8010346:	4648      	mov	r0, r9
 8010348:	f000 fc04 	bl	8010b54 <__lshift>
 801034c:	9001      	str	r0, [sp, #4]
 801034e:	9b06      	ldr	r3, [sp, #24]
 8010350:	2b00      	cmp	r3, #0
 8010352:	dd05      	ble.n	8010360 <_dtoa_r+0x768>
 8010354:	4621      	mov	r1, r4
 8010356:	461a      	mov	r2, r3
 8010358:	4648      	mov	r0, r9
 801035a:	f000 fbfb 	bl	8010b54 <__lshift>
 801035e:	4604      	mov	r4, r0
 8010360:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010362:	2b00      	cmp	r3, #0
 8010364:	d060      	beq.n	8010428 <_dtoa_r+0x830>
 8010366:	9801      	ldr	r0, [sp, #4]
 8010368:	4621      	mov	r1, r4
 801036a:	f000 fc5f 	bl	8010c2c <__mcmp>
 801036e:	2800      	cmp	r0, #0
 8010370:	da5a      	bge.n	8010428 <_dtoa_r+0x830>
 8010372:	f108 33ff 	add.w	r3, r8, #4294967295
 8010376:	9305      	str	r3, [sp, #20]
 8010378:	9901      	ldr	r1, [sp, #4]
 801037a:	2300      	movs	r3, #0
 801037c:	220a      	movs	r2, #10
 801037e:	4648      	mov	r0, r9
 8010380:	f000 fa44 	bl	801080c <__multadd>
 8010384:	9b08      	ldr	r3, [sp, #32]
 8010386:	9001      	str	r0, [sp, #4]
 8010388:	2b00      	cmp	r3, #0
 801038a:	f000 8177 	beq.w	801067c <_dtoa_r+0xa84>
 801038e:	4629      	mov	r1, r5
 8010390:	2300      	movs	r3, #0
 8010392:	220a      	movs	r2, #10
 8010394:	4648      	mov	r0, r9
 8010396:	f000 fa39 	bl	801080c <__multadd>
 801039a:	f1bb 0f00 	cmp.w	fp, #0
 801039e:	4605      	mov	r5, r0
 80103a0:	dc6e      	bgt.n	8010480 <_dtoa_r+0x888>
 80103a2:	9b07      	ldr	r3, [sp, #28]
 80103a4:	2b02      	cmp	r3, #2
 80103a6:	dc48      	bgt.n	801043a <_dtoa_r+0x842>
 80103a8:	e06a      	b.n	8010480 <_dtoa_r+0x888>
 80103aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80103ac:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80103b0:	e739      	b.n	8010226 <_dtoa_r+0x62e>
 80103b2:	f10a 34ff 	add.w	r4, sl, #4294967295
 80103b6:	42a3      	cmp	r3, r4
 80103b8:	db07      	blt.n	80103ca <_dtoa_r+0x7d2>
 80103ba:	f1ba 0f00 	cmp.w	sl, #0
 80103be:	eba3 0404 	sub.w	r4, r3, r4
 80103c2:	db0b      	blt.n	80103dc <_dtoa_r+0x7e4>
 80103c4:	9e04      	ldr	r6, [sp, #16]
 80103c6:	4652      	mov	r2, sl
 80103c8:	e72f      	b.n	801022a <_dtoa_r+0x632>
 80103ca:	1ae2      	subs	r2, r4, r3
 80103cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80103ce:	9e04      	ldr	r6, [sp, #16]
 80103d0:	4413      	add	r3, r2
 80103d2:	930a      	str	r3, [sp, #40]	@ 0x28
 80103d4:	4652      	mov	r2, sl
 80103d6:	4623      	mov	r3, r4
 80103d8:	2400      	movs	r4, #0
 80103da:	e726      	b.n	801022a <_dtoa_r+0x632>
 80103dc:	9a04      	ldr	r2, [sp, #16]
 80103de:	eba2 060a 	sub.w	r6, r2, sl
 80103e2:	2200      	movs	r2, #0
 80103e4:	e721      	b.n	801022a <_dtoa_r+0x632>
 80103e6:	9e04      	ldr	r6, [sp, #16]
 80103e8:	9d08      	ldr	r5, [sp, #32]
 80103ea:	461c      	mov	r4, r3
 80103ec:	e72a      	b.n	8010244 <_dtoa_r+0x64c>
 80103ee:	9a01      	ldr	r2, [sp, #4]
 80103f0:	9205      	str	r2, [sp, #20]
 80103f2:	e752      	b.n	801029a <_dtoa_r+0x6a2>
 80103f4:	9901      	ldr	r1, [sp, #4]
 80103f6:	461a      	mov	r2, r3
 80103f8:	e751      	b.n	801029e <_dtoa_r+0x6a6>
 80103fa:	9b05      	ldr	r3, [sp, #20]
 80103fc:	9301      	str	r3, [sp, #4]
 80103fe:	e752      	b.n	80102a6 <_dtoa_r+0x6ae>
 8010400:	2300      	movs	r3, #0
 8010402:	e77b      	b.n	80102fc <_dtoa_r+0x704>
 8010404:	9b02      	ldr	r3, [sp, #8]
 8010406:	e779      	b.n	80102fc <_dtoa_r+0x704>
 8010408:	920b      	str	r2, [sp, #44]	@ 0x2c
 801040a:	e778      	b.n	80102fe <_dtoa_r+0x706>
 801040c:	2300      	movs	r3, #0
 801040e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010410:	e779      	b.n	8010306 <_dtoa_r+0x70e>
 8010412:	d093      	beq.n	801033c <_dtoa_r+0x744>
 8010414:	9b04      	ldr	r3, [sp, #16]
 8010416:	321c      	adds	r2, #28
 8010418:	4413      	add	r3, r2
 801041a:	9304      	str	r3, [sp, #16]
 801041c:	9b06      	ldr	r3, [sp, #24]
 801041e:	4416      	add	r6, r2
 8010420:	4413      	add	r3, r2
 8010422:	e78a      	b.n	801033a <_dtoa_r+0x742>
 8010424:	4602      	mov	r2, r0
 8010426:	e7f5      	b.n	8010414 <_dtoa_r+0x81c>
 8010428:	f1ba 0f00 	cmp.w	sl, #0
 801042c:	f8cd 8014 	str.w	r8, [sp, #20]
 8010430:	46d3      	mov	fp, sl
 8010432:	dc21      	bgt.n	8010478 <_dtoa_r+0x880>
 8010434:	9b07      	ldr	r3, [sp, #28]
 8010436:	2b02      	cmp	r3, #2
 8010438:	dd1e      	ble.n	8010478 <_dtoa_r+0x880>
 801043a:	f1bb 0f00 	cmp.w	fp, #0
 801043e:	f47f addc 	bne.w	800fffa <_dtoa_r+0x402>
 8010442:	4621      	mov	r1, r4
 8010444:	465b      	mov	r3, fp
 8010446:	2205      	movs	r2, #5
 8010448:	4648      	mov	r0, r9
 801044a:	f000 f9df 	bl	801080c <__multadd>
 801044e:	4601      	mov	r1, r0
 8010450:	4604      	mov	r4, r0
 8010452:	9801      	ldr	r0, [sp, #4]
 8010454:	f000 fbea 	bl	8010c2c <__mcmp>
 8010458:	2800      	cmp	r0, #0
 801045a:	f77f adce 	ble.w	800fffa <_dtoa_r+0x402>
 801045e:	463e      	mov	r6, r7
 8010460:	2331      	movs	r3, #49	@ 0x31
 8010462:	f806 3b01 	strb.w	r3, [r6], #1
 8010466:	9b05      	ldr	r3, [sp, #20]
 8010468:	3301      	adds	r3, #1
 801046a:	9305      	str	r3, [sp, #20]
 801046c:	e5c9      	b.n	8010002 <_dtoa_r+0x40a>
 801046e:	f8cd 8014 	str.w	r8, [sp, #20]
 8010472:	4654      	mov	r4, sl
 8010474:	4625      	mov	r5, r4
 8010476:	e7f2      	b.n	801045e <_dtoa_r+0x866>
 8010478:	9b08      	ldr	r3, [sp, #32]
 801047a:	2b00      	cmp	r3, #0
 801047c:	f000 8102 	beq.w	8010684 <_dtoa_r+0xa8c>
 8010480:	2e00      	cmp	r6, #0
 8010482:	dd05      	ble.n	8010490 <_dtoa_r+0x898>
 8010484:	4629      	mov	r1, r5
 8010486:	4632      	mov	r2, r6
 8010488:	4648      	mov	r0, r9
 801048a:	f000 fb63 	bl	8010b54 <__lshift>
 801048e:	4605      	mov	r5, r0
 8010490:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010492:	2b00      	cmp	r3, #0
 8010494:	d058      	beq.n	8010548 <_dtoa_r+0x950>
 8010496:	6869      	ldr	r1, [r5, #4]
 8010498:	4648      	mov	r0, r9
 801049a:	f000 f955 	bl	8010748 <_Balloc>
 801049e:	4606      	mov	r6, r0
 80104a0:	b928      	cbnz	r0, 80104ae <_dtoa_r+0x8b6>
 80104a2:	4b82      	ldr	r3, [pc, #520]	@ (80106ac <_dtoa_r+0xab4>)
 80104a4:	4602      	mov	r2, r0
 80104a6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80104aa:	f7ff bbbe 	b.w	800fc2a <_dtoa_r+0x32>
 80104ae:	692a      	ldr	r2, [r5, #16]
 80104b0:	3202      	adds	r2, #2
 80104b2:	0092      	lsls	r2, r2, #2
 80104b4:	f105 010c 	add.w	r1, r5, #12
 80104b8:	300c      	adds	r0, #12
 80104ba:	f7ff fb04 	bl	800fac6 <memcpy>
 80104be:	2201      	movs	r2, #1
 80104c0:	4631      	mov	r1, r6
 80104c2:	4648      	mov	r0, r9
 80104c4:	f000 fb46 	bl	8010b54 <__lshift>
 80104c8:	1c7b      	adds	r3, r7, #1
 80104ca:	9304      	str	r3, [sp, #16]
 80104cc:	eb07 030b 	add.w	r3, r7, fp
 80104d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80104d2:	9b02      	ldr	r3, [sp, #8]
 80104d4:	f003 0301 	and.w	r3, r3, #1
 80104d8:	46a8      	mov	r8, r5
 80104da:	9308      	str	r3, [sp, #32]
 80104dc:	4605      	mov	r5, r0
 80104de:	9b04      	ldr	r3, [sp, #16]
 80104e0:	9801      	ldr	r0, [sp, #4]
 80104e2:	4621      	mov	r1, r4
 80104e4:	f103 3bff 	add.w	fp, r3, #4294967295
 80104e8:	f7ff fafb 	bl	800fae2 <quorem>
 80104ec:	4641      	mov	r1, r8
 80104ee:	9002      	str	r0, [sp, #8]
 80104f0:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 80104f4:	9801      	ldr	r0, [sp, #4]
 80104f6:	f000 fb99 	bl	8010c2c <__mcmp>
 80104fa:	462a      	mov	r2, r5
 80104fc:	9006      	str	r0, [sp, #24]
 80104fe:	4621      	mov	r1, r4
 8010500:	4648      	mov	r0, r9
 8010502:	f000 fbaf 	bl	8010c64 <__mdiff>
 8010506:	68c2      	ldr	r2, [r0, #12]
 8010508:	4606      	mov	r6, r0
 801050a:	b9fa      	cbnz	r2, 801054c <_dtoa_r+0x954>
 801050c:	4601      	mov	r1, r0
 801050e:	9801      	ldr	r0, [sp, #4]
 8010510:	f000 fb8c 	bl	8010c2c <__mcmp>
 8010514:	4602      	mov	r2, r0
 8010516:	4631      	mov	r1, r6
 8010518:	4648      	mov	r0, r9
 801051a:	920a      	str	r2, [sp, #40]	@ 0x28
 801051c:	f000 f954 	bl	80107c8 <_Bfree>
 8010520:	9b07      	ldr	r3, [sp, #28]
 8010522:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010524:	9e04      	ldr	r6, [sp, #16]
 8010526:	ea42 0103 	orr.w	r1, r2, r3
 801052a:	9b08      	ldr	r3, [sp, #32]
 801052c:	4319      	orrs	r1, r3
 801052e:	d10f      	bne.n	8010550 <_dtoa_r+0x958>
 8010530:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010534:	d028      	beq.n	8010588 <_dtoa_r+0x990>
 8010536:	9b06      	ldr	r3, [sp, #24]
 8010538:	2b00      	cmp	r3, #0
 801053a:	dd02      	ble.n	8010542 <_dtoa_r+0x94a>
 801053c:	9b02      	ldr	r3, [sp, #8]
 801053e:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8010542:	f88b a000 	strb.w	sl, [fp]
 8010546:	e55e      	b.n	8010006 <_dtoa_r+0x40e>
 8010548:	4628      	mov	r0, r5
 801054a:	e7bd      	b.n	80104c8 <_dtoa_r+0x8d0>
 801054c:	2201      	movs	r2, #1
 801054e:	e7e2      	b.n	8010516 <_dtoa_r+0x91e>
 8010550:	9b06      	ldr	r3, [sp, #24]
 8010552:	2b00      	cmp	r3, #0
 8010554:	db04      	blt.n	8010560 <_dtoa_r+0x968>
 8010556:	9907      	ldr	r1, [sp, #28]
 8010558:	430b      	orrs	r3, r1
 801055a:	9908      	ldr	r1, [sp, #32]
 801055c:	430b      	orrs	r3, r1
 801055e:	d120      	bne.n	80105a2 <_dtoa_r+0x9aa>
 8010560:	2a00      	cmp	r2, #0
 8010562:	ddee      	ble.n	8010542 <_dtoa_r+0x94a>
 8010564:	9901      	ldr	r1, [sp, #4]
 8010566:	2201      	movs	r2, #1
 8010568:	4648      	mov	r0, r9
 801056a:	f000 faf3 	bl	8010b54 <__lshift>
 801056e:	4621      	mov	r1, r4
 8010570:	9001      	str	r0, [sp, #4]
 8010572:	f000 fb5b 	bl	8010c2c <__mcmp>
 8010576:	2800      	cmp	r0, #0
 8010578:	dc03      	bgt.n	8010582 <_dtoa_r+0x98a>
 801057a:	d1e2      	bne.n	8010542 <_dtoa_r+0x94a>
 801057c:	f01a 0f01 	tst.w	sl, #1
 8010580:	d0df      	beq.n	8010542 <_dtoa_r+0x94a>
 8010582:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8010586:	d1d9      	bne.n	801053c <_dtoa_r+0x944>
 8010588:	2339      	movs	r3, #57	@ 0x39
 801058a:	f88b 3000 	strb.w	r3, [fp]
 801058e:	4633      	mov	r3, r6
 8010590:	461e      	mov	r6, r3
 8010592:	3b01      	subs	r3, #1
 8010594:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8010598:	2a39      	cmp	r2, #57	@ 0x39
 801059a:	d052      	beq.n	8010642 <_dtoa_r+0xa4a>
 801059c:	3201      	adds	r2, #1
 801059e:	701a      	strb	r2, [r3, #0]
 80105a0:	e531      	b.n	8010006 <_dtoa_r+0x40e>
 80105a2:	2a00      	cmp	r2, #0
 80105a4:	dd07      	ble.n	80105b6 <_dtoa_r+0x9be>
 80105a6:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 80105aa:	d0ed      	beq.n	8010588 <_dtoa_r+0x990>
 80105ac:	f10a 0301 	add.w	r3, sl, #1
 80105b0:	f88b 3000 	strb.w	r3, [fp]
 80105b4:	e527      	b.n	8010006 <_dtoa_r+0x40e>
 80105b6:	9b04      	ldr	r3, [sp, #16]
 80105b8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105ba:	f803 ac01 	strb.w	sl, [r3, #-1]
 80105be:	4293      	cmp	r3, r2
 80105c0:	d029      	beq.n	8010616 <_dtoa_r+0xa1e>
 80105c2:	9901      	ldr	r1, [sp, #4]
 80105c4:	2300      	movs	r3, #0
 80105c6:	220a      	movs	r2, #10
 80105c8:	4648      	mov	r0, r9
 80105ca:	f000 f91f 	bl	801080c <__multadd>
 80105ce:	45a8      	cmp	r8, r5
 80105d0:	9001      	str	r0, [sp, #4]
 80105d2:	f04f 0300 	mov.w	r3, #0
 80105d6:	f04f 020a 	mov.w	r2, #10
 80105da:	4641      	mov	r1, r8
 80105dc:	4648      	mov	r0, r9
 80105de:	d107      	bne.n	80105f0 <_dtoa_r+0x9f8>
 80105e0:	f000 f914 	bl	801080c <__multadd>
 80105e4:	4680      	mov	r8, r0
 80105e6:	4605      	mov	r5, r0
 80105e8:	9b04      	ldr	r3, [sp, #16]
 80105ea:	3301      	adds	r3, #1
 80105ec:	9304      	str	r3, [sp, #16]
 80105ee:	e776      	b.n	80104de <_dtoa_r+0x8e6>
 80105f0:	f000 f90c 	bl	801080c <__multadd>
 80105f4:	4629      	mov	r1, r5
 80105f6:	4680      	mov	r8, r0
 80105f8:	2300      	movs	r3, #0
 80105fa:	220a      	movs	r2, #10
 80105fc:	4648      	mov	r0, r9
 80105fe:	f000 f905 	bl	801080c <__multadd>
 8010602:	4605      	mov	r5, r0
 8010604:	e7f0      	b.n	80105e8 <_dtoa_r+0x9f0>
 8010606:	f1bb 0f00 	cmp.w	fp, #0
 801060a:	bfcc      	ite	gt
 801060c:	465e      	movgt	r6, fp
 801060e:	2601      	movle	r6, #1
 8010610:	443e      	add	r6, r7
 8010612:	f04f 0800 	mov.w	r8, #0
 8010616:	9901      	ldr	r1, [sp, #4]
 8010618:	2201      	movs	r2, #1
 801061a:	4648      	mov	r0, r9
 801061c:	f000 fa9a 	bl	8010b54 <__lshift>
 8010620:	4621      	mov	r1, r4
 8010622:	9001      	str	r0, [sp, #4]
 8010624:	f000 fb02 	bl	8010c2c <__mcmp>
 8010628:	2800      	cmp	r0, #0
 801062a:	dcb0      	bgt.n	801058e <_dtoa_r+0x996>
 801062c:	d102      	bne.n	8010634 <_dtoa_r+0xa3c>
 801062e:	f01a 0f01 	tst.w	sl, #1
 8010632:	d1ac      	bne.n	801058e <_dtoa_r+0x996>
 8010634:	4633      	mov	r3, r6
 8010636:	461e      	mov	r6, r3
 8010638:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801063c:	2a30      	cmp	r2, #48	@ 0x30
 801063e:	d0fa      	beq.n	8010636 <_dtoa_r+0xa3e>
 8010640:	e4e1      	b.n	8010006 <_dtoa_r+0x40e>
 8010642:	429f      	cmp	r7, r3
 8010644:	d1a4      	bne.n	8010590 <_dtoa_r+0x998>
 8010646:	9b05      	ldr	r3, [sp, #20]
 8010648:	3301      	adds	r3, #1
 801064a:	9305      	str	r3, [sp, #20]
 801064c:	2331      	movs	r3, #49	@ 0x31
 801064e:	703b      	strb	r3, [r7, #0]
 8010650:	e4d9      	b.n	8010006 <_dtoa_r+0x40e>
 8010652:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8010654:	4f16      	ldr	r7, [pc, #88]	@ (80106b0 <_dtoa_r+0xab8>)
 8010656:	b11b      	cbz	r3, 8010660 <_dtoa_r+0xa68>
 8010658:	f107 0308 	add.w	r3, r7, #8
 801065c:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801065e:	6013      	str	r3, [r2, #0]
 8010660:	4638      	mov	r0, r7
 8010662:	b011      	add	sp, #68	@ 0x44
 8010664:	ecbd 8b02 	vpop	{d8}
 8010668:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801066c:	9b07      	ldr	r3, [sp, #28]
 801066e:	2b01      	cmp	r3, #1
 8010670:	f77f ae2c 	ble.w	80102cc <_dtoa_r+0x6d4>
 8010674:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010676:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010678:	2001      	movs	r0, #1
 801067a:	e64c      	b.n	8010316 <_dtoa_r+0x71e>
 801067c:	f1bb 0f00 	cmp.w	fp, #0
 8010680:	f77f aed8 	ble.w	8010434 <_dtoa_r+0x83c>
 8010684:	463e      	mov	r6, r7
 8010686:	9801      	ldr	r0, [sp, #4]
 8010688:	4621      	mov	r1, r4
 801068a:	f7ff fa2a 	bl	800fae2 <quorem>
 801068e:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8010692:	f806 ab01 	strb.w	sl, [r6], #1
 8010696:	1bf2      	subs	r2, r6, r7
 8010698:	4593      	cmp	fp, r2
 801069a:	ddb4      	ble.n	8010606 <_dtoa_r+0xa0e>
 801069c:	9901      	ldr	r1, [sp, #4]
 801069e:	2300      	movs	r3, #0
 80106a0:	220a      	movs	r2, #10
 80106a2:	4648      	mov	r0, r9
 80106a4:	f000 f8b2 	bl	801080c <__multadd>
 80106a8:	9001      	str	r0, [sp, #4]
 80106aa:	e7ec      	b.n	8010686 <_dtoa_r+0xa8e>
 80106ac:	08013ba0 	.word	0x08013ba0
 80106b0:	08013b24 	.word	0x08013b24

080106b4 <_free_r>:
 80106b4:	b538      	push	{r3, r4, r5, lr}
 80106b6:	4605      	mov	r5, r0
 80106b8:	2900      	cmp	r1, #0
 80106ba:	d041      	beq.n	8010740 <_free_r+0x8c>
 80106bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80106c0:	1f0c      	subs	r4, r1, #4
 80106c2:	2b00      	cmp	r3, #0
 80106c4:	bfb8      	it	lt
 80106c6:	18e4      	addlt	r4, r4, r3
 80106c8:	f7fe fae0 	bl	800ec8c <__malloc_lock>
 80106cc:	4a1d      	ldr	r2, [pc, #116]	@ (8010744 <_free_r+0x90>)
 80106ce:	6813      	ldr	r3, [r2, #0]
 80106d0:	b933      	cbnz	r3, 80106e0 <_free_r+0x2c>
 80106d2:	6063      	str	r3, [r4, #4]
 80106d4:	6014      	str	r4, [r2, #0]
 80106d6:	4628      	mov	r0, r5
 80106d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80106dc:	f7fe badc 	b.w	800ec98 <__malloc_unlock>
 80106e0:	42a3      	cmp	r3, r4
 80106e2:	d908      	bls.n	80106f6 <_free_r+0x42>
 80106e4:	6820      	ldr	r0, [r4, #0]
 80106e6:	1821      	adds	r1, r4, r0
 80106e8:	428b      	cmp	r3, r1
 80106ea:	bf01      	itttt	eq
 80106ec:	6819      	ldreq	r1, [r3, #0]
 80106ee:	685b      	ldreq	r3, [r3, #4]
 80106f0:	1809      	addeq	r1, r1, r0
 80106f2:	6021      	streq	r1, [r4, #0]
 80106f4:	e7ed      	b.n	80106d2 <_free_r+0x1e>
 80106f6:	461a      	mov	r2, r3
 80106f8:	685b      	ldr	r3, [r3, #4]
 80106fa:	b10b      	cbz	r3, 8010700 <_free_r+0x4c>
 80106fc:	42a3      	cmp	r3, r4
 80106fe:	d9fa      	bls.n	80106f6 <_free_r+0x42>
 8010700:	6811      	ldr	r1, [r2, #0]
 8010702:	1850      	adds	r0, r2, r1
 8010704:	42a0      	cmp	r0, r4
 8010706:	d10b      	bne.n	8010720 <_free_r+0x6c>
 8010708:	6820      	ldr	r0, [r4, #0]
 801070a:	4401      	add	r1, r0
 801070c:	1850      	adds	r0, r2, r1
 801070e:	4283      	cmp	r3, r0
 8010710:	6011      	str	r1, [r2, #0]
 8010712:	d1e0      	bne.n	80106d6 <_free_r+0x22>
 8010714:	6818      	ldr	r0, [r3, #0]
 8010716:	685b      	ldr	r3, [r3, #4]
 8010718:	6053      	str	r3, [r2, #4]
 801071a:	4408      	add	r0, r1
 801071c:	6010      	str	r0, [r2, #0]
 801071e:	e7da      	b.n	80106d6 <_free_r+0x22>
 8010720:	d902      	bls.n	8010728 <_free_r+0x74>
 8010722:	230c      	movs	r3, #12
 8010724:	602b      	str	r3, [r5, #0]
 8010726:	e7d6      	b.n	80106d6 <_free_r+0x22>
 8010728:	6820      	ldr	r0, [r4, #0]
 801072a:	1821      	adds	r1, r4, r0
 801072c:	428b      	cmp	r3, r1
 801072e:	bf04      	itt	eq
 8010730:	6819      	ldreq	r1, [r3, #0]
 8010732:	685b      	ldreq	r3, [r3, #4]
 8010734:	6063      	str	r3, [r4, #4]
 8010736:	bf04      	itt	eq
 8010738:	1809      	addeq	r1, r1, r0
 801073a:	6021      	streq	r1, [r4, #0]
 801073c:	6054      	str	r4, [r2, #4]
 801073e:	e7ca      	b.n	80106d6 <_free_r+0x22>
 8010740:	bd38      	pop	{r3, r4, r5, pc}
 8010742:	bf00      	nop
 8010744:	240008e4 	.word	0x240008e4

08010748 <_Balloc>:
 8010748:	b570      	push	{r4, r5, r6, lr}
 801074a:	69c6      	ldr	r6, [r0, #28]
 801074c:	4604      	mov	r4, r0
 801074e:	460d      	mov	r5, r1
 8010750:	b976      	cbnz	r6, 8010770 <_Balloc+0x28>
 8010752:	2010      	movs	r0, #16
 8010754:	f7fe f9e8 	bl	800eb28 <malloc>
 8010758:	4602      	mov	r2, r0
 801075a:	61e0      	str	r0, [r4, #28]
 801075c:	b920      	cbnz	r0, 8010768 <_Balloc+0x20>
 801075e:	4b18      	ldr	r3, [pc, #96]	@ (80107c0 <_Balloc+0x78>)
 8010760:	4818      	ldr	r0, [pc, #96]	@ (80107c4 <_Balloc+0x7c>)
 8010762:	216b      	movs	r1, #107	@ 0x6b
 8010764:	f000 fddc 	bl	8011320 <__assert_func>
 8010768:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801076c:	6006      	str	r6, [r0, #0]
 801076e:	60c6      	str	r6, [r0, #12]
 8010770:	69e6      	ldr	r6, [r4, #28]
 8010772:	68f3      	ldr	r3, [r6, #12]
 8010774:	b183      	cbz	r3, 8010798 <_Balloc+0x50>
 8010776:	69e3      	ldr	r3, [r4, #28]
 8010778:	68db      	ldr	r3, [r3, #12]
 801077a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801077e:	b9b8      	cbnz	r0, 80107b0 <_Balloc+0x68>
 8010780:	2101      	movs	r1, #1
 8010782:	fa01 f605 	lsl.w	r6, r1, r5
 8010786:	1d72      	adds	r2, r6, #5
 8010788:	0092      	lsls	r2, r2, #2
 801078a:	4620      	mov	r0, r4
 801078c:	f000 fde6 	bl	801135c <_calloc_r>
 8010790:	b160      	cbz	r0, 80107ac <_Balloc+0x64>
 8010792:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8010796:	e00e      	b.n	80107b6 <_Balloc+0x6e>
 8010798:	2221      	movs	r2, #33	@ 0x21
 801079a:	2104      	movs	r1, #4
 801079c:	4620      	mov	r0, r4
 801079e:	f000 fddd 	bl	801135c <_calloc_r>
 80107a2:	69e3      	ldr	r3, [r4, #28]
 80107a4:	60f0      	str	r0, [r6, #12]
 80107a6:	68db      	ldr	r3, [r3, #12]
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d1e4      	bne.n	8010776 <_Balloc+0x2e>
 80107ac:	2000      	movs	r0, #0
 80107ae:	bd70      	pop	{r4, r5, r6, pc}
 80107b0:	6802      	ldr	r2, [r0, #0]
 80107b2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80107b6:	2300      	movs	r3, #0
 80107b8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80107bc:	e7f7      	b.n	80107ae <_Balloc+0x66>
 80107be:	bf00      	nop
 80107c0:	08013b31 	.word	0x08013b31
 80107c4:	08013bb1 	.word	0x08013bb1

080107c8 <_Bfree>:
 80107c8:	b570      	push	{r4, r5, r6, lr}
 80107ca:	69c6      	ldr	r6, [r0, #28]
 80107cc:	4605      	mov	r5, r0
 80107ce:	460c      	mov	r4, r1
 80107d0:	b976      	cbnz	r6, 80107f0 <_Bfree+0x28>
 80107d2:	2010      	movs	r0, #16
 80107d4:	f7fe f9a8 	bl	800eb28 <malloc>
 80107d8:	4602      	mov	r2, r0
 80107da:	61e8      	str	r0, [r5, #28]
 80107dc:	b920      	cbnz	r0, 80107e8 <_Bfree+0x20>
 80107de:	4b09      	ldr	r3, [pc, #36]	@ (8010804 <_Bfree+0x3c>)
 80107e0:	4809      	ldr	r0, [pc, #36]	@ (8010808 <_Bfree+0x40>)
 80107e2:	218f      	movs	r1, #143	@ 0x8f
 80107e4:	f000 fd9c 	bl	8011320 <__assert_func>
 80107e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80107ec:	6006      	str	r6, [r0, #0]
 80107ee:	60c6      	str	r6, [r0, #12]
 80107f0:	b13c      	cbz	r4, 8010802 <_Bfree+0x3a>
 80107f2:	69eb      	ldr	r3, [r5, #28]
 80107f4:	6862      	ldr	r2, [r4, #4]
 80107f6:	68db      	ldr	r3, [r3, #12]
 80107f8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80107fc:	6021      	str	r1, [r4, #0]
 80107fe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8010802:	bd70      	pop	{r4, r5, r6, pc}
 8010804:	08013b31 	.word	0x08013b31
 8010808:	08013bb1 	.word	0x08013bb1

0801080c <__multadd>:
 801080c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010810:	690d      	ldr	r5, [r1, #16]
 8010812:	4607      	mov	r7, r0
 8010814:	460c      	mov	r4, r1
 8010816:	461e      	mov	r6, r3
 8010818:	f101 0c14 	add.w	ip, r1, #20
 801081c:	2000      	movs	r0, #0
 801081e:	f8dc 3000 	ldr.w	r3, [ip]
 8010822:	b299      	uxth	r1, r3
 8010824:	fb02 6101 	mla	r1, r2, r1, r6
 8010828:	0c1e      	lsrs	r6, r3, #16
 801082a:	0c0b      	lsrs	r3, r1, #16
 801082c:	fb02 3306 	mla	r3, r2, r6, r3
 8010830:	b289      	uxth	r1, r1
 8010832:	3001      	adds	r0, #1
 8010834:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8010838:	4285      	cmp	r5, r0
 801083a:	f84c 1b04 	str.w	r1, [ip], #4
 801083e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8010842:	dcec      	bgt.n	801081e <__multadd+0x12>
 8010844:	b30e      	cbz	r6, 801088a <__multadd+0x7e>
 8010846:	68a3      	ldr	r3, [r4, #8]
 8010848:	42ab      	cmp	r3, r5
 801084a:	dc19      	bgt.n	8010880 <__multadd+0x74>
 801084c:	6861      	ldr	r1, [r4, #4]
 801084e:	4638      	mov	r0, r7
 8010850:	3101      	adds	r1, #1
 8010852:	f7ff ff79 	bl	8010748 <_Balloc>
 8010856:	4680      	mov	r8, r0
 8010858:	b928      	cbnz	r0, 8010866 <__multadd+0x5a>
 801085a:	4602      	mov	r2, r0
 801085c:	4b0c      	ldr	r3, [pc, #48]	@ (8010890 <__multadd+0x84>)
 801085e:	480d      	ldr	r0, [pc, #52]	@ (8010894 <__multadd+0x88>)
 8010860:	21ba      	movs	r1, #186	@ 0xba
 8010862:	f000 fd5d 	bl	8011320 <__assert_func>
 8010866:	6922      	ldr	r2, [r4, #16]
 8010868:	3202      	adds	r2, #2
 801086a:	f104 010c 	add.w	r1, r4, #12
 801086e:	0092      	lsls	r2, r2, #2
 8010870:	300c      	adds	r0, #12
 8010872:	f7ff f928 	bl	800fac6 <memcpy>
 8010876:	4621      	mov	r1, r4
 8010878:	4638      	mov	r0, r7
 801087a:	f7ff ffa5 	bl	80107c8 <_Bfree>
 801087e:	4644      	mov	r4, r8
 8010880:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010884:	3501      	adds	r5, #1
 8010886:	615e      	str	r6, [r3, #20]
 8010888:	6125      	str	r5, [r4, #16]
 801088a:	4620      	mov	r0, r4
 801088c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010890:	08013ba0 	.word	0x08013ba0
 8010894:	08013bb1 	.word	0x08013bb1

08010898 <__hi0bits>:
 8010898:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 801089c:	4603      	mov	r3, r0
 801089e:	bf36      	itet	cc
 80108a0:	0403      	lslcc	r3, r0, #16
 80108a2:	2000      	movcs	r0, #0
 80108a4:	2010      	movcc	r0, #16
 80108a6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80108aa:	bf3c      	itt	cc
 80108ac:	021b      	lslcc	r3, r3, #8
 80108ae:	3008      	addcc	r0, #8
 80108b0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80108b4:	bf3c      	itt	cc
 80108b6:	011b      	lslcc	r3, r3, #4
 80108b8:	3004      	addcc	r0, #4
 80108ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80108be:	bf3c      	itt	cc
 80108c0:	009b      	lslcc	r3, r3, #2
 80108c2:	3002      	addcc	r0, #2
 80108c4:	2b00      	cmp	r3, #0
 80108c6:	db05      	blt.n	80108d4 <__hi0bits+0x3c>
 80108c8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80108cc:	f100 0001 	add.w	r0, r0, #1
 80108d0:	bf08      	it	eq
 80108d2:	2020      	moveq	r0, #32
 80108d4:	4770      	bx	lr

080108d6 <__lo0bits>:
 80108d6:	6803      	ldr	r3, [r0, #0]
 80108d8:	4602      	mov	r2, r0
 80108da:	f013 0007 	ands.w	r0, r3, #7
 80108de:	d00b      	beq.n	80108f8 <__lo0bits+0x22>
 80108e0:	07d9      	lsls	r1, r3, #31
 80108e2:	d421      	bmi.n	8010928 <__lo0bits+0x52>
 80108e4:	0798      	lsls	r0, r3, #30
 80108e6:	bf49      	itett	mi
 80108e8:	085b      	lsrmi	r3, r3, #1
 80108ea:	089b      	lsrpl	r3, r3, #2
 80108ec:	2001      	movmi	r0, #1
 80108ee:	6013      	strmi	r3, [r2, #0]
 80108f0:	bf5c      	itt	pl
 80108f2:	6013      	strpl	r3, [r2, #0]
 80108f4:	2002      	movpl	r0, #2
 80108f6:	4770      	bx	lr
 80108f8:	b299      	uxth	r1, r3
 80108fa:	b909      	cbnz	r1, 8010900 <__lo0bits+0x2a>
 80108fc:	0c1b      	lsrs	r3, r3, #16
 80108fe:	2010      	movs	r0, #16
 8010900:	b2d9      	uxtb	r1, r3
 8010902:	b909      	cbnz	r1, 8010908 <__lo0bits+0x32>
 8010904:	3008      	adds	r0, #8
 8010906:	0a1b      	lsrs	r3, r3, #8
 8010908:	0719      	lsls	r1, r3, #28
 801090a:	bf04      	itt	eq
 801090c:	091b      	lsreq	r3, r3, #4
 801090e:	3004      	addeq	r0, #4
 8010910:	0799      	lsls	r1, r3, #30
 8010912:	bf04      	itt	eq
 8010914:	089b      	lsreq	r3, r3, #2
 8010916:	3002      	addeq	r0, #2
 8010918:	07d9      	lsls	r1, r3, #31
 801091a:	d403      	bmi.n	8010924 <__lo0bits+0x4e>
 801091c:	085b      	lsrs	r3, r3, #1
 801091e:	f100 0001 	add.w	r0, r0, #1
 8010922:	d003      	beq.n	801092c <__lo0bits+0x56>
 8010924:	6013      	str	r3, [r2, #0]
 8010926:	4770      	bx	lr
 8010928:	2000      	movs	r0, #0
 801092a:	4770      	bx	lr
 801092c:	2020      	movs	r0, #32
 801092e:	4770      	bx	lr

08010930 <__i2b>:
 8010930:	b510      	push	{r4, lr}
 8010932:	460c      	mov	r4, r1
 8010934:	2101      	movs	r1, #1
 8010936:	f7ff ff07 	bl	8010748 <_Balloc>
 801093a:	4602      	mov	r2, r0
 801093c:	b928      	cbnz	r0, 801094a <__i2b+0x1a>
 801093e:	4b05      	ldr	r3, [pc, #20]	@ (8010954 <__i2b+0x24>)
 8010940:	4805      	ldr	r0, [pc, #20]	@ (8010958 <__i2b+0x28>)
 8010942:	f240 1145 	movw	r1, #325	@ 0x145
 8010946:	f000 fceb 	bl	8011320 <__assert_func>
 801094a:	2301      	movs	r3, #1
 801094c:	6144      	str	r4, [r0, #20]
 801094e:	6103      	str	r3, [r0, #16]
 8010950:	bd10      	pop	{r4, pc}
 8010952:	bf00      	nop
 8010954:	08013ba0 	.word	0x08013ba0
 8010958:	08013bb1 	.word	0x08013bb1

0801095c <__multiply>:
 801095c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010960:	4617      	mov	r7, r2
 8010962:	690a      	ldr	r2, [r1, #16]
 8010964:	693b      	ldr	r3, [r7, #16]
 8010966:	429a      	cmp	r2, r3
 8010968:	bfa8      	it	ge
 801096a:	463b      	movge	r3, r7
 801096c:	4689      	mov	r9, r1
 801096e:	bfa4      	itt	ge
 8010970:	460f      	movge	r7, r1
 8010972:	4699      	movge	r9, r3
 8010974:	693d      	ldr	r5, [r7, #16]
 8010976:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801097a:	68bb      	ldr	r3, [r7, #8]
 801097c:	6879      	ldr	r1, [r7, #4]
 801097e:	eb05 060a 	add.w	r6, r5, sl
 8010982:	42b3      	cmp	r3, r6
 8010984:	b085      	sub	sp, #20
 8010986:	bfb8      	it	lt
 8010988:	3101      	addlt	r1, #1
 801098a:	f7ff fedd 	bl	8010748 <_Balloc>
 801098e:	b930      	cbnz	r0, 801099e <__multiply+0x42>
 8010990:	4602      	mov	r2, r0
 8010992:	4b41      	ldr	r3, [pc, #260]	@ (8010a98 <__multiply+0x13c>)
 8010994:	4841      	ldr	r0, [pc, #260]	@ (8010a9c <__multiply+0x140>)
 8010996:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 801099a:	f000 fcc1 	bl	8011320 <__assert_func>
 801099e:	f100 0414 	add.w	r4, r0, #20
 80109a2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80109a6:	4623      	mov	r3, r4
 80109a8:	2200      	movs	r2, #0
 80109aa:	4573      	cmp	r3, lr
 80109ac:	d320      	bcc.n	80109f0 <__multiply+0x94>
 80109ae:	f107 0814 	add.w	r8, r7, #20
 80109b2:	f109 0114 	add.w	r1, r9, #20
 80109b6:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80109ba:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80109be:	9302      	str	r3, [sp, #8]
 80109c0:	1beb      	subs	r3, r5, r7
 80109c2:	3b15      	subs	r3, #21
 80109c4:	f023 0303 	bic.w	r3, r3, #3
 80109c8:	3304      	adds	r3, #4
 80109ca:	3715      	adds	r7, #21
 80109cc:	42bd      	cmp	r5, r7
 80109ce:	bf38      	it	cc
 80109d0:	2304      	movcc	r3, #4
 80109d2:	9301      	str	r3, [sp, #4]
 80109d4:	9b02      	ldr	r3, [sp, #8]
 80109d6:	9103      	str	r1, [sp, #12]
 80109d8:	428b      	cmp	r3, r1
 80109da:	d80c      	bhi.n	80109f6 <__multiply+0x9a>
 80109dc:	2e00      	cmp	r6, #0
 80109de:	dd03      	ble.n	80109e8 <__multiply+0x8c>
 80109e0:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80109e4:	2b00      	cmp	r3, #0
 80109e6:	d055      	beq.n	8010a94 <__multiply+0x138>
 80109e8:	6106      	str	r6, [r0, #16]
 80109ea:	b005      	add	sp, #20
 80109ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109f0:	f843 2b04 	str.w	r2, [r3], #4
 80109f4:	e7d9      	b.n	80109aa <__multiply+0x4e>
 80109f6:	f8b1 a000 	ldrh.w	sl, [r1]
 80109fa:	f1ba 0f00 	cmp.w	sl, #0
 80109fe:	d01f      	beq.n	8010a40 <__multiply+0xe4>
 8010a00:	46c4      	mov	ip, r8
 8010a02:	46a1      	mov	r9, r4
 8010a04:	2700      	movs	r7, #0
 8010a06:	f85c 2b04 	ldr.w	r2, [ip], #4
 8010a0a:	f8d9 3000 	ldr.w	r3, [r9]
 8010a0e:	fa1f fb82 	uxth.w	fp, r2
 8010a12:	b29b      	uxth	r3, r3
 8010a14:	fb0a 330b 	mla	r3, sl, fp, r3
 8010a18:	443b      	add	r3, r7
 8010a1a:	f8d9 7000 	ldr.w	r7, [r9]
 8010a1e:	0c12      	lsrs	r2, r2, #16
 8010a20:	0c3f      	lsrs	r7, r7, #16
 8010a22:	fb0a 7202 	mla	r2, sl, r2, r7
 8010a26:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8010a2a:	b29b      	uxth	r3, r3
 8010a2c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a30:	4565      	cmp	r5, ip
 8010a32:	f849 3b04 	str.w	r3, [r9], #4
 8010a36:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8010a3a:	d8e4      	bhi.n	8010a06 <__multiply+0xaa>
 8010a3c:	9b01      	ldr	r3, [sp, #4]
 8010a3e:	50e7      	str	r7, [r4, r3]
 8010a40:	9b03      	ldr	r3, [sp, #12]
 8010a42:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8010a46:	3104      	adds	r1, #4
 8010a48:	f1b9 0f00 	cmp.w	r9, #0
 8010a4c:	d020      	beq.n	8010a90 <__multiply+0x134>
 8010a4e:	6823      	ldr	r3, [r4, #0]
 8010a50:	4647      	mov	r7, r8
 8010a52:	46a4      	mov	ip, r4
 8010a54:	f04f 0a00 	mov.w	sl, #0
 8010a58:	f8b7 b000 	ldrh.w	fp, [r7]
 8010a5c:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8010a60:	fb09 220b 	mla	r2, r9, fp, r2
 8010a64:	4452      	add	r2, sl
 8010a66:	b29b      	uxth	r3, r3
 8010a68:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8010a6c:	f84c 3b04 	str.w	r3, [ip], #4
 8010a70:	f857 3b04 	ldr.w	r3, [r7], #4
 8010a74:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010a78:	f8bc 3000 	ldrh.w	r3, [ip]
 8010a7c:	fb09 330a 	mla	r3, r9, sl, r3
 8010a80:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8010a84:	42bd      	cmp	r5, r7
 8010a86:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8010a8a:	d8e5      	bhi.n	8010a58 <__multiply+0xfc>
 8010a8c:	9a01      	ldr	r2, [sp, #4]
 8010a8e:	50a3      	str	r3, [r4, r2]
 8010a90:	3404      	adds	r4, #4
 8010a92:	e79f      	b.n	80109d4 <__multiply+0x78>
 8010a94:	3e01      	subs	r6, #1
 8010a96:	e7a1      	b.n	80109dc <__multiply+0x80>
 8010a98:	08013ba0 	.word	0x08013ba0
 8010a9c:	08013bb1 	.word	0x08013bb1

08010aa0 <__pow5mult>:
 8010aa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010aa4:	4615      	mov	r5, r2
 8010aa6:	f012 0203 	ands.w	r2, r2, #3
 8010aaa:	4607      	mov	r7, r0
 8010aac:	460e      	mov	r6, r1
 8010aae:	d007      	beq.n	8010ac0 <__pow5mult+0x20>
 8010ab0:	4c25      	ldr	r4, [pc, #148]	@ (8010b48 <__pow5mult+0xa8>)
 8010ab2:	3a01      	subs	r2, #1
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010aba:	f7ff fea7 	bl	801080c <__multadd>
 8010abe:	4606      	mov	r6, r0
 8010ac0:	10ad      	asrs	r5, r5, #2
 8010ac2:	d03d      	beq.n	8010b40 <__pow5mult+0xa0>
 8010ac4:	69fc      	ldr	r4, [r7, #28]
 8010ac6:	b97c      	cbnz	r4, 8010ae8 <__pow5mult+0x48>
 8010ac8:	2010      	movs	r0, #16
 8010aca:	f7fe f82d 	bl	800eb28 <malloc>
 8010ace:	4602      	mov	r2, r0
 8010ad0:	61f8      	str	r0, [r7, #28]
 8010ad2:	b928      	cbnz	r0, 8010ae0 <__pow5mult+0x40>
 8010ad4:	4b1d      	ldr	r3, [pc, #116]	@ (8010b4c <__pow5mult+0xac>)
 8010ad6:	481e      	ldr	r0, [pc, #120]	@ (8010b50 <__pow5mult+0xb0>)
 8010ad8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8010adc:	f000 fc20 	bl	8011320 <__assert_func>
 8010ae0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010ae4:	6004      	str	r4, [r0, #0]
 8010ae6:	60c4      	str	r4, [r0, #12]
 8010ae8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8010aec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010af0:	b94c      	cbnz	r4, 8010b06 <__pow5mult+0x66>
 8010af2:	f240 2171 	movw	r1, #625	@ 0x271
 8010af6:	4638      	mov	r0, r7
 8010af8:	f7ff ff1a 	bl	8010930 <__i2b>
 8010afc:	2300      	movs	r3, #0
 8010afe:	f8c8 0008 	str.w	r0, [r8, #8]
 8010b02:	4604      	mov	r4, r0
 8010b04:	6003      	str	r3, [r0, #0]
 8010b06:	f04f 0900 	mov.w	r9, #0
 8010b0a:	07eb      	lsls	r3, r5, #31
 8010b0c:	d50a      	bpl.n	8010b24 <__pow5mult+0x84>
 8010b0e:	4631      	mov	r1, r6
 8010b10:	4622      	mov	r2, r4
 8010b12:	4638      	mov	r0, r7
 8010b14:	f7ff ff22 	bl	801095c <__multiply>
 8010b18:	4631      	mov	r1, r6
 8010b1a:	4680      	mov	r8, r0
 8010b1c:	4638      	mov	r0, r7
 8010b1e:	f7ff fe53 	bl	80107c8 <_Bfree>
 8010b22:	4646      	mov	r6, r8
 8010b24:	106d      	asrs	r5, r5, #1
 8010b26:	d00b      	beq.n	8010b40 <__pow5mult+0xa0>
 8010b28:	6820      	ldr	r0, [r4, #0]
 8010b2a:	b938      	cbnz	r0, 8010b3c <__pow5mult+0x9c>
 8010b2c:	4622      	mov	r2, r4
 8010b2e:	4621      	mov	r1, r4
 8010b30:	4638      	mov	r0, r7
 8010b32:	f7ff ff13 	bl	801095c <__multiply>
 8010b36:	6020      	str	r0, [r4, #0]
 8010b38:	f8c0 9000 	str.w	r9, [r0]
 8010b3c:	4604      	mov	r4, r0
 8010b3e:	e7e4      	b.n	8010b0a <__pow5mult+0x6a>
 8010b40:	4630      	mov	r0, r6
 8010b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010b46:	bf00      	nop
 8010b48:	08013c64 	.word	0x08013c64
 8010b4c:	08013b31 	.word	0x08013b31
 8010b50:	08013bb1 	.word	0x08013bb1

08010b54 <__lshift>:
 8010b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010b58:	460c      	mov	r4, r1
 8010b5a:	6849      	ldr	r1, [r1, #4]
 8010b5c:	6923      	ldr	r3, [r4, #16]
 8010b5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8010b62:	68a3      	ldr	r3, [r4, #8]
 8010b64:	4607      	mov	r7, r0
 8010b66:	4691      	mov	r9, r2
 8010b68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010b6c:	f108 0601 	add.w	r6, r8, #1
 8010b70:	42b3      	cmp	r3, r6
 8010b72:	db0b      	blt.n	8010b8c <__lshift+0x38>
 8010b74:	4638      	mov	r0, r7
 8010b76:	f7ff fde7 	bl	8010748 <_Balloc>
 8010b7a:	4605      	mov	r5, r0
 8010b7c:	b948      	cbnz	r0, 8010b92 <__lshift+0x3e>
 8010b7e:	4602      	mov	r2, r0
 8010b80:	4b28      	ldr	r3, [pc, #160]	@ (8010c24 <__lshift+0xd0>)
 8010b82:	4829      	ldr	r0, [pc, #164]	@ (8010c28 <__lshift+0xd4>)
 8010b84:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010b88:	f000 fbca 	bl	8011320 <__assert_func>
 8010b8c:	3101      	adds	r1, #1
 8010b8e:	005b      	lsls	r3, r3, #1
 8010b90:	e7ee      	b.n	8010b70 <__lshift+0x1c>
 8010b92:	2300      	movs	r3, #0
 8010b94:	f100 0114 	add.w	r1, r0, #20
 8010b98:	f100 0210 	add.w	r2, r0, #16
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	4553      	cmp	r3, sl
 8010ba0:	db33      	blt.n	8010c0a <__lshift+0xb6>
 8010ba2:	6920      	ldr	r0, [r4, #16]
 8010ba4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010ba8:	f104 0314 	add.w	r3, r4, #20
 8010bac:	f019 091f 	ands.w	r9, r9, #31
 8010bb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010bb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010bb8:	d02b      	beq.n	8010c12 <__lshift+0xbe>
 8010bba:	f1c9 0e20 	rsb	lr, r9, #32
 8010bbe:	468a      	mov	sl, r1
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	6818      	ldr	r0, [r3, #0]
 8010bc4:	fa00 f009 	lsl.w	r0, r0, r9
 8010bc8:	4310      	orrs	r0, r2
 8010bca:	f84a 0b04 	str.w	r0, [sl], #4
 8010bce:	f853 2b04 	ldr.w	r2, [r3], #4
 8010bd2:	459c      	cmp	ip, r3
 8010bd4:	fa22 f20e 	lsr.w	r2, r2, lr
 8010bd8:	d8f3      	bhi.n	8010bc2 <__lshift+0x6e>
 8010bda:	ebac 0304 	sub.w	r3, ip, r4
 8010bde:	3b15      	subs	r3, #21
 8010be0:	f023 0303 	bic.w	r3, r3, #3
 8010be4:	3304      	adds	r3, #4
 8010be6:	f104 0015 	add.w	r0, r4, #21
 8010bea:	4560      	cmp	r0, ip
 8010bec:	bf88      	it	hi
 8010bee:	2304      	movhi	r3, #4
 8010bf0:	50ca      	str	r2, [r1, r3]
 8010bf2:	b10a      	cbz	r2, 8010bf8 <__lshift+0xa4>
 8010bf4:	f108 0602 	add.w	r6, r8, #2
 8010bf8:	3e01      	subs	r6, #1
 8010bfa:	4638      	mov	r0, r7
 8010bfc:	612e      	str	r6, [r5, #16]
 8010bfe:	4621      	mov	r1, r4
 8010c00:	f7ff fde2 	bl	80107c8 <_Bfree>
 8010c04:	4628      	mov	r0, r5
 8010c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010c0a:	f842 0f04 	str.w	r0, [r2, #4]!
 8010c0e:	3301      	adds	r3, #1
 8010c10:	e7c5      	b.n	8010b9e <__lshift+0x4a>
 8010c12:	3904      	subs	r1, #4
 8010c14:	f853 2b04 	ldr.w	r2, [r3], #4
 8010c18:	f841 2f04 	str.w	r2, [r1, #4]!
 8010c1c:	459c      	cmp	ip, r3
 8010c1e:	d8f9      	bhi.n	8010c14 <__lshift+0xc0>
 8010c20:	e7ea      	b.n	8010bf8 <__lshift+0xa4>
 8010c22:	bf00      	nop
 8010c24:	08013ba0 	.word	0x08013ba0
 8010c28:	08013bb1 	.word	0x08013bb1

08010c2c <__mcmp>:
 8010c2c:	690a      	ldr	r2, [r1, #16]
 8010c2e:	4603      	mov	r3, r0
 8010c30:	6900      	ldr	r0, [r0, #16]
 8010c32:	1a80      	subs	r0, r0, r2
 8010c34:	b530      	push	{r4, r5, lr}
 8010c36:	d10e      	bne.n	8010c56 <__mcmp+0x2a>
 8010c38:	3314      	adds	r3, #20
 8010c3a:	3114      	adds	r1, #20
 8010c3c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8010c40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010c44:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010c48:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010c4c:	4295      	cmp	r5, r2
 8010c4e:	d003      	beq.n	8010c58 <__mcmp+0x2c>
 8010c50:	d205      	bcs.n	8010c5e <__mcmp+0x32>
 8010c52:	f04f 30ff 	mov.w	r0, #4294967295
 8010c56:	bd30      	pop	{r4, r5, pc}
 8010c58:	42a3      	cmp	r3, r4
 8010c5a:	d3f3      	bcc.n	8010c44 <__mcmp+0x18>
 8010c5c:	e7fb      	b.n	8010c56 <__mcmp+0x2a>
 8010c5e:	2001      	movs	r0, #1
 8010c60:	e7f9      	b.n	8010c56 <__mcmp+0x2a>
	...

08010c64 <__mdiff>:
 8010c64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c68:	4689      	mov	r9, r1
 8010c6a:	4606      	mov	r6, r0
 8010c6c:	4611      	mov	r1, r2
 8010c6e:	4648      	mov	r0, r9
 8010c70:	4614      	mov	r4, r2
 8010c72:	f7ff ffdb 	bl	8010c2c <__mcmp>
 8010c76:	1e05      	subs	r5, r0, #0
 8010c78:	d112      	bne.n	8010ca0 <__mdiff+0x3c>
 8010c7a:	4629      	mov	r1, r5
 8010c7c:	4630      	mov	r0, r6
 8010c7e:	f7ff fd63 	bl	8010748 <_Balloc>
 8010c82:	4602      	mov	r2, r0
 8010c84:	b928      	cbnz	r0, 8010c92 <__mdiff+0x2e>
 8010c86:	4b3f      	ldr	r3, [pc, #252]	@ (8010d84 <__mdiff+0x120>)
 8010c88:	f240 2137 	movw	r1, #567	@ 0x237
 8010c8c:	483e      	ldr	r0, [pc, #248]	@ (8010d88 <__mdiff+0x124>)
 8010c8e:	f000 fb47 	bl	8011320 <__assert_func>
 8010c92:	2301      	movs	r3, #1
 8010c94:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010c98:	4610      	mov	r0, r2
 8010c9a:	b003      	add	sp, #12
 8010c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ca0:	bfbc      	itt	lt
 8010ca2:	464b      	movlt	r3, r9
 8010ca4:	46a1      	movlt	r9, r4
 8010ca6:	4630      	mov	r0, r6
 8010ca8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010cac:	bfba      	itte	lt
 8010cae:	461c      	movlt	r4, r3
 8010cb0:	2501      	movlt	r5, #1
 8010cb2:	2500      	movge	r5, #0
 8010cb4:	f7ff fd48 	bl	8010748 <_Balloc>
 8010cb8:	4602      	mov	r2, r0
 8010cba:	b918      	cbnz	r0, 8010cc4 <__mdiff+0x60>
 8010cbc:	4b31      	ldr	r3, [pc, #196]	@ (8010d84 <__mdiff+0x120>)
 8010cbe:	f240 2145 	movw	r1, #581	@ 0x245
 8010cc2:	e7e3      	b.n	8010c8c <__mdiff+0x28>
 8010cc4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010cc8:	6926      	ldr	r6, [r4, #16]
 8010cca:	60c5      	str	r5, [r0, #12]
 8010ccc:	f109 0310 	add.w	r3, r9, #16
 8010cd0:	f109 0514 	add.w	r5, r9, #20
 8010cd4:	f104 0e14 	add.w	lr, r4, #20
 8010cd8:	f100 0b14 	add.w	fp, r0, #20
 8010cdc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8010ce0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8010ce4:	9301      	str	r3, [sp, #4]
 8010ce6:	46d9      	mov	r9, fp
 8010ce8:	f04f 0c00 	mov.w	ip, #0
 8010cec:	9b01      	ldr	r3, [sp, #4]
 8010cee:	f85e 0b04 	ldr.w	r0, [lr], #4
 8010cf2:	f853 af04 	ldr.w	sl, [r3, #4]!
 8010cf6:	9301      	str	r3, [sp, #4]
 8010cf8:	fa1f f38a 	uxth.w	r3, sl
 8010cfc:	4619      	mov	r1, r3
 8010cfe:	b283      	uxth	r3, r0
 8010d00:	1acb      	subs	r3, r1, r3
 8010d02:	0c00      	lsrs	r0, r0, #16
 8010d04:	4463      	add	r3, ip
 8010d06:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8010d0a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8010d0e:	b29b      	uxth	r3, r3
 8010d10:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8010d14:	4576      	cmp	r6, lr
 8010d16:	f849 3b04 	str.w	r3, [r9], #4
 8010d1a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010d1e:	d8e5      	bhi.n	8010cec <__mdiff+0x88>
 8010d20:	1b33      	subs	r3, r6, r4
 8010d22:	3b15      	subs	r3, #21
 8010d24:	f023 0303 	bic.w	r3, r3, #3
 8010d28:	3415      	adds	r4, #21
 8010d2a:	3304      	adds	r3, #4
 8010d2c:	42a6      	cmp	r6, r4
 8010d2e:	bf38      	it	cc
 8010d30:	2304      	movcc	r3, #4
 8010d32:	441d      	add	r5, r3
 8010d34:	445b      	add	r3, fp
 8010d36:	461e      	mov	r6, r3
 8010d38:	462c      	mov	r4, r5
 8010d3a:	4544      	cmp	r4, r8
 8010d3c:	d30e      	bcc.n	8010d5c <__mdiff+0xf8>
 8010d3e:	f108 0103 	add.w	r1, r8, #3
 8010d42:	1b49      	subs	r1, r1, r5
 8010d44:	f021 0103 	bic.w	r1, r1, #3
 8010d48:	3d03      	subs	r5, #3
 8010d4a:	45a8      	cmp	r8, r5
 8010d4c:	bf38      	it	cc
 8010d4e:	2100      	movcc	r1, #0
 8010d50:	440b      	add	r3, r1
 8010d52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010d56:	b191      	cbz	r1, 8010d7e <__mdiff+0x11a>
 8010d58:	6117      	str	r7, [r2, #16]
 8010d5a:	e79d      	b.n	8010c98 <__mdiff+0x34>
 8010d5c:	f854 1b04 	ldr.w	r1, [r4], #4
 8010d60:	46e6      	mov	lr, ip
 8010d62:	0c08      	lsrs	r0, r1, #16
 8010d64:	fa1c fc81 	uxtah	ip, ip, r1
 8010d68:	4471      	add	r1, lr
 8010d6a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8010d6e:	b289      	uxth	r1, r1
 8010d70:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010d74:	f846 1b04 	str.w	r1, [r6], #4
 8010d78:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010d7c:	e7dd      	b.n	8010d3a <__mdiff+0xd6>
 8010d7e:	3f01      	subs	r7, #1
 8010d80:	e7e7      	b.n	8010d52 <__mdiff+0xee>
 8010d82:	bf00      	nop
 8010d84:	08013ba0 	.word	0x08013ba0
 8010d88:	08013bb1 	.word	0x08013bb1

08010d8c <__d2b>:
 8010d8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8010d90:	460f      	mov	r7, r1
 8010d92:	2101      	movs	r1, #1
 8010d94:	ec59 8b10 	vmov	r8, r9, d0
 8010d98:	4616      	mov	r6, r2
 8010d9a:	f7ff fcd5 	bl	8010748 <_Balloc>
 8010d9e:	4604      	mov	r4, r0
 8010da0:	b930      	cbnz	r0, 8010db0 <__d2b+0x24>
 8010da2:	4602      	mov	r2, r0
 8010da4:	4b23      	ldr	r3, [pc, #140]	@ (8010e34 <__d2b+0xa8>)
 8010da6:	4824      	ldr	r0, [pc, #144]	@ (8010e38 <__d2b+0xac>)
 8010da8:	f240 310f 	movw	r1, #783	@ 0x30f
 8010dac:	f000 fab8 	bl	8011320 <__assert_func>
 8010db0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010db4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010db8:	b10d      	cbz	r5, 8010dbe <__d2b+0x32>
 8010dba:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8010dbe:	9301      	str	r3, [sp, #4]
 8010dc0:	f1b8 0300 	subs.w	r3, r8, #0
 8010dc4:	d023      	beq.n	8010e0e <__d2b+0x82>
 8010dc6:	4668      	mov	r0, sp
 8010dc8:	9300      	str	r3, [sp, #0]
 8010dca:	f7ff fd84 	bl	80108d6 <__lo0bits>
 8010dce:	e9dd 1200 	ldrd	r1, r2, [sp]
 8010dd2:	b1d0      	cbz	r0, 8010e0a <__d2b+0x7e>
 8010dd4:	f1c0 0320 	rsb	r3, r0, #32
 8010dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8010ddc:	430b      	orrs	r3, r1
 8010dde:	40c2      	lsrs	r2, r0
 8010de0:	6163      	str	r3, [r4, #20]
 8010de2:	9201      	str	r2, [sp, #4]
 8010de4:	9b01      	ldr	r3, [sp, #4]
 8010de6:	61a3      	str	r3, [r4, #24]
 8010de8:	2b00      	cmp	r3, #0
 8010dea:	bf0c      	ite	eq
 8010dec:	2201      	moveq	r2, #1
 8010dee:	2202      	movne	r2, #2
 8010df0:	6122      	str	r2, [r4, #16]
 8010df2:	b1a5      	cbz	r5, 8010e1e <__d2b+0x92>
 8010df4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8010df8:	4405      	add	r5, r0
 8010dfa:	603d      	str	r5, [r7, #0]
 8010dfc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8010e00:	6030      	str	r0, [r6, #0]
 8010e02:	4620      	mov	r0, r4
 8010e04:	b003      	add	sp, #12
 8010e06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010e0a:	6161      	str	r1, [r4, #20]
 8010e0c:	e7ea      	b.n	8010de4 <__d2b+0x58>
 8010e0e:	a801      	add	r0, sp, #4
 8010e10:	f7ff fd61 	bl	80108d6 <__lo0bits>
 8010e14:	9b01      	ldr	r3, [sp, #4]
 8010e16:	6163      	str	r3, [r4, #20]
 8010e18:	3020      	adds	r0, #32
 8010e1a:	2201      	movs	r2, #1
 8010e1c:	e7e8      	b.n	8010df0 <__d2b+0x64>
 8010e1e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8010e22:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8010e26:	6038      	str	r0, [r7, #0]
 8010e28:	6918      	ldr	r0, [r3, #16]
 8010e2a:	f7ff fd35 	bl	8010898 <__hi0bits>
 8010e2e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8010e32:	e7e5      	b.n	8010e00 <__d2b+0x74>
 8010e34:	08013ba0 	.word	0x08013ba0
 8010e38:	08013bb1 	.word	0x08013bb1

08010e3c <__sfputc_r>:
 8010e3c:	6893      	ldr	r3, [r2, #8]
 8010e3e:	3b01      	subs	r3, #1
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	b410      	push	{r4}
 8010e44:	6093      	str	r3, [r2, #8]
 8010e46:	da08      	bge.n	8010e5a <__sfputc_r+0x1e>
 8010e48:	6994      	ldr	r4, [r2, #24]
 8010e4a:	42a3      	cmp	r3, r4
 8010e4c:	db01      	blt.n	8010e52 <__sfputc_r+0x16>
 8010e4e:	290a      	cmp	r1, #10
 8010e50:	d103      	bne.n	8010e5a <__sfputc_r+0x1e>
 8010e52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e56:	f7fe bcce 	b.w	800f7f6 <__swbuf_r>
 8010e5a:	6813      	ldr	r3, [r2, #0]
 8010e5c:	1c58      	adds	r0, r3, #1
 8010e5e:	6010      	str	r0, [r2, #0]
 8010e60:	7019      	strb	r1, [r3, #0]
 8010e62:	4608      	mov	r0, r1
 8010e64:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010e68:	4770      	bx	lr

08010e6a <__sfputs_r>:
 8010e6a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010e6c:	4606      	mov	r6, r0
 8010e6e:	460f      	mov	r7, r1
 8010e70:	4614      	mov	r4, r2
 8010e72:	18d5      	adds	r5, r2, r3
 8010e74:	42ac      	cmp	r4, r5
 8010e76:	d101      	bne.n	8010e7c <__sfputs_r+0x12>
 8010e78:	2000      	movs	r0, #0
 8010e7a:	e007      	b.n	8010e8c <__sfputs_r+0x22>
 8010e7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010e80:	463a      	mov	r2, r7
 8010e82:	4630      	mov	r0, r6
 8010e84:	f7ff ffda 	bl	8010e3c <__sfputc_r>
 8010e88:	1c43      	adds	r3, r0, #1
 8010e8a:	d1f3      	bne.n	8010e74 <__sfputs_r+0xa>
 8010e8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010e90 <_vfiprintf_r>:
 8010e90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e94:	460d      	mov	r5, r1
 8010e96:	b09d      	sub	sp, #116	@ 0x74
 8010e98:	4614      	mov	r4, r2
 8010e9a:	4698      	mov	r8, r3
 8010e9c:	4606      	mov	r6, r0
 8010e9e:	b118      	cbz	r0, 8010ea8 <_vfiprintf_r+0x18>
 8010ea0:	6a03      	ldr	r3, [r0, #32]
 8010ea2:	b90b      	cbnz	r3, 8010ea8 <_vfiprintf_r+0x18>
 8010ea4:	f7fe fbbe 	bl	800f624 <__sinit>
 8010ea8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010eaa:	07d9      	lsls	r1, r3, #31
 8010eac:	d405      	bmi.n	8010eba <_vfiprintf_r+0x2a>
 8010eae:	89ab      	ldrh	r3, [r5, #12]
 8010eb0:	059a      	lsls	r2, r3, #22
 8010eb2:	d402      	bmi.n	8010eba <_vfiprintf_r+0x2a>
 8010eb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010eb6:	f7fe fdfc 	bl	800fab2 <__retarget_lock_acquire_recursive>
 8010eba:	89ab      	ldrh	r3, [r5, #12]
 8010ebc:	071b      	lsls	r3, r3, #28
 8010ebe:	d501      	bpl.n	8010ec4 <_vfiprintf_r+0x34>
 8010ec0:	692b      	ldr	r3, [r5, #16]
 8010ec2:	b99b      	cbnz	r3, 8010eec <_vfiprintf_r+0x5c>
 8010ec4:	4629      	mov	r1, r5
 8010ec6:	4630      	mov	r0, r6
 8010ec8:	f7fe fcd4 	bl	800f874 <__swsetup_r>
 8010ecc:	b170      	cbz	r0, 8010eec <_vfiprintf_r+0x5c>
 8010ece:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010ed0:	07dc      	lsls	r4, r3, #31
 8010ed2:	d504      	bpl.n	8010ede <_vfiprintf_r+0x4e>
 8010ed4:	f04f 30ff 	mov.w	r0, #4294967295
 8010ed8:	b01d      	add	sp, #116	@ 0x74
 8010eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ede:	89ab      	ldrh	r3, [r5, #12]
 8010ee0:	0598      	lsls	r0, r3, #22
 8010ee2:	d4f7      	bmi.n	8010ed4 <_vfiprintf_r+0x44>
 8010ee4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010ee6:	f7fe fde5 	bl	800fab4 <__retarget_lock_release_recursive>
 8010eea:	e7f3      	b.n	8010ed4 <_vfiprintf_r+0x44>
 8010eec:	2300      	movs	r3, #0
 8010eee:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ef0:	2320      	movs	r3, #32
 8010ef2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8010ef6:	f8cd 800c 	str.w	r8, [sp, #12]
 8010efa:	2330      	movs	r3, #48	@ 0x30
 8010efc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80110ac <_vfiprintf_r+0x21c>
 8010f00:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8010f04:	f04f 0901 	mov.w	r9, #1
 8010f08:	4623      	mov	r3, r4
 8010f0a:	469a      	mov	sl, r3
 8010f0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010f10:	b10a      	cbz	r2, 8010f16 <_vfiprintf_r+0x86>
 8010f12:	2a25      	cmp	r2, #37	@ 0x25
 8010f14:	d1f9      	bne.n	8010f0a <_vfiprintf_r+0x7a>
 8010f16:	ebba 0b04 	subs.w	fp, sl, r4
 8010f1a:	d00b      	beq.n	8010f34 <_vfiprintf_r+0xa4>
 8010f1c:	465b      	mov	r3, fp
 8010f1e:	4622      	mov	r2, r4
 8010f20:	4629      	mov	r1, r5
 8010f22:	4630      	mov	r0, r6
 8010f24:	f7ff ffa1 	bl	8010e6a <__sfputs_r>
 8010f28:	3001      	adds	r0, #1
 8010f2a:	f000 80a7 	beq.w	801107c <_vfiprintf_r+0x1ec>
 8010f2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010f30:	445a      	add	r2, fp
 8010f32:	9209      	str	r2, [sp, #36]	@ 0x24
 8010f34:	f89a 3000 	ldrb.w	r3, [sl]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	f000 809f 	beq.w	801107c <_vfiprintf_r+0x1ec>
 8010f3e:	2300      	movs	r3, #0
 8010f40:	f04f 32ff 	mov.w	r2, #4294967295
 8010f44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8010f48:	f10a 0a01 	add.w	sl, sl, #1
 8010f4c:	9304      	str	r3, [sp, #16]
 8010f4e:	9307      	str	r3, [sp, #28]
 8010f50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010f54:	931a      	str	r3, [sp, #104]	@ 0x68
 8010f56:	4654      	mov	r4, sl
 8010f58:	2205      	movs	r2, #5
 8010f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010f5e:	4853      	ldr	r0, [pc, #332]	@ (80110ac <_vfiprintf_r+0x21c>)
 8010f60:	f7ef f9ce 	bl	8000300 <memchr>
 8010f64:	9a04      	ldr	r2, [sp, #16]
 8010f66:	b9d8      	cbnz	r0, 8010fa0 <_vfiprintf_r+0x110>
 8010f68:	06d1      	lsls	r1, r2, #27
 8010f6a:	bf44      	itt	mi
 8010f6c:	2320      	movmi	r3, #32
 8010f6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f72:	0713      	lsls	r3, r2, #28
 8010f74:	bf44      	itt	mi
 8010f76:	232b      	movmi	r3, #43	@ 0x2b
 8010f78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010f7c:	f89a 3000 	ldrb.w	r3, [sl]
 8010f80:	2b2a      	cmp	r3, #42	@ 0x2a
 8010f82:	d015      	beq.n	8010fb0 <_vfiprintf_r+0x120>
 8010f84:	9a07      	ldr	r2, [sp, #28]
 8010f86:	4654      	mov	r4, sl
 8010f88:	2000      	movs	r0, #0
 8010f8a:	f04f 0c0a 	mov.w	ip, #10
 8010f8e:	4621      	mov	r1, r4
 8010f90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010f94:	3b30      	subs	r3, #48	@ 0x30
 8010f96:	2b09      	cmp	r3, #9
 8010f98:	d94b      	bls.n	8011032 <_vfiprintf_r+0x1a2>
 8010f9a:	b1b0      	cbz	r0, 8010fca <_vfiprintf_r+0x13a>
 8010f9c:	9207      	str	r2, [sp, #28]
 8010f9e:	e014      	b.n	8010fca <_vfiprintf_r+0x13a>
 8010fa0:	eba0 0308 	sub.w	r3, r0, r8
 8010fa4:	fa09 f303 	lsl.w	r3, r9, r3
 8010fa8:	4313      	orrs	r3, r2
 8010faa:	9304      	str	r3, [sp, #16]
 8010fac:	46a2      	mov	sl, r4
 8010fae:	e7d2      	b.n	8010f56 <_vfiprintf_r+0xc6>
 8010fb0:	9b03      	ldr	r3, [sp, #12]
 8010fb2:	1d19      	adds	r1, r3, #4
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	9103      	str	r1, [sp, #12]
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	bfbb      	ittet	lt
 8010fbc:	425b      	neglt	r3, r3
 8010fbe:	f042 0202 	orrlt.w	r2, r2, #2
 8010fc2:	9307      	strge	r3, [sp, #28]
 8010fc4:	9307      	strlt	r3, [sp, #28]
 8010fc6:	bfb8      	it	lt
 8010fc8:	9204      	strlt	r2, [sp, #16]
 8010fca:	7823      	ldrb	r3, [r4, #0]
 8010fcc:	2b2e      	cmp	r3, #46	@ 0x2e
 8010fce:	d10a      	bne.n	8010fe6 <_vfiprintf_r+0x156>
 8010fd0:	7863      	ldrb	r3, [r4, #1]
 8010fd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8010fd4:	d132      	bne.n	801103c <_vfiprintf_r+0x1ac>
 8010fd6:	9b03      	ldr	r3, [sp, #12]
 8010fd8:	1d1a      	adds	r2, r3, #4
 8010fda:	681b      	ldr	r3, [r3, #0]
 8010fdc:	9203      	str	r2, [sp, #12]
 8010fde:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010fe2:	3402      	adds	r4, #2
 8010fe4:	9305      	str	r3, [sp, #20]
 8010fe6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80110bc <_vfiprintf_r+0x22c>
 8010fea:	7821      	ldrb	r1, [r4, #0]
 8010fec:	2203      	movs	r2, #3
 8010fee:	4650      	mov	r0, sl
 8010ff0:	f7ef f986 	bl	8000300 <memchr>
 8010ff4:	b138      	cbz	r0, 8011006 <_vfiprintf_r+0x176>
 8010ff6:	9b04      	ldr	r3, [sp, #16]
 8010ff8:	eba0 000a 	sub.w	r0, r0, sl
 8010ffc:	2240      	movs	r2, #64	@ 0x40
 8010ffe:	4082      	lsls	r2, r0
 8011000:	4313      	orrs	r3, r2
 8011002:	3401      	adds	r4, #1
 8011004:	9304      	str	r3, [sp, #16]
 8011006:	f814 1b01 	ldrb.w	r1, [r4], #1
 801100a:	4829      	ldr	r0, [pc, #164]	@ (80110b0 <_vfiprintf_r+0x220>)
 801100c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8011010:	2206      	movs	r2, #6
 8011012:	f7ef f975 	bl	8000300 <memchr>
 8011016:	2800      	cmp	r0, #0
 8011018:	d03f      	beq.n	801109a <_vfiprintf_r+0x20a>
 801101a:	4b26      	ldr	r3, [pc, #152]	@ (80110b4 <_vfiprintf_r+0x224>)
 801101c:	bb1b      	cbnz	r3, 8011066 <_vfiprintf_r+0x1d6>
 801101e:	9b03      	ldr	r3, [sp, #12]
 8011020:	3307      	adds	r3, #7
 8011022:	f023 0307 	bic.w	r3, r3, #7
 8011026:	3308      	adds	r3, #8
 8011028:	9303      	str	r3, [sp, #12]
 801102a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801102c:	443b      	add	r3, r7
 801102e:	9309      	str	r3, [sp, #36]	@ 0x24
 8011030:	e76a      	b.n	8010f08 <_vfiprintf_r+0x78>
 8011032:	fb0c 3202 	mla	r2, ip, r2, r3
 8011036:	460c      	mov	r4, r1
 8011038:	2001      	movs	r0, #1
 801103a:	e7a8      	b.n	8010f8e <_vfiprintf_r+0xfe>
 801103c:	2300      	movs	r3, #0
 801103e:	3401      	adds	r4, #1
 8011040:	9305      	str	r3, [sp, #20]
 8011042:	4619      	mov	r1, r3
 8011044:	f04f 0c0a 	mov.w	ip, #10
 8011048:	4620      	mov	r0, r4
 801104a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801104e:	3a30      	subs	r2, #48	@ 0x30
 8011050:	2a09      	cmp	r2, #9
 8011052:	d903      	bls.n	801105c <_vfiprintf_r+0x1cc>
 8011054:	2b00      	cmp	r3, #0
 8011056:	d0c6      	beq.n	8010fe6 <_vfiprintf_r+0x156>
 8011058:	9105      	str	r1, [sp, #20]
 801105a:	e7c4      	b.n	8010fe6 <_vfiprintf_r+0x156>
 801105c:	fb0c 2101 	mla	r1, ip, r1, r2
 8011060:	4604      	mov	r4, r0
 8011062:	2301      	movs	r3, #1
 8011064:	e7f0      	b.n	8011048 <_vfiprintf_r+0x1b8>
 8011066:	ab03      	add	r3, sp, #12
 8011068:	9300      	str	r3, [sp, #0]
 801106a:	462a      	mov	r2, r5
 801106c:	4b12      	ldr	r3, [pc, #72]	@ (80110b8 <_vfiprintf_r+0x228>)
 801106e:	a904      	add	r1, sp, #16
 8011070:	4630      	mov	r0, r6
 8011072:	f7fd fea5 	bl	800edc0 <_printf_float>
 8011076:	4607      	mov	r7, r0
 8011078:	1c78      	adds	r0, r7, #1
 801107a:	d1d6      	bne.n	801102a <_vfiprintf_r+0x19a>
 801107c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801107e:	07d9      	lsls	r1, r3, #31
 8011080:	d405      	bmi.n	801108e <_vfiprintf_r+0x1fe>
 8011082:	89ab      	ldrh	r3, [r5, #12]
 8011084:	059a      	lsls	r2, r3, #22
 8011086:	d402      	bmi.n	801108e <_vfiprintf_r+0x1fe>
 8011088:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801108a:	f7fe fd13 	bl	800fab4 <__retarget_lock_release_recursive>
 801108e:	89ab      	ldrh	r3, [r5, #12]
 8011090:	065b      	lsls	r3, r3, #25
 8011092:	f53f af1f 	bmi.w	8010ed4 <_vfiprintf_r+0x44>
 8011096:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011098:	e71e      	b.n	8010ed8 <_vfiprintf_r+0x48>
 801109a:	ab03      	add	r3, sp, #12
 801109c:	9300      	str	r3, [sp, #0]
 801109e:	462a      	mov	r2, r5
 80110a0:	4b05      	ldr	r3, [pc, #20]	@ (80110b8 <_vfiprintf_r+0x228>)
 80110a2:	a904      	add	r1, sp, #16
 80110a4:	4630      	mov	r0, r6
 80110a6:	f7fe f913 	bl	800f2d0 <_printf_i>
 80110aa:	e7e4      	b.n	8011076 <_vfiprintf_r+0x1e6>
 80110ac:	08013c0a 	.word	0x08013c0a
 80110b0:	08013c14 	.word	0x08013c14
 80110b4:	0800edc1 	.word	0x0800edc1
 80110b8:	08010e6b 	.word	0x08010e6b
 80110bc:	08013c10 	.word	0x08013c10

080110c0 <__sflush_r>:
 80110c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80110c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80110c8:	0716      	lsls	r6, r2, #28
 80110ca:	4605      	mov	r5, r0
 80110cc:	460c      	mov	r4, r1
 80110ce:	d454      	bmi.n	801117a <__sflush_r+0xba>
 80110d0:	684b      	ldr	r3, [r1, #4]
 80110d2:	2b00      	cmp	r3, #0
 80110d4:	dc02      	bgt.n	80110dc <__sflush_r+0x1c>
 80110d6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80110d8:	2b00      	cmp	r3, #0
 80110da:	dd48      	ble.n	801116e <__sflush_r+0xae>
 80110dc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80110de:	2e00      	cmp	r6, #0
 80110e0:	d045      	beq.n	801116e <__sflush_r+0xae>
 80110e2:	2300      	movs	r3, #0
 80110e4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80110e8:	682f      	ldr	r7, [r5, #0]
 80110ea:	6a21      	ldr	r1, [r4, #32]
 80110ec:	602b      	str	r3, [r5, #0]
 80110ee:	d030      	beq.n	8011152 <__sflush_r+0x92>
 80110f0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80110f2:	89a3      	ldrh	r3, [r4, #12]
 80110f4:	0759      	lsls	r1, r3, #29
 80110f6:	d505      	bpl.n	8011104 <__sflush_r+0x44>
 80110f8:	6863      	ldr	r3, [r4, #4]
 80110fa:	1ad2      	subs	r2, r2, r3
 80110fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80110fe:	b10b      	cbz	r3, 8011104 <__sflush_r+0x44>
 8011100:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011102:	1ad2      	subs	r2, r2, r3
 8011104:	2300      	movs	r3, #0
 8011106:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8011108:	6a21      	ldr	r1, [r4, #32]
 801110a:	4628      	mov	r0, r5
 801110c:	47b0      	blx	r6
 801110e:	1c43      	adds	r3, r0, #1
 8011110:	89a3      	ldrh	r3, [r4, #12]
 8011112:	d106      	bne.n	8011122 <__sflush_r+0x62>
 8011114:	6829      	ldr	r1, [r5, #0]
 8011116:	291d      	cmp	r1, #29
 8011118:	d82b      	bhi.n	8011172 <__sflush_r+0xb2>
 801111a:	4a2a      	ldr	r2, [pc, #168]	@ (80111c4 <__sflush_r+0x104>)
 801111c:	40ca      	lsrs	r2, r1
 801111e:	07d6      	lsls	r6, r2, #31
 8011120:	d527      	bpl.n	8011172 <__sflush_r+0xb2>
 8011122:	2200      	movs	r2, #0
 8011124:	6062      	str	r2, [r4, #4]
 8011126:	04d9      	lsls	r1, r3, #19
 8011128:	6922      	ldr	r2, [r4, #16]
 801112a:	6022      	str	r2, [r4, #0]
 801112c:	d504      	bpl.n	8011138 <__sflush_r+0x78>
 801112e:	1c42      	adds	r2, r0, #1
 8011130:	d101      	bne.n	8011136 <__sflush_r+0x76>
 8011132:	682b      	ldr	r3, [r5, #0]
 8011134:	b903      	cbnz	r3, 8011138 <__sflush_r+0x78>
 8011136:	6560      	str	r0, [r4, #84]	@ 0x54
 8011138:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801113a:	602f      	str	r7, [r5, #0]
 801113c:	b1b9      	cbz	r1, 801116e <__sflush_r+0xae>
 801113e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8011142:	4299      	cmp	r1, r3
 8011144:	d002      	beq.n	801114c <__sflush_r+0x8c>
 8011146:	4628      	mov	r0, r5
 8011148:	f7ff fab4 	bl	80106b4 <_free_r>
 801114c:	2300      	movs	r3, #0
 801114e:	6363      	str	r3, [r4, #52]	@ 0x34
 8011150:	e00d      	b.n	801116e <__sflush_r+0xae>
 8011152:	2301      	movs	r3, #1
 8011154:	4628      	mov	r0, r5
 8011156:	47b0      	blx	r6
 8011158:	4602      	mov	r2, r0
 801115a:	1c50      	adds	r0, r2, #1
 801115c:	d1c9      	bne.n	80110f2 <__sflush_r+0x32>
 801115e:	682b      	ldr	r3, [r5, #0]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d0c6      	beq.n	80110f2 <__sflush_r+0x32>
 8011164:	2b1d      	cmp	r3, #29
 8011166:	d001      	beq.n	801116c <__sflush_r+0xac>
 8011168:	2b16      	cmp	r3, #22
 801116a:	d11e      	bne.n	80111aa <__sflush_r+0xea>
 801116c:	602f      	str	r7, [r5, #0]
 801116e:	2000      	movs	r0, #0
 8011170:	e022      	b.n	80111b8 <__sflush_r+0xf8>
 8011172:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011176:	b21b      	sxth	r3, r3
 8011178:	e01b      	b.n	80111b2 <__sflush_r+0xf2>
 801117a:	690f      	ldr	r7, [r1, #16]
 801117c:	2f00      	cmp	r7, #0
 801117e:	d0f6      	beq.n	801116e <__sflush_r+0xae>
 8011180:	0793      	lsls	r3, r2, #30
 8011182:	680e      	ldr	r6, [r1, #0]
 8011184:	bf08      	it	eq
 8011186:	694b      	ldreq	r3, [r1, #20]
 8011188:	600f      	str	r7, [r1, #0]
 801118a:	bf18      	it	ne
 801118c:	2300      	movne	r3, #0
 801118e:	eba6 0807 	sub.w	r8, r6, r7
 8011192:	608b      	str	r3, [r1, #8]
 8011194:	f1b8 0f00 	cmp.w	r8, #0
 8011198:	dde9      	ble.n	801116e <__sflush_r+0xae>
 801119a:	6a21      	ldr	r1, [r4, #32]
 801119c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801119e:	4643      	mov	r3, r8
 80111a0:	463a      	mov	r2, r7
 80111a2:	4628      	mov	r0, r5
 80111a4:	47b0      	blx	r6
 80111a6:	2800      	cmp	r0, #0
 80111a8:	dc08      	bgt.n	80111bc <__sflush_r+0xfc>
 80111aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111ae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80111b2:	81a3      	strh	r3, [r4, #12]
 80111b4:	f04f 30ff 	mov.w	r0, #4294967295
 80111b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80111bc:	4407      	add	r7, r0
 80111be:	eba8 0800 	sub.w	r8, r8, r0
 80111c2:	e7e7      	b.n	8011194 <__sflush_r+0xd4>
 80111c4:	20400001 	.word	0x20400001

080111c8 <_fflush_r>:
 80111c8:	b538      	push	{r3, r4, r5, lr}
 80111ca:	690b      	ldr	r3, [r1, #16]
 80111cc:	4605      	mov	r5, r0
 80111ce:	460c      	mov	r4, r1
 80111d0:	b913      	cbnz	r3, 80111d8 <_fflush_r+0x10>
 80111d2:	2500      	movs	r5, #0
 80111d4:	4628      	mov	r0, r5
 80111d6:	bd38      	pop	{r3, r4, r5, pc}
 80111d8:	b118      	cbz	r0, 80111e2 <_fflush_r+0x1a>
 80111da:	6a03      	ldr	r3, [r0, #32]
 80111dc:	b90b      	cbnz	r3, 80111e2 <_fflush_r+0x1a>
 80111de:	f7fe fa21 	bl	800f624 <__sinit>
 80111e2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d0f3      	beq.n	80111d2 <_fflush_r+0xa>
 80111ea:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80111ec:	07d0      	lsls	r0, r2, #31
 80111ee:	d404      	bmi.n	80111fa <_fflush_r+0x32>
 80111f0:	0599      	lsls	r1, r3, #22
 80111f2:	d402      	bmi.n	80111fa <_fflush_r+0x32>
 80111f4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80111f6:	f7fe fc5c 	bl	800fab2 <__retarget_lock_acquire_recursive>
 80111fa:	4628      	mov	r0, r5
 80111fc:	4621      	mov	r1, r4
 80111fe:	f7ff ff5f 	bl	80110c0 <__sflush_r>
 8011202:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011204:	07da      	lsls	r2, r3, #31
 8011206:	4605      	mov	r5, r0
 8011208:	d4e4      	bmi.n	80111d4 <_fflush_r+0xc>
 801120a:	89a3      	ldrh	r3, [r4, #12]
 801120c:	059b      	lsls	r3, r3, #22
 801120e:	d4e1      	bmi.n	80111d4 <_fflush_r+0xc>
 8011210:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011212:	f7fe fc4f 	bl	800fab4 <__retarget_lock_release_recursive>
 8011216:	e7dd      	b.n	80111d4 <_fflush_r+0xc>

08011218 <__swhatbuf_r>:
 8011218:	b570      	push	{r4, r5, r6, lr}
 801121a:	460c      	mov	r4, r1
 801121c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8011220:	2900      	cmp	r1, #0
 8011222:	b096      	sub	sp, #88	@ 0x58
 8011224:	4615      	mov	r5, r2
 8011226:	461e      	mov	r6, r3
 8011228:	da0d      	bge.n	8011246 <__swhatbuf_r+0x2e>
 801122a:	89a3      	ldrh	r3, [r4, #12]
 801122c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8011230:	f04f 0100 	mov.w	r1, #0
 8011234:	bf14      	ite	ne
 8011236:	2340      	movne	r3, #64	@ 0x40
 8011238:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801123c:	2000      	movs	r0, #0
 801123e:	6031      	str	r1, [r6, #0]
 8011240:	602b      	str	r3, [r5, #0]
 8011242:	b016      	add	sp, #88	@ 0x58
 8011244:	bd70      	pop	{r4, r5, r6, pc}
 8011246:	466a      	mov	r2, sp
 8011248:	f000 f848 	bl	80112dc <_fstat_r>
 801124c:	2800      	cmp	r0, #0
 801124e:	dbec      	blt.n	801122a <__swhatbuf_r+0x12>
 8011250:	9901      	ldr	r1, [sp, #4]
 8011252:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8011256:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801125a:	4259      	negs	r1, r3
 801125c:	4159      	adcs	r1, r3
 801125e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8011262:	e7eb      	b.n	801123c <__swhatbuf_r+0x24>

08011264 <__smakebuf_r>:
 8011264:	898b      	ldrh	r3, [r1, #12]
 8011266:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011268:	079d      	lsls	r5, r3, #30
 801126a:	4606      	mov	r6, r0
 801126c:	460c      	mov	r4, r1
 801126e:	d507      	bpl.n	8011280 <__smakebuf_r+0x1c>
 8011270:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8011274:	6023      	str	r3, [r4, #0]
 8011276:	6123      	str	r3, [r4, #16]
 8011278:	2301      	movs	r3, #1
 801127a:	6163      	str	r3, [r4, #20]
 801127c:	b003      	add	sp, #12
 801127e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011280:	ab01      	add	r3, sp, #4
 8011282:	466a      	mov	r2, sp
 8011284:	f7ff ffc8 	bl	8011218 <__swhatbuf_r>
 8011288:	9f00      	ldr	r7, [sp, #0]
 801128a:	4605      	mov	r5, r0
 801128c:	4639      	mov	r1, r7
 801128e:	4630      	mov	r0, r6
 8011290:	f7fd fc7c 	bl	800eb8c <_malloc_r>
 8011294:	b948      	cbnz	r0, 80112aa <__smakebuf_r+0x46>
 8011296:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801129a:	059a      	lsls	r2, r3, #22
 801129c:	d4ee      	bmi.n	801127c <__smakebuf_r+0x18>
 801129e:	f023 0303 	bic.w	r3, r3, #3
 80112a2:	f043 0302 	orr.w	r3, r3, #2
 80112a6:	81a3      	strh	r3, [r4, #12]
 80112a8:	e7e2      	b.n	8011270 <__smakebuf_r+0xc>
 80112aa:	89a3      	ldrh	r3, [r4, #12]
 80112ac:	6020      	str	r0, [r4, #0]
 80112ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80112b2:	81a3      	strh	r3, [r4, #12]
 80112b4:	9b01      	ldr	r3, [sp, #4]
 80112b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80112ba:	b15b      	cbz	r3, 80112d4 <__smakebuf_r+0x70>
 80112bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80112c0:	4630      	mov	r0, r6
 80112c2:	f000 f81d 	bl	8011300 <_isatty_r>
 80112c6:	b128      	cbz	r0, 80112d4 <__smakebuf_r+0x70>
 80112c8:	89a3      	ldrh	r3, [r4, #12]
 80112ca:	f023 0303 	bic.w	r3, r3, #3
 80112ce:	f043 0301 	orr.w	r3, r3, #1
 80112d2:	81a3      	strh	r3, [r4, #12]
 80112d4:	89a3      	ldrh	r3, [r4, #12]
 80112d6:	431d      	orrs	r5, r3
 80112d8:	81a5      	strh	r5, [r4, #12]
 80112da:	e7cf      	b.n	801127c <__smakebuf_r+0x18>

080112dc <_fstat_r>:
 80112dc:	b538      	push	{r3, r4, r5, lr}
 80112de:	4d07      	ldr	r5, [pc, #28]	@ (80112fc <_fstat_r+0x20>)
 80112e0:	2300      	movs	r3, #0
 80112e2:	4604      	mov	r4, r0
 80112e4:	4608      	mov	r0, r1
 80112e6:	4611      	mov	r1, r2
 80112e8:	602b      	str	r3, [r5, #0]
 80112ea:	f7f1 f90f 	bl	800250c <_fstat>
 80112ee:	1c43      	adds	r3, r0, #1
 80112f0:	d102      	bne.n	80112f8 <_fstat_r+0x1c>
 80112f2:	682b      	ldr	r3, [r5, #0]
 80112f4:	b103      	cbz	r3, 80112f8 <_fstat_r+0x1c>
 80112f6:	6023      	str	r3, [r4, #0]
 80112f8:	bd38      	pop	{r3, r4, r5, pc}
 80112fa:	bf00      	nop
 80112fc:	24000a24 	.word	0x24000a24

08011300 <_isatty_r>:
 8011300:	b538      	push	{r3, r4, r5, lr}
 8011302:	4d06      	ldr	r5, [pc, #24]	@ (801131c <_isatty_r+0x1c>)
 8011304:	2300      	movs	r3, #0
 8011306:	4604      	mov	r4, r0
 8011308:	4608      	mov	r0, r1
 801130a:	602b      	str	r3, [r5, #0]
 801130c:	f7f1 f90e 	bl	800252c <_isatty>
 8011310:	1c43      	adds	r3, r0, #1
 8011312:	d102      	bne.n	801131a <_isatty_r+0x1a>
 8011314:	682b      	ldr	r3, [r5, #0]
 8011316:	b103      	cbz	r3, 801131a <_isatty_r+0x1a>
 8011318:	6023      	str	r3, [r4, #0]
 801131a:	bd38      	pop	{r3, r4, r5, pc}
 801131c:	24000a24 	.word	0x24000a24

08011320 <__assert_func>:
 8011320:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011322:	4614      	mov	r4, r2
 8011324:	461a      	mov	r2, r3
 8011326:	4b09      	ldr	r3, [pc, #36]	@ (801134c <__assert_func+0x2c>)
 8011328:	681b      	ldr	r3, [r3, #0]
 801132a:	4605      	mov	r5, r0
 801132c:	68d8      	ldr	r0, [r3, #12]
 801132e:	b14c      	cbz	r4, 8011344 <__assert_func+0x24>
 8011330:	4b07      	ldr	r3, [pc, #28]	@ (8011350 <__assert_func+0x30>)
 8011332:	9100      	str	r1, [sp, #0]
 8011334:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8011338:	4906      	ldr	r1, [pc, #24]	@ (8011354 <__assert_func+0x34>)
 801133a:	462b      	mov	r3, r5
 801133c:	f000 f842 	bl	80113c4 <fiprintf>
 8011340:	f000 f852 	bl	80113e8 <abort>
 8011344:	4b04      	ldr	r3, [pc, #16]	@ (8011358 <__assert_func+0x38>)
 8011346:	461c      	mov	r4, r3
 8011348:	e7f3      	b.n	8011332 <__assert_func+0x12>
 801134a:	bf00      	nop
 801134c:	2400003c 	.word	0x2400003c
 8011350:	08013c25 	.word	0x08013c25
 8011354:	08013c32 	.word	0x08013c32
 8011358:	08013c60 	.word	0x08013c60

0801135c <_calloc_r>:
 801135c:	b570      	push	{r4, r5, r6, lr}
 801135e:	fba1 5402 	umull	r5, r4, r1, r2
 8011362:	b934      	cbnz	r4, 8011372 <_calloc_r+0x16>
 8011364:	4629      	mov	r1, r5
 8011366:	f7fd fc11 	bl	800eb8c <_malloc_r>
 801136a:	4606      	mov	r6, r0
 801136c:	b928      	cbnz	r0, 801137a <_calloc_r+0x1e>
 801136e:	4630      	mov	r0, r6
 8011370:	bd70      	pop	{r4, r5, r6, pc}
 8011372:	220c      	movs	r2, #12
 8011374:	6002      	str	r2, [r0, #0]
 8011376:	2600      	movs	r6, #0
 8011378:	e7f9      	b.n	801136e <_calloc_r+0x12>
 801137a:	462a      	mov	r2, r5
 801137c:	4621      	mov	r1, r4
 801137e:	f7fe facf 	bl	800f920 <memset>
 8011382:	e7f4      	b.n	801136e <_calloc_r+0x12>

08011384 <__ascii_mbtowc>:
 8011384:	b082      	sub	sp, #8
 8011386:	b901      	cbnz	r1, 801138a <__ascii_mbtowc+0x6>
 8011388:	a901      	add	r1, sp, #4
 801138a:	b142      	cbz	r2, 801139e <__ascii_mbtowc+0x1a>
 801138c:	b14b      	cbz	r3, 80113a2 <__ascii_mbtowc+0x1e>
 801138e:	7813      	ldrb	r3, [r2, #0]
 8011390:	600b      	str	r3, [r1, #0]
 8011392:	7812      	ldrb	r2, [r2, #0]
 8011394:	1e10      	subs	r0, r2, #0
 8011396:	bf18      	it	ne
 8011398:	2001      	movne	r0, #1
 801139a:	b002      	add	sp, #8
 801139c:	4770      	bx	lr
 801139e:	4610      	mov	r0, r2
 80113a0:	e7fb      	b.n	801139a <__ascii_mbtowc+0x16>
 80113a2:	f06f 0001 	mvn.w	r0, #1
 80113a6:	e7f8      	b.n	801139a <__ascii_mbtowc+0x16>

080113a8 <__ascii_wctomb>:
 80113a8:	4603      	mov	r3, r0
 80113aa:	4608      	mov	r0, r1
 80113ac:	b141      	cbz	r1, 80113c0 <__ascii_wctomb+0x18>
 80113ae:	2aff      	cmp	r2, #255	@ 0xff
 80113b0:	d904      	bls.n	80113bc <__ascii_wctomb+0x14>
 80113b2:	228a      	movs	r2, #138	@ 0x8a
 80113b4:	601a      	str	r2, [r3, #0]
 80113b6:	f04f 30ff 	mov.w	r0, #4294967295
 80113ba:	4770      	bx	lr
 80113bc:	700a      	strb	r2, [r1, #0]
 80113be:	2001      	movs	r0, #1
 80113c0:	4770      	bx	lr
	...

080113c4 <fiprintf>:
 80113c4:	b40e      	push	{r1, r2, r3}
 80113c6:	b503      	push	{r0, r1, lr}
 80113c8:	4601      	mov	r1, r0
 80113ca:	ab03      	add	r3, sp, #12
 80113cc:	4805      	ldr	r0, [pc, #20]	@ (80113e4 <fiprintf+0x20>)
 80113ce:	f853 2b04 	ldr.w	r2, [r3], #4
 80113d2:	6800      	ldr	r0, [r0, #0]
 80113d4:	9301      	str	r3, [sp, #4]
 80113d6:	f7ff fd5b 	bl	8010e90 <_vfiprintf_r>
 80113da:	b002      	add	sp, #8
 80113dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80113e0:	b003      	add	sp, #12
 80113e2:	4770      	bx	lr
 80113e4:	2400003c 	.word	0x2400003c

080113e8 <abort>:
 80113e8:	b508      	push	{r3, lr}
 80113ea:	2006      	movs	r0, #6
 80113ec:	f000 f82c 	bl	8011448 <raise>
 80113f0:	2001      	movs	r0, #1
 80113f2:	f7f1 f857 	bl	80024a4 <_exit>

080113f6 <_raise_r>:
 80113f6:	291f      	cmp	r1, #31
 80113f8:	b538      	push	{r3, r4, r5, lr}
 80113fa:	4605      	mov	r5, r0
 80113fc:	460c      	mov	r4, r1
 80113fe:	d904      	bls.n	801140a <_raise_r+0x14>
 8011400:	2316      	movs	r3, #22
 8011402:	6003      	str	r3, [r0, #0]
 8011404:	f04f 30ff 	mov.w	r0, #4294967295
 8011408:	bd38      	pop	{r3, r4, r5, pc}
 801140a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801140c:	b112      	cbz	r2, 8011414 <_raise_r+0x1e>
 801140e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8011412:	b94b      	cbnz	r3, 8011428 <_raise_r+0x32>
 8011414:	4628      	mov	r0, r5
 8011416:	f000 f831 	bl	801147c <_getpid_r>
 801141a:	4622      	mov	r2, r4
 801141c:	4601      	mov	r1, r0
 801141e:	4628      	mov	r0, r5
 8011420:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011424:	f000 b818 	b.w	8011458 <_kill_r>
 8011428:	2b01      	cmp	r3, #1
 801142a:	d00a      	beq.n	8011442 <_raise_r+0x4c>
 801142c:	1c59      	adds	r1, r3, #1
 801142e:	d103      	bne.n	8011438 <_raise_r+0x42>
 8011430:	2316      	movs	r3, #22
 8011432:	6003      	str	r3, [r0, #0]
 8011434:	2001      	movs	r0, #1
 8011436:	e7e7      	b.n	8011408 <_raise_r+0x12>
 8011438:	2100      	movs	r1, #0
 801143a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801143e:	4620      	mov	r0, r4
 8011440:	4798      	blx	r3
 8011442:	2000      	movs	r0, #0
 8011444:	e7e0      	b.n	8011408 <_raise_r+0x12>
	...

08011448 <raise>:
 8011448:	4b02      	ldr	r3, [pc, #8]	@ (8011454 <raise+0xc>)
 801144a:	4601      	mov	r1, r0
 801144c:	6818      	ldr	r0, [r3, #0]
 801144e:	f7ff bfd2 	b.w	80113f6 <_raise_r>
 8011452:	bf00      	nop
 8011454:	2400003c 	.word	0x2400003c

08011458 <_kill_r>:
 8011458:	b538      	push	{r3, r4, r5, lr}
 801145a:	4d07      	ldr	r5, [pc, #28]	@ (8011478 <_kill_r+0x20>)
 801145c:	2300      	movs	r3, #0
 801145e:	4604      	mov	r4, r0
 8011460:	4608      	mov	r0, r1
 8011462:	4611      	mov	r1, r2
 8011464:	602b      	str	r3, [r5, #0]
 8011466:	f7f1 f80d 	bl	8002484 <_kill>
 801146a:	1c43      	adds	r3, r0, #1
 801146c:	d102      	bne.n	8011474 <_kill_r+0x1c>
 801146e:	682b      	ldr	r3, [r5, #0]
 8011470:	b103      	cbz	r3, 8011474 <_kill_r+0x1c>
 8011472:	6023      	str	r3, [r4, #0]
 8011474:	bd38      	pop	{r3, r4, r5, pc}
 8011476:	bf00      	nop
 8011478:	24000a24 	.word	0x24000a24

0801147c <_getpid_r>:
 801147c:	f7f0 bffa 	b.w	8002474 <_getpid>

08011480 <_init>:
 8011480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011482:	bf00      	nop
 8011484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011486:	bc08      	pop	{r3}
 8011488:	469e      	mov	lr, r3
 801148a:	4770      	bx	lr

0801148c <_fini>:
 801148c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801148e:	bf00      	nop
 8011490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011492:	bc08      	pop	{r3}
 8011494:	469e      	mov	lr, r3
 8011496:	4770      	bx	lr

Disassembly of section .itcm_code:

00000000 <fast_fn>:
{
   0:	b480      	push	{r7}
   2:	af00      	add	r7, sp, #0
   4:	4b03      	ldr	r3, [pc, #12]	@ (14 <fast_fn+0x14>)
  switch (RCC->CFGR & RCC_CFGR_SWS)
   6:	227b      	movs	r2, #123	@ 0x7b
   8:	701a      	strb	r2, [r3, #0]
   a:	bf00      	nop
   c:	46bd      	mov	sp, r7
   e:	f85d 7b04 	ldr.w	r7, [sp], #4
  12:	4770      	bx	lr
  14:	20000000 	.word	0x20000000
